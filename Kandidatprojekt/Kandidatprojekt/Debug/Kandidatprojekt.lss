
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00002ab0  00002b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014c  00800240  00800240  00002c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b14  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d1b  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d5b  00000000  00000000  000076eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000628  00000000  00000000  0000a448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010dc1  00000000  00000000  0000aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018c7  00000000  00000000  0001b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0001d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000039c8  00000000  00000000  0001d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_19>
      50:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 eb       	ldi	r30, 0xB0	; 176
      a0:	fa e2       	ldi	r31, 0x2A	; 42
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 34       	cpi	r26, 0x40	; 64
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a0 e4       	ldi	r26, 0x40	; 64
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 38       	cpi	r26, 0x8C	; 140
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 48 0a 	call	0x1490	; 0x1490 <main>
      c6:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <doFuzzy>:
      ec:	2f 92       	push	r2
      ee:	3f 92       	push	r3
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	c4 5c       	subi	r28, 0xC4	; 196
     116:	d1 40       	sbci	r29, 0x01	; 1
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	2c 01       	movw	r4, r24
     124:	6b 01       	movw	r12, r22
     126:	88 e0       	ldi	r24, 0x08	; 8
     128:	e4 e0       	ldi	r30, 0x04	; 4
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	de 01       	movw	r26, r28
     12e:	11 96       	adiw	r26, 0x01	; 1
     130:	01 90       	ld	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	8a 95       	dec	r24
     136:	e1 f7       	brne	.-8      	; 0x130 <doFuzzy+0x44>
     138:	3e 01       	movw	r6, r28
     13a:	21 e1       	ldi	r18, 0x11	; 17
     13c:	62 0e       	add	r6, r18
     13e:	71 1c       	adc	r7, r1
     140:	0f 2e       	mov	r0, r31
     142:	f7 e8       	ldi	r31, 0x87	; 135
     144:	ef 2e       	mov	r14, r31
     146:	f1 2c       	mov	r15, r1
     148:	f0 2d       	mov	r31, r0
     14a:	08 e7       	ldi	r16, 0x78	; 120
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	24 e6       	ldi	r18, 0x64	; 100
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	43 e6       	ldi	r20, 0x63	; 99
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	6c e0       	ldi	r22, 0x0C	; 12
     158:	71 e0       	ldi	r23, 0x01	; 1
     15a:	c3 01       	movw	r24, r6
     15c:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     160:	4e 01       	movw	r8, r28
     162:	47 e2       	ldi	r20, 0x27	; 39
     164:	84 0e       	add	r8, r20
     166:	91 1c       	adc	r9, r1
     168:	0f 2e       	mov	r0, r31
     16a:	ff ea       	ldi	r31, 0xAF	; 175
     16c:	ef 2e       	mov	r14, r31
     16e:	f1 2c       	mov	r15, r1
     170:	f0 2d       	mov	r31, r0
     172:	0b e9       	ldi	r16, 0x9B	; 155
     174:	10 e0       	ldi	r17, 0x00	; 0
     176:	21 e9       	ldi	r18, 0x91	; 145
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	4d e7       	ldi	r20, 0x7D	; 125
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	66 e1       	ldi	r22, 0x16	; 22
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	c4 01       	movw	r24, r8
     184:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     188:	5e 01       	movw	r10, r28
     18a:	5d e3       	ldi	r21, 0x3D	; 61
     18c:	a5 0e       	add	r10, r21
     18e:	b1 1c       	adc	r11, r1
     190:	0f 2e       	mov	r0, r31
     192:	f8 ec       	ldi	r31, 0xC8	; 200
     194:	ef 2e       	mov	r14, r31
     196:	f1 2c       	mov	r15, r1
     198:	f0 2d       	mov	r31, r0
     19a:	07 ec       	ldi	r16, 0xC7	; 199
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	24 eb       	ldi	r18, 0xB4	; 180
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	45 ea       	ldi	r20, 0xA5	; 165
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	6d e1       	ldi	r22, 0x1D	; 29
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	c5 01       	movw	r24, r10
     1ac:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     1b0:	7e 86       	std	Y+14, r7	; 0x0e
     1b2:	6d 86       	std	Y+13, r6	; 0x0d
     1b4:	9e a2       	std	Y+38, r9	; 0x26
     1b6:	8d a2       	std	Y+37, r8	; 0x25
     1b8:	bc ae       	std	Y+60, r11	; 0x3c
     1ba:	ab ae       	std	Y+59, r10	; 0x3b
     1bc:	63 96       	adiw	r28, 0x13	; 19
     1be:	1f ae       	std	Y+63, r1	; 0x3f
     1c0:	1e ae       	std	Y+62, r1	; 0x3e
     1c2:	63 97       	sbiw	r28, 0x13	; 19
     1c4:	84 e6       	ldi	r24, 0x64	; 100
     1c6:	48 16       	cp	r4, r24
     1c8:	51 04       	cpc	r5, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <doFuzzy+0xea>
     1cc:	84 e6       	ldi	r24, 0x64	; 100
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9c 87       	std	Y+12, r25	; 0x0c
     1d2:	8b 87       	std	Y+11, r24	; 0x0b
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <doFuzzy+0x100>
     1d6:	a8 ec       	ldi	r26, 0xC8	; 200
     1d8:	4a 16       	cp	r4, r26
     1da:	51 04       	cpc	r5, r1
     1dc:	2c f0       	brlt	.+10     	; 0x1e8 <doFuzzy+0xfc>
     1de:	87 ec       	ldi	r24, 0xC7	; 199
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	9c 87       	std	Y+12, r25	; 0x0c
     1e4:	8b 87       	std	Y+11, r24	; 0x0b
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <doFuzzy+0x100>
     1e8:	5c 86       	std	Y+12, r5	; 0x0c
     1ea:	4b 86       	std	Y+11, r4	; 0x0b
     1ec:	88 e0       	ldi	r24, 0x08	; 8
     1ee:	e6 e2       	ldi	r30, 0x26	; 38
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	de 01       	movw	r26, r28
     1f4:	ad 5a       	subi	r26, 0xAD	; 173
     1f6:	bf 4f       	sbci	r27, 0xFF	; 255
     1f8:	01 90       	ld	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	8a 95       	dec	r24
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <doFuzzy+0x10c>
     200:	3e 01       	movw	r6, r28
     202:	b3 e6       	ldi	r27, 0x63	; 99
     204:	6b 0e       	add	r6, r27
     206:	71 1c       	adc	r7, r1
     208:	0f 2e       	mov	r0, r31
     20a:	f3 e2       	ldi	r31, 0x23	; 35
     20c:	ef 2e       	mov	r14, r31
     20e:	f1 2c       	mov	r15, r1
     210:	f0 2d       	mov	r31, r0
     212:	04 e1       	ldi	r16, 0x14	; 20
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	6e e2       	ldi	r22, 0x2E	; 46
     220:	71 e0       	ldi	r23, 0x01	; 1
     222:	c3 01       	movw	r24, r6
     224:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     228:	4e 01       	movw	r8, r28
     22a:	e9 e7       	ldi	r30, 0x79	; 121
     22c:	8e 0e       	add	r8, r30
     22e:	91 1c       	adc	r9, r1
     230:	0f 2e       	mov	r0, r31
     232:	f7 e3       	ldi	r31, 0x37	; 55
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	08 e2       	ldi	r16, 0x28	; 40
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	23 e2       	ldi	r18, 0x23	; 35
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	4f e0       	ldi	r20, 0x0F	; 15
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	66 e3       	ldi	r22, 0x36	; 54
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	c4 01       	movw	r24, r8
     24c:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     250:	5e 01       	movw	r10, r28
     252:	ff e8       	ldi	r31, 0x8F	; 143
     254:	af 0e       	add	r10, r31
     256:	b1 1c       	adc	r11, r1
     258:	0f 2e       	mov	r0, r31
     25a:	fb e4       	ldi	r31, 0x4B	; 75
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 2c       	mov	r15, r1
     260:	f0 2d       	mov	r31, r0
     262:	0a e4       	ldi	r16, 0x4A	; 74
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	22 e3       	ldi	r18, 0x32	; 50
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	48 e2       	ldi	r20, 0x28	; 40
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	6d e3       	ldi	r22, 0x3D	; 61
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	c5 01       	movw	r24, r10
     274:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     278:	a1 96       	adiw	r28, 0x21	; 33
     27a:	7f ae       	std	Y+63, r7	; 0x3f
     27c:	6e ae       	std	Y+62, r6	; 0x3e
     27e:	a1 97       	sbiw	r28, 0x21	; 33
     280:	d3 01       	movw	r26, r6
     282:	55 96       	adiw	r26, 0x15	; 21
     284:	9c 92       	st	X, r9
     286:	8e 92       	st	-X, r8
     288:	54 97       	sbiw	r26, 0x14	; 20
     28a:	f4 01       	movw	r30, r8
     28c:	b5 8a       	std	Z+21, r11	; 0x15
     28e:	a4 8a       	std	Z+20, r10	; 0x14
     290:	d5 01       	movw	r26, r10
     292:	55 96       	adiw	r26, 0x15	; 21
     294:	1c 92       	st	X, r1
     296:	1e 92       	st	-X, r1
     298:	54 97       	sbiw	r26, 0x14	; 20
     29a:	1c 14       	cp	r1, r12
     29c:	1d 04       	cpc	r1, r13
     29e:	3c f0       	brlt	.+14     	; 0x2ae <doFuzzy+0x1c2>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	6f 96       	adiw	r28, 0x1f	; 31
     2a6:	9f af       	std	Y+63, r25	; 0x3f
     2a8:	8e af       	std	Y+62, r24	; 0x3e
     2aa:	6f 97       	sbiw	r28, 0x1f	; 31
     2ac:	0f c0       	rjmp	.+30     	; 0x2cc <doFuzzy+0x1e0>
     2ae:	bb e4       	ldi	r27, 0x4B	; 75
     2b0:	cb 16       	cp	r12, r27
     2b2:	d1 04       	cpc	r13, r1
     2b4:	3c f0       	brlt	.+14     	; 0x2c4 <doFuzzy+0x1d8>
     2b6:	8a e4       	ldi	r24, 0x4A	; 74
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	6f 96       	adiw	r28, 0x1f	; 31
     2bc:	9f af       	std	Y+63, r25	; 0x3f
     2be:	8e af       	std	Y+62, r24	; 0x3e
     2c0:	6f 97       	sbiw	r28, 0x1f	; 31
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <doFuzzy+0x1e0>
     2c4:	6f 96       	adiw	r28, 0x1f	; 31
     2c6:	df ae       	std	Y+63, r13	; 0x3f
     2c8:	ce ae       	std	Y+62, r12	; 0x3e
     2ca:	6f 97       	sbiw	r28, 0x1f	; 31
     2cc:	1e 01       	movw	r2, r28
     2ce:	e5 ea       	ldi	r30, 0xA5	; 165
     2d0:	2e 0e       	add	r2, r30
     2d2:	31 1c       	adc	r3, r1
     2d4:	89 e0       	ldi	r24, 0x09	; 9
     2d6:	e4 e4       	ldi	r30, 0x44	; 68
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	d1 01       	movw	r26, r2
     2dc:	01 90       	ld	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	8a 95       	dec	r24
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <doFuzzy+0x1f0>
     2e4:	2e 01       	movw	r4, r28
     2e6:	f5 eb       	ldi	r31, 0xB5	; 181
     2e8:	4f 0e       	add	r4, r31
     2ea:	51 1c       	adc	r5, r1
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fc e9       	ldi	r31, 0x9C	; 156
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f9 e0       	ldi	r31, 0x09	; 9
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	08 e3       	ldi	r16, 0x38	; 56
     2fa:	19 e0       	ldi	r17, 0x09	; 9
     2fc:	28 e3       	ldi	r18, 0x38	; 56
     2fe:	39 e0       	ldi	r19, 0x09	; 9
     300:	47 e3       	ldi	r20, 0x37	; 55
     302:	59 e0       	ldi	r21, 0x09	; 9
     304:	6d e4       	ldi	r22, 0x4D	; 77
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	c2 01       	movw	r24, r4
     30a:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     30e:	3e 01       	movw	r6, r28
     310:	2b ec       	ldi	r18, 0xCB	; 203
     312:	62 0e       	add	r6, r18
     314:	71 1c       	adc	r7, r1
     316:	0f 2e       	mov	r0, r31
     318:	e1 2c       	mov	r14, r1
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	ff 2e       	mov	r15, r31
     31e:	f0 2d       	mov	r31, r0
     320:	0c e9       	ldi	r16, 0x9C	; 156
     322:	19 e0       	ldi	r17, 0x09	; 9
     324:	2c e9       	ldi	r18, 0x9C	; 156
     326:	39 e0       	ldi	r19, 0x09	; 9
     328:	40 e6       	ldi	r20, 0x60	; 96
     32a:	59 e0       	ldi	r21, 0x09	; 9
     32c:	65 e3       	ldi	r22, 0x35	; 53
     32e:	72 e0       	ldi	r23, 0x02	; 2
     330:	c3 01       	movw	r24, r6
     332:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     336:	6e 01       	movw	r12, r28
     338:	41 ee       	ldi	r20, 0xE1	; 225
     33a:	c4 0e       	add	r12, r20
     33c:	d1 1c       	adc	r13, r1
     33e:	0f 2e       	mov	r0, r31
     340:	f0 ea       	ldi	r31, 0xA0	; 160
     342:	ef 2e       	mov	r14, r31
     344:	fa e0       	ldi	r31, 0x0A	; 10
     346:	ff 2e       	mov	r15, r31
     348:	f0 2d       	mov	r31, r0
     34a:	04 e6       	ldi	r16, 0x64	; 100
     34c:	1a e0       	ldi	r17, 0x0A	; 10
     34e:	24 e6       	ldi	r18, 0x64	; 100
     350:	3a e0       	ldi	r19, 0x0A	; 10
     352:	48 ed       	ldi	r20, 0xD8	; 216
     354:	59 e0       	ldi	r21, 0x09	; 9
     356:	67 e5       	ldi	r22, 0x57	; 87
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	c6 01       	movw	r24, r12
     35c:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     360:	4e 01       	movw	r8, r28
     362:	57 ef       	ldi	r21, 0xF7	; 247
     364:	85 0e       	add	r8, r21
     366:	91 1c       	adc	r9, r1
     368:	0f 2e       	mov	r0, r31
     36a:	f4 e5       	ldi	r31, 0x54	; 84
     36c:	ef 2e       	mov	r14, r31
     36e:	fb e0       	ldi	r31, 0x0B	; 11
     370:	ff 2e       	mov	r15, r31
     372:	f0 2d       	mov	r31, r0
     374:	00 ef       	ldi	r16, 0xF0	; 240
     376:	1a e0       	ldi	r17, 0x0A	; 10
     378:	20 ef       	ldi	r18, 0xF0	; 240
     37a:	3a e0       	ldi	r19, 0x0A	; 10
     37c:	4c e8       	ldi	r20, 0x8C	; 140
     37e:	5a e0       	ldi	r21, 0x0A	; 10
     380:	64 e2       	ldi	r22, 0x24	; 36
     382:	72 e0       	ldi	r23, 0x02	; 2
     384:	c4 01       	movw	r24, r8
     386:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>
     38a:	5e 01       	movw	r10, r28
     38c:	83 ef       	ldi	r24, 0xF3	; 243
     38e:	a8 1a       	sub	r10, r24
     390:	8e ef       	ldi	r24, 0xFE	; 254
     392:	b8 0a       	sbc	r11, r24
     394:	0f 2e       	mov	r0, r31
     396:	f1 e9       	ldi	r31, 0x91	; 145
     398:	ef 2e       	mov	r14, r31
     39a:	fb e0       	ldi	r31, 0x0B	; 11
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 2d       	mov	r31, r0
     3a0:	00 e9       	ldi	r16, 0x90	; 144
     3a2:	1b e0       	ldi	r17, 0x0B	; 11
     3a4:	20 e9       	ldi	r18, 0x90	; 144
     3a6:	3b e0       	ldi	r19, 0x0B	; 11
     3a8:	4c e2       	ldi	r20, 0x2C	; 44
     3aa:	5b e0       	ldi	r21, 0x0B	; 11
     3ac:	60 e6       	ldi	r22, 0x60	; 96
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	c5 01       	movw	r24, r10
     3b2:	ed d7       	rcall	.+4058   	; 0x138e <MATLAB_MF>
     3b4:	d1 01       	movw	r26, r2
     3b6:	1d 96       	adiw	r26, 0x0d	; 13
     3b8:	bc 92       	st	X, r11
     3ba:	ae 92       	st	-X, r10
     3bc:	1c 97       	sbiw	r26, 0x0c	; 12
     3be:	f5 01       	movw	r30, r10
     3c0:	95 8a       	std	Z+21, r9	; 0x15
     3c2:	84 8a       	std	Z+20, r8	; 0x14
     3c4:	d4 01       	movw	r26, r8
     3c6:	55 96       	adiw	r26, 0x15	; 21
     3c8:	dc 92       	st	X, r13
     3ca:	ce 92       	st	-X, r12
     3cc:	54 97       	sbiw	r26, 0x14	; 20
     3ce:	f6 01       	movw	r30, r12
     3d0:	75 8a       	std	Z+21, r7	; 0x15
     3d2:	64 8a       	std	Z+20, r6	; 0x14
     3d4:	d3 01       	movw	r26, r6
     3d6:	55 96       	adiw	r26, 0x15	; 21
     3d8:	5c 92       	st	X, r5
     3da:	4e 92       	st	-X, r4
     3dc:	54 97       	sbiw	r26, 0x14	; 20
     3de:	f2 01       	movw	r30, r4
     3e0:	15 8a       	std	Z+21, r1	; 0x15
     3e2:	14 8a       	std	Z+20, r1	; 0x14
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	90 93 63 03 	sts	0x0363, r25
     3ec:	80 93 62 03 	sts	0x0362, r24
     3f0:	e2 56       	subi	r30, 0x62	; 98
     3f2:	f1 09       	sbc	r31, r1
     3f4:	f8 8b       	std	Y+16, r31	; 0x10
     3f6:	ef 87       	std	Y+15, r30	; 0x0f
     3f8:	17 86       	std	Z+15, r1	; 0x0f
     3fa:	16 86       	std	Z+14, r1	; 0x0e
     3fc:	30 92 61 03 	sts	0x0361, r3
     400:	20 92 60 03 	sts	0x0360, r2
     404:	d1 01       	movw	r26, r2
     406:	1f 96       	adiw	r26, 0x0f	; 15
     408:	1c 92       	st	X, r1
     40a:	1e 92       	st	-X, r1
     40c:	1e 97       	sbiw	r26, 0x0e	; 14
     40e:	a2 58       	subi	r26, 0x82	; 130
     410:	bf 4f       	sbci	r27, 0xFF	; 255
     412:	83 01       	movw	r16, r6
     414:	06 5f       	subi	r16, 0xF6	; 246
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	11 96       	adiw	r26, 0x01	; 1
     41a:	1c 93       	st	X, r17
     41c:	0e 93       	st	-X, r16
     41e:	13 96       	adiw	r26, 0x03	; 3
     420:	1c 92       	st	X, r1
     422:	1e 92       	st	-X, r1
     424:	12 97       	sbiw	r26, 0x02	; 2
     426:	ae 01       	movw	r20, r28
     428:	49 5d       	subi	r20, 0xD9	; 217
     42a:	5e 4f       	sbci	r21, 0xFE	; 254
     42c:	3e 01       	movw	r6, r28
     42e:	e9 e9       	ldi	r30, 0x99	; 153
     430:	6e 0e       	add	r6, r30
     432:	71 1c       	adc	r7, r1
     434:	fa 01       	movw	r30, r20
     436:	71 82       	std	Z+1, r7	; 0x01
     438:	60 82       	st	Z, r6
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	12 82       	std	Z+2, r1	; 0x02
     43e:	86 5d       	subi	r24, 0xD6	; 214
     440:	9e 4f       	sbci	r25, 0xFE	; 254
     442:	7e 01       	movw	r14, r28
     444:	f1 e3       	ldi	r31, 0x31	; 49
     446:	ef 0e       	add	r14, r31
     448:	f1 1c       	adc	r15, r1
     44a:	fc 01       	movw	r30, r24
     44c:	f1 82       	std	Z+1, r15	; 0x01
     44e:	e0 82       	st	Z, r14
     450:	53 83       	std	Z+3, r21	; 0x03
     452:	42 83       	std	Z+2, r20	; 0x02
     454:	34 96       	adiw	r30, 0x04	; 4
     456:	91 83       	std	Z+1, r25	; 0x01
     458:	80 83       	st	Z, r24
     45a:	b3 83       	std	Z+3, r27	; 0x03
     45c:	a2 83       	std	Z+2, r26	; 0x02
     45e:	15 82       	std	Z+5, r1	; 0x05
     460:	14 82       	std	Z+4, r1	; 0x04
     462:	0a 96       	adiw	r24, 0x0a	; 10
     464:	2a e0       	ldi	r18, 0x0A	; 10
     466:	82 0e       	add	r8, r18
     468:	91 1c       	adc	r9, r1
     46a:	dc 01       	movw	r26, r24
     46c:	11 96       	adiw	r26, 0x01	; 1
     46e:	9c 92       	st	X, r9
     470:	8e 92       	st	-X, r8
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	1c 92       	st	X, r1
     476:	1e 92       	st	-X, r1
     478:	12 97       	sbiw	r26, 0x02	; 2
     47a:	be 01       	movw	r22, r28
     47c:	67 5c       	subi	r22, 0xC7	; 199
     47e:	7e 4f       	sbci	r23, 0xFE	; 254
     480:	db 01       	movw	r26, r22
     482:	11 96       	adiw	r26, 0x01	; 1
     484:	7c 92       	st	X, r7
     486:	6e 92       	st	-X, r6
     488:	13 96       	adiw	r26, 0x03	; 3
     48a:	1c 92       	st	X, r1
     48c:	1e 92       	st	-X, r1
     48e:	12 97       	sbiw	r26, 0x02	; 2
     490:	4a 5e       	subi	r20, 0xEA	; 234
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	9e 01       	movw	r18, r28
     496:	29 5b       	subi	r18, 0xB9	; 185
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	da 01       	movw	r26, r20
     49c:	11 96       	adiw	r26, 0x01	; 1
     49e:	3c 93       	st	X, r19
     4a0:	2e 93       	st	-X, r18
     4a2:	13 96       	adiw	r26, 0x03	; 3
     4a4:	7c 93       	st	X, r23
     4a6:	6e 93       	st	-X, r22
     4a8:	12 97       	sbiw	r26, 0x02	; 2
     4aa:	14 96       	adiw	r26, 0x04	; 4
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	5c 93       	st	X, r21
     4b0:	4e 93       	st	-X, r20
     4b2:	13 96       	adiw	r26, 0x03	; 3
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	12 97       	sbiw	r26, 0x02	; 2
     4ba:	15 96       	adiw	r26, 0x05	; 5
     4bc:	fc 93       	st	X, r31
     4be:	ee 93       	st	-X, r30
     4c0:	14 97       	sbiw	r26, 0x04	; 4
     4c2:	46 5f       	subi	r20, 0xF6	; 246
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	ea e0       	ldi	r30, 0x0A	; 10
     4c8:	ae 0e       	add	r10, r30
     4ca:	b1 1c       	adc	r11, r1
     4cc:	fa 01       	movw	r30, r20
     4ce:	b1 82       	std	Z+1, r11	; 0x01
     4d0:	a0 82       	st	Z, r10
     4d2:	13 82       	std	Z+3, r1	; 0x03
     4d4:	12 82       	std	Z+2, r1	; 0x02
     4d6:	5e 01       	movw	r10, r28
     4d8:	f5 eb       	ldi	r31, 0xB5	; 181
     4da:	af 1a       	sub	r10, r31
     4dc:	fe ef       	ldi	r31, 0xFE	; 254
     4de:	bf 0a       	sbc	r11, r31
     4e0:	82 5b       	subi	r24, 0xB2	; 178
     4e2:	91 09       	sbc	r25, r1
     4e4:	f5 01       	movw	r30, r10
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	13 82       	std	Z+3, r1	; 0x03
     4ec:	12 82       	std	Z+2, r1	; 0x02
     4ee:	6a 5e       	subi	r22, 0xEA	; 234
     4f0:	7f 4f       	sbci	r23, 0xFF	; 255
     4f2:	fb 01       	movw	r30, r22
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18
     4f8:	b3 82       	std	Z+3, r11	; 0x03
     4fa:	a2 82       	std	Z+2, r10	; 0x02
     4fc:	34 96       	adiw	r30, 0x04	; 4
     4fe:	71 83       	std	Z+1, r23	; 0x01
     500:	60 83       	st	Z, r22
     502:	53 83       	std	Z+3, r21	; 0x03
     504:	42 83       	std	Z+2, r20	; 0x02
     506:	b5 83       	std	Z+5, r27	; 0x05
     508:	a4 83       	std	Z+4, r26	; 0x04
     50a:	56 01       	movw	r10, r12
     50c:	4a e0       	ldi	r20, 0x0A	; 10
     50e:	a4 0e       	add	r10, r20
     510:	b1 1c       	adc	r11, r1
     512:	c7 5a       	subi	r28, 0xA7	; 167
     514:	de 4f       	sbci	r29, 0xFE	; 254
     516:	b9 82       	std	Y+1, r11	; 0x01
     518:	a8 82       	st	Y, r10
     51a:	c9 55       	subi	r28, 0x59	; 89
     51c:	d1 40       	sbci	r29, 0x01	; 1
     51e:	c5 5a       	subi	r28, 0xA5	; 165
     520:	de 4f       	sbci	r29, 0xFE	; 254
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	18 82       	st	Y, r1
     526:	cb 55       	subi	r28, 0x5B	; 91
     528:	d1 40       	sbci	r29, 0x01	; 1
     52a:	62 5f       	subi	r22, 0xF2	; 242
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	6e 01       	movw	r12, r28
     530:	5d e6       	ldi	r21, 0x6D	; 109
     532:	c5 0e       	add	r12, r21
     534:	d1 1c       	adc	r13, r1
     536:	db 01       	movw	r26, r22
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	dc 92       	st	X, r13
     53c:	ce 92       	st	-X, r12
     53e:	13 96       	adiw	r26, 0x03	; 3
     540:	1c 92       	st	X, r1
     542:	1e 92       	st	-X, r1
     544:	12 97       	sbiw	r26, 0x02	; 2
     546:	46 5e       	subi	r20, 0xE6	; 230
     548:	5f 4f       	sbci	r21, 0xFF	; 255
     54a:	da 01       	movw	r26, r20
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	3c 93       	st	X, r19
     550:	2e 93       	st	-X, r18
     552:	13 96       	adiw	r26, 0x03	; 3
     554:	7c 93       	st	X, r23
     556:	6e 93       	st	-X, r22
     558:	12 97       	sbiw	r26, 0x02	; 2
     55a:	22 5e       	subi	r18, 0xE2	; 226
     55c:	3e 4f       	sbci	r19, 0xFE	; 254
     55e:	d9 01       	movw	r26, r18
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	5c 93       	st	X, r21
     564:	4e 93       	st	-X, r20
     566:	49 e5       	ldi	r20, 0x59	; 89
     568:	51 e0       	ldi	r21, 0x01	; 1
     56a:	4c 0f       	add	r20, r28
     56c:	5d 1f       	adc	r21, r29
     56e:	13 96       	adiw	r26, 0x03	; 3
     570:	5c 93       	st	X, r21
     572:	4e 93       	st	-X, r20
     574:	12 97       	sbiw	r26, 0x02	; 2
     576:	15 96       	adiw	r26, 0x05	; 5
     578:	fc 93       	st	X, r31
     57a:	ee 93       	st	-X, r30
     57c:	14 97       	sbiw	r26, 0x04	; 4
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	5a e0       	ldi	r21, 0x0A	; 10
     582:	45 0e       	add	r4, r21
     584:	51 1c       	adc	r5, r1
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	5c 92       	st	X, r5
     58a:	4e 92       	st	-X, r4
     58c:	13 96       	adiw	r26, 0x03	; 3
     58e:	1c 92       	st	X, r1
     590:	1e 92       	st	-X, r1
     592:	12 97       	sbiw	r26, 0x02	; 2
     594:	2e 01       	movw	r4, r28
     596:	e1 e9       	ldi	r30, 0x91	; 145
     598:	4e 1a       	sub	r4, r30
     59a:	ee ef       	ldi	r30, 0xFE	; 254
     59c:	5e 0a       	sbc	r5, r30
     59e:	f2 01       	movw	r30, r4
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
     5a4:	13 82       	std	Z+3, r1	; 0x03
     5a6:	12 82       	std	Z+2, r1	; 0x02
     5a8:	6a 5e       	subi	r22, 0xEA	; 234
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	ae 01       	movw	r20, r28
     5ae:	45 5e       	subi	r20, 0xE5	; 229
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	fb 01       	movw	r30, r22
     5b4:	51 83       	std	Z+1, r21	; 0x01
     5b6:	40 83       	st	Z, r20
     5b8:	53 82       	std	Z+3, r5	; 0x03
     5ba:	42 82       	std	Z+2, r4	; 0x02
     5bc:	34 96       	adiw	r30, 0x04	; 4
     5be:	71 83       	std	Z+1, r23	; 0x01
     5c0:	60 83       	st	Z, r22
     5c2:	b3 83       	std	Z+3, r27	; 0x03
     5c4:	a2 83       	std	Z+2, r26	; 0x02
     5c6:	35 83       	std	Z+5, r19	; 0x05
     5c8:	24 83       	std	Z+4, r18	; 0x04
     5ca:	66 5f       	subi	r22, 0xF6	; 246
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	db 01       	movw	r26, r22
     5d0:	11 96       	adiw	r26, 0x01	; 1
     5d2:	bc 92       	st	X, r11
     5d4:	ae 92       	st	-X, r10
     5d6:	13 96       	adiw	r26, 0x03	; 3
     5d8:	1c 92       	st	X, r1
     5da:	1e 92       	st	-X, r1
     5dc:	12 97       	sbiw	r26, 0x02	; 2
     5de:	24 5e       	subi	r18, 0xE4	; 228
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
     5e2:	d9 01       	movw	r26, r18
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	9c 93       	st	X, r25
     5e8:	8e 93       	st	-X, r24
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	1c 92       	st	X, r1
     5ee:	1e 92       	st	-X, r1
     5f0:	12 97       	sbiw	r26, 0x02	; 2
     5f2:	8e 5f       	subi	r24, 0xFE	; 254
     5f4:	9e 4f       	sbci	r25, 0xFE	; 254
     5f6:	dc 01       	movw	r26, r24
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	fc 92       	st	X, r15
     5fc:	ee 92       	st	-X, r14
     5fe:	13 96       	adiw	r26, 0x03	; 3
     600:	3c 93       	st	X, r19
     602:	2e 93       	st	-X, r18
     604:	12 97       	sbiw	r26, 0x02	; 2
     606:	28 5f       	subi	r18, 0xF8	; 248
     608:	3f 4f       	sbci	r19, 0xFF	; 255
     60a:	d9 01       	movw	r26, r18
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	9c 93       	st	X, r25
     610:	8e 93       	st	-X, r24
     612:	13 96       	adiw	r26, 0x03	; 3
     614:	7c 93       	st	X, r23
     616:	6e 93       	st	-X, r22
     618:	12 97       	sbiw	r26, 0x02	; 2
     61a:	15 96       	adiw	r26, 0x05	; 5
     61c:	fc 93       	st	X, r31
     61e:	ee 93       	st	-X, r30
     620:	14 97       	sbiw	r26, 0x04	; 4
     622:	6e 5e       	subi	r22, 0xEE	; 238
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	fb 01       	movw	r30, r22
     628:	11 83       	std	Z+1, r17	; 0x01
     62a:	00 83       	st	Z, r16
     62c:	13 82       	std	Z+3, r1	; 0x03
     62e:	12 82       	std	Z+2, r1	; 0x02
     630:	1a 96       	adiw	r26, 0x0a	; 10
     632:	11 96       	adiw	r26, 0x01	; 1
     634:	7c 92       	st	X, r7
     636:	6e 92       	st	-X, r6
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	1c 92       	st	X, r1
     63c:	1e 92       	st	-X, r1
     63e:	12 97       	sbiw	r26, 0x02	; 2
     640:	42 96       	adiw	r24, 0x12	; 18
     642:	fc 01       	movw	r30, r24
     644:	51 83       	std	Z+1, r21	; 0x01
     646:	40 83       	st	Z, r20
     648:	b3 83       	std	Z+3, r27	; 0x03
     64a:	a2 83       	std	Z+2, r26	; 0x02
     64c:	18 96       	adiw	r26, 0x08	; 8
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	9c 93       	st	X, r25
     652:	8e 93       	st	-X, r24
     654:	13 96       	adiw	r26, 0x03	; 3
     656:	7c 93       	st	X, r23
     658:	6e 93       	st	-X, r22
     65a:	12 97       	sbiw	r26, 0x02	; 2
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	3c 93       	st	X, r19
     660:	2e 93       	st	-X, r18
     662:	14 97       	sbiw	r26, 0x04	; 4
     664:	6e 5e       	subi	r22, 0xEE	; 238
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	fb 01       	movw	r30, r22
     66a:	11 83       	std	Z+1, r17	; 0x01
     66c:	00 83       	st	Z, r16
     66e:	13 82       	std	Z+3, r1	; 0x03
     670:	12 82       	std	Z+2, r1	; 0x02
     672:	0e 96       	adiw	r24, 0x0e	; 14
     674:	fc 01       	movw	r30, r24
     676:	d1 82       	std	Z+1, r13	; 0x01
     678:	c0 82       	st	Z, r12
     67a:	13 82       	std	Z+3, r1	; 0x03
     67c:	12 82       	std	Z+2, r1	; 0x02
     67e:	20 5e       	subi	r18, 0xE0	; 224
     680:	3f 4f       	sbci	r19, 0xFF	; 255
     682:	f9 01       	movw	r30, r18
     684:	51 83       	std	Z+1, r21	; 0x01
     686:	40 83       	st	Z, r20
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	82 83       	std	Z+2, r24	; 0x02
     68c:	08 96       	adiw	r24, 0x08	; 8
     68e:	fc 01       	movw	r30, r24
     690:	31 83       	std	Z+1, r19	; 0x01
     692:	20 83       	st	Z, r18
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	62 83       	std	Z+2, r22	; 0x02
     698:	b5 83       	std	Z+5, r27	; 0x05
     69a:	a4 83       	std	Z+4, r26	; 0x04
     69c:	58 96       	adiw	r26, 0x18	; 24
     69e:	11 96       	adiw	r26, 0x01	; 1
     6a0:	9c 92       	st	X, r9
     6a2:	8e 92       	st	-X, r8
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	1c 92       	st	X, r1
     6a8:	1e 92       	st	-X, r1
     6aa:	12 97       	sbiw	r26, 0x02	; 2
     6ac:	44 56       	subi	r20, 0x64	; 100
     6ae:	5e 4f       	sbci	r21, 0xFE	; 254
     6b0:	fa 01       	movw	r30, r20
     6b2:	d1 82       	std	Z+1, r13	; 0x01
     6b4:	c0 82       	st	Z, r12
     6b6:	13 82       	std	Z+3, r1	; 0x03
     6b8:	12 82       	std	Z+2, r1	; 0x02
     6ba:	2e 5e       	subi	r18, 0xEE	; 238
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	f9 01       	movw	r30, r18
     6c0:	f1 82       	std	Z+1, r15	; 0x01
     6c2:	e0 82       	st	Z, r14
     6c4:	53 83       	std	Z+3, r21	; 0x03
     6c6:	42 83       	std	Z+2, r20	; 0x02
     6c8:	34 96       	adiw	r30, 0x04	; 4
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	b3 83       	std	Z+3, r27	; 0x03
     6d0:	a2 83       	std	Z+2, r26	; 0x02
     6d2:	95 83       	std	Z+5, r25	; 0x05
     6d4:	84 83       	std	Z+4, r24	; 0x04
     6d6:	f0 93 65 03 	sts	0x0365, r31
     6da:	e0 93 64 03 	sts	0x0364, r30
     6de:	24 d5       	rcall	.+2632   	; 0x1128 <fuzzification>
     6e0:	4a d5       	rcall	.+2708   	; 0x1176 <rule_evaluation>
     6e2:	8f d5       	rcall	.+2846   	; 0x1202 <defuzzification>
     6e4:	d1 01       	movw	r26, r2
     6e6:	1a 96       	adiw	r26, 0x0a	; 10
     6e8:	8d 91       	ld	r24, X+
     6ea:	9c 91       	ld	r25, X
     6ec:	1b 97       	sbiw	r26, 0x0b	; 11
     6ee:	86 3e       	cpi	r24, 0xE6	; 230
     6f0:	b7 e0       	ldi	r27, 0x07	; 7
     6f2:	9b 07       	cpc	r25, r27
     6f4:	2c f4       	brge	.+10     	; 0x700 <doFuzzy+0x614>
     6f6:	86 ee       	ldi	r24, 0xE6	; 230
     6f8:	97 e0       	ldi	r25, 0x07	; 7
     6fa:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <setServo>
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <doFuzzy+0x62a>
     700:	85 3e       	cpi	r24, 0xE5	; 229
     702:	ec e0       	ldi	r30, 0x0C	; 12
     704:	9e 07       	cpc	r25, r30
     706:	2c f0       	brlt	.+10     	; 0x712 <doFuzzy+0x626>
     708:	84 ee       	ldi	r24, 0xE4	; 228
     70a:	9c e0       	ldi	r25, 0x0C	; 12
     70c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <setServo>
     710:	02 c0       	rjmp	.+4      	; 0x716 <doFuzzy+0x62a>
     712:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <setServo>
     716:	cc 53       	subi	r28, 0x3C	; 60
     718:	de 4f       	sbci	r29, 0xFE	; 254
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	3f 90       	pop	r3
     746:	2f 90       	pop	r2
     748:	08 95       	ret

0000074a <FLC_steering>:
     74a:	31 e0       	ldi	r19, 0x01	; 1
     74c:	61 35       	cpi	r22, 0x51	; 81
     74e:	71 05       	cpc	r23, r1
     750:	09 f0       	breq	.+2      	; 0x754 <FLC_steering+0xa>
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	91 05       	cpc	r25, r1
     75a:	09 f0       	breq	.+2      	; 0x75e <FLC_steering+0x14>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	22 23       	and	r18, r18
     760:	39 f0       	breq	.+14     	; 0x770 <FLC_steering+0x26>
     762:	33 23       	and	r19, r19
     764:	29 f0       	breq	.+10     	; 0x770 <FLC_steering+0x26>
     766:	84 ee       	ldi	r24, 0xE4	; 228
     768:	9c e0       	ldi	r25, 0x0C	; 12
     76a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <setServo>
     76e:	0f c0       	rjmp	.+30     	; 0x78e <FLC_steering+0x44>
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	91 05       	cpc	r25, r1
     776:	09 f0       	breq	.+2      	; 0x77a <FLC_steering+0x30>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	22 23       	and	r18, r18
     77c:	39 f0       	breq	.+14     	; 0x78c <FLC_steering+0x42>
     77e:	33 23       	and	r19, r19
     780:	29 f0       	breq	.+10     	; 0x78c <FLC_steering+0x42>
     782:	86 ee       	ldi	r24, 0xE6	; 230
     784:	97 e0       	ldi	r25, 0x07	; 7
     786:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <setServo>
     78a:	01 c0       	rjmp	.+2      	; 0x78e <FLC_steering+0x44>
     78c:	af dc       	rcall	.-1698   	; 0xec <doFuzzy>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	08 95       	ret

00000794 <doFuzzy2>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void doFuzzy2(int currentOCR1A, int midSonicRange)
{
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	c4 53       	subi	r28, 0x34	; 52
     7be:	d2 40       	sbci	r29, 0x02	; 2
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
// DECLARATION OF DISTANCE INPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type distance; strcpy(distance.name, "distance");
     7ca:	29 e0       	ldi	r18, 0x09	; 9
     7cc:	eb e6       	ldi	r30, 0x6B	; 107
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	de 01       	movw	r26, r28
     7d2:	11 96       	adiw	r26, 0x01	; 1
     7d4:	01 90       	ld	r0, Z+
     7d6:	0d 92       	st	X+, r0
     7d8:	2a 95       	dec	r18
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <doFuzzy2+0x40>
struct io_type speed; strcpy(speed.name, "speed");
     7dc:	26 e0       	ldi	r18, 0x06	; 6
     7de:	e4 e7       	ldi	r30, 0x74	; 116
     7e0:	f1 e0       	ldi	r31, 0x01	; 1
     7e2:	de 01       	movw	r26, r28
     7e4:	51 96       	adiw	r26, 0x11	; 17
     7e6:	01 90       	ld	r0, Z+
     7e8:	0d 92       	st	X+, r0
     7ea:	2a 95       	dec	r18
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <doFuzzy2+0x52>

// Variable assigned its reference value
if (currentOCR1A<MIN_SPEED) {
     7ee:	84 3b       	cpi	r24, 0xB4	; 180
     7f0:	2a e0       	ldi	r18, 0x0A	; 10
     7f2:	92 07       	cpc	r25, r18
     7f4:	2c f4       	brge	.+10     	; 0x800 <doFuzzy2+0x6c>
speed.value = MIN_SPEED;
     7f6:	84 eb       	ldi	r24, 0xB4	; 180
     7f8:	9a e0       	ldi	r25, 0x0A	; 10
     7fa:	9c 8f       	std	Y+28, r25	; 0x1c
     7fc:	8b 8f       	std	Y+27, r24	; 0x1b
     7fe:	0b c0       	rjmp	.+22     	; 0x816 <doFuzzy2+0x82>
}
else if (currentOCR1A>MAX_SPEED)
     800:	85 35       	cpi	r24, 0x55	; 85
     802:	4b e0       	ldi	r20, 0x0B	; 11
     804:	94 07       	cpc	r25, r20
     806:	2c f0       	brlt	.+10     	; 0x812 <doFuzzy2+0x7e>
{
speed.value = MAX_SPEED;
     808:	84 e5       	ldi	r24, 0x54	; 84
     80a:	9b e0       	ldi	r25, 0x0B	; 11
     80c:	9c 8f       	std	Y+28, r25	; 0x1c
     80e:	8b 8f       	std	Y+27, r24	; 0x1b
     810:	02 c0       	rjmp	.+4      	; 0x816 <doFuzzy2+0x82>
}
else
{
speed.value = currentOCR1A;
     812:	9c 8f       	std	Y+28, r25	; 0x1c
     814:	8b 8f       	std	Y+27, r24	; 0x1b
}

// Variable assigned its reference value
if(midSonicRange < MIN_DISTANCE)
     816:	77 23       	and	r23, r23
     818:	1c f4       	brge	.+6      	; 0x820 <doFuzzy2+0x8c>
{
distance.value = MIN_DISTANCE;
     81a:	1c 86       	std	Y+12, r1	; 0x0c
     81c:	1b 86       	std	Y+11, r1	; 0x0b
     81e:	0a c0       	rjmp	.+20     	; 0x834 <doFuzzy2+0xa0>
}
else if (midSonicRange > MAX_DISTANCE)
     820:	6b 3f       	cpi	r22, 0xFB	; 251
     822:	71 05       	cpc	r23, r1
     824:	2c f0       	brlt	.+10     	; 0x830 <doFuzzy2+0x9c>
{
distance.value = MAX_DISTANCE;
     826:	8a ef       	ldi	r24, 0xFA	; 250
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	9c 87       	std	Y+12, r25	; 0x0c
     82c:	8b 87       	std	Y+11, r24	; 0x0b
     82e:	02 c0       	rjmp	.+4      	; 0x834 <doFuzzy2+0xa0>
}
else
{
distance.value = midSonicRange;
     830:	7c 87       	std	Y+12, r23	; 0x0c
     832:	6b 87       	std	Y+11, r22	; 0x0b
}


// Set MFs
struct mf_type stopDist;
MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 20);
     834:	6e 01       	movw	r12, r28
     836:	51 e2       	ldi	r21, 0x21	; 33
     838:	c5 0e       	add	r12, r21
     83a:	d1 1c       	adc	r13, r1
     83c:	0f 2e       	mov	r0, r31
     83e:	f4 e1       	ldi	r31, 0x14	; 20
     840:	ef 2e       	mov	r14, r31
     842:	f1 2c       	mov	r15, r1
     844:	f0 2d       	mov	r31, r0
     846:	0c e0       	ldi	r16, 0x0C	; 12
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	4f ef       	ldi	r20, 0xFF	; 255
     850:	5f ef       	ldi	r21, 0xFF	; 255
     852:	6a e7       	ldi	r22, 0x7A	; 122
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	c6 01       	movw	r24, r12
     858:	9a d5       	rcall	.+2868   	; 0x138e <MATLAB_MF>
struct mf_type oneM;
MATLAB_MF(&oneM, "oneM", 18, 60, 60, 95);
     85a:	3e 01       	movw	r6, r28
     85c:	67 e3       	ldi	r22, 0x37	; 55
     85e:	66 0e       	add	r6, r22
     860:	71 1c       	adc	r7, r1
     862:	0f 2e       	mov	r0, r31
     864:	ff e5       	ldi	r31, 0x5F	; 95
     866:	ef 2e       	mov	r14, r31
     868:	f1 2c       	mov	r15, r1
     86a:	f0 2d       	mov	r31, r0
     86c:	0c e3       	ldi	r16, 0x3C	; 60
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	2c e3       	ldi	r18, 0x3C	; 60
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	42 e1       	ldi	r20, 0x12	; 18
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	63 e8       	ldi	r22, 0x83	; 131
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	c3 01       	movw	r24, r6
     87e:	87 d5       	rcall	.+2830   	; 0x138e <MATLAB_MF>
struct mf_type twoM;
MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     880:	0f 2e       	mov	r0, r31
     882:	ff ea       	ldi	r31, 0xAF	; 175
     884:	ef 2e       	mov	r14, r31
     886:	f1 2c       	mov	r15, r1
     888:	f0 2d       	mov	r31, r0
     88a:	0d e7       	ldi	r16, 0x7D	; 125
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	2d e7       	ldi	r18, 0x7D	; 125
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	4b e4       	ldi	r20, 0x4B	; 75
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	68 e8       	ldi	r22, 0x88	; 136
     898:	71 e0       	ldi	r23, 0x01	; 1
     89a:	ce 01       	movw	r24, r28
     89c:	83 5b       	subi	r24, 0xB3	; 179
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	76 d5       	rcall	.+2796   	; 0x138e <MATLAB_MF>
struct mf_type threeM;
MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fb ef       	ldi	r31, 0xFB	; 251
     8a6:	ef 2e       	mov	r14, r31
     8a8:	f1 2c       	mov	r15, r1
     8aa:	f0 2d       	mov	r31, r0
     8ac:	0a ef       	ldi	r16, 0xFA	; 250
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	2a ef       	ldi	r18, 0xFA	; 250
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	46 e9       	ldi	r20, 0x96	; 150
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	6d e8       	ldi	r22, 0x8D	; 141
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	ce 01       	movw	r24, r28
     8be:	8d 59       	subi	r24, 0x9D	; 157
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	65 d5       	rcall	.+2762   	; 0x138e <MATLAB_MF>

// Linked list for MFs
distance.membership_functions = &stopDist;
     8c4:	de 86       	std	Y+14, r13	; 0x0e
     8c6:	cd 86       	std	Y+13, r12	; 0x0d
stopDist.next = &oneM;
     8c8:	7e aa       	std	Y+54, r7	; 0x36
     8ca:	6d aa       	std	Y+53, r6	; 0x35
oneM.next = &twoM;
     8cc:	8d e4       	ldi	r24, 0x4D	; 77
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	8c 0f       	add	r24, r28
     8d2:	9d 1f       	adc	r25, r29
     8d4:	2d 96       	adiw	r28, 0x0d	; 13
     8d6:	9f af       	std	Y+63, r25	; 0x3f
     8d8:	8e af       	std	Y+62, r24	; 0x3e
     8da:	2d 97       	sbiw	r28, 0x0d	; 13
twoM.next = &threeM;
     8dc:	a3 e6       	ldi	r26, 0x63	; 99
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	ac 0f       	add	r26, r28
     8e2:	bd 1f       	adc	r27, r29
     8e4:	a3 96       	adiw	r28, 0x23	; 35
     8e6:	bf af       	std	Y+63, r27	; 0x3f
     8e8:	ae af       	std	Y+62, r26	; 0x3e
     8ea:	a3 97       	sbiw	r28, 0x23	; 35
threeM.next = NULL;
     8ec:	e9 96       	adiw	r28, 0x39	; 57
     8ee:	1f ae       	std	Y+63, r1	; 0x3f
     8f0:	1e ae       	std	Y+62, r1	; 0x3e
     8f2:	e9 97       	sbiw	r28, 0x39	; 57
//////////////////////////////////////////////////////////////////////////////


// Set MFs
struct mf_type still;
MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     8f4:	0f 2e       	mov	r0, r31
     8f6:	ee 24       	eor	r14, r14
     8f8:	ea 94       	dec	r14
     8fa:	fa e0       	ldi	r31, 0x0A	; 10
     8fc:	ff 2e       	mov	r15, r31
     8fe:	f0 2d       	mov	r31, r0
     900:	04 eb       	ldi	r16, 0xB4	; 180
     902:	1a e0       	ldi	r17, 0x0A	; 10
     904:	24 eb       	ldi	r18, 0xB4	; 180
     906:	3a e0       	ldi	r19, 0x0A	; 10
     908:	43 eb       	ldi	r20, 0xB3	; 179
     90a:	5a e0       	ldi	r21, 0x0A	; 10
     90c:	64 e9       	ldi	r22, 0x94	; 148
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	8c 96       	adiw	r24, 0x2c	; 44
     912:	3d d5       	rcall	.+2682   	; 0x138e <MATLAB_MF>
struct mf_type low;
MATLAB_MF(&low, "low", 2825, 2830, 2830, 2835);
     914:	5e 01       	movw	r10, r28
     916:	bf e8       	ldi	r27, 0x8F	; 143
     918:	ab 0e       	add	r10, r27
     91a:	b1 1c       	adc	r11, r1
     91c:	0f 2e       	mov	r0, r31
     91e:	f3 e1       	ldi	r31, 0x13	; 19
     920:	ef 2e       	mov	r14, r31
     922:	fb e0       	ldi	r31, 0x0B	; 11
     924:	ff 2e       	mov	r15, r31
     926:	f0 2d       	mov	r31, r0
     928:	0e e0       	ldi	r16, 0x0E	; 14
     92a:	1b e0       	ldi	r17, 0x0B	; 11
     92c:	2e e0       	ldi	r18, 0x0E	; 14
     92e:	3b e0       	ldi	r19, 0x0B	; 11
     930:	49 e0       	ldi	r20, 0x09	; 9
     932:	5b e0       	ldi	r21, 0x0B	; 11
     934:	68 eb       	ldi	r22, 0xB8	; 184
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	c5 01       	movw	r24, r10
     93a:	29 d5       	rcall	.+2642   	; 0x138e <MATLAB_MF>
struct mf_type cruising;
MATLAB_MF(&cruising, "cruising", 2830, 2835, 2835, 2840);
     93c:	0f 2e       	mov	r0, r31
     93e:	f8 e1       	ldi	r31, 0x18	; 24
     940:	ef 2e       	mov	r14, r31
     942:	fb e0       	ldi	r31, 0x0B	; 11
     944:	ff 2e       	mov	r15, r31
     946:	f0 2d       	mov	r31, r0
     948:	03 e1       	ldi	r16, 0x13	; 19
     94a:	1b e0       	ldi	r17, 0x0B	; 11
     94c:	23 e1       	ldi	r18, 0x13	; 19
     94e:	3b e0       	ldi	r19, 0x0B	; 11
     950:	4e e0       	ldi	r20, 0x0E	; 14
     952:	5b e0       	ldi	r21, 0x0B	; 11
     954:	6a e9       	ldi	r22, 0x9A	; 154
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	ce 01       	movw	r24, r28
     95a:	8b 55       	subi	r24, 0x5B	; 91
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
     95e:	17 d5       	rcall	.+2606   	; 0x138e <MATLAB_MF>
struct mf_type medium;
MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     960:	2e 01       	movw	r4, r28
     962:	eb eb       	ldi	r30, 0xBB	; 187
     964:	4e 0e       	add	r4, r30
     966:	51 1c       	adc	r5, r1
     968:	0f 2e       	mov	r0, r31
     96a:	f2 e2       	ldi	r31, 0x22	; 34
     96c:	ef 2e       	mov	r14, r31
     96e:	fb e0       	ldi	r31, 0x0B	; 11
     970:	ff 2e       	mov	r15, r31
     972:	f0 2d       	mov	r31, r0
     974:	08 e1       	ldi	r16, 0x18	; 24
     976:	1b e0       	ldi	r17, 0x0B	; 11
     978:	28 e1       	ldi	r18, 0x18	; 24
     97a:	3b e0       	ldi	r19, 0x0B	; 11
     97c:	4e e0       	ldi	r20, 0x0E	; 14
     97e:	5b e0       	ldi	r21, 0x0B	; 11
     980:	63 ea       	ldi	r22, 0xA3	; 163
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	c2 01       	movw	r24, r4
     986:	03 d5       	rcall	.+2566   	; 0x138e <MATLAB_MF>
struct mf_type high;
MATLAB_MF(&high, "high", 2835, 2845, 28545, 2855);
     988:	0f 2e       	mov	r0, r31
     98a:	f7 e2       	ldi	r31, 0x27	; 39
     98c:	ef 2e       	mov	r14, r31
     98e:	fb e0       	ldi	r31, 0x0B	; 11
     990:	ff 2e       	mov	r15, r31
     992:	f0 2d       	mov	r31, r0
     994:	01 e8       	ldi	r16, 0x81	; 129
     996:	1f e6       	ldi	r17, 0x6F	; 111
     998:	2d e1       	ldi	r18, 0x1D	; 29
     99a:	3b e0       	ldi	r19, 0x0B	; 11
     99c:	43 e1       	ldi	r20, 0x13	; 19
     99e:	5b e0       	ldi	r21, 0x0B	; 11
     9a0:	6a ea       	ldi	r22, 0xAA	; 170
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	ce 01       	movw	r24, r28
     9a6:	8f 52       	subi	r24, 0x2F	; 47
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	f1 d4       	rcall	.+2530   	; 0x138e <MATLAB_MF>

// Linked list for MFs
speed.membership_functions = &still;
     9ac:	49 e7       	ldi	r20, 0x79	; 121
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	4c 0f       	add	r20, r28
     9b2:	5d 1f       	adc	r21, r29
     9b4:	5e 8f       	std	Y+30, r21	; 0x1e
     9b6:	4d 8f       	std	Y+29, r20	; 0x1d
still.next = &low;
     9b8:	c3 57       	subi	r28, 0x73	; 115
     9ba:	df 4f       	sbci	r29, 0xFF	; 255
     9bc:	b9 82       	std	Y+1, r11	; 0x01
     9be:	a8 82       	st	Y, r10
     9c0:	cd 58       	subi	r28, 0x8D	; 141
     9c2:	d0 40       	sbci	r29, 0x00	; 0
low.next = &cruising;
     9c4:	e5 ea       	ldi	r30, 0xA5	; 165
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	ec 0f       	add	r30, r28
     9ca:	fd 1f       	adc	r31, r29
     9cc:	d5 01       	movw	r26, r10
     9ce:	55 96       	adiw	r26, 0x15	; 21
     9d0:	fc 93       	st	X, r31
     9d2:	ee 93       	st	-X, r30
     9d4:	54 97       	sbiw	r26, 0x14	; 20
cruising.next = &medium;
     9d6:	c7 54       	subi	r28, 0x47	; 71
     9d8:	df 4f       	sbci	r29, 0xFF	; 255
     9da:	59 82       	std	Y+1, r5	; 0x01
     9dc:	48 82       	st	Y, r4
     9de:	c9 5b       	subi	r28, 0xB9	; 185
     9e0:	d0 40       	sbci	r29, 0x00	; 0
medium.next = &high;
     9e2:	e1 ed       	ldi	r30, 0xD1	; 209
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ec 0f       	add	r30, r28
     9e8:	fd 1f       	adc	r31, r29
     9ea:	d2 01       	movw	r26, r4
     9ec:	55 96       	adiw	r26, 0x15	; 21
     9ee:	fc 93       	st	X, r31
     9f0:	ee 93       	st	-X, r30
     9f2:	54 97       	sbiw	r26, 0x14	; 20
high.next = NULL;
     9f4:	cb 51       	subi	r28, 0x1B	; 27
     9f6:	df 4f       	sbci	r29, 0xFF	; 255
     9f8:	19 82       	std	Y+1, r1	; 0x01
     9fa:	18 82       	st	Y, r1
     9fc:	c5 5e       	subi	r28, 0xE5	; 229
     9fe:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF PWM OUTPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type pwm; strcpy(pwm.name, "pwm");
     a00:	80 e7       	ldi	r24, 0x70	; 112
     a02:	97 e7       	ldi	r25, 0x77	; 119
     a04:	ad e6       	ldi	r26, 0x6D	; 109
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	c9 51       	subi	r28, 0x19	; 25
     a0a:	df 4f       	sbci	r29, 0xFF	; 255
     a0c:	88 83       	st	Y, r24
     a0e:	99 83       	std	Y+1, r25	; 0x01
     a10:	aa 83       	std	Y+2, r26	; 0x02
     a12:	bb 83       	std	Y+3, r27	; 0x03
     a14:	c7 5e       	subi	r28, 0xE7	; 231
     a16:	d0 40       	sbci	r29, 0x00	; 0

// Set MFs
struct mf_type noSpeed;
MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     a18:	4e 01       	movw	r8, r28
     a1a:	f7 ef       	ldi	r31, 0xF7	; 247
     a1c:	8f 0e       	add	r8, r31
     a1e:	91 1c       	adc	r9, r1
     a20:	0f 2e       	mov	r0, r31
     a22:	ee 24       	eor	r14, r14
     a24:	ea 94       	dec	r14
     a26:	fa e0       	ldi	r31, 0x0A	; 10
     a28:	ff 2e       	mov	r15, r31
     a2a:	f0 2d       	mov	r31, r0
     a2c:	04 eb       	ldi	r16, 0xB4	; 180
     a2e:	1a e0       	ldi	r17, 0x0A	; 10
     a30:	24 eb       	ldi	r18, 0xB4	; 180
     a32:	3a e0       	ldi	r19, 0x0A	; 10
     a34:	43 eb       	ldi	r20, 0xB3	; 179
     a36:	5a e0       	ldi	r21, 0x0A	; 10
     a38:	6f ea       	ldi	r22, 0xAF	; 175
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	c4 01       	movw	r24, r8
     a3e:	a7 d4       	rcall	.+2382   	; 0x138e <MATLAB_MF>
struct mf_type slow;
MATLAB_MF(&slow, "slow", 2825, 2830, 2830, 2835);
     a40:	6e 01       	movw	r12, r28
     a42:	23 ef       	ldi	r18, 0xF3	; 243
     a44:	c2 1a       	sub	r12, r18
     a46:	2e ef       	ldi	r18, 0xFE	; 254
     a48:	d2 0a       	sbc	r13, r18
     a4a:	0f 2e       	mov	r0, r31
     a4c:	f3 e1       	ldi	r31, 0x13	; 19
     a4e:	ef 2e       	mov	r14, r31
     a50:	fb e0       	ldi	r31, 0x0B	; 11
     a52:	ff 2e       	mov	r15, r31
     a54:	f0 2d       	mov	r31, r0
     a56:	0e e0       	ldi	r16, 0x0E	; 14
     a58:	1b e0       	ldi	r17, 0x0B	; 11
     a5a:	2e e0       	ldi	r18, 0x0E	; 14
     a5c:	3b e0       	ldi	r19, 0x0B	; 11
     a5e:	49 e0       	ldi	r20, 0x09	; 9
     a60:	5b e0       	ldi	r21, 0x0B	; 11
     a62:	67 eb       	ldi	r22, 0xB7	; 183
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	c6 01       	movw	r24, r12
     a68:	92 d4       	rcall	.+2340   	; 0x138e <MATLAB_MF>
struct mf_type cruise;
MATLAB_MF(&cruise, "cruise", 2830, 2835, 2835, 2840);
     a6a:	1e 01       	movw	r2, r28
     a6c:	4d ed       	ldi	r20, 0xDD	; 221
     a6e:	24 1a       	sub	r2, r20
     a70:	4e ef       	ldi	r20, 0xFE	; 254
     a72:	34 0a       	sbc	r3, r20
     a74:	0f 2e       	mov	r0, r31
     a76:	f8 e1       	ldi	r31, 0x18	; 24
     a78:	ef 2e       	mov	r14, r31
     a7a:	fb e0       	ldi	r31, 0x0B	; 11
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	03 e1       	ldi	r16, 0x13	; 19
     a82:	1b e0       	ldi	r17, 0x0B	; 11
     a84:	23 e1       	ldi	r18, 0x13	; 19
     a86:	3b e0       	ldi	r19, 0x0B	; 11
     a88:	4e e0       	ldi	r20, 0x0E	; 14
     a8a:	5b e0       	ldi	r21, 0x0B	; 11
     a8c:	6c eb       	ldi	r22, 0xBC	; 188
     a8e:	71 e0       	ldi	r23, 0x01	; 1
     a90:	c1 01       	movw	r24, r2
     a92:	7d d4       	rcall	.+2298   	; 0x138e <MATLAB_MF>
struct mf_type medHigh;
MATLAB_MF(&medHigh, "medHigh", 2830, 2840, 2840, 2850);
     a94:	0f 2e       	mov	r0, r31
     a96:	f2 e2       	ldi	r31, 0x22	; 34
     a98:	ef 2e       	mov	r14, r31
     a9a:	fb e0       	ldi	r31, 0x0B	; 11
     a9c:	ff 2e       	mov	r15, r31
     a9e:	f0 2d       	mov	r31, r0
     aa0:	08 e1       	ldi	r16, 0x18	; 24
     aa2:	1b e0       	ldi	r17, 0x0B	; 11
     aa4:	28 e1       	ldi	r18, 0x18	; 24
     aa6:	3b e0       	ldi	r19, 0x0B	; 11
     aa8:	4e e0       	ldi	r20, 0x0E	; 14
     aaa:	5b e0       	ldi	r21, 0x0B	; 11
     aac:	63 ec       	ldi	r22, 0xC3	; 195
     aae:	71 e0       	ldi	r23, 0x01	; 1
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5c       	subi	r24, 0xC7	; 199
     ab4:	9e 4f       	sbci	r25, 0xFE	; 254
     ab6:	6b d4       	rcall	.+2262   	; 0x138e <MATLAB_MF>
struct mf_type max;
MATLAB_MF(&max, "max", 2835, 2845, 28545, 2855);
     ab8:	0f 2e       	mov	r0, r31
     aba:	f7 e2       	ldi	r31, 0x27	; 39
     abc:	ef 2e       	mov	r14, r31
     abe:	fb e0       	ldi	r31, 0x0B	; 11
     ac0:	ff 2e       	mov	r15, r31
     ac2:	f0 2d       	mov	r31, r0
     ac4:	01 e8       	ldi	r16, 0x81	; 129
     ac6:	1f e6       	ldi	r17, 0x6F	; 111
     ac8:	2d e1       	ldi	r18, 0x1D	; 29
     aca:	3b e0       	ldi	r19, 0x0B	; 11
     acc:	43 e1       	ldi	r20, 0x13	; 19
     ace:	5b e0       	ldi	r21, 0x0B	; 11
     ad0:	6b ec       	ldi	r22, 0xCB	; 203
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	ce 01       	movw	r24, r28
     ad6:	81 5b       	subi	r24, 0xB1	; 177
     ad8:	9e 4f       	sbci	r25, 0xFE	; 254
     ada:	59 d4       	rcall	.+2226   	; 0x138e <MATLAB_MF>

// Linked list for MFs
pwm.membership_functions = &noSpeed;
     adc:	cd 50       	subi	r28, 0x0D	; 13
     ade:	df 4f       	sbci	r29, 0xFF	; 255
     ae0:	99 82       	std	Y+1, r9	; 0x01
     ae2:	88 82       	st	Y, r8
     ae4:	c3 5f       	subi	r28, 0xF3	; 243
     ae6:	d0 40       	sbci	r29, 0x00	; 0
noSpeed.next = &slow;
     ae8:	d4 01       	movw	r26, r8
     aea:	55 96       	adiw	r26, 0x15	; 21
     aec:	dc 92       	st	X, r13
     aee:	ce 92       	st	-X, r12
     af0:	54 97       	sbiw	r26, 0x14	; 20
slow.next = &cruise;
     af2:	f6 01       	movw	r30, r12
     af4:	35 8a       	std	Z+21, r3	; 0x15
     af6:	24 8a       	std	Z+20, r2	; 0x14
cruise.next = &medHigh;
     af8:	e9 e3       	ldi	r30, 0x39	; 57
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	ec 0f       	add	r30, r28
     afe:	fd 1f       	adc	r31, r29
     b00:	d1 01       	movw	r26, r2
     b02:	55 96       	adiw	r26, 0x15	; 21
     b04:	fc 93       	st	X, r31
     b06:	ee 93       	st	-X, r30
     b08:	54 97       	sbiw	r26, 0x14	; 20
medHigh.next = &max;
     b0a:	4f e4       	ldi	r20, 0x4F	; 79
     b0c:	51 e0       	ldi	r21, 0x01	; 1
     b0e:	4c 0f       	add	r20, r28
     b10:	5d 1f       	adc	r21, r29
     b12:	c3 5b       	subi	r28, 0xB3	; 179
     b14:	de 4f       	sbci	r29, 0xFE	; 254
     b16:	59 83       	std	Y+1, r21	; 0x01
     b18:	48 83       	st	Y, r20
     b1a:	cd 54       	subi	r28, 0x4D	; 77
     b1c:	d1 40       	sbci	r29, 0x01	; 1
max.next = NULL;
     b1e:	cd 59       	subi	r28, 0x9D	; 157
     b20:	de 4f       	sbci	r29, 0xFE	; 254
     b22:	19 82       	std	Y+1, r1	; 0x01
     b24:	18 82       	st	Y, r1
     b26:	c3 56       	subi	r28, 0x63	; 99
     b28:	d1 40       	sbci	r29, 0x01	; 1


// SETTING I/O LINKED LISTS
//////////////////////////////////////////////////////////////////////////////

System_Inputs = &distance;
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	90 93 63 03 	sts	0x0363, r25
     b32:	80 93 62 03 	sts	0x0362, r24
distance.next = &speed;
     b36:	40 96       	adiw	r24, 0x10	; 16
     b38:	98 8b       	std	Y+16, r25	; 0x10
     b3a:	8f 87       	std	Y+15, r24	; 0x0f
speed.next = NULL;
     b3c:	18 a2       	std	Y+32, r1	; 0x20
     b3e:	1f 8e       	std	Y+31, r1	; 0x1f

System_Outputs = &pwm;
     b40:	87 ee       	ldi	r24, 0xE7	; 231
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	8c 0f       	add	r24, r28
     b46:	9d 1f       	adc	r25, r29
     b48:	90 93 61 03 	sts	0x0361, r25
     b4c:	80 93 60 03 	sts	0x0360, r24
pwm.next = NULL;
     b50:	cb 50       	subi	r28, 0x0B	; 11
     b52:	df 4f       	sbci	r29, 0xFF	; 255
     b54:	19 82       	std	Y+1, r1	; 0x01
     b56:	18 82       	st	Y, r1
     b58:	c5 5f       	subi	r28, 0xF5	; 245
     b5a:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF RULES AND LISTS
//////////////////////////////////////////////////////////////////////////////

struct rule_type rule1; Rule_Base = &rule1;
     b5c:	9e 01       	movw	r18, r28
     b5e:	2b 59       	subi	r18, 0x9B	; 155
     b60:	3e 4f       	sbci	r19, 0xFE	; 254
     b62:	30 93 65 03 	sts	0x0365, r19
     b66:	20 93 64 03 	sts	0x0364, r18
struct rule_type rule2; rule1.next = &rule2;
     b6a:	8c 57       	subi	r24, 0x7C	; 124
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	d9 01       	movw	r26, r18
     b70:	15 96       	adiw	r26, 0x05	; 5
     b72:	9c 93       	st	X, r25
     b74:	8e 93       	st	-X, r24
     b76:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule3; rule2.next = &rule3;
     b78:	1c 96       	adiw	r26, 0x0c	; 12
     b7a:	fc 01       	movw	r30, r24
     b7c:	b5 83       	std	Z+5, r27	; 0x05
     b7e:	a4 83       	std	Z+4, r26	; 0x04
struct rule_type rule4; rule3.next = &rule4;
     b80:	47 e7       	ldi	r20, 0x77	; 119
     b82:	51 e0       	ldi	r21, 0x01	; 1
     b84:	4c 0f       	add	r20, r28
     b86:	5d 1f       	adc	r21, r29
     b88:	15 96       	adiw	r26, 0x05	; 5
     b8a:	5c 93       	st	X, r21
     b8c:	4e 93       	st	-X, r20
     b8e:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule5; rule4.next = &rule5;
     b90:	8e 01       	movw	r16, r28
     b92:	03 58       	subi	r16, 0x83	; 131
     b94:	1e 4f       	sbci	r17, 0xFE	; 254
     b96:	c5 58       	subi	r28, 0x85	; 133
     b98:	de 4f       	sbci	r29, 0xFE	; 254
     b9a:	19 83       	std	Y+1, r17	; 0x01
     b9c:	08 83       	st	Y, r16
     b9e:	cb 57       	subi	r28, 0x7B	; 123
     ba0:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule6; rule5.next = &rule6;
     ba2:	7e 01       	movw	r14, r28
     ba4:	5d e7       	ldi	r21, 0x7D	; 125
     ba6:	e5 1a       	sub	r14, r21
     ba8:	5e ef       	ldi	r21, 0xFE	; 254
     baa:	f5 0a       	sbc	r15, r21
     bac:	f8 01       	movw	r30, r16
     bae:	f5 82       	std	Z+5, r15	; 0x05
     bb0:	e4 82       	std	Z+4, r14	; 0x04
struct rule_type rule7; rule6.next = &rule7;
     bb2:	49 e8       	ldi	r20, 0x89	; 137
     bb4:	51 e0       	ldi	r21, 0x01	; 1
     bb6:	4c 0f       	add	r20, r28
     bb8:	5d 1f       	adc	r21, r29
     bba:	f7 01       	movw	r30, r14
     bbc:	55 83       	std	Z+5, r21	; 0x05
     bbe:	44 83       	std	Z+4, r20	; 0x04
struct rule_type rule8; rule7.next = &rule8;
     bc0:	ef e8       	ldi	r30, 0x8F	; 143
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	ec 0f       	add	r30, r28
     bc6:	fd 1f       	adc	r31, r29
     bc8:	c3 57       	subi	r28, 0x73	; 115
     bca:	de 4f       	sbci	r29, 0xFE	; 254
     bcc:	f9 83       	std	Y+1, r31	; 0x01
     bce:	e8 83       	st	Y, r30
     bd0:	cd 58       	subi	r28, 0x8D	; 141
     bd2:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule9; rule8.next = &rule9;
     bd4:	45 e9       	ldi	r20, 0x95	; 149
     bd6:	51 e0       	ldi	r21, 0x01	; 1
     bd8:	4c 0f       	add	r20, r28
     bda:	5d 1f       	adc	r21, r29
     bdc:	cd 56       	subi	r28, 0x6D	; 109
     bde:	de 4f       	sbci	r29, 0xFE	; 254
     be0:	59 83       	std	Y+1, r21	; 0x01
     be2:	48 83       	st	Y, r20
     be4:	c3 59       	subi	r28, 0x93	; 147
     be6:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule10; rule9.next = &rule10;
     be8:	eb e9       	ldi	r30, 0x9B	; 155
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	c7 56       	subi	r28, 0x67	; 103
     bf2:	de 4f       	sbci	r29, 0xFE	; 254
     bf4:	f9 83       	std	Y+1, r31	; 0x01
     bf6:	e8 83       	st	Y, r30
     bf8:	c9 59       	subi	r28, 0x99	; 153
     bfa:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule11; rule10.next = &rule11;
     bfc:	41 ea       	ldi	r20, 0xA1	; 161
     bfe:	51 e0       	ldi	r21, 0x01	; 1
     c00:	4c 0f       	add	r20, r28
     c02:	5d 1f       	adc	r21, r29
     c04:	c1 56       	subi	r28, 0x61	; 97
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	59 83       	std	Y+1, r21	; 0x01
     c0a:	48 83       	st	Y, r20
     c0c:	cf 59       	subi	r28, 0x9F	; 159
     c0e:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     c10:	e7 ea       	ldi	r30, 0xA7	; 167
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	cb 55       	subi	r28, 0x5B	; 91
     c1a:	de 4f       	sbci	r29, 0xFE	; 254
     c1c:	f9 83       	std	Y+1, r31	; 0x01
     c1e:	e8 83       	st	Y, r30
     c20:	c5 5a       	subi	r28, 0xA5	; 165
     c22:	d1 40       	sbci	r29, 0x01	; 1
     c24:	c5 55       	subi	r28, 0x55	; 85
     c26:	de 4f       	sbci	r29, 0xFE	; 254
     c28:	19 82       	std	Y+1, r1	; 0x01
     c2a:	18 82       	st	Y, r1
     c2c:	cb 5a       	subi	r28, 0xAB	; 171
     c2e:	d1 40       	sbci	r29, 0x01	; 1
// RULE SETUP
//////////////////////////////////////////////////////////////////////////////

// if distance is stopDist then pwm is noSpeed
struct rule_element_type if11, then1;
rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c30:	be 01       	movw	r22, r28
     c32:	63 55       	subi	r22, 0x53	; 83
     c34:	7e 4f       	sbci	r23, 0xFE	; 254
     c36:	f9 01       	movw	r30, r18
     c38:	71 83       	std	Z+1, r23	; 0x01
     c3a:	60 83       	st	Z, r22
     c3c:	fb 01       	movw	r30, r22
     c3e:	13 82       	std	Z+3, r1	; 0x03
     c40:	12 82       	std	Z+2, r1	; 0x02
     c42:	40 5f       	subi	r20, 0xF0	; 240
     c44:	5f 4f       	sbci	r21, 0xFF	; 255
     c46:	f9 01       	movw	r30, r18
     c48:	53 83       	std	Z+3, r21	; 0x03
     c4a:	42 83       	std	Z+2, r20	; 0x02
     c4c:	fa 01       	movw	r30, r20
     c4e:	13 82       	std	Z+3, r1	; 0x03
     c50:	12 82       	std	Z+2, r1	; 0x02
if11.value = &stopDist.value; then1.value = &noSpeed.value;
     c52:	2a 53       	subi	r18, 0x3A	; 58
     c54:	31 40       	sbci	r19, 0x01	; 1
     c56:	fb 01       	movw	r30, r22
     c58:	31 83       	std	Z+1, r19	; 0x01
     c5a:	20 83       	st	Z, r18
     c5c:	fa e0       	ldi	r31, 0x0A	; 10
     c5e:	8f 0e       	add	r8, r31
     c60:	91 1c       	adc	r9, r1
     c62:	fa 01       	movw	r30, r20
     c64:	91 82       	std	Z+1, r9	; 0x01
     c66:	80 82       	st	Z, r8

// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
struct rule_element_type if21, if22, then2;
rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     c68:	68 5f       	subi	r22, 0xF8	; 248
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	fc 01       	movw	r30, r24
     c6e:	71 83       	std	Z+1, r23	; 0x01
     c70:	60 83       	st	Z, r22
     c72:	48 5f       	subi	r20, 0xF8	; 248
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	fb 01       	movw	r30, r22
     c78:	53 83       	std	Z+3, r21	; 0x03
     c7a:	42 83       	std	Z+2, r20	; 0x02
     c7c:	fa 01       	movw	r30, r20
     c7e:	13 82       	std	Z+3, r1	; 0x03
     c80:	12 82       	std	Z+2, r1	; 0x02
     c82:	2e 56       	subi	r18, 0x6E	; 110
     c84:	3e 4f       	sbci	r19, 0xFE	; 254
     c86:	fc 01       	movw	r30, r24
     c88:	33 83       	std	Z+3, r19	; 0x03
     c8a:	22 83       	std	Z+2, r18	; 0x02
     c8c:	f9 01       	movw	r30, r18
     c8e:	13 82       	std	Z+3, r1	; 0x03
     c90:	12 82       	std	Z+2, r1	; 0x02
if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     c92:	fa e0       	ldi	r31, 0x0A	; 10
     c94:	af 0e       	add	r10, r31
     c96:	b1 1c       	adc	r11, r1
     c98:	fb 01       	movw	r30, r22
     c9a:	b1 82       	std	Z+1, r11	; 0x01
     c9c:	a0 82       	st	Z, r10
     c9e:	fa e0       	ldi	r31, 0x0A	; 10
     ca0:	6f 0e       	add	r6, r31
     ca2:	71 1c       	adc	r7, r1
     ca4:	fa 01       	movw	r30, r20
     ca6:	71 82       	std	Z+1, r7	; 0x01
     ca8:	60 82       	st	Z, r6
     caa:	fa e0       	ldi	r31, 0x0A	; 10
     cac:	cf 0e       	add	r12, r31
     cae:	d1 1c       	adc	r13, r1
     cb0:	f9 01       	movw	r30, r18
     cb2:	d1 82       	std	Z+1, r13	; 0x01
     cb4:	c0 82       	st	Z, r12

// if speed is medium and distance is oneM then speed is cruise
struct rule_element_type if31, if32, then3;
rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     cb6:	48 5f       	subi	r20, 0xF8	; 248
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	5c 93       	st	X, r21
     cbe:	4e 93       	st	-X, r20
     cc0:	28 5f       	subi	r18, 0xF8	; 248
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	fa 01       	movw	r30, r20
     cc6:	33 83       	std	Z+3, r19	; 0x03
     cc8:	22 83       	std	Z+2, r18	; 0x02
     cca:	f9 01       	movw	r30, r18
     ccc:	13 82       	std	Z+3, r1	; 0x03
     cce:	12 82       	std	Z+2, r1	; 0x02
     cd0:	82 5a       	subi	r24, 0xA2	; 162
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	9c 93       	st	X, r25
     cd8:	8e 93       	st	-X, r24
     cda:	12 97       	sbiw	r26, 0x02	; 2
     cdc:	dc 01       	movw	r26, r24
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	1c 92       	st	X, r1
     ce2:	1e 92       	st	-X, r1
     ce4:	12 97       	sbiw	r26, 0x02	; 2
if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     ce6:	ba e0       	ldi	r27, 0x0A	; 10
     ce8:	4b 0e       	add	r4, r27
     cea:	51 1c       	adc	r5, r1
     cec:	fa 01       	movw	r30, r20
     cee:	51 82       	std	Z+1, r5	; 0x01
     cf0:	40 82       	st	Z, r4
     cf2:	d9 01       	movw	r26, r18
     cf4:	6d 92       	st	X+, r6
     cf6:	7c 92       	st	X, r7
     cf8:	ba e0       	ldi	r27, 0x0A	; 10
     cfa:	2b 0e       	add	r2, r27
     cfc:	31 1c       	adc	r3, r1
     cfe:	fc 01       	movw	r30, r24
     d00:	31 82       	std	Z+1, r3	; 0x01
     d02:	20 82       	st	Z, r2

// if speed is high and distance is oneM then speed is cruise
struct rule_element_type if41, if42, then4;
rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     d04:	28 5f       	subi	r18, 0xF8	; 248
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	c9 58       	subi	r28, 0x89	; 137
     d0a:	de 4f       	sbci	r29, 0xFE	; 254
     d0c:	39 83       	std	Y+1, r19	; 0x01
     d0e:	28 83       	st	Y, r18
     d10:	c7 57       	subi	r28, 0x77	; 119
     d12:	d1 40       	sbci	r29, 0x01	; 1
     d14:	08 96       	adiw	r24, 0x08	; 8
     d16:	d9 01       	movw	r26, r18
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	9c 93       	st	X, r25
     d1c:	8e 93       	st	-X, r24
     d1e:	12 97       	sbiw	r26, 0x02	; 2
     d20:	fc 01       	movw	r30, r24
     d22:	13 82       	std	Z+3, r1	; 0x03
     d24:	12 82       	std	Z+2, r1	; 0x02
     d26:	18 96       	adiw	r26, 0x08	; 8
     d28:	c7 58       	subi	r28, 0x87	; 135
     d2a:	de 4f       	sbci	r29, 0xFE	; 254
     d2c:	b9 83       	std	Y+1, r27	; 0x01
     d2e:	a8 83       	st	Y, r26
     d30:	c9 57       	subi	r28, 0x79	; 121
     d32:	d1 40       	sbci	r29, 0x01	; 1
     d34:	13 96       	adiw	r26, 0x03	; 3
     d36:	1c 92       	st	X, r1
     d38:	1e 92       	st	-X, r1
     d3a:	12 97       	sbiw	r26, 0x02	; 2
if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d3c:	41 ed       	ldi	r20, 0xD1	; 209
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	4c 0f       	add	r20, r28
     d42:	5d 1f       	adc	r21, r29
     d44:	46 5f       	subi	r20, 0xF6	; 246
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	f9 01       	movw	r30, r18
     d4a:	51 83       	std	Z+1, r21	; 0x01
     d4c:	40 83       	st	Z, r20
     d4e:	fc 01       	movw	r30, r24
     d50:	71 82       	std	Z+1, r7	; 0x01
     d52:	60 82       	st	Z, r6
     d54:	2d 92       	st	X+, r2
     d56:	3c 92       	st	X, r3

// if speed is still and distance is oneM then speed is slow
struct rule_element_type if51, if52, then5;
rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     d58:	08 96       	adiw	r24, 0x08	; 8
     d5a:	d8 01       	movw	r26, r16
     d5c:	8d 93       	st	X+, r24
     d5e:	9c 93       	st	X, r25
     d60:	68 5d       	subi	r22, 0xD8	; 216
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	73 83       	std	Z+3, r23	; 0x03
     d68:	62 83       	std	Z+2, r22	; 0x02
     d6a:	db 01       	movw	r26, r22
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	1c 92       	st	X, r1
     d70:	1e 92       	st	-X, r1
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	38 96       	adiw	r30, 0x08	; 8
     d76:	d8 01       	movw	r26, r16
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	fc 93       	st	X, r31
     d7c:	ee 93       	st	-X, r30
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	13 82       	std	Z+3, r1	; 0x03
     d82:	12 82       	std	Z+2, r1	; 0x02
if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     d84:	29 e7       	ldi	r18, 0x79	; 121
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	2c 0f       	add	r18, r28
     d8a:	3d 1f       	adc	r19, r29
     d8c:	26 5f       	subi	r18, 0xF6	; 246
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	dc 01       	movw	r26, r24
     d92:	2d 93       	st	X+, r18
     d94:	3c 93       	st	X, r19
     d96:	db 01       	movw	r26, r22
     d98:	6d 92       	st	X+, r6
     d9a:	7c 92       	st	X, r7
     d9c:	d1 82       	std	Z+1, r13	; 0x01
     d9e:	c0 82       	st	Z, r12

// if speed is cruising and distance is oneM then speed is slow
struct rule_element_type if61, if62, then6;
rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     da0:	0c 96       	adiw	r24, 0x0c	; 12
     da2:	f7 01       	movw	r30, r14
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
     da8:	04 59       	subi	r16, 0x94	; 148
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	dc 01       	movw	r26, r24
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	1c 93       	st	X, r17
     db2:	0e 93       	st	-X, r16
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	f8 01       	movw	r30, r16
     db8:	13 82       	std	Z+3, r1	; 0x03
     dba:	12 82       	std	Z+2, r1	; 0x02
     dbc:	34 96       	adiw	r30, 0x04	; 4
     dbe:	d7 01       	movw	r26, r14
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	fc 93       	st	X, r31
     dc4:	ee 93       	st	-X, r30
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	13 82       	std	Z+3, r1	; 0x03
     dca:	12 82       	std	Z+2, r1	; 0x02
if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     dcc:	65 ea       	ldi	r22, 0xA5	; 165
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	6c 0f       	add	r22, r28
     dd2:	7d 1f       	adc	r23, r29
     dd4:	66 5f       	subi	r22, 0xF6	; 246
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	dc 01       	movw	r26, r24
     dda:	6d 93       	st	X+, r22
     ddc:	7c 93       	st	X, r23
     dde:	d8 01       	movw	r26, r16
     de0:	6d 92       	st	X+, r6
     de2:	7c 92       	st	X, r7
     de4:	d1 82       	std	Z+1, r13	; 0x01
     de6:	c0 82       	st	Z, r12

// if speed is low and distance is twoM then speed is cruise
struct rule_element_type if71, if72, then7;
rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     de8:	0c 96       	adiw	r24, 0x0c	; 12
     dea:	c7 57       	subi	r28, 0x77	; 119
     dec:	de 4f       	sbci	r29, 0xFE	; 254
     dee:	99 83       	std	Y+1, r25	; 0x01
     df0:	88 83       	st	Y, r24
     df2:	c9 58       	subi	r28, 0x89	; 137
     df4:	d1 40       	sbci	r29, 0x01	; 1
     df6:	04 5f       	subi	r16, 0xF4	; 244
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	fc 01       	movw	r30, r24
     dfc:	13 83       	std	Z+3, r17	; 0x03
     dfe:	02 83       	std	Z+2, r16	; 0x02
     e00:	d8 01       	movw	r26, r16
     e02:	13 96       	adiw	r26, 0x03	; 3
     e04:	1c 92       	st	X, r1
     e06:	1e 92       	st	-X, r1
     e08:	12 97       	sbiw	r26, 0x02	; 2
     e0a:	38 96       	adiw	r30, 0x08	; 8
     e0c:	c5 57       	subi	r28, 0x75	; 117
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	f9 83       	std	Y+1, r31	; 0x01
     e12:	e8 83       	st	Y, r30
     e14:	cb 58       	subi	r28, 0x8B	; 139
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	13 82       	std	Z+3, r1	; 0x03
     e1a:	12 82       	std	Z+2, r1	; 0x02
if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     e1c:	dc 01       	movw	r26, r24
     e1e:	ad 92       	st	X+, r10
     e20:	bc 92       	st	X, r11
     e22:	8d e4       	ldi	r24, 0x4D	; 77
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	8c 0f       	add	r24, r28
     e28:	9d 1f       	adc	r25, r29
     e2a:	0a 96       	adiw	r24, 0x0a	; 10
     e2c:	d8 01       	movw	r26, r16
     e2e:	8d 93       	st	X+, r24
     e30:	9c 93       	st	X, r25
     e32:	31 82       	std	Z+1, r3	; 0x01
     e34:	20 82       	st	Z, r2

// if speed is medium and distance is twoM then speed is medHigh
struct rule_element_type if81, if82, then8;
rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e36:	08 5f       	subi	r16, 0xF8	; 248
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	c1 57       	subi	r28, 0x71	; 113
     e3c:	de 4f       	sbci	r29, 0xFE	; 254
     e3e:	19 83       	std	Y+1, r17	; 0x01
     e40:	08 83       	st	Y, r16
     e42:	cf 58       	subi	r28, 0x8F	; 143
     e44:	d1 40       	sbci	r29, 0x01	; 1
     e46:	7e 01       	movw	r14, r28
     e48:	bf ef       	ldi	r27, 0xFF	; 255
     e4a:	eb 1a       	sub	r14, r27
     e4c:	bd ef       	ldi	r27, 0xFD	; 253
     e4e:	fb 0a       	sbc	r15, r27
     e50:	f8 01       	movw	r30, r16
     e52:	f3 82       	std	Z+3, r15	; 0x03
     e54:	e2 82       	std	Z+2, r14	; 0x02
     e56:	d7 01       	movw	r26, r14
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	1c 92       	st	X, r1
     e5c:	1e 92       	st	-X, r1
     e5e:	12 97       	sbiw	r26, 0x02	; 2
     e60:	14 96       	adiw	r26, 0x04	; 4
     e62:	cf 56       	subi	r28, 0x6F	; 111
     e64:	de 4f       	sbci	r29, 0xFE	; 254
     e66:	b9 83       	std	Y+1, r27	; 0x01
     e68:	a8 83       	st	Y, r26
     e6a:	c1 59       	subi	r28, 0x91	; 145
     e6c:	d1 40       	sbci	r29, 0x01	; 1
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	1c 92       	st	X, r1
     e72:	1e 92       	st	-X, r1
     e74:	12 97       	sbiw	r26, 0x02	; 2
if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     e76:	51 82       	std	Z+1, r5	; 0x01
     e78:	40 82       	st	Z, r4
     e7a:	f7 01       	movw	r30, r14
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
     e80:	0f 2e       	mov	r0, r31
     e82:	f9 e3       	ldi	r31, 0x39	; 57
     e84:	cf 2e       	mov	r12, r31
     e86:	dd 24       	eor	r13, r13
     e88:	d3 94       	inc	r13
     e8a:	f0 2d       	mov	r31, r0
     e8c:	cc 0e       	add	r12, r28
     e8e:	dd 1e       	adc	r13, r29
     e90:	fa e0       	ldi	r31, 0x0A	; 10
     e92:	cf 0e       	add	r12, r31
     e94:	d1 1c       	adc	r13, r1
     e96:	cd 92       	st	X+, r12
     e98:	dc 92       	st	X, r13

// if speed is high and distance is twoM then speed is medHigh
struct rule_element_type if91, if92, then9;
rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     e9a:	7e 01       	movw	r14, r28
     e9c:	a7 ef       	ldi	r26, 0xF7	; 247
     e9e:	ea 1a       	sub	r14, r26
     ea0:	ad ef       	ldi	r26, 0xFD	; 253
     ea2:	fa 0a       	sbc	r15, r26
     ea4:	cb 56       	subi	r28, 0x6B	; 107
     ea6:	de 4f       	sbci	r29, 0xFE	; 254
     ea8:	f9 82       	std	Y+1, r15	; 0x01
     eaa:	e8 82       	st	Y, r14
     eac:	c5 59       	subi	r28, 0x95	; 149
     eae:	d1 40       	sbci	r29, 0x01	; 1
     eb0:	00 5f       	subi	r16, 0xF0	; 240
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	f7 01       	movw	r30, r14
     eb6:	13 83       	std	Z+3, r17	; 0x03
     eb8:	02 83       	std	Z+2, r16	; 0x02
     eba:	d8 01       	movw	r26, r16
     ebc:	13 96       	adiw	r26, 0x03	; 3
     ebe:	1c 92       	st	X, r1
     ec0:	1e 92       	st	-X, r1
     ec2:	12 97       	sbiw	r26, 0x02	; 2
     ec4:	14 96       	adiw	r26, 0x04	; 4
     ec6:	c9 56       	subi	r28, 0x69	; 105
     ec8:	de 4f       	sbci	r29, 0xFE	; 254
     eca:	b9 83       	std	Y+1, r27	; 0x01
     ecc:	a8 83       	st	Y, r26
     ece:	c7 59       	subi	r28, 0x97	; 151
     ed0:	d1 40       	sbci	r29, 0x01	; 1
     ed2:	13 96       	adiw	r26, 0x03	; 3
     ed4:	1c 92       	st	X, r1
     ed6:	1e 92       	st	-X, r1
     ed8:	12 97       	sbiw	r26, 0x02	; 2
if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     eda:	51 83       	std	Z+1, r21	; 0x01
     edc:	40 83       	st	Z, r20
     ede:	f8 01       	movw	r30, r16
     ee0:	91 83       	std	Z+1, r25	; 0x01
     ee2:	80 83       	st	Z, r24
     ee4:	cd 92       	st	X+, r12
     ee6:	dc 92       	st	X, r13

// if speed is still and distance is twoM then speed is cruise
struct rule_element_type if101, if102, then10;
rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     ee8:	08 5f       	subi	r16, 0xF8	; 248
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	c5 56       	subi	r28, 0x65	; 101
     eee:	de 4f       	sbci	r29, 0xFE	; 254
     ef0:	19 83       	std	Y+1, r17	; 0x01
     ef2:	08 83       	st	Y, r16
     ef4:	cb 59       	subi	r28, 0x9B	; 155
     ef6:	d1 40       	sbci	r29, 0x01	; 1
     ef8:	42 5c       	subi	r20, 0xC2	; 194
     efa:	5e 4f       	sbci	r21, 0xFE	; 254
     efc:	d8 01       	movw	r26, r16
     efe:	13 96       	adiw	r26, 0x03	; 3
     f00:	5c 93       	st	X, r21
     f02:	4e 93       	st	-X, r20
     f04:	12 97       	sbiw	r26, 0x02	; 2
     f06:	fa 01       	movw	r30, r20
     f08:	13 82       	std	Z+3, r1	; 0x03
     f0a:	12 82       	std	Z+2, r1	; 0x02
     f0c:	18 96       	adiw	r26, 0x08	; 8
     f0e:	c3 56       	subi	r28, 0x63	; 99
     f10:	de 4f       	sbci	r29, 0xFE	; 254
     f12:	b9 83       	std	Y+1, r27	; 0x01
     f14:	a8 83       	st	Y, r26
     f16:	cd 59       	subi	r28, 0x9D	; 157
     f18:	d1 40       	sbci	r29, 0x01	; 1
     f1a:	13 96       	adiw	r26, 0x03	; 3
     f1c:	1c 92       	st	X, r1
     f1e:	1e 92       	st	-X, r1
     f20:	12 97       	sbiw	r26, 0x02	; 2
if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     f22:	f8 01       	movw	r30, r16
     f24:	31 83       	std	Z+1, r19	; 0x01
     f26:	20 83       	st	Z, r18
     f28:	fa 01       	movw	r30, r20
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	80 83       	st	Z, r24
     f2e:	2d 92       	st	X+, r2
     f30:	3c 92       	st	X, r3

// if speed is cruising and distance is twoM then speed is medHigh
struct rule_element_type if111, if112, then11;
rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f32:	48 5f       	subi	r20, 0xF8	; 248
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	cf 55       	subi	r28, 0x5F	; 95
     f38:	de 4f       	sbci	r29, 0xFE	; 254
     f3a:	59 83       	std	Y+1, r21	; 0x01
     f3c:	48 83       	st	Y, r20
     f3e:	c1 5a       	subi	r28, 0xA1	; 161
     f40:	d1 40       	sbci	r29, 0x01	; 1
     f42:	2e 55       	subi	r18, 0x5E	; 94
     f44:	3e 4f       	sbci	r19, 0xFE	; 254
     f46:	da 01       	movw	r26, r20
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	3c 93       	st	X, r19
     f4c:	2e 93       	st	-X, r18
     f4e:	12 97       	sbiw	r26, 0x02	; 2
     f50:	f9 01       	movw	r30, r18
     f52:	13 82       	std	Z+3, r1	; 0x03
     f54:	12 82       	std	Z+2, r1	; 0x02
     f56:	18 96       	adiw	r26, 0x08	; 8
     f58:	cd 55       	subi	r28, 0x5D	; 93
     f5a:	de 4f       	sbci	r29, 0xFE	; 254
     f5c:	b9 83       	std	Y+1, r27	; 0x01
     f5e:	a8 83       	st	Y, r26
     f60:	c3 5a       	subi	r28, 0xA3	; 163
     f62:	d1 40       	sbci	r29, 0x01	; 1
     f64:	13 96       	adiw	r26, 0x03	; 3
     f66:	1c 92       	st	X, r1
     f68:	1e 92       	st	-X, r1
     f6a:	12 97       	sbiw	r26, 0x02	; 2
if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     f6c:	fa 01       	movw	r30, r20
     f6e:	71 83       	std	Z+1, r23	; 0x01
     f70:	60 83       	st	Z, r22
     f72:	f9 01       	movw	r30, r18
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	dc 92       	st	X, r13
     f7c:	ce 92       	st	-X, r12

// if distance is threeM then speed is max
struct rule_element_type if121, then12;
rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     f7e:	14 96       	adiw	r26, 0x04	; 4
     f80:	c9 55       	subi	r28, 0x59	; 89
     f82:	de 4f       	sbci	r29, 0xFE	; 254
     f84:	b9 83       	std	Y+1, r27	; 0x01
     f86:	a8 83       	st	Y, r26
     f88:	c7 5a       	subi	r28, 0xA7	; 167
     f8a:	d1 40       	sbci	r29, 0x01	; 1
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	1c 92       	st	X, r1
     f90:	1e 92       	st	-X, r1
     f92:	12 97       	sbiw	r26, 0x02	; 2
     f94:	3c 96       	adiw	r30, 0x0c	; 12
     f96:	c7 55       	subi	r28, 0x57	; 87
     f98:	de 4f       	sbci	r29, 0xFE	; 254
     f9a:	f9 83       	std	Y+1, r31	; 0x01
     f9c:	e8 83       	st	Y, r30
     f9e:	c9 5a       	subi	r28, 0xA9	; 169
     fa0:	d1 40       	sbci	r29, 0x01	; 1
     fa2:	13 82       	std	Z+3, r1	; 0x03
     fa4:	12 82       	std	Z+2, r1	; 0x02
if121.value = &threeM.value; then12.value = &max.value;
     fa6:	83 e6       	ldi	r24, 0x63	; 99
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	8c 0f       	add	r24, r28
     fac:	9d 1f       	adc	r25, r29
     fae:	0a 96       	adiw	r24, 0x0a	; 10
     fb0:	8d 93       	st	X+, r24
     fb2:	9c 93       	st	X, r25
     fb4:	8f e4       	ldi	r24, 0x4F	; 79
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	8c 0f       	add	r24, r28
     fba:	9d 1f       	adc	r25, r29
     fbc:	0a 96       	adiw	r24, 0x0a	; 10
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24


// EXECUTING FUZZY LOGIC & OUTPUT VALUE
//////////////////////////////////////////////////////////////////////////////

fuzzification();
     fc2:	b2 d0       	rcall	.+356    	; 0x1128 <fuzzification>
rule_evaluation();
     fc4:	d8 d0       	rcall	.+432    	; 0x1176 <rule_evaluation>
defuzzification();
     fc6:	1d d1       	rcall	.+570    	; 0x1202 <defuzzification>

if (pwm.value > 2845)
     fc8:	cf 50       	subi	r28, 0x0F	; 15
     fca:	df 4f       	sbci	r29, 0xFF	; 255
     fcc:	88 81       	ld	r24, Y
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	c1 5f       	subi	r28, 0xF1	; 241
     fd2:	d0 40       	sbci	r29, 0x00	; 0
     fd4:	8e 31       	cpi	r24, 0x1E	; 30
     fd6:	fb e0       	ldi	r31, 0x0B	; 11
     fd8:	9f 07       	cpc	r25, r31
     fda:	44 f0       	brlt	.+16     	; 0xfec <doFuzzy2+0x858>
{
setESC(2845+adjustment);
     fdc:	80 91 40 02 	lds	r24, 0x0240
     fe0:	90 91 41 02 	lds	r25, 0x0241
     fe4:	83 5e       	subi	r24, 0xE3	; 227
     fe6:	94 4f       	sbci	r25, 0xF4	; 244
     fe8:	8b d7       	rcall	.+3862   	; 0x1f00 <setESC>
     fea:	0f c0       	rjmp	.+30     	; 0x100a <doFuzzy2+0x876>
}
else if (pwm.value < 2750)
     fec:	8e 3b       	cpi	r24, 0xBE	; 190
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	92 07       	cpc	r25, r18
     ff2:	24 f4       	brge	.+8      	; 0xffc <doFuzzy2+0x868>
{
setESC(2750);
     ff4:	8e eb       	ldi	r24, 0xBE	; 190
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	83 d7       	rcall	.+3846   	; 0x1f00 <setESC>
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <doFuzzy2+0x876>
}
else
{
setESC(pwm.value+adjustment);
     ffc:	20 91 40 02 	lds	r18, 0x0240
    1000:	30 91 41 02 	lds	r19, 0x0241
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	7b d7       	rcall	.+3830   	; 0x1f00 <setESC>
}



}
    100a:	cc 5c       	subi	r28, 0xCC	; 204
    100c:	dd 4f       	sbci	r29, 0xFD	; 253
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	7f 90       	pop	r7
    1032:	6f 90       	pop	r6
    1034:	5f 90       	pop	r5
    1036:	4f 90       	pop	r4
    1038:	3f 90       	pop	r3
    103a:	2f 90       	pop	r2
    103c:	08 95       	ret

0000103e <FLC_obstacle>:

void FLC_obstacle(int currentOCR1A, int midSonicRange, int v)
{
if(v == 81)
    103e:	41 35       	cpi	r20, 0x51	; 81
    1040:	51 05       	cpc	r21, r1
    1042:	39 f4       	brne	.+14     	; 0x1052 <FLC_obstacle+0x14>
{
adjustment = -5;
    1044:	2b ef       	ldi	r18, 0xFB	; 251
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	30 93 41 02 	sts	0x0241, r19
    104c:	20 93 40 02 	sts	0x0240, r18
    1050:	04 c0       	rjmp	.+8      	; 0x105a <FLC_obstacle+0x1c>
}
else
{
adjustment = 0;
    1052:	10 92 41 02 	sts	0x0241, r1
    1056:	10 92 40 02 	sts	0x0240, r1
}

doFuzzy2(currentOCR1A,midSonicRange);
    105a:	9c cb       	rjmp	.-2248   	; 0x794 <doFuzzy2>
    105c:	08 95       	ret

0000105e <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    105e:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1060:	84 85       	ldd	r24, Z+12	; 0x0c
    1062:	95 85       	ldd	r25, Z+13	; 0x0d
    1064:	9b 01       	movw	r18, r22
    1066:	28 1b       	sub	r18, r24
    1068:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    106a:	86 85       	ldd	r24, Z+14	; 0x0e
    106c:	97 85       	ldd	r25, Z+15	; 0x0f
    106e:	86 1b       	sub	r24, r22
    1070:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1072:	12 16       	cp	r1, r18
    1074:	13 06       	cpc	r1, r19
    1076:	f4 f4       	brge	.+60     	; 0x10b4 <compute_degree_of_membership+0x56>
    1078:	18 16       	cp	r1, r24
    107a:	19 06       	cpc	r1, r25
    107c:	f4 f4       	brge	.+60     	; 0x10ba <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    107e:	60 89       	ldd	r22, Z+16	; 0x10
    1080:	71 89       	ldd	r23, Z+17	; 0x11
    1082:	a2 89       	ldd	r26, Z+18	; 0x12
    1084:	b3 89       	ldd	r27, Z+19	; 0x13
    1086:	8a 9f       	mul	r24, r26
    1088:	a0 01       	movw	r20, r0
    108a:	8b 9f       	mul	r24, r27
    108c:	50 0d       	add	r21, r0
    108e:	9a 9f       	mul	r25, r26
    1090:	50 0d       	add	r21, r0
    1092:	11 24       	eor	r1, r1
    1094:	26 9f       	mul	r18, r22
    1096:	c0 01       	movw	r24, r0
    1098:	27 9f       	mul	r18, r23
    109a:	90 0d       	add	r25, r0
    109c:	36 9f       	mul	r19, r22
    109e:	90 0d       	add	r25, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	48 17       	cp	r20, r24
    10a4:	59 07       	cpc	r21, r25
    10a6:	0c f4       	brge	.+2      	; 0x10aa <compute_degree_of_membership+0x4c>
    10a8:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <compute_degree_of_membership+0x54>
    10b0:	3c f4       	brge	.+14     	; 0x10c0 <compute_degree_of_membership+0x62>
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <compute_degree_of_membership+0x66>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    10c4:	93 87       	std	Z+11, r25	; 0x0b
    10c6:	82 87       	std	Z+10, r24	; 0x0a
    10c8:	08 95       	ret

000010ca <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    10d4:	c6 85       	ldd	r28, Z+14	; 0x0e
    10d6:	d7 85       	ldd	r29, Z+15	; 0x0f
    10d8:	84 85       	ldd	r24, Z+12	; 0x0c
    10da:	95 85       	ldd	r25, Z+13	; 0x0d
    10dc:	c8 1b       	sub	r28, r24
    10de:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    10e0:	22 85       	ldd	r18, Z+10	; 0x0a
    10e2:	33 85       	ldd	r19, Z+11	; 0x0b
    10e4:	60 89       	ldd	r22, Z+16	; 0x10
    10e6:	71 89       	ldd	r23, Z+17	; 0x11
    10e8:	c9 01       	movw	r24, r18
    10ea:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    10ee:	8e 01       	movw	r16, r28
    10f0:	06 1b       	sub	r16, r22
    10f2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    10f4:	62 89       	ldd	r22, Z+18	; 0x12
    10f6:	73 89       	ldd	r23, Z+19	; 0x13
    10f8:	c9 01       	movw	r24, r18
    10fa:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
    top = base - run_1 - run_2;
    10fe:	06 1b       	sub	r16, r22
    1100:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    1102:	c0 0f       	add	r28, r16
    1104:	d1 1f       	adc	r29, r17
    1106:	2c 9f       	mul	r18, r28
    1108:	c0 01       	movw	r24, r0
    110a:	2d 9f       	mul	r18, r29
    110c:	90 0d       	add	r25, r0
    110e:	3c 9f       	mul	r19, r28
    1110:	90 0d       	add	r25, r0
    1112:	11 24       	eor	r1, r1
    1114:	99 23       	and	r25, r25
    1116:	0c f4       	brge	.+2      	; 0x111a <compute_area_of_trapezoid+0x50>
    1118:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    111a:	95 95       	asr	r25
    111c:	87 95       	ror	r24
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1130:	00 91 62 03 	lds	r16, 0x0362
    1134:	10 91 63 03 	lds	r17, 0x0363
    1138:	01 15       	cp	r16, r1
    113a:	11 05       	cpc	r17, r1
    113c:	b9 f0       	breq	.+46     	; 0x116c <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    113e:	f8 01       	movw	r30, r16
    1140:	c4 85       	ldd	r28, Z+12	; 0x0c
    1142:	d5 85       	ldd	r29, Z+13	; 0x0d
    1144:	20 97       	sbiw	r28, 0x00	; 0
    1146:	61 f0       	breq	.+24     	; 0x1160 <fuzzification+0x38>
            if (mf!=NULL) {
    1148:	20 97       	sbiw	r28, 0x00	; 0
    114a:	29 f0       	breq	.+10     	; 0x1156 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    114c:	f8 01       	movw	r30, r16
    114e:	62 85       	ldd	r22, Z+10	; 0x0a
    1150:	73 85       	ldd	r23, Z+11	; 0x0b
    1152:	ce 01       	movw	r24, r28
    1154:	84 df       	rcall	.-248    	; 0x105e <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1156:	0c 88       	ldd	r0, Y+20	; 0x14
    1158:	dd 89       	ldd	r29, Y+21	; 0x15
    115a:	c0 2d       	mov	r28, r0
    115c:	20 97       	sbiw	r28, 0x00	; 0
    115e:	a1 f7       	brne	.-24     	; 0x1148 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1160:	f8 01       	movw	r30, r16
    1162:	06 85       	ldd	r16, Z+14	; 0x0e
    1164:	17 85       	ldd	r17, Z+15	; 0x0f
    1166:	01 15       	cp	r16, r1
    1168:	11 05       	cpc	r17, r1
    116a:	49 f7       	brne	.-46     	; 0x113e <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    117e:	c0 91 64 03 	lds	r28, 0x0364
    1182:	d0 91 65 03 	lds	r29, 0x0365
    1186:	20 97       	sbiw	r28, 0x00	; 0
    1188:	b9 f1       	breq	.+110    	; 0x11f8 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	81 f0       	breq	.+32     	; 0x11b6 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1196:	20 2f       	mov	r18, r16
    1198:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    119a:	a0 81       	ld	r26, Z
    119c:	b1 81       	ldd	r27, Z+1	; 0x01
    119e:	8d 91       	ld	r24, X+
    11a0:	9c 91       	ld	r25, X
    11a2:	82 17       	cp	r24, r18
    11a4:	93 07       	cpc	r25, r19
    11a6:	0c f4       	brge	.+2      	; 0x11aa <rule_evaluation+0x34>
    11a8:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    11aa:	02 80       	ldd	r0, Z+2	; 0x02
    11ac:	f3 81       	ldd	r31, Z+3	; 0x03
    11ae:	e0 2d       	mov	r30, r0
    11b0:	30 97       	sbiw	r30, 0x00	; 0
    11b2:	99 f7       	brne	.-26     	; 0x119a <rule_evaluation+0x24>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11b6:	20 2f       	mov	r18, r16
    11b8:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    11ba:	ea 81       	ldd	r30, Y+2	; 0x02
    11bc:	fb 81       	ldd	r31, Y+3	; 0x03
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <rule_evaluation+0x78>
    11c2:	72 2f       	mov	r23, r18
    11c4:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	8d 91       	ld	r24, X+
    11cc:	9c 91       	ld	r25, X
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	57 2f       	mov	r21, r23
    11d2:	46 2f       	mov	r20, r22
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	14 f4       	brge	.+4      	; 0x11de <rule_evaluation+0x68>
    11da:	58 2f       	mov	r21, r24
    11dc:	49 2f       	mov	r20, r25
    11de:	5c 93       	st	X, r21
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    11e4:	02 80       	ldd	r0, Z+2	; 0x02
    11e6:	f3 81       	ldd	r31, Z+3	; 0x03
    11e8:	e0 2d       	mov	r30, r0
    11ea:	30 97       	sbiw	r30, 0x00	; 0
    11ec:	61 f7       	brne	.-40     	; 0x11c6 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    11ee:	0c 80       	ldd	r0, Y+4	; 0x04
    11f0:	dd 81       	ldd	r29, Y+5	; 0x05
    11f2:	c0 2d       	mov	r28, r0
    11f4:	20 97       	sbiw	r28, 0x00	; 0
    11f6:	59 f6       	brne	.-106    	; 0x118e <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    1202:	2f 92       	push	r2
    1204:	3f 92       	push	r3
    1206:	4f 92       	push	r4
    1208:	5f 92       	push	r5
    120a:	6f 92       	push	r6
    120c:	7f 92       	push	r7
    120e:	8f 92       	push	r8
    1210:	9f 92       	push	r9
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	00 d0       	rcall	.+0      	; 0x1228 <defuzzification+0x26>
    1228:	00 d0       	rcall	.+0      	; 0x122a <defuzzification+0x28>
    122a:	00 d0       	rcall	.+0      	; 0x122c <defuzzification+0x2a>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1230:	80 91 60 03 	lds	r24, 0x0360
    1234:	90 91 61 03 	lds	r25, 0x0361
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	89 2b       	or	r24, r25
    123e:	09 f4       	brne	.+2      	; 0x1242 <defuzzification+0x40>
    1240:	8d c0       	rjmp	.+282    	; 0x135c <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	04 84       	ldd	r0, Z+12	; 0x0c
    1248:	f5 85       	ldd	r31, Z+13	; 0x0d
    124a:	e0 2d       	mov	r30, r0
    124c:	fe 83       	std	Y+6, r31	; 0x06
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	ef 2b       	or	r30, r31
    1252:	09 f4       	brne	.+2      	; 0x1256 <defuzzification+0x54>
    1254:	6e c0       	rjmp	.+220    	; 0x1332 <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1256:	51 2c       	mov	r5, r1
    1258:	61 2c       	mov	r6, r1
    125a:	71 2c       	mov	r7, r1
    125c:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    125e:	31 2c       	mov	r3, r1
    1260:	21 2c       	mov	r2, r1
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	2f df       	rcall	.-418    	; 0x10ca <compute_area_of_trapezoid>
    126c:	bc 01       	movw	r22, r24
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 39 14 	call	0x2872	; 0x2872 <__floatsisf>
    127a:	6b 01       	movw	r12, r22
    127c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    127e:	ed 81       	ldd	r30, Y+5	; 0x05
    1280:	fe 81       	ldd	r31, Y+6	; 0x06
    1282:	04 85       	ldd	r16, Z+12	; 0x0c
    1284:	15 85       	ldd	r17, Z+13	; 0x0d
    1286:	b8 01       	movw	r22, r16
    1288:	88 27       	eor	r24, r24
    128a:	77 fd       	sbrc	r23, 7
    128c:	80 95       	com	r24
    128e:	98 2f       	mov	r25, r24
    1290:	0e 94 39 14 	call	0x2872	; 0x2872 <__floatsisf>
    1294:	4b 01       	movw	r8, r22
    1296:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1298:	ed 81       	ldd	r30, Y+5	; 0x05
    129a:	fe 81       	ldd	r31, Y+6	; 0x06
    129c:	86 85       	ldd	r24, Z+14	; 0x0e
    129e:	97 85       	ldd	r25, Z+15	; 0x0f
    12a0:	80 1b       	sub	r24, r16
    12a2:	91 0b       	sbc	r25, r17
    12a4:	bc 01       	movw	r22, r24
    12a6:	12 f4       	brpl	.+4      	; 0x12ac <defuzzification+0xaa>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	75 95       	asr	r23
    12ae:	67 95       	ror	r22
            centroid = centroid + intermed;
    12b0:	88 27       	eor	r24, r24
    12b2:	77 fd       	sbrc	r23, 7
    12b4:	80 95       	com	r24
    12b6:	98 2f       	mov	r25, r24
    12b8:	0e 94 39 14 	call	0x2872	; 0x2872 <__floatsisf>
    12bc:	a5 01       	movw	r20, r10
    12be:	94 01       	movw	r18, r8
    12c0:	0e 94 3a 13 	call	0x2674	; 0x2674 <__addsf3>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    12c8:	c7 01       	movw	r24, r14
    12ca:	b6 01       	movw	r22, r12
    12cc:	0e 94 c5 14 	call	0x298a	; 0x298a <__mulsf3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	63 2d       	mov	r22, r3
    12d6:	72 2d       	mov	r23, r2
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	0e 94 3a 13 	call	0x2674	; 0x2674 <__addsf3>
    12e0:	36 2e       	mov	r3, r22
    12e2:	27 2e       	mov	r2, r23
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    12e8:	a7 01       	movw	r20, r14
    12ea:	96 01       	movw	r18, r12
    12ec:	65 2d       	mov	r22, r5
    12ee:	76 2d       	mov	r23, r6
    12f0:	87 2d       	mov	r24, r7
    12f2:	94 2d       	mov	r25, r4
    12f4:	0e 94 3a 13 	call	0x2674	; 0x2674 <__addsf3>
    12f8:	56 2e       	mov	r5, r22
    12fa:	67 2e       	mov	r6, r23
    12fc:	78 2e       	mov	r7, r24
    12fe:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1300:	ed 81       	ldd	r30, Y+5	; 0x05
    1302:	fe 81       	ldd	r31, Y+6	; 0x06
    1304:	04 88       	ldd	r0, Z+20	; 0x14
    1306:	f5 89       	ldd	r31, Z+21	; 0x15
    1308:	e0 2d       	mov	r30, r0
    130a:	fe 83       	std	Y+6, r31	; 0x06
    130c:	ed 83       	std	Y+5, r30	; 0x05
    130e:	ef 2b       	or	r30, r31
    1310:	09 f0       	breq	.+2      	; 0x1314 <defuzzification+0x112>
    1312:	a9 cf       	rjmp	.-174    	; 0x1266 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    1314:	26 2f       	mov	r18, r22
    1316:	37 2f       	mov	r19, r23
    1318:	48 2f       	mov	r20, r24
    131a:	59 2f       	mov	r21, r25
    131c:	63 2d       	mov	r22, r3
    131e:	72 2d       	mov	r23, r2
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	0e 94 9e 13 	call	0x273c	; 0x273c <__divsf3>
    1328:	26 2f       	mov	r18, r22
    132a:	37 2f       	mov	r19, r23
    132c:	48 2f       	mov	r20, r24
    132e:	59 2f       	mov	r21, r25
    1330:	04 c0       	rjmp	.+8      	; 0x133a <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    133a:	62 2f       	mov	r22, r18
    133c:	73 2f       	mov	r23, r19
    133e:	84 2f       	mov	r24, r20
    1340:	95 2f       	mov	r25, r21
    1342:	0e 94 06 14 	call	0x280c	; 0x280c <__fixsfsi>
    1346:	eb 81       	ldd	r30, Y+3	; 0x03
    1348:	fc 81       	ldd	r31, Y+4	; 0x04
    134a:	73 87       	std	Z+11, r23	; 0x0b
    134c:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    134e:	86 85       	ldd	r24, Z+14	; 0x0e
    1350:	97 85       	ldd	r25, Z+15	; 0x0f
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	89 2b       	or	r24, r25
    1358:	09 f0       	breq	.+2      	; 0x135c <defuzzification+0x15a>
    135a:	73 cf       	rjmp	.-282    	; 0x1242 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	9f 90       	pop	r9
    137e:	8f 90       	pop	r8
    1380:	7f 90       	pop	r7
    1382:	6f 90       	pop	r6
    1384:	5f 90       	pop	r5
    1386:	4f 90       	pop	r4
    1388:	3f 90       	pop	r3
    138a:	2f 90       	pop	r2
    138c:	08 95       	ret

0000138e <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	ec 01       	movw	r28, r24
    13a4:	6a 01       	movw	r12, r20
    13a6:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    13a8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <strcpy>
    newMf->value = 0;
    13ac:	1b 86       	std	Y+11, r1	; 0x0b
    13ae:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    13b0:	dd 86       	std	Y+13, r13	; 0x0d
    13b2:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    13b4:	ff 86       	std	Y+15, r15	; 0x0f
    13b6:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    13b8:	b5 01       	movw	r22, r10
    13ba:	6c 19       	sub	r22, r12
    13bc:	7d 09       	sbc	r23, r13
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	c9 01       	movw	r24, r18
    13c4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
    13c8:	79 8b       	std	Y+17, r23	; 0x11
    13ca:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    13cc:	b7 01       	movw	r22, r14
    13ce:	60 1b       	sub	r22, r16
    13d0:	71 0b       	sbc	r23, r17
    13d2:	c9 01       	movw	r24, r18
    13d4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
    13d8:	7b 8b       	std	Y+19, r23	; 0x13
    13da:	6a 8b       	std	Y+18, r22	; 0x12
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	08 95       	ret

000013f2 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	0b b6       	in	r0, 0x3b	; 59
    13fe:	0f 92       	push	r0
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
    1408:	80 91 ce 00 	lds	r24, 0x00CE
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	29 f4       	brne	.+10     	; 0x141a <__vector_28+0x28>
    1410:	10 92 43 02 	sts	0x0243, r1
    1414:	10 92 42 02 	sts	0x0242, r1
    1418:	10 c0       	rjmp	.+32     	; 0x143a <__vector_28+0x48>
    141a:	e0 91 42 02 	lds	r30, 0x0242
    141e:	f0 91 43 02 	lds	r31, 0x0243
    1422:	ea 59       	subi	r30, 0x9A	; 154
    1424:	fc 4f       	sbci	r31, 0xFC	; 252
    1426:	80 83       	st	Z, r24
    1428:	80 91 42 02 	lds	r24, 0x0242
    142c:	90 91 43 02 	lds	r25, 0x0243
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	90 93 43 02 	sts	0x0243, r25
    1436:	80 93 42 02 	sts	0x0242, r24
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	0f 90       	pop	r0
    1444:	0b be       	out	0x3b, r0	; 59
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <carInit>:
    1450:	48 d5       	rcall	.+2704   	; 0x1ee2 <pwmInit>
    1452:	42 d6       	rcall	.+3204   	; 0x20d8 <spi_slave_init>
    1454:	8d ec       	ldi	r24, 0xCD	; 205
    1456:	9a e0       	ldi	r25, 0x0A	; 10
    1458:	90 93 89 00 	sts	0x0089, r25
    145c:	80 93 88 00 	sts	0x0088, r24
    1460:	84 e6       	ldi	r24, 0x64	; 100
    1462:	9a e0       	ldi	r25, 0x0A	; 10
    1464:	90 93 8b 00 	sts	0x008B, r25
    1468:	80 93 8a 00 	sts	0x008A, r24
    146c:	08 95       	ret

0000146e <USART1_init>:
    146e:	ec ec       	ldi	r30, 0xCC	; 204
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	11 82       	std	Z+1, r1	; 0x01
    1474:	10 82       	st	Z, r1
    1476:	20 e9       	ldi	r18, 0x90	; 144
    1478:	20 93 c9 00 	sts	0x00C9, r18
    147c:	2e e0       	ldi	r18, 0x0E	; 14
    147e:	20 93 ca 00 	sts	0x00CA, r18
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	10 92 43 02 	sts	0x0243, r1
    148a:	10 92 42 02 	sts	0x0242, r1
    148e:	08 95       	ret

00001490 <main>:




int main (void)
{
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2b 97       	sbiw	r28, 0x0b	; 11
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING	
	nFuzzySteering(150, 40);
    14a4:	68 e2       	ldi	r22, 0x28	; 40
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	86 e9       	ldi	r24, 0x96	; 150
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	f9 d4       	rcall	.+2546   	; 0x1ea0 <nFuzzySteering>
	FLC_steering(150, 50);
    14ae:	62 e3       	ldi	r22, 0x32	; 50
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	86 e9       	ldi	r24, 0x96	; 150
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	49 d9       	rcall	.-3438   	; 0x74a <FLC_steering>
	
	carInit();
    14b8:	cb df       	rcall	.-106    	; 0x1450 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ba:	2f ef       	ldi	r18, 0xFF	; 255
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	90 ee       	ldi	r25, 0xE0	; 224
    14c0:	21 50       	subi	r18, 0x01	; 1
    14c2:	80 40       	sbci	r24, 0x00	; 0
    14c4:	90 40       	sbci	r25, 0x00	; 0
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <main+0x30>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <main+0x3a>
    14ca:	00 00       	nop
	int k_value_stop_line;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	ce df       	rcall	.-100    	; 0x146e <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    14d6:	78 94       	sei
				FLC_steering(c,v);
			}
			else if (control_mode == 4)
			{
		
				if (TCNT3 < 4319) // 0.3 seconds
    14d8:	0f 2e       	mov	r0, r31
    14da:	f4 e9       	ldi	r31, 0x94	; 148
    14dc:	6f 2e       	mov	r6, r31
    14de:	71 2c       	mov	r7, r1
    14e0:	f0 2d       	mov	r31, r0
					setESC(2835);
					stop(k_value_stop_line);
				}
				else
				{
					TCCR3B = (0<<CS32)|(0<<CS30);
    14e2:	0f 2e       	mov	r0, r31
    14e4:	f1 e9       	ldi	r31, 0x91	; 145
    14e6:	4f 2e       	mov	r4, r31
    14e8:	51 2c       	mov	r5, r1
    14ea:	f0 2d       	mov	r31, r0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    14ec:	0f 2e       	mov	r0, r31
    14ee:	f8 e8       	ldi	r31, 0x88	; 136
    14f0:	cf 2e       	mov	r12, r31
    14f2:	d1 2c       	mov	r13, r1
    14f4:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    14f6:	0f 2e       	mov	r0, r31
    14f8:	fa e8       	ldi	r31, 0x8A	; 138
    14fa:	af 2e       	mov	r10, r31
    14fc:	b1 2c       	mov	r11, r1
    14fe:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    1500:	4b d6       	rcall	.+3222   	; 0x2198 <is_package_recieved>
    1502:	88 23       	and	r24, r24
    1504:	e9 f3       	breq	.-6      	; 0x1500 <main+0x70>
			

			//Reading Information
			prev_control_mode = control_mode;
    1506:	1b 85       	ldd	r17, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    1508:	be 01       	movw	r22, r28
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	ce 01       	movw	r24, r28
    1510:	0b 96       	adiw	r24, 0x0b	; 11
    1512:	4c d6       	rcall	.+3224   	; 0x21ac <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    1514:	8b 85       	ldd	r24, Y+11	; 0x0b
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	79 f4       	brne	.+30     	; 0x1538 <main+0xa8>
    151a:	11 11       	cpse	r17, r1
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <main+0xa8>
				onGoingStop = 0;
    151e:	10 92 45 02 	sts	0x0245, r1
    1522:	10 92 44 02 	sts	0x0244, r1
				count(1);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 66 00 	call	0xcc	; 0xcc <count>
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
    152e:	89 84       	ldd	r8, Y+9	; 0x09
    1530:	91 2c       	mov	r9, r1
    1532:	e8 e2       	ldi	r30, 0x28	; 40
    1534:	8e 1a       	sub	r8, r30
    1536:	91 08       	sbc	r9, r1
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1538:	6b 81       	ldd	r22, Y+3	; 0x03
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    153a:	f9 80       	ldd	r15, Y+1	; 0x01
			int v = (int) sensor_info.angular_diff;
    153c:	0a 81       	ldd	r16, Y+2	; 0x02
			
			cli();
    153e:	f8 94       	cli
			
			if (control_mode == 0)
    1540:	8b 85       	ldd	r24, Y+11	; 0x0b
    1542:	81 11       	cpse	r24, r1
    1544:	0c c0       	rjmp	.+24     	; 0x155e <main+0xce>
			int sF = (int) sensor_info.dist_sonic_middle;
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
    1546:	10 e0       	ldi	r17, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    1548:	f6 01       	movw	r30, r12
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
				onGoingStop = 0;
				count(1);
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    154e:	70 e0       	ldi	r23, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    1550:	a8 01       	movw	r20, r16
    1552:	75 dd       	rcall	.-1302   	; 0x103e <FLC_obstacle>
				FLC_steering(c,v);
    1554:	b8 01       	movw	r22, r16
    1556:	8f 2d       	mov	r24, r15
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	f7 d8       	rcall	.-3602   	; 0x74a <FLC_steering>
    155c:	16 c0       	rjmp	.+44     	; 0x158a <main+0xfa>
			}
			else if (control_mode == 4)
    155e:	84 30       	cpi	r24, 0x04	; 4
    1560:	a1 f4       	brne	.+40     	; 0x158a <main+0xfa>
			{
		
				if (TCNT3 < 4319) // 0.3 seconds
    1562:	f3 01       	movw	r30, r6
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	8f 3d       	cpi	r24, 0xDF	; 223
    156a:	90 41       	sbci	r25, 0x10	; 16
    156c:	30 f4       	brcc	.+12     	; 0x157a <main+0xea>
				{
					setESC(2835);
    156e:	83 e1       	ldi	r24, 0x13	; 19
    1570:	9b e0       	ldi	r25, 0x0B	; 11
    1572:	c6 d4       	rcall	.+2444   	; 0x1f00 <setESC>
					stop(k_value_stop_line);
    1574:	c4 01       	movw	r24, r8
    1576:	59 d6       	rcall	.+3250   	; 0x222a <stop>
    1578:	08 c0       	rjmp	.+16     	; 0x158a <main+0xfa>
				}
				else
				{
					TCCR3B = (0<<CS32)|(0<<CS30);
    157a:	f2 01       	movw	r30, r4
    157c:	10 82       	st	Z, r1
					setESC(NEUTRAL);
    157e:	8d ec       	ldi	r24, 0xCD	; 205
    1580:	9a e0       	ldi	r25, 0x0A	; 10
    1582:	be d4       	rcall	.+2428   	; 0x1f00 <setESC>
					setServo(STRAIGHT);
    1584:	84 e6       	ldi	r24, 0x64	; 100
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	d6 d4       	rcall	.+2476   	; 0x1f36 <setServo>
				}
			}
			

			
			sei();
    158a:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    158c:	f6 01       	movw	r30, r12
    158e:	e0 80       	ld	r14, Z
    1590:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1592:	f5 01       	movw	r30, r10
    1594:	00 81       	ld	r16, Z
    1596:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	a7 d5       	rcall	.+2894   	; 0x20ea <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    159c:	8e 2d       	mov	r24, r14
    159e:	a5 d5       	rcall	.+2890   	; 0x20ea <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	a3 d5       	rcall	.+2886   	; 0x20ea <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    15a4:	80 2f       	mov	r24, r16
    15a6:	a1 d5       	rcall	.+2882   	; 0x20ea <spi_send_byte>
    15a8:	ab cf       	rjmp	.-170    	; 0x1500 <main+0x70>

000015aa <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{
    15aa:	2f 92       	push	r2
    15ac:	3f 92       	push	r3
    15ae:	4f 92       	push	r4
    15b0:	5f 92       	push	r5
    15b2:	6f 92       	push	r6
    15b4:	7f 92       	push	r7
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	af 92       	push	r10
    15bc:	bf 92       	push	r11
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	ce 55       	subi	r28, 0x5E	; 94
    15d4:	d2 40       	sbci	r29, 0x02	; 2
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	c3 5a       	subi	r28, 0xA3	; 163
    15e2:	dd 4f       	sbci	r29, 0xFD	; 253
    15e4:	99 83       	std	Y+1, r25	; 0x01
    15e6:	88 83       	st	Y, r24
    15e8:	cd 55       	subi	r28, 0x5D	; 93
    15ea:	d2 40       	sbci	r29, 0x02	; 2
    15ec:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    15ee:	88 e0       	ldi	r24, 0x08	; 8
    15f0:	e4 e0       	ldi	r30, 0x04	; 4
    15f2:	f1 e0       	ldi	r31, 0x01	; 1
    15f4:	de 01       	movw	r26, r28
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	01 90       	ld	r0, Z+
    15fa:	0d 92       	st	X+, r0
    15fc:	8a 95       	dec	r24
    15fe:	e1 f7       	brne	.-8      	; 0x15f8 <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 110, 125); // Min_value = 100
    1600:	3e 01       	movw	r6, r28
    1602:	21 e1       	ldi	r18, 0x11	; 17
    1604:	62 0e       	add	r6, r18
    1606:	71 1c       	adc	r7, r1
    1608:	0f 2e       	mov	r0, r31
    160a:	fd e7       	ldi	r31, 0x7D	; 125
    160c:	ef 2e       	mov	r14, r31
    160e:	f1 2c       	mov	r15, r1
    1610:	f0 2d       	mov	r31, r0
    1612:	0e e6       	ldi	r16, 0x6E	; 110
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	24 e6       	ldi	r18, 0x64	; 100
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	43 e6       	ldi	r20, 0x63	; 99
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	6f ec       	ldi	r22, 0xCF	; 207
    1620:	71 e0       	ldi	r23, 0x01	; 1
    1622:	c3 01       	movw	r24, r6
    1624:	b4 de       	rcall	.-664    	; 0x138e <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRight", 115, 130, 130, 145);
    1626:	4e 01       	movw	r8, r28
    1628:	47 e2       	ldi	r20, 0x27	; 39
    162a:	84 0e       	add	r8, r20
    162c:	91 1c       	adc	r9, r1
    162e:	0f 2e       	mov	r0, r31
    1630:	f1 e9       	ldi	r31, 0x91	; 145
    1632:	ef 2e       	mov	r14, r31
    1634:	f1 2c       	mov	r15, r1
    1636:	f0 2d       	mov	r31, r0
    1638:	02 e8       	ldi	r16, 0x82	; 130
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	22 e8       	ldi	r18, 0x82	; 130
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	43 e7       	ldi	r20, 0x73	; 115
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	68 ed       	ldi	r22, 0xD8	; 216
    1646:	71 e0       	ldi	r23, 0x01	; 1
    1648:	c4 01       	movw	r24, r8
    164a:	a1 de       	rcall	.-702    	; 0x138e <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135, 150, 150, 165);
    164c:	2e 01       	movw	r4, r28
    164e:	5d e3       	ldi	r21, 0x3D	; 61
    1650:	45 0e       	add	r4, r21
    1652:	51 1c       	adc	r5, r1
    1654:	0f 2e       	mov	r0, r31
    1656:	f5 ea       	ldi	r31, 0xA5	; 165
    1658:	ef 2e       	mov	r14, r31
    165a:	f1 2c       	mov	r15, r1
    165c:	f0 2d       	mov	r31, r0
    165e:	06 e9       	ldi	r16, 0x96	; 150
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	26 e9       	ldi	r18, 0x96	; 150
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	47 e8       	ldi	r20, 0x87	; 135
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	66 e1       	ldi	r22, 0x16	; 22
    166c:	71 e0       	ldi	r23, 0x01	; 1
    166e:	c2 01       	movw	r24, r4
    1670:	8e de       	rcall	.-740    	; 0x138e <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLeft", 155, 170, 170, 185);
    1672:	5e 01       	movw	r10, r28
    1674:	63 e5       	ldi	r22, 0x53	; 83
    1676:	a6 0e       	add	r10, r22
    1678:	b1 1c       	adc	r11, r1
    167a:	0f 2e       	mov	r0, r31
    167c:	f9 eb       	ldi	r31, 0xB9	; 185
    167e:	ef 2e       	mov	r14, r31
    1680:	f1 2c       	mov	r15, r1
    1682:	f0 2d       	mov	r31, r0
    1684:	0a ea       	ldi	r16, 0xAA	; 170
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	2a ea       	ldi	r18, 0xAA	; 170
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4b e9       	ldi	r20, 0x9B	; 155
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	63 ee       	ldi	r22, 0xE3	; 227
    1692:	71 e0       	ldi	r23, 0x01	; 1
    1694:	c5 01       	movw	r24, r10
    1696:	7b de       	rcall	.-778    	; 0x138e <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 175, 190, 200, 201);  // Max_value = 200
    1698:	6e 01       	movw	r12, r28
    169a:	79 e6       	ldi	r23, 0x69	; 105
    169c:	c7 0e       	add	r12, r23
    169e:	d1 1c       	adc	r13, r1
    16a0:	0f 2e       	mov	r0, r31
    16a2:	f9 ec       	ldi	r31, 0xC9	; 201
    16a4:	ef 2e       	mov	r14, r31
    16a6:	f1 2c       	mov	r15, r1
    16a8:	f0 2d       	mov	r31, r0
    16aa:	08 ec       	ldi	r16, 0xC8	; 200
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	2e eb       	ldi	r18, 0xBE	; 190
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4f ea       	ldi	r20, 0xAF	; 175
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	6d ee       	ldi	r22, 0xED	; 237
    16b8:	71 e0       	ldi	r23, 0x01	; 1
    16ba:	c6 01       	movw	r24, r12
    16bc:	68 de       	rcall	.-816    	; 0x138e <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    16be:	7e 86       	std	Y+14, r7	; 0x0e
    16c0:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    16c2:	9e a2       	std	Y+38, r9	; 0x26
    16c4:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    16c6:	5c ae       	std	Y+60, r5	; 0x3c
    16c8:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    16ca:	63 96       	adiw	r28, 0x13	; 19
    16cc:	bf ae       	std	Y+63, r11	; 0x3f
    16ce:	ae ae       	std	Y+62, r10	; 0x3e
    16d0:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    16d2:	d5 01       	movw	r26, r10
    16d4:	55 96       	adiw	r26, 0x15	; 21
    16d6:	dc 92       	st	X, r13
    16d8:	ce 92       	st	-X, r12
    16da:	54 97       	sbiw	r26, 0x14	; 20
	farLeft.next = NULL;
    16dc:	f6 01       	movw	r30, r12
    16de:	15 8a       	std	Z+21, r1	; 0x15
    16e0:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    16e2:	c3 5a       	subi	r28, 0xA3	; 163
    16e4:	dd 4f       	sbci	r29, 0xFD	; 253
    16e6:	48 81       	ld	r20, Y
    16e8:	59 81       	ldd	r21, Y+1	; 0x01
    16ea:	cd 55       	subi	r28, 0x5D	; 93
    16ec:	d2 40       	sbci	r29, 0x02	; 2
    16ee:	44 36       	cpi	r20, 0x64	; 100
    16f0:	51 05       	cpc	r21, r1
    16f2:	2c f4       	brge	.+10     	; 0x16fe <nDoFuzzy+0x154>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    16f4:	84 e6       	ldi	r24, 0x64	; 100
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 87       	std	Y+12, r25	; 0x0c
    16fa:	8b 87       	std	Y+11, r24	; 0x0b
    16fc:	16 c0       	rjmp	.+44     	; 0x172a <nDoFuzzy+0x180>
	}
	else if(c>200)			// if sensor value is bigger than delta_C's input set's upper limit
    16fe:	c3 5a       	subi	r28, 0xA3	; 163
    1700:	dd 4f       	sbci	r29, 0xFD	; 253
    1702:	68 81       	ld	r22, Y
    1704:	79 81       	ldd	r23, Y+1	; 0x01
    1706:	cd 55       	subi	r28, 0x5D	; 93
    1708:	d2 40       	sbci	r29, 0x02	; 2
    170a:	69 3c       	cpi	r22, 0xC9	; 201
    170c:	71 05       	cpc	r23, r1
    170e:	2c f0       	brlt	.+10     	; 0x171a <nDoFuzzy+0x170>
	{
		delta_C.value = 200;  // force input value to lowest point in delta_C's input set
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9c 87       	std	Y+12, r25	; 0x0c
    1716:	8b 87       	std	Y+11, r24	; 0x0b
    1718:	08 c0       	rjmp	.+16     	; 0x172a <nDoFuzzy+0x180>
	}
	else
	{
		delta_C.value = c;
    171a:	c3 5a       	subi	r28, 0xA3	; 163
    171c:	dd 4f       	sbci	r29, 0xFD	; 253
    171e:	88 81       	ld	r24, Y
    1720:	99 81       	ldd	r25, Y+1	; 0x01
    1722:	cd 55       	subi	r28, 0x5D	; 93
    1724:	d2 40       	sbci	r29, 0x02	; 2
    1726:	9c 87       	std	Y+12, r25	; 0x0c
    1728:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	e6 e2       	ldi	r30, 0x26	; 38
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	de 01       	movw	r26, r28
    1732:	a1 58       	subi	r26, 0x81	; 129
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	01 90       	ld	r0, Z+
    1738:	0d 92       	st	X+, r0
    173a:	8a 95       	dec	r24
    173c:	e1 f7       	brne	.-8      	; 0x1736 <nDoFuzzy+0x18c>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOrien", 0, 30, 30, 60); // min V is 0
    173e:	4e 01       	movw	r8, r28
    1740:	9f e8       	ldi	r25, 0x8F	; 143
    1742:	89 0e       	add	r8, r25
    1744:	91 1c       	adc	r9, r1
    1746:	0f 2e       	mov	r0, r31
    1748:	fc e3       	ldi	r31, 0x3C	; 60
    174a:	ef 2e       	mov	r14, r31
    174c:	f1 2c       	mov	r15, r1
    174e:	f0 2d       	mov	r31, r0
    1750:	0e e1       	ldi	r16, 0x1E	; 30
    1752:	10 e0       	ldi	r17, 0x00	; 0
    1754:	2e e1       	ldi	r18, 0x1E	; 30
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	65 ef       	ldi	r22, 0xF5	; 245
    175e:	71 e0       	ldi	r23, 0x01	; 1
    1760:	c4 01       	movw	r24, r8
    1762:	15 de       	rcall	.-982    	; 0x138e <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOrient", 10, 40, 40, 70);
    1764:	5e 01       	movw	r10, r28
    1766:	a5 ea       	ldi	r26, 0xA5	; 165
    1768:	aa 0e       	add	r10, r26
    176a:	b1 1c       	adc	r11, r1
    176c:	0f 2e       	mov	r0, r31
    176e:	f6 e4       	ldi	r31, 0x46	; 70
    1770:	ef 2e       	mov	r14, r31
    1772:	f1 2c       	mov	r15, r1
    1774:	f0 2d       	mov	r31, r0
    1776:	08 e2       	ldi	r16, 0x28	; 40
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	28 e2       	ldi	r18, 0x28	; 40
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a e0       	ldi	r20, 0x0A	; 10
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	6f ef       	ldi	r22, 0xFF	; 255
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	c5 01       	movw	r24, r10
    1788:	02 de       	rcall	.-1020   	; 0x138e <MATLAB_MF>
	
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "righOrient", 20, 50, 50, 80); // max V is 80
    178a:	6e 01       	movw	r12, r28
    178c:	bb eb       	ldi	r27, 0xBB	; 187
    178e:	cb 0e       	add	r12, r27
    1790:	d1 1c       	adc	r13, r1
    1792:	0f 2e       	mov	r0, r31
    1794:	f0 e5       	ldi	r31, 0x50	; 80
    1796:	ef 2e       	mov	r14, r31
    1798:	f1 2c       	mov	r15, r1
    179a:	f0 2d       	mov	r31, r0
    179c:	02 e3       	ldi	r16, 0x32	; 50
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	22 e3       	ldi	r18, 0x32	; 50
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	44 e1       	ldi	r20, 0x14	; 20
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	6a e0       	ldi	r22, 0x0A	; 10
    17aa:	72 e0       	ldi	r23, 0x02	; 2
    17ac:	c6 01       	movw	r24, r12
    17ae:	ef dd       	rcall	.-1058   	; 0x138e <MATLAB_MF>
	
	delta_V.membership_functions = &leftOriented;
    17b0:	c5 57       	subi	r28, 0x75	; 117
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	99 82       	std	Y+1, r9	; 0x01
    17b6:	88 82       	st	Y, r8
    17b8:	cb 58       	subi	r28, 0x8B	; 139
    17ba:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    17bc:	f4 01       	movw	r30, r8
    17be:	b5 8a       	std	Z+21, r11	; 0x15
    17c0:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    17c2:	d5 01       	movw	r26, r10
    17c4:	55 96       	adiw	r26, 0x15	; 21
    17c6:	dc 92       	st	X, r13
    17c8:	ce 92       	st	-X, r12
    17ca:	54 97       	sbiw	r26, 0x14	; 20
	rightOriented.next = NULL;
    17cc:	f6 01       	movw	r30, r12
    17ce:	15 8a       	std	Z+21, r1	; 0x15
    17d0:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
    17d2:	33 20       	and	r3, r3
    17d4:	3c f4       	brge	.+14     	; 0x17e4 <nDoFuzzy+0x23a>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
    17d6:	c7 57       	subi	r28, 0x77	; 119
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	18 82       	st	Y, r1
    17de:	c9 58       	subi	r28, 0x89	; 137
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <nDoFuzzy+0x260>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
    17e4:	f1 e5       	ldi	r31, 0x51	; 81
    17e6:	2f 16       	cp	r2, r31
    17e8:	31 04       	cpc	r3, r1
    17ea:	4c f0       	brlt	.+18     	; 0x17fe <nDoFuzzy+0x254>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
    17ec:	80 e5       	ldi	r24, 0x50	; 80
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	c7 57       	subi	r28, 0x77	; 119
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	99 83       	std	Y+1, r25	; 0x01
    17f6:	88 83       	st	Y, r24
    17f8:	c9 58       	subi	r28, 0x89	; 137
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <nDoFuzzy+0x260>
	}
	else
	{
		delta_V.value = v;
    17fe:	c7 57       	subi	r28, 0x77	; 119
    1800:	df 4f       	sbci	r29, 0xFF	; 255
    1802:	39 82       	std	Y+1, r3	; 0x01
    1804:	28 82       	st	Y, r2
    1806:	c9 58       	subi	r28, 0x89	; 137
    1808:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
    180a:	1e 01       	movw	r2, r28
    180c:	21 ed       	ldi	r18, 0xD1	; 209
    180e:	22 0e       	add	r2, r18
    1810:	31 1c       	adc	r3, r1
    1812:	89 e0       	ldi	r24, 0x09	; 9
    1814:	e4 e4       	ldi	r30, 0x44	; 68
    1816:	f1 e0       	ldi	r31, 0x01	; 1
    1818:	d1 01       	movw	r26, r2
    181a:	01 90       	ld	r0, Z+
    181c:	0d 92       	st	X+, r0
    181e:	8a 95       	dec	r24
    1820:	e1 f7       	brne	.-8      	; 0x181a <nDoFuzzy+0x270>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2209, 2210, 2210, 2390);
    1822:	5e 01       	movw	r10, r28
    1824:	41 ee       	ldi	r20, 0xE1	; 225
    1826:	a4 0e       	add	r10, r20
    1828:	b1 1c       	adc	r11, r1
    182a:	0f 2e       	mov	r0, r31
    182c:	f6 e5       	ldi	r31, 0x56	; 86
    182e:	ef 2e       	mov	r14, r31
    1830:	f9 e0       	ldi	r31, 0x09	; 9
    1832:	ff 2e       	mov	r15, r31
    1834:	f0 2d       	mov	r31, r0
    1836:	02 ea       	ldi	r16, 0xA2	; 162
    1838:	18 e0       	ldi	r17, 0x08	; 8
    183a:	22 ea       	ldi	r18, 0xA2	; 162
    183c:	38 e0       	ldi	r19, 0x08	; 8
    183e:	41 ea       	ldi	r20, 0xA1	; 161
    1840:	58 e0       	ldi	r21, 0x08	; 8
    1842:	6d e4       	ldi	r22, 0x4D	; 77
    1844:	71 e0       	ldi	r23, 0x01	; 1
    1846:	c5 01       	movw	r24, r10
    1848:	a2 dd       	rcall	.-1212   	; 0x138e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2310, 2450, 2450, 2590);
    184a:	4e 01       	movw	r8, r28
    184c:	57 ef       	ldi	r21, 0xF7	; 247
    184e:	85 0e       	add	r8, r21
    1850:	91 1c       	adc	r9, r1
    1852:	0f 2e       	mov	r0, r31
    1854:	fe e1       	ldi	r31, 0x1E	; 30
    1856:	ef 2e       	mov	r14, r31
    1858:	fa e0       	ldi	r31, 0x0A	; 10
    185a:	ff 2e       	mov	r15, r31
    185c:	f0 2d       	mov	r31, r0
    185e:	02 e9       	ldi	r16, 0x92	; 146
    1860:	19 e0       	ldi	r17, 0x09	; 9
    1862:	22 e9       	ldi	r18, 0x92	; 146
    1864:	39 e0       	ldi	r19, 0x09	; 9
    1866:	46 e0       	ldi	r20, 0x06	; 6
    1868:	59 e0       	ldi	r21, 0x09	; 9
    186a:	65 e3       	ldi	r22, 0x35	; 53
    186c:	72 e0       	ldi	r23, 0x02	; 2
    186e:	c4 01       	movw	r24, r8
    1870:	8e dd       	rcall	.-1252   	; 0x138e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2510, 2660, 2660, 2810);
    1872:	3e 01       	movw	r6, r28
    1874:	63 ef       	ldi	r22, 0xF3	; 243
    1876:	66 1a       	sub	r6, r22
    1878:	6e ef       	ldi	r22, 0xFE	; 254
    187a:	76 0a       	sbc	r7, r22
    187c:	0f 2e       	mov	r0, r31
    187e:	fa ef       	ldi	r31, 0xFA	; 250
    1880:	ef 2e       	mov	r14, r31
    1882:	fa e0       	ldi	r31, 0x0A	; 10
    1884:	ff 2e       	mov	r15, r31
    1886:	f0 2d       	mov	r31, r0
    1888:	04 e6       	ldi	r16, 0x64	; 100
    188a:	1a e0       	ldi	r17, 0x0A	; 10
    188c:	24 e6       	ldi	r18, 0x64	; 100
    188e:	3a e0       	ldi	r19, 0x0A	; 10
    1890:	4e ec       	ldi	r20, 0xCE	; 206
    1892:	59 e0       	ldi	r21, 0x09	; 9
    1894:	67 e5       	ldi	r22, 0x57	; 87
    1896:	71 e0       	ldi	r23, 0x01	; 1
    1898:	c3 01       	movw	r24, r6
    189a:	79 dd       	rcall	.-1294   	; 0x138e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2730, 2870, 2870, 3010);
    189c:	6e 01       	movw	r12, r28
    189e:	7d ed       	ldi	r23, 0xDD	; 221
    18a0:	c7 1a       	sub	r12, r23
    18a2:	7e ef       	ldi	r23, 0xFE	; 254
    18a4:	d7 0a       	sbc	r13, r23
    18a6:	0f 2e       	mov	r0, r31
    18a8:	f2 ec       	ldi	r31, 0xC2	; 194
    18aa:	ef 2e       	mov	r14, r31
    18ac:	fb e0       	ldi	r31, 0x0B	; 11
    18ae:	ff 2e       	mov	r15, r31
    18b0:	f0 2d       	mov	r31, r0
    18b2:	06 e3       	ldi	r16, 0x36	; 54
    18b4:	1b e0       	ldi	r17, 0x0B	; 11
    18b6:	26 e3       	ldi	r18, 0x36	; 54
    18b8:	3b e0       	ldi	r19, 0x0B	; 11
    18ba:	4a ea       	ldi	r20, 0xAA	; 170
    18bc:	5a e0       	ldi	r21, 0x0A	; 10
    18be:	64 e2       	ldi	r22, 0x24	; 36
    18c0:	72 e0       	ldi	r23, 0x02	; 2
    18c2:	c6 01       	movw	r24, r12
    18c4:	64 dd       	rcall	.-1336   	; 0x138e <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2930, 3110, 3110, 3111);
    18c6:	2e 01       	movw	r4, r28
    18c8:	87 ec       	ldi	r24, 0xC7	; 199
    18ca:	48 1a       	sub	r4, r24
    18cc:	8e ef       	ldi	r24, 0xFE	; 254
    18ce:	58 0a       	sbc	r5, r24
    18d0:	0f 2e       	mov	r0, r31
    18d2:	f7 e2       	ldi	r31, 0x27	; 39
    18d4:	ef 2e       	mov	r14, r31
    18d6:	fc e0       	ldi	r31, 0x0C	; 12
    18d8:	ff 2e       	mov	r15, r31
    18da:	f0 2d       	mov	r31, r0
    18dc:	06 e2       	ldi	r16, 0x26	; 38
    18de:	1c e0       	ldi	r17, 0x0C	; 12
    18e0:	26 e2       	ldi	r18, 0x26	; 38
    18e2:	3c e0       	ldi	r19, 0x0C	; 12
    18e4:	42 e7       	ldi	r20, 0x72	; 114
    18e6:	5b e0       	ldi	r21, 0x0B	; 11
    18e8:	60 e6       	ldi	r22, 0x60	; 96
    18ea:	71 e0       	ldi	r23, 0x01	; 1
    18ec:	c2 01       	movw	r24, r4
    18ee:	4f dd       	rcall	.-1378   	; 0x138e <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    18f0:	d1 01       	movw	r26, r2
    18f2:	1d 96       	adiw	r26, 0x0d	; 13
    18f4:	5c 92       	st	X, r5
    18f6:	4e 92       	st	-X, r4
    18f8:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
    18fa:	f2 01       	movw	r30, r4
    18fc:	d5 8a       	std	Z+21, r13	; 0x15
    18fe:	c4 8a       	std	Z+20, r12	; 0x14
	right.next = &straight;
    1900:	d6 01       	movw	r26, r12
    1902:	55 96       	adiw	r26, 0x15	; 21
    1904:	7c 92       	st	X, r7
    1906:	6e 92       	st	-X, r6
    1908:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
    190a:	f3 01       	movw	r30, r6
    190c:	95 8a       	std	Z+21, r9	; 0x15
    190e:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &sharpLeft;
    1910:	d4 01       	movw	r26, r8
    1912:	55 96       	adiw	r26, 0x15	; 21
    1914:	bc 92       	st	X, r11
    1916:	ae 92       	st	-X, r10
    1918:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
    191a:	f5 01       	movw	r30, r10
    191c:	15 8a       	std	Z+21, r1	; 0x15
    191e:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	90 93 63 03 	sts	0x0363, r25
    1928:	80 93 62 03 	sts	0x0362, r24
	delta_C.next = &delta_V;
    192c:	e2 56       	subi	r30, 0x62	; 98
    192e:	f1 09       	sbc	r31, r1
    1930:	f8 8b       	std	Y+16, r31	; 0x10
    1932:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    1934:	17 86       	std	Z+15, r1	; 0x0f
    1936:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    1938:	30 92 61 03 	sts	0x0361, r3
    193c:	20 92 60 03 	sts	0x0360, r2
	steering.next = NULL;
    1940:	d1 01       	movw	r26, r2
    1942:	1f 96       	adiw	r26, 0x0f	; 15
    1944:	1c 92       	st	X, r1
    1946:	1e 92       	st	-X, r1
    1948:	1e 97       	sbiw	r26, 0x0e	; 14

	//RULE 15 "if deltaC is farRight and deltaV is leftOriented then steering is straight"
	struct rule_element_type then15;
	then15.value = &straight.value;
    194a:	be 01       	movw	r22, r28
    194c:	61 5b       	subi	r22, 0xB1	; 177
    194e:	7e 4f       	sbci	r23, 0xFE	; 254
    1950:	73 01       	movw	r14, r6
    1952:	ba e0       	ldi	r27, 0x0A	; 10
    1954:	eb 0e       	add	r14, r27
    1956:	f1 1c       	adc	r15, r1
    1958:	fb 01       	movw	r30, r22
    195a:	f1 82       	std	Z+1, r15	; 0x01
    195c:	e0 82       	st	Z, r14
	then15.next = NULL;
    195e:	13 82       	std	Z+3, r1	; 0x03
    1960:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if152;
	if152.value = &leftOriented.value;
    1962:	de 01       	movw	r26, r28
    1964:	ad 5a       	subi	r26, 0xAD	; 173
    1966:	be 4f       	sbci	r27, 0xFE	; 254
    1968:	9e 01       	movw	r18, r28
    196a:	27 56       	subi	r18, 0x67	; 103
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	11 96       	adiw	r26, 0x01	; 1
    1970:	3c 93       	st	X, r19
    1972:	2e 93       	st	-X, r18
	if152.next = NULL;
    1974:	13 96       	adiw	r26, 0x03	; 3
    1976:	1c 92       	st	X, r1
    1978:	1e 92       	st	-X, r1
    197a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if151;
	if151.value = &farRight.value;
    197c:	8a 5a       	subi	r24, 0xAA	; 170
    197e:	9e 4f       	sbci	r25, 0xFE	; 254
    1980:	3e 01       	movw	r6, r28
    1982:	fb e1       	ldi	r31, 0x1B	; 27
    1984:	6f 0e       	add	r6, r31
    1986:	71 1c       	adc	r7, r1
    1988:	fc 01       	movw	r30, r24
    198a:	71 82       	std	Z+1, r7	; 0x01
    198c:	60 82       	st	Z, r6
	if151.next = &if152;
    198e:	b3 83       	std	Z+3, r27	; 0x03
    1990:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule15;
	rule15.if_side = &if151;
    1992:	18 96       	adiw	r26, 0x08	; 8
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	9c 93       	st	X, r25
    1998:	8e 93       	st	-X, r24
	rule15.then_side = &then15;
    199a:	13 96       	adiw	r26, 0x03	; 3
    199c:	7c 93       	st	X, r23
    199e:	6e 93       	st	-X, r22
    19a0:	12 97       	sbiw	r26, 0x02	; 2
	rule15.next = NULL;
    19a2:	15 96       	adiw	r26, 0x05	; 5
    19a4:	1c 92       	st	X, r1
    19a6:	1e 92       	st	-X, r1
    19a8:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 14 "if deltaC is farRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then14;
	then14.value = &left.value;
    19aa:	6e 5e       	subi	r22, 0xEE	; 238
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	fa e0       	ldi	r31, 0x0A	; 10
    19b0:	8f 0e       	add	r8, r31
    19b2:	91 1c       	adc	r9, r1
    19b4:	fb 01       	movw	r30, r22
    19b6:	91 82       	std	Z+1, r9	; 0x01
    19b8:	80 82       	st	Z, r8
	then14.next = NULL;
    19ba:	13 82       	std	Z+3, r1	; 0x03
    19bc:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if142;
	if142.value = &straightOriented.value;
    19be:	8e 01       	movw	r16, r28
    19c0:	0b 59       	subi	r16, 0x9B	; 155
    19c2:	1e 4f       	sbci	r17, 0xFE	; 254
    19c4:	88 5a       	subi	r24, 0xA8	; 168
    19c6:	91 09       	sbc	r25, r1
    19c8:	f8 01       	movw	r30, r16
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
	if142.next = NULL;
    19ce:	13 82       	std	Z+3, r1	; 0x03
    19d0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if141;
	if141.value = &farRight.value;
    19d2:	ae 01       	movw	r20, r28
    19d4:	47 59       	subi	r20, 0x97	; 151
    19d6:	5e 4f       	sbci	r21, 0xFE	; 254
    19d8:	fa 01       	movw	r30, r20
    19da:	71 82       	std	Z+1, r7	; 0x01
    19dc:	60 82       	st	Z, r6
	if141.next = &if142;
    19de:	13 83       	std	Z+3, r17	; 0x03
    19e0:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule14;
	rule14.if_side = &if141;
    19e2:	34 96       	adiw	r30, 0x04	; 4
    19e4:	51 83       	std	Z+1, r21	; 0x01
    19e6:	40 83       	st	Z, r20
	rule14.then_side = &then14;
    19e8:	73 83       	std	Z+3, r23	; 0x03
    19ea:	62 83       	std	Z+2, r22	; 0x02
	rule14.next = &rule15;
    19ec:	b5 83       	std	Z+5, r27	; 0x05
    19ee:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 13 "if deltaC is farRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then13;
	then13.value = &sharpLeft.value;
    19f0:	02 5f       	subi	r16, 0xF2	; 242
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	4e 57       	subi	r20, 0x7E	; 126
    19f6:	51 09       	sbc	r21, r1
    19f8:	c3 5a       	subi	r28, 0xA3	; 163
    19fa:	dd 4f       	sbci	r29, 0xFD	; 253
    19fc:	59 83       	std	Y+1, r21	; 0x01
    19fe:	48 83       	st	Y, r20
    1a00:	cd 55       	subi	r28, 0x5D	; 93
    1a02:	d2 40       	sbci	r29, 0x02	; 2
    1a04:	d8 01       	movw	r26, r16
    1a06:	11 96       	adiw	r26, 0x01	; 1
    1a08:	5c 93       	st	X, r21
    1a0a:	4e 93       	st	-X, r20
	then13.next = NULL;
    1a0c:	13 96       	adiw	r26, 0x03	; 3
    1a0e:	1c 92       	st	X, r1
    1a10:	1e 92       	st	-X, r1
    1a12:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if132;
	if132.value = &rightOriented.value;
    1a14:	5e 01       	movw	r10, r28
    1a16:	b9 e8       	ldi	r27, 0x89	; 137
    1a18:	ab 1a       	sub	r10, r27
    1a1a:	be ef       	ldi	r27, 0xFE	; 254
    1a1c:	bb 0a       	sbc	r11, r27
    1a1e:	46 52       	subi	r20, 0x26	; 38
    1a20:	51 09       	sbc	r21, r1
    1a22:	d5 01       	movw	r26, r10
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	5c 93       	st	X, r21
    1a28:	4e 93       	st	-X, r20
	if132.next = NULL;
    1a2a:	13 96       	adiw	r26, 0x03	; 3
    1a2c:	1c 92       	st	X, r1
    1a2e:	1e 92       	st	-X, r1
    1a30:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if131;
	if131.value = &farRight.value;
    1a32:	66 5e       	subi	r22, 0xE6	; 230
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	db 01       	movw	r26, r22
    1a38:	11 96       	adiw	r26, 0x01	; 1
    1a3a:	7c 92       	st	X, r7
    1a3c:	6e 92       	st	-X, r6
	if131.next = &if132;
    1a3e:	13 96       	adiw	r26, 0x03	; 3
    1a40:	bc 92       	st	X, r11
    1a42:	ae 92       	st	-X, r10
    1a44:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule13;
	rule13.if_side = &if131;
    1a46:	14 96       	adiw	r26, 0x04	; 4
    1a48:	11 96       	adiw	r26, 0x01	; 1
    1a4a:	7c 93       	st	X, r23
    1a4c:	6e 93       	st	-X, r22
	rule13.then_side = &then13;
    1a4e:	13 96       	adiw	r26, 0x03	; 3
    1a50:	1c 93       	st	X, r17
    1a52:	0e 93       	st	-X, r16
    1a54:	12 97       	sbiw	r26, 0x02	; 2
	rule13.next = &rule14;
    1a56:	15 96       	adiw	r26, 0x05	; 5
    1a58:	fc 93       	st	X, r31
    1a5a:	ee 93       	st	-X, r30
    1a5c:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 12 "if deltaC is smallRight and deltaV is leftOriented then steering is right"
	struct rule_element_type then12;
	then12.value = &right.value;
    1a5e:	0e 5e       	subi	r16, 0xEE	; 238
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	ea e0       	ldi	r30, 0x0A	; 10
    1a64:	ce 0e       	add	r12, r30
    1a66:	d1 1c       	adc	r13, r1
    1a68:	f8 01       	movw	r30, r16
    1a6a:	d1 82       	std	Z+1, r13	; 0x01
    1a6c:	c0 82       	st	Z, r12
	then12.next = NULL;
    1a6e:	13 82       	std	Z+3, r1	; 0x03
    1a70:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if122;
	if122.value = &leftOriented.value;
    1a72:	3e 01       	movw	r6, r28
    1a74:	f7 e7       	ldi	r31, 0x77	; 119
    1a76:	6f 1a       	sub	r6, r31
    1a78:	fe ef       	ldi	r31, 0xFE	; 254
    1a7a:	7f 0a       	sbc	r7, r31
    1a7c:	f3 01       	movw	r30, r6
    1a7e:	31 83       	std	Z+1, r19	; 0x01
    1a80:	20 83       	st	Z, r18
	if122.next = NULL;
    1a82:	13 82       	std	Z+3, r1	; 0x03
    1a84:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if121;
	if121.value = &smallRight.value;
    1a86:	5e 01       	movw	r10, r28
    1a88:	f1 e3       	ldi	r31, 0x31	; 49
    1a8a:	af 0e       	add	r10, r31
    1a8c:	b1 1c       	adc	r11, r1
    1a8e:	c3 57       	subi	r28, 0x73	; 115
    1a90:	de 4f       	sbci	r29, 0xFE	; 254
    1a92:	b9 82       	std	Y+1, r11	; 0x01
    1a94:	a8 82       	st	Y, r10
    1a96:	cd 58       	subi	r28, 0x8D	; 141
    1a98:	d1 40       	sbci	r29, 0x01	; 1
	if121.next = &if122;
    1a9a:	c1 57       	subi	r28, 0x71	; 113
    1a9c:	de 4f       	sbci	r29, 0xFE	; 254
    1a9e:	79 82       	std	Y+1, r7	; 0x01
    1aa0:	68 82       	st	Y, r6
    1aa2:	cf 58       	subi	r28, 0x8F	; 143
    1aa4:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule12;
	rule12.if_side = &if121;
    1aa6:	38 96       	adiw	r30, 0x08	; 8
    1aa8:	6d e8       	ldi	r22, 0x8D	; 141
    1aaa:	71 e0       	ldi	r23, 0x01	; 1
    1aac:	6c 0f       	add	r22, r28
    1aae:	7d 1f       	adc	r23, r29
    1ab0:	71 83       	std	Z+1, r23	; 0x01
    1ab2:	60 83       	st	Z, r22
	rule12.then_side = &then12;
    1ab4:	13 83       	std	Z+3, r17	; 0x03
    1ab6:	02 83       	std	Z+2, r16	; 0x02
	rule12.next = &rule13;
    1ab8:	b5 83       	std	Z+5, r27	; 0x05
    1aba:	a4 83       	std	Z+4, r26	; 0x04


	//RULE 11 "if deltaC is smallRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then11;
	then11.value = &left.value;
    1abc:	0e 5e       	subi	r16, 0xEE	; 238
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	d8 01       	movw	r26, r16
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	9c 92       	st	X, r9
    1ac6:	8e 92       	st	-X, r8
	then11.next = NULL;
    1ac8:	13 96       	adiw	r26, 0x03	; 3
    1aca:	1c 92       	st	X, r1
    1acc:	1e 92       	st	-X, r1
    1ace:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if112;
	if112.value = &straightOriented.value;
    1ad0:	3e 01       	movw	r6, r28
    1ad2:	b5 e6       	ldi	r27, 0x65	; 101
    1ad4:	6b 1a       	sub	r6, r27
    1ad6:	be ef       	ldi	r27, 0xFE	; 254
    1ad8:	7b 0a       	sbc	r7, r27
    1ada:	d3 01       	movw	r26, r6
    1adc:	11 96       	adiw	r26, 0x01	; 1
    1ade:	9c 93       	st	X, r25
    1ae0:	8e 93       	st	-X, r24
	if112.next = NULL;
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	1c 92       	st	X, r1
    1ae6:	1e 92       	st	-X, r1
    1ae8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if111;
	if111.value = &smallRight.value;
    1aea:	6e 5e       	subi	r22, 0xEE	; 238
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	db 01       	movw	r26, r22
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	bc 92       	st	X, r11
    1af4:	ae 92       	st	-X, r10
	if111.next = &if112;
    1af6:	13 96       	adiw	r26, 0x03	; 3
    1af8:	7c 92       	st	X, r7
    1afa:	6e 92       	st	-X, r6
    1afc:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule11;
	rule11.if_side = &if111;
    1afe:	14 96       	adiw	r26, 0x04	; 4
    1b00:	11 96       	adiw	r26, 0x01	; 1
    1b02:	7c 93       	st	X, r23
    1b04:	6e 93       	st	-X, r22
	rule11.then_side = &then11;
    1b06:	13 96       	adiw	r26, 0x03	; 3
    1b08:	1c 93       	st	X, r17
    1b0a:	0e 93       	st	-X, r16
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
	rule11.next = &rule12;
    1b0e:	15 96       	adiw	r26, 0x05	; 5
    1b10:	fc 93       	st	X, r31
    1b12:	ee 93       	st	-X, r30
    1b14:	14 97       	sbiw	r26, 0x04	; 4


	//RULE 10 "if deltaC is smallRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then10;
	then10.value = &sharpLeft.value;
    1b16:	0e 5e       	subi	r16, 0xEE	; 238
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	c3 5a       	subi	r28, 0xA3	; 163
    1b1c:	dd 4f       	sbci	r29, 0xFD	; 253
    1b1e:	68 81       	ld	r22, Y
    1b20:	79 81       	ldd	r23, Y+1	; 0x01
    1b22:	cd 55       	subi	r28, 0x5D	; 93
    1b24:	d2 40       	sbci	r29, 0x02	; 2
    1b26:	f8 01       	movw	r30, r16
    1b28:	71 83       	std	Z+1, r23	; 0x01
    1b2a:	60 83       	st	Z, r22
	then10.next = NULL;
    1b2c:	13 82       	std	Z+3, r1	; 0x03
    1b2e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if102;
	if102.value = &rightOriented.value;
    1b30:	3e 01       	movw	r6, r28
    1b32:	73 e5       	ldi	r23, 0x53	; 83
    1b34:	67 1a       	sub	r6, r23
    1b36:	7e ef       	ldi	r23, 0xFE	; 254
    1b38:	77 0a       	sbc	r7, r23
    1b3a:	f3 01       	movw	r30, r6
    1b3c:	51 83       	std	Z+1, r21	; 0x01
    1b3e:	40 83       	st	Z, r20
	if102.next = NULL;
    1b40:	13 82       	std	Z+3, r1	; 0x03
    1b42:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if101;
	if101.value = &smallRight.value;
    1b44:	be 01       	movw	r22, r28
    1b46:	6f 54       	subi	r22, 0x4F	; 79
    1b48:	7e 4f       	sbci	r23, 0xFE	; 254
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	b1 82       	std	Z+1, r11	; 0x01
    1b4e:	a0 82       	st	Z, r10
	if101.next = &if102;
    1b50:	73 82       	std	Z+3, r7	; 0x03
    1b52:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule10;
	rule10.if_side = &if101;
    1b54:	34 96       	adiw	r30, 0x04	; 4
    1b56:	71 83       	std	Z+1, r23	; 0x01
    1b58:	60 83       	st	Z, r22
	rule10.then_side = &then10;
    1b5a:	13 83       	std	Z+3, r17	; 0x03
    1b5c:	02 83       	std	Z+2, r16	; 0x02
	rule10.next = &rule11;
    1b5e:	b5 83       	std	Z+5, r27	; 0x05
    1b60:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 9 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type then9;
	then9.value = &right.value;
    1b62:	0e 5e       	subi	r16, 0xEE	; 238
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	d8 01       	movw	r26, r16
    1b68:	11 96       	adiw	r26, 0x01	; 1
    1b6a:	dc 92       	st	X, r13
    1b6c:	ce 92       	st	-X, r12
	then9.next = NULL;
    1b6e:	13 96       	adiw	r26, 0x03	; 3
    1b70:	1c 92       	st	X, r1
    1b72:	1e 92       	st	-X, r1
    1b74:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &leftOriented.value;
    1b76:	3e 01       	movw	r6, r28
    1b78:	b1 e4       	ldi	r27, 0x41	; 65
    1b7a:	6b 1a       	sub	r6, r27
    1b7c:	be ef       	ldi	r27, 0xFE	; 254
    1b7e:	7b 0a       	sbc	r7, r27
    1b80:	d3 01       	movw	r26, r6
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	3c 93       	st	X, r19
    1b86:	2e 93       	st	-X, r18
	if92.next = NULL;
    1b88:	13 96       	adiw	r26, 0x03	; 3
    1b8a:	1c 92       	st	X, r1
    1b8c:	1e 92       	st	-X, r1
    1b8e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if91;
	if91.value = &centre.value;
    1b90:	5e 01       	movw	r10, r28
    1b92:	b7 e4       	ldi	r27, 0x47	; 71
    1b94:	ab 0e       	add	r10, r27
    1b96:	b1 1c       	adc	r11, r1
    1b98:	cd 53       	subi	r28, 0x3D	; 61
    1b9a:	de 4f       	sbci	r29, 0xFE	; 254
    1b9c:	b9 82       	std	Y+1, r11	; 0x01
    1b9e:	a8 82       	st	Y, r10
    1ba0:	c3 5c       	subi	r28, 0xC3	; 195
    1ba2:	d1 40       	sbci	r29, 0x01	; 1
	if91.next = &if92;
    1ba4:	cb 53       	subi	r28, 0x3B	; 59
    1ba6:	de 4f       	sbci	r29, 0xFE	; 254
    1ba8:	79 82       	std	Y+1, r7	; 0x01
    1baa:	68 82       	st	Y, r6
    1bac:	c5 5c       	subi	r28, 0xC5	; 197
    1bae:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule9;
	rule9.if_side = &if91;
    1bb0:	18 96       	adiw	r26, 0x08	; 8
    1bb2:	63 ec       	ldi	r22, 0xC3	; 195
    1bb4:	71 e0       	ldi	r23, 0x01	; 1
    1bb6:	6c 0f       	add	r22, r28
    1bb8:	7d 1f       	adc	r23, r29
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	7c 93       	st	X, r23
    1bbe:	6e 93       	st	-X, r22
	rule9.then_side = &then9;
    1bc0:	13 96       	adiw	r26, 0x03	; 3
    1bc2:	1c 93       	st	X, r17
    1bc4:	0e 93       	st	-X, r16
    1bc6:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = &rule10;
    1bc8:	15 96       	adiw	r26, 0x05	; 5
    1bca:	fc 93       	st	X, r31
    1bcc:	ee 93       	st	-X, r30
    1bce:	14 97       	sbiw	r26, 0x04	; 4

	
	//RULE 8 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type then8;
	then8.value = &straight.value;
    1bd0:	0e 5e       	subi	r16, 0xEE	; 238
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	f1 82       	std	Z+1, r15	; 0x01
    1bd8:	e0 82       	st	Z, r14
	then8.next = NULL;
    1bda:	13 82       	std	Z+3, r1	; 0x03
    1bdc:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &straightOriented.value;
    1bde:	3e 01       	movw	r6, r28
    1be0:	ff e2       	ldi	r31, 0x2F	; 47
    1be2:	6f 1a       	sub	r6, r31
    1be4:	fe ef       	ldi	r31, 0xFE	; 254
    1be6:	7f 0a       	sbc	r7, r31
    1be8:	f3 01       	movw	r30, r6
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
	if82.next = NULL;
    1bee:	13 82       	std	Z+3, r1	; 0x03
    1bf0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if81;
	if81.value = &centre.value;
    1bf2:	6e 5e       	subi	r22, 0xEE	; 238
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	fb 01       	movw	r30, r22
    1bf8:	b1 82       	std	Z+1, r11	; 0x01
    1bfa:	a0 82       	st	Z, r10
	if81.next = &if82;
    1bfc:	73 82       	std	Z+3, r7	; 0x03
    1bfe:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
    1c00:	34 96       	adiw	r30, 0x04	; 4
    1c02:	71 83       	std	Z+1, r23	; 0x01
    1c04:	60 83       	st	Z, r22
	rule8.then_side = &then8;
    1c06:	13 83       	std	Z+3, r17	; 0x03
    1c08:	02 83       	std	Z+2, r16	; 0x02
	rule8.next = &rule9;
    1c0a:	b5 83       	std	Z+5, r27	; 0x05
    1c0c:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type then7;
	then7.value = &left.value;
    1c0e:	0e 5e       	subi	r16, 0xEE	; 238
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	d8 01       	movw	r26, r16
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	9c 92       	st	X, r9
    1c18:	8e 92       	st	-X, r8
	then7.next = NULL;
    1c1a:	13 96       	adiw	r26, 0x03	; 3
    1c1c:	1c 92       	st	X, r1
    1c1e:	1e 92       	st	-X, r1
    1c20:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &rightOriented.value;
    1c22:	3e 01       	movw	r6, r28
    1c24:	bd e1       	ldi	r27, 0x1D	; 29
    1c26:	6b 1a       	sub	r6, r27
    1c28:	be ef       	ldi	r27, 0xFE	; 254
    1c2a:	7b 0a       	sbc	r7, r27
    1c2c:	d3 01       	movw	r26, r6
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	5c 93       	st	X, r21
    1c32:	4e 93       	st	-X, r20
	if72.next = NULL;
    1c34:	13 96       	adiw	r26, 0x03	; 3
    1c36:	1c 92       	st	X, r1
    1c38:	1e 92       	st	-X, r1
    1c3a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &centre.value;
    1c3c:	6e 5e       	subi	r22, 0xEE	; 238
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	db 01       	movw	r26, r22
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	bc 92       	st	X, r11
    1c46:	ae 92       	st	-X, r10
	if71.next = &if72;
    1c48:	13 96       	adiw	r26, 0x03	; 3
    1c4a:	7c 92       	st	X, r7
    1c4c:	6e 92       	st	-X, r6
    1c4e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
    1c50:	14 96       	adiw	r26, 0x04	; 4
    1c52:	11 96       	adiw	r26, 0x01	; 1
    1c54:	7c 93       	st	X, r23
    1c56:	6e 93       	st	-X, r22
	rule7.then_side = &then7;
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	1c 93       	st	X, r17
    1c5c:	0e 93       	st	-X, r16
    1c5e:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
    1c60:	15 96       	adiw	r26, 0x05	; 5
    1c62:	fc 93       	st	X, r31
    1c64:	ee 93       	st	-X, r30
    1c66:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 6 "if deltaC is smallLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then6;
	then6.value = &sharpRight.value;
    1c68:	0e 5e       	subi	r16, 0xEE	; 238
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	ea e0       	ldi	r30, 0x0A	; 10
    1c6e:	4e 0e       	add	r4, r30
    1c70:	51 1c       	adc	r5, r1
    1c72:	f8 01       	movw	r30, r16
    1c74:	51 82       	std	Z+1, r5	; 0x01
    1c76:	40 82       	st	Z, r4
	then6.next = NULL;
    1c78:	13 82       	std	Z+3, r1	; 0x03
    1c7a:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if62;
	if62.value = &leftOriented.value;
    1c7c:	3e 01       	movw	r6, r28
    1c7e:	fb e0       	ldi	r31, 0x0B	; 11
    1c80:	6f 1a       	sub	r6, r31
    1c82:	fe ef       	ldi	r31, 0xFE	; 254
    1c84:	7f 0a       	sbc	r7, r31
    1c86:	f3 01       	movw	r30, r6
    1c88:	31 83       	std	Z+1, r19	; 0x01
    1c8a:	20 83       	st	Z, r18
	if62.next = NULL;
    1c8c:	13 82       	std	Z+3, r1	; 0x03
    1c8e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if61;
	if61.value = &smallLeft.value;
    1c90:	5e 01       	movw	r10, r28
    1c92:	fd e5       	ldi	r31, 0x5D	; 93
    1c94:	af 0e       	add	r10, r31
    1c96:	b1 1c       	adc	r11, r1
    1c98:	c7 50       	subi	r28, 0x07	; 7
    1c9a:	de 4f       	sbci	r29, 0xFE	; 254
    1c9c:	b9 82       	std	Y+1, r11	; 0x01
    1c9e:	a8 82       	st	Y, r10
    1ca0:	c9 5f       	subi	r28, 0xF9	; 249
    1ca2:	d1 40       	sbci	r29, 0x01	; 1
	if61.next = &if62;
    1ca4:	c5 50       	subi	r28, 0x05	; 5
    1ca6:	de 4f       	sbci	r29, 0xFE	; 254
    1ca8:	79 82       	std	Y+1, r7	; 0x01
    1caa:	68 82       	st	Y, r6
    1cac:	cb 5f       	subi	r28, 0xFB	; 251
    1cae:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule6;
	rule6.if_side = &if61;
    1cb0:	38 96       	adiw	r30, 0x08	; 8
    1cb2:	69 ef       	ldi	r22, 0xF9	; 249
    1cb4:	71 e0       	ldi	r23, 0x01	; 1
    1cb6:	6c 0f       	add	r22, r28
    1cb8:	7d 1f       	adc	r23, r29
    1cba:	71 83       	std	Z+1, r23	; 0x01
    1cbc:	60 83       	st	Z, r22
	rule6.then_side = &then6;
    1cbe:	13 83       	std	Z+3, r17	; 0x03
    1cc0:	02 83       	std	Z+2, r16	; 0x02
	rule6.next = &rule7;
    1cc2:	b5 83       	std	Z+5, r27	; 0x05
    1cc4:	a4 83       	std	Z+4, r26	; 0x04

	

	//RULE 5 "if deltaC is smallLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then5;
	then5.value = &right.value;
    1cc6:	0e 5e       	subi	r16, 0xEE	; 238
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	d8 01       	movw	r26, r16
    1ccc:	11 96       	adiw	r26, 0x01	; 1
    1cce:	dc 92       	st	X, r13
    1cd0:	ce 92       	st	-X, r12
	then5.next = NULL;
    1cd2:	13 96       	adiw	r26, 0x03	; 3
    1cd4:	1c 92       	st	X, r1
    1cd6:	1e 92       	st	-X, r1
    1cd8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &straightOriented.value;
    1cda:	3e 01       	movw	r6, r28
    1cdc:	b9 ef       	ldi	r27, 0xF9	; 249
    1cde:	6b 1a       	sub	r6, r27
    1ce0:	bd ef       	ldi	r27, 0xFD	; 253
    1ce2:	7b 0a       	sbc	r7, r27
    1ce4:	d3 01       	movw	r26, r6
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	9c 93       	st	X, r25
    1cea:	8e 93       	st	-X, r24
	if52.next = NULL;
    1cec:	13 96       	adiw	r26, 0x03	; 3
    1cee:	1c 92       	st	X, r1
    1cf0:	1e 92       	st	-X, r1
    1cf2:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if51;
	if51.value = &smallLeft.value;
    1cf4:	6e 5e       	subi	r22, 0xEE	; 238
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	db 01       	movw	r26, r22
    1cfa:	11 96       	adiw	r26, 0x01	; 1
    1cfc:	bc 92       	st	X, r11
    1cfe:	ae 92       	st	-X, r10
	if51.next = &if52;
    1d00:	13 96       	adiw	r26, 0x03	; 3
    1d02:	7c 92       	st	X, r7
    1d04:	6e 92       	st	-X, r6
    1d06:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule5;
	rule5.if_side = &if51;
    1d08:	14 96       	adiw	r26, 0x04	; 4
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	7c 93       	st	X, r23
    1d0e:	6e 93       	st	-X, r22
	rule5.then_side = &then5;
    1d10:	13 96       	adiw	r26, 0x03	; 3
    1d12:	1c 93       	st	X, r17
    1d14:	0e 93       	st	-X, r16
    1d16:	12 97       	sbiw	r26, 0x02	; 2
	rule5.next = &rule6;
    1d18:	15 96       	adiw	r26, 0x05	; 5
    1d1a:	fc 93       	st	X, r31
    1d1c:	ee 93       	st	-X, r30
    1d1e:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 4 "if deltaC is smallLeft and deltaV is rightOriented then steering is left"
	struct rule_element_type then4;
	then4.value = &left.value;
    1d20:	0e 5e       	subi	r16, 0xEE	; 238
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	f8 01       	movw	r30, r16
    1d26:	91 82       	std	Z+1, r9	; 0x01
    1d28:	80 82       	st	Z, r8
	then4.next = NULL;
    1d2a:	13 82       	std	Z+3, r1	; 0x03
    1d2c:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if42;
	if42.value = &rightOriented.value;
    1d2e:	62 5f       	subi	r22, 0xF2	; 242
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	fb 01       	movw	r30, r22
    1d34:	51 83       	std	Z+1, r21	; 0x01
    1d36:	40 83       	st	Z, r20
	if42.next = NULL;
    1d38:	13 82       	std	Z+3, r1	; 0x03
    1d3a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if41;
	if41.value = &smallLeft.value;
    1d3c:	4e 01       	movw	r8, r28
    1d3e:	f3 ee       	ldi	r31, 0xE3	; 227
    1d40:	8f 1a       	sub	r8, r31
    1d42:	fd ef       	ldi	r31, 0xFD	; 253
    1d44:	9f 0a       	sbc	r9, r31
    1d46:	f4 01       	movw	r30, r8
    1d48:	b1 82       	std	Z+1, r11	; 0x01
    1d4a:	a0 82       	st	Z, r10
	if41.next = &if42;
    1d4c:	73 83       	std	Z+3, r23	; 0x03
    1d4e:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule4;
	rule4.if_side = &if41;
    1d50:	68 5f       	subi	r22, 0xF8	; 248
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	fb 01       	movw	r30, r22
    1d56:	91 82       	std	Z+1, r9	; 0x01
    1d58:	80 82       	st	Z, r8
	rule4.then_side = &then4;
    1d5a:	13 83       	std	Z+3, r17	; 0x03
    1d5c:	02 83       	std	Z+2, r16	; 0x02
	rule4.next = &rule5;
    1d5e:	b5 83       	std	Z+5, r27	; 0x05
    1d60:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 3 "if deltaC is farLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then3;
	then3.value = &sharpRight.value;
    1d62:	5e 01       	movw	r10, r28
    1d64:	f9 ed       	ldi	r31, 0xD9	; 217
    1d66:	af 1a       	sub	r10, r31
    1d68:	fd ef       	ldi	r31, 0xFD	; 253
    1d6a:	bf 0a       	sbc	r11, r31
    1d6c:	d5 01       	movw	r26, r10
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	5c 92       	st	X, r5
    1d72:	4e 92       	st	-X, r4
	then3.next = NULL;
    1d74:	13 96       	adiw	r26, 0x03	; 3
    1d76:	1c 92       	st	X, r1
    1d78:	1e 92       	st	-X, r1
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if32;
	if32.value = &leftOriented.value;
    1d7c:	14 96       	adiw	r26, 0x04	; 4
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	3c 93       	st	X, r19
    1d82:	2e 93       	st	-X, r18
	if32.next = NULL;
    1d84:	13 96       	adiw	r26, 0x03	; 3
    1d86:	1c 92       	st	X, r1
    1d88:	1e 92       	st	-X, r1
    1d8a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &farLeft.value;
    1d8c:	2a 56       	subi	r18, 0x6A	; 106
    1d8e:	3e 4f       	sbci	r19, 0xFE	; 254
    1d90:	02 5a       	subi	r16, 0xA2	; 162
    1d92:	11 40       	sbci	r17, 0x01	; 1
    1d94:	f9 01       	movw	r30, r18
    1d96:	11 83       	std	Z+1, r17	; 0x01
    1d98:	00 83       	st	Z, r16
	if31.next = &if32;
    1d9a:	b3 83       	std	Z+3, r27	; 0x03
    1d9c:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
    1d9e:	18 96       	adiw	r26, 0x08	; 8
    1da0:	11 96       	adiw	r26, 0x01	; 1
    1da2:	3c 93       	st	X, r19
    1da4:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
    1da6:	13 96       	adiw	r26, 0x03	; 3
    1da8:	bc 92       	st	X, r11
    1daa:	ae 92       	st	-X, r10
    1dac:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
    1dae:	15 96       	adiw	r26, 0x05	; 5
    1db0:	7c 93       	st	X, r23
    1db2:	6e 93       	st	-X, r22
    1db4:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if deltaC is farLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then2;
	then2.value = &right.value;
    1db6:	5e 01       	movw	r10, r28
    1db8:	f7 ec       	ldi	r31, 0xC7	; 199
    1dba:	af 1a       	sub	r10, r31
    1dbc:	fd ef       	ldi	r31, 0xFD	; 253
    1dbe:	bf 0a       	sbc	r11, r31
    1dc0:	f5 01       	movw	r30, r10
    1dc2:	d1 82       	std	Z+1, r13	; 0x01
    1dc4:	c0 82       	st	Z, r12
	then2.next = NULL;
    1dc6:	13 82       	std	Z+3, r1	; 0x03
    1dc8:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &straightOriented.value;
    1dca:	64 5e       	subi	r22, 0xE4	; 228
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	fb 01       	movw	r30, r22
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
	if22.next = NULL;
    1dd4:	13 82       	std	Z+3, r1	; 0x03
    1dd6:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &farLeft.value;
    1dd8:	2e 5e       	subi	r18, 0xEE	; 238
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	f9 01       	movw	r30, r18
    1dde:	11 83       	std	Z+1, r17	; 0x01
    1de0:	00 83       	st	Z, r16
	if21.next = &if22;
    1de2:	73 83       	std	Z+3, r23	; 0x03
    1de4:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
    1de6:	8a 56       	subi	r24, 0x6A	; 106
    1de8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dea:	fc 01       	movw	r30, r24
    1dec:	31 83       	std	Z+1, r19	; 0x01
    1dee:	20 83       	st	Z, r18
	rule2.then_side = &then2;
    1df0:	b3 82       	std	Z+3, r11	; 0x03
    1df2:	a2 82       	std	Z+2, r10	; 0x02
	rule2.next = &rule3;
    1df4:	b5 83       	std	Z+5, r27	; 0x05
    1df6:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if deltaC is farLeft and deltaV is rightOriented then steering is straight"
	struct rule_element_type then1;
	then1.value = &straight.value;
    1df8:	58 96       	adiw	r26, 0x18	; 24
    1dfa:	11 96       	adiw	r26, 0x01	; 1
    1dfc:	fc 92       	st	X, r15
    1dfe:	ee 92       	st	-X, r14
	then1.next = NULL;
    1e00:	13 96       	adiw	r26, 0x03	; 3
    1e02:	1c 92       	st	X, r1
    1e04:	1e 92       	st	-X, r1
    1e06:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &rightOriented.value;
    1e08:	6e 5e       	subi	r22, 0xEE	; 238
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	51 83       	std	Z+1, r21	; 0x01
    1e10:	40 83       	st	Z, r20
	if12.next = NULL;
    1e12:	13 82       	std	Z+3, r1	; 0x03
    1e14:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &farLeft.value;
    1e16:	2e 5e       	subi	r18, 0xEE	; 238
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	f9 01       	movw	r30, r18
    1e1c:	11 83       	std	Z+1, r17	; 0x01
    1e1e:	00 83       	st	Z, r16
	if11.next = &if12;
    1e20:	73 83       	std	Z+3, r23	; 0x03
    1e22:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
    1e24:	34 96       	adiw	r30, 0x04	; 4
    1e26:	31 83       	std	Z+1, r19	; 0x01
    1e28:	20 83       	st	Z, r18
	rule1.then_side = &then1;
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
    1e2e:	95 83       	std	Z+5, r25	; 0x05
    1e30:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
    1e32:	f0 93 65 03 	sts	0x0365, r31
    1e36:	e0 93 64 03 	sts	0x0364, r30
	
	
	// the methods performing the FLC
	fuzzification();
    1e3a:	76 d9       	rcall	.-3348   	; 0x1128 <fuzzification>
	rule_evaluation();
    1e3c:	9c d9       	rcall	.-3272   	; 0x1176 <rule_evaluation>
	defuzzification();
    1e3e:	e1 d9       	rcall	.-3134   	; 0x1202 <defuzzification>
	if (steering.value < MAXLEFT)
    1e40:	d1 01       	movw	r26, r2
    1e42:	1a 96       	adiw	r26, 0x0a	; 10
    1e44:	8d 91       	ld	r24, X+
    1e46:	9c 91       	ld	r25, X
    1e48:	1b 97       	sbiw	r26, 0x0b	; 11
    1e4a:	86 3e       	cpi	r24, 0xE6	; 230
    1e4c:	b7 e0       	ldi	r27, 0x07	; 7
    1e4e:	9b 07       	cpc	r25, r27
    1e50:	24 f4       	brge	.+8      	; 0x1e5a <nDoFuzzy+0x8b0>
	{
		setServo(MAXLEFT);
    1e52:	86 ee       	ldi	r24, 0xE6	; 230
    1e54:	97 e0       	ldi	r25, 0x07	; 7
    1e56:	6f d0       	rcall	.+222    	; 0x1f36 <setServo>
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <nDoFuzzy+0x8c2>
	}
	else if (steering.value >MAXRIGHT)
    1e5a:	85 3e       	cpi	r24, 0xE5	; 229
    1e5c:	ec e0       	ldi	r30, 0x0C	; 12
    1e5e:	9e 07       	cpc	r25, r30
    1e60:	24 f0       	brlt	.+8      	; 0x1e6a <nDoFuzzy+0x8c0>
	{
		setServo(MAXRIGHT);
    1e62:	84 ee       	ldi	r24, 0xE4	; 228
    1e64:	9c e0       	ldi	r25, 0x0C	; 12
    1e66:	67 d0       	rcall	.+206    	; 0x1f36 <setServo>
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <nDoFuzzy+0x8c2>
	}
	else
	{
		setServo(steering.value);
    1e6a:	65 d0       	rcall	.+202    	; 0x1f36 <setServo>
	}
}
    1e6c:	c2 5a       	subi	r28, 0xA2	; 162
    1e6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	9f 90       	pop	r9
    1e90:	8f 90       	pop	r8
    1e92:	7f 90       	pop	r7
    1e94:	6f 90       	pop	r6
    1e96:	5f 90       	pop	r5
    1e98:	4f 90       	pop	r4
    1e9a:	3f 90       	pop	r3
    1e9c:	2f 90       	pop	r2
    1e9e:	08 95       	ret

00001ea0 <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) & (v == 81))        // right curvature, turn right
    1ea0:	31 e0       	ldi	r19, 0x01	; 1
    1ea2:	61 35       	cpi	r22, 0x51	; 81
    1ea4:	71 05       	cpc	r23, r1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <nFuzzySteering+0xa>
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	21 e0       	ldi	r18, 0x01	; 1
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <nFuzzySteering+0x14>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	22 23       	and	r18, r18
    1eb6:	31 f0       	breq	.+12     	; 0x1ec4 <nFuzzySteering+0x24>
    1eb8:	33 23       	and	r19, r19
    1eba:	21 f0       	breq	.+8      	; 0x1ec4 <nFuzzySteering+0x24>
	{
		setServo(MAXRIGHT);
    1ebc:	84 ee       	ldi	r24, 0xE4	; 228
    1ebe:	9c e0       	ldi	r25, 0x0C	; 12
    1ec0:	3a c0       	rjmp	.+116    	; 0x1f36 <setServo>
    1ec2:	08 95       	ret
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f0       	breq	.+2      	; 0x1ece <nFuzzySteering+0x2e>
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	22 23       	and	r18, r18
    1ed0:	31 f0       	breq	.+12     	; 0x1ede <nFuzzySteering+0x3e>
    1ed2:	33 23       	and	r19, r19
    1ed4:	21 f0       	breq	.+8      	; 0x1ede <nFuzzySteering+0x3e>
	{
		setServo(MAXLEFT);
    1ed6:	86 ee       	ldi	r24, 0xE6	; 230
    1ed8:	97 e0       	ldi	r25, 0x07	; 7
    1eda:	2d c0       	rjmp	.+90     	; 0x1f36 <setServo>
    1edc:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1ede:	65 cb       	rjmp	.-2358   	; 0x15aa <nDoFuzzy>
    1ee0:	08 95       	ret

00001ee2 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1ee2:	80 e3       	ldi	r24, 0x30	; 48
    1ee4:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1ee6:	82 ea       	ldi	r24, 0xA2	; 162
    1ee8:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	9f e8       	ldi	r25, 0x8F	; 143
    1ef0:	90 93 87 00 	sts	0x0087, r25
    1ef4:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1ef8:	8a e1       	ldi	r24, 0x1A	; 26
    1efa:	80 93 81 00 	sts	0x0081, r24
    1efe:	08 95       	ret

00001f00 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1f00:	80 36       	cpi	r24, 0x60	; 96
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	92 07       	cpc	r25, r18
    1f06:	3c f4       	brge	.+14     	; 0x1f16 <setESC+0x16>
	{
		OCR1A = MINESC;
    1f08:	8f e5       	ldi	r24, 0x5F	; 95
    1f0a:	9a e0       	ldi	r25, 0x0A	; 10
    1f0c:	90 93 89 00 	sts	0x0089, r25
    1f10:	80 93 88 00 	sts	0x0088, r24
    1f14:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1f16:	82 32       	cpi	r24, 0x22	; 34
    1f18:	2b e0       	ldi	r18, 0x0B	; 11
    1f1a:	92 07       	cpc	r25, r18
    1f1c:	3c f0       	brlt	.+14     	; 0x1f2c <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1f1e:	82 e2       	ldi	r24, 0x22	; 34
    1f20:	9b e0       	ldi	r25, 0x0B	; 11
    1f22:	90 93 89 00 	sts	0x0089, r25
    1f26:	80 93 88 00 	sts	0x0088, r24
    1f2a:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1f2c:	90 93 89 00 	sts	0x0089, r25
    1f30:	80 93 88 00 	sts	0x0088, r24
    1f34:	08 95       	ret

00001f36 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1f36:	84 3e       	cpi	r24, 0xE4	; 228
    1f38:	2c e0       	ldi	r18, 0x0C	; 12
    1f3a:	92 07       	cpc	r25, r18
    1f3c:	3c f0       	brlt	.+14     	; 0x1f4c <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1f3e:	84 ee       	ldi	r24, 0xE4	; 228
    1f40:	9c e0       	ldi	r25, 0x0C	; 12
    1f42:	90 93 8b 00 	sts	0x008B, r25
    1f46:	80 93 8a 00 	sts	0x008A, r24
    1f4a:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1f4c:	87 3e       	cpi	r24, 0xE7	; 231
    1f4e:	27 e0       	ldi	r18, 0x07	; 7
    1f50:	92 07       	cpc	r25, r18
    1f52:	3c f4       	brge	.+14     	; 0x1f62 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1f54:	86 ee       	ldi	r24, 0xE6	; 230
    1f56:	97 e0       	ldi	r25, 0x07	; 7
    1f58:	90 93 8b 00 	sts	0x008B, r25
    1f5c:	80 93 8a 00 	sts	0x008A, r24
    1f60:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    1f62:	ea e8       	ldi	r30, 0x8A	; 138
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	40 91 00 01 	lds	r20, 0x0100
    1f6e:	50 91 01 01 	lds	r21, 0x0101
    1f72:	84 9f       	mul	r24, r20
    1f74:	90 01       	movw	r18, r0
    1f76:	85 9f       	mul	r24, r21
    1f78:	30 0d       	add	r19, r0
    1f7a:	94 9f       	mul	r25, r20
    1f7c:	30 0d       	add	r19, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	40 91 02 01 	lds	r20, 0x0102
    1f84:	50 91 03 01 	lds	r21, 0x0103
    1f88:	64 9f       	mul	r22, r20
    1f8a:	c0 01       	movw	r24, r0
    1f8c:	65 9f       	mul	r22, r21
    1f8e:	90 0d       	add	r25, r0
    1f90:	74 9f       	mul	r23, r20
    1f92:	90 0d       	add	r25, r0
    1f94:	11 24       	eor	r1, r1
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	6a e0       	ldi	r22, 0x0A	; 10
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	58 d5       	rcall	.+2736   	; 0x2a50 <__divmodhi4>
    1fa0:	71 83       	std	Z+1, r23	; 0x01
    1fa2:	60 83       	st	Z, r22
    1fa4:	08 95       	ret

00001fa6 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1fa6:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1fa8:	20 91 d2 02 	lds	r18, 0x02D2
    1fac:	30 91 d3 02 	lds	r19, 0x02D3
    1fb0:	21 15       	cp	r18, r1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	a9 f0       	breq	.+42     	; 0x1fe0 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1fb6:	ee ec       	ldi	r30, 0xCE	; 206
    1fb8:	f2 e0       	ldi	r31, 0x02	; 2
    1fba:	40 81       	ld	r20, Z
    1fbc:	51 81       	ldd	r21, Z+1	; 0x01
    1fbe:	da 01       	movw	r26, r20
    1fc0:	a2 57       	subi	r26, 0x72	; 114
    1fc2:	bd 4f       	sbci	r27, 0xFD	; 253
    1fc4:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1fc6:	4f 5f       	subi	r20, 0xFF	; 255
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	51 83       	std	Z+1, r21	; 0x01
    1fcc:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1fce:	21 50       	subi	r18, 0x01	; 1
    1fd0:	31 09       	sbc	r19, r1
    1fd2:	30 93 d3 02 	sts	0x02D3, r19
    1fd6:	20 93 d2 02 	sts	0x02D2, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1fda:	23 2b       	or	r18, r19
    1fdc:	21 f4       	brne	.+8      	; 0x1fe6 <spi_get_byte+0x40>
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1fe0:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1fe2:	10 92 46 02 	sts	0x0246, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1fe6:	20 91 ce 02 	lds	r18, 0x02CE
    1fea:	30 91 cf 02 	lds	r19, 0x02CF
    1fee:	20 34       	cpi	r18, 0x40	; 64
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	21 f4       	brne	.+8      	; 0x1ffc <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1ff4:	10 92 cf 02 	sts	0x02CF, r1
    1ff8:	10 92 ce 02 	sts	0x02CE, r1
	}
	

	sei();
    1ffc:	78 94       	sei
	
	return value;
	
		
}
    1ffe:	08 95       	ret

00002000 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	0b b6       	in	r0, 0x3b	; 59
    200c:	0f 92       	push	r0
    200e:	2f 93       	push	r18
    2010:	3f 93       	push	r19
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    201e:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    2020:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    2022:	2d 3f       	cpi	r18, 0xFD	; 253
    2024:	a9 f0       	breq	.+42     	; 0x2050 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    2026:	e0 ed       	ldi	r30, 0xD0	; 208
    2028:	f2 e0       	ldi	r31, 0x02	; 2
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	dc 01       	movw	r26, r24
    2030:	a2 57       	subi	r26, 0x72	; 114
    2032:	bd 4f       	sbci	r27, 0xFD	; 253
    2034:	2c 93       	st	X, r18
		rx_spi.i_last++;
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    203c:	e2 ed       	ldi	r30, 0xD2	; 210
    203e:	f2 e0       	ldi	r31, 0x02	; 2
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 46 02 	sts	0x0246, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    2050:	80 91 d0 02 	lds	r24, 0x02D0
    2054:	90 91 d1 02 	lds	r25, 0x02D1
    2058:	80 34       	cpi	r24, 0x40	; 64
    205a:	91 05       	cpc	r25, r1
    205c:	21 f4       	brne	.+8      	; 0x2066 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    205e:	10 92 d1 02 	sts	0x02D1, r1
    2062:	10 92 d0 02 	sts	0x02D0, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    2066:	80 91 8c 02 	lds	r24, 0x028C
    206a:	90 91 8d 02 	lds	r25, 0x028D
    206e:	89 2b       	or	r24, r25
    2070:	01 f1       	breq	.+64     	; 0x20b2 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    2072:	e0 91 88 02 	lds	r30, 0x0288
    2076:	f0 91 89 02 	lds	r31, 0x0289
    207a:	e8 5b       	subi	r30, 0xB8	; 184
    207c:	fd 4f       	sbci	r31, 0xFD	; 253
    207e:	80 81       	ld	r24, Z
    2080:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    2082:	e8 e8       	ldi	r30, 0x88	; 136
    2084:	f2 e0       	ldi	r31, 0x02	; 2
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    2090:	ec e8       	ldi	r30, 0x8C	; 140
    2092:	f2 e0       	ldi	r31, 0x02	; 2
    2094:	20 81       	ld	r18, Z
    2096:	31 81       	ldd	r19, Z+1	; 0x01
    2098:	21 50       	subi	r18, 0x01	; 1
    209a:	31 09       	sbc	r19, r1
    209c:	31 83       	std	Z+1, r19	; 0x01
    209e:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    20a0:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    20a2:	80 34       	cpi	r24, 0x40	; 64
    20a4:	91 05       	cpc	r25, r1
    20a6:	49 f4       	brne	.+18     	; 0x20ba <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    20a8:	10 92 89 02 	sts	0x0289, r1
    20ac:	10 92 88 02 	sts	0x0288, r1
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    20b2:	8d ef       	ldi	r24, 0xFD	; 253
    20b4:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    20b6:	10 92 47 02 	sts	0x0247, r1
		
	} 	
	

}
    20ba:	ff 91       	pop	r31
    20bc:	ef 91       	pop	r30
    20be:	bf 91       	pop	r27
    20c0:	af 91       	pop	r26
    20c2:	9f 91       	pop	r25
    20c4:	8f 91       	pop	r24
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0b be       	out	0x3b, r0	; 59
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    20d8:	80 e4       	ldi	r24, 0x40	; 64
    20da:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    20dc:	80 ec       	ldi	r24, 0xC0	; 192
    20de:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    20e0:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    20e2:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    20e4:	8d ef       	ldi	r24, 0xFD	; 253
    20e6:	8e bd       	out	0x2e, r24	; 46
    20e8:	08 95       	ret

000020ea <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    20ea:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    20ec:	20 91 8c 02 	lds	r18, 0x028C
    20f0:	30 91 8d 02 	lds	r19, 0x028D
    20f4:	20 34       	cpi	r18, 0x40	; 64
    20f6:	31 05       	cpc	r19, r1
    20f8:	90 f4       	brcc	.+36     	; 0x211e <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    20fa:	ea e8       	ldi	r30, 0x8A	; 138
    20fc:	f2 e0       	ldi	r31, 0x02	; 2
    20fe:	40 81       	ld	r20, Z
    2100:	51 81       	ldd	r21, Z+1	; 0x01
    2102:	da 01       	movw	r26, r20
    2104:	a8 5b       	subi	r26, 0xB8	; 184
    2106:	bd 4f       	sbci	r27, 0xFD	; 253
    2108:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    210a:	4f 5f       	subi	r20, 0xFF	; 255
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	51 83       	std	Z+1, r21	; 0x01
    2110:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	30 93 8d 02 	sts	0x028D, r19
    211a:	20 93 8c 02 	sts	0x028C, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    211e:	80 91 8a 02 	lds	r24, 0x028A
    2122:	90 91 8b 02 	lds	r25, 0x028B
    2126:	80 34       	cpi	r24, 0x40	; 64
    2128:	91 05       	cpc	r25, r1
    212a:	21 f4       	brne	.+8      	; 0x2134 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    212c:	10 92 8b 02 	sts	0x028B, r1
    2130:	10 92 8a 02 	sts	0x028A, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    2134:	80 91 8c 02 	lds	r24, 0x028C
    2138:	90 91 8d 02 	lds	r25, 0x028D
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f9 f4       	brne	.+62     	; 0x217e <spi_send_byte+0x94>
    2140:	80 91 47 02 	lds	r24, 0x0247
    2144:	81 11       	cpse	r24, r1
    2146:	1b c0       	rjmp	.+54     	; 0x217e <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    2148:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    214a:	e0 91 88 02 	lds	r30, 0x0288
    214e:	f0 91 89 02 	lds	r31, 0x0289
    2152:	e8 5b       	subi	r30, 0xB8	; 184
    2154:	fd 4f       	sbci	r31, 0xFD	; 253
    2156:	80 81       	ld	r24, Z
    2158:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    215a:	e8 e8       	ldi	r30, 0x88	; 136
    215c:	f2 e0       	ldi	r31, 0x02	; 2
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    2168:	ec e8       	ldi	r30, 0x8C	; 140
    216a:	f2 e0       	ldi	r31, 0x02	; 2
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    2176:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 47 02 	sts	0x0247, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    217e:	80 91 88 02 	lds	r24, 0x0288
    2182:	90 91 89 02 	lds	r25, 0x0289
    2186:	80 34       	cpi	r24, 0x40	; 64
    2188:	91 05       	cpc	r25, r1
    218a:	21 f4       	brne	.+8      	; 0x2194 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    218c:	10 92 89 02 	sts	0x0289, r1
    2190:	10 92 88 02 	sts	0x0288, r1
	}
			
			

	sei();
    2194:	78 94       	sei
    2196:	08 95       	ret

00002198 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	20 91 d2 02 	lds	r18, 0x02D2
    219e:	30 91 d3 02 	lds	r19, 0x02D3
    21a2:	2b 30       	cpi	r18, 0x0B	; 11
    21a4:	31 05       	cpc	r19, r1
    21a6:	08 f4       	brcc	.+2      	; 0x21aa <is_package_recieved+0x12>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    21aa:	08 95       	ret

000021ac <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	8c 01       	movw	r16, r24
    21b6:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    21b8:	20 91 d2 02 	lds	r18, 0x02D2
    21bc:	30 91 d3 02 	lds	r19, 0x02D3
    21c0:	23 2b       	or	r18, r19
    21c2:	69 f1       	breq	.+90     	; 0x221e <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    21c4:	e0 91 ce 02 	lds	r30, 0x02CE
    21c8:	f0 91 cf 02 	lds	r31, 0x02CF
    21cc:	e2 57       	subi	r30, 0x72	; 114
    21ce:	fd 4f       	sbci	r31, 0xFD	; 253
    21d0:	80 81       	ld	r24, Z
    21d2:	8f 3f       	cpi	r24, 0xFF	; 255
    21d4:	e1 f4       	brne	.+56     	; 0x220e <read_sensor_info+0x62>
    21d6:	e0 df       	rcall	.-64     	; 0x2198 <is_package_recieved>
    21d8:	88 23       	and	r24, r24
    21da:	11 f1       	breq	.+68     	; 0x2220 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    21dc:	e4 de       	rcall	.-568    	; 0x1fa6 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    21de:	e3 de       	rcall	.-570    	; 0x1fa6 <spi_get_byte>
    21e0:	f8 01       	movw	r30, r16
    21e2:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    21e4:	e0 de       	rcall	.-576    	; 0x1fa6 <spi_get_byte>
    21e6:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    21e8:	de de       	rcall	.-580    	; 0x1fa6 <spi_get_byte>
    21ea:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    21ec:	dc de       	rcall	.-584    	; 0x1fa6 <spi_get_byte>
    21ee:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    21f0:	da de       	rcall	.-588    	; 0x1fa6 <spi_get_byte>
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    21f4:	d8 de       	rcall	.-592    	; 0x1fa6 <spi_get_byte>
    21f6:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    21f8:	d6 de       	rcall	.-596    	; 0x1fa6 <spi_get_byte>
    21fa:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    21fc:	83 ed       	ldi	r24, 0xD3	; 211
    21fe:	9f e0       	ldi	r25, 0x0F	; 15
    2200:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    2202:	d1 de       	rcall	.-606    	; 0x1fa6 <spi_get_byte>
    2204:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    2206:	cf de       	rcall	.-610    	; 0x1fa6 <spi_get_byte>
    2208:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	09 c0       	rjmp	.+18     	; 0x2220 <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    220e:	c4 df       	rcall	.-120    	; 0x2198 <is_package_recieved>
    2210:	88 23       	and	r24, r24
    2212:	31 f0       	breq	.+12     	; 0x2220 <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    2214:	c8 de       	rcall	.-624    	; 0x1fa6 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    2216:	be 01       	movw	r22, r28
    2218:	c8 01       	movw	r24, r16
    221a:	c8 df       	rcall	.-112    	; 0x21ac <read_sensor_info>
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    221e:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	08 95       	ret

0000222a <stop>:




void stop(int k_value)
{
    222a:	4f 92       	push	r4
    222c:	5f 92       	push	r5
    222e:	6f 92       	push	r6
    2230:	7f 92       	push	r7
    2232:	8f 92       	push	r8
    2234:	9f 92       	push	r9
    2236:	af 92       	push	r10
    2238:	bf 92       	push	r11
    223a:	cf 92       	push	r12
    223c:	df 92       	push	r13
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	ce 5c       	subi	r28, 0xCE	; 206
    2250:	d1 09       	sbc	r29, r1
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61

	
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type orientation; strcpy(orientation.name, "orientatio");
    225c:	2b e0       	ldi	r18, 0x0B	; 11
    225e:	e5 e1       	ldi	r30, 0x15	; 21
    2260:	f2 e0       	ldi	r31, 0x02	; 2
    2262:	de 01       	movw	r26, r28
    2264:	11 96       	adiw	r26, 0x01	; 1
    2266:	01 90       	ld	r0, Z+
    2268:	0d 92       	st	X+, r0
    226a:	2a 95       	dec	r18
    226c:	e1 f7       	brne	.-8      	; 0x2266 <stop+0x3c>
	
	if (k_value < -20)
    226e:	8c 3e       	cpi	r24, 0xEC	; 236
    2270:	2f ef       	ldi	r18, 0xFF	; 255
    2272:	92 07       	cpc	r25, r18
    2274:	2c f4       	brge	.+10     	; 0x2280 <stop+0x56>
	{
		orientation.value = -20;
    2276:	8c ee       	ldi	r24, 0xEC	; 236
    2278:	9f ef       	ldi	r25, 0xFF	; 255
    227a:	9c 87       	std	Y+12, r25	; 0x0c
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	0a c0       	rjmp	.+20     	; 0x2294 <stop+0x6a>
	}
	else if (k_value > 20)
    2280:	85 31       	cpi	r24, 0x15	; 21
    2282:	91 05       	cpc	r25, r1
    2284:	2c f0       	brlt	.+10     	; 0x2290 <stop+0x66>
	{
		orientation.value = 20;
    2286:	84 e1       	ldi	r24, 0x14	; 20
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 87       	std	Y+12, r25	; 0x0c
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <stop+0x6a>
	}
	else
	{
		orientation.value = k_value;
    2290:	9c 87       	std	Y+12, r25	; 0x0c
    2292:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Set MFs
	struct mf_type off_right;
	MATLAB_MF(&off_right, "off_right", -21, -20, -20, -5);
    2294:	5e 01       	movw	r10, r28
    2296:	81 e1       	ldi	r24, 0x11	; 17
    2298:	a8 0e       	add	r10, r24
    229a:	b1 1c       	adc	r11, r1
    229c:	0f 2e       	mov	r0, r31
    229e:	fb ef       	ldi	r31, 0xFB	; 251
    22a0:	ef 2e       	mov	r14, r31
    22a2:	ff 24       	eor	r15, r15
    22a4:	fa 94       	dec	r15
    22a6:	f0 2d       	mov	r31, r0
    22a8:	0c ee       	ldi	r16, 0xEC	; 236
    22aa:	1f ef       	ldi	r17, 0xFF	; 255
    22ac:	2c ee       	ldi	r18, 0xEC	; 236
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4b ee       	ldi	r20, 0xEB	; 235
    22b2:	5f ef       	ldi	r21, 0xFF	; 255
    22b4:	60 e2       	ldi	r22, 0x20	; 32
    22b6:	72 e0       	ldi	r23, 0x02	; 2
    22b8:	c5 01       	movw	r24, r10
    22ba:	69 d8       	rcall	.-3886   	; 0x138e <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", -10, 0, 0, 10);
    22bc:	6e 01       	movw	r12, r28
    22be:	e7 e2       	ldi	r30, 0x27	; 39
    22c0:	ce 0e       	add	r12, r30
    22c2:	d1 1c       	adc	r13, r1
    22c4:	0f 2e       	mov	r0, r31
    22c6:	fa e0       	ldi	r31, 0x0A	; 10
    22c8:	ef 2e       	mov	r14, r31
    22ca:	f1 2c       	mov	r15, r1
    22cc:	f0 2d       	mov	r31, r0
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	46 ef       	ldi	r20, 0xF6	; 246
    22d8:	5f ef       	ldi	r21, 0xFF	; 255
    22da:	6a e2       	ldi	r22, 0x2A	; 42
    22dc:	72 e0       	ldi	r23, 0x02	; 2
    22de:	c6 01       	movw	r24, r12
    22e0:	56 d8       	rcall	.-3924   	; 0x138e <MATLAB_MF>
	struct mf_type off_left;
	MATLAB_MF(&off_left, "off_left", 5, 20, 20, 21);
    22e2:	2e 01       	movw	r4, r28
    22e4:	fd e3       	ldi	r31, 0x3D	; 61
    22e6:	4f 0e       	add	r4, r31
    22e8:	51 1c       	adc	r5, r1
    22ea:	0f 2e       	mov	r0, r31
    22ec:	f5 e1       	ldi	r31, 0x15	; 21
    22ee:	ef 2e       	mov	r14, r31
    22f0:	f1 2c       	mov	r15, r1
    22f2:	f0 2d       	mov	r31, r0
    22f4:	04 e1       	ldi	r16, 0x14	; 20
    22f6:	10 e0       	ldi	r17, 0x00	; 0
    22f8:	24 e1       	ldi	r18, 0x14	; 20
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	45 e0       	ldi	r20, 0x05	; 5
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	61 e3       	ldi	r22, 0x31	; 49
    2302:	72 e0       	ldi	r23, 0x02	; 2
    2304:	c2 01       	movw	r24, r4
    2306:	43 d8       	rcall	.-3962   	; 0x138e <MATLAB_MF>

	// Linked list for MFs
	orientation.membership_functions = &off_right;
    2308:	be 86       	std	Y+14, r11	; 0x0e
    230a:	ad 86       	std	Y+13, r10	; 0x0d
	off_right.next = &middle;
    230c:	de a2       	std	Y+38, r13	; 0x26
    230e:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &off_left;
    2310:	5c ae       	std	Y+60, r5	; 0x3c
    2312:	4b ae       	std	Y+59, r4	; 0x3b
	off_left.next = NULL;
    2314:	63 96       	adiw	r28, 0x13	; 19
    2316:	1f ae       	std	Y+63, r1	; 0x3f
    2318:	1e ae       	std	Y+62, r1	; 0x3e
    231a:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    231c:	6e 01       	movw	r12, r28
    231e:	23 e5       	ldi	r18, 0x53	; 83
    2320:	c2 0e       	add	r12, r18
    2322:	d1 1c       	adc	r13, r1
    2324:	86 e0       	ldi	r24, 0x06	; 6
    2326:	ea e3       	ldi	r30, 0x3A	; 58
    2328:	f2 e0       	ldi	r31, 0x02	; 2
    232a:	d6 01       	movw	r26, r12
    232c:	01 90       	ld	r0, Z+
    232e:	0d 92       	st	X+, r0
    2330:	8a 95       	dec	r24
    2332:	e1 f7       	brne	.-8      	; 0x232c <stop+0x102>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2600, 2660, 2660, 2720);
    2334:	3e 01       	movw	r6, r28
    2336:	83 e6       	ldi	r24, 0x63	; 99
    2338:	68 0e       	add	r6, r24
    233a:	71 1c       	adc	r7, r1
    233c:	0f 2e       	mov	r0, r31
    233e:	f0 ea       	ldi	r31, 0xA0	; 160
    2340:	ef 2e       	mov	r14, r31
    2342:	fa e0       	ldi	r31, 0x0A	; 10
    2344:	ff 2e       	mov	r15, r31
    2346:	f0 2d       	mov	r31, r0
    2348:	04 e6       	ldi	r16, 0x64	; 100
    234a:	1a e0       	ldi	r17, 0x0A	; 10
    234c:	24 e6       	ldi	r18, 0x64	; 100
    234e:	3a e0       	ldi	r19, 0x0A	; 10
    2350:	48 e2       	ldi	r20, 0x28	; 40
    2352:	5a e0       	ldi	r21, 0x0A	; 10
    2354:	67 e5       	ldi	r22, 0x57	; 87
    2356:	71 e0       	ldi	r23, 0x01	; 1
    2358:	c3 01       	movw	r24, r6
    235a:	19 d8       	rcall	.-4046   	; 0x138e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2800, 2820, 2820, 2840);
    235c:	5e 01       	movw	r10, r28
    235e:	e9 e7       	ldi	r30, 0x79	; 121
    2360:	ae 0e       	add	r10, r30
    2362:	b1 1c       	adc	r11, r1
    2364:	0f 2e       	mov	r0, r31
    2366:	f8 e1       	ldi	r31, 0x18	; 24
    2368:	ef 2e       	mov	r14, r31
    236a:	fb e0       	ldi	r31, 0x0B	; 11
    236c:	ff 2e       	mov	r15, r31
    236e:	f0 2d       	mov	r31, r0
    2370:	04 e0       	ldi	r16, 0x04	; 4
    2372:	1b e0       	ldi	r17, 0x0B	; 11
    2374:	24 e0       	ldi	r18, 0x04	; 4
    2376:	3b e0       	ldi	r19, 0x0B	; 11
    2378:	40 ef       	ldi	r20, 0xF0	; 240
    237a:	5a e0       	ldi	r21, 0x0A	; 10
    237c:	64 e2       	ldi	r22, 0x24	; 36
    237e:	72 e0       	ldi	r23, 0x02	; 2
    2380:	c5 01       	movw	r24, r10
    2382:	05 d8       	rcall	.-4086   	; 0x138e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2480, 2500, 2500, 2520);
    2384:	4e 01       	movw	r8, r28
    2386:	ff e8       	ldi	r31, 0x8F	; 143
    2388:	8f 0e       	add	r8, r31
    238a:	91 1c       	adc	r9, r1
    238c:	0f 2e       	mov	r0, r31
    238e:	f8 ed       	ldi	r31, 0xD8	; 216
    2390:	ef 2e       	mov	r14, r31
    2392:	f9 e0       	ldi	r31, 0x09	; 9
    2394:	ff 2e       	mov	r15, r31
    2396:	f0 2d       	mov	r31, r0
    2398:	04 ec       	ldi	r16, 0xC4	; 196
    239a:	19 e0       	ldi	r17, 0x09	; 9
    239c:	24 ec       	ldi	r18, 0xC4	; 196
    239e:	39 e0       	ldi	r19, 0x09	; 9
    23a0:	40 eb       	ldi	r20, 0xB0	; 176
    23a2:	59 e0       	ldi	r21, 0x09	; 9
    23a4:	65 e3       	ldi	r22, 0x35	; 53
    23a6:	72 e0       	ldi	r23, 0x02	; 2
    23a8:	c4 01       	movw	r24, r8
    23aa:	0e 94 c7 09 	call	0x138e	; 0x138e <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    23ae:	f6 01       	movw	r30, r12
    23b0:	75 86       	std	Z+13, r7	; 0x0d
    23b2:	64 86       	std	Z+12, r6	; 0x0c
	straight.next = &left;
    23b4:	f3 01       	movw	r30, r6
    23b6:	95 8a       	std	Z+21, r9	; 0x15
    23b8:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &right;
    23ba:	f4 01       	movw	r30, r8
    23bc:	b5 8a       	std	Z+21, r11	; 0x15
    23be:	a4 8a       	std	Z+20, r10	; 0x14
	right.next = NULL;
    23c0:	f5 01       	movw	r30, r10
    23c2:	15 8a       	std	Z+21, r1	; 0x15
    23c4:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &orientation;
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	90 93 63 03 	sts	0x0363, r25
    23ce:	80 93 62 03 	sts	0x0362, r24
	orientation.next = NULL;
    23d2:	18 8a       	std	Y+16, r1	; 0x10
    23d4:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    23d6:	d0 92 61 03 	sts	0x0361, r13
    23da:	c0 92 60 03 	sts	0x0360, r12
	servo.next = NULL;
    23de:	f6 01       	movw	r30, r12
    23e0:	17 86       	std	Z+15, r1	; 0x0f
    23e2:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    23e4:	8c 55       	subi	r24, 0x5C	; 92
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	90 93 65 03 	sts	0x0365, r25
    23ec:	80 93 64 03 	sts	0x0364, r24
	struct rule_type rule2; rule1.next = &rule2;
    23f0:	de 01       	movw	r26, r28
    23f2:	a5 55       	subi	r26, 0x55	; 85
    23f4:	bf 4f       	sbci	r27, 0xFF	; 255
    23f6:	fc 01       	movw	r30, r24
    23f8:	b5 83       	std	Z+5, r27	; 0x05
    23fa:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    23fc:	be 01       	movw	r22, r28
    23fe:	6f 54       	subi	r22, 0x4F	; 79
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	15 96       	adiw	r26, 0x05	; 5
    2404:	7c 93       	st	X, r23
    2406:	6e 93       	st	-X, r22
    2408:	14 97       	sbiw	r26, 0x04	; 4
    240a:	fb 01       	movw	r30, r22
    240c:	15 82       	std	Z+5, r1	; 0x05
    240e:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    2410:	ae 01       	movw	r20, r28
    2412:	49 54       	subi	r20, 0x49	; 73
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	fc 01       	movw	r30, r24
    2418:	51 83       	std	Z+1, r21	; 0x01
    241a:	40 83       	st	Z, r20
    241c:	fa 01       	movw	r30, r20
    241e:	13 82       	std	Z+3, r1	; 0x03
    2420:	12 82       	std	Z+2, r1	; 0x02
    2422:	9e 01       	movw	r18, r28
    2424:	25 54       	subi	r18, 0x45	; 69
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	fc 01       	movw	r30, r24
    242a:	33 83       	std	Z+3, r19	; 0x03
    242c:	22 83       	std	Z+2, r18	; 0x02
    242e:	f9 01       	movw	r30, r18
    2430:	13 82       	std	Z+3, r1	; 0x03
    2432:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &middle.value; then1.value = &straight.value;
    2434:	84 57       	subi	r24, 0x74	; 116
    2436:	91 09       	sbc	r25, r1
    2438:	fa 01       	movw	r30, r20
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
    243e:	fa e0       	ldi	r31, 0x0A	; 10
    2440:	6f 0e       	add	r6, r31
    2442:	71 1c       	adc	r7, r1
    2444:	f9 01       	movw	r30, r18
    2446:	71 82       	std	Z+1, r7	; 0x01
    2448:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    244a:	2c 5f       	subi	r18, 0xFC	; 252
    244c:	3f 4f       	sbci	r19, 0xFF	; 255
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	3c 93       	st	X, r19
    2452:	2e 93       	st	-X, r18
    2454:	f9 01       	movw	r30, r18
    2456:	13 82       	std	Z+3, r1	; 0x03
    2458:	12 82       	std	Z+2, r1	; 0x02
    245a:	8e 56       	subi	r24, 0x6E	; 110
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	13 96       	adiw	r26, 0x03	; 3
    2460:	9c 93       	st	X, r25
    2462:	8e 93       	st	-X, r24
    2464:	12 97       	sbiw	r26, 0x02	; 2
    2466:	fc 01       	movw	r30, r24
    2468:	13 82       	std	Z+3, r1	; 0x03
    246a:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &off_right.value; then2.value = &left.value;
    246c:	4c 59       	subi	r20, 0x9C	; 156
    246e:	51 09       	sbc	r21, r1
    2470:	f9 01       	movw	r30, r18
    2472:	51 83       	std	Z+1, r21	; 0x01
    2474:	40 83       	st	Z, r20
    2476:	fa e0       	ldi	r31, 0x0A	; 10
    2478:	8f 0e       	add	r8, r31
    247a:	91 1c       	adc	r9, r1
    247c:	fc 01       	movw	r30, r24
    247e:	91 82       	std	Z+1, r9	; 0x01
    2480:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    2482:	04 96       	adiw	r24, 0x04	; 4
    2484:	fb 01       	movw	r30, r22
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
    248a:	fc 01       	movw	r30, r24
    248c:	13 82       	std	Z+3, r1	; 0x03
    248e:	12 82       	std	Z+2, r1	; 0x02
    2490:	90 96       	adiw	r26, 0x20	; 32
    2492:	fb 01       	movw	r30, r22
    2494:	b3 83       	std	Z+3, r27	; 0x03
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	13 96       	adiw	r26, 0x03	; 3
    249a:	1c 92       	st	X, r1
    249c:	1e 92       	st	-X, r1
    249e:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &off_left.value; then3.value = &right.value;
    24a0:	fa e0       	ldi	r31, 0x0A	; 10
    24a2:	4f 0e       	add	r4, r31
    24a4:	51 1c       	adc	r5, r1
    24a6:	fc 01       	movw	r30, r24
    24a8:	51 82       	std	Z+1, r5	; 0x01
    24aa:	40 82       	st	Z, r4
    24ac:	fa e0       	ldi	r31, 0x0A	; 10
    24ae:	af 0e       	add	r10, r31
    24b0:	b1 1c       	adc	r11, r1
    24b2:	ad 92       	st	X+, r10
    24b4:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    24b6:	0e 94 94 08 	call	0x1128	; 0x1128 <fuzzification>
	rule_evaluation();
    24ba:	0e 94 bb 08 	call	0x1176	; 0x1176 <rule_evaluation>
	defuzzification();
    24be:	0e 94 01 09 	call	0x1202	; 0x1202 <defuzzification>
	if (servo.value > MAXLEFT)
    24c2:	f6 01       	movw	r30, r12
    24c4:	82 85       	ldd	r24, Z+10	; 0x0a
    24c6:	93 85       	ldd	r25, Z+11	; 0x0b
    24c8:	87 3e       	cpi	r24, 0xE7	; 231
    24ca:	f7 e0       	ldi	r31, 0x07	; 7
    24cc:	9f 07       	cpc	r25, r31
    24ce:	24 f0       	brlt	.+8      	; 0x24d8 <stop+0x2ae>
	{
		setServo(MAXLEFT);
    24d0:	86 ee       	ldi	r24, 0xE6	; 230
    24d2:	97 e0       	ldi	r25, 0x07	; 7
    24d4:	30 dd       	rcall	.-1440   	; 0x1f36 <setServo>
    24d6:	09 c0       	rjmp	.+18     	; 0x24ea <stop+0x2c0>
	}
	else if (servo.value < MAXRIGHT)
    24d8:	84 3e       	cpi	r24, 0xE4	; 228
    24da:	2c e0       	ldi	r18, 0x0C	; 12
    24dc:	92 07       	cpc	r25, r18
    24de:	24 f4       	brge	.+8      	; 0x24e8 <stop+0x2be>
	{
		setServo(MAXRIGHT);
    24e0:	84 ee       	ldi	r24, 0xE4	; 228
    24e2:	9c e0       	ldi	r25, 0x0C	; 12
    24e4:	28 dd       	rcall	.-1456   	; 0x1f36 <setServo>
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <stop+0x2c0>
	}
	else
	{
		setServo(servo.value);
    24e8:	26 dd       	rcall	.-1460   	; 0x1f36 <setServo>
	}
	
    24ea:	c2 53       	subi	r28, 0x32	; 50
    24ec:	df 4f       	sbci	r29, 0xFF	; 255
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	df 90       	pop	r13
    2506:	cf 90       	pop	r12
    2508:	bf 90       	pop	r11
    250a:	af 90       	pop	r10
    250c:	9f 90       	pop	r9
    250e:	8f 90       	pop	r8
    2510:	7f 90       	pop	r7
    2512:	6f 90       	pop	r6
    2514:	5f 90       	pop	r5
    2516:	4f 90       	pop	r4
    2518:	08 95       	ret

0000251a <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    251a:	1f 92       	push	r1
    251c:	0f 92       	push	r0
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	0f 92       	push	r0
    2522:	11 24       	eor	r1, r1
    2524:	0b b6       	in	r0, 0x3b	; 59
    2526:	0f 92       	push	r0
    2528:	2f 93       	push	r18
    252a:	3f 93       	push	r19
    252c:	4f 93       	push	r20
    252e:	8f 93       	push	r24
    2530:	9f 93       	push	r25
    2532:	af 93       	push	r26
    2534:	bf 93       	push	r27
    2536:	ef 93       	push	r30
    2538:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    253a:	80 91 5e 03 	lds	r24, 0x035E
    253e:	90 91 5f 03 	lds	r25, 0x035F
    2542:	80 34       	cpi	r24, 0x40	; 64
    2544:	91 05       	cpc	r25, r1
    2546:	31 f4       	brne	.+12     	; 0x2554 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 8a 03 	sts	0x038A, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    254e:	80 91 c6 00 	lds	r24, 0x00C6
    2552:	16 c0       	rjmp	.+44     	; 0x2580 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    2554:	80 34       	cpi	r24, 0x40	; 64
    2556:	91 05       	cpc	r25, r1
    2558:	e8 f4       	brcc	.+58     	; 0x2594 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    255a:	ec e5       	ldi	r30, 0x5C	; 92
    255c:	f3 e0       	ldi	r31, 0x03	; 3
    255e:	20 81       	ld	r18, Z
    2560:	31 81       	ldd	r19, Z+1	; 0x01
    2562:	40 91 c6 00 	lds	r20, 0x00C6
    2566:	d9 01       	movw	r26, r18
    2568:	a6 5e       	subi	r26, 0xE6	; 230
    256a:	bc 4f       	sbci	r27, 0xFC	; 252
    256c:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    256e:	2f 5f       	subi	r18, 0xFF	; 255
    2570:	3f 4f       	sbci	r19, 0xFF	; 255
    2572:	31 83       	std	Z+1, r19	; 0x01
    2574:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	90 93 5f 03 	sts	0x035F, r25
    257c:	80 93 5e 03 	sts	0x035E, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    2580:	80 91 5e 03 	lds	r24, 0x035E
    2584:	90 91 5f 03 	lds	r25, 0x035F
    2588:	80 34       	cpi	r24, 0x40	; 64
    258a:	91 05       	cpc	r25, r1
    258c:	19 f4       	brne	.+6      	; 0x2594 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	80 93 88 03 	sts	0x0388, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    2594:	80 91 5c 03 	lds	r24, 0x035C
    2598:	90 91 5d 03 	lds	r25, 0x035D
    259c:	80 34       	cpi	r24, 0x40	; 64
    259e:	91 05       	cpc	r25, r1
    25a0:	21 f4       	brne	.+8      	; 0x25aa <__vector_20+0x90>
		rx_uart0.i_last = 0;
    25a2:	10 92 5d 03 	sts	0x035D, r1
    25a6:	10 92 5c 03 	sts	0x035C, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	80 93 87 03 	sts	0x0387, r24
}
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	4f 91       	pop	r20
    25be:	3f 91       	pop	r19
    25c0:	2f 91       	pop	r18
    25c2:	0f 90       	pop	r0
    25c4:	0b be       	out	0x3b, r0	; 59
    25c6:	0f 90       	pop	r0
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	0f 90       	pop	r0
    25cc:	1f 90       	pop	r1
    25ce:	18 95       	reti

000025d0 <__vector_22>:




ISR(USART0_TX_vect)
{
    25d0:	1f 92       	push	r1
    25d2:	0f 92       	push	r0
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	0f 92       	push	r0
    25d8:	11 24       	eor	r1, r1
    25da:	0b b6       	in	r0, 0x3b	; 59
    25dc:	0f 92       	push	r0
    25de:	8f 93       	push	r24
    25e0:	9f 93       	push	r25
    25e2:	ef 93       	push	r30
    25e4:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    25e6:	80 91 18 03 	lds	r24, 0x0318
    25ea:	90 91 19 03 	lds	r25, 0x0319
    25ee:	80 34       	cpi	r24, 0x40	; 64
    25f0:	91 05       	cpc	r25, r1
    25f2:	19 f4       	brne	.+6      	; 0x25fa <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    25f4:	10 92 86 03 	sts	0x0386, r1
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    25fa:	89 2b       	or	r24, r25
    25fc:	b9 f0       	breq	.+46     	; 0x262c <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    25fe:	e0 91 14 03 	lds	r30, 0x0314
    2602:	f0 91 15 03 	lds	r31, 0x0315
    2606:	ec 52       	subi	r30, 0x2C	; 44
    2608:	fd 4f       	sbci	r31, 0xFD	; 253
    260a:	80 81       	ld	r24, Z
    260c:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    2610:	e4 e1       	ldi	r30, 0x14	; 20
    2612:	f3 e0       	ldi	r31, 0x03	; 3
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    261e:	e8 e1       	ldi	r30, 0x18	; 24
    2620:	f3 e0       	ldi	r31, 0x03	; 3
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    262c:	80 91 14 03 	lds	r24, 0x0314
    2630:	90 91 15 03 	lds	r25, 0x0315
    2634:	80 34       	cpi	r24, 0x40	; 64
    2636:	91 05       	cpc	r25, r1
    2638:	21 f4       	brne	.+8      	; 0x2642 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    263a:	10 92 15 03 	sts	0x0315, r1
    263e:	10 92 14 03 	sts	0x0314, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    2642:	80 91 18 03 	lds	r24, 0x0318
    2646:	90 91 19 03 	lds	r25, 0x0319
    264a:	89 2b       	or	r24, r25
    264c:	39 f4       	brne	.+14     	; 0x265c <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    264e:	10 92 89 03 	sts	0x0389, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    2652:	e1 ec       	ldi	r30, 0xC1	; 193
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	8f 7b       	andi	r24, 0xBF	; 191
    265a:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    265c:	ff 91       	pop	r31
    265e:	ef 91       	pop	r30
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	0f 90       	pop	r0
    2666:	0b be       	out	0x3b, r0	; 59
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <__subsf3>:
    2672:	50 58       	subi	r21, 0x80	; 128

00002674 <__addsf3>:
    2674:	bb 27       	eor	r27, r27
    2676:	aa 27       	eor	r26, r26
    2678:	0e d0       	rcall	.+28     	; 0x2696 <__addsf3x>
    267a:	4d c1       	rjmp	.+666    	; 0x2916 <__fp_round>
    267c:	3e d1       	rcall	.+636    	; 0x28fa <__fp_pscA>
    267e:	30 f0       	brcs	.+12     	; 0x268c <__addsf3+0x18>
    2680:	43 d1       	rcall	.+646    	; 0x2908 <__fp_pscB>
    2682:	20 f0       	brcs	.+8      	; 0x268c <__addsf3+0x18>
    2684:	31 f4       	brne	.+12     	; 0x2692 <__addsf3+0x1e>
    2686:	9f 3f       	cpi	r25, 0xFF	; 255
    2688:	11 f4       	brne	.+4      	; 0x268e <__addsf3+0x1a>
    268a:	1e f4       	brtc	.+6      	; 0x2692 <__addsf3+0x1e>
    268c:	33 c1       	rjmp	.+614    	; 0x28f4 <__fp_nan>
    268e:	0e f4       	brtc	.+2      	; 0x2692 <__addsf3+0x1e>
    2690:	e0 95       	com	r30
    2692:	e7 fb       	bst	r30, 7
    2694:	29 c1       	rjmp	.+594    	; 0x28e8 <__fp_inf>

00002696 <__addsf3x>:
    2696:	e9 2f       	mov	r30, r25
    2698:	4f d1       	rcall	.+670    	; 0x2938 <__fp_split3>
    269a:	80 f3       	brcs	.-32     	; 0x267c <__addsf3+0x8>
    269c:	ba 17       	cp	r27, r26
    269e:	62 07       	cpc	r22, r18
    26a0:	73 07       	cpc	r23, r19
    26a2:	84 07       	cpc	r24, r20
    26a4:	95 07       	cpc	r25, r21
    26a6:	18 f0       	brcs	.+6      	; 0x26ae <__addsf3x+0x18>
    26a8:	71 f4       	brne	.+28     	; 0x26c6 <__addsf3x+0x30>
    26aa:	9e f5       	brtc	.+102    	; 0x2712 <__addsf3x+0x7c>
    26ac:	67 c1       	rjmp	.+718    	; 0x297c <__fp_zero>
    26ae:	0e f4       	brtc	.+2      	; 0x26b2 <__addsf3x+0x1c>
    26b0:	e0 95       	com	r30
    26b2:	0b 2e       	mov	r0, r27
    26b4:	ba 2f       	mov	r27, r26
    26b6:	a0 2d       	mov	r26, r0
    26b8:	0b 01       	movw	r0, r22
    26ba:	b9 01       	movw	r22, r18
    26bc:	90 01       	movw	r18, r0
    26be:	0c 01       	movw	r0, r24
    26c0:	ca 01       	movw	r24, r20
    26c2:	a0 01       	movw	r20, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	ff 27       	eor	r31, r31
    26c8:	59 1b       	sub	r21, r25
    26ca:	99 f0       	breq	.+38     	; 0x26f2 <__addsf3x+0x5c>
    26cc:	59 3f       	cpi	r21, 0xF9	; 249
    26ce:	50 f4       	brcc	.+20     	; 0x26e4 <__addsf3x+0x4e>
    26d0:	50 3e       	cpi	r21, 0xE0	; 224
    26d2:	68 f1       	brcs	.+90     	; 0x272e <__addsf3x+0x98>
    26d4:	1a 16       	cp	r1, r26
    26d6:	f0 40       	sbci	r31, 0x00	; 0
    26d8:	a2 2f       	mov	r26, r18
    26da:	23 2f       	mov	r18, r19
    26dc:	34 2f       	mov	r19, r20
    26de:	44 27       	eor	r20, r20
    26e0:	58 5f       	subi	r21, 0xF8	; 248
    26e2:	f3 cf       	rjmp	.-26     	; 0x26ca <__addsf3x+0x34>
    26e4:	46 95       	lsr	r20
    26e6:	37 95       	ror	r19
    26e8:	27 95       	ror	r18
    26ea:	a7 95       	ror	r26
    26ec:	f0 40       	sbci	r31, 0x00	; 0
    26ee:	53 95       	inc	r21
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__addsf3x+0x4e>
    26f2:	7e f4       	brtc	.+30     	; 0x2712 <__addsf3x+0x7c>
    26f4:	1f 16       	cp	r1, r31
    26f6:	ba 0b       	sbc	r27, r26
    26f8:	62 0b       	sbc	r22, r18
    26fa:	73 0b       	sbc	r23, r19
    26fc:	84 0b       	sbc	r24, r20
    26fe:	ba f0       	brmi	.+46     	; 0x272e <__addsf3x+0x98>
    2700:	91 50       	subi	r25, 0x01	; 1
    2702:	a1 f0       	breq	.+40     	; 0x272c <__addsf3x+0x96>
    2704:	ff 0f       	add	r31, r31
    2706:	bb 1f       	adc	r27, r27
    2708:	66 1f       	adc	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	88 1f       	adc	r24, r24
    270e:	c2 f7       	brpl	.-16     	; 0x2700 <__addsf3x+0x6a>
    2710:	0e c0       	rjmp	.+28     	; 0x272e <__addsf3x+0x98>
    2712:	ba 0f       	add	r27, r26
    2714:	62 1f       	adc	r22, r18
    2716:	73 1f       	adc	r23, r19
    2718:	84 1f       	adc	r24, r20
    271a:	48 f4       	brcc	.+18     	; 0x272e <__addsf3x+0x98>
    271c:	87 95       	ror	r24
    271e:	77 95       	ror	r23
    2720:	67 95       	ror	r22
    2722:	b7 95       	ror	r27
    2724:	f7 95       	ror	r31
    2726:	9e 3f       	cpi	r25, 0xFE	; 254
    2728:	08 f0       	brcs	.+2      	; 0x272c <__addsf3x+0x96>
    272a:	b3 cf       	rjmp	.-154    	; 0x2692 <__addsf3+0x1e>
    272c:	93 95       	inc	r25
    272e:	88 0f       	add	r24, r24
    2730:	08 f0       	brcs	.+2      	; 0x2734 <__addsf3x+0x9e>
    2732:	99 27       	eor	r25, r25
    2734:	ee 0f       	add	r30, r30
    2736:	97 95       	ror	r25
    2738:	87 95       	ror	r24
    273a:	08 95       	ret

0000273c <__divsf3>:
    273c:	0c d0       	rcall	.+24     	; 0x2756 <__divsf3x>
    273e:	eb c0       	rjmp	.+470    	; 0x2916 <__fp_round>
    2740:	e3 d0       	rcall	.+454    	; 0x2908 <__fp_pscB>
    2742:	40 f0       	brcs	.+16     	; 0x2754 <__divsf3+0x18>
    2744:	da d0       	rcall	.+436    	; 0x28fa <__fp_pscA>
    2746:	30 f0       	brcs	.+12     	; 0x2754 <__divsf3+0x18>
    2748:	21 f4       	brne	.+8      	; 0x2752 <__divsf3+0x16>
    274a:	5f 3f       	cpi	r21, 0xFF	; 255
    274c:	19 f0       	breq	.+6      	; 0x2754 <__divsf3+0x18>
    274e:	cc c0       	rjmp	.+408    	; 0x28e8 <__fp_inf>
    2750:	51 11       	cpse	r21, r1
    2752:	15 c1       	rjmp	.+554    	; 0x297e <__fp_szero>
    2754:	cf c0       	rjmp	.+414    	; 0x28f4 <__fp_nan>

00002756 <__divsf3x>:
    2756:	f0 d0       	rcall	.+480    	; 0x2938 <__fp_split3>
    2758:	98 f3       	brcs	.-26     	; 0x2740 <__divsf3+0x4>

0000275a <__divsf3_pse>:
    275a:	99 23       	and	r25, r25
    275c:	c9 f3       	breq	.-14     	; 0x2750 <__divsf3+0x14>
    275e:	55 23       	and	r21, r21
    2760:	b1 f3       	breq	.-20     	; 0x274e <__divsf3+0x12>
    2762:	95 1b       	sub	r25, r21
    2764:	55 0b       	sbc	r21, r21
    2766:	bb 27       	eor	r27, r27
    2768:	aa 27       	eor	r26, r26
    276a:	62 17       	cp	r22, r18
    276c:	73 07       	cpc	r23, r19
    276e:	84 07       	cpc	r24, r20
    2770:	38 f0       	brcs	.+14     	; 0x2780 <__divsf3_pse+0x26>
    2772:	9f 5f       	subi	r25, 0xFF	; 255
    2774:	5f 4f       	sbci	r21, 0xFF	; 255
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	44 1f       	adc	r20, r20
    277c:	aa 1f       	adc	r26, r26
    277e:	a9 f3       	breq	.-22     	; 0x276a <__divsf3_pse+0x10>
    2780:	33 d0       	rcall	.+102    	; 0x27e8 <__divsf3_pse+0x8e>
    2782:	0e 2e       	mov	r0, r30
    2784:	3a f0       	brmi	.+14     	; 0x2794 <__divsf3_pse+0x3a>
    2786:	e0 e8       	ldi	r30, 0x80	; 128
    2788:	30 d0       	rcall	.+96     	; 0x27ea <__divsf3_pse+0x90>
    278a:	91 50       	subi	r25, 0x01	; 1
    278c:	50 40       	sbci	r21, 0x00	; 0
    278e:	e6 95       	lsr	r30
    2790:	00 1c       	adc	r0, r0
    2792:	ca f7       	brpl	.-14     	; 0x2786 <__divsf3_pse+0x2c>
    2794:	29 d0       	rcall	.+82     	; 0x27e8 <__divsf3_pse+0x8e>
    2796:	fe 2f       	mov	r31, r30
    2798:	27 d0       	rcall	.+78     	; 0x27e8 <__divsf3_pse+0x8e>
    279a:	66 0f       	add	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	bb 1f       	adc	r27, r27
    27a2:	26 17       	cp	r18, r22
    27a4:	37 07       	cpc	r19, r23
    27a6:	48 07       	cpc	r20, r24
    27a8:	ab 07       	cpc	r26, r27
    27aa:	b0 e8       	ldi	r27, 0x80	; 128
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <__divsf3_pse+0x56>
    27ae:	bb 0b       	sbc	r27, r27
    27b0:	80 2d       	mov	r24, r0
    27b2:	bf 01       	movw	r22, r30
    27b4:	ff 27       	eor	r31, r31
    27b6:	93 58       	subi	r25, 0x83	; 131
    27b8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ba:	2a f0       	brmi	.+10     	; 0x27c6 <__divsf3_pse+0x6c>
    27bc:	9e 3f       	cpi	r25, 0xFE	; 254
    27be:	51 05       	cpc	r21, r1
    27c0:	68 f0       	brcs	.+26     	; 0x27dc <__divsf3_pse+0x82>
    27c2:	92 c0       	rjmp	.+292    	; 0x28e8 <__fp_inf>
    27c4:	dc c0       	rjmp	.+440    	; 0x297e <__fp_szero>
    27c6:	5f 3f       	cpi	r21, 0xFF	; 255
    27c8:	ec f3       	brlt	.-6      	; 0x27c4 <__divsf3_pse+0x6a>
    27ca:	98 3e       	cpi	r25, 0xE8	; 232
    27cc:	dc f3       	brlt	.-10     	; 0x27c4 <__divsf3_pse+0x6a>
    27ce:	86 95       	lsr	r24
    27d0:	77 95       	ror	r23
    27d2:	67 95       	ror	r22
    27d4:	b7 95       	ror	r27
    27d6:	f7 95       	ror	r31
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	c9 f7       	brne	.-14     	; 0x27ce <__divsf3_pse+0x74>
    27dc:	88 0f       	add	r24, r24
    27de:	91 1d       	adc	r25, r1
    27e0:	96 95       	lsr	r25
    27e2:	87 95       	ror	r24
    27e4:	97 f9       	bld	r25, 7
    27e6:	08 95       	ret
    27e8:	e1 e0       	ldi	r30, 0x01	; 1
    27ea:	66 0f       	add	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	88 1f       	adc	r24, r24
    27f0:	bb 1f       	adc	r27, r27
    27f2:	62 17       	cp	r22, r18
    27f4:	73 07       	cpc	r23, r19
    27f6:	84 07       	cpc	r24, r20
    27f8:	ba 07       	cpc	r27, r26
    27fa:	20 f0       	brcs	.+8      	; 0x2804 <__divsf3_pse+0xaa>
    27fc:	62 1b       	sub	r22, r18
    27fe:	73 0b       	sbc	r23, r19
    2800:	84 0b       	sbc	r24, r20
    2802:	ba 0b       	sbc	r27, r26
    2804:	ee 1f       	adc	r30, r30
    2806:	88 f7       	brcc	.-30     	; 0x27ea <__divsf3_pse+0x90>
    2808:	e0 95       	com	r30
    280a:	08 95       	ret

0000280c <__fixsfsi>:
    280c:	04 d0       	rcall	.+8      	; 0x2816 <__fixunssfsi>
    280e:	68 94       	set
    2810:	b1 11       	cpse	r27, r1
    2812:	b5 c0       	rjmp	.+362    	; 0x297e <__fp_szero>
    2814:	08 95       	ret

00002816 <__fixunssfsi>:
    2816:	98 d0       	rcall	.+304    	; 0x2948 <__fp_splitA>
    2818:	88 f0       	brcs	.+34     	; 0x283c <__fixunssfsi+0x26>
    281a:	9f 57       	subi	r25, 0x7F	; 127
    281c:	90 f0       	brcs	.+36     	; 0x2842 <__fixunssfsi+0x2c>
    281e:	b9 2f       	mov	r27, r25
    2820:	99 27       	eor	r25, r25
    2822:	b7 51       	subi	r27, 0x17	; 23
    2824:	a0 f0       	brcs	.+40     	; 0x284e <__fixunssfsi+0x38>
    2826:	d1 f0       	breq	.+52     	; 0x285c <__fixunssfsi+0x46>
    2828:	66 0f       	add	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	1a f0       	brmi	.+6      	; 0x2838 <__fixunssfsi+0x22>
    2832:	ba 95       	dec	r27
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__fixunssfsi+0x12>
    2836:	12 c0       	rjmp	.+36     	; 0x285c <__fixunssfsi+0x46>
    2838:	b1 30       	cpi	r27, 0x01	; 1
    283a:	81 f0       	breq	.+32     	; 0x285c <__fixunssfsi+0x46>
    283c:	9f d0       	rcall	.+318    	; 0x297c <__fp_zero>
    283e:	b1 e0       	ldi	r27, 0x01	; 1
    2840:	08 95       	ret
    2842:	9c c0       	rjmp	.+312    	; 0x297c <__fp_zero>
    2844:	67 2f       	mov	r22, r23
    2846:	78 2f       	mov	r23, r24
    2848:	88 27       	eor	r24, r24
    284a:	b8 5f       	subi	r27, 0xF8	; 248
    284c:	39 f0       	breq	.+14     	; 0x285c <__fixunssfsi+0x46>
    284e:	b9 3f       	cpi	r27, 0xF9	; 249
    2850:	cc f3       	brlt	.-14     	; 0x2844 <__fixunssfsi+0x2e>
    2852:	86 95       	lsr	r24
    2854:	77 95       	ror	r23
    2856:	67 95       	ror	r22
    2858:	b3 95       	inc	r27
    285a:	d9 f7       	brne	.-10     	; 0x2852 <__fixunssfsi+0x3c>
    285c:	3e f4       	brtc	.+14     	; 0x286c <__fixunssfsi+0x56>
    285e:	90 95       	com	r25
    2860:	80 95       	com	r24
    2862:	70 95       	com	r23
    2864:	61 95       	neg	r22
    2866:	7f 4f       	sbci	r23, 0xFF	; 255
    2868:	8f 4f       	sbci	r24, 0xFF	; 255
    286a:	9f 4f       	sbci	r25, 0xFF	; 255
    286c:	08 95       	ret

0000286e <__floatunsisf>:
    286e:	e8 94       	clt
    2870:	09 c0       	rjmp	.+18     	; 0x2884 <__floatsisf+0x12>

00002872 <__floatsisf>:
    2872:	97 fb       	bst	r25, 7
    2874:	3e f4       	brtc	.+14     	; 0x2884 <__floatsisf+0x12>
    2876:	90 95       	com	r25
    2878:	80 95       	com	r24
    287a:	70 95       	com	r23
    287c:	61 95       	neg	r22
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	8f 4f       	sbci	r24, 0xFF	; 255
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	99 23       	and	r25, r25
    2886:	a9 f0       	breq	.+42     	; 0x28b2 <__floatsisf+0x40>
    2888:	f9 2f       	mov	r31, r25
    288a:	96 e9       	ldi	r25, 0x96	; 150
    288c:	bb 27       	eor	r27, r27
    288e:	93 95       	inc	r25
    2890:	f6 95       	lsr	r31
    2892:	87 95       	ror	r24
    2894:	77 95       	ror	r23
    2896:	67 95       	ror	r22
    2898:	b7 95       	ror	r27
    289a:	f1 11       	cpse	r31, r1
    289c:	f8 cf       	rjmp	.-16     	; 0x288e <__floatsisf+0x1c>
    289e:	fa f4       	brpl	.+62     	; 0x28de <__floatsisf+0x6c>
    28a0:	bb 0f       	add	r27, r27
    28a2:	11 f4       	brne	.+4      	; 0x28a8 <__floatsisf+0x36>
    28a4:	60 ff       	sbrs	r22, 0
    28a6:	1b c0       	rjmp	.+54     	; 0x28de <__floatsisf+0x6c>
    28a8:	6f 5f       	subi	r22, 0xFF	; 255
    28aa:	7f 4f       	sbci	r23, 0xFF	; 255
    28ac:	8f 4f       	sbci	r24, 0xFF	; 255
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	16 c0       	rjmp	.+44     	; 0x28de <__floatsisf+0x6c>
    28b2:	88 23       	and	r24, r24
    28b4:	11 f0       	breq	.+4      	; 0x28ba <__floatsisf+0x48>
    28b6:	96 e9       	ldi	r25, 0x96	; 150
    28b8:	11 c0       	rjmp	.+34     	; 0x28dc <__floatsisf+0x6a>
    28ba:	77 23       	and	r23, r23
    28bc:	21 f0       	breq	.+8      	; 0x28c6 <__floatsisf+0x54>
    28be:	9e e8       	ldi	r25, 0x8E	; 142
    28c0:	87 2f       	mov	r24, r23
    28c2:	76 2f       	mov	r23, r22
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <__floatsisf+0x5e>
    28c6:	66 23       	and	r22, r22
    28c8:	71 f0       	breq	.+28     	; 0x28e6 <__floatsisf+0x74>
    28ca:	96 e8       	ldi	r25, 0x86	; 134
    28cc:	86 2f       	mov	r24, r22
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	2a f0       	brmi	.+10     	; 0x28de <__floatsisf+0x6c>
    28d4:	9a 95       	dec	r25
    28d6:	66 0f       	add	r22, r22
    28d8:	77 1f       	adc	r23, r23
    28da:	88 1f       	adc	r24, r24
    28dc:	da f7       	brpl	.-10     	; 0x28d4 <__floatsisf+0x62>
    28de:	88 0f       	add	r24, r24
    28e0:	96 95       	lsr	r25
    28e2:	87 95       	ror	r24
    28e4:	97 f9       	bld	r25, 7
    28e6:	08 95       	ret

000028e8 <__fp_inf>:
    28e8:	97 f9       	bld	r25, 7
    28ea:	9f 67       	ori	r25, 0x7F	; 127
    28ec:	80 e8       	ldi	r24, 0x80	; 128
    28ee:	70 e0       	ldi	r23, 0x00	; 0
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	08 95       	ret

000028f4 <__fp_nan>:
    28f4:	9f ef       	ldi	r25, 0xFF	; 255
    28f6:	80 ec       	ldi	r24, 0xC0	; 192
    28f8:	08 95       	ret

000028fa <__fp_pscA>:
    28fa:	00 24       	eor	r0, r0
    28fc:	0a 94       	dec	r0
    28fe:	16 16       	cp	r1, r22
    2900:	17 06       	cpc	r1, r23
    2902:	18 06       	cpc	r1, r24
    2904:	09 06       	cpc	r0, r25
    2906:	08 95       	ret

00002908 <__fp_pscB>:
    2908:	00 24       	eor	r0, r0
    290a:	0a 94       	dec	r0
    290c:	12 16       	cp	r1, r18
    290e:	13 06       	cpc	r1, r19
    2910:	14 06       	cpc	r1, r20
    2912:	05 06       	cpc	r0, r21
    2914:	08 95       	ret

00002916 <__fp_round>:
    2916:	09 2e       	mov	r0, r25
    2918:	03 94       	inc	r0
    291a:	00 0c       	add	r0, r0
    291c:	11 f4       	brne	.+4      	; 0x2922 <__fp_round+0xc>
    291e:	88 23       	and	r24, r24
    2920:	52 f0       	brmi	.+20     	; 0x2936 <__fp_round+0x20>
    2922:	bb 0f       	add	r27, r27
    2924:	40 f4       	brcc	.+16     	; 0x2936 <__fp_round+0x20>
    2926:	bf 2b       	or	r27, r31
    2928:	11 f4       	brne	.+4      	; 0x292e <__fp_round+0x18>
    292a:	60 ff       	sbrs	r22, 0
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <__fp_round+0x20>
    292e:	6f 5f       	subi	r22, 0xFF	; 255
    2930:	7f 4f       	sbci	r23, 0xFF	; 255
    2932:	8f 4f       	sbci	r24, 0xFF	; 255
    2934:	9f 4f       	sbci	r25, 0xFF	; 255
    2936:	08 95       	ret

00002938 <__fp_split3>:
    2938:	57 fd       	sbrc	r21, 7
    293a:	90 58       	subi	r25, 0x80	; 128
    293c:	44 0f       	add	r20, r20
    293e:	55 1f       	adc	r21, r21
    2940:	59 f0       	breq	.+22     	; 0x2958 <__fp_splitA+0x10>
    2942:	5f 3f       	cpi	r21, 0xFF	; 255
    2944:	71 f0       	breq	.+28     	; 0x2962 <__fp_splitA+0x1a>
    2946:	47 95       	ror	r20

00002948 <__fp_splitA>:
    2948:	88 0f       	add	r24, r24
    294a:	97 fb       	bst	r25, 7
    294c:	99 1f       	adc	r25, r25
    294e:	61 f0       	breq	.+24     	; 0x2968 <__fp_splitA+0x20>
    2950:	9f 3f       	cpi	r25, 0xFF	; 255
    2952:	79 f0       	breq	.+30     	; 0x2972 <__fp_splitA+0x2a>
    2954:	87 95       	ror	r24
    2956:	08 95       	ret
    2958:	12 16       	cp	r1, r18
    295a:	13 06       	cpc	r1, r19
    295c:	14 06       	cpc	r1, r20
    295e:	55 1f       	adc	r21, r21
    2960:	f2 cf       	rjmp	.-28     	; 0x2946 <__fp_split3+0xe>
    2962:	46 95       	lsr	r20
    2964:	f1 df       	rcall	.-30     	; 0x2948 <__fp_splitA>
    2966:	08 c0       	rjmp	.+16     	; 0x2978 <__fp_splitA+0x30>
    2968:	16 16       	cp	r1, r22
    296a:	17 06       	cpc	r1, r23
    296c:	18 06       	cpc	r1, r24
    296e:	99 1f       	adc	r25, r25
    2970:	f1 cf       	rjmp	.-30     	; 0x2954 <__fp_splitA+0xc>
    2972:	86 95       	lsr	r24
    2974:	71 05       	cpc	r23, r1
    2976:	61 05       	cpc	r22, r1
    2978:	08 94       	sec
    297a:	08 95       	ret

0000297c <__fp_zero>:
    297c:	e8 94       	clt

0000297e <__fp_szero>:
    297e:	bb 27       	eor	r27, r27
    2980:	66 27       	eor	r22, r22
    2982:	77 27       	eor	r23, r23
    2984:	cb 01       	movw	r24, r22
    2986:	97 f9       	bld	r25, 7
    2988:	08 95       	ret

0000298a <__mulsf3>:
    298a:	0b d0       	rcall	.+22     	; 0x29a2 <__mulsf3x>
    298c:	c4 cf       	rjmp	.-120    	; 0x2916 <__fp_round>
    298e:	b5 df       	rcall	.-150    	; 0x28fa <__fp_pscA>
    2990:	28 f0       	brcs	.+10     	; 0x299c <__mulsf3+0x12>
    2992:	ba df       	rcall	.-140    	; 0x2908 <__fp_pscB>
    2994:	18 f0       	brcs	.+6      	; 0x299c <__mulsf3+0x12>
    2996:	95 23       	and	r25, r21
    2998:	09 f0       	breq	.+2      	; 0x299c <__mulsf3+0x12>
    299a:	a6 cf       	rjmp	.-180    	; 0x28e8 <__fp_inf>
    299c:	ab cf       	rjmp	.-170    	; 0x28f4 <__fp_nan>
    299e:	11 24       	eor	r1, r1
    29a0:	ee cf       	rjmp	.-36     	; 0x297e <__fp_szero>

000029a2 <__mulsf3x>:
    29a2:	ca df       	rcall	.-108    	; 0x2938 <__fp_split3>
    29a4:	a0 f3       	brcs	.-24     	; 0x298e <__mulsf3+0x4>

000029a6 <__mulsf3_pse>:
    29a6:	95 9f       	mul	r25, r21
    29a8:	d1 f3       	breq	.-12     	; 0x299e <__mulsf3+0x14>
    29aa:	95 0f       	add	r25, r21
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	55 1f       	adc	r21, r21
    29b0:	62 9f       	mul	r22, r18
    29b2:	f0 01       	movw	r30, r0
    29b4:	72 9f       	mul	r23, r18
    29b6:	bb 27       	eor	r27, r27
    29b8:	f0 0d       	add	r31, r0
    29ba:	b1 1d       	adc	r27, r1
    29bc:	63 9f       	mul	r22, r19
    29be:	aa 27       	eor	r26, r26
    29c0:	f0 0d       	add	r31, r0
    29c2:	b1 1d       	adc	r27, r1
    29c4:	aa 1f       	adc	r26, r26
    29c6:	64 9f       	mul	r22, r20
    29c8:	66 27       	eor	r22, r22
    29ca:	b0 0d       	add	r27, r0
    29cc:	a1 1d       	adc	r26, r1
    29ce:	66 1f       	adc	r22, r22
    29d0:	82 9f       	mul	r24, r18
    29d2:	22 27       	eor	r18, r18
    29d4:	b0 0d       	add	r27, r0
    29d6:	a1 1d       	adc	r26, r1
    29d8:	62 1f       	adc	r22, r18
    29da:	73 9f       	mul	r23, r19
    29dc:	b0 0d       	add	r27, r0
    29de:	a1 1d       	adc	r26, r1
    29e0:	62 1f       	adc	r22, r18
    29e2:	83 9f       	mul	r24, r19
    29e4:	a0 0d       	add	r26, r0
    29e6:	61 1d       	adc	r22, r1
    29e8:	22 1f       	adc	r18, r18
    29ea:	74 9f       	mul	r23, r20
    29ec:	33 27       	eor	r19, r19
    29ee:	a0 0d       	add	r26, r0
    29f0:	61 1d       	adc	r22, r1
    29f2:	23 1f       	adc	r18, r19
    29f4:	84 9f       	mul	r24, r20
    29f6:	60 0d       	add	r22, r0
    29f8:	21 1d       	adc	r18, r1
    29fa:	82 2f       	mov	r24, r18
    29fc:	76 2f       	mov	r23, r22
    29fe:	6a 2f       	mov	r22, r26
    2a00:	11 24       	eor	r1, r1
    2a02:	9f 57       	subi	r25, 0x7F	; 127
    2a04:	50 40       	sbci	r21, 0x00	; 0
    2a06:	8a f0       	brmi	.+34     	; 0x2a2a <__mulsf3_pse+0x84>
    2a08:	e1 f0       	breq	.+56     	; 0x2a42 <__mulsf3_pse+0x9c>
    2a0a:	88 23       	and	r24, r24
    2a0c:	4a f0       	brmi	.+18     	; 0x2a20 <__mulsf3_pse+0x7a>
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	bb 1f       	adc	r27, r27
    2a14:	66 1f       	adc	r22, r22
    2a16:	77 1f       	adc	r23, r23
    2a18:	88 1f       	adc	r24, r24
    2a1a:	91 50       	subi	r25, 0x01	; 1
    2a1c:	50 40       	sbci	r21, 0x00	; 0
    2a1e:	a9 f7       	brne	.-22     	; 0x2a0a <__mulsf3_pse+0x64>
    2a20:	9e 3f       	cpi	r25, 0xFE	; 254
    2a22:	51 05       	cpc	r21, r1
    2a24:	70 f0       	brcs	.+28     	; 0x2a42 <__mulsf3_pse+0x9c>
    2a26:	60 cf       	rjmp	.-320    	; 0x28e8 <__fp_inf>
    2a28:	aa cf       	rjmp	.-172    	; 0x297e <__fp_szero>
    2a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2c:	ec f3       	brlt	.-6      	; 0x2a28 <__mulsf3_pse+0x82>
    2a2e:	98 3e       	cpi	r25, 0xE8	; 232
    2a30:	dc f3       	brlt	.-10     	; 0x2a28 <__mulsf3_pse+0x82>
    2a32:	86 95       	lsr	r24
    2a34:	77 95       	ror	r23
    2a36:	67 95       	ror	r22
    2a38:	b7 95       	ror	r27
    2a3a:	f7 95       	ror	r31
    2a3c:	e7 95       	ror	r30
    2a3e:	9f 5f       	subi	r25, 0xFF	; 255
    2a40:	c1 f7       	brne	.-16     	; 0x2a32 <__mulsf3_pse+0x8c>
    2a42:	fe 2b       	or	r31, r30
    2a44:	88 0f       	add	r24, r24
    2a46:	91 1d       	adc	r25, r1
    2a48:	96 95       	lsr	r25
    2a4a:	87 95       	ror	r24
    2a4c:	97 f9       	bld	r25, 7
    2a4e:	08 95       	ret

00002a50 <__divmodhi4>:
    2a50:	97 fb       	bst	r25, 7
    2a52:	07 2e       	mov	r0, r23
    2a54:	16 f4       	brtc	.+4      	; 0x2a5a <__divmodhi4+0xa>
    2a56:	00 94       	com	r0
    2a58:	06 d0       	rcall	.+12     	; 0x2a66 <__divmodhi4_neg1>
    2a5a:	77 fd       	sbrc	r23, 7
    2a5c:	08 d0       	rcall	.+16     	; 0x2a6e <__divmodhi4_neg2>
    2a5e:	0b d0       	rcall	.+22     	; 0x2a76 <__udivmodhi4>
    2a60:	07 fc       	sbrc	r0, 7
    2a62:	05 d0       	rcall	.+10     	; 0x2a6e <__divmodhi4_neg2>
    2a64:	3e f4       	brtc	.+14     	; 0x2a74 <__divmodhi4_exit>

00002a66 <__divmodhi4_neg1>:
    2a66:	90 95       	com	r25
    2a68:	81 95       	neg	r24
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	08 95       	ret

00002a6e <__divmodhi4_neg2>:
    2a6e:	70 95       	com	r23
    2a70:	61 95       	neg	r22
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255

00002a74 <__divmodhi4_exit>:
    2a74:	08 95       	ret

00002a76 <__udivmodhi4>:
    2a76:	aa 1b       	sub	r26, r26
    2a78:	bb 1b       	sub	r27, r27
    2a7a:	51 e1       	ldi	r21, 0x11	; 17
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <__udivmodhi4_ep>

00002a7e <__udivmodhi4_loop>:
    2a7e:	aa 1f       	adc	r26, r26
    2a80:	bb 1f       	adc	r27, r27
    2a82:	a6 17       	cp	r26, r22
    2a84:	b7 07       	cpc	r27, r23
    2a86:	10 f0       	brcs	.+4      	; 0x2a8c <__udivmodhi4_ep>
    2a88:	a6 1b       	sub	r26, r22
    2a8a:	b7 0b       	sbc	r27, r23

00002a8c <__udivmodhi4_ep>:
    2a8c:	88 1f       	adc	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	5a 95       	dec	r21
    2a92:	a9 f7       	brne	.-22     	; 0x2a7e <__udivmodhi4_loop>
    2a94:	80 95       	com	r24
    2a96:	90 95       	com	r25
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	08 95       	ret

00002a9e <strcpy>:
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	0d 92       	st	X+, r0
    2aa6:	00 20       	and	r0, r0
    2aa8:	e1 f7       	brne	.-8      	; 0x2aa2 <strcpy+0x4>
    2aaa:	08 95       	ret

00002aac <_exit>:
    2aac:	f8 94       	cli

00002aae <__stop_program>:
    2aae:	ff cf       	rjmp	.-2      	; 0x2aae <__stop_program>
