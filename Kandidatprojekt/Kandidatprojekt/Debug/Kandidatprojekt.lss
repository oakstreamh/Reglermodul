
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000014ce  00001562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001a2  008001a2  00001604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001371  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00002add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001851  00000000  00000000  00003132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00004984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000109d7  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d38  00000000  00000000  000156e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0001641b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000037e7  00000000  00000000  00016533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c6       	rjmp	.+3544   	; 0xe22 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c7       	rjmp	.+3828   	; 0xf46 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	d1 c7       	rjmp	.+4002   	; 0xffc <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	74 c6       	rjmp	.+3304   	; 0xd5a <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ec       	ldi	r30, 0xCE	; 206
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3a       	cpi	r26, 0xA2	; 162
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a2 ea       	ldi	r26, 0xA2	; 162
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 36       	cpi	r26, 0x67	; 103
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d6 d6       	rcall	.+3500   	; 0xe70 <main>
      c4:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_steering>:
*/
void FLC_steering(c, s, v)
int c;
int s;
int v;
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c1 57       	subi	r28, 0x71	; 113
      f4:	d2 40       	sbci	r29, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	c1 59       	subi	r28, 0x91	; 145
     102:	dd 4f       	sbci	r29, 0xFD	; 253
     104:	99 83       	std	Y+1, r25	; 0x01
     106:	88 83       	st	Y, r24
     108:	cf 56       	subi	r28, 0x6F	; 111
     10a:	d2 40       	sbci	r29, 0x02	; 2
	// DECLARATION OF C INPUT
	struct io_type delta_C;
	strcpy(delta_C.name, "delta_C");
     10c:	88 e0       	ldi	r24, 0x08	; 8
     10e:	e0 e0       	ldi	r30, 0x00	; 0
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	de 01       	movw	r26, r28
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	01 90       	ld	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	8a 95       	dec	r24
     11c:	e1 f7       	brne	.-8      	; 0x116 <FLC_steering+0x4c>
	//MFs
	struct mf_type negative;
	strcpy(negative.name, "negative");
     11e:	ce 01       	movw	r24, r28
     120:	41 96       	adiw	r24, 0x11	; 17
     122:	29 e0       	ldi	r18, 0x09	; 9
     124:	e8 e0       	ldi	r30, 0x08	; 8
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	dc 01       	movw	r26, r24
     12a:	01 90       	ld	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	2a 95       	dec	r18
     130:	e1 f7       	brne	.-8      	; 0x12a <FLC_steering+0x60>
	negative.value = 0;
     132:	1c 8e       	std	Y+28, r1	; 0x1c
     134:	1b 8e       	std	Y+27, r1	; 0x1b
	negative.point1 = 44;
     136:	2c e2       	ldi	r18, 0x2C	; 44
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	3e 8f       	std	Y+30, r19	; 0x1e
     13c:	2d 8f       	std	Y+29, r18	; 0x1d
	negative.point2= 110;
     13e:	2e e6       	ldi	r18, 0x6E	; 110
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	38 a3       	std	Y+32, r19	; 0x20
     144:	2f 8f       	std	Y+31, r18	; 0x1f
	negative.slope1 = 100;
     146:	0f 2e       	mov	r0, r31
     148:	f4 e6       	ldi	r31, 0x64	; 100
     14a:	af 2e       	mov	r10, r31
     14c:	b1 2c       	mov	r11, r1
     14e:	f0 2d       	mov	r31, r0
     150:	ba a2       	std	Y+34, r11	; 0x22
     152:	a9 a2       	std	Y+33, r10	; 0x21
	negative.slope2 = 2;
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	3c a3       	std	Y+36, r19	; 0x24
     15a:	2b a3       	std	Y+35, r18	; 0x23
	struct mf_type zer;
	strcpy(zer.name, "zer");
     15c:	ae 01       	movw	r20, r28
     15e:	49 5d       	subi	r20, 0xD9	; 217
     160:	5f 4f       	sbci	r21, 0xFF	; 255
     162:	0f 2e       	mov	r0, r31
     164:	fa e7       	ldi	r31, 0x7A	; 122
     166:	cf 2e       	mov	r12, r31
     168:	f5 e6       	ldi	r31, 0x65	; 101
     16a:	df 2e       	mov	r13, r31
     16c:	f2 e7       	ldi	r31, 0x72	; 114
     16e:	ef 2e       	mov	r14, r31
     170:	f1 2c       	mov	r15, r1
     172:	f0 2d       	mov	r31, r0
     174:	cf a2       	std	Y+39, r12	; 0x27
     176:	d8 a6       	std	Y+40, r13	; 0x28
     178:	e9 a6       	std	Y+41, r14	; 0x29
     17a:	fa a6       	std	Y+42, r15	; 0x2a
	zer.value = 0;
     17c:	1a aa       	std	Y+50, r1	; 0x32
     17e:	19 aa       	std	Y+49, r1	; 0x31
	zer.point1 = 75;
     180:	6b e4       	ldi	r22, 0x4B	; 75
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	7c ab       	std	Y+52, r23	; 0x34
     186:	6b ab       	std	Y+51, r22	; 0x33
	zer.point2= 175;
     188:	6f ea       	ldi	r22, 0xAF	; 175
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	7e ab       	std	Y+54, r23	; 0x36
     18e:	6d ab       	std	Y+53, r22	; 0x35
	zer.slope1 = 50;
     190:	62 e3       	ldi	r22, 0x32	; 50
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	78 af       	std	Y+56, r23	; 0x38
     196:	6f ab       	std	Y+55, r22	; 0x37
	zer.slope2 = 50;
     198:	7a af       	std	Y+58, r23	; 0x3a
     19a:	69 af       	std	Y+57, r22	; 0x39
	struct mf_type positive;
	strcpy(positive.name, "positive");
     19c:	19 e0       	ldi	r17, 0x09	; 9
     19e:	e1 e1       	ldi	r30, 0x11	; 17
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	de 01       	movw	r26, r28
     1a4:	dd 96       	adiw	r26, 0x3d	; 61
     1a6:	01 90       	ld	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	1a 95       	dec	r17
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <FLC_steering+0xdc>
	positive.value = 0;
     1ae:	29 96       	adiw	r28, 0x09	; 9
     1b0:	1f ae       	std	Y+63, r1	; 0x3f
     1b2:	1e ae       	std	Y+62, r1	; 0x3e
     1b4:	29 97       	sbiw	r28, 0x09	; 9
	positive.point1 = 140;
     1b6:	ec e8       	ldi	r30, 0x8C	; 140
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	2b 96       	adiw	r28, 0x0b	; 11
     1bc:	ff af       	std	Y+63, r31	; 0x3f
     1be:	ee af       	std	Y+62, r30	; 0x3e
     1c0:	2b 97       	sbiw	r28, 0x0b	; 11
	positive.point2= 206;
     1c2:	ee ec       	ldi	r30, 0xCE	; 206
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	2d 96       	adiw	r28, 0x0d	; 13
     1c8:	ff af       	std	Y+63, r31	; 0x3f
     1ca:	ee af       	std	Y+62, r30	; 0x3e
     1cc:	2d 97       	sbiw	r28, 0x0d	; 13
	positive.slope1 = 2;
     1ce:	2f 96       	adiw	r28, 0x0f	; 15
     1d0:	3f af       	std	Y+63, r19	; 0x3f
     1d2:	2e af       	std	Y+62, r18	; 0x3e
     1d4:	2f 97       	sbiw	r28, 0x0f	; 15
	positive.slope2 = 100;
     1d6:	61 96       	adiw	r28, 0x11	; 17
     1d8:	bf ae       	std	Y+63, r11	; 0x3f
     1da:	ae ae       	std	Y+62, r10	; 0x3e
     1dc:	61 97       	sbiw	r28, 0x11	; 17

	delta_C.membership_functions = &negative;
     1de:	9e 87       	std	Y+14, r25	; 0x0e
     1e0:	8d 87       	std	Y+13, r24	; 0x0d
	negative.next = &zer;
     1e2:	5e a3       	std	Y+38, r21	; 0x26
     1e4:	4d a3       	std	Y+37, r20	; 0x25
	zer.next = &positive;
     1e6:	0d e3       	ldi	r16, 0x3D	; 61
     1e8:	10 e0       	ldi	r17, 0x00	; 0
     1ea:	0c 0f       	add	r16, r28
     1ec:	1d 1f       	adc	r17, r29
     1ee:	1c af       	std	Y+60, r17	; 0x3c
     1f0:	0b af       	std	Y+59, r16	; 0x3b
	positive.next = NULL;
     1f2:	63 96       	adiw	r28, 0x13	; 19
     1f4:	1f ae       	std	Y+63, r1	; 0x3f
     1f6:	1e ae       	std	Y+62, r1	; 0x3e
     1f8:	63 97       	sbiw	r28, 0x13	; 19
	
	// DECLARATION OF STEERING INPUT
	struct io_type steering;
	strcpy(steering.name, "steering");
     1fa:	89 e0       	ldi	r24, 0x09	; 9
     1fc:	ea e1       	ldi	r30, 0x1A	; 26
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	de 01       	movw	r26, r28
     202:	ad 5a       	subi	r26, 0xAD	; 173
     204:	bf 4f       	sbci	r27, 0xFF	; 255
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	8a 95       	dec	r24
     20c:	e1 f7       	brne	.-8      	; 0x206 <FLC_steering+0x13c>
	
	//MFs
	struct mf_type inShRight;
	strcpy(inShRight.name, "inShRight");
     20e:	6e 01       	movw	r12, r28
     210:	13 e6       	ldi	r17, 0x63	; 99
     212:	c1 0e       	add	r12, r17
     214:	d1 1c       	adc	r13, r1
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	ed e8       	ldi	r30, 0x8D	; 141
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	d6 01       	movw	r26, r12
     21e:	01 90       	ld	r0, Z+
     220:	0d 92       	st	X+, r0
     222:	8a 95       	dec	r24
     224:	e1 f7       	brne	.-8      	; 0x21e <FLC_steering+0x154>
	inShRight.value = 0;
     226:	d6 01       	movw	r26, r12
     228:	1b 96       	adiw	r26, 0x0b	; 11
     22a:	1c 92       	st	X, r1
     22c:	1e 92       	st	-X, r1
     22e:	1a 97       	sbiw	r26, 0x0a	; 10
	inShRight.point1 = 2259;
     230:	e3 ed       	ldi	r30, 0xD3	; 211
     232:	f8 e0       	ldi	r31, 0x08	; 8
     234:	1d 96       	adiw	r26, 0x0d	; 13
     236:	fc 93       	st	X, r31
     238:	ee 93       	st	-X, r30
     23a:	1c 97       	sbiw	r26, 0x0c	; 12
	inShRight.point2= 2400;
     23c:	0f 2e       	mov	r0, r31
     23e:	f0 e6       	ldi	r31, 0x60	; 96
     240:	2f 2e       	mov	r2, r31
     242:	f9 e0       	ldi	r31, 0x09	; 9
     244:	3f 2e       	mov	r3, r31
     246:	f0 2d       	mov	r31, r0
     248:	1f 96       	adiw	r26, 0x0f	; 15
     24a:	3c 92       	st	X, r3
     24c:	2e 92       	st	-X, r2
     24e:	1e 97       	sbiw	r26, 0x0e	; 14
	inShRight.slope1 = 100;
     250:	51 96       	adiw	r26, 0x11	; 17
     252:	bc 92       	st	X, r11
     254:	ae 92       	st	-X, r10
     256:	50 97       	sbiw	r26, 0x10	; 16
	inShRight.slope2 = 1;
     258:	21 e0       	ldi	r18, 0x01	; 1
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	53 96       	adiw	r26, 0x13	; 19
     25e:	3c 93       	st	X, r19
     260:	2e 93       	st	-X, r18
     262:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type right;
	strcpy(right.name, "right");
     264:	7e 01       	movw	r14, r28
     266:	f9 e7       	ldi	r31, 0x79	; 121
     268:	ef 0e       	add	r14, r31
     26a:	f1 1c       	adc	r15, r1
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	e7 e8       	ldi	r30, 0x87	; 135
     270:	f1 e0       	ldi	r31, 0x01	; 1
     272:	d7 01       	movw	r26, r14
     274:	01 90       	ld	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	8a 95       	dec	r24
     27a:	e1 f7       	brne	.-8      	; 0x274 <FLC_steering+0x1aa>
	right.value = 0;
     27c:	d7 01       	movw	r26, r14
     27e:	1b 96       	adiw	r26, 0x0b	; 11
     280:	1c 92       	st	X, r1
     282:	1e 92       	st	-X, r1
     284:	1a 97       	sbiw	r26, 0x0a	; 10
	right.point1 = 2300;
     286:	8c ef       	ldi	r24, 0xFC	; 252
     288:	98 e0       	ldi	r25, 0x08	; 8
     28a:	1d 96       	adiw	r26, 0x0d	; 13
     28c:	9c 93       	st	X, r25
     28e:	8e 93       	st	-X, r24
     290:	1c 97       	sbiw	r26, 0x0c	; 12
	right.point2= 2580;
     292:	84 e1       	ldi	r24, 0x14	; 20
     294:	9a e0       	ldi	r25, 0x0A	; 10
     296:	1f 96       	adiw	r26, 0x0f	; 15
     298:	9c 93       	st	X, r25
     29a:	8e 93       	st	-X, r24
     29c:	1e 97       	sbiw	r26, 0x0e	; 14
	right.slope1 = 1;
     29e:	51 96       	adiw	r26, 0x11	; 17
     2a0:	3c 93       	st	X, r19
     2a2:	2e 93       	st	-X, r18
     2a4:	50 97       	sbiw	r26, 0x10	; 16
	right.slope2 = 1;
     2a6:	53 96       	adiw	r26, 0x13	; 19
     2a8:	3c 93       	st	X, r19
     2aa:	2e 93       	st	-X, r18
     2ac:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inStraight;
	strcpy(inStraight.name, "inStraight");
     2ae:	8e 01       	movw	r16, r28
     2b0:	01 57       	subi	r16, 0x71	; 113
     2b2:	1f 4f       	sbci	r17, 0xFF	; 255
     2b4:	8b e0       	ldi	r24, 0x0B	; 11
     2b6:	e3 e2       	ldi	r30, 0x23	; 35
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	d8 01       	movw	r26, r16
     2bc:	01 90       	ld	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	8a 95       	dec	r24
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <FLC_steering+0x1f2>
	inStraight.value = 0;
     2c4:	f8 01       	movw	r30, r16
     2c6:	13 86       	std	Z+11, r1	; 0x0b
     2c8:	12 86       	std	Z+10, r1	; 0x0a
	inStraight.point1 = 2480;
     2ca:	80 eb       	ldi	r24, 0xB0	; 176
     2cc:	99 e0       	ldi	r25, 0x09	; 9
     2ce:	95 87       	std	Z+13, r25	; 0x0d
     2d0:	84 87       	std	Z+12, r24	; 0x0c
	inStraight.point2= 2840;
     2d2:	a8 e1       	ldi	r26, 0x18	; 24
     2d4:	bb e0       	ldi	r27, 0x0B	; 11
     2d6:	b7 87       	std	Z+15, r27	; 0x0f
     2d8:	a6 87       	std	Z+14, r26	; 0x0e
	inStraight.slope1 = 1;
     2da:	31 8b       	std	Z+17, r19	; 0x11
     2dc:	20 8b       	std	Z+16, r18	; 0x10
	inStraight.slope2 = 1;
     2de:	33 8b       	std	Z+19, r19	; 0x13
     2e0:	22 8b       	std	Z+18, r18	; 0x12

	struct mf_type inLeft;
	strcpy(inLeft.name, "inLeft");
     2e2:	42 58       	subi	r20, 0x82	; 130
     2e4:	5f 4f       	sbci	r21, 0xFF	; 255
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	ee e2       	ldi	r30, 0x2E	; 46
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	da 01       	movw	r26, r20
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	8a 95       	dec	r24
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <FLC_steering+0x224>
	inLeft.value = 0;
     2f6:	fa 01       	movw	r30, r20
     2f8:	13 86       	std	Z+11, r1	; 0x0b
     2fa:	12 86       	std	Z+10, r1	; 0x0a
	inLeft.point1 = 2740;
     2fc:	84 eb       	ldi	r24, 0xB4	; 180
     2fe:	9a e0       	ldi	r25, 0x0A	; 10
     300:	95 87       	std	Z+13, r25	; 0x0d
     302:	84 87       	std	Z+12, r24	; 0x0c
	inLeft.point2= 3020;
     304:	8c ec       	ldi	r24, 0xCC	; 204
     306:	9b e0       	ldi	r25, 0x0B	; 11
     308:	97 87       	std	Z+15, r25	; 0x0f
     30a:	86 87       	std	Z+14, r24	; 0x0e
	inLeft.slope1 = 1;
     30c:	31 8b       	std	Z+17, r19	; 0x11
     30e:	20 8b       	std	Z+16, r18	; 0x10
	inLeft.slope2 = 1;
     310:	33 8b       	std	Z+19, r19	; 0x13
     312:	22 8b       	std	Z+18, r18	; 0x12
	
	struct mf_type inShLeft;
	strcpy(inShLeft.name, "inShLeft");
     314:	ce 01       	movw	r24, r28
     316:	85 54       	subi	r24, 0x45	; 69
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	0f 2e       	mov	r0, r31
     31c:	f9 e0       	ldi	r31, 0x09	; 9
     31e:	9f 2e       	mov	r9, r31
     320:	f0 2d       	mov	r31, r0
     322:	e5 e3       	ldi	r30, 0x35	; 53
     324:	f1 e0       	ldi	r31, 0x01	; 1
     326:	dc 01       	movw	r26, r24
     328:	01 90       	ld	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	9a 94       	dec	r9
     32e:	e1 f7       	brne	.-8      	; 0x328 <FLC_steering+0x25e>
	inShLeft.value = 0;
     330:	dc 01       	movw	r26, r24
     332:	1b 96       	adiw	r26, 0x0b	; 11
     334:	1c 92       	st	X, r1
     336:	1e 92       	st	-X, r1
     338:	1a 97       	sbiw	r26, 0x0a	; 10
	inShLeft.point1 = 2920;
     33a:	e8 e6       	ldi	r30, 0x68	; 104
     33c:	fb e0       	ldi	r31, 0x0B	; 11
     33e:	1d 96       	adiw	r26, 0x0d	; 13
     340:	fc 93       	st	X, r31
     342:	ee 93       	st	-X, r30
     344:	1c 97       	sbiw	r26, 0x0c	; 12
	inShLeft.point2= 3061;
     346:	0f 2e       	mov	r0, r31
     348:	f5 ef       	ldi	r31, 0xF5	; 245
     34a:	8f 2e       	mov	r8, r31
     34c:	fb e0       	ldi	r31, 0x0B	; 11
     34e:	9f 2e       	mov	r9, r31
     350:	f0 2d       	mov	r31, r0
     352:	1f 96       	adiw	r26, 0x0f	; 15
     354:	9c 92       	st	X, r9
     356:	8e 92       	st	-X, r8
     358:	1e 97       	sbiw	r26, 0x0e	; 14
	inShLeft.slope1 = 1;
     35a:	51 96       	adiw	r26, 0x11	; 17
     35c:	3c 93       	st	X, r19
     35e:	2e 93       	st	-X, r18
     360:	50 97       	sbiw	r26, 0x10	; 16
	inShLeft.slope2 = 100;
     362:	53 96       	adiw	r26, 0x13	; 19
     364:	bc 92       	st	X, r11
     366:	ae 92       	st	-X, r10
     368:	52 97       	sbiw	r26, 0x12	; 18

	steering.membership_functions = &inShRight;
     36a:	a1 96       	adiw	r28, 0x21	; 33
     36c:	df ae       	std	Y+63, r13	; 0x3f
     36e:	ce ae       	std	Y+62, r12	; 0x3e
     370:	a1 97       	sbiw	r28, 0x21	; 33
	inShRight.next = &right;
     372:	d6 01       	movw	r26, r12
     374:	55 96       	adiw	r26, 0x15	; 21
     376:	fc 92       	st	X, r15
     378:	ee 92       	st	-X, r14
     37a:	54 97       	sbiw	r26, 0x14	; 20
	right.next = &inStraight;
     37c:	f7 01       	movw	r30, r14
     37e:	15 8b       	std	Z+21, r17	; 0x15
     380:	04 8b       	std	Z+20, r16	; 0x14
	inStraight.next = &inLeft;
     382:	d8 01       	movw	r26, r16
     384:	55 96       	adiw	r26, 0x15	; 21
     386:	5c 93       	st	X, r21
     388:	4e 93       	st	-X, r20
     38a:	54 97       	sbiw	r26, 0x14	; 20
	inLeft.next = &inShLeft;
     38c:	fa 01       	movw	r30, r20
     38e:	95 8b       	std	Z+21, r25	; 0x15
     390:	84 8b       	std	Z+20, r24	; 0x14
	inShLeft.next = NULL;
     392:	dc 01       	movw	r26, r24
     394:	55 96       	adiw	r26, 0x15	; 21
     396:	1c 92       	st	X, r1
     398:	1e 92       	st	-X, r1
     39a:	54 97       	sbiw	r26, 0x14	; 20
	
	
	// DECLARATION OF V INPUT
	struct io_type delta_V;
	strcpy(delta_V.name, "delta_V");
     39c:	88 e0       	ldi	r24, 0x08	; 8
     39e:	ee e3       	ldi	r30, 0x3E	; 62
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	56 96       	adiw	r26, 0x16	; 22
     3a4:	01 90       	ld	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	8a 95       	dec	r24
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <FLC_steering+0x2da>

	//MFs
	struct mf_type small;
	strcpy(small.name, "small");
     3ac:	2e 01       	movw	r4, r28
     3ae:	b1 ee       	ldi	r27, 0xE1	; 225
     3b0:	4b 0e       	add	r4, r27
     3b2:	51 1c       	adc	r5, r1
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	e6 e4       	ldi	r30, 0x46	; 70
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	d2 01       	movw	r26, r4
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <FLC_steering+0x2f2>
	small.value = 0;
     3c4:	f2 01       	movw	r30, r4
     3c6:	13 86       	std	Z+11, r1	; 0x0b
     3c8:	12 86       	std	Z+10, r1	; 0x0a
	small.point1 = -1;
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
     3ce:	95 87       	std	Z+13, r25	; 0x0d
     3d0:	84 87       	std	Z+12, r24	; 0x0c
	small.point2= 30;
     3d2:	8e e1       	ldi	r24, 0x1E	; 30
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	97 87       	std	Z+15, r25	; 0x0f
     3d8:	86 87       	std	Z+14, r24	; 0x0e
	small.slope1 = 100;
     3da:	b1 8a       	std	Z+17, r11	; 0x11
     3dc:	a0 8a       	std	Z+16, r10	; 0x10
	small.slope2 = 5;
     3de:	85 e0       	ldi	r24, 0x05	; 5
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	93 8b       	std	Z+19, r25	; 0x13
     3e4:	82 8b       	std	Z+18, r24	; 0x12
	struct mf_type medium;
	strcpy(medium.name, "medium");
     3e6:	7e 01       	movw	r14, r28
     3e8:	f7 ef       	ldi	r31, 0xF7	; 247
     3ea:	ef 0e       	add	r14, r31
     3ec:	f1 1c       	adc	r15, r1
     3ee:	47 e0       	ldi	r20, 0x07	; 7
     3f0:	ec e4       	ldi	r30, 0x4C	; 76
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	d7 01       	movw	r26, r14
     3f6:	01 90       	ld	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	4a 95       	dec	r20
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <FLC_steering+0x32c>
	medium.value = 0;
     3fe:	d7 01       	movw	r26, r14
     400:	1b 96       	adiw	r26, 0x0b	; 11
     402:	1c 92       	st	X, r1
     404:	1e 92       	st	-X, r1
     406:	1a 97       	sbiw	r26, 0x0a	; 10
	medium.point1 = 20;
     408:	44 e1       	ldi	r20, 0x14	; 20
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	1d 96       	adiw	r26, 0x0d	; 13
     40e:	5c 93       	st	X, r21
     410:	4e 93       	st	-X, r20
     412:	1c 97       	sbiw	r26, 0x0c	; 12
	medium.point2= 60;
     414:	4c e3       	ldi	r20, 0x3C	; 60
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	1f 96       	adiw	r26, 0x0f	; 15
     41a:	5c 93       	st	X, r21
     41c:	4e 93       	st	-X, r20
     41e:	1e 97       	sbiw	r26, 0x0e	; 14
	medium.slope1 = 5;
     420:	51 96       	adiw	r26, 0x11	; 17
     422:	9c 93       	st	X, r25
     424:	8e 93       	st	-X, r24
     426:	50 97       	sbiw	r26, 0x10	; 16
	medium.slope2 = 5;
     428:	53 96       	adiw	r26, 0x13	; 19
     42a:	9c 93       	st	X, r25
     42c:	8e 93       	st	-X, r24
     42e:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type high;
	strcpy(high.name, "high");
     430:	ae 01       	movw	r20, r28
     432:	43 5f       	subi	r20, 0xF3	; 243
     434:	5e 4f       	sbci	r21, 0xFE	; 254
     436:	15 e0       	ldi	r17, 0x05	; 5
     438:	e3 e5       	ldi	r30, 0x53	; 83
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	da 01       	movw	r26, r20
     43e:	01 90       	ld	r0, Z+
     440:	0d 92       	st	X+, r0
     442:	1a 95       	dec	r17
     444:	e1 f7       	brne	.-8      	; 0x43e <FLC_steering+0x374>
	high.value = 0;
     446:	fa 01       	movw	r30, r20
     448:	13 86       	std	Z+11, r1	; 0x0b
     44a:	12 86       	std	Z+10, r1	; 0x0a
	high.point1 = 50;
     44c:	75 87       	std	Z+13, r23	; 0x0d
     44e:	64 87       	std	Z+12, r22	; 0x0c
	high.point2= 81;
     450:	61 e5       	ldi	r22, 0x51	; 81
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	77 87       	std	Z+15, r23	; 0x0f
     456:	66 87       	std	Z+14, r22	; 0x0e
	high.slope1 = 5;
     458:	91 8b       	std	Z+17, r25	; 0x11
     45a:	80 8b       	std	Z+16, r24	; 0x10
	high.slope2 = 100;
     45c:	b3 8a       	std	Z+19, r11	; 0x13
     45e:	a2 8a       	std	Z+18, r10	; 0x12

	delta_V.membership_functions = &small;
     460:	c3 52       	subi	r28, 0x23	; 35
     462:	df 4f       	sbci	r29, 0xFF	; 255
     464:	59 82       	std	Y+1, r5	; 0x01
     466:	48 82       	st	Y, r4
     468:	cd 5d       	subi	r28, 0xDD	; 221
     46a:	d0 40       	sbci	r29, 0x00	; 0
	small.next = &medium;
     46c:	d2 01       	movw	r26, r4
     46e:	55 96       	adiw	r26, 0x15	; 21
     470:	fc 92       	st	X, r15
     472:	ee 92       	st	-X, r14
     474:	54 97       	sbiw	r26, 0x14	; 20
	medium.next = &high;
     476:	f7 01       	movw	r30, r14
     478:	55 8b       	std	Z+21, r21	; 0x15
     47a:	44 8b       	std	Z+20, r20	; 0x14
	high.next = NULL;
     47c:	da 01       	movw	r26, r20
     47e:	55 96       	adiw	r26, 0x15	; 21
     480:	1c 92       	st	X, r1
     482:	1e 92       	st	-X, r1
     484:	54 97       	sbiw	r26, 0x14	; 20
	
	// DECLARATION OF STEERING SERVO OUTPUT

	struct io_type servo;
	strcpy(servo.name, "servo");
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	e8 e5       	ldi	r30, 0x58	; 88
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	56 96       	adiw	r26, 0x16	; 22
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	8a 95       	dec	r24
     494:	e1 f7       	brne	.-8      	; 0x48e <FLC_steering+0x3c4>

	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     496:	3e 01       	movw	r6, r28
     498:	bd ec       	ldi	r27, 0xCD	; 205
     49a:	6b 1a       	sub	r6, r27
     49c:	be ef       	ldi	r27, 0xFE	; 254
     49e:	7b 0a       	sbc	r7, r27
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	ee e5       	ldi	r30, 0x5E	; 94
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	d3 01       	movw	r26, r6
     4a8:	01 90       	ld	r0, Z+
     4aa:	0d 92       	st	X+, r0
     4ac:	8a 95       	dec	r24
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <FLC_steering+0x3de>
	oShLeft.value = 0;
     4b0:	f3 01       	movw	r30, r6
     4b2:	13 86       	std	Z+11, r1	; 0x0b
     4b4:	12 86       	std	Z+10, r1	; 0x0a
	oShLeft.point1 = 2950;
     4b6:	86 e8       	ldi	r24, 0x86	; 134
     4b8:	9b e0       	ldi	r25, 0x0B	; 11
     4ba:	95 87       	std	Z+13, r25	; 0x0d
     4bc:	84 87       	std	Z+12, r24	; 0x0c
	oShLeft.point2 = 3061;
     4be:	97 86       	std	Z+15, r9	; 0x0f
     4c0:	86 86       	std	Z+14, r8	; 0x0e
	oShLeft.slope1 = 1;
     4c2:	31 8b       	std	Z+17, r19	; 0x11
     4c4:	20 8b       	std	Z+16, r18	; 0x10
	oShLeft.slope2 = 100;
     4c6:	b3 8a       	std	Z+19, r11	; 0x13
     4c8:	a2 8a       	std	Z+18, r10	; 0x12
	oShLeft.next = NULL;
     4ca:	15 8a       	std	Z+21, r1	; 0x15
     4cc:	14 8a       	std	Z+20, r1	; 0x14
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     4ce:	ce 01       	movw	r24, r28
     4d0:	87 5b       	subi	r24, 0xB7	; 183
     4d2:	9e 4f       	sbci	r25, 0xFE	; 254
     4d4:	66 e0       	ldi	r22, 0x06	; 6
     4d6:	e6 e6       	ldi	r30, 0x66	; 102
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	dc 01       	movw	r26, r24
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	6a 95       	dec	r22
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <FLC_steering+0x412>
	oLeft.value = 0;
     4e4:	dc 01       	movw	r26, r24
     4e6:	1b 96       	adiw	r26, 0x0b	; 11
     4e8:	1c 92       	st	X, r1
     4ea:	1e 92       	st	-X, r1
     4ec:	1a 97       	sbiw	r26, 0x0a	; 10
	oLeft.point1 = 2840;
     4ee:	e8 e1       	ldi	r30, 0x18	; 24
     4f0:	fb e0       	ldi	r31, 0x0B	; 11
     4f2:	1d 96       	adiw	r26, 0x0d	; 13
     4f4:	fc 93       	st	X, r31
     4f6:	ee 93       	st	-X, r30
     4f8:	1c 97       	sbiw	r26, 0x0c	; 12
	oLeft.point2 = 3050;
     4fa:	6a ee       	ldi	r22, 0xEA	; 234
     4fc:	7b e0       	ldi	r23, 0x0B	; 11
     4fe:	1f 96       	adiw	r26, 0x0f	; 15
     500:	7c 93       	st	X, r23
     502:	6e 93       	st	-X, r22
     504:	1e 97       	sbiw	r26, 0x0e	; 14
	oLeft.slope1 = 1;
     506:	51 96       	adiw	r26, 0x11	; 17
     508:	3c 93       	st	X, r19
     50a:	2e 93       	st	-X, r18
     50c:	50 97       	sbiw	r26, 0x10	; 16
	oLeft.slope2 = 1;
     50e:	53 96       	adiw	r26, 0x13	; 19
     510:	3c 93       	st	X, r19
     512:	2e 93       	st	-X, r18
     514:	52 97       	sbiw	r26, 0x12	; 18
	oLeft.next = &oShLeft;
     516:	55 96       	adiw	r26, 0x15	; 21
     518:	7c 92       	st	X, r7
     51a:	6e 92       	st	-X, r6
     51c:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     51e:	4e 01       	movw	r8, r28
     520:	f1 ea       	ldi	r31, 0xA1	; 161
     522:	8f 1a       	sub	r8, r31
     524:	fe ef       	ldi	r31, 0xFE	; 254
     526:	9f 0a       	sbc	r9, r31
     528:	68 e0       	ldi	r22, 0x08	; 8
     52a:	ec e6       	ldi	r30, 0x6C	; 108
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	d4 01       	movw	r26, r8
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	6a 95       	dec	r22
     536:	e1 f7       	brne	.-8      	; 0x530 <FLC_steering+0x466>
	oSlLeft.value = 0;
     538:	d4 01       	movw	r26, r8
     53a:	1b 96       	adiw	r26, 0x0b	; 11
     53c:	1c 92       	st	X, r1
     53e:	1e 92       	st	-X, r1
     540:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlLeft.point1 = 2670;
     542:	6e e6       	ldi	r22, 0x6E	; 110
     544:	7a e0       	ldi	r23, 0x0A	; 10
     546:	1d 96       	adiw	r26, 0x0d	; 13
     548:	7c 93       	st	X, r23
     54a:	6e 93       	st	-X, r22
     54c:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlLeft.point2 = 2920;
     54e:	e8 e6       	ldi	r30, 0x68	; 104
     550:	fb e0       	ldi	r31, 0x0B	; 11
     552:	1f 96       	adiw	r26, 0x0f	; 15
     554:	fc 93       	st	X, r31
     556:	ee 93       	st	-X, r30
     558:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlLeft.slope1 = 1;
     55a:	51 96       	adiw	r26, 0x11	; 17
     55c:	3c 93       	st	X, r19
     55e:	2e 93       	st	-X, r18
     560:	50 97       	sbiw	r26, 0x10	; 16
	oSlLeft.slope2 = 1;
     562:	53 96       	adiw	r26, 0x13	; 19
     564:	3c 93       	st	X, r19
     566:	2e 93       	st	-X, r18
     568:	52 97       	sbiw	r26, 0x12	; 18
	oSlLeft.next = &oLeft;
     56a:	55 96       	adiw	r26, 0x15	; 21
     56c:	9c 93       	st	X, r25
     56e:	8e 93       	st	-X, r24
     570:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     572:	8c 96       	adiw	r24, 0x2c	; 44
     574:	6a e0       	ldi	r22, 0x0A	; 10
     576:	e7 e9       	ldi	r30, 0x97	; 151
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	dc 01       	movw	r26, r24
     57c:	01 90       	ld	r0, Z+
     57e:	0d 92       	st	X+, r0
     580:	6a 95       	dec	r22
     582:	e1 f7       	brne	.-8      	; 0x57c <FLC_steering+0x4b2>
	oStraight.value = 0;
     584:	dc 01       	movw	r26, r24
     586:	1b 96       	adiw	r26, 0x0b	; 11
     588:	1c 92       	st	X, r1
     58a:	1e 92       	st	-X, r1
     58c:	1a 97       	sbiw	r26, 0x0a	; 10
	oStraight.point1 = 2540;
     58e:	6c ee       	ldi	r22, 0xEC	; 236
     590:	79 e0       	ldi	r23, 0x09	; 9
     592:	1d 96       	adiw	r26, 0x0d	; 13
     594:	7c 93       	st	X, r23
     596:	6e 93       	st	-X, r22
     598:	1c 97       	sbiw	r26, 0x0c	; 12
	oStraight.point2 = 2780;
     59a:	6c ed       	ldi	r22, 0xDC	; 220
     59c:	7a e0       	ldi	r23, 0x0A	; 10
     59e:	1f 96       	adiw	r26, 0x0f	; 15
     5a0:	7c 93       	st	X, r23
     5a2:	6e 93       	st	-X, r22
     5a4:	1e 97       	sbiw	r26, 0x0e	; 14
	oStraight.slope1 = 1;
     5a6:	51 96       	adiw	r26, 0x11	; 17
     5a8:	3c 93       	st	X, r19
     5aa:	2e 93       	st	-X, r18
     5ac:	50 97       	sbiw	r26, 0x10	; 16
	oStraight.slope2 = 1;
     5ae:	53 96       	adiw	r26, 0x13	; 19
     5b0:	3c 93       	st	X, r19
     5b2:	2e 93       	st	-X, r18
     5b4:	52 97       	sbiw	r26, 0x12	; 18
	oStraight.next = &oSlLeft;
     5b6:	55 96       	adiw	r26, 0x15	; 21
     5b8:	9c 92       	st	X, r9
     5ba:	8e 92       	st	-X, r8
     5bc:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     5be:	8e 01       	movw	r16, r28
     5c0:	05 57       	subi	r16, 0x75	; 117
     5c2:	1e 4f       	sbci	r17, 0xFE	; 254
     5c4:	69 e0       	ldi	r22, 0x09	; 9
     5c6:	e4 e7       	ldi	r30, 0x74	; 116
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	d8 01       	movw	r26, r16
     5cc:	01 90       	ld	r0, Z+
     5ce:	0d 92       	st	X+, r0
     5d0:	6a 95       	dec	r22
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <FLC_steering+0x502>
	oSlRight.value = 0;
     5d4:	f8 01       	movw	r30, r16
     5d6:	13 86       	std	Z+11, r1	; 0x0b
     5d8:	12 86       	std	Z+10, r1	; 0x0a
	oSlRight.point1 = 2400;
     5da:	35 86       	std	Z+13, r3	; 0x0d
     5dc:	24 86       	std	Z+12, r2	; 0x0c
	oSlRight.point2 = 2650;
     5de:	6a e5       	ldi	r22, 0x5A	; 90
     5e0:	7a e0       	ldi	r23, 0x0A	; 10
     5e2:	77 87       	std	Z+15, r23	; 0x0f
     5e4:	66 87       	std	Z+14, r22	; 0x0e
	oSlRight.slope1 = 1;
     5e6:	31 8b       	std	Z+17, r19	; 0x11
     5e8:	20 8b       	std	Z+16, r18	; 0x10
	oSlRight.slope2 = 1;
     5ea:	33 8b       	std	Z+19, r19	; 0x13
     5ec:	22 8b       	std	Z+18, r18	; 0x12
	oSlRight.next = &oStraight;
     5ee:	95 8b       	std	Z+21, r25	; 0x15
     5f0:	84 8b       	std	Z+20, r24	; 0x14
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     5f2:	be 01       	movw	r22, r28
     5f4:	6f 55       	subi	r22, 0x5F	; 95
     5f6:	7e 4f       	sbci	r23, 0xFE	; 254
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f7 e0       	ldi	r31, 0x07	; 7
     5fc:	df 2e       	mov	r13, r31
     5fe:	f0 2d       	mov	r31, r0
     600:	ed e7       	ldi	r30, 0x7D	; 125
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	db 01       	movw	r26, r22
     606:	01 90       	ld	r0, Z+
     608:	0d 92       	st	X+, r0
     60a:	da 94       	dec	r13
     60c:	e1 f7       	brne	.-8      	; 0x606 <FLC_steering+0x53c>
	oRight.value = 0;
     60e:	db 01       	movw	r26, r22
     610:	1b 96       	adiw	r26, 0x0b	; 11
     612:	1c 92       	st	X, r1
     614:	1e 92       	st	-X, r1
     616:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     618:	ee ed       	ldi	r30, 0xDE	; 222
     61a:	f8 e0       	ldi	r31, 0x08	; 8
     61c:	1d 96       	adiw	r26, 0x0d	; 13
     61e:	fc 93       	st	X, r31
     620:	ee 93       	st	-X, r30
     622:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     624:	e0 eb       	ldi	r30, 0xB0	; 176
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	1f 96       	adiw	r26, 0x0f	; 15
     62a:	fc 93       	st	X, r31
     62c:	ee 93       	st	-X, r30
     62e:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     630:	51 96       	adiw	r26, 0x11	; 17
     632:	3c 93       	st	X, r19
     634:	2e 93       	st	-X, r18
     636:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     638:	53 96       	adiw	r26, 0x13	; 19
     63a:	3c 93       	st	X, r19
     63c:	2e 93       	st	-X, r18
     63e:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     640:	55 96       	adiw	r26, 0x15	; 21
     642:	1c 93       	st	X, r17
     644:	0e 93       	st	-X, r16
     646:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     648:	6e 01       	movw	r12, r28
     64a:	f9 e4       	ldi	r31, 0x49	; 73
     64c:	cf 1a       	sub	r12, r31
     64e:	fe ef       	ldi	r31, 0xFE	; 254
     650:	df 0a       	sbc	r13, r31
     652:	0f 2e       	mov	r0, r31
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	2f 2e       	mov	r2, r31
     658:	f0 2d       	mov	r31, r0
     65a:	e4 e8       	ldi	r30, 0x84	; 132
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	d6 01       	movw	r26, r12
     660:	01 90       	ld	r0, Z+
     662:	0d 92       	st	X+, r0
     664:	2a 94       	dec	r2
     666:	e1 f7       	brne	.-8      	; 0x660 <FLC_steering+0x596>
	oShright.value = 0;
     668:	d6 01       	movw	r26, r12
     66a:	1b 96       	adiw	r26, 0x0b	; 11
     66c:	1c 92       	st	X, r1
     66e:	1e 92       	st	-X, r1
     670:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     672:	e3 ed       	ldi	r30, 0xD3	; 211
     674:	f8 e0       	ldi	r31, 0x08	; 8
     676:	1d 96       	adiw	r26, 0x0d	; 13
     678:	fc 93       	st	X, r31
     67a:	ee 93       	st	-X, r30
     67c:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     67e:	e2 e4       	ldi	r30, 0x42	; 66
     680:	f9 e0       	ldi	r31, 0x09	; 9
     682:	1f 96       	adiw	r26, 0x0f	; 15
     684:	fc 93       	st	X, r31
     686:	ee 93       	st	-X, r30
     688:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     68a:	51 96       	adiw	r26, 0x11	; 17
     68c:	bc 92       	st	X, r11
     68e:	ae 92       	st	-X, r10
     690:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     692:	53 96       	adiw	r26, 0x13	; 19
     694:	3c 93       	st	X, r19
     696:	2e 93       	st	-X, r18
     698:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     69a:	55 96       	adiw	r26, 0x15	; 21
     69c:	7c 93       	st	X, r23
     69e:	6e 93       	st	-X, r22
     6a0:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     6a2:	c1 5d       	subi	r28, 0xD1	; 209
     6a4:	de 4f       	sbci	r29, 0xFE	; 254
     6a6:	d9 82       	std	Y+1, r13	; 0x01
     6a8:	c8 82       	st	Y, r12
     6aa:	cf 52       	subi	r28, 0x2F	; 47
     6ac:	d1 40       	sbci	r29, 0x01	; 1
	servo.next = NULL;
     6ae:	cf 5c       	subi	r28, 0xCF	; 207
     6b0:	de 4f       	sbci	r29, 0xFE	; 254
     6b2:	19 82       	std	Y+1, r1	; 0x01
     6b4:	18 82       	st	Y, r1
     6b6:	c1 53       	subi	r28, 0x31	; 49
     6b8:	d1 40       	sbci	r29, 0x01	; 1
	*/

	
	/* rule # 9: if C is zero and V is high then servo is slightLeft */
		struct rule_element_type then9;
		then9.value = &oSlLeft.value;
     6ba:	9e 01       	movw	r18, r28
     6bc:	23 53       	subi	r18, 0x33	; 51
     6be:	3e 4f       	sbci	r19, 0xFE	; 254
     6c0:	fa e0       	ldi	r31, 0x0A	; 10
     6c2:	8f 0e       	add	r8, r31
     6c4:	91 1c       	adc	r9, r1
     6c6:	d9 01       	movw	r26, r18
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	9c 92       	st	X, r9
     6cc:	8e 92       	st	-X, r8
		then9.next = NULL;
     6ce:	13 96       	adiw	r26, 0x03	; 3
     6d0:	1c 92       	st	X, r1
     6d2:	1e 92       	st	-X, r1
     6d4:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if92;
		if92.value = &high.value;
     6d6:	fe 01       	movw	r30, r28
     6d8:	ef 52       	subi	r30, 0x2F	; 47
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	46 5f       	subi	r20, 0xF6	; 246
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	51 83       	std	Z+1, r21	; 0x01
     6e2:	40 83       	st	Z, r20
		if92.next = NULL;
     6e4:	13 82       	std	Z+3, r1	; 0x03
     6e6:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if91;
		if91.value = &zer.value;
     6e8:	18 96       	adiw	r26, 0x08	; 8
     6ea:	5e 01       	movw	r10, r28
     6ec:	61 e3       	ldi	r22, 0x31	; 49
     6ee:	a6 0e       	add	r10, r22
     6f0:	b1 1c       	adc	r11, r1
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	bc 92       	st	X, r11
     6f6:	ae 92       	st	-X, r10
		if91.next = &if92;
     6f8:	13 96       	adiw	r26, 0x03	; 3
     6fa:	fc 93       	st	X, r31
     6fc:	ee 93       	st	-X, r30
     6fe:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule9;
		rule9.if_side = &if91;
     700:	38 96       	adiw	r30, 0x08	; 8
     702:	b1 83       	std	Z+1, r27	; 0x01
     704:	a0 83       	st	Z, r26
		rule9.then_side = &then9;
     706:	33 83       	std	Z+3, r19	; 0x03
     708:	22 83       	std	Z+2, r18	; 0x02
		rule9.next = NULL;
     70a:	15 82       	std	Z+5, r1	; 0x05
     70c:	14 82       	std	Z+4, r1	; 0x04
		
		/* rule # 8: if positive and V is high then servo is slightRight */
		struct rule_element_type then8;
		then8.value = &oSlRight.value;
     70e:	2e 5e       	subi	r18, 0xEE	; 238
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	18 01       	movw	r2, r16
     714:	7a e0       	ldi	r23, 0x0A	; 10
     716:	27 0e       	add	r2, r23
     718:	31 1c       	adc	r3, r1
     71a:	d9 01       	movw	r26, r18
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	3c 92       	st	X, r3
     720:	2e 92       	st	-X, r2
		then8.next = NULL;
     722:	13 96       	adiw	r26, 0x03	; 3
     724:	1c 92       	st	X, r1
     726:	1e 92       	st	-X, r1
     728:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if82;
		if82.value = &high.value;
     72a:	08 5a       	subi	r16, 0xA8	; 168
     72c:	1f 4f       	sbci	r17, 0xFF	; 255
     72e:	d8 01       	movw	r26, r16
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	5c 93       	st	X, r21
     734:	4e 93       	st	-X, r20
		if82.next = NULL;
     736:	13 96       	adiw	r26, 0x03	; 3
     738:	1c 92       	st	X, r1
     73a:	1e 92       	st	-X, r1
     73c:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if81;
		if81.value = &positive.value;
     73e:	be 01       	movw	r22, r28
     740:	69 51       	subi	r22, 0x19	; 25
     742:	7e 4f       	sbci	r23, 0xFE	; 254
     744:	4d e3       	ldi	r20, 0x3D	; 61
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	4c 0f       	add	r20, r28
     74a:	5d 1f       	adc	r21, r29
     74c:	46 5f       	subi	r20, 0xF6	; 246
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	db 01       	movw	r26, r22
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	5c 93       	st	X, r21
     756:	4e 93       	st	-X, r20
		if81.next = &if82;
     758:	13 96       	adiw	r26, 0x03	; 3
     75a:	1c 93       	st	X, r17
     75c:	0e 93       	st	-X, r16
     75e:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule8;
		rule8.if_side = &if81;
     760:	14 96       	adiw	r26, 0x04	; 4
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	7c 93       	st	X, r23
     766:	6e 93       	st	-X, r22
		rule8.then_side = &then8;
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	3c 93       	st	X, r19
     76c:	2e 93       	st	-X, r18
     76e:	12 97       	sbiw	r26, 0x02	; 2
		rule8.next = &rule9;
     770:	15 96       	adiw	r26, 0x05	; 5
     772:	fc 93       	st	X, r31
     774:	ee 93       	st	-X, r30
     776:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 7: if C is positive and V is medium then servo is sharpRight */
		struct rule_element_type then7;
		then7.value = &oShright.value;
     778:	66 5f       	subi	r22, 0xF6	; 246
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	ea e0       	ldi	r30, 0x0A	; 10
     77e:	ce 0e       	add	r12, r30
     780:	d1 1c       	adc	r13, r1
     782:	fb 01       	movw	r30, r22
     784:	d1 82       	std	Z+1, r13	; 0x01
     786:	c0 82       	st	Z, r12
		then7.next = NULL;
     788:	13 82       	std	Z+3, r1	; 0x03
     78a:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if72;
		if72.value = &medium.value;
     78c:	2e 5d       	subi	r18, 0xDE	; 222
     78e:	31 09       	sbc	r19, r1
     790:	cb 50       	subi	r28, 0x0B	; 11
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	39 83       	std	Y+1, r19	; 0x01
     796:	28 83       	st	Y, r18
     798:	c5 5f       	subi	r28, 0xF5	; 245
     79a:	d1 40       	sbci	r29, 0x01	; 1
		if72.next = NULL;
     79c:	c9 50       	subi	r28, 0x09	; 9
     79e:	de 4f       	sbci	r29, 0xFE	; 254
     7a0:	19 82       	std	Y+1, r1	; 0x01
     7a2:	18 82       	st	Y, r1
     7a4:	c7 5f       	subi	r28, 0xF7	; 247
     7a6:	d1 40       	sbci	r29, 0x01	; 1
		
		struct rule_element_type if71;
		if71.value = &positive.value;
     7a8:	7e 01       	movw	r14, r28
     7aa:	f7 e0       	ldi	r31, 0x07	; 7
     7ac:	ef 1a       	sub	r14, r31
     7ae:	fe ef       	ldi	r31, 0xFE	; 254
     7b0:	ff 0a       	sbc	r15, r31
     7b2:	f7 01       	movw	r30, r14
     7b4:	51 83       	std	Z+1, r21	; 0x01
     7b6:	40 83       	st	Z, r20
		if71.next = &if72;
     7b8:	05 ef       	ldi	r16, 0xF5	; 245
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	0c 0f       	add	r16, r28
     7be:	1d 1f       	adc	r17, r29
     7c0:	13 83       	std	Z+3, r17	; 0x03
     7c2:	02 83       	std	Z+2, r16	; 0x02
		
		struct rule_type rule7;
		rule7.if_side = &if71;
     7c4:	34 96       	adiw	r30, 0x04	; 4
     7c6:	f1 82       	std	Z+1, r15	; 0x01
     7c8:	e0 82       	st	Z, r14
		rule7.then_side = &then7;
     7ca:	73 83       	std	Z+3, r23	; 0x03
     7cc:	62 83       	std	Z+2, r22	; 0x02
		rule7.next = &rule8;
     7ce:	b5 83       	std	Z+5, r27	; 0x05
     7d0:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 6: if C is positive and V is medium then servo is sharpRight */
		struct rule_element_type then6;
		then6.value = &oShright.value;
     7d2:	6e 5e       	subi	r22, 0xEE	; 238
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	db 01       	movw	r26, r22
     7d8:	11 96       	adiw	r26, 0x01	; 1
     7da:	dc 92       	st	X, r13
     7dc:	ce 92       	st	-X, r12
		then6.next = NULL;
     7de:	13 96       	adiw	r26, 0x03	; 3
     7e0:	1c 92       	st	X, r1
     7e2:	1e 92       	st	-X, r1
     7e4:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if62;
		if62.value = &medium.value;
     7e6:	6e 01       	movw	r12, r28
     7e8:	b9 ef       	ldi	r27, 0xF9	; 249
     7ea:	cb 1a       	sub	r12, r27
     7ec:	bd ef       	ldi	r27, 0xFD	; 253
     7ee:	db 0a       	sbc	r13, r27
     7f0:	d6 01       	movw	r26, r12
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	3c 93       	st	X, r19
     7f6:	2e 93       	st	-X, r18
		if62.next = NULL;
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	1c 92       	st	X, r1
     7fc:	1e 92       	st	-X, r1
     7fe:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if61;
		if61.value = &positive.value;
     800:	7e 01       	movw	r14, r28
     802:	b5 ef       	ldi	r27, 0xF5	; 245
     804:	eb 1a       	sub	r14, r27
     806:	bd ef       	ldi	r27, 0xFD	; 253
     808:	fb 0a       	sbc	r15, r27
     80a:	d7 01       	movw	r26, r14
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	5c 93       	st	X, r21
     810:	4e 93       	st	-X, r20
		if61.next = &if62;
     812:	13 96       	adiw	r26, 0x03	; 3
     814:	dc 92       	st	X, r13
     816:	ce 92       	st	-X, r12
     818:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule6;
		rule6.if_side = &if61;
     81a:	14 96       	adiw	r26, 0x04	; 4
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	fc 92       	st	X, r15
     820:	ee 92       	st	-X, r14
		rule6.then_side = &then6;
     822:	13 96       	adiw	r26, 0x03	; 3
     824:	7c 93       	st	X, r23
     826:	6e 93       	st	-X, r22
     828:	12 97       	sbiw	r26, 0x02	; 2
		rule6.next = &rule7;
     82a:	15 96       	adiw	r26, 0x05	; 5
     82c:	fc 93       	st	X, r31
     82e:	ee 93       	st	-X, r30
     830:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 5: if C is negative and V is medium then servo is sharpLeft */
		struct rule_element_type then5;
		then5.value = &oShLeft.value;
     832:	6e 5e       	subi	r22, 0xEE	; 238
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	63 01       	movw	r12, r6
     838:	ea e0       	ldi	r30, 0x0A	; 10
     83a:	ce 0e       	add	r12, r30
     83c:	d1 1c       	adc	r13, r1
     83e:	fb 01       	movw	r30, r22
     840:	d1 82       	std	Z+1, r13	; 0x01
     842:	c0 82       	st	Z, r12
		then5.next = NULL;
     844:	13 82       	std	Z+3, r1	; 0x03
     846:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if52;
		if52.value = &medium.value;
     848:	0c 5d       	subi	r16, 0xDC	; 220
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
     84c:	f8 01       	movw	r30, r16
     84e:	31 83       	std	Z+1, r19	; 0x01
     850:	20 83       	st	Z, r18
		if52.next = NULL;
     852:	13 82       	std	Z+3, r1	; 0x03
     854:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if51;
		if51.value = &negative.value;
     856:	7e 01       	movw	r14, r28
     858:	f3 ee       	ldi	r31, 0xE3	; 227
     85a:	ef 1a       	sub	r14, r31
     85c:	fd ef       	ldi	r31, 0xFD	; 253
     85e:	ff 0a       	sbc	r15, r31
     860:	4c 52       	subi	r20, 0x2C	; 44
     862:	51 09       	sbc	r21, r1
     864:	f7 01       	movw	r30, r14
     866:	51 83       	std	Z+1, r21	; 0x01
     868:	40 83       	st	Z, r20
		if51.next = &if52;
     86a:	13 83       	std	Z+3, r17	; 0x03
     86c:	02 83       	std	Z+2, r16	; 0x02
		
		struct rule_type rule5;
		rule5.if_side = &if51;
     86e:	34 96       	adiw	r30, 0x04	; 4
     870:	f1 82       	std	Z+1, r15	; 0x01
     872:	e0 82       	st	Z, r14
		rule5.then_side = &then5;
     874:	73 83       	std	Z+3, r23	; 0x03
     876:	62 83       	std	Z+2, r22	; 0x02
		rule5.next = &rule6;
     878:	b5 83       	std	Z+5, r27	; 0x05
     87a:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 4: if C is zero and V is medium then servo is straight */
		struct rule_element_type then4;
		then4.value = &oStraight.value;
     87c:	02 5f       	subi	r16, 0xF2	; 242
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	0a 96       	adiw	r24, 0x0a	; 10
     882:	d8 01       	movw	r26, r16
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	9c 93       	st	X, r25
     888:	8e 93       	st	-X, r24
		then4.next = NULL;
     88a:	13 96       	adiw	r26, 0x03	; 3
     88c:	1c 92       	st	X, r1
     88e:	1e 92       	st	-X, r1
     890:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if42;
		if42.value = &medium.value;
     892:	6a 5e       	subi	r22, 0xEA	; 234
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	db 01       	movw	r26, r22
     898:	11 96       	adiw	r26, 0x01	; 1
     89a:	3c 93       	st	X, r19
     89c:	2e 93       	st	-X, r18
		if42.next = NULL;
     89e:	13 96       	adiw	r26, 0x03	; 3
     8a0:	1c 92       	st	X, r1
     8a2:	1e 92       	st	-X, r1
     8a4:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if41;
		if41.value = &zer.value;
     8a6:	80 55       	subi	r24, 0x50	; 80
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	dc 01       	movw	r26, r24
     8ac:	11 96       	adiw	r26, 0x01	; 1
     8ae:	bc 92       	st	X, r11
     8b0:	ae 92       	st	-X, r10
		if41.next = &if42;
     8b2:	13 96       	adiw	r26, 0x03	; 3
     8b4:	7c 93       	st	X, r23
     8b6:	6e 93       	st	-X, r22
     8b8:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule4;
		rule4.if_side = &if41;
     8ba:	68 5f       	subi	r22, 0xF8	; 248
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	db 01       	movw	r26, r22
     8c0:	11 96       	adiw	r26, 0x01	; 1
     8c2:	9c 93       	st	X, r25
     8c4:	8e 93       	st	-X, r24
		rule4.then_side = &then4;
     8c6:	13 96       	adiw	r26, 0x03	; 3
     8c8:	1c 93       	st	X, r17
     8ca:	0e 93       	st	-X, r16
     8cc:	12 97       	sbiw	r26, 0x02	; 2
		rule4.next = &rule5;
     8ce:	15 96       	adiw	r26, 0x05	; 5
     8d0:	fc 93       	st	X, r31
     8d2:	ee 93       	st	-X, r30
     8d4:	14 97       	sbiw	r26, 0x04	; 4
		
		
		/* rule # 3: if C is negative and V is medium then servo is sharpLeft */
		struct rule_element_type then3;
		then3.value = &oShLeft.value;
     8d6:	0e 5e       	subi	r16, 0xEE	; 238
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	f8 01       	movw	r30, r16
     8dc:	d1 82       	std	Z+1, r13	; 0x01
     8de:	c0 82       	st	Z, r12
		then3.next = NULL;
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if32;
		if32.value = &medium.value;
     8e4:	1a 96       	adiw	r26, 0x0a	; 10
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	3c 93       	st	X, r19
     8ea:	2e 93       	st	-X, r18
		if32.next = NULL;
     8ec:	13 96       	adiw	r26, 0x03	; 3
     8ee:	1c 92       	st	X, r1
     8f0:	1e 92       	st	-X, r1
     8f2:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if31;
		if31.value = &negative.value;
     8f4:	42 96       	adiw	r24, 0x12	; 18
     8f6:	fc 01       	movw	r30, r24
     8f8:	51 83       	std	Z+1, r21	; 0x01
     8fa:	40 83       	st	Z, r20
		if31.next = &if32;
     8fc:	b3 83       	std	Z+3, r27	; 0x03
     8fe:	a2 83       	std	Z+2, r26	; 0x02
		
		struct rule_type rule3;
		rule3.if_side = &if31;
     900:	18 96       	adiw	r26, 0x08	; 8
     902:	11 96       	adiw	r26, 0x01	; 1
     904:	9c 93       	st	X, r25
     906:	8e 93       	st	-X, r24
		rule3.then_side = &then3;
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	1c 93       	st	X, r17
     90c:	0e 93       	st	-X, r16
     90e:	12 97       	sbiw	r26, 0x02	; 2
		rule3.next = &rule4;
     910:	15 96       	adiw	r26, 0x05	; 5
     912:	7c 93       	st	X, r23
     914:	6e 93       	st	-X, r22
     916:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 2: if C is negative and V is small then servo is slightLeft */
		struct rule_element_type then2;
		then2.value = &oSlLeft.value;
     918:	68 5e       	subi	r22, 0xE8	; 232
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	fb 01       	movw	r30, r22
     91e:	91 82       	std	Z+1, r9	; 0x01
     920:	80 82       	st	Z, r8
		then2.next = NULL;
     922:	13 82       	std	Z+3, r1	; 0x03
     924:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if22;
		if22.value = &small.value;
     926:	22 5b       	subi	r18, 0xB2	; 178
     928:	3e 4f       	sbci	r19, 0xFE	; 254
     92a:	fa e0       	ldi	r31, 0x0A	; 10
     92c:	4f 0e       	add	r4, r31
     92e:	51 1c       	adc	r5, r1
     930:	f9 01       	movw	r30, r18
     932:	51 82       	std	Z+1, r5	; 0x01
     934:	40 82       	st	Z, r4
		if22.next = NULL;
     936:	13 82       	std	Z+3, r1	; 0x03
     938:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if21;
		if21.value = &negative.value;
     93a:	42 96       	adiw	r24, 0x12	; 18
     93c:	fc 01       	movw	r30, r24
     93e:	51 83       	std	Z+1, r21	; 0x01
     940:	40 83       	st	Z, r20
		if21.next = &if22;
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
		
		struct rule_type rule2;
		rule2.if_side = &if21;
     946:	28 5f       	subi	r18, 0xF8	; 248
     948:	3f 4f       	sbci	r19, 0xFF	; 255
     94a:	f9 01       	movw	r30, r18
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
		rule2.then_side = &then2;
     950:	73 83       	std	Z+3, r23	; 0x03
     952:	62 83       	std	Z+2, r22	; 0x02
		rule2.next = &rule3;
     954:	b5 83       	std	Z+5, r27	; 0x05
     956:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 1: if C is zero and V is small then servo is slightRight */
		struct rule_element_type then1;
		then1.value = &oSlRight.value;
     958:	58 96       	adiw	r26, 0x18	; 24
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	3c 92       	st	X, r3
     95e:	2e 92       	st	-X, r2
		then1.next = NULL;
     960:	13 96       	adiw	r26, 0x03	; 3
     962:	1c 92       	st	X, r1
     964:	1e 92       	st	-X, r1
     966:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if12;
		if12.value = &small.value;
     968:	6a 5e       	subi	r22, 0xEA	; 234
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	fb 01       	movw	r30, r22
     96e:	51 82       	std	Z+1, r5	; 0x01
     970:	40 82       	st	Z, r4
		if12.next = NULL;
     972:	13 82       	std	Z+3, r1	; 0x03
     974:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if11;
		if11.value = &negative.value;
     976:	42 96       	adiw	r24, 0x12	; 18
     978:	fc 01       	movw	r30, r24
     97a:	51 83       	std	Z+1, r21	; 0x01
     97c:	40 83       	st	Z, r20
		if11.next = &if12;
     97e:	73 83       	std	Z+3, r23	; 0x03
     980:	62 83       	std	Z+2, r22	; 0x02
		
		struct rule_type rule1;
		rule1.if_side = &if11;
     982:	34 96       	adiw	r30, 0x04	; 4
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	80 83       	st	Z, r24
		rule1.then_side = &then1;
     988:	b3 83       	std	Z+3, r27	; 0x03
     98a:	a2 83       	std	Z+2, r26	; 0x02
		rule1.next = &rule2;
     98c:	35 83       	std	Z+5, r19	; 0x05
     98e:	24 83       	std	Z+4, r18	; 0x04


	
	// pointers to top of lists
	Rule_Base = &rule1;
     990:	f0 93 36 02 	sts	0x0236, r31
     994:	e0 93 35 02 	sts	0x0235, r30
	System_Inputs = &delta_C;
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	0c 0f       	add	r16, r28
     99e:	1d 1f       	adc	r17, r29
     9a0:	10 93 34 02 	sts	0x0234, r17
     9a4:	00 93 33 02 	sts	0x0233, r16
	System_Outputs = &servo;
     9a8:	63 e2       	ldi	r22, 0x23	; 35
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	6c 0f       	add	r22, r28
     9ae:	7d 1f       	adc	r23, r29
     9b0:	70 93 32 02 	sts	0x0232, r23
     9b4:	60 93 31 02 	sts	0x0231, r22
	
	
	
	
	// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     9b8:	c1 59       	subi	r28, 0x91	; 145
     9ba:	dd 4f       	sbci	r29, 0xFD	; 253
     9bc:	88 81       	ld	r24, Y
     9be:	99 81       	ldd	r25, Y+1	; 0x01
     9c0:	cf 56       	subi	r28, 0x6F	; 111
     9c2:	d2 40       	sbci	r29, 0x02	; 2
     9c4:	99 23       	and	r25, r25
     9c6:	1c f4       	brge	.+6      	; 0x9ce <FLC_steering+0x904>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     9c8:	1c 86       	std	Y+12, r1	; 0x0c
     9ca:	1b 86       	std	Y+11, r1	; 0x0b
     9cc:	16 c0       	rjmp	.+44     	; 0x9fa <FLC_steering+0x930>
	}
	else if(c>250)			// if sensor value is bigger than delta_C's input set's upper limit
     9ce:	c1 59       	subi	r28, 0x91	; 145
     9d0:	dd 4f       	sbci	r29, 0xFD	; 253
     9d2:	08 81       	ld	r16, Y
     9d4:	19 81       	ldd	r17, Y+1	; 0x01
     9d6:	cf 56       	subi	r28, 0x6F	; 111
     9d8:	d2 40       	sbci	r29, 0x02	; 2
     9da:	0b 3f       	cpi	r16, 0xFB	; 251
     9dc:	11 05       	cpc	r17, r1
     9de:	2c f0       	brlt	.+10     	; 0x9ea <FLC_steering+0x920>
	{
		delta_C.value = 250;  // force input value to lowest point in delta_C's input set
     9e0:	8a ef       	ldi	r24, 0xFA	; 250
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9c 87       	std	Y+12, r25	; 0x0c
     9e6:	8b 87       	std	Y+11, r24	; 0x0b
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <FLC_steering+0x930>
	}
	else
	{
		delta_C.value = c;
     9ea:	c1 59       	subi	r28, 0x91	; 145
     9ec:	dd 4f       	sbci	r29, 0xFD	; 253
     9ee:	68 81       	ld	r22, Y
     9f0:	79 81       	ldd	r23, Y+1	; 0x01
     9f2:	cf 56       	subi	r28, 0x6F	; 111
     9f4:	d2 40       	sbci	r29, 0x02	; 2
     9f6:	7c 87       	std	Y+12, r23	; 0x0c
     9f8:	6b 87       	std	Y+11, r22	; 0x0b
	{
		delta_V.value = v;
	}
	
	// the methods performing the FLC
	fuzzification();
     9fa:	85 d0       	rcall	.+266    	; 0xb06 <fuzzification>
	rule_evaluation();
     9fc:	ab d0       	rcall	.+342    	; 0xb54 <rule_evaluation>
	defuzzification();
     9fe:	f0 d0       	rcall	.+480    	; 0xbe0 <defuzzification>
	setServo(servo.value);
     a00:	c3 5d       	subi	r28, 0xD3	; 211
     a02:	de 4f       	sbci	r29, 0xFE	; 254
     a04:	88 81       	ld	r24, Y
     a06:	99 81       	ldd	r25, Y+1	; 0x01
     a08:	cd 52       	subi	r28, 0x2D	; 45
     a0a:	d1 40       	sbci	r29, 0x01	; 1
     a0c:	81 d2       	rcall	.+1282   	; 0xf10 <setServo>
}
     a0e:	cf 58       	subi	r28, 0x8F	; 143
     a10:	dd 4f       	sbci	r29, 0xFD	; 253
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	5f 90       	pop	r5
     a3a:	4f 90       	pop	r4
     a3c:	3f 90       	pop	r3
     a3e:	2f 90       	pop	r2
     a40:	08 95       	ret

00000a42 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     a42:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     a44:	84 85       	ldd	r24, Z+12	; 0x0c
     a46:	95 85       	ldd	r25, Z+13	; 0x0d
     a48:	9b 01       	movw	r18, r22
     a4a:	28 1b       	sub	r18, r24
     a4c:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     a4e:	86 85       	ldd	r24, Z+14	; 0x0e
     a50:	97 85       	ldd	r25, Z+15	; 0x0f
     a52:	86 1b       	sub	r24, r22
     a54:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     a56:	12 16       	cp	r1, r18
     a58:	13 06       	cpc	r1, r19
     a5a:	ec f4       	brge	.+58     	; 0xa96 <compute_degree_of_membership+0x54>
     a5c:	18 16       	cp	r1, r24
     a5e:	19 06       	cpc	r1, r25
     a60:	ec f4       	brge	.+58     	; 0xa9c <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     a62:	60 89       	ldd	r22, Z+16	; 0x10
     a64:	71 89       	ldd	r23, Z+17	; 0x11
     a66:	a2 89       	ldd	r26, Z+18	; 0x12
     a68:	b3 89       	ldd	r27, Z+19	; 0x13
     a6a:	8a 9f       	mul	r24, r26
     a6c:	a0 01       	movw	r20, r0
     a6e:	8b 9f       	mul	r24, r27
     a70:	50 0d       	add	r21, r0
     a72:	9a 9f       	mul	r25, r26
     a74:	50 0d       	add	r21, r0
     a76:	11 24       	eor	r1, r1
     a78:	26 9f       	mul	r18, r22
     a7a:	c0 01       	movw	r24, r0
     a7c:	27 9f       	mul	r18, r23
     a7e:	90 0d       	add	r25, r0
     a80:	36 9f       	mul	r19, r22
     a82:	90 0d       	add	r25, r0
     a84:	11 24       	eor	r1, r1
     a86:	48 17       	cp	r20, r24
     a88:	59 07       	cpc	r21, r25
     a8a:	0c f4       	brge	.+2      	; 0xa8e <compute_degree_of_membership+0x4c>
     a8c:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     a8e:	84 36       	cpi	r24, 0x64	; 100
     a90:	91 05       	cpc	r25, r1
     a92:	3c f4       	brge	.+14     	; 0xaa2 <compute_degree_of_membership+0x60>
     a94:	08 c0       	rjmp	.+16     	; 0xaa6 <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <compute_degree_of_membership+0x64>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     aa2:	84 e6       	ldi	r24, 0x64	; 100
     aa4:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     aa6:	93 87       	std	Z+11, r25	; 0x0b
     aa8:	82 87       	std	Z+10, r24	; 0x0a
     aaa:	08 95       	ret

00000aac <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     ab6:	c6 85       	ldd	r28, Z+14	; 0x0e
     ab8:	d7 85       	ldd	r29, Z+15	; 0x0f
     aba:	84 85       	ldd	r24, Z+12	; 0x0c
     abc:	95 85       	ldd	r25, Z+13	; 0x0d
     abe:	c8 1b       	sub	r28, r24
     ac0:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     ac2:	22 85       	ldd	r18, Z+10	; 0x0a
     ac4:	33 85       	ldd	r19, Z+11	; 0x0b
     ac6:	60 89       	ldd	r22, Z+16	; 0x10
     ac8:	71 89       	ldd	r23, Z+17	; 0x11
     aca:	c9 01       	movw	r24, r18
     acc:	d7 d4       	rcall	.+2478   	; 0x147c <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     ace:	8e 01       	movw	r16, r28
     ad0:	06 1b       	sub	r16, r22
     ad2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     ad4:	62 89       	ldd	r22, Z+18	; 0x12
     ad6:	73 89       	ldd	r23, Z+19	; 0x13
     ad8:	c9 01       	movw	r24, r18
     ada:	d0 d4       	rcall	.+2464   	; 0x147c <__divmodhi4>
    top = base - run_1 - run_2;
     adc:	06 1b       	sub	r16, r22
     ade:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     ae0:	c0 0f       	add	r28, r16
     ae2:	d1 1f       	adc	r29, r17
     ae4:	2c 9f       	mul	r18, r28
     ae6:	c0 01       	movw	r24, r0
     ae8:	2d 9f       	mul	r18, r29
     aea:	90 0d       	add	r25, r0
     aec:	3c 9f       	mul	r19, r28
     aee:	90 0d       	add	r25, r0
     af0:	11 24       	eor	r1, r1
     af2:	99 23       	and	r25, r25
     af4:	0c f4       	brge	.+2      	; 0xaf8 <compute_area_of_trapezoid+0x4c>
     af6:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     af8:	95 95       	asr	r25
     afa:	87 95       	ror	r24
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     b0e:	00 91 33 02 	lds	r16, 0x0233
     b12:	10 91 34 02 	lds	r17, 0x0234
     b16:	01 15       	cp	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	b9 f0       	breq	.+46     	; 0xb4a <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     b1c:	f8 01       	movw	r30, r16
     b1e:	c4 85       	ldd	r28, Z+12	; 0x0c
     b20:	d5 85       	ldd	r29, Z+13	; 0x0d
     b22:	20 97       	sbiw	r28, 0x00	; 0
     b24:	61 f0       	breq	.+24     	; 0xb3e <fuzzification+0x38>
            if (mf!=NULL) {
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	29 f0       	breq	.+10     	; 0xb34 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     b2a:	f8 01       	movw	r30, r16
     b2c:	62 85       	ldd	r22, Z+10	; 0x0a
     b2e:	73 85       	ldd	r23, Z+11	; 0x0b
     b30:	ce 01       	movw	r24, r28
     b32:	87 df       	rcall	.-242    	; 0xa42 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     b34:	0c 88       	ldd	r0, Y+20	; 0x14
     b36:	dd 89       	ldd	r29, Y+21	; 0x15
     b38:	c0 2d       	mov	r28, r0
     b3a:	20 97       	sbiw	r28, 0x00	; 0
     b3c:	a1 f7       	brne	.-24     	; 0xb26 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     b3e:	f8 01       	movw	r30, r16
     b40:	06 85       	ldd	r16, Z+14	; 0x0e
     b42:	17 85       	ldd	r17, Z+15	; 0x0f
     b44:	01 15       	cp	r16, r1
     b46:	11 05       	cpc	r17, r1
     b48:	49 f7       	brne	.-46     	; 0xb1c <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     b5c:	c0 91 35 02 	lds	r28, 0x0235
     b60:	d0 91 36 02 	lds	r29, 0x0236
     b64:	20 97       	sbiw	r28, 0x00	; 0
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b68:	04 e6       	ldi	r16, 0x64	; 100
     b6a:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     b6c:	e8 81       	ld	r30, Y
     b6e:	f9 81       	ldd	r31, Y+1	; 0x01
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	81 f0       	breq	.+32     	; 0xb94 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b74:	20 2f       	mov	r18, r16
     b76:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     b78:	a0 81       	ld	r26, Z
     b7a:	b1 81       	ldd	r27, Z+1	; 0x01
     b7c:	8d 91       	ld	r24, X+
     b7e:	9c 91       	ld	r25, X
     b80:	82 17       	cp	r24, r18
     b82:	93 07       	cpc	r25, r19
     b84:	0c f4       	brge	.+2      	; 0xb88 <rule_evaluation+0x34>
     b86:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     b88:	02 80       	ldd	r0, Z+2	; 0x02
     b8a:	f3 81       	ldd	r31, Z+3	; 0x03
     b8c:	e0 2d       	mov	r30, r0
     b8e:	30 97       	sbiw	r30, 0x00	; 0
     b90:	99 f7       	brne	.-26     	; 0xb78 <rule_evaluation+0x24>
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b94:	20 2f       	mov	r18, r16
     b96:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	b1 f0       	breq	.+44     	; 0xbcc <rule_evaluation+0x78>
     ba0:	72 2f       	mov	r23, r18
     ba2:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     ba4:	a0 81       	ld	r26, Z
     ba6:	b1 81       	ldd	r27, Z+1	; 0x01
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	11 97       	sbiw	r26, 0x01	; 1
     bae:	57 2f       	mov	r21, r23
     bb0:	46 2f       	mov	r20, r22
     bb2:	28 17       	cp	r18, r24
     bb4:	39 07       	cpc	r19, r25
     bb6:	14 f4       	brge	.+4      	; 0xbbc <rule_evaluation+0x68>
     bb8:	58 2f       	mov	r21, r24
     bba:	49 2f       	mov	r20, r25
     bbc:	5c 93       	st	X, r21
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     bc2:	02 80       	ldd	r0, Z+2	; 0x02
     bc4:	f3 81       	ldd	r31, Z+3	; 0x03
     bc6:	e0 2d       	mov	r30, r0
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	61 f7       	brne	.-40     	; 0xba4 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     bcc:	0c 80       	ldd	r0, Y+4	; 0x04
     bce:	dd 81       	ldd	r29, Y+5	; 0x05
     bd0:	c0 2d       	mov	r28, r0
     bd2:	20 97       	sbiw	r28, 0x00	; 0
     bd4:	59 f6       	brne	.-106    	; 0xb6c <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     be0:	2f 92       	push	r2
     be2:	3f 92       	push	r3
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 d0       	rcall	.+0      	; 0xc06 <defuzzification+0x26>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <defuzzification+0x28>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <defuzzification+0x2a>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     c0e:	80 91 31 02 	lds	r24, 0x0231
     c12:	90 91 32 02 	lds	r25, 0x0232
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	89 2b       	or	r24, r25
     c1c:	09 f4       	brne	.+2      	; 0xc20 <defuzzification+0x40>
     c1e:	84 c0       	rjmp	.+264    	; 0xd28 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     c20:	eb 81       	ldd	r30, Y+3	; 0x03
     c22:	fc 81       	ldd	r31, Y+4	; 0x04
     c24:	04 84       	ldd	r0, Z+12	; 0x0c
     c26:	f5 85       	ldd	r31, Z+13	; 0x0d
     c28:	e0 2d       	mov	r30, r0
     c2a:	fe 83       	std	Y+6, r31	; 0x06
     c2c:	ed 83       	std	Y+5, r30	; 0x05
     c2e:	ef 2b       	or	r30, r31
     c30:	09 f4       	brne	.+2      	; 0xc34 <defuzzification+0x54>
     c32:	66 c0       	rjmp	.+204    	; 0xd00 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     c34:	51 2c       	mov	r5, r1
     c36:	61 2c       	mov	r6, r1
     c38:	71 2c       	mov	r7, r1
     c3a:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     c3c:	31 2c       	mov	r3, r1
     c3e:	21 2c       	mov	r2, r1
     c40:	19 82       	std	Y+1, r1	; 0x01
     c42:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	31 df       	rcall	.-414    	; 0xaac <compute_area_of_trapezoid>
     c4a:	bc 01       	movw	r22, r24
     c4c:	88 27       	eor	r24, r24
     c4e:	77 fd       	sbrc	r23, 7
     c50:	80 95       	com	r24
     c52:	98 2f       	mov	r25, r24
     c54:	24 d3       	rcall	.+1608   	; 0x129e <__floatsisf>
     c56:	6b 01       	movw	r12, r22
     c58:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     c5a:	ed 81       	ldd	r30, Y+5	; 0x05
     c5c:	fe 81       	ldd	r31, Y+6	; 0x06
     c5e:	04 85       	ldd	r16, Z+12	; 0x0c
     c60:	15 85       	ldd	r17, Z+13	; 0x0d
     c62:	b8 01       	movw	r22, r16
     c64:	88 27       	eor	r24, r24
     c66:	77 fd       	sbrc	r23, 7
     c68:	80 95       	com	r24
     c6a:	98 2f       	mov	r25, r24
     c6c:	18 d3       	rcall	.+1584   	; 0x129e <__floatsisf>
     c6e:	4b 01       	movw	r8, r22
     c70:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     c72:	ed 81       	ldd	r30, Y+5	; 0x05
     c74:	fe 81       	ldd	r31, Y+6	; 0x06
     c76:	86 85       	ldd	r24, Z+14	; 0x0e
     c78:	97 85       	ldd	r25, Z+15	; 0x0f
     c7a:	80 1b       	sub	r24, r16
     c7c:	91 0b       	sbc	r25, r17
     c7e:	bc 01       	movw	r22, r24
     c80:	12 f4       	brpl	.+4      	; 0xc86 <defuzzification+0xa6>
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	75 95       	asr	r23
     c88:	67 95       	ror	r22
            centroid = centroid + intermed;
     c8a:	88 27       	eor	r24, r24
     c8c:	77 fd       	sbrc	r23, 7
     c8e:	80 95       	com	r24
     c90:	98 2f       	mov	r25, r24
     c92:	05 d3       	rcall	.+1546   	; 0x129e <__floatsisf>
     c94:	a5 01       	movw	r20, r10
     c96:	94 01       	movw	r18, r8
     c98:	03 d2       	rcall	.+1030   	; 0x10a0 <__addsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	89 d3       	rcall	.+1810   	; 0x13b6 <__mulsf3>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	63 2d       	mov	r22, r3
     caa:	72 2d       	mov	r23, r2
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	f7 d1       	rcall	.+1006   	; 0x10a0 <__addsf3>
     cb2:	36 2e       	mov	r3, r22
     cb4:	27 2e       	mov	r2, r23
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     cba:	a7 01       	movw	r20, r14
     cbc:	96 01       	movw	r18, r12
     cbe:	65 2d       	mov	r22, r5
     cc0:	76 2d       	mov	r23, r6
     cc2:	87 2d       	mov	r24, r7
     cc4:	94 2d       	mov	r25, r4
     cc6:	ec d1       	rcall	.+984    	; 0x10a0 <__addsf3>
     cc8:	56 2e       	mov	r5, r22
     cca:	67 2e       	mov	r6, r23
     ccc:	78 2e       	mov	r7, r24
     cce:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     cd0:	ed 81       	ldd	r30, Y+5	; 0x05
     cd2:	fe 81       	ldd	r31, Y+6	; 0x06
     cd4:	04 88       	ldd	r0, Z+20	; 0x14
     cd6:	f5 89       	ldd	r31, Z+21	; 0x15
     cd8:	e0 2d       	mov	r30, r0
     cda:	fe 83       	std	Y+6, r31	; 0x06
     cdc:	ed 83       	std	Y+5, r30	; 0x05
     cde:	ef 2b       	or	r30, r31
     ce0:	09 f0       	breq	.+2      	; 0xce4 <defuzzification+0x104>
     ce2:	b0 cf       	rjmp	.-160    	; 0xc44 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     ce4:	26 2f       	mov	r18, r22
     ce6:	37 2f       	mov	r19, r23
     ce8:	48 2f       	mov	r20, r24
     cea:	59 2f       	mov	r21, r25
     cec:	63 2d       	mov	r22, r3
     cee:	72 2d       	mov	r23, r2
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	39 d2       	rcall	.+1138   	; 0x1168 <__divsf3>
     cf6:	26 2f       	mov	r18, r22
     cf8:	37 2f       	mov	r19, r23
     cfa:	48 2f       	mov	r20, r24
     cfc:	59 2f       	mov	r21, r25
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     d08:	62 2f       	mov	r22, r18
     d0a:	73 2f       	mov	r23, r19
     d0c:	84 2f       	mov	r24, r20
     d0e:	95 2f       	mov	r25, r21
     d10:	93 d2       	rcall	.+1318   	; 0x1238 <__fixsfsi>
     d12:	eb 81       	ldd	r30, Y+3	; 0x03
     d14:	fc 81       	ldd	r31, Y+4	; 0x04
     d16:	73 87       	std	Z+11, r23	; 0x0b
     d18:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     d1a:	86 85       	ldd	r24, Z+14	; 0x0e
     d1c:	97 85       	ldd	r25, Z+15	; 0x0f
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
     d22:	89 2b       	or	r24, r25
     d24:	09 f0       	breq	.+2      	; 0xd28 <defuzzification+0x148>
     d26:	7c cf       	rjmp	.-264    	; 0xc20 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     d28:	26 96       	adiw	r28, 0x06	; 6
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	3f 90       	pop	r3
     d56:	2f 90       	pop	r2
     d58:	08 95       	ret

00000d5a <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	11 24       	eor	r1, r1
     d64:	0b b6       	in	r0, 0x3b	; 59
     d66:	0f 92       	push	r0
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	80 91 ce 00 	lds	r24, 0x00CE
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	29 f4       	brne	.+10     	; 0xd82 <__vector_28+0x28>
     d78:	10 92 58 02 	sts	0x0258, r1
     d7c:	10 92 57 02 	sts	0x0257, r1
     d80:	10 c0       	rjmp	.+32     	; 0xda2 <__vector_28+0x48>
     d82:	e0 91 57 02 	lds	r30, 0x0257
     d86:	f0 91 58 02 	lds	r31, 0x0258
     d8a:	e9 5c       	subi	r30, 0xC9	; 201
     d8c:	fd 4f       	sbci	r31, 0xFD	; 253
     d8e:	80 83       	st	Z, r24
     d90:	80 91 57 02 	lds	r24, 0x0257
     d94:	90 91 58 02 	lds	r25, 0x0258
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	90 93 58 02 	sts	0x0258, r25
     d9e:	80 93 57 02 	sts	0x0257, r24
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <SPI_slaveInit>:
     db8:	80 e4       	ldi	r24, 0x40	; 64
     dba:	84 b9       	out	0x04, r24	; 4
     dbc:	80 ec       	ldi	r24, 0xC0	; 192
     dbe:	8c bd       	out	0x2c, r24	; 44
     dc0:	08 95       	ret

00000dc2 <carInit>:
     dc2:	7c d0       	rcall	.+248    	; 0xebc <pwmInit>
     dc4:	f9 df       	rcall	.-14     	; 0xdb8 <SPI_slaveInit>
     dc6:	8d ec       	ldi	r24, 0xCD	; 205
     dc8:	9a e0       	ldi	r25, 0x0A	; 10
     dca:	87 d0       	rcall	.+270    	; 0xeda <setESC>
     dcc:	84 e6       	ldi	r24, 0x64	; 100
     dce:	9a e0       	ldi	r25, 0x0A	; 10
     dd0:	9f c0       	rjmp	.+318    	; 0xf10 <setServo>
     dd2:	08 95       	ret

00000dd4 <USART1_init>:
     dd4:	ec ec       	ldi	r30, 0xCC	; 204
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	10 82       	st	Z, r1
     ddc:	20 e9       	ldi	r18, 0x90	; 144
     dde:	20 93 c9 00 	sts	0x00C9, r18
     de2:	2e e0       	ldi	r18, 0x0E	; 14
     de4:	20 93 ca 00 	sts	0x00CA, r18
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
     dec:	08 95       	ret

00000dee <Sens_info_read>:
     dee:	dc 01       	movw	r26, r24
     df0:	e9 ec       	ldi	r30, 0xC9	; 201
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 77       	andi	r24, 0x7F	; 127
     df8:	80 83       	st	Z, r24
     dfa:	80 91 37 02 	lds	r24, 0x0237
     dfe:	8c 93       	st	X, r24
     e00:	80 91 38 02 	lds	r24, 0x0238
     e04:	1e 96       	adiw	r26, 0x0e	; 14
     e06:	8c 93       	st	X, r24
     e08:	1e 97       	sbiw	r26, 0x0e	; 14
     e0a:	80 91 39 02 	lds	r24, 0x0239
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	8c 93       	st	X, r24
     e12:	10 92 58 02 	sts	0x0258, r1
     e16:	10 92 57 02 	sts	0x0257, r1
     e1a:	80 81       	ld	r24, Z
     e1c:	80 68       	ori	r24, 0x80	; 128
     e1e:	80 83       	st	Z, r24
     e20:	08 95       	ret

00000e22 <__vector_18>:
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f 93       	push	r18
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	80 91 a2 01 	lds	r24, 0x01A2
     e36:	90 91 a3 01 	lds	r25, 0x01A3
     e3a:	8b 39       	cpi	r24, 0x9B	; 155
     e3c:	26 e9       	ldi	r18, 0x96	; 150
     e3e:	92 07       	cpc	r25, r18
     e40:	30 f4       	brcc	.+12     	; 0xe4e <__vector_18+0x2c>
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	90 93 a3 01 	sts	0x01A3, r25
     e48:	80 93 a2 01 	sts	0x01A2, r24
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <__vector_18+0x3e>
     e4e:	80 91 a4 01 	lds	r24, 0x01A4
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 93 a4 01 	sts	0x01A4, r24
     e58:	10 92 a3 01 	sts	0x01A3, r1
     e5c:	10 92 a2 01 	sts	0x01A2, r1
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	2f 91       	pop	r18
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <main>:
	}

	/* main function
	*/
	int main (void)
	{
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	60 97       	sbiw	r28, 0x10	; 16
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
		carInit();
     e84:	9e df       	rcall	.-196    	; 0xdc2 <carInit>
		setESC(NEUTRAL+70);
     e86:	83 e1       	ldi	r24, 0x13	; 19
     e88:	9b e0       	ldi	r25, 0x0B	; 11
     e8a:	27 d0       	rcall	.+78     	; 0xeda <setESC>
		
		sei();
     e8c:	78 94       	sei
			sens_info_ptr = &sensor_info;
			//--end of sensor information
			
			//Init for UART
			unsigned int baud_setting = 7;
			USART1_init(baud_setting);
     e8e:	87 e0       	ldi	r24, 0x07	; 7
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	a0 df       	rcall	.-192    	; 0xdd4 <USART1_init>
			int c;
			int v;
			int d;

			//Setting for Testing
			DDRA = 0xFF;
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	81 b9       	out	0x01, r24	; 1
					PORTA = sensor_info.dist_right_line;
					
					cli();
					
				
					FLC_steering(200, OCR1B, 50);
     e98:	0a e8       	ldi	r16, 0x8A	; 138
     e9a:	10 e0       	ldi	r17, 0x00	; 0
		
		while (1) {
				
				// if (counter_UART1_reciever > 2) {
					
					Sens_info_read(sens_info_ptr);
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	a6 df       	rcall	.-180    	; 0xdee <Sens_info_read>
					
					c = (int) sensor_info.dist_right_line;
					v = (int) sensor_info.angular_diff;
					d = (int) sensor_info.dist_sonic_middle;
					
					PORTA = sensor_info.dist_right_line;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	82 b9       	out	0x02, r24	; 2
					
					cli();
     ea6:	f8 94       	cli
					
				
					FLC_steering(200, OCR1B, 50);
     ea8:	f8 01       	movw	r30, r16
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	42 e3       	ldi	r20, 0x32	; 50
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	88 ec       	ldi	r24, 0xC8	; 200
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	09 d9       	rcall	.-3566   	; 0xca <FLC_steering>
					//FLC_road(OCR1A,d);
					sei();
     eb8:	78 94       	sei
     eba:	f0 cf       	rjmp	.-32     	; 0xe9c <main+0x2c>

00000ebc <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     ec0:	82 ea       	ldi	r24, 0xA2	; 162
     ec2:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f e8       	ldi	r25, 0x8F	; 143
     eca:	90 93 87 00 	sts	0x0087, r25
     ece:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     ed2:	8a e1       	ldi	r24, 0x1A	; 26
     ed4:	80 93 81 00 	sts	0x0081, r24
     ed8:	08 95       	ret

00000eda <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     eda:	80 36       	cpi	r24, 0x60	; 96
     edc:	2a e0       	ldi	r18, 0x0A	; 10
     ede:	92 07       	cpc	r25, r18
     ee0:	3c f4       	brge	.+14     	; 0xef0 <setESC+0x16>
	{
		OCR1A = MINESC;
     ee2:	8f e5       	ldi	r24, 0x5F	; 95
     ee4:	9a e0       	ldi	r25, 0x0A	; 10
     ee6:	90 93 89 00 	sts	0x0089, r25
     eea:	80 93 88 00 	sts	0x0088, r24
     eee:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     ef0:	8b 33       	cpi	r24, 0x3B	; 59
     ef2:	2b e0       	ldi	r18, 0x0B	; 11
     ef4:	92 07       	cpc	r25, r18
     ef6:	3c f0       	brlt	.+14     	; 0xf06 <setESC+0x2c>
	{
		OCR1A = MAXESC;
     ef8:	8b e3       	ldi	r24, 0x3B	; 59
     efa:	9b e0       	ldi	r25, 0x0B	; 11
     efc:	90 93 89 00 	sts	0x0089, r25
     f00:	80 93 88 00 	sts	0x0088, r24
     f04:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     f06:	90 93 89 00 	sts	0x0089, r25
     f0a:	80 93 88 00 	sts	0x0088, r24
     f0e:	08 95       	ret

00000f10 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     f10:	87 3e       	cpi	r24, 0xE7	; 231
     f12:	27 e0       	ldi	r18, 0x07	; 7
     f14:	92 07       	cpc	r25, r18
     f16:	3c f4       	brge	.+14     	; 0xf26 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     f18:	86 ee       	ldi	r24, 0xE6	; 230
     f1a:	97 e0       	ldi	r25, 0x07	; 7
     f1c:	90 93 8b 00 	sts	0x008B, r25
     f20:	80 93 8a 00 	sts	0x008A, r24
     f24:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     f26:	8f 33       	cpi	r24, 0x3F	; 63
     f28:	2c e0       	ldi	r18, 0x0C	; 12
     f2a:	92 07       	cpc	r25, r18
     f2c:	3c f0       	brlt	.+14     	; 0xf3c <setServo+0x2c>

		OCR1B = MAXLEFT;
     f2e:	8f e3       	ldi	r24, 0x3F	; 63
     f30:	9c e0       	ldi	r25, 0x0C	; 12
     f32:	90 93 8b 00 	sts	0x008B, r25
     f36:	80 93 8a 00 	sts	0x008A, r24
     f3a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     f3c:	90 93 8b 00 	sts	0x008B, r25
     f40:	80 93 8a 00 	sts	0x008A, r24
     f44:	08 95       	ret

00000f46 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	0b b6       	in	r0, 0x3b	; 59
     f52:	0f 92       	push	r0
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     f66:	80 91 2f 02 	lds	r24, 0x022F
     f6a:	90 91 30 02 	lds	r25, 0x0230
     f6e:	80 34       	cpi	r24, 0x40	; 64
     f70:	91 05       	cpc	r25, r1
     f72:	31 f4       	brne	.+12     	; 0xf80 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 65 02 	sts	0x0265, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     f7a:	80 91 c6 00 	lds	r24, 0x00C6
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     f80:	80 34       	cpi	r24, 0x40	; 64
     f82:	91 05       	cpc	r25, r1
     f84:	e8 f4       	brcc	.+58     	; 0xfc0 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     f86:	ed e2       	ldi	r30, 0x2D	; 45
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	40 91 c6 00 	lds	r20, 0x00C6
     f92:	d9 01       	movw	r26, r18
     f94:	a5 51       	subi	r26, 0x15	; 21
     f96:	be 4f       	sbci	r27, 0xFE	; 254
     f98:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	90 93 30 02 	sts	0x0230, r25
     fa8:	80 93 2f 02 	sts	0x022F, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     fac:	80 91 2f 02 	lds	r24, 0x022F
     fb0:	90 91 30 02 	lds	r25, 0x0230
     fb4:	80 34       	cpi	r24, 0x40	; 64
     fb6:	91 05       	cpc	r25, r1
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 63 02 	sts	0x0263, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     fc0:	80 91 2d 02 	lds	r24, 0x022D
     fc4:	90 91 2e 02 	lds	r25, 0x022E
     fc8:	80 34       	cpi	r24, 0x40	; 64
     fca:	91 05       	cpc	r25, r1
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <__vector_20+0x90>
		rx_uart0.i_last = 0;
     fce:	10 92 2e 02 	sts	0x022E, r1
     fd2:	10 92 2d 02 	sts	0x022D, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 62 02 	sts	0x0262, r24
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0b be       	out	0x3b, r0	; 59
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_22>:




ISR(USART0_TX_vect)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	0b b6       	in	r0, 0x3b	; 59
    1008:	0f 92       	push	r0
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1012:	80 91 e9 01 	lds	r24, 0x01E9
    1016:	90 91 ea 01 	lds	r25, 0x01EA
    101a:	80 34       	cpi	r24, 0x40	; 64
    101c:	91 05       	cpc	r25, r1
    101e:	19 f4       	brne	.+6      	; 0x1026 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1020:	10 92 61 02 	sts	0x0261, r1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1026:	89 2b       	or	r24, r25
    1028:	b9 f0       	breq	.+46     	; 0x1058 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    102a:	e0 91 e5 01 	lds	r30, 0x01E5
    102e:	f0 91 e6 01 	lds	r31, 0x01E6
    1032:	eb 55       	subi	r30, 0x5B	; 91
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	80 81       	ld	r24, Z
    1038:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    103c:	e5 ee       	ldi	r30, 0xE5	; 229
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    104a:	e9 ee       	ldi	r30, 0xE9	; 233
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1058:	80 91 e5 01 	lds	r24, 0x01E5
    105c:	90 91 e6 01 	lds	r25, 0x01E6
    1060:	80 34       	cpi	r24, 0x40	; 64
    1062:	91 05       	cpc	r25, r1
    1064:	21 f4       	brne	.+8      	; 0x106e <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1066:	10 92 e6 01 	sts	0x01E6, r1
    106a:	10 92 e5 01 	sts	0x01E5, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    106e:	80 91 e9 01 	lds	r24, 0x01E9
    1072:	90 91 ea 01 	lds	r25, 0x01EA
    1076:	89 2b       	or	r24, r25
    1078:	39 f4       	brne	.+14     	; 0x1088 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    107a:	10 92 64 02 	sts	0x0264, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    107e:	e1 ec       	ldi	r30, 0xC1	; 193
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7b       	andi	r24, 0xBF	; 191
    1086:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__subsf3>:
    109e:	50 58       	subi	r21, 0x80	; 128

000010a0 <__addsf3>:
    10a0:	bb 27       	eor	r27, r27
    10a2:	aa 27       	eor	r26, r26
    10a4:	0e d0       	rcall	.+28     	; 0x10c2 <__addsf3x>
    10a6:	4d c1       	rjmp	.+666    	; 0x1342 <__fp_round>
    10a8:	3e d1       	rcall	.+636    	; 0x1326 <__fp_pscA>
    10aa:	30 f0       	brcs	.+12     	; 0x10b8 <__addsf3+0x18>
    10ac:	43 d1       	rcall	.+646    	; 0x1334 <__fp_pscB>
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <__addsf3+0x18>
    10b0:	31 f4       	brne	.+12     	; 0x10be <__addsf3+0x1e>
    10b2:	9f 3f       	cpi	r25, 0xFF	; 255
    10b4:	11 f4       	brne	.+4      	; 0x10ba <__addsf3+0x1a>
    10b6:	1e f4       	brtc	.+6      	; 0x10be <__addsf3+0x1e>
    10b8:	33 c1       	rjmp	.+614    	; 0x1320 <__fp_nan>
    10ba:	0e f4       	brtc	.+2      	; 0x10be <__addsf3+0x1e>
    10bc:	e0 95       	com	r30
    10be:	e7 fb       	bst	r30, 7
    10c0:	29 c1       	rjmp	.+594    	; 0x1314 <__fp_inf>

000010c2 <__addsf3x>:
    10c2:	e9 2f       	mov	r30, r25
    10c4:	4f d1       	rcall	.+670    	; 0x1364 <__fp_split3>
    10c6:	80 f3       	brcs	.-32     	; 0x10a8 <__addsf3+0x8>
    10c8:	ba 17       	cp	r27, r26
    10ca:	62 07       	cpc	r22, r18
    10cc:	73 07       	cpc	r23, r19
    10ce:	84 07       	cpc	r24, r20
    10d0:	95 07       	cpc	r25, r21
    10d2:	18 f0       	brcs	.+6      	; 0x10da <__addsf3x+0x18>
    10d4:	71 f4       	brne	.+28     	; 0x10f2 <__addsf3x+0x30>
    10d6:	9e f5       	brtc	.+102    	; 0x113e <__addsf3x+0x7c>
    10d8:	67 c1       	rjmp	.+718    	; 0x13a8 <__fp_zero>
    10da:	0e f4       	brtc	.+2      	; 0x10de <__addsf3x+0x1c>
    10dc:	e0 95       	com	r30
    10de:	0b 2e       	mov	r0, r27
    10e0:	ba 2f       	mov	r27, r26
    10e2:	a0 2d       	mov	r26, r0
    10e4:	0b 01       	movw	r0, r22
    10e6:	b9 01       	movw	r22, r18
    10e8:	90 01       	movw	r18, r0
    10ea:	0c 01       	movw	r0, r24
    10ec:	ca 01       	movw	r24, r20
    10ee:	a0 01       	movw	r20, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	ff 27       	eor	r31, r31
    10f4:	59 1b       	sub	r21, r25
    10f6:	99 f0       	breq	.+38     	; 0x111e <__addsf3x+0x5c>
    10f8:	59 3f       	cpi	r21, 0xF9	; 249
    10fa:	50 f4       	brcc	.+20     	; 0x1110 <__addsf3x+0x4e>
    10fc:	50 3e       	cpi	r21, 0xE0	; 224
    10fe:	68 f1       	brcs	.+90     	; 0x115a <__addsf3x+0x98>
    1100:	1a 16       	cp	r1, r26
    1102:	f0 40       	sbci	r31, 0x00	; 0
    1104:	a2 2f       	mov	r26, r18
    1106:	23 2f       	mov	r18, r19
    1108:	34 2f       	mov	r19, r20
    110a:	44 27       	eor	r20, r20
    110c:	58 5f       	subi	r21, 0xF8	; 248
    110e:	f3 cf       	rjmp	.-26     	; 0x10f6 <__addsf3x+0x34>
    1110:	46 95       	lsr	r20
    1112:	37 95       	ror	r19
    1114:	27 95       	ror	r18
    1116:	a7 95       	ror	r26
    1118:	f0 40       	sbci	r31, 0x00	; 0
    111a:	53 95       	inc	r21
    111c:	c9 f7       	brne	.-14     	; 0x1110 <__addsf3x+0x4e>
    111e:	7e f4       	brtc	.+30     	; 0x113e <__addsf3x+0x7c>
    1120:	1f 16       	cp	r1, r31
    1122:	ba 0b       	sbc	r27, r26
    1124:	62 0b       	sbc	r22, r18
    1126:	73 0b       	sbc	r23, r19
    1128:	84 0b       	sbc	r24, r20
    112a:	ba f0       	brmi	.+46     	; 0x115a <__addsf3x+0x98>
    112c:	91 50       	subi	r25, 0x01	; 1
    112e:	a1 f0       	breq	.+40     	; 0x1158 <__addsf3x+0x96>
    1130:	ff 0f       	add	r31, r31
    1132:	bb 1f       	adc	r27, r27
    1134:	66 1f       	adc	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	c2 f7       	brpl	.-16     	; 0x112c <__addsf3x+0x6a>
    113c:	0e c0       	rjmp	.+28     	; 0x115a <__addsf3x+0x98>
    113e:	ba 0f       	add	r27, r26
    1140:	62 1f       	adc	r22, r18
    1142:	73 1f       	adc	r23, r19
    1144:	84 1f       	adc	r24, r20
    1146:	48 f4       	brcc	.+18     	; 0x115a <__addsf3x+0x98>
    1148:	87 95       	ror	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b7 95       	ror	r27
    1150:	f7 95       	ror	r31
    1152:	9e 3f       	cpi	r25, 0xFE	; 254
    1154:	08 f0       	brcs	.+2      	; 0x1158 <__addsf3x+0x96>
    1156:	b3 cf       	rjmp	.-154    	; 0x10be <__addsf3+0x1e>
    1158:	93 95       	inc	r25
    115a:	88 0f       	add	r24, r24
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__addsf3x+0x9e>
    115e:	99 27       	eor	r25, r25
    1160:	ee 0f       	add	r30, r30
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	08 95       	ret

00001168 <__divsf3>:
    1168:	0c d0       	rcall	.+24     	; 0x1182 <__divsf3x>
    116a:	eb c0       	rjmp	.+470    	; 0x1342 <__fp_round>
    116c:	e3 d0       	rcall	.+454    	; 0x1334 <__fp_pscB>
    116e:	40 f0       	brcs	.+16     	; 0x1180 <__divsf3+0x18>
    1170:	da d0       	rcall	.+436    	; 0x1326 <__fp_pscA>
    1172:	30 f0       	brcs	.+12     	; 0x1180 <__divsf3+0x18>
    1174:	21 f4       	brne	.+8      	; 0x117e <__divsf3+0x16>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	19 f0       	breq	.+6      	; 0x1180 <__divsf3+0x18>
    117a:	cc c0       	rjmp	.+408    	; 0x1314 <__fp_inf>
    117c:	51 11       	cpse	r21, r1
    117e:	15 c1       	rjmp	.+554    	; 0x13aa <__fp_szero>
    1180:	cf c0       	rjmp	.+414    	; 0x1320 <__fp_nan>

00001182 <__divsf3x>:
    1182:	f0 d0       	rcall	.+480    	; 0x1364 <__fp_split3>
    1184:	98 f3       	brcs	.-26     	; 0x116c <__divsf3+0x4>

00001186 <__divsf3_pse>:
    1186:	99 23       	and	r25, r25
    1188:	c9 f3       	breq	.-14     	; 0x117c <__divsf3+0x14>
    118a:	55 23       	and	r21, r21
    118c:	b1 f3       	breq	.-20     	; 0x117a <__divsf3+0x12>
    118e:	95 1b       	sub	r25, r21
    1190:	55 0b       	sbc	r21, r21
    1192:	bb 27       	eor	r27, r27
    1194:	aa 27       	eor	r26, r26
    1196:	62 17       	cp	r22, r18
    1198:	73 07       	cpc	r23, r19
    119a:	84 07       	cpc	r24, r20
    119c:	38 f0       	brcs	.+14     	; 0x11ac <__divsf3_pse+0x26>
    119e:	9f 5f       	subi	r25, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	44 1f       	adc	r20, r20
    11a8:	aa 1f       	adc	r26, r26
    11aa:	a9 f3       	breq	.-22     	; 0x1196 <__divsf3_pse+0x10>
    11ac:	33 d0       	rcall	.+102    	; 0x1214 <__divsf3_pse+0x8e>
    11ae:	0e 2e       	mov	r0, r30
    11b0:	3a f0       	brmi	.+14     	; 0x11c0 <__divsf3_pse+0x3a>
    11b2:	e0 e8       	ldi	r30, 0x80	; 128
    11b4:	30 d0       	rcall	.+96     	; 0x1216 <__divsf3_pse+0x90>
    11b6:	91 50       	subi	r25, 0x01	; 1
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	e6 95       	lsr	r30
    11bc:	00 1c       	adc	r0, r0
    11be:	ca f7       	brpl	.-14     	; 0x11b2 <__divsf3_pse+0x2c>
    11c0:	29 d0       	rcall	.+82     	; 0x1214 <__divsf3_pse+0x8e>
    11c2:	fe 2f       	mov	r31, r30
    11c4:	27 d0       	rcall	.+78     	; 0x1214 <__divsf3_pse+0x8e>
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	bb 1f       	adc	r27, r27
    11ce:	26 17       	cp	r18, r22
    11d0:	37 07       	cpc	r19, r23
    11d2:	48 07       	cpc	r20, r24
    11d4:	ab 07       	cpc	r26, r27
    11d6:	b0 e8       	ldi	r27, 0x80	; 128
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__divsf3_pse+0x56>
    11da:	bb 0b       	sbc	r27, r27
    11dc:	80 2d       	mov	r24, r0
    11de:	bf 01       	movw	r22, r30
    11e0:	ff 27       	eor	r31, r31
    11e2:	93 58       	subi	r25, 0x83	; 131
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255
    11e6:	2a f0       	brmi	.+10     	; 0x11f2 <__divsf3_pse+0x6c>
    11e8:	9e 3f       	cpi	r25, 0xFE	; 254
    11ea:	51 05       	cpc	r21, r1
    11ec:	68 f0       	brcs	.+26     	; 0x1208 <__divsf3_pse+0x82>
    11ee:	92 c0       	rjmp	.+292    	; 0x1314 <__fp_inf>
    11f0:	dc c0       	rjmp	.+440    	; 0x13aa <__fp_szero>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	ec f3       	brlt	.-6      	; 0x11f0 <__divsf3_pse+0x6a>
    11f6:	98 3e       	cpi	r25, 0xE8	; 232
    11f8:	dc f3       	brlt	.-10     	; 0x11f0 <__divsf3_pse+0x6a>
    11fa:	86 95       	lsr	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f7 95       	ror	r31
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__divsf3_pse+0x74>
    1208:	88 0f       	add	r24, r24
    120a:	91 1d       	adc	r25, r1
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret
    1214:	e1 e0       	ldi	r30, 0x01	; 1
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	bb 1f       	adc	r27, r27
    121e:	62 17       	cp	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	84 07       	cpc	r24, r20
    1224:	ba 07       	cpc	r27, r26
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__divsf3_pse+0xaa>
    1228:	62 1b       	sub	r22, r18
    122a:	73 0b       	sbc	r23, r19
    122c:	84 0b       	sbc	r24, r20
    122e:	ba 0b       	sbc	r27, r26
    1230:	ee 1f       	adc	r30, r30
    1232:	88 f7       	brcc	.-30     	; 0x1216 <__divsf3_pse+0x90>
    1234:	e0 95       	com	r30
    1236:	08 95       	ret

00001238 <__fixsfsi>:
    1238:	04 d0       	rcall	.+8      	; 0x1242 <__fixunssfsi>
    123a:	68 94       	set
    123c:	b1 11       	cpse	r27, r1
    123e:	b5 c0       	rjmp	.+362    	; 0x13aa <__fp_szero>
    1240:	08 95       	ret

00001242 <__fixunssfsi>:
    1242:	98 d0       	rcall	.+304    	; 0x1374 <__fp_splitA>
    1244:	88 f0       	brcs	.+34     	; 0x1268 <__fixunssfsi+0x26>
    1246:	9f 57       	subi	r25, 0x7F	; 127
    1248:	90 f0       	brcs	.+36     	; 0x126e <__fixunssfsi+0x2c>
    124a:	b9 2f       	mov	r27, r25
    124c:	99 27       	eor	r25, r25
    124e:	b7 51       	subi	r27, 0x17	; 23
    1250:	a0 f0       	brcs	.+40     	; 0x127a <__fixunssfsi+0x38>
    1252:	d1 f0       	breq	.+52     	; 0x1288 <__fixunssfsi+0x46>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	1a f0       	brmi	.+6      	; 0x1264 <__fixunssfsi+0x22>
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__fixunssfsi+0x12>
    1262:	12 c0       	rjmp	.+36     	; 0x1288 <__fixunssfsi+0x46>
    1264:	b1 30       	cpi	r27, 0x01	; 1
    1266:	81 f0       	breq	.+32     	; 0x1288 <__fixunssfsi+0x46>
    1268:	9f d0       	rcall	.+318    	; 0x13a8 <__fp_zero>
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	08 95       	ret
    126e:	9c c0       	rjmp	.+312    	; 0x13a8 <__fp_zero>
    1270:	67 2f       	mov	r22, r23
    1272:	78 2f       	mov	r23, r24
    1274:	88 27       	eor	r24, r24
    1276:	b8 5f       	subi	r27, 0xF8	; 248
    1278:	39 f0       	breq	.+14     	; 0x1288 <__fixunssfsi+0x46>
    127a:	b9 3f       	cpi	r27, 0xF9	; 249
    127c:	cc f3       	brlt	.-14     	; 0x1270 <__fixunssfsi+0x2e>
    127e:	86 95       	lsr	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b3 95       	inc	r27
    1286:	d9 f7       	brne	.-10     	; 0x127e <__fixunssfsi+0x3c>
    1288:	3e f4       	brtc	.+14     	; 0x1298 <__fixunssfsi+0x56>
    128a:	90 95       	com	r25
    128c:	80 95       	com	r24
    128e:	70 95       	com	r23
    1290:	61 95       	neg	r22
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__floatunsisf>:
    129a:	e8 94       	clt
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <__floatsisf+0x12>

0000129e <__floatsisf>:
    129e:	97 fb       	bst	r25, 7
    12a0:	3e f4       	brtc	.+14     	; 0x12b0 <__floatsisf+0x12>
    12a2:	90 95       	com	r25
    12a4:	80 95       	com	r24
    12a6:	70 95       	com	r23
    12a8:	61 95       	neg	r22
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	99 23       	and	r25, r25
    12b2:	a9 f0       	breq	.+42     	; 0x12de <__floatsisf+0x40>
    12b4:	f9 2f       	mov	r31, r25
    12b6:	96 e9       	ldi	r25, 0x96	; 150
    12b8:	bb 27       	eor	r27, r27
    12ba:	93 95       	inc	r25
    12bc:	f6 95       	lsr	r31
    12be:	87 95       	ror	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b7 95       	ror	r27
    12c6:	f1 11       	cpse	r31, r1
    12c8:	f8 cf       	rjmp	.-16     	; 0x12ba <__floatsisf+0x1c>
    12ca:	fa f4       	brpl	.+62     	; 0x130a <__floatsisf+0x6c>
    12cc:	bb 0f       	add	r27, r27
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <__floatsisf+0x36>
    12d0:	60 ff       	sbrs	r22, 0
    12d2:	1b c0       	rjmp	.+54     	; 0x130a <__floatsisf+0x6c>
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	8f 4f       	sbci	r24, 0xFF	; 255
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <__floatsisf+0x6c>
    12de:	88 23       	and	r24, r24
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <__floatsisf+0x48>
    12e2:	96 e9       	ldi	r25, 0x96	; 150
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <__floatsisf+0x6a>
    12e6:	77 23       	and	r23, r23
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <__floatsisf+0x54>
    12ea:	9e e8       	ldi	r25, 0x8E	; 142
    12ec:	87 2f       	mov	r24, r23
    12ee:	76 2f       	mov	r23, r22
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <__floatsisf+0x5e>
    12f2:	66 23       	and	r22, r22
    12f4:	71 f0       	breq	.+28     	; 0x1312 <__floatsisf+0x74>
    12f6:	96 e8       	ldi	r25, 0x86	; 134
    12f8:	86 2f       	mov	r24, r22
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	2a f0       	brmi	.+10     	; 0x130a <__floatsisf+0x6c>
    1300:	9a 95       	dec	r25
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	da f7       	brpl	.-10     	; 0x1300 <__floatsisf+0x62>
    130a:	88 0f       	add	r24, r24
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <__fp_inf>:
    1314:	97 f9       	bld	r25, 7
    1316:	9f 67       	ori	r25, 0x7F	; 127
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	08 95       	ret

00001320 <__fp_nan>:
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	80 ec       	ldi	r24, 0xC0	; 192
    1324:	08 95       	ret

00001326 <__fp_pscA>:
    1326:	00 24       	eor	r0, r0
    1328:	0a 94       	dec	r0
    132a:	16 16       	cp	r1, r22
    132c:	17 06       	cpc	r1, r23
    132e:	18 06       	cpc	r1, r24
    1330:	09 06       	cpc	r0, r25
    1332:	08 95       	ret

00001334 <__fp_pscB>:
    1334:	00 24       	eor	r0, r0
    1336:	0a 94       	dec	r0
    1338:	12 16       	cp	r1, r18
    133a:	13 06       	cpc	r1, r19
    133c:	14 06       	cpc	r1, r20
    133e:	05 06       	cpc	r0, r21
    1340:	08 95       	ret

00001342 <__fp_round>:
    1342:	09 2e       	mov	r0, r25
    1344:	03 94       	inc	r0
    1346:	00 0c       	add	r0, r0
    1348:	11 f4       	brne	.+4      	; 0x134e <__fp_round+0xc>
    134a:	88 23       	and	r24, r24
    134c:	52 f0       	brmi	.+20     	; 0x1362 <__fp_round+0x20>
    134e:	bb 0f       	add	r27, r27
    1350:	40 f4       	brcc	.+16     	; 0x1362 <__fp_round+0x20>
    1352:	bf 2b       	or	r27, r31
    1354:	11 f4       	brne	.+4      	; 0x135a <__fp_round+0x18>
    1356:	60 ff       	sbrs	r22, 0
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <__fp_round+0x20>
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	8f 4f       	sbci	r24, 0xFF	; 255
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	08 95       	ret

00001364 <__fp_split3>:
    1364:	57 fd       	sbrc	r21, 7
    1366:	90 58       	subi	r25, 0x80	; 128
    1368:	44 0f       	add	r20, r20
    136a:	55 1f       	adc	r21, r21
    136c:	59 f0       	breq	.+22     	; 0x1384 <__fp_splitA+0x10>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	71 f0       	breq	.+28     	; 0x138e <__fp_splitA+0x1a>
    1372:	47 95       	ror	r20

00001374 <__fp_splitA>:
    1374:	88 0f       	add	r24, r24
    1376:	97 fb       	bst	r25, 7
    1378:	99 1f       	adc	r25, r25
    137a:	61 f0       	breq	.+24     	; 0x1394 <__fp_splitA+0x20>
    137c:	9f 3f       	cpi	r25, 0xFF	; 255
    137e:	79 f0       	breq	.+30     	; 0x139e <__fp_splitA+0x2a>
    1380:	87 95       	ror	r24
    1382:	08 95       	ret
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	55 1f       	adc	r21, r21
    138c:	f2 cf       	rjmp	.-28     	; 0x1372 <__fp_split3+0xe>
    138e:	46 95       	lsr	r20
    1390:	f1 df       	rcall	.-30     	; 0x1374 <__fp_splitA>
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <__fp_splitA+0x30>
    1394:	16 16       	cp	r1, r22
    1396:	17 06       	cpc	r1, r23
    1398:	18 06       	cpc	r1, r24
    139a:	99 1f       	adc	r25, r25
    139c:	f1 cf       	rjmp	.-30     	; 0x1380 <__fp_splitA+0xc>
    139e:	86 95       	lsr	r24
    13a0:	71 05       	cpc	r23, r1
    13a2:	61 05       	cpc	r22, r1
    13a4:	08 94       	sec
    13a6:	08 95       	ret

000013a8 <__fp_zero>:
    13a8:	e8 94       	clt

000013aa <__fp_szero>:
    13aa:	bb 27       	eor	r27, r27
    13ac:	66 27       	eor	r22, r22
    13ae:	77 27       	eor	r23, r23
    13b0:	cb 01       	movw	r24, r22
    13b2:	97 f9       	bld	r25, 7
    13b4:	08 95       	ret

000013b6 <__mulsf3>:
    13b6:	0b d0       	rcall	.+22     	; 0x13ce <__mulsf3x>
    13b8:	c4 cf       	rjmp	.-120    	; 0x1342 <__fp_round>
    13ba:	b5 df       	rcall	.-150    	; 0x1326 <__fp_pscA>
    13bc:	28 f0       	brcs	.+10     	; 0x13c8 <__mulsf3+0x12>
    13be:	ba df       	rcall	.-140    	; 0x1334 <__fp_pscB>
    13c0:	18 f0       	brcs	.+6      	; 0x13c8 <__mulsf3+0x12>
    13c2:	95 23       	and	r25, r21
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__mulsf3+0x12>
    13c6:	a6 cf       	rjmp	.-180    	; 0x1314 <__fp_inf>
    13c8:	ab cf       	rjmp	.-170    	; 0x1320 <__fp_nan>
    13ca:	11 24       	eor	r1, r1
    13cc:	ee cf       	rjmp	.-36     	; 0x13aa <__fp_szero>

000013ce <__mulsf3x>:
    13ce:	ca df       	rcall	.-108    	; 0x1364 <__fp_split3>
    13d0:	a0 f3       	brcs	.-24     	; 0x13ba <__mulsf3+0x4>

000013d2 <__mulsf3_pse>:
    13d2:	95 9f       	mul	r25, r21
    13d4:	d1 f3       	breq	.-12     	; 0x13ca <__mulsf3+0x14>
    13d6:	95 0f       	add	r25, r21
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	55 1f       	adc	r21, r21
    13dc:	62 9f       	mul	r22, r18
    13de:	f0 01       	movw	r30, r0
    13e0:	72 9f       	mul	r23, r18
    13e2:	bb 27       	eor	r27, r27
    13e4:	f0 0d       	add	r31, r0
    13e6:	b1 1d       	adc	r27, r1
    13e8:	63 9f       	mul	r22, r19
    13ea:	aa 27       	eor	r26, r26
    13ec:	f0 0d       	add	r31, r0
    13ee:	b1 1d       	adc	r27, r1
    13f0:	aa 1f       	adc	r26, r26
    13f2:	64 9f       	mul	r22, r20
    13f4:	66 27       	eor	r22, r22
    13f6:	b0 0d       	add	r27, r0
    13f8:	a1 1d       	adc	r26, r1
    13fa:	66 1f       	adc	r22, r22
    13fc:	82 9f       	mul	r24, r18
    13fe:	22 27       	eor	r18, r18
    1400:	b0 0d       	add	r27, r0
    1402:	a1 1d       	adc	r26, r1
    1404:	62 1f       	adc	r22, r18
    1406:	73 9f       	mul	r23, r19
    1408:	b0 0d       	add	r27, r0
    140a:	a1 1d       	adc	r26, r1
    140c:	62 1f       	adc	r22, r18
    140e:	83 9f       	mul	r24, r19
    1410:	a0 0d       	add	r26, r0
    1412:	61 1d       	adc	r22, r1
    1414:	22 1f       	adc	r18, r18
    1416:	74 9f       	mul	r23, r20
    1418:	33 27       	eor	r19, r19
    141a:	a0 0d       	add	r26, r0
    141c:	61 1d       	adc	r22, r1
    141e:	23 1f       	adc	r18, r19
    1420:	84 9f       	mul	r24, r20
    1422:	60 0d       	add	r22, r0
    1424:	21 1d       	adc	r18, r1
    1426:	82 2f       	mov	r24, r18
    1428:	76 2f       	mov	r23, r22
    142a:	6a 2f       	mov	r22, r26
    142c:	11 24       	eor	r1, r1
    142e:	9f 57       	subi	r25, 0x7F	; 127
    1430:	50 40       	sbci	r21, 0x00	; 0
    1432:	8a f0       	brmi	.+34     	; 0x1456 <__mulsf3_pse+0x84>
    1434:	e1 f0       	breq	.+56     	; 0x146e <__mulsf3_pse+0x9c>
    1436:	88 23       	and	r24, r24
    1438:	4a f0       	brmi	.+18     	; 0x144c <__mulsf3_pse+0x7a>
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	bb 1f       	adc	r27, r27
    1440:	66 1f       	adc	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	91 50       	subi	r25, 0x01	; 1
    1448:	50 40       	sbci	r21, 0x00	; 0
    144a:	a9 f7       	brne	.-22     	; 0x1436 <__mulsf3_pse+0x64>
    144c:	9e 3f       	cpi	r25, 0xFE	; 254
    144e:	51 05       	cpc	r21, r1
    1450:	70 f0       	brcs	.+28     	; 0x146e <__mulsf3_pse+0x9c>
    1452:	60 cf       	rjmp	.-320    	; 0x1314 <__fp_inf>
    1454:	aa cf       	rjmp	.-172    	; 0x13aa <__fp_szero>
    1456:	5f 3f       	cpi	r21, 0xFF	; 255
    1458:	ec f3       	brlt	.-6      	; 0x1454 <__mulsf3_pse+0x82>
    145a:	98 3e       	cpi	r25, 0xE8	; 232
    145c:	dc f3       	brlt	.-10     	; 0x1454 <__mulsf3_pse+0x82>
    145e:	86 95       	lsr	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	f7 95       	ror	r31
    1468:	e7 95       	ror	r30
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	c1 f7       	brne	.-16     	; 0x145e <__mulsf3_pse+0x8c>
    146e:	fe 2b       	or	r31, r30
    1470:	88 0f       	add	r24, r24
    1472:	91 1d       	adc	r25, r1
    1474:	96 95       	lsr	r25
    1476:	87 95       	ror	r24
    1478:	97 f9       	bld	r25, 7
    147a:	08 95       	ret

0000147c <__divmodhi4>:
    147c:	97 fb       	bst	r25, 7
    147e:	07 2e       	mov	r0, r23
    1480:	16 f4       	brtc	.+4      	; 0x1486 <__divmodhi4+0xa>
    1482:	00 94       	com	r0
    1484:	06 d0       	rcall	.+12     	; 0x1492 <__divmodhi4_neg1>
    1486:	77 fd       	sbrc	r23, 7
    1488:	08 d0       	rcall	.+16     	; 0x149a <__divmodhi4_neg2>
    148a:	0b d0       	rcall	.+22     	; 0x14a2 <__udivmodhi4>
    148c:	07 fc       	sbrc	r0, 7
    148e:	05 d0       	rcall	.+10     	; 0x149a <__divmodhi4_neg2>
    1490:	3e f4       	brtc	.+14     	; 0x14a0 <__divmodhi4_exit>

00001492 <__divmodhi4_neg1>:
    1492:	90 95       	com	r25
    1494:	81 95       	neg	r24
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	08 95       	ret

0000149a <__divmodhi4_neg2>:
    149a:	70 95       	com	r23
    149c:	61 95       	neg	r22
    149e:	7f 4f       	sbci	r23, 0xFF	; 255

000014a0 <__divmodhi4_exit>:
    14a0:	08 95       	ret

000014a2 <__udivmodhi4>:
    14a2:	aa 1b       	sub	r26, r26
    14a4:	bb 1b       	sub	r27, r27
    14a6:	51 e1       	ldi	r21, 0x11	; 17
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <__udivmodhi4_ep>

000014aa <__udivmodhi4_loop>:
    14aa:	aa 1f       	adc	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	a6 17       	cp	r26, r22
    14b0:	b7 07       	cpc	r27, r23
    14b2:	10 f0       	brcs	.+4      	; 0x14b8 <__udivmodhi4_ep>
    14b4:	a6 1b       	sub	r26, r22
    14b6:	b7 0b       	sbc	r27, r23

000014b8 <__udivmodhi4_ep>:
    14b8:	88 1f       	adc	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	5a 95       	dec	r21
    14be:	a9 f7       	brne	.-22     	; 0x14aa <__udivmodhi4_loop>
    14c0:	80 95       	com	r24
    14c2:	90 95       	com	r25
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	08 95       	ret

000014ca <_exit>:
    14ca:	f8 94       	cli

000014cc <__stop_program>:
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <__stop_program>
