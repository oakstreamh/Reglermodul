
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000144e  000014e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800176  00800176  00001558  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b1f  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088b  00000000  00000000  0000320f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a79  00000000  00000000  00003a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000042c  00000000  00000000  00005514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010a71  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010ba  00000000  00000000  000163b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  0001746b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000378d  00000000  00000000  000175bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	58 c6       	rjmp	.+3248   	; 0xcfe <__vector_19>
      4e:	00 00       	nop
      50:	33 c7       	rjmp	.+3686   	; 0xeb8 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c7       	rjmp	.+3860   	; 0xf6e <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c5       	rjmp	.+2728   	; 0xb1a <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e4       	ldi	r30, 0x4E	; 78
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 37       	cpi	r26, 0x76	; 118
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e7       	ldi	r26, 0x76	; 118
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3b       	cpi	r26, 0xBE	; 190
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	90 d5       	rcall	.+2848   	; 0xbe4 <main>
      c4:	0c 94 25 0a 	jmp	0x144a	; 0x144a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_steering>:
 * The fuzzy logic controller is designed to manage the fourth state
 */

void FLC_steering(int c, int v)

{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c4 5c       	subi	r28, 0xC4	; 196
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	6c 01       	movw	r12, r24
     102:	2b 01       	movw	r4, r22
    
    
    
	if ((c == 227) & (v == 45))            // No lines detected
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	6d 32       	cpi	r22, 0x2D	; 45
     108:	71 05       	cpc	r23, r1
     10a:	09 f0       	breq	.+2      	; 0x10e <FLC_steering+0x44>
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	43 ee       	ldi	r20, 0xE3	; 227
     112:	c4 16       	cp	r12, r20
     114:	d1 04       	cpc	r13, r1
     116:	09 f0       	breq	.+2      	; 0x11a <FLC_steering+0x50>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	88 23       	and	r24, r24
     11c:	31 f0       	breq	.+12     	; 0x12a <FLC_steering+0x60>
     11e:	99 23       	and	r25, r25
     120:	21 f0       	breq	.+8      	; 0x12a <FLC_steering+0x60>
	{
		setServo(STRAIGHT);
     122:	84 e6       	ldi	r24, 0x64	; 100
     124:	9a e0       	ldi	r25, 0x0A	; 10
     126:	d0 d5       	rcall	.+2976   	; 0xcc8 <setServo>
     128:	22 c3       	rjmp	.+1604   	; 0x76e <FLC_steering+0x6a4>
		
	}
	else if ((c == 20) & (v == 45))        // right curvature, turn right
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	54 e1       	ldi	r21, 0x14	; 20
     12e:	c5 16       	cp	r12, r21
     130:	d1 04       	cpc	r13, r1
     132:	09 f0       	breq	.+2      	; 0x136 <FLC_steering+0x6c>
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	88 23       	and	r24, r24
     138:	31 f0       	breq	.+12     	; 0x146 <FLC_steering+0x7c>
     13a:	99 23       	and	r25, r25
     13c:	21 f0       	breq	.+8      	; 0x146 <FLC_steering+0x7c>
	{
		setServo(MAXRIGHT);
     13e:	8f e3       	ldi	r24, 0x3F	; 63
     140:	9c e0       	ldi	r25, 0x0C	; 12
     142:	c2 d5       	rcall	.+2948   	; 0xcc8 <setServo>
     144:	14 c3       	rjmp	.+1576   	; 0x76e <FLC_steering+0x6a4>
	}
	else if ((c == 210) & (v == 45))       // left curvature, turn left
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	c6 16       	cp	r12, r22
     14c:	d1 04       	cpc	r13, r1
     14e:	09 f0       	breq	.+2      	; 0x152 <FLC_steering+0x88>
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	88 23       	and	r24, r24
     154:	31 f0       	breq	.+12     	; 0x162 <FLC_steering+0x98>
     156:	99 23       	and	r25, r25
     158:	21 f0       	breq	.+8      	; 0x162 <FLC_steering+0x98>
	{
		setServo(MAXLEFT);
     15a:	86 ee       	ldi	r24, 0xE6	; 230
     15c:	97 e0       	ldi	r25, 0x07	; 7
     15e:	b4 d5       	rcall	.+2920   	; 0xcc8 <setServo>
     160:	06 c3       	rjmp	.+1548   	; 0x76e <FLC_steering+0x6a4>
	{
		
		
		///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_C; strcpy(delta_C.name, "delta_C");  //5-15 rakt på höger sida
     162:	88 e0       	ldi	r24, 0x08	; 8
     164:	e0 e0       	ldi	r30, 0x00	; 0
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	de 01       	movw	r26, r28
     16a:	ad 5e       	subi	r26, 0xED	; 237
     16c:	be 4f       	sbci	r27, 0xFE	; 254
     16e:	01 90       	ld	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	8a 95       	dec	r24
     174:	e1 f7       	brne	.-8      	; 0x16e <FLC_steering+0xa4>
		
		struct mf_type inNegative;
		MATLAB_MF(&inNegative, "inNegative", 34, 35, 60, 110);
     176:	3e 01       	movw	r6, r28
     178:	8d ed       	ldi	r24, 0xDD	; 221
     17a:	68 0e       	add	r6, r24
     17c:	71 1c       	adc	r7, r1
     17e:	0f 2e       	mov	r0, r31
     180:	fe e6       	ldi	r31, 0x6E	; 110
     182:	ef 2e       	mov	r14, r31
     184:	f1 2c       	mov	r15, r1
     186:	f0 2d       	mov	r31, r0
     188:	0c e3       	ldi	r16, 0x3C	; 60
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	23 e2       	ldi	r18, 0x23	; 35
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	42 e2       	ldi	r20, 0x22	; 34
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	68 e0       	ldi	r22, 0x08	; 8
     196:	71 e0       	ldi	r23, 0x01	; 1
     198:	c3 01       	movw	r24, r6
     19a:	90 d4       	rcall	.+2336   	; 0xabc <MATLAB_MF>
		struct mf_type inZero;
		MATLAB_MF(&inZero, "inZero", 75, 125, 125, 175);
     19c:	4e 01       	movw	r8, r28
     19e:	97 ec       	ldi	r25, 0xC7	; 199
     1a0:	89 0e       	add	r8, r25
     1a2:	91 1c       	adc	r9, r1
     1a4:	0f 2e       	mov	r0, r31
     1a6:	ff ea       	ldi	r31, 0xAF	; 175
     1a8:	ef 2e       	mov	r14, r31
     1aa:	f1 2c       	mov	r15, r1
     1ac:	f0 2d       	mov	r31, r0
     1ae:	0d e7       	ldi	r16, 0x7D	; 125
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	2d e7       	ldi	r18, 0x7D	; 125
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	4b e4       	ldi	r20, 0x4B	; 75
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	63 e1       	ldi	r22, 0x13	; 19
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	c4 01       	movw	r24, r8
     1c0:	7d d4       	rcall	.+2298   	; 0xabc <MATLAB_MF>
		struct mf_type inPositive;
		MATLAB_MF(&inPositive, "inPositive", 140, 190, 205, 206);
     1c2:	5e 01       	movw	r10, r28
     1c4:	a1 eb       	ldi	r26, 0xB1	; 177
     1c6:	aa 0e       	add	r10, r26
     1c8:	b1 1c       	adc	r11, r1
     1ca:	0f 2e       	mov	r0, r31
     1cc:	fe ec       	ldi	r31, 0xCE	; 206
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f1 2c       	mov	r15, r1
     1d2:	f0 2d       	mov	r31, r0
     1d4:	0d ec       	ldi	r16, 0xCD	; 205
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	2e eb       	ldi	r18, 0xBE	; 190
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	4c e8       	ldi	r20, 0x8C	; 140
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	6a e1       	ldi	r22, 0x1A	; 26
     1e2:	71 e0       	ldi	r23, 0x01	; 1
     1e4:	c5 01       	movw	r24, r10
     1e6:	6a d4       	rcall	.+2260   	; 0xabc <MATLAB_MF>
		
		delta_C.membership_functions = &inNegative;
     1e8:	c1 5e       	subi	r28, 0xE1	; 225
     1ea:	de 4f       	sbci	r29, 0xFE	; 254
     1ec:	79 82       	std	Y+1, r7	; 0x01
     1ee:	68 82       	st	Y, r6
     1f0:	cf 51       	subi	r28, 0x1F	; 31
     1f2:	d1 40       	sbci	r29, 0x01	; 1
		inNegative.next = &inZero;
     1f4:	f3 01       	movw	r30, r6
     1f6:	95 8a       	std	Z+21, r9	; 0x15
     1f8:	84 8a       	std	Z+20, r8	; 0x14
		inZero.next = &inPositive;
     1fa:	d4 01       	movw	r26, r8
     1fc:	55 96       	adiw	r26, 0x15	; 21
     1fe:	bc 92       	st	X, r11
     200:	ae 92       	st	-X, r10
     202:	54 97       	sbiw	r26, 0x14	; 20
		inPositive.next = NULL;
     204:	f5 01       	movw	r30, r10
     206:	15 8a       	std	Z+21, r1	; 0x15
     208:	14 8a       	std	Z+20, r1	; 0x14
		
		// set iErr's input value to measErr value
		if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     20a:	dd 20       	and	r13, r13
     20c:	3c f4       	brge	.+14     	; 0x21c <FLC_steering+0x152>
		{
			delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     20e:	c3 5e       	subi	r28, 0xE3	; 227
     210:	de 4f       	sbci	r29, 0xFE	; 254
     212:	19 82       	std	Y+1, r1	; 0x01
     214:	18 82       	st	Y, r1
     216:	cd 51       	subi	r28, 0x1D	; 29
     218:	d1 40       	sbci	r29, 0x01	; 1
     21a:	13 c0       	rjmp	.+38     	; 0x242 <FLC_steering+0x178>
		}
		else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     21c:	fe ec       	ldi	r31, 0xCE	; 206
     21e:	cf 16       	cp	r12, r31
     220:	d1 04       	cpc	r13, r1
     222:	4c f0       	brlt	.+18     	; 0x236 <FLC_steering+0x16c>
		{
			delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     224:	8d ec       	ldi	r24, 0xCD	; 205
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	c3 5e       	subi	r28, 0xE3	; 227
     22a:	de 4f       	sbci	r29, 0xFE	; 254
     22c:	99 83       	std	Y+1, r25	; 0x01
     22e:	88 83       	st	Y, r24
     230:	cd 51       	subi	r28, 0x1D	; 29
     232:	d1 40       	sbci	r29, 0x01	; 1
     234:	06 c0       	rjmp	.+12     	; 0x242 <FLC_steering+0x178>
		}
		else
		{
			delta_C.value = c;
     236:	c3 5e       	subi	r28, 0xE3	; 227
     238:	de 4f       	sbci	r29, 0xFE	; 254
     23a:	d9 82       	std	Y+1, r13	; 0x01
     23c:	c8 82       	st	Y, r12
     23e:	cd 51       	subi	r28, 0x1D	; 29
     240:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e5 e2       	ldi	r30, 0x25	; 37
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	de 01       	movw	r26, r28
     24a:	ad 5f       	subi	r26, 0xFD	; 253
     24c:	be 4f       	sbci	r27, 0xFE	; 254
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	8a 95       	dec	r24
     254:	e1 f7       	brne	.-8      	; 0x24e <FLC_steering+0x184>
		
		struct mf_type inMinus;
		MATLAB_MF(&inMinus, "inMinus", -1, 0, 10, 30);
     256:	4e 01       	movw	r8, r28
     258:	2b e9       	ldi	r18, 0x9B	; 155
     25a:	82 0e       	add	r8, r18
     25c:	91 1c       	adc	r9, r1
     25e:	0f 2e       	mov	r0, r31
     260:	fe e1       	ldi	r31, 0x1E	; 30
     262:	ef 2e       	mov	r14, r31
     264:	f1 2c       	mov	r15, r1
     266:	f0 2d       	mov	r31, r0
     268:	0a e0       	ldi	r16, 0x0A	; 10
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	4f ef       	ldi	r20, 0xFF	; 255
     272:	5f ef       	ldi	r21, 0xFF	; 255
     274:	6d e2       	ldi	r22, 0x2D	; 45
     276:	71 e0       	ldi	r23, 0x01	; 1
     278:	c4 01       	movw	r24, r8
     27a:	20 d4       	rcall	.+2112   	; 0xabc <MATLAB_MF>
		struct mf_type inNyll;
		MATLAB_MF(&inNyll, "inNyll", 20 , 40, 40, 60);
     27c:	5e 01       	movw	r10, r28
     27e:	45 e8       	ldi	r20, 0x85	; 133
     280:	a4 0e       	add	r10, r20
     282:	b1 1c       	adc	r11, r1
     284:	0f 2e       	mov	r0, r31
     286:	fc e3       	ldi	r31, 0x3C	; 60
     288:	ef 2e       	mov	r14, r31
     28a:	f1 2c       	mov	r15, r1
     28c:	f0 2d       	mov	r31, r0
     28e:	08 e2       	ldi	r16, 0x28	; 40
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	28 e2       	ldi	r18, 0x28	; 40
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	44 e1       	ldi	r20, 0x14	; 20
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	65 e3       	ldi	r22, 0x35	; 53
     29c:	71 e0       	ldi	r23, 0x01	; 1
     29e:	c5 01       	movw	r24, r10
     2a0:	0d d4       	rcall	.+2074   	; 0xabc <MATLAB_MF>
		struct mf_type inPlus;
		MATLAB_MF(&inPlus, "inPlus", 50, 70, 80, 81);
     2a2:	6e 01       	movw	r12, r28
     2a4:	5f e6       	ldi	r21, 0x6F	; 111
     2a6:	c5 0e       	add	r12, r21
     2a8:	d1 1c       	adc	r13, r1
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f1 e5       	ldi	r31, 0x51	; 81
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0
     2b4:	00 e5       	ldi	r16, 0x50	; 80
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	26 e4       	ldi	r18, 0x46	; 70
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	42 e3       	ldi	r20, 0x32	; 50
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	6c e3       	ldi	r22, 0x3C	; 60
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	c6 01       	movw	r24, r12
     2c6:	fa d3       	rcall	.+2036   	; 0xabc <MATLAB_MF>
		
		delta_V.membership_functions = &inMinus;
     2c8:	c1 5f       	subi	r28, 0xF1	; 241
     2ca:	de 4f       	sbci	r29, 0xFE	; 254
     2cc:	99 82       	std	Y+1, r9	; 0x01
     2ce:	88 82       	st	Y, r8
     2d0:	cf 50       	subi	r28, 0x0F	; 15
     2d2:	d1 40       	sbci	r29, 0x01	; 1
		inMinus.next = &inNyll;
     2d4:	d4 01       	movw	r26, r8
     2d6:	55 96       	adiw	r26, 0x15	; 21
     2d8:	bc 92       	st	X, r11
     2da:	ae 92       	st	-X, r10
     2dc:	54 97       	sbiw	r26, 0x14	; 20
		inNyll.next = &inPlus;
     2de:	f5 01       	movw	r30, r10
     2e0:	d5 8a       	std	Z+21, r13	; 0x15
     2e2:	c4 8a       	std	Z+20, r12	; 0x14
		inPlus.next = NULL;
     2e4:	d6 01       	movw	r26, r12
     2e6:	55 96       	adiw	r26, 0x15	; 21
     2e8:	1c 92       	st	X, r1
     2ea:	1e 92       	st	-X, r1
     2ec:	54 97       	sbiw	r26, 0x14	; 20
		
		// set V's input value to V´s value
		if(v<0)				// if sensor value is smaller than error's input set lower limit
     2ee:	55 20       	and	r5, r5
     2f0:	3c f4       	brge	.+14     	; 0x300 <FLC_steering+0x236>
		{
			delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     2f2:	c3 5f       	subi	r28, 0xF3	; 243
     2f4:	de 4f       	sbci	r29, 0xFE	; 254
     2f6:	19 82       	std	Y+1, r1	; 0x01
     2f8:	18 82       	st	Y, r1
     2fa:	cd 50       	subi	r28, 0x0D	; 13
     2fc:	d1 40       	sbci	r29, 0x01	; 1
     2fe:	13 c0       	rjmp	.+38     	; 0x326 <FLC_steering+0x25c>
		}
		else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     300:	b1 e5       	ldi	r27, 0x51	; 81
     302:	4b 16       	cp	r4, r27
     304:	51 04       	cpc	r5, r1
     306:	4c f0       	brlt	.+18     	; 0x31a <FLC_steering+0x250>
		{
			delta_V.value = 80;  // force input value to lowest point in error's input set
     308:	80 e5       	ldi	r24, 0x50	; 80
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	c3 5f       	subi	r28, 0xF3	; 243
     30e:	de 4f       	sbci	r29, 0xFE	; 254
     310:	99 83       	std	Y+1, r25	; 0x01
     312:	88 83       	st	Y, r24
     314:	cd 50       	subi	r28, 0x0D	; 13
     316:	d1 40       	sbci	r29, 0x01	; 1
     318:	06 c0       	rjmp	.+12     	; 0x326 <FLC_steering+0x25c>
		}
		else
		{
			delta_V.value = v;
     31a:	c3 5f       	subi	r28, 0xF3	; 243
     31c:	de 4f       	sbci	r29, 0xFE	; 254
     31e:	59 82       	std	Y+1, r5	; 0x01
     320:	48 82       	st	Y, r4
     322:	cd 50       	subi	r28, 0x0D	; 13
     324:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

		struct io_type steering; strcpy(steering.name, "steering");
     326:	1e 01       	movw	r2, r28
     328:	e3 ef       	ldi	r30, 0xF3	; 243
     32a:	2e 0e       	add	r2, r30
     32c:	31 1c       	adc	r3, r1
     32e:	89 e0       	ldi	r24, 0x09	; 9
     330:	e3 e4       	ldi	r30, 0x43	; 67
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	d1 01       	movw	r26, r2
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	8a 95       	dec	r24
     33c:	e1 f7       	brne	.-8      	; 0x336 <FLC_steering+0x26c>
		
		struct mf_type sharpLeft;
		MATLAB_MF(&sharpLeft, "sharpLeft", 2259, 2260, 2260, 2360);
     33e:	2e 01       	movw	r4, r28
     340:	f9 e5       	ldi	r31, 0x59	; 89
     342:	4f 0e       	add	r4, r31
     344:	51 1c       	adc	r5, r1
     346:	0f 2e       	mov	r0, r31
     348:	f8 e3       	ldi	r31, 0x38	; 56
     34a:	ef 2e       	mov	r14, r31
     34c:	f9 e0       	ldi	r31, 0x09	; 9
     34e:	ff 2e       	mov	r15, r31
     350:	f0 2d       	mov	r31, r0
     352:	04 ed       	ldi	r16, 0xD4	; 212
     354:	18 e0       	ldi	r17, 0x08	; 8
     356:	24 ed       	ldi	r18, 0xD4	; 212
     358:	38 e0       	ldi	r19, 0x08	; 8
     35a:	43 ed       	ldi	r20, 0xD3	; 211
     35c:	58 e0       	ldi	r21, 0x08	; 8
     35e:	6c e4       	ldi	r22, 0x4C	; 76
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	c2 01       	movw	r24, r4
     364:	ab d3       	rcall	.+1878   	; 0xabc <MATLAB_MF>
		struct mf_type left;
		MATLAB_MF(&left, "left", 2360, 2460, 2460, 2560);
     366:	6e 01       	movw	r12, r28
     368:	23 e4       	ldi	r18, 0x43	; 67
     36a:	c2 0e       	add	r12, r18
     36c:	d1 1c       	adc	r13, r1
     36e:	0f 2e       	mov	r0, r31
     370:	e1 2c       	mov	r14, r1
     372:	fa e0       	ldi	r31, 0x0A	; 10
     374:	ff 2e       	mov	r15, r31
     376:	f0 2d       	mov	r31, r0
     378:	0c e9       	ldi	r16, 0x9C	; 156
     37a:	19 e0       	ldi	r17, 0x09	; 9
     37c:	2c e9       	ldi	r18, 0x9C	; 156
     37e:	39 e0       	ldi	r19, 0x09	; 9
     380:	48 e3       	ldi	r20, 0x38	; 56
     382:	59 e0       	ldi	r21, 0x09	; 9
     384:	66 e5       	ldi	r22, 0x56	; 86
     386:	71 e0       	ldi	r23, 0x01	; 1
     388:	c6 01       	movw	r24, r12
     38a:	98 d3       	rcall	.+1840   	; 0xabc <MATLAB_MF>
		struct mf_type straight;
		MATLAB_MF(&straight, "straight", 2560, 2660, 2660, 2760);
     38c:	5e 01       	movw	r10, r28
     38e:	4d e2       	ldi	r20, 0x2D	; 45
     390:	a4 0e       	add	r10, r20
     392:	b1 1c       	adc	r11, r1
     394:	0f 2e       	mov	r0, r31
     396:	f8 ec       	ldi	r31, 0xC8	; 200
     398:	ef 2e       	mov	r14, r31
     39a:	fa e0       	ldi	r31, 0x0A	; 10
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 2d       	mov	r31, r0
     3a0:	04 e6       	ldi	r16, 0x64	; 100
     3a2:	1a e0       	ldi	r17, 0x0A	; 10
     3a4:	24 e6       	ldi	r18, 0x64	; 100
     3a6:	3a e0       	ldi	r19, 0x0A	; 10
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	5a e0       	ldi	r21, 0x0A	; 10
     3ac:	6b e5       	ldi	r22, 0x5B	; 91
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	c5 01       	movw	r24, r10
     3b2:	84 d3       	rcall	.+1800   	; 0xabc <MATLAB_MF>
		struct mf_type right;
		MATLAB_MF(&right, "right", 2760, 2860, 2860, 2960);
     3b4:	4e 01       	movw	r8, r28
     3b6:	57 e1       	ldi	r21, 0x17	; 23
     3b8:	85 0e       	add	r8, r21
     3ba:	91 1c       	adc	r9, r1
     3bc:	0f 2e       	mov	r0, r31
     3be:	f0 e9       	ldi	r31, 0x90	; 144
     3c0:	ef 2e       	mov	r14, r31
     3c2:	fb e0       	ldi	r31, 0x0B	; 11
     3c4:	ff 2e       	mov	r15, r31
     3c6:	f0 2d       	mov	r31, r0
     3c8:	0c e2       	ldi	r16, 0x2C	; 44
     3ca:	1b e0       	ldi	r17, 0x0B	; 11
     3cc:	2c e2       	ldi	r18, 0x2C	; 44
     3ce:	3b e0       	ldi	r19, 0x0B	; 11
     3d0:	48 ec       	ldi	r20, 0xC8	; 200
     3d2:	5a e0       	ldi	r21, 0x0A	; 10
     3d4:	64 e6       	ldi	r22, 0x64	; 100
     3d6:	71 e0       	ldi	r23, 0x01	; 1
     3d8:	c4 01       	movw	r24, r8
     3da:	70 d3       	rcall	.+1760   	; 0xabc <MATLAB_MF>
		struct mf_type sharpRight;
		MATLAB_MF(&sharpRight, "sharpRight", 2960, 3060, 3060, 3061);
     3dc:	0f 2e       	mov	r0, r31
     3de:	f5 ef       	ldi	r31, 0xF5	; 245
     3e0:	ef 2e       	mov	r14, r31
     3e2:	fb e0       	ldi	r31, 0x0B	; 11
     3e4:	ff 2e       	mov	r15, r31
     3e6:	f0 2d       	mov	r31, r0
     3e8:	04 ef       	ldi	r16, 0xF4	; 244
     3ea:	1b e0       	ldi	r17, 0x0B	; 11
     3ec:	24 ef       	ldi	r18, 0xF4	; 244
     3ee:	3b e0       	ldi	r19, 0x0B	; 11
     3f0:	40 e9       	ldi	r20, 0x90	; 144
     3f2:	5b e0       	ldi	r21, 0x0B	; 11
     3f4:	6a e6       	ldi	r22, 0x6A	; 106
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	3c 01       	movw	r6, r24
     3fe:	5e d3       	rcall	.+1724   	; 0xabc <MATLAB_MF>
		
		steering.membership_functions = &sharpRight;
     400:	d1 01       	movw	r26, r2
     402:	1d 96       	adiw	r26, 0x0d	; 13
     404:	7c 92       	st	X, r7
     406:	6e 92       	st	-X, r6
     408:	1c 97       	sbiw	r26, 0x0c	; 12
		sharpRight.next = &right;
     40a:	9e 8a       	std	Y+22, r9	; 0x16
     40c:	8d 8a       	std	Y+21, r8	; 0x15
		right.next = &straight;
     40e:	bc a6       	std	Y+44, r11	; 0x2c
     410:	ab a6       	std	Y+43, r10	; 0x2b
		straight.next = &left;
     412:	23 96       	adiw	r28, 0x03	; 3
     414:	df ae       	std	Y+63, r13	; 0x3f
     416:	ce ae       	std	Y+62, r12	; 0x3e
     418:	23 97       	sbiw	r28, 0x03	; 3
		left.next = &sharpLeft;
     41a:	f6 01       	movw	r30, r12
     41c:	55 8a       	std	Z+21, r5	; 0x15
     41e:	44 8a       	std	Z+20, r4	; 0x14
		sharpLeft.next = NULL;
     420:	d2 01       	movw	r26, r4
     422:	55 96       	adiw	r26, 0x15	; 21
     424:	1c 92       	st	X, r1
     426:	1e 92       	st	-X, r1
     428:	54 97       	sbiw	r26, 0x14	; 20
		
		
		
		// pointers to top of lists

		System_Inputs = &delta_C;
     42a:	a6 54       	subi	r26, 0x46	; 70
     42c:	bf 4f       	sbci	r27, 0xFF	; 255
     42e:	b0 93 93 02 	sts	0x0293, r27
     432:	a0 93 92 02 	sts	0x0292, r26
		delta_C.next = &delta_V;
     436:	e0 54       	subi	r30, 0x40	; 64
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	1f 96       	adiw	r26, 0x0f	; 15
     43c:	fc 93       	st	X, r31
     43e:	ee 93       	st	-X, r30
     440:	1e 97       	sbiw	r26, 0x0e	; 14
		delta_V.next = NULL;
     442:	17 86       	std	Z+15, r1	; 0x0f
     444:	16 86       	std	Z+14, r1	; 0x0e
		System_Outputs = &steering;
     446:	30 92 91 02 	sts	0x0291, r3
     44a:	20 92 90 02 	sts	0x0290, r2
		steering.next = NULL;
     44e:	f1 01       	movw	r30, r2
     450:	17 86       	std	Z+15, r1	; 0x0f
     452:	16 86       	std	Z+14, r1	; 0x0e
		
		
		
		//RULE 9 "if C is zero AND V is high then servo is left"
		struct rule_element_type then9;
		then9.value = &left.value;
     454:	a2 55       	subi	r26, 0x52	; 82
     456:	bf 4f       	sbci	r27, 0xFF	; 255
     458:	86 01       	movw	r16, r12
     45a:	06 5f       	subi	r16, 0xF6	; 246
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	11 96       	adiw	r26, 0x01	; 1
     460:	1c 93       	st	X, r17
     462:	0e 93       	st	-X, r16
		then9.next = NULL;
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	1c 92       	st	X, r1
     468:	1e 92       	st	-X, r1
     46a:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if92;
		if92.value = &inPlus.value;
     46c:	ae 01       	movw	r20, r28
     46e:	43 54       	subi	r20, 0x43	; 67
     470:	5e 4f       	sbci	r21, 0xFE	; 254
     472:	5e 01       	movw	r10, r28
     474:	f9 e7       	ldi	r31, 0x79	; 121
     476:	af 0e       	add	r10, r31
     478:	b1 1c       	adc	r11, r1
     47a:	fa 01       	movw	r30, r20
     47c:	b1 82       	std	Z+1, r11	; 0x01
     47e:	a0 82       	st	Z, r10
		if92.next = NULL;
     480:	13 82       	std	Z+3, r1	; 0x03
     482:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if91;
		if91.value = &inZero.value;
     484:	ce 01       	movw	r24, r28
     486:	87 54       	subi	r24, 0x47	; 71
     488:	9e 4f       	sbci	r25, 0xFE	; 254
     48a:	3e 01       	movw	r6, r28
     48c:	f1 ed       	ldi	r31, 0xD1	; 209
     48e:	6f 0e       	add	r6, r31
     490:	71 1c       	adc	r7, r1
     492:	fc 01       	movw	r30, r24
     494:	71 82       	std	Z+1, r7	; 0x01
     496:	60 82       	st	Z, r6
		if91.next = &if92;
     498:	53 83       	std	Z+3, r21	; 0x03
     49a:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule9;
		rule9.if_side = &if91;
     49c:	e6 56       	subi	r30, 0x66	; 102
     49e:	f1 09       	sbc	r31, r1
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	80 83       	st	Z, r24
		rule9.then_side = &then9;
     4a4:	b3 83       	std	Z+3, r27	; 0x03
     4a6:	a2 83       	std	Z+2, r26	; 0x02
		rule9.next = NULL;
     4a8:	15 82       	std	Z+5, r1	; 0x05
     4aa:	14 82       	std	Z+4, r1	; 0x04

		
		//RULE 8 "if C is positive AND V is inPlus then servo is right"
		struct rule_element_type then8;
		then8.value = &right.value;
     4ac:	04 97       	sbiw	r24, 0x04	; 4
     4ae:	7e 01       	movw	r14, r28
     4b0:	21 e2       	ldi	r18, 0x21	; 33
     4b2:	e2 0e       	add	r14, r18
     4b4:	f1 1c       	adc	r15, r1
     4b6:	dc 01       	movw	r26, r24
     4b8:	11 96       	adiw	r26, 0x01	; 1
     4ba:	fc 92       	st	X, r15
     4bc:	ee 92       	st	-X, r14
		then8.next = NULL;
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	1c 92       	st	X, r1
     4c2:	1e 92       	st	-X, r1
     4c4:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if82;
		if82.value = &inPlus.value;
     4c6:	be 01       	movw	r22, r28
     4c8:	6f 54       	subi	r22, 0x4F	; 79
     4ca:	7e 4f       	sbci	r23, 0xFE	; 254
     4cc:	db 01       	movw	r26, r22
     4ce:	11 96       	adiw	r26, 0x01	; 1
     4d0:	bc 92       	st	X, r11
     4d2:	ae 92       	st	-X, r10
		if82.next = NULL;
     4d4:	13 96       	adiw	r26, 0x03	; 3
     4d6:	1c 92       	st	X, r1
     4d8:	1e 92       	st	-X, r1
     4da:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if81;
		if81.value = &inPositive.value;
     4dc:	9e 01       	movw	r18, r28
     4de:	23 55       	subi	r18, 0x53	; 83
     4e0:	3e 4f       	sbci	r19, 0xFE	; 254
     4e2:	6e 01       	movw	r12, r28
     4e4:	bb eb       	ldi	r27, 0xBB	; 187
     4e6:	cb 0e       	add	r12, r27
     4e8:	d1 1c       	adc	r13, r1
     4ea:	d9 01       	movw	r26, r18
     4ec:	11 96       	adiw	r26, 0x01	; 1
     4ee:	dc 92       	st	X, r13
     4f0:	ce 92       	st	-X, r12
		if81.next = &if82;
     4f2:	13 96       	adiw	r26, 0x03	; 3
     4f4:	7c 93       	st	X, r23
     4f6:	6e 93       	st	-X, r22
     4f8:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule8;
		rule8.if_side = &if81;
     4fa:	a0 56       	subi	r26, 0x60	; 96
     4fc:	b1 09       	sbc	r27, r1
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	3c 93       	st	X, r19
     502:	2e 93       	st	-X, r18
		rule8.then_side = &then8;
     504:	13 96       	adiw	r26, 0x03	; 3
     506:	9c 93       	st	X, r25
     508:	8e 93       	st	-X, r24
     50a:	12 97       	sbiw	r26, 0x02	; 2
		rule8.next = &rule9;
     50c:	15 96       	adiw	r26, 0x05	; 5
     50e:	fc 93       	st	X, r31
     510:	ee 93       	st	-X, r30
     512:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
		struct rule_element_type then7;
		then7.value = &sharpRight.value;
     514:	0c 97       	sbiw	r24, 0x0c	; 12
     516:	22 5a       	subi	r18, 0xA2	; 162
     518:	31 40       	sbci	r19, 0x01	; 1
     51a:	fc 01       	movw	r30, r24
     51c:	31 83       	std	Z+1, r19	; 0x01
     51e:	20 83       	st	Z, r18
		then7.next = NULL;
     520:	13 82       	std	Z+3, r1	; 0x03
     522:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if72;
		if72.value = &inNyll.value;
     524:	6c 50       	subi	r22, 0x0C	; 12
     526:	71 09       	sbc	r23, r1
     528:	2c 57       	subi	r18, 0x7C	; 124
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	fb 01       	movw	r30, r22
     52e:	31 83       	std	Z+1, r19	; 0x01
     530:	20 83       	st	Z, r18
		if72.next = NULL;
     532:	13 82       	std	Z+3, r1	; 0x03
     534:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if71;
		if71.value = &inPositive.value;
     536:	4c 51       	subi	r20, 0x1C	; 28
     538:	51 09       	sbc	r21, r1
     53a:	fa 01       	movw	r30, r20
     53c:	d1 82       	std	Z+1, r13	; 0x01
     53e:	c0 82       	st	Z, r12
		if71.next = &if72;
     540:	73 83       	std	Z+3, r23	; 0x03
     542:	62 83       	std	Z+2, r22	; 0x02

		struct rule_type rule7;
		rule7.if_side = &if71;
     544:	ea 55       	subi	r30, 0x5A	; 90
     546:	f1 09       	sbc	r31, r1
     548:	51 83       	std	Z+1, r21	; 0x01
     54a:	40 83       	st	Z, r20
		rule7.then_side = &then7;
     54c:	93 83       	std	Z+3, r25	; 0x03
     54e:	82 83       	std	Z+2, r24	; 0x02
		rule7.next = &rule8;
     550:	b5 83       	std	Z+5, r27	; 0x05
     552:	a4 83       	std	Z+4, r26	; 0x04
		
		
		//RULE 6 "if C is positive AND V is minus then servo is straight" 
		struct rule_element_type then6;
		then6.value = &straight.value;
     554:	82 57       	subi	r24, 0x72	; 114
     556:	91 40       	sbci	r25, 0x01	; 1
     558:	c3 56       	subi	r28, 0x63	; 99
     55a:	de 4f       	sbci	r29, 0xFE	; 254
     55c:	99 83       	std	Y+1, r25	; 0x01
     55e:	88 83       	st	Y, r24
     560:	cd 59       	subi	r28, 0x9D	; 157
     562:	d1 40       	sbci	r29, 0x01	; 1
		then6.next = NULL;
     564:	c1 56       	subi	r28, 0x61	; 97
     566:	de 4f       	sbci	r29, 0xFE	; 254
     568:	19 82       	std	Y+1, r1	; 0x01
     56a:	18 82       	st	Y, r1
     56c:	cf 59       	subi	r28, 0x9F	; 159
     56e:	d1 40       	sbci	r29, 0x01	; 1

		struct rule_element_type if62;
		if62.value = &inMinus.value;
     570:	6c 50       	subi	r22, 0x0C	; 12
     572:	71 09       	sbc	r23, r1
     574:	4e 01       	movw	r8, r28
     576:	45 ea       	ldi	r20, 0xA5	; 165
     578:	84 0e       	add	r8, r20
     57a:	91 1c       	adc	r9, r1
     57c:	db 01       	movw	r26, r22
     57e:	11 96       	adiw	r26, 0x01	; 1
     580:	9c 92       	st	X, r9
     582:	8e 92       	st	-X, r8
		if62.next = NULL;
     584:	13 96       	adiw	r26, 0x03	; 3
     586:	1c 92       	st	X, r1
     588:	1e 92       	st	-X, r1
     58a:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if61;
		if61.value = &inPositive.value;
     58c:	4c 50       	subi	r20, 0x0C	; 12
     58e:	51 09       	sbc	r21, r1
     590:	da 01       	movw	r26, r20
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	dc 92       	st	X, r13
     596:	ce 92       	st	-X, r12
		if61.next = &if62;
     598:	13 96       	adiw	r26, 0x03	; 3
     59a:	7c 93       	st	X, r23
     59c:	6e 93       	st	-X, r22
     59e:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule6;
		rule6.if_side = &if61;
     5a0:	68 55       	subi	r22, 0x58	; 88
     5a2:	71 09       	sbc	r23, r1
     5a4:	db 01       	movw	r26, r22
     5a6:	11 96       	adiw	r26, 0x01	; 1
     5a8:	5c 93       	st	X, r21
     5aa:	4e 93       	st	-X, r20
		rule6.then_side = &then6;
     5ac:	4d e9       	ldi	r20, 0x9D	; 157
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	4c 0f       	add	r20, r28
     5b2:	5d 1f       	adc	r21, r29
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	5c 93       	st	X, r21
     5b8:	4e 93       	st	-X, r20
     5ba:	12 97       	sbiw	r26, 0x02	; 2
		rule6.next = &rule7;
     5bc:	15 96       	adiw	r26, 0x05	; 5
     5be:	fc 93       	st	X, r31
     5c0:	ee 93       	st	-X, r30
     5c2:	14 97       	sbiw	r26, 0x04	; 4

		

		//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
		struct rule_element_type then5;
		then5.value = &sharpLeft.value;
     5c4:	a0 5b       	subi	r26, 0xB0	; 176
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	5a e0       	ldi	r21, 0x0A	; 10
     5ca:	45 0e       	add	r4, r21
     5cc:	51 1c       	adc	r5, r1
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	5c 92       	st	X, r5
     5d2:	4e 92       	st	-X, r4
		then5.next = NULL;
     5d4:	13 96       	adiw	r26, 0x03	; 3
     5d6:	1c 92       	st	X, r1
     5d8:	1e 92       	st	-X, r1
     5da:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if52;
		if52.value = &inNyll.value;
     5dc:	2e 01       	movw	r4, r28
     5de:	e3 e7       	ldi	r30, 0x73	; 115
     5e0:	4e 1a       	sub	r4, r30
     5e2:	ee ef       	ldi	r30, 0xFE	; 254
     5e4:	5e 0a       	sbc	r5, r30
     5e6:	f2 01       	movw	r30, r4
     5e8:	31 83       	std	Z+1, r19	; 0x01
     5ea:	20 83       	st	Z, r18
		if52.next = NULL;
     5ec:	13 82       	std	Z+3, r1	; 0x03
     5ee:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if51;
		if51.value = &inNegative.value;
     5f0:	6e 01       	movw	r12, r28
     5f2:	f7 e7       	ldi	r31, 0x77	; 119
     5f4:	cf 1a       	sub	r12, r31
     5f6:	fe ef       	ldi	r31, 0xFE	; 254
     5f8:	df 0a       	sbc	r13, r31
     5fa:	ae 01       	movw	r20, r28
     5fc:	49 51       	subi	r20, 0x19	; 25
     5fe:	5f 4f       	sbci	r21, 0xFF	; 255
     600:	f6 01       	movw	r30, r12
     602:	51 83       	std	Z+1, r21	; 0x01
     604:	40 83       	st	Z, r20
		if51.next = &if52;
     606:	53 82       	std	Z+3, r5	; 0x03
     608:	42 82       	std	Z+2, r4	; 0x02

		struct rule_type rule5;
		rule5.if_side = &if51;
     60a:	ee 54       	subi	r30, 0x4E	; 78
     60c:	f1 09       	sbc	r31, r1
     60e:	d1 82       	std	Z+1, r13	; 0x01
     610:	c0 82       	st	Z, r12
		rule5.then_side = &then5;
     612:	b3 83       	std	Z+3, r27	; 0x03
     614:	a2 83       	std	Z+2, r26	; 0x02
		rule5.next = &rule6;
     616:	75 83       	std	Z+5, r23	; 0x05
     618:	64 83       	std	Z+4, r22	; 0x04

		

		//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
		struct rule_element_type then4;
		then4.value = &straight.value;
     61a:	6e 01       	movw	r12, r28
     61c:	6b e7       	ldi	r22, 0x7B	; 123
     61e:	c6 1a       	sub	r12, r22
     620:	6e ef       	ldi	r22, 0xFE	; 254
     622:	d6 0a       	sbc	r13, r22
     624:	d6 01       	movw	r26, r12
     626:	11 96       	adiw	r26, 0x01	; 1
     628:	9c 93       	st	X, r25
     62a:	8e 93       	st	-X, r24
		then4.next = NULL;
     62c:	13 96       	adiw	r26, 0x03	; 3
     62e:	1c 92       	st	X, r1
     630:	1e 92       	st	-X, r1
     632:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if42;
		if42.value = &inNyll.value;
     634:	60 5c       	subi	r22, 0xC0	; 192
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	db 01       	movw	r26, r22
     63a:	11 96       	adiw	r26, 0x01	; 1
     63c:	3c 93       	st	X, r19
     63e:	2e 93       	st	-X, r18
		if42.next = NULL;
     640:	13 96       	adiw	r26, 0x03	; 3
     642:	1c 92       	st	X, r1
     644:	1e 92       	st	-X, r1
     646:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if41;
		if41.value = &inZero.value;
     648:	22 51       	subi	r18, 0x12	; 18
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	d9 01       	movw	r26, r18
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	7c 92       	st	X, r7
     652:	6e 92       	st	-X, r6
		if41.next = &if42;
     654:	13 96       	adiw	r26, 0x03	; 3
     656:	7c 93       	st	X, r23
     658:	6e 93       	st	-X, r22
     65a:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule4;
		rule4.if_side = &if41;
     65c:	6c 54       	subi	r22, 0x4C	; 76
     65e:	71 09       	sbc	r23, r1
     660:	db 01       	movw	r26, r22
     662:	11 96       	adiw	r26, 0x01	; 1
     664:	3c 93       	st	X, r19
     666:	2e 93       	st	-X, r18
		rule4.then_side = &then4;
     668:	13 96       	adiw	r26, 0x03	; 3
     66a:	dc 92       	st	X, r13
     66c:	ce 92       	st	-X, r12
     66e:	12 97       	sbiw	r26, 0x02	; 2
		rule4.next = &rule5;
     670:	15 96       	adiw	r26, 0x05	; 5
     672:	fc 93       	st	X, r31
     674:	ee 93       	st	-X, r30
     676:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
		struct rule_element_type then3;
		then3.value = &straight.value;
     678:	24 50       	subi	r18, 0x04	; 4
     67a:	31 09       	sbc	r19, r1
     67c:	f9 01       	movw	r30, r18
     67e:	91 83       	std	Z+1, r25	; 0x01
     680:	80 83       	st	Z, r24
		then3.next = NULL;
     682:	13 82       	std	Z+3, r1	; 0x03
     684:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if32;
		if32.value = &inPlus.value;
     686:	a0 5c       	subi	r26, 0xC0	; 192
     688:	bf 4f       	sbci	r27, 0xFF	; 255
     68a:	11 96       	adiw	r26, 0x01	; 1
     68c:	bc 92       	st	X, r11
     68e:	ae 92       	st	-X, r10
		if32.next = NULL;
     690:	13 96       	adiw	r26, 0x03	; 3
     692:	1c 92       	st	X, r1
     694:	1e 92       	st	-X, r1
     696:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if31;
		if31.value = &inNegative.value;
     698:	86 5c       	subi	r24, 0xC6	; 198
     69a:	9e 4f       	sbci	r25, 0xFE	; 254
     69c:	fc 01       	movw	r30, r24
     69e:	51 83       	std	Z+1, r21	; 0x01
     6a0:	40 83       	st	Z, r20
		if31.next = &if32;
     6a2:	b3 83       	std	Z+3, r27	; 0x03
     6a4:	a2 83       	std	Z+2, r26	; 0x02

		struct rule_type rule3;
		rule3.if_side = &if31;
     6a6:	a6 54       	subi	r26, 0x46	; 70
     6a8:	b1 09       	sbc	r27, r1
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	9c 93       	st	X, r25
     6ae:	8e 93       	st	-X, r24
		rule3.then_side = &then3;
     6b0:	13 96       	adiw	r26, 0x03	; 3
     6b2:	3c 93       	st	X, r19
     6b4:	2e 93       	st	-X, r18
     6b6:	12 97       	sbiw	r26, 0x02	; 2
		rule3.next = &rule4;
     6b8:	15 96       	adiw	r26, 0x05	; 5
     6ba:	7c 93       	st	X, r23
     6bc:	6e 93       	st	-X, r22
     6be:	14 97       	sbiw	r26, 0x04	; 4
		
		
		//RULE 2 "if C is negative AND V is minus then servo is Left"
		struct rule_element_type then2;
		then2.value = &left.value;
     6c0:	68 5c       	subi	r22, 0xC8	; 200
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	fb 01       	movw	r30, r22
     6c6:	11 83       	std	Z+1, r17	; 0x01
     6c8:	00 83       	st	Z, r16
		then2.next = NULL;
     6ca:	13 82       	std	Z+3, r1	; 0x03
     6cc:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if22;
		if22.value = &inMinus.value;
     6ce:	08 97       	sbiw	r24, 0x08	; 8
     6d0:	fc 01       	movw	r30, r24
     6d2:	91 82       	std	Z+1, r9	; 0x01
     6d4:	80 82       	st	Z, r8
		if22.next = NULL;
     6d6:	13 82       	std	Z+3, r1	; 0x03
     6d8:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if21;
		if21.value = &inNegative.value;
     6da:	24 51       	subi	r18, 0x14	; 20
     6dc:	31 09       	sbc	r19, r1
     6de:	f9 01       	movw	r30, r18
     6e0:	51 83       	std	Z+1, r21	; 0x01
     6e2:	40 83       	st	Z, r20
		if21.next = &if22;
     6e4:	93 83       	std	Z+3, r25	; 0x03
     6e6:	82 83       	std	Z+2, r24	; 0x02

		struct rule_type rule2;
		rule2.if_side = &if21;
     6e8:	80 54       	subi	r24, 0x40	; 64
     6ea:	91 09       	sbc	r25, r1
     6ec:	fc 01       	movw	r30, r24
     6ee:	31 83       	std	Z+1, r19	; 0x01
     6f0:	20 83       	st	Z, r18
		rule2.then_side = &then2;
     6f2:	73 83       	std	Z+3, r23	; 0x03
     6f4:	62 83       	std	Z+2, r22	; 0x02
		rule2.next = &rule3;
     6f6:	b5 83       	std	Z+5, r27	; 0x05
     6f8:	a4 83       	std	Z+4, r26	; 0x04

		//RULE 1 "if C is zero AND V is minus then steering is right"
		struct rule_element_type then1;
		then1.value = &right.value;
     6fa:	d2 96       	adiw	r26, 0x32	; 50
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	fc 92       	st	X, r15
     700:	ee 92       	st	-X, r14
		then1.next = NULL;
     702:	13 96       	adiw	r26, 0x03	; 3
     704:	1c 92       	st	X, r1
     706:	1e 92       	st	-X, r1
     708:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if12;
		if12.value = &inMinus.value;
     70a:	4a 58       	subi	r20, 0x8A	; 138
     70c:	5f 4f       	sbci	r21, 0xFF	; 255
     70e:	fa 01       	movw	r30, r20
     710:	91 82       	std	Z+1, r9	; 0x01
     712:	80 82       	st	Z, r8
		if12.next = NULL;
     714:	13 82       	std	Z+3, r1	; 0x03
     716:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if11;
		if11.value = &inZero.value;
     718:	2c 50       	subi	r18, 0x0C	; 12
     71a:	31 09       	sbc	r19, r1
     71c:	f9 01       	movw	r30, r18
     71e:	71 82       	std	Z+1, r7	; 0x01
     720:	60 82       	st	Z, r6
		if11.next = &if12;
     722:	53 83       	std	Z+3, r21	; 0x03
     724:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule1;
		rule1.if_side = &if11;
     726:	f6 97       	sbiw	r30, 0x36	; 54
     728:	31 83       	std	Z+1, r19	; 0x01
     72a:	20 83       	st	Z, r18
		rule1.then_side = &then1;
     72c:	b3 83       	std	Z+3, r27	; 0x03
     72e:	a2 83       	std	Z+2, r26	; 0x02
		rule1.next = &rule2;
     730:	95 83       	std	Z+5, r25	; 0x05
     732:	84 83       	std	Z+4, r24	; 0x04
		Rule_Base = &rule1;
     734:	f0 93 95 02 	sts	0x0295, r31
     738:	e0 93 94 02 	sts	0x0294, r30
		
		
		// the methods performing the FLC
		fuzzification();
     73c:	95 d0       	rcall	.+298    	; 0x868 <fuzzification>
		rule_evaluation();
     73e:	bb d0       	rcall	.+374    	; 0x8b6 <rule_evaluation>
		defuzzification();
     740:	00 d1       	rcall	.+512    	; 0x942 <defuzzification>
		if (steering.value < MAXLEFT)
     742:	d1 01       	movw	r26, r2
     744:	1a 96       	adiw	r26, 0x0a	; 10
     746:	8d 91       	ld	r24, X+
     748:	9c 91       	ld	r25, X
     74a:	1b 97       	sbiw	r26, 0x0b	; 11
     74c:	86 3e       	cpi	r24, 0xE6	; 230
     74e:	b7 e0       	ldi	r27, 0x07	; 7
     750:	9b 07       	cpc	r25, r27
     752:	24 f4       	brge	.+8      	; 0x75c <FLC_steering+0x692>
		{
			setServo(MAXLEFT);
     754:	86 ee       	ldi	r24, 0xE6	; 230
     756:	97 e0       	ldi	r25, 0x07	; 7
     758:	b7 d2       	rcall	.+1390   	; 0xcc8 <setServo>
     75a:	09 c0       	rjmp	.+18     	; 0x76e <FLC_steering+0x6a4>
		}
		else if (steering.value >MAXRIGHT)
     75c:	80 34       	cpi	r24, 0x40	; 64
     75e:	ec e0       	ldi	r30, 0x0C	; 12
     760:	9e 07       	cpc	r25, r30
     762:	24 f0       	brlt	.+8      	; 0x76c <FLC_steering+0x6a2>
		{
			setServo(MAXRIGHT);
     764:	8f e3       	ldi	r24, 0x3F	; 63
     766:	9c e0       	ldi	r25, 0x0C	; 12
     768:	af d2       	rcall	.+1374   	; 0xcc8 <setServo>
     76a:	01 c0       	rjmp	.+2      	; 0x76e <FLC_steering+0x6a4>
		}
		else
		{
			setServo(steering.value);
     76c:	ad d2       	rcall	.+1370   	; 0xcc8 <setServo>
		}
		
	}
     76e:	cc 53       	subi	r28, 0x3C	; 60
     770:	de 4f       	sbci	r29, 0xFE	; 254
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	3f 90       	pop	r3
     79e:	2f 90       	pop	r2
     7a0:	08 95       	ret

000007a2 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     7a2:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     7a4:	84 85       	ldd	r24, Z+12	; 0x0c
     7a6:	95 85       	ldd	r25, Z+13	; 0x0d
     7a8:	9b 01       	movw	r18, r22
     7aa:	28 1b       	sub	r18, r24
     7ac:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     7ae:	86 85       	ldd	r24, Z+14	; 0x0e
     7b0:	97 85       	ldd	r25, Z+15	; 0x0f
     7b2:	86 1b       	sub	r24, r22
     7b4:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     7b6:	12 16       	cp	r1, r18
     7b8:	13 06       	cpc	r1, r19
     7ba:	f4 f4       	brge	.+60     	; 0x7f8 <compute_degree_of_membership+0x56>
     7bc:	18 16       	cp	r1, r24
     7be:	19 06       	cpc	r1, r25
     7c0:	f4 f4       	brge	.+60     	; 0x7fe <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     7c2:	60 89       	ldd	r22, Z+16	; 0x10
     7c4:	71 89       	ldd	r23, Z+17	; 0x11
     7c6:	a2 89       	ldd	r26, Z+18	; 0x12
     7c8:	b3 89       	ldd	r27, Z+19	; 0x13
     7ca:	8a 9f       	mul	r24, r26
     7cc:	a0 01       	movw	r20, r0
     7ce:	8b 9f       	mul	r24, r27
     7d0:	50 0d       	add	r21, r0
     7d2:	9a 9f       	mul	r25, r26
     7d4:	50 0d       	add	r21, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	26 9f       	mul	r18, r22
     7da:	c0 01       	movw	r24, r0
     7dc:	27 9f       	mul	r18, r23
     7de:	90 0d       	add	r25, r0
     7e0:	36 9f       	mul	r19, r22
     7e2:	90 0d       	add	r25, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	48 17       	cp	r20, r24
     7e8:	59 07       	cpc	r21, r25
     7ea:	0c f4       	brge	.+2      	; 0x7ee <compute_degree_of_membership+0x4c>
     7ec:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     7ee:	8f 3f       	cpi	r24, 0xFF	; 255
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <compute_degree_of_membership+0x54>
     7f4:	3c f4       	brge	.+14     	; 0x804 <compute_degree_of_membership+0x62>
     7f6:	08 c0       	rjmp	.+16     	; 0x808 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <compute_degree_of_membership+0x66>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	02 c0       	rjmp	.+4      	; 0x808 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     808:	93 87       	std	Z+11, r25	; 0x0b
     80a:	82 87       	std	Z+10, r24	; 0x0a
     80c:	08 95       	ret

0000080e <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     818:	c6 85       	ldd	r28, Z+14	; 0x0e
     81a:	d7 85       	ldd	r29, Z+15	; 0x0f
     81c:	84 85       	ldd	r24, Z+12	; 0x0c
     81e:	95 85       	ldd	r25, Z+13	; 0x0d
     820:	c8 1b       	sub	r28, r24
     822:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     824:	22 85       	ldd	r18, Z+10	; 0x0a
     826:	33 85       	ldd	r19, Z+11	; 0x0b
     828:	60 89       	ldd	r22, Z+16	; 0x10
     82a:	71 89       	ldd	r23, Z+17	; 0x11
     82c:	c9 01       	movw	r24, r18
     82e:	df d5       	rcall	.+3006   	; 0x13ee <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     830:	8e 01       	movw	r16, r28
     832:	06 1b       	sub	r16, r22
     834:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     836:	62 89       	ldd	r22, Z+18	; 0x12
     838:	73 89       	ldd	r23, Z+19	; 0x13
     83a:	c9 01       	movw	r24, r18
     83c:	d8 d5       	rcall	.+2992   	; 0x13ee <__divmodhi4>
    top = base - run_1 - run_2;
     83e:	06 1b       	sub	r16, r22
     840:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     842:	c0 0f       	add	r28, r16
     844:	d1 1f       	adc	r29, r17
     846:	2c 9f       	mul	r18, r28
     848:	c0 01       	movw	r24, r0
     84a:	2d 9f       	mul	r18, r29
     84c:	90 0d       	add	r25, r0
     84e:	3c 9f       	mul	r19, r28
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	99 23       	and	r25, r25
     856:	0c f4       	brge	.+2      	; 0x85a <compute_area_of_trapezoid+0x4c>
     858:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     85a:	95 95       	asr	r25
     85c:	87 95       	ror	r24
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     870:	00 91 92 02 	lds	r16, 0x0292
     874:	10 91 93 02 	lds	r17, 0x0293
     878:	01 15       	cp	r16, r1
     87a:	11 05       	cpc	r17, r1
     87c:	b9 f0       	breq	.+46     	; 0x8ac <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     87e:	f8 01       	movw	r30, r16
     880:	c4 85       	ldd	r28, Z+12	; 0x0c
     882:	d5 85       	ldd	r29, Z+13	; 0x0d
     884:	20 97       	sbiw	r28, 0x00	; 0
     886:	61 f0       	breq	.+24     	; 0x8a0 <fuzzification+0x38>
            if (mf!=NULL) {
     888:	20 97       	sbiw	r28, 0x00	; 0
     88a:	29 f0       	breq	.+10     	; 0x896 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     88c:	f8 01       	movw	r30, r16
     88e:	62 85       	ldd	r22, Z+10	; 0x0a
     890:	73 85       	ldd	r23, Z+11	; 0x0b
     892:	ce 01       	movw	r24, r28
     894:	86 df       	rcall	.-244    	; 0x7a2 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     896:	0c 88       	ldd	r0, Y+20	; 0x14
     898:	dd 89       	ldd	r29, Y+21	; 0x15
     89a:	c0 2d       	mov	r28, r0
     89c:	20 97       	sbiw	r28, 0x00	; 0
     89e:	a1 f7       	brne	.-24     	; 0x888 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     8a0:	f8 01       	movw	r30, r16
     8a2:	06 85       	ldd	r16, Z+14	; 0x0e
     8a4:	17 85       	ldd	r17, Z+15	; 0x0f
     8a6:	01 15       	cp	r16, r1
     8a8:	11 05       	cpc	r17, r1
     8aa:	49 f7       	brne	.-46     	; 0x87e <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     8be:	c0 91 94 02 	lds	r28, 0x0294
     8c2:	d0 91 95 02 	lds	r29, 0x0295
     8c6:	20 97       	sbiw	r28, 0x00	; 0
     8c8:	b9 f1       	breq	.+110    	; 0x938 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     8ce:	e8 81       	ld	r30, Y
     8d0:	f9 81       	ldd	r31, Y+1	; 0x01
     8d2:	30 97       	sbiw	r30, 0x00	; 0
     8d4:	81 f0       	breq	.+32     	; 0x8f6 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     8d6:	20 2f       	mov	r18, r16
     8d8:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     8da:	a0 81       	ld	r26, Z
     8dc:	b1 81       	ldd	r27, Z+1	; 0x01
     8de:	8d 91       	ld	r24, X+
     8e0:	9c 91       	ld	r25, X
     8e2:	82 17       	cp	r24, r18
     8e4:	93 07       	cpc	r25, r19
     8e6:	0c f4       	brge	.+2      	; 0x8ea <rule_evaluation+0x34>
     8e8:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     8ea:	02 80       	ldd	r0, Z+2	; 0x02
     8ec:	f3 81       	ldd	r31, Z+3	; 0x03
     8ee:	e0 2d       	mov	r30, r0
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	99 f7       	brne	.-26     	; 0x8da <rule_evaluation+0x24>
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     8f6:	20 2f       	mov	r18, r16
     8f8:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     8fa:	ea 81       	ldd	r30, Y+2	; 0x02
     8fc:	fb 81       	ldd	r31, Y+3	; 0x03
     8fe:	30 97       	sbiw	r30, 0x00	; 0
     900:	b1 f0       	breq	.+44     	; 0x92e <rule_evaluation+0x78>
     902:	72 2f       	mov	r23, r18
     904:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     906:	a0 81       	ld	r26, Z
     908:	b1 81       	ldd	r27, Z+1	; 0x01
     90a:	8d 91       	ld	r24, X+
     90c:	9c 91       	ld	r25, X
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	57 2f       	mov	r21, r23
     912:	46 2f       	mov	r20, r22
     914:	28 17       	cp	r18, r24
     916:	39 07       	cpc	r19, r25
     918:	14 f4       	brge	.+4      	; 0x91e <rule_evaluation+0x68>
     91a:	58 2f       	mov	r21, r24
     91c:	49 2f       	mov	r20, r25
     91e:	5c 93       	st	X, r21
     920:	11 96       	adiw	r26, 0x01	; 1
     922:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     924:	02 80       	ldd	r0, Z+2	; 0x02
     926:	f3 81       	ldd	r31, Z+3	; 0x03
     928:	e0 2d       	mov	r30, r0
     92a:	30 97       	sbiw	r30, 0x00	; 0
     92c:	61 f7       	brne	.-40     	; 0x906 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     92e:	0c 80       	ldd	r0, Y+4	; 0x04
     930:	dd 81       	ldd	r29, Y+5	; 0x05
     932:	c0 2d       	mov	r28, r0
     934:	20 97       	sbiw	r28, 0x00	; 0
     936:	59 f6       	brne	.-106    	; 0x8ce <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     942:	2f 92       	push	r2
     944:	3f 92       	push	r3
     946:	4f 92       	push	r4
     948:	5f 92       	push	r5
     94a:	6f 92       	push	r6
     94c:	7f 92       	push	r7
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	00 d0       	rcall	.+0      	; 0x968 <defuzzification+0x26>
     968:	00 d0       	rcall	.+0      	; 0x96a <defuzzification+0x28>
     96a:	00 d0       	rcall	.+0      	; 0x96c <defuzzification+0x2a>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     970:	80 91 90 02 	lds	r24, 0x0290
     974:	90 91 91 02 	lds	r25, 0x0291
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	89 2b       	or	r24, r25
     97e:	09 f4       	brne	.+2      	; 0x982 <defuzzification+0x40>
     980:	84 c0       	rjmp	.+264    	; 0xa8a <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     982:	eb 81       	ldd	r30, Y+3	; 0x03
     984:	fc 81       	ldd	r31, Y+4	; 0x04
     986:	04 84       	ldd	r0, Z+12	; 0x0c
     988:	f5 85       	ldd	r31, Z+13	; 0x0d
     98a:	e0 2d       	mov	r30, r0
     98c:	fe 83       	std	Y+6, r31	; 0x06
     98e:	ed 83       	std	Y+5, r30	; 0x05
     990:	ef 2b       	or	r30, r31
     992:	09 f4       	brne	.+2      	; 0x996 <defuzzification+0x54>
     994:	66 c0       	rjmp	.+204    	; 0xa62 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     996:	51 2c       	mov	r5, r1
     998:	61 2c       	mov	r6, r1
     99a:	71 2c       	mov	r7, r1
     99c:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     99e:	31 2c       	mov	r3, r1
     9a0:	21 2c       	mov	r2, r1
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     9a6:	8d 81       	ldd	r24, Y+5	; 0x05
     9a8:	9e 81       	ldd	r25, Y+6	; 0x06
     9aa:	31 df       	rcall	.-414    	; 0x80e <compute_area_of_trapezoid>
     9ac:	bc 01       	movw	r22, r24
     9ae:	88 27       	eor	r24, r24
     9b0:	77 fd       	sbrc	r23, 7
     9b2:	80 95       	com	r24
     9b4:	98 2f       	mov	r25, r24
     9b6:	2c d4       	rcall	.+2136   	; 0x1210 <__floatsisf>
     9b8:	6b 01       	movw	r12, r22
     9ba:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     9bc:	ed 81       	ldd	r30, Y+5	; 0x05
     9be:	fe 81       	ldd	r31, Y+6	; 0x06
     9c0:	04 85       	ldd	r16, Z+12	; 0x0c
     9c2:	15 85       	ldd	r17, Z+13	; 0x0d
     9c4:	b8 01       	movw	r22, r16
     9c6:	88 27       	eor	r24, r24
     9c8:	77 fd       	sbrc	r23, 7
     9ca:	80 95       	com	r24
     9cc:	98 2f       	mov	r25, r24
     9ce:	20 d4       	rcall	.+2112   	; 0x1210 <__floatsisf>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     9d4:	ed 81       	ldd	r30, Y+5	; 0x05
     9d6:	fe 81       	ldd	r31, Y+6	; 0x06
     9d8:	86 85       	ldd	r24, Z+14	; 0x0e
     9da:	97 85       	ldd	r25, Z+15	; 0x0f
     9dc:	80 1b       	sub	r24, r16
     9de:	91 0b       	sbc	r25, r17
     9e0:	bc 01       	movw	r22, r24
     9e2:	12 f4       	brpl	.+4      	; 0x9e8 <defuzzification+0xa6>
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	75 95       	asr	r23
     9ea:	67 95       	ror	r22
            centroid = centroid + intermed;
     9ec:	88 27       	eor	r24, r24
     9ee:	77 fd       	sbrc	r23, 7
     9f0:	80 95       	com	r24
     9f2:	98 2f       	mov	r25, r24
     9f4:	0d d4       	rcall	.+2074   	; 0x1210 <__floatsisf>
     9f6:	a5 01       	movw	r20, r10
     9f8:	94 01       	movw	r18, r8
     9fa:	0b d3       	rcall	.+1558   	; 0x1012 <__addsf3>
     9fc:	9b 01       	movw	r18, r22
     9fe:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	91 d4       	rcall	.+2338   	; 0x1328 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	63 2d       	mov	r22, r3
     a0c:	72 2d       	mov	r23, r2
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	ff d2       	rcall	.+1534   	; 0x1012 <__addsf3>
     a14:	36 2e       	mov	r3, r22
     a16:	27 2e       	mov	r2, r23
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     a1c:	a7 01       	movw	r20, r14
     a1e:	96 01       	movw	r18, r12
     a20:	65 2d       	mov	r22, r5
     a22:	76 2d       	mov	r23, r6
     a24:	87 2d       	mov	r24, r7
     a26:	94 2d       	mov	r25, r4
     a28:	f4 d2       	rcall	.+1512   	; 0x1012 <__addsf3>
     a2a:	56 2e       	mov	r5, r22
     a2c:	67 2e       	mov	r6, r23
     a2e:	78 2e       	mov	r7, r24
     a30:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     a32:	ed 81       	ldd	r30, Y+5	; 0x05
     a34:	fe 81       	ldd	r31, Y+6	; 0x06
     a36:	04 88       	ldd	r0, Z+20	; 0x14
     a38:	f5 89       	ldd	r31, Z+21	; 0x15
     a3a:	e0 2d       	mov	r30, r0
     a3c:	fe 83       	std	Y+6, r31	; 0x06
     a3e:	ed 83       	std	Y+5, r30	; 0x05
     a40:	ef 2b       	or	r30, r31
     a42:	09 f0       	breq	.+2      	; 0xa46 <defuzzification+0x104>
     a44:	b0 cf       	rjmp	.-160    	; 0x9a6 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     a46:	26 2f       	mov	r18, r22
     a48:	37 2f       	mov	r19, r23
     a4a:	48 2f       	mov	r20, r24
     a4c:	59 2f       	mov	r21, r25
     a4e:	63 2d       	mov	r22, r3
     a50:	72 2d       	mov	r23, r2
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	41 d3       	rcall	.+1666   	; 0x10da <__divsf3>
     a58:	26 2f       	mov	r18, r22
     a5a:	37 2f       	mov	r19, r23
     a5c:	48 2f       	mov	r20, r24
     a5e:	59 2f       	mov	r21, r25
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     a6a:	62 2f       	mov	r22, r18
     a6c:	73 2f       	mov	r23, r19
     a6e:	84 2f       	mov	r24, r20
     a70:	95 2f       	mov	r25, r21
     a72:	9b d3       	rcall	.+1846   	; 0x11aa <__fixsfsi>
     a74:	eb 81       	ldd	r30, Y+3	; 0x03
     a76:	fc 81       	ldd	r31, Y+4	; 0x04
     a78:	73 87       	std	Z+11, r23	; 0x0b
     a7a:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     a7c:	86 85       	ldd	r24, Z+14	; 0x0e
     a7e:	97 85       	ldd	r25, Z+15	; 0x0f
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	89 2b       	or	r24, r25
     a86:	09 f0       	breq	.+2      	; 0xa8a <defuzzification+0x148>
     a88:	7c cf       	rjmp	.-264    	; 0x982 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     a8a:	26 96       	adiw	r28, 0x06	; 6
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	6f 90       	pop	r6
     ab2:	5f 90       	pop	r5
     ab4:	4f 90       	pop	r4
     ab6:	3f 90       	pop	r3
     ab8:	2f 90       	pop	r2
     aba:	08 95       	ret

00000abc <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
     ad2:	6a 01       	movw	r12, r20
     ad4:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     ad6:	b2 d4       	rcall	.+2404   	; 0x143c <strcpy>
    newMf->value = 0;
     ad8:	1b 86       	std	Y+11, r1	; 0x0b
     ada:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     adc:	dd 86       	std	Y+13, r13	; 0x0d
     ade:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     ae0:	ff 86       	std	Y+15, r15	; 0x0f
     ae2:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     ae4:	b5 01       	movw	r22, r10
     ae6:	6c 19       	sub	r22, r12
     ae8:	7d 09       	sbc	r23, r13
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	31 e0       	ldi	r19, 0x01	; 1
     aee:	c9 01       	movw	r24, r18
     af0:	7e d4       	rcall	.+2300   	; 0x13ee <__divmodhi4>
     af2:	79 8b       	std	Y+17, r23	; 0x11
     af4:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     af6:	b7 01       	movw	r22, r14
     af8:	60 1b       	sub	r22, r16
     afa:	71 0b       	sbc	r23, r17
     afc:	c9 01       	movw	r24, r18
     afe:	77 d4       	rcall	.+2286   	; 0x13ee <__divmodhi4>
     b00:	7b 8b       	std	Y+19, r23	; 0x13
     b02:	6a 8b       	std	Y+18, r22	; 0x12
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	08 95       	ret

00000b1a <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile int counter_UART1_reciever;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	0b b6       	in	r0, 0x3b	; 59
     b26:	0f 92       	push	r0
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
     b30:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
     b34:	8f 3f       	cpi	r24, 0xFF	; 255
     b36:	29 f4       	brne	.+10     	; 0xb42 <__vector_28+0x28>
		counter_UART1_reciever = 0;
     b38:	10 92 b7 02 	sts	0x02B7, r1
     b3c:	10 92 b6 02 	sts	0x02B6, r1
     b40:	10 c0       	rjmp	.+32     	; 0xb62 <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
     b42:	e0 91 b6 02 	lds	r30, 0x02B6
     b46:	f0 91 b7 02 	lds	r31, 0x02B7
     b4a:	ea 56       	subi	r30, 0x6A	; 106
     b4c:	fd 4f       	sbci	r31, 0xFD	; 253
     b4e:	80 83       	st	Z, r24
		counter_UART1_reciever++;
     b50:	80 91 b6 02 	lds	r24, 0x02B6
     b54:	90 91 b7 02 	lds	r25, 0x02B7
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 b7 02 	sts	0x02B7, r25
     b5e:	80 93 b6 02 	sts	0x02B6, r24
	
	//Enabling interrupts
	//sei();

	
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	0f 90       	pop	r0
     b6c:	0b be       	out	0x3b, r0	; 59
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
     b78:	7d d0       	rcall	.+250    	; 0xc74 <pwmInit>
	spi_slave_init();
     b7a:	2d d1       	rcall	.+602    	; 0xdd6 <spi_slave_init>
	setESC(NEUTRAL);
     b7c:	8d ec       	ldi	r24, 0xCD	; 205
     b7e:	9a e0       	ldi	r25, 0x0A	; 10
     b80:	88 d0       	rcall	.+272    	; 0xc92 <setESC>
	setServo(STRAIGHT);
     b82:	84 e6       	ldi	r24, 0x64	; 100
     b84:	9a e0       	ldi	r25, 0x0A	; 10
     b86:	a0 c0       	rjmp	.+320    	; 0xcc8 <setServo>
     b88:	08 95       	ret

00000b8a <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
     b8a:	ec ec       	ldi	r30, 0xCC	; 204
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	11 82       	std	Z+1, r1	; 0x01
     b90:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
     b92:	20 e9       	ldi	r18, 0x90	; 144
     b94:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
     b98:	2e e0       	ldi	r18, 0x0E	; 14
     b9a:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
     ba4:	fc 01       	movw	r30, r24
	
	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
     ba6:	a9 ec       	ldi	r26, 0xC9	; 201
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	8c 91       	ld	r24, X
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	8c 93       	st	X, r24
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[4];
     bb0:	80 91 9a 02 	lds	r24, 0x029A
     bb4:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[5];
     bb6:	80 91 9b 02 	lds	r24, 0x029B
     bba:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[2];
     bbc:	80 91 98 02 	lds	r24, 0x0298
     bc0:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[0];
     bc2:	80 91 96 02 	lds	r24, 0x0296
     bc6:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[1];
     bc8:	80 91 97 02 	lds	r24, 0x0297
     bcc:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[3];
     bce:	80 91 99 02 	lds	r24, 0x0299
     bd2:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
     bd4:	10 92 b7 02 	sts	0x02B7, r1
     bd8:	10 92 b6 02 	sts	0x02B6, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
     bdc:	8c 91       	ld	r24, X
     bde:	80 68       	ori	r24, 0x80	; 128
     be0:	8c 93       	st	X, r24
     be2:	08 95       	ret

00000be4 <main>:




int main (void)
{
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	2b 97       	sbiw	r28, 0x0b	; 11
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
	
	
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
	
	carInit();
     bf8:	bf df       	rcall	.-130    	; 0xb78 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	90 ee       	ldi	r25, 0xE0	; 224
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	90 40       	sbci	r25, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0x1c>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <main+0x26>
     c0a:	00 00       	nop
	_delay_ms(5000);
	setServo(2660);
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	9a e0       	ldi	r25, 0x0A	; 10
     c10:	5b d0       	rcall	.+182    	; 0xcc8 <setServo>
	setESC(2870);
     c12:	86 e3       	ldi	r24, 0x36	; 54
     c14:	9b e0       	ldi	r25, 0x0B	; 11
     c16:	3d d0       	rcall	.+122    	; 0xc92 <setESC>
	
	
	
	sei();
     c18:	78 94       	sei
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	b5 df       	rcall	.-150    	; 0xb8a <USART1_init>
	//End of init for UART
	
	setESC(2840);
     c20:	88 e1       	ldi	r24, 0x18	; 24
     c22:	9b e0       	ldi	r25, 0x0B	; 11
     c24:	36 d0       	rcall	.+108    	; 0xc92 <setESC>
			
			sei();
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
     c26:	0f 2e       	mov	r0, r31
     c28:	f8 e8       	ldi	r31, 0x88	; 136
     c2a:	ef 2e       	mov	r14, r31
     c2c:	f1 2c       	mov	r15, r1
     c2e:	f0 2d       	mov	r31, r0
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     c30:	0a e8       	ldi	r16, 0x8A	; 138
     c32:	10 e0       	ldi	r17, 0x00	; 0
	USART1_init(baud_setting);
	//End of init for UART
	
	setESC(2840);
	while (1) {
		setESC(NEUTRAL);
     c34:	8d ec       	ldi	r24, 0xCD	; 205
     c36:	9a e0       	ldi	r25, 0x0A	; 10
     c38:	2c d0       	rcall	.+88     	; 0xc92 <setESC>
		if (counter_UART1_reciever > 5) {
     c3a:	80 91 b6 02 	lds	r24, 0x02B6
     c3e:	90 91 b7 02 	lds	r25, 0x02B7
     c42:	06 97       	sbiw	r24, 0x06	; 6
     c44:	bc f3       	brlt	.-18     	; 0xc34 <main+0x50>
			
			//Reading Information
			read_sensor_info(&control_mode, sens_info_ptr);
     c46:	be 01       	movw	r22, r28
     c48:	6f 5f       	subi	r22, 0xFF	; 255
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	ce 01       	movw	r24, r28
     c4e:	0b 96       	adiw	r24, 0x0b	; 11
     c50:	02 d1       	rcall	.+516    	; 0xe56 <read_sensor_info>
			Sens_info_read(sens_info_ptr);
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	a6 df       	rcall	.-180    	; 0xba4 <Sens_info_read>
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	90 e0       	ldi	r25, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
     c5c:	6a 81       	ldd	r22, Y+2	; 0x02
     c5e:	70 e0       	ldi	r23, 0x00	; 0
			
			cli();
     c60:	f8 94       	cli
			
			//FLC_obstacle(OCR1A, sF, v);
	
			FLC_steering(c, v);
     c62:	33 da       	rcall	.-2970   	; 0xca <FLC_steering>
			//fuzzyParking(sL,sF, OCR1A);
			
			sei();
     c64:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
     c66:	f7 01       	movw	r30, r14
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     c6c:	f8 01       	movw	r30, r16
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	e0 cf       	rjmp	.-64     	; 0xc34 <main+0x50>

00000c74 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     c74:	80 e3       	ldi	r24, 0x30	; 48
     c76:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     c78:	82 ea       	ldi	r24, 0xA2	; 162
     c7a:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	9f e8       	ldi	r25, 0x8F	; 143
     c82:	90 93 87 00 	sts	0x0087, r25
     c86:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     c8a:	8a e1       	ldi	r24, 0x1A	; 26
     c8c:	80 93 81 00 	sts	0x0081, r24
     c90:	08 95       	ret

00000c92 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     c92:	80 36       	cpi	r24, 0x60	; 96
     c94:	2a e0       	ldi	r18, 0x0A	; 10
     c96:	92 07       	cpc	r25, r18
     c98:	3c f4       	brge	.+14     	; 0xca8 <setESC+0x16>
	{
		OCR1A = MINESC;
     c9a:	8f e5       	ldi	r24, 0x5F	; 95
     c9c:	9a e0       	ldi	r25, 0x0A	; 10
     c9e:	90 93 89 00 	sts	0x0089, r25
     ca2:	80 93 88 00 	sts	0x0088, r24
     ca6:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     ca8:	8b 33       	cpi	r24, 0x3B	; 59
     caa:	2b e0       	ldi	r18, 0x0B	; 11
     cac:	92 07       	cpc	r25, r18
     cae:	3c f0       	brlt	.+14     	; 0xcbe <setESC+0x2c>
	{
		OCR1A = MAXESC;
     cb0:	8b e3       	ldi	r24, 0x3B	; 59
     cb2:	9b e0       	ldi	r25, 0x0B	; 11
     cb4:	90 93 89 00 	sts	0x0089, r25
     cb8:	80 93 88 00 	sts	0x0088, r24
     cbc:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     cbe:	90 93 89 00 	sts	0x0089, r25
     cc2:	80 93 88 00 	sts	0x0088, r24
     cc6:	08 95       	ret

00000cc8 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     cc8:	80 34       	cpi	r24, 0x40	; 64
     cca:	2c e0       	ldi	r18, 0x0C	; 12
     ccc:	92 07       	cpc	r25, r18
     cce:	3c f4       	brge	.+14     	; 0xcde <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     cd0:	8f e3       	ldi	r24, 0x3F	; 63
     cd2:	9c e0       	ldi	r25, 0x0C	; 12
     cd4:	90 93 8b 00 	sts	0x008B, r25
     cd8:	80 93 8a 00 	sts	0x008A, r24
     cdc:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     cde:	86 3e       	cpi	r24, 0xE6	; 230
     ce0:	27 e0       	ldi	r18, 0x07	; 7
     ce2:	92 07       	cpc	r25, r18
     ce4:	3c f0       	brlt	.+14     	; 0xcf4 <setServo+0x2c>

		OCR1B = MAXLEFT;
     ce6:	86 ee       	ldi	r24, 0xE6	; 230
     ce8:	97 e0       	ldi	r25, 0x07	; 7
     cea:	90 93 8b 00 	sts	0x008B, r25
     cee:	80 93 8a 00 	sts	0x008A, r24
     cf2:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     cf4:	90 93 8b 00 	sts	0x008B, r25
     cf8:	80 93 8a 00 	sts	0x008A, r24
     cfc:	08 95       	ret

00000cfe <__vector_19>:
		tx_spi.i_first = 0;
	}
			
			

	sei();
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	0b b6       	in	r0, 0x3b	; 59
     d0a:	0f 92       	push	r0
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
     d18:	ef 93       	push	r30
     d1a:	ff 93       	push	r31
     d1c:	10 98       	cbi	0x02, 0	; 2
     d1e:	2e b5       	in	r18, 0x2e	; 46
     d20:	2d 3f       	cpi	r18, 0xFD	; 253
     d22:	a9 f0       	breq	.+42     	; 0xd4e <__vector_19+0x50>
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	dc 01       	movw	r26, r24
     d2e:	a2 54       	subi	r26, 0x42	; 66
     d30:	be 4f       	sbci	r27, 0xFE	; 254
     d32:	2c 93       	st	X, r18
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	91 83       	std	Z+1, r25	; 0x01
     d38:	80 83       	st	Z, r24
     d3a:	e2 e0       	ldi	r30, 0x02	; 2
     d3c:	f2 e0       	ldi	r31, 0x02	; 2
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 76 01 	sts	0x0176, r24
     d4e:	80 91 00 02 	lds	r24, 0x0200
     d52:	90 91 01 02 	lds	r25, 0x0201
     d56:	80 34       	cpi	r24, 0x40	; 64
     d58:	91 05       	cpc	r25, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <__vector_19+0x66>
     d5c:	10 92 01 02 	sts	0x0201, r1
     d60:	10 92 00 02 	sts	0x0200, r1
     d64:	80 91 bc 01 	lds	r24, 0x01BC
     d68:	90 91 bd 01 	lds	r25, 0x01BD
     d6c:	89 2b       	or	r24, r25
     d6e:	01 f1       	breq	.+64     	; 0xdb0 <__vector_19+0xb2>
     d70:	e0 91 b8 01 	lds	r30, 0x01B8
     d74:	f0 91 b9 01 	lds	r31, 0x01B9
     d78:	e8 58       	subi	r30, 0x88	; 136
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	8e bd       	out	0x2e, r24	; 46
     d80:	e8 eb       	ldi	r30, 0xB8	; 184
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	ec eb       	ldi	r30, 0xBC	; 188
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	31 09       	sbc	r19, r1
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	20 83       	st	Z, r18
     d9e:	10 9a       	sbi	0x02, 0	; 2
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	91 05       	cpc	r25, r1
     da4:	49 f4       	brne	.+18     	; 0xdb8 <__vector_19+0xba>
     da6:	10 92 b9 01 	sts	0x01B9, r1
     daa:	10 92 b8 01 	sts	0x01B8, r1
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__vector_19+0xba>
     db0:	8d ef       	ldi	r24, 0xFD	; 253
     db2:	8e bd       	out	0x2e, r24	; 46
     db4:	10 92 77 01 	sts	0x0177, r1
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	bf 91       	pop	r27
     dbe:	af 91       	pop	r26
     dc0:	9f 91       	pop	r25
     dc2:	8f 91       	pop	r24
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0b be       	out	0x3b, r0	; 59
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <spi_slave_init>:
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	84 b9       	out	0x04, r24	; 4
     dda:	80 ec       	ldi	r24, 0xC0	; 192
     ddc:	8c bd       	out	0x2c, r24	; 44
     dde:	08 9a       	sbi	0x01, 0	; 1
     de0:	10 98       	cbi	0x02, 0	; 2
     de2:	8d ef       	ldi	r24, 0xFD	; 253
     de4:	8e bd       	out	0x2e, r24	; 46
     de6:	08 95       	ret

00000de8 <spi_get_byte>:
     de8:	f8 94       	cli
     dea:	20 91 02 02 	lds	r18, 0x0202
     dee:	30 91 03 02 	lds	r19, 0x0203
     df2:	21 15       	cp	r18, r1
     df4:	31 05       	cpc	r19, r1
     df6:	a9 f0       	breq	.+42     	; 0xe22 <spi_get_byte+0x3a>
     df8:	ee ef       	ldi	r30, 0xFE	; 254
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	da 01       	movw	r26, r20
     e02:	a2 54       	subi	r26, 0x42	; 66
     e04:	be 4f       	sbci	r27, 0xFE	; 254
     e06:	8c 91       	ld	r24, X
     e08:	4f 5f       	subi	r20, 0xFF	; 255
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	51 83       	std	Z+1, r21	; 0x01
     e0e:	40 83       	st	Z, r20
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	31 09       	sbc	r19, r1
     e14:	30 93 03 02 	sts	0x0203, r19
     e18:	20 93 02 02 	sts	0x0202, r18
     e1c:	23 2b       	or	r18, r19
     e1e:	21 f4       	brne	.+8      	; 0xe28 <spi_get_byte+0x40>
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <spi_get_byte+0x3c>
     e22:	8e ef       	ldi	r24, 0xFE	; 254
     e24:	10 92 76 01 	sts	0x0176, r1
     e28:	20 91 fe 01 	lds	r18, 0x01FE
     e2c:	30 91 ff 01 	lds	r19, 0x01FF
     e30:	20 34       	cpi	r18, 0x40	; 64
     e32:	31 05       	cpc	r19, r1
     e34:	21 f4       	brne	.+8      	; 0xe3e <spi_get_byte+0x56>
     e36:	10 92 ff 01 	sts	0x01FF, r1
     e3a:	10 92 fe 01 	sts	0x01FE, r1
     e3e:	78 94       	sei
     e40:	08 95       	ret

00000e42 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	20 91 02 02 	lds	r18, 0x0202
     e48:	30 91 03 02 	lds	r19, 0x0203
     e4c:	25 30       	cpi	r18, 0x05	; 5
     e4e:	31 05       	cpc	r19, r1
     e50:	08 f4       	brcc	.+2      	; 0xe54 <is_package_recieved+0x12>
     e52:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
     e54:	08 95       	ret

00000e56 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	8c 01       	movw	r16, r24
     e60:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
     e62:	20 91 02 02 	lds	r18, 0x0202
     e66:	30 91 03 02 	lds	r19, 0x0203
     e6a:	23 2b       	or	r18, r19
     e6c:	f9 f0       	breq	.+62     	; 0xeac <read_sensor_info+0x56>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
     e6e:	e0 91 fe 01 	lds	r30, 0x01FE
     e72:	f0 91 ff 01 	lds	r31, 0x01FF
     e76:	e2 54       	subi	r30, 0x42	; 66
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	71 f4       	brne	.+28     	; 0xe9c <read_sensor_info+0x46>
     e80:	e0 df       	rcall	.-64     	; 0xe42 <is_package_recieved>
     e82:	88 23       	and	r24, r24
     e84:	a1 f0       	breq	.+40     	; 0xeae <read_sensor_info+0x58>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
     e86:	b0 df       	rcall	.-160    	; 0xde8 <spi_get_byte>
		//Read all info and write it to sensor struct

		//*control_mode_ptr = spi_get_byte();
		//sens_info_ptr->dist_right_line = spi_get_byte();
		//sens_info_ptr->angular_diff = spi_get_byte();
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
     e88:	af df       	rcall	.-162    	; 0xde8 <spi_get_byte>
     e8a:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
     e8c:	ad df       	rcall	.-166    	; 0xde8 <spi_get_byte>
     e8e:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
     e90:	ab df       	rcall	.-170    	; 0xde8 <spi_get_byte>
     e92:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
     e94:	a9 df       	rcall	.-174    	; 0xde8 <spi_get_byte>
     e96:	8d 83       	std	Y+5, r24	; 0x05
		//sens_info_ptr->car_speed = spi_get_byte();
		//sens_info_ptr->dist_to_stop_line = spi_get_byte();
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <read_sensor_info+0x58>
	} else if (is_package_recieved()){
     e9c:	d2 df       	rcall	.-92     	; 0xe42 <is_package_recieved>
     e9e:	88 23       	and	r24, r24
     ea0:	31 f0       	breq	.+12     	; 0xeae <read_sensor_info+0x58>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
     ea2:	a2 df       	rcall	.-188    	; 0xde8 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
     ea4:	be 01       	movw	r22, r28
     ea6:	c8 01       	movw	r24, r16
     ea8:	d6 df       	rcall	.-84     	; 0xe56 <read_sensor_info>
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <read_sensor_info+0x58>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
     eac:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	0b b6       	in	r0, 0x3b	; 59
     ec4:	0f 92       	push	r0
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     ed8:	80 91 8e 02 	lds	r24, 0x028E
     edc:	90 91 8f 02 	lds	r25, 0x028F
     ee0:	80 34       	cpi	r24, 0x40	; 64
     ee2:	91 05       	cpc	r25, r1
     ee4:	31 f4       	brne	.+12     	; 0xef2 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 bc 02 	sts	0x02BC, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     eec:	80 91 c6 00 	lds	r24, 0x00C6
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     ef2:	80 34       	cpi	r24, 0x40	; 64
     ef4:	91 05       	cpc	r25, r1
     ef6:	e8 f4       	brcc	.+58     	; 0xf32 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     ef8:	ec e8       	ldi	r30, 0x8C	; 140
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	20 81       	ld	r18, Z
     efe:	31 81       	ldd	r19, Z+1	; 0x01
     f00:	40 91 c6 00 	lds	r20, 0x00C6
     f04:	d9 01       	movw	r26, r18
     f06:	a6 5b       	subi	r26, 0xB6	; 182
     f08:	bd 4f       	sbci	r27, 0xFD	; 253
     f0a:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	90 93 8f 02 	sts	0x028F, r25
     f1a:	80 93 8e 02 	sts	0x028E, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     f1e:	80 91 8e 02 	lds	r24, 0x028E
     f22:	90 91 8f 02 	lds	r25, 0x028F
     f26:	80 34       	cpi	r24, 0x40	; 64
     f28:	91 05       	cpc	r25, r1
     f2a:	19 f4       	brne	.+6      	; 0xf32 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 ba 02 	sts	0x02BA, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     f32:	80 91 8c 02 	lds	r24, 0x028C
     f36:	90 91 8d 02 	lds	r25, 0x028D
     f3a:	80 34       	cpi	r24, 0x40	; 64
     f3c:	91 05       	cpc	r25, r1
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__vector_20+0x90>
		rx_uart0.i_last = 0;
     f40:	10 92 8d 02 	sts	0x028D, r1
     f44:	10 92 8c 02 	sts	0x028C, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 b9 02 	sts	0x02B9, r24
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0b be       	out	0x3b, r0	; 59
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_22>:




ISR(USART0_TX_vect)
{
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	0b b6       	in	r0, 0x3b	; 59
     f7a:	0f 92       	push	r0
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     f84:	80 91 48 02 	lds	r24, 0x0248
     f88:	90 91 49 02 	lds	r25, 0x0249
     f8c:	80 34       	cpi	r24, 0x40	; 64
     f8e:	91 05       	cpc	r25, r1
     f90:	19 f4       	brne	.+6      	; 0xf98 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     f92:	10 92 b8 02 	sts	0x02B8, r1
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     f98:	89 2b       	or	r24, r25
     f9a:	b9 f0       	breq	.+46     	; 0xfca <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     f9c:	e0 91 44 02 	lds	r30, 0x0244
     fa0:	f0 91 45 02 	lds	r31, 0x0245
     fa4:	ec 5f       	subi	r30, 0xFC	; 252
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	80 81       	ld	r24, Z
     faa:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     fae:	e4 e4       	ldi	r30, 0x44	; 68
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     fbc:	e8 e4       	ldi	r30, 0x48	; 72
     fbe:	f2 e0       	ldi	r31, 0x02	; 2
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     fca:	80 91 44 02 	lds	r24, 0x0244
     fce:	90 91 45 02 	lds	r25, 0x0245
     fd2:	80 34       	cpi	r24, 0x40	; 64
     fd4:	91 05       	cpc	r25, r1
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <__vector_22+0x72>
		tx_uart0.i_first = 0;
     fd8:	10 92 45 02 	sts	0x0245, r1
     fdc:	10 92 44 02 	sts	0x0244, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     fe0:	80 91 48 02 	lds	r24, 0x0248
     fe4:	90 91 49 02 	lds	r25, 0x0249
     fe8:	89 2b       	or	r24, r25
     fea:	39 f4       	brne	.+14     	; 0xffa <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     fec:	10 92 bb 02 	sts	0x02BB, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     ff0:	e1 ec       	ldi	r30, 0xC1	; 193
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 7b       	andi	r24, 0xBF	; 191
     ff8:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__subsf3>:
    1010:	50 58       	subi	r21, 0x80	; 128

00001012 <__addsf3>:
    1012:	bb 27       	eor	r27, r27
    1014:	aa 27       	eor	r26, r26
    1016:	0e d0       	rcall	.+28     	; 0x1034 <__addsf3x>
    1018:	4d c1       	rjmp	.+666    	; 0x12b4 <__fp_round>
    101a:	3e d1       	rcall	.+636    	; 0x1298 <__fp_pscA>
    101c:	30 f0       	brcs	.+12     	; 0x102a <__addsf3+0x18>
    101e:	43 d1       	rcall	.+646    	; 0x12a6 <__fp_pscB>
    1020:	20 f0       	brcs	.+8      	; 0x102a <__addsf3+0x18>
    1022:	31 f4       	brne	.+12     	; 0x1030 <__addsf3+0x1e>
    1024:	9f 3f       	cpi	r25, 0xFF	; 255
    1026:	11 f4       	brne	.+4      	; 0x102c <__addsf3+0x1a>
    1028:	1e f4       	brtc	.+6      	; 0x1030 <__addsf3+0x1e>
    102a:	33 c1       	rjmp	.+614    	; 0x1292 <__fp_nan>
    102c:	0e f4       	brtc	.+2      	; 0x1030 <__addsf3+0x1e>
    102e:	e0 95       	com	r30
    1030:	e7 fb       	bst	r30, 7
    1032:	29 c1       	rjmp	.+594    	; 0x1286 <__fp_inf>

00001034 <__addsf3x>:
    1034:	e9 2f       	mov	r30, r25
    1036:	4f d1       	rcall	.+670    	; 0x12d6 <__fp_split3>
    1038:	80 f3       	brcs	.-32     	; 0x101a <__addsf3+0x8>
    103a:	ba 17       	cp	r27, r26
    103c:	62 07       	cpc	r22, r18
    103e:	73 07       	cpc	r23, r19
    1040:	84 07       	cpc	r24, r20
    1042:	95 07       	cpc	r25, r21
    1044:	18 f0       	brcs	.+6      	; 0x104c <__addsf3x+0x18>
    1046:	71 f4       	brne	.+28     	; 0x1064 <__addsf3x+0x30>
    1048:	9e f5       	brtc	.+102    	; 0x10b0 <__addsf3x+0x7c>
    104a:	67 c1       	rjmp	.+718    	; 0x131a <__fp_zero>
    104c:	0e f4       	brtc	.+2      	; 0x1050 <__addsf3x+0x1c>
    104e:	e0 95       	com	r30
    1050:	0b 2e       	mov	r0, r27
    1052:	ba 2f       	mov	r27, r26
    1054:	a0 2d       	mov	r26, r0
    1056:	0b 01       	movw	r0, r22
    1058:	b9 01       	movw	r22, r18
    105a:	90 01       	movw	r18, r0
    105c:	0c 01       	movw	r0, r24
    105e:	ca 01       	movw	r24, r20
    1060:	a0 01       	movw	r20, r0
    1062:	11 24       	eor	r1, r1
    1064:	ff 27       	eor	r31, r31
    1066:	59 1b       	sub	r21, r25
    1068:	99 f0       	breq	.+38     	; 0x1090 <__addsf3x+0x5c>
    106a:	59 3f       	cpi	r21, 0xF9	; 249
    106c:	50 f4       	brcc	.+20     	; 0x1082 <__addsf3x+0x4e>
    106e:	50 3e       	cpi	r21, 0xE0	; 224
    1070:	68 f1       	brcs	.+90     	; 0x10cc <__addsf3x+0x98>
    1072:	1a 16       	cp	r1, r26
    1074:	f0 40       	sbci	r31, 0x00	; 0
    1076:	a2 2f       	mov	r26, r18
    1078:	23 2f       	mov	r18, r19
    107a:	34 2f       	mov	r19, r20
    107c:	44 27       	eor	r20, r20
    107e:	58 5f       	subi	r21, 0xF8	; 248
    1080:	f3 cf       	rjmp	.-26     	; 0x1068 <__addsf3x+0x34>
    1082:	46 95       	lsr	r20
    1084:	37 95       	ror	r19
    1086:	27 95       	ror	r18
    1088:	a7 95       	ror	r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	53 95       	inc	r21
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__addsf3x+0x4e>
    1090:	7e f4       	brtc	.+30     	; 0x10b0 <__addsf3x+0x7c>
    1092:	1f 16       	cp	r1, r31
    1094:	ba 0b       	sbc	r27, r26
    1096:	62 0b       	sbc	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	ba f0       	brmi	.+46     	; 0x10cc <__addsf3x+0x98>
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	a1 f0       	breq	.+40     	; 0x10ca <__addsf3x+0x96>
    10a2:	ff 0f       	add	r31, r31
    10a4:	bb 1f       	adc	r27, r27
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	c2 f7       	brpl	.-16     	; 0x109e <__addsf3x+0x6a>
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <__addsf3x+0x98>
    10b0:	ba 0f       	add	r27, r26
    10b2:	62 1f       	adc	r22, r18
    10b4:	73 1f       	adc	r23, r19
    10b6:	84 1f       	adc	r24, r20
    10b8:	48 f4       	brcc	.+18     	; 0x10cc <__addsf3x+0x98>
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f7 95       	ror	r31
    10c4:	9e 3f       	cpi	r25, 0xFE	; 254
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__addsf3x+0x96>
    10c8:	b3 cf       	rjmp	.-154    	; 0x1030 <__addsf3+0x1e>
    10ca:	93 95       	inc	r25
    10cc:	88 0f       	add	r24, r24
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__addsf3x+0x9e>
    10d0:	99 27       	eor	r25, r25
    10d2:	ee 0f       	add	r30, r30
    10d4:	97 95       	ror	r25
    10d6:	87 95       	ror	r24
    10d8:	08 95       	ret

000010da <__divsf3>:
    10da:	0c d0       	rcall	.+24     	; 0x10f4 <__divsf3x>
    10dc:	eb c0       	rjmp	.+470    	; 0x12b4 <__fp_round>
    10de:	e3 d0       	rcall	.+454    	; 0x12a6 <__fp_pscB>
    10e0:	40 f0       	brcs	.+16     	; 0x10f2 <__divsf3+0x18>
    10e2:	da d0       	rcall	.+436    	; 0x1298 <__fp_pscA>
    10e4:	30 f0       	brcs	.+12     	; 0x10f2 <__divsf3+0x18>
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <__divsf3+0x16>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <__divsf3+0x18>
    10ec:	cc c0       	rjmp	.+408    	; 0x1286 <__fp_inf>
    10ee:	51 11       	cpse	r21, r1
    10f0:	15 c1       	rjmp	.+554    	; 0x131c <__fp_szero>
    10f2:	cf c0       	rjmp	.+414    	; 0x1292 <__fp_nan>

000010f4 <__divsf3x>:
    10f4:	f0 d0       	rcall	.+480    	; 0x12d6 <__fp_split3>
    10f6:	98 f3       	brcs	.-26     	; 0x10de <__divsf3+0x4>

000010f8 <__divsf3_pse>:
    10f8:	99 23       	and	r25, r25
    10fa:	c9 f3       	breq	.-14     	; 0x10ee <__divsf3+0x14>
    10fc:	55 23       	and	r21, r21
    10fe:	b1 f3       	breq	.-20     	; 0x10ec <__divsf3+0x12>
    1100:	95 1b       	sub	r25, r21
    1102:	55 0b       	sbc	r21, r21
    1104:	bb 27       	eor	r27, r27
    1106:	aa 27       	eor	r26, r26
    1108:	62 17       	cp	r22, r18
    110a:	73 07       	cpc	r23, r19
    110c:	84 07       	cpc	r24, r20
    110e:	38 f0       	brcs	.+14     	; 0x111e <__divsf3_pse+0x26>
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	aa 1f       	adc	r26, r26
    111c:	a9 f3       	breq	.-22     	; 0x1108 <__divsf3_pse+0x10>
    111e:	33 d0       	rcall	.+102    	; 0x1186 <__divsf3_pse+0x8e>
    1120:	0e 2e       	mov	r0, r30
    1122:	3a f0       	brmi	.+14     	; 0x1132 <__divsf3_pse+0x3a>
    1124:	e0 e8       	ldi	r30, 0x80	; 128
    1126:	30 d0       	rcall	.+96     	; 0x1188 <__divsf3_pse+0x90>
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	e6 95       	lsr	r30
    112e:	00 1c       	adc	r0, r0
    1130:	ca f7       	brpl	.-14     	; 0x1124 <__divsf3_pse+0x2c>
    1132:	29 d0       	rcall	.+82     	; 0x1186 <__divsf3_pse+0x8e>
    1134:	fe 2f       	mov	r31, r30
    1136:	27 d0       	rcall	.+78     	; 0x1186 <__divsf3_pse+0x8e>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	bb 1f       	adc	r27, r27
    1140:	26 17       	cp	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	48 07       	cpc	r20, r24
    1146:	ab 07       	cpc	r26, r27
    1148:	b0 e8       	ldi	r27, 0x80	; 128
    114a:	09 f0       	breq	.+2      	; 0x114e <__divsf3_pse+0x56>
    114c:	bb 0b       	sbc	r27, r27
    114e:	80 2d       	mov	r24, r0
    1150:	bf 01       	movw	r22, r30
    1152:	ff 27       	eor	r31, r31
    1154:	93 58       	subi	r25, 0x83	; 131
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	2a f0       	brmi	.+10     	; 0x1164 <__divsf3_pse+0x6c>
    115a:	9e 3f       	cpi	r25, 0xFE	; 254
    115c:	51 05       	cpc	r21, r1
    115e:	68 f0       	brcs	.+26     	; 0x117a <__divsf3_pse+0x82>
    1160:	92 c0       	rjmp	.+292    	; 0x1286 <__fp_inf>
    1162:	dc c0       	rjmp	.+440    	; 0x131c <__fp_szero>
    1164:	5f 3f       	cpi	r21, 0xFF	; 255
    1166:	ec f3       	brlt	.-6      	; 0x1162 <__divsf3_pse+0x6a>
    1168:	98 3e       	cpi	r25, 0xE8	; 232
    116a:	dc f3       	brlt	.-10     	; 0x1162 <__divsf3_pse+0x6a>
    116c:	86 95       	lsr	r24
    116e:	77 95       	ror	r23
    1170:	67 95       	ror	r22
    1172:	b7 95       	ror	r27
    1174:	f7 95       	ror	r31
    1176:	9f 5f       	subi	r25, 0xFF	; 255
    1178:	c9 f7       	brne	.-14     	; 0x116c <__divsf3_pse+0x74>
    117a:	88 0f       	add	r24, r24
    117c:	91 1d       	adc	r25, r1
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret
    1186:	e1 e0       	ldi	r30, 0x01	; 1
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	bb 1f       	adc	r27, r27
    1190:	62 17       	cp	r22, r18
    1192:	73 07       	cpc	r23, r19
    1194:	84 07       	cpc	r24, r20
    1196:	ba 07       	cpc	r27, r26
    1198:	20 f0       	brcs	.+8      	; 0x11a2 <__divsf3_pse+0xaa>
    119a:	62 1b       	sub	r22, r18
    119c:	73 0b       	sbc	r23, r19
    119e:	84 0b       	sbc	r24, r20
    11a0:	ba 0b       	sbc	r27, r26
    11a2:	ee 1f       	adc	r30, r30
    11a4:	88 f7       	brcc	.-30     	; 0x1188 <__divsf3_pse+0x90>
    11a6:	e0 95       	com	r30
    11a8:	08 95       	ret

000011aa <__fixsfsi>:
    11aa:	04 d0       	rcall	.+8      	; 0x11b4 <__fixunssfsi>
    11ac:	68 94       	set
    11ae:	b1 11       	cpse	r27, r1
    11b0:	b5 c0       	rjmp	.+362    	; 0x131c <__fp_szero>
    11b2:	08 95       	ret

000011b4 <__fixunssfsi>:
    11b4:	98 d0       	rcall	.+304    	; 0x12e6 <__fp_splitA>
    11b6:	88 f0       	brcs	.+34     	; 0x11da <__fixunssfsi+0x26>
    11b8:	9f 57       	subi	r25, 0x7F	; 127
    11ba:	90 f0       	brcs	.+36     	; 0x11e0 <__fixunssfsi+0x2c>
    11bc:	b9 2f       	mov	r27, r25
    11be:	99 27       	eor	r25, r25
    11c0:	b7 51       	subi	r27, 0x17	; 23
    11c2:	a0 f0       	brcs	.+40     	; 0x11ec <__fixunssfsi+0x38>
    11c4:	d1 f0       	breq	.+52     	; 0x11fa <__fixunssfsi+0x46>
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	1a f0       	brmi	.+6      	; 0x11d6 <__fixunssfsi+0x22>
    11d0:	ba 95       	dec	r27
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__fixunssfsi+0x12>
    11d4:	12 c0       	rjmp	.+36     	; 0x11fa <__fixunssfsi+0x46>
    11d6:	b1 30       	cpi	r27, 0x01	; 1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <__fixunssfsi+0x46>
    11da:	9f d0       	rcall	.+318    	; 0x131a <__fp_zero>
    11dc:	b1 e0       	ldi	r27, 0x01	; 1
    11de:	08 95       	ret
    11e0:	9c c0       	rjmp	.+312    	; 0x131a <__fp_zero>
    11e2:	67 2f       	mov	r22, r23
    11e4:	78 2f       	mov	r23, r24
    11e6:	88 27       	eor	r24, r24
    11e8:	b8 5f       	subi	r27, 0xF8	; 248
    11ea:	39 f0       	breq	.+14     	; 0x11fa <__fixunssfsi+0x46>
    11ec:	b9 3f       	cpi	r27, 0xF9	; 249
    11ee:	cc f3       	brlt	.-14     	; 0x11e2 <__fixunssfsi+0x2e>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b3 95       	inc	r27
    11f8:	d9 f7       	brne	.-10     	; 0x11f0 <__fixunssfsi+0x3c>
    11fa:	3e f4       	brtc	.+14     	; 0x120a <__fixunssfsi+0x56>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	08 95       	ret

0000120c <__floatunsisf>:
    120c:	e8 94       	clt
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <__floatsisf+0x12>

00001210 <__floatsisf>:
    1210:	97 fb       	bst	r25, 7
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__floatsisf+0x12>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	99 23       	and	r25, r25
    1224:	a9 f0       	breq	.+42     	; 0x1250 <__floatsisf+0x40>
    1226:	f9 2f       	mov	r31, r25
    1228:	96 e9       	ldi	r25, 0x96	; 150
    122a:	bb 27       	eor	r27, r27
    122c:	93 95       	inc	r25
    122e:	f6 95       	lsr	r31
    1230:	87 95       	ror	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f1 11       	cpse	r31, r1
    123a:	f8 cf       	rjmp	.-16     	; 0x122c <__floatsisf+0x1c>
    123c:	fa f4       	brpl	.+62     	; 0x127c <__floatsisf+0x6c>
    123e:	bb 0f       	add	r27, r27
    1240:	11 f4       	brne	.+4      	; 0x1246 <__floatsisf+0x36>
    1242:	60 ff       	sbrs	r22, 0
    1244:	1b c0       	rjmp	.+54     	; 0x127c <__floatsisf+0x6c>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	16 c0       	rjmp	.+44     	; 0x127c <__floatsisf+0x6c>
    1250:	88 23       	and	r24, r24
    1252:	11 f0       	breq	.+4      	; 0x1258 <__floatsisf+0x48>
    1254:	96 e9       	ldi	r25, 0x96	; 150
    1256:	11 c0       	rjmp	.+34     	; 0x127a <__floatsisf+0x6a>
    1258:	77 23       	and	r23, r23
    125a:	21 f0       	breq	.+8      	; 0x1264 <__floatsisf+0x54>
    125c:	9e e8       	ldi	r25, 0x8E	; 142
    125e:	87 2f       	mov	r24, r23
    1260:	76 2f       	mov	r23, r22
    1262:	05 c0       	rjmp	.+10     	; 0x126e <__floatsisf+0x5e>
    1264:	66 23       	and	r22, r22
    1266:	71 f0       	breq	.+28     	; 0x1284 <__floatsisf+0x74>
    1268:	96 e8       	ldi	r25, 0x86	; 134
    126a:	86 2f       	mov	r24, r22
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	2a f0       	brmi	.+10     	; 0x127c <__floatsisf+0x6c>
    1272:	9a 95       	dec	r25
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	da f7       	brpl	.-10     	; 0x1272 <__floatsisf+0x62>
    127c:	88 0f       	add	r24, r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	97 f9       	bld	r25, 7
    1284:	08 95       	ret

00001286 <__fp_inf>:
    1286:	97 f9       	bld	r25, 7
    1288:	9f 67       	ori	r25, 0x7F	; 127
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	08 95       	ret

00001292 <__fp_nan>:
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	80 ec       	ldi	r24, 0xC0	; 192
    1296:	08 95       	ret

00001298 <__fp_pscA>:
    1298:	00 24       	eor	r0, r0
    129a:	0a 94       	dec	r0
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	18 06       	cpc	r1, r24
    12a2:	09 06       	cpc	r0, r25
    12a4:	08 95       	ret

000012a6 <__fp_pscB>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	12 16       	cp	r1, r18
    12ac:	13 06       	cpc	r1, r19
    12ae:	14 06       	cpc	r1, r20
    12b0:	05 06       	cpc	r0, r21
    12b2:	08 95       	ret

000012b4 <__fp_round>:
    12b4:	09 2e       	mov	r0, r25
    12b6:	03 94       	inc	r0
    12b8:	00 0c       	add	r0, r0
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__fp_round+0xc>
    12bc:	88 23       	and	r24, r24
    12be:	52 f0       	brmi	.+20     	; 0x12d4 <__fp_round+0x20>
    12c0:	bb 0f       	add	r27, r27
    12c2:	40 f4       	brcc	.+16     	; 0x12d4 <__fp_round+0x20>
    12c4:	bf 2b       	or	r27, r31
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__fp_round+0x18>
    12c8:	60 ff       	sbrs	r22, 0
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <__fp_round+0x20>
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	08 95       	ret

000012d6 <__fp_split3>:
    12d6:	57 fd       	sbrc	r21, 7
    12d8:	90 58       	subi	r25, 0x80	; 128
    12da:	44 0f       	add	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	59 f0       	breq	.+22     	; 0x12f6 <__fp_splitA+0x10>
    12e0:	5f 3f       	cpi	r21, 0xFF	; 255
    12e2:	71 f0       	breq	.+28     	; 0x1300 <__fp_splitA+0x1a>
    12e4:	47 95       	ror	r20

000012e6 <__fp_splitA>:
    12e6:	88 0f       	add	r24, r24
    12e8:	97 fb       	bst	r25, 7
    12ea:	99 1f       	adc	r25, r25
    12ec:	61 f0       	breq	.+24     	; 0x1306 <__fp_splitA+0x20>
    12ee:	9f 3f       	cpi	r25, 0xFF	; 255
    12f0:	79 f0       	breq	.+30     	; 0x1310 <__fp_splitA+0x2a>
    12f2:	87 95       	ror	r24
    12f4:	08 95       	ret
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	14 06       	cpc	r1, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	f2 cf       	rjmp	.-28     	; 0x12e4 <__fp_split3+0xe>
    1300:	46 95       	lsr	r20
    1302:	f1 df       	rcall	.-30     	; 0x12e6 <__fp_splitA>
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <__fp_splitA+0x30>
    1306:	16 16       	cp	r1, r22
    1308:	17 06       	cpc	r1, r23
    130a:	18 06       	cpc	r1, r24
    130c:	99 1f       	adc	r25, r25
    130e:	f1 cf       	rjmp	.-30     	; 0x12f2 <__fp_splitA+0xc>
    1310:	86 95       	lsr	r24
    1312:	71 05       	cpc	r23, r1
    1314:	61 05       	cpc	r22, r1
    1316:	08 94       	sec
    1318:	08 95       	ret

0000131a <__fp_zero>:
    131a:	e8 94       	clt

0000131c <__fp_szero>:
    131c:	bb 27       	eor	r27, r27
    131e:	66 27       	eor	r22, r22
    1320:	77 27       	eor	r23, r23
    1322:	cb 01       	movw	r24, r22
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret

00001328 <__mulsf3>:
    1328:	0b d0       	rcall	.+22     	; 0x1340 <__mulsf3x>
    132a:	c4 cf       	rjmp	.-120    	; 0x12b4 <__fp_round>
    132c:	b5 df       	rcall	.-150    	; 0x1298 <__fp_pscA>
    132e:	28 f0       	brcs	.+10     	; 0x133a <__mulsf3+0x12>
    1330:	ba df       	rcall	.-140    	; 0x12a6 <__fp_pscB>
    1332:	18 f0       	brcs	.+6      	; 0x133a <__mulsf3+0x12>
    1334:	95 23       	and	r25, r21
    1336:	09 f0       	breq	.+2      	; 0x133a <__mulsf3+0x12>
    1338:	a6 cf       	rjmp	.-180    	; 0x1286 <__fp_inf>
    133a:	ab cf       	rjmp	.-170    	; 0x1292 <__fp_nan>
    133c:	11 24       	eor	r1, r1
    133e:	ee cf       	rjmp	.-36     	; 0x131c <__fp_szero>

00001340 <__mulsf3x>:
    1340:	ca df       	rcall	.-108    	; 0x12d6 <__fp_split3>
    1342:	a0 f3       	brcs	.-24     	; 0x132c <__mulsf3+0x4>

00001344 <__mulsf3_pse>:
    1344:	95 9f       	mul	r25, r21
    1346:	d1 f3       	breq	.-12     	; 0x133c <__mulsf3+0x14>
    1348:	95 0f       	add	r25, r21
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	55 1f       	adc	r21, r21
    134e:	62 9f       	mul	r22, r18
    1350:	f0 01       	movw	r30, r0
    1352:	72 9f       	mul	r23, r18
    1354:	bb 27       	eor	r27, r27
    1356:	f0 0d       	add	r31, r0
    1358:	b1 1d       	adc	r27, r1
    135a:	63 9f       	mul	r22, r19
    135c:	aa 27       	eor	r26, r26
    135e:	f0 0d       	add	r31, r0
    1360:	b1 1d       	adc	r27, r1
    1362:	aa 1f       	adc	r26, r26
    1364:	64 9f       	mul	r22, r20
    1366:	66 27       	eor	r22, r22
    1368:	b0 0d       	add	r27, r0
    136a:	a1 1d       	adc	r26, r1
    136c:	66 1f       	adc	r22, r22
    136e:	82 9f       	mul	r24, r18
    1370:	22 27       	eor	r18, r18
    1372:	b0 0d       	add	r27, r0
    1374:	a1 1d       	adc	r26, r1
    1376:	62 1f       	adc	r22, r18
    1378:	73 9f       	mul	r23, r19
    137a:	b0 0d       	add	r27, r0
    137c:	a1 1d       	adc	r26, r1
    137e:	62 1f       	adc	r22, r18
    1380:	83 9f       	mul	r24, r19
    1382:	a0 0d       	add	r26, r0
    1384:	61 1d       	adc	r22, r1
    1386:	22 1f       	adc	r18, r18
    1388:	74 9f       	mul	r23, r20
    138a:	33 27       	eor	r19, r19
    138c:	a0 0d       	add	r26, r0
    138e:	61 1d       	adc	r22, r1
    1390:	23 1f       	adc	r18, r19
    1392:	84 9f       	mul	r24, r20
    1394:	60 0d       	add	r22, r0
    1396:	21 1d       	adc	r18, r1
    1398:	82 2f       	mov	r24, r18
    139a:	76 2f       	mov	r23, r22
    139c:	6a 2f       	mov	r22, r26
    139e:	11 24       	eor	r1, r1
    13a0:	9f 57       	subi	r25, 0x7F	; 127
    13a2:	50 40       	sbci	r21, 0x00	; 0
    13a4:	8a f0       	brmi	.+34     	; 0x13c8 <__mulsf3_pse+0x84>
    13a6:	e1 f0       	breq	.+56     	; 0x13e0 <__mulsf3_pse+0x9c>
    13a8:	88 23       	and	r24, r24
    13aa:	4a f0       	brmi	.+18     	; 0x13be <__mulsf3_pse+0x7a>
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	bb 1f       	adc	r27, r27
    13b2:	66 1f       	adc	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	a9 f7       	brne	.-22     	; 0x13a8 <__mulsf3_pse+0x64>
    13be:	9e 3f       	cpi	r25, 0xFE	; 254
    13c0:	51 05       	cpc	r21, r1
    13c2:	70 f0       	brcs	.+28     	; 0x13e0 <__mulsf3_pse+0x9c>
    13c4:	60 cf       	rjmp	.-320    	; 0x1286 <__fp_inf>
    13c6:	aa cf       	rjmp	.-172    	; 0x131c <__fp_szero>
    13c8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ca:	ec f3       	brlt	.-6      	; 0x13c6 <__mulsf3_pse+0x82>
    13cc:	98 3e       	cpi	r25, 0xE8	; 232
    13ce:	dc f3       	brlt	.-10     	; 0x13c6 <__mulsf3_pse+0x82>
    13d0:	86 95       	lsr	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	b7 95       	ror	r27
    13d8:	f7 95       	ror	r31
    13da:	e7 95       	ror	r30
    13dc:	9f 5f       	subi	r25, 0xFF	; 255
    13de:	c1 f7       	brne	.-16     	; 0x13d0 <__mulsf3_pse+0x8c>
    13e0:	fe 2b       	or	r31, r30
    13e2:	88 0f       	add	r24, r24
    13e4:	91 1d       	adc	r25, r1
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	97 f9       	bld	r25, 7
    13ec:	08 95       	ret

000013ee <__divmodhi4>:
    13ee:	97 fb       	bst	r25, 7
    13f0:	07 2e       	mov	r0, r23
    13f2:	16 f4       	brtc	.+4      	; 0x13f8 <__divmodhi4+0xa>
    13f4:	00 94       	com	r0
    13f6:	06 d0       	rcall	.+12     	; 0x1404 <__divmodhi4_neg1>
    13f8:	77 fd       	sbrc	r23, 7
    13fa:	08 d0       	rcall	.+16     	; 0x140c <__divmodhi4_neg2>
    13fc:	0b d0       	rcall	.+22     	; 0x1414 <__udivmodhi4>
    13fe:	07 fc       	sbrc	r0, 7
    1400:	05 d0       	rcall	.+10     	; 0x140c <__divmodhi4_neg2>
    1402:	3e f4       	brtc	.+14     	; 0x1412 <__divmodhi4_exit>

00001404 <__divmodhi4_neg1>:
    1404:	90 95       	com	r25
    1406:	81 95       	neg	r24
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__divmodhi4_neg2>:
    140c:	70 95       	com	r23
    140e:	61 95       	neg	r22
    1410:	7f 4f       	sbci	r23, 0xFF	; 255

00001412 <__divmodhi4_exit>:
    1412:	08 95       	ret

00001414 <__udivmodhi4>:
    1414:	aa 1b       	sub	r26, r26
    1416:	bb 1b       	sub	r27, r27
    1418:	51 e1       	ldi	r21, 0x11	; 17
    141a:	07 c0       	rjmp	.+14     	; 0x142a <__udivmodhi4_ep>

0000141c <__udivmodhi4_loop>:
    141c:	aa 1f       	adc	r26, r26
    141e:	bb 1f       	adc	r27, r27
    1420:	a6 17       	cp	r26, r22
    1422:	b7 07       	cpc	r27, r23
    1424:	10 f0       	brcs	.+4      	; 0x142a <__udivmodhi4_ep>
    1426:	a6 1b       	sub	r26, r22
    1428:	b7 0b       	sbc	r27, r23

0000142a <__udivmodhi4_ep>:
    142a:	88 1f       	adc	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	5a 95       	dec	r21
    1430:	a9 f7       	brne	.-22     	; 0x141c <__udivmodhi4_loop>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	08 95       	ret

0000143c <strcpy>:
    143c:	fb 01       	movw	r30, r22
    143e:	dc 01       	movw	r26, r24
    1440:	01 90       	ld	r0, Z+
    1442:	0d 92       	st	X+, r0
    1444:	00 20       	and	r0, r0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <strcpy+0x4>
    1448:	08 95       	ret

0000144a <_exit>:
    144a:	f8 94       	cli

0000144c <__stop_program>:
    144c:	ff cf       	rjmp	.-2      	; 0x144c <__stop_program>
