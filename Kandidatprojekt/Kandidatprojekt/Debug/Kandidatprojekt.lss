
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001d76  00001e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001da  008001da  00001ee4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002649  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d0  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e5f  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b4  00000000  00000000  00006f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ba1  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001250  00000000  00000000  00017f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000191b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003831  00000000  00000000  00019319  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_19>
      50:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e7       	ldi	r30, 0x76	; 118
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 32       	cpi	r26, 0x22	; 34
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 85 0a 	call	0x150a	; 0x150a <main>
      c6:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:



void FLC_steering(int c, int v)

{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c4 5c       	subi	r28, 0xC4	; 196
      f6:	d1 40       	sbci	r29, 0x01	; 1
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	6c 01       	movw	r12, r24
     104:	2b 01       	movw	r4, r22
	if ((c == 227) & (v == 45))
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	6d 32       	cpi	r22, 0x2D	; 45
     10a:	71 05       	cpc	r23, r1
     10c:	09 f0       	breq	.+2      	; 0x110 <FLC_steering+0x44>
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	23 ee       	ldi	r18, 0xE3	; 227
     114:	c2 16       	cp	r12, r18
     116:	d1 04       	cpc	r13, r1
     118:	09 f0       	breq	.+2      	; 0x11c <FLC_steering+0x50>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	88 23       	and	r24, r24
     11e:	39 f0       	breq	.+14     	; 0x12e <FLC_steering+0x62>
     120:	99 23       	and	r25, r25
     122:	29 f0       	breq	.+10     	; 0x12e <FLC_steering+0x62>
	{
		setServo(STRAIGHT);
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	9a e0       	ldi	r25, 0x0A	; 10
     128:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setServo>
     12c:	3a c3       	rjmp	.+1652   	; 0x7a2 <FLC_steering+0x6d6>
		
	}
	else if ((c == 20) & (v == 45))
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	34 e1       	ldi	r19, 0x14	; 20
     132:	c3 16       	cp	r12, r19
     134:	d1 04       	cpc	r13, r1
     136:	09 f0       	breq	.+2      	; 0x13a <FLC_steering+0x6e>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	88 23       	and	r24, r24
     13c:	39 f0       	breq	.+14     	; 0x14c <FLC_steering+0x80>
     13e:	99 23       	and	r25, r25
     140:	29 f0       	breq	.+10     	; 0x14c <FLC_steering+0x80>
	{
		setServo(MAXRIGHT);
     142:	86 ee       	ldi	r24, 0xE6	; 230
     144:	97 e0       	ldi	r25, 0x07	; 7
     146:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setServo>
     14a:	2b c3       	rjmp	.+1622   	; 0x7a2 <FLC_steering+0x6d6>
	}
	else if ((c == 210) & (v == 45))
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	42 ed       	ldi	r20, 0xD2	; 210
     150:	c4 16       	cp	r12, r20
     152:	d1 04       	cpc	r13, r1
     154:	09 f0       	breq	.+2      	; 0x158 <FLC_steering+0x8c>
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	88 23       	and	r24, r24
     15a:	39 f0       	breq	.+14     	; 0x16a <FLC_steering+0x9e>
     15c:	99 23       	and	r25, r25
     15e:	29 f0       	breq	.+10     	; 0x16a <FLC_steering+0x9e>
	{
		setServo(MAXLEFT);
     160:	8f e3       	ldi	r24, 0x3F	; 63
     162:	9c e0       	ldi	r25, 0x0C	; 12
     164:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setServo>
     168:	1c c3       	rjmp	.+1592   	; 0x7a2 <FLC_steering+0x6d6>
	{
		
		
		///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     16a:	88 e0       	ldi	r24, 0x08	; 8
     16c:	e0 e0       	ldi	r30, 0x00	; 0
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	de 01       	movw	r26, r28
     172:	ad 5e       	subi	r26, 0xED	; 237
     174:	be 4f       	sbci	r27, 0xFE	; 254
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	8a 95       	dec	r24
     17c:	e1 f7       	brne	.-8      	; 0x176 <FLC_steering+0xaa>
		
		struct mf_type inNegative;
		MATLAB_MF(&inNegative, "inNegative", 44, 45, 60, 110);
     17e:	3e 01       	movw	r6, r28
     180:	6d ed       	ldi	r22, 0xDD	; 221
     182:	66 0e       	add	r6, r22
     184:	71 1c       	adc	r7, r1
     186:	0f 2e       	mov	r0, r31
     188:	fe e6       	ldi	r31, 0x6E	; 110
     18a:	ef 2e       	mov	r14, r31
     18c:	f1 2c       	mov	r15, r1
     18e:	f0 2d       	mov	r31, r0
     190:	0c e3       	ldi	r16, 0x3C	; 60
     192:	10 e0       	ldi	r17, 0x00	; 0
     194:	2d e2       	ldi	r18, 0x2D	; 45
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	4c e2       	ldi	r20, 0x2C	; 44
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	68 e0       	ldi	r22, 0x08	; 8
     19e:	71 e0       	ldi	r23, 0x01	; 1
     1a0:	c3 01       	movw	r24, r6
     1a2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type inZero;
		MATLAB_MF(&inZero, "inZero", 75, 125, 125, 175);
     1a6:	4e 01       	movw	r8, r28
     1a8:	87 ec       	ldi	r24, 0xC7	; 199
     1aa:	88 0e       	add	r8, r24
     1ac:	91 1c       	adc	r9, r1
     1ae:	0f 2e       	mov	r0, r31
     1b0:	ff ea       	ldi	r31, 0xAF	; 175
     1b2:	ef 2e       	mov	r14, r31
     1b4:	f1 2c       	mov	r15, r1
     1b6:	f0 2d       	mov	r31, r0
     1b8:	0d e7       	ldi	r16, 0x7D	; 125
     1ba:	10 e0       	ldi	r17, 0x00	; 0
     1bc:	2d e7       	ldi	r18, 0x7D	; 125
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	4b e4       	ldi	r20, 0x4B	; 75
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	63 e1       	ldi	r22, 0x13	; 19
     1c6:	71 e0       	ldi	r23, 0x01	; 1
     1c8:	c4 01       	movw	r24, r8
     1ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type inPositive;
		MATLAB_MF(&inPositive, "inPositive", 140, 190, 205, 206);
     1ce:	5e 01       	movw	r10, r28
     1d0:	91 eb       	ldi	r25, 0xB1	; 177
     1d2:	a9 0e       	add	r10, r25
     1d4:	b1 1c       	adc	r11, r1
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fe ec       	ldi	r31, 0xCE	; 206
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	0d ec       	ldi	r16, 0xCD	; 205
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	2e eb       	ldi	r18, 0xBE	; 190
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	4c e8       	ldi	r20, 0x8C	; 140
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	6a e1       	ldi	r22, 0x1A	; 26
     1ee:	71 e0       	ldi	r23, 0x01	; 1
     1f0:	c5 01       	movw	r24, r10
     1f2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		
		delta_C.membership_functions = &inNegative;
     1f6:	c1 5e       	subi	r28, 0xE1	; 225
     1f8:	de 4f       	sbci	r29, 0xFE	; 254
     1fa:	79 82       	std	Y+1, r7	; 0x01
     1fc:	68 82       	st	Y, r6
     1fe:	cf 51       	subi	r28, 0x1F	; 31
     200:	d1 40       	sbci	r29, 0x01	; 1
		inNegative.next = &inZero;
     202:	d3 01       	movw	r26, r6
     204:	55 96       	adiw	r26, 0x15	; 21
     206:	9c 92       	st	X, r9
     208:	8e 92       	st	-X, r8
     20a:	54 97       	sbiw	r26, 0x14	; 20
		inZero.next = &inPositive;
     20c:	f4 01       	movw	r30, r8
     20e:	b5 8a       	std	Z+21, r11	; 0x15
     210:	a4 8a       	std	Z+20, r10	; 0x14
		inPositive.next = NULL;
     212:	d5 01       	movw	r26, r10
     214:	55 96       	adiw	r26, 0x15	; 21
     216:	1c 92       	st	X, r1
     218:	1e 92       	st	-X, r1
     21a:	54 97       	sbiw	r26, 0x14	; 20
		
		// set iErr's input value to measErr value
		if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     21c:	dd 20       	and	r13, r13
     21e:	3c f4       	brge	.+14     	; 0x22e <FLC_steering+0x162>
		{
			delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     220:	c3 5e       	subi	r28, 0xE3	; 227
     222:	de 4f       	sbci	r29, 0xFE	; 254
     224:	19 82       	std	Y+1, r1	; 0x01
     226:	18 82       	st	Y, r1
     228:	cd 51       	subi	r28, 0x1D	; 29
     22a:	d1 40       	sbci	r29, 0x01	; 1
     22c:	13 c0       	rjmp	.+38     	; 0x254 <FLC_steering+0x188>
		}
		else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     22e:	be ec       	ldi	r27, 0xCE	; 206
     230:	cb 16       	cp	r12, r27
     232:	d1 04       	cpc	r13, r1
     234:	4c f0       	brlt	.+18     	; 0x248 <FLC_steering+0x17c>
		{
			delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     236:	8d ec       	ldi	r24, 0xCD	; 205
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	c3 5e       	subi	r28, 0xE3	; 227
     23c:	de 4f       	sbci	r29, 0xFE	; 254
     23e:	99 83       	std	Y+1, r25	; 0x01
     240:	88 83       	st	Y, r24
     242:	cd 51       	subi	r28, 0x1D	; 29
     244:	d1 40       	sbci	r29, 0x01	; 1
     246:	06 c0       	rjmp	.+12     	; 0x254 <FLC_steering+0x188>
		}
		else
		{
			delta_C.value = c;
     248:	c3 5e       	subi	r28, 0xE3	; 227
     24a:	de 4f       	sbci	r29, 0xFE	; 254
     24c:	d9 82       	std	Y+1, r13	; 0x01
     24e:	c8 82       	st	Y, r12
     250:	cd 51       	subi	r28, 0x1D	; 29
     252:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     254:	88 e0       	ldi	r24, 0x08	; 8
     256:	e5 e2       	ldi	r30, 0x25	; 37
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	de 01       	movw	r26, r28
     25c:	ad 5f       	subi	r26, 0xFD	; 253
     25e:	be 4f       	sbci	r27, 0xFE	; 254
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	8a 95       	dec	r24
     266:	e1 f7       	brne	.-8      	; 0x260 <FLC_steering+0x194>
		
		struct mf_type inMinus;
		MATLAB_MF(&inMinus, "inMinus", -1, 0, 10, 30);
     268:	4e 01       	movw	r8, r28
     26a:	eb e9       	ldi	r30, 0x9B	; 155
     26c:	8e 0e       	add	r8, r30
     26e:	91 1c       	adc	r9, r1
     270:	0f 2e       	mov	r0, r31
     272:	fe e1       	ldi	r31, 0x1E	; 30
     274:	ef 2e       	mov	r14, r31
     276:	f1 2c       	mov	r15, r1
     278:	f0 2d       	mov	r31, r0
     27a:	0a e0       	ldi	r16, 0x0A	; 10
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	4f ef       	ldi	r20, 0xFF	; 255
     284:	5f ef       	ldi	r21, 0xFF	; 255
     286:	6d e2       	ldi	r22, 0x2D	; 45
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	c4 01       	movw	r24, r8
     28c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type inNyll;
		MATLAB_MF(&inNyll, "inNyll", 20 , 40, 40, 60);
     290:	5e 01       	movw	r10, r28
     292:	f5 e8       	ldi	r31, 0x85	; 133
     294:	af 0e       	add	r10, r31
     296:	b1 1c       	adc	r11, r1
     298:	0f 2e       	mov	r0, r31
     29a:	fc e3       	ldi	r31, 0x3C	; 60
     29c:	ef 2e       	mov	r14, r31
     29e:	f1 2c       	mov	r15, r1
     2a0:	f0 2d       	mov	r31, r0
     2a2:	08 e2       	ldi	r16, 0x28	; 40
     2a4:	10 e0       	ldi	r17, 0x00	; 0
     2a6:	28 e2       	ldi	r18, 0x28	; 40
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	44 e1       	ldi	r20, 0x14	; 20
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	65 e3       	ldi	r22, 0x35	; 53
     2b0:	71 e0       	ldi	r23, 0x01	; 1
     2b2:	c5 01       	movw	r24, r10
     2b4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type inPlus;
		MATLAB_MF(&inPlus, "inPlus", 50, 70, 80, 81);
     2b8:	6e 01       	movw	r12, r28
     2ba:	1f e6       	ldi	r17, 0x6F	; 111
     2bc:	c1 0e       	add	r12, r17
     2be:	d1 1c       	adc	r13, r1
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f1 e5       	ldi	r31, 0x51	; 81
     2c4:	ef 2e       	mov	r14, r31
     2c6:	f1 2c       	mov	r15, r1
     2c8:	f0 2d       	mov	r31, r0
     2ca:	00 e5       	ldi	r16, 0x50	; 80
     2cc:	10 e0       	ldi	r17, 0x00	; 0
     2ce:	26 e4       	ldi	r18, 0x46	; 70
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	42 e3       	ldi	r20, 0x32	; 50
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	6c e3       	ldi	r22, 0x3C	; 60
     2d8:	71 e0       	ldi	r23, 0x01	; 1
     2da:	c6 01       	movw	r24, r12
     2dc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		
		delta_V.membership_functions = &inMinus;
     2e0:	c1 5f       	subi	r28, 0xF1	; 241
     2e2:	de 4f       	sbci	r29, 0xFE	; 254
     2e4:	99 82       	std	Y+1, r9	; 0x01
     2e6:	88 82       	st	Y, r8
     2e8:	cf 50       	subi	r28, 0x0F	; 15
     2ea:	d1 40       	sbci	r29, 0x01	; 1
		inMinus.next = &inNyll;
     2ec:	d4 01       	movw	r26, r8
     2ee:	55 96       	adiw	r26, 0x15	; 21
     2f0:	bc 92       	st	X, r11
     2f2:	ae 92       	st	-X, r10
     2f4:	54 97       	sbiw	r26, 0x14	; 20
		inNyll.next = &inPlus;
     2f6:	f5 01       	movw	r30, r10
     2f8:	d5 8a       	std	Z+21, r13	; 0x15
     2fa:	c4 8a       	std	Z+20, r12	; 0x14
		inPlus.next = NULL;
     2fc:	d6 01       	movw	r26, r12
     2fe:	55 96       	adiw	r26, 0x15	; 21
     300:	1c 92       	st	X, r1
     302:	1e 92       	st	-X, r1
     304:	54 97       	sbiw	r26, 0x14	; 20
		
		// set V's input value to V´s value
		if(v<0)				// if sensor value is smaller than error's input set lower limit
     306:	55 20       	and	r5, r5
     308:	3c f4       	brge	.+14     	; 0x318 <FLC_steering+0x24c>
		{
			delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     30a:	c3 5f       	subi	r28, 0xF3	; 243
     30c:	de 4f       	sbci	r29, 0xFE	; 254
     30e:	19 82       	std	Y+1, r1	; 0x01
     310:	18 82       	st	Y, r1
     312:	cd 50       	subi	r28, 0x0D	; 13
     314:	d1 40       	sbci	r29, 0x01	; 1
     316:	13 c0       	rjmp	.+38     	; 0x33e <FLC_steering+0x272>
		}
		else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     318:	b1 e5       	ldi	r27, 0x51	; 81
     31a:	4b 16       	cp	r4, r27
     31c:	51 04       	cpc	r5, r1
     31e:	4c f0       	brlt	.+18     	; 0x332 <FLC_steering+0x266>
		{
			delta_V.value = 80;  // force input value to lowest point in error's input set
     320:	80 e5       	ldi	r24, 0x50	; 80
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	c3 5f       	subi	r28, 0xF3	; 243
     326:	de 4f       	sbci	r29, 0xFE	; 254
     328:	99 83       	std	Y+1, r25	; 0x01
     32a:	88 83       	st	Y, r24
     32c:	cd 50       	subi	r28, 0x0D	; 13
     32e:	d1 40       	sbci	r29, 0x01	; 1
     330:	06 c0       	rjmp	.+12     	; 0x33e <FLC_steering+0x272>
		}
		else
		{
			delta_V.value = v;
     332:	c3 5f       	subi	r28, 0xF3	; 243
     334:	de 4f       	sbci	r29, 0xFE	; 254
     336:	59 82       	std	Y+1, r5	; 0x01
     338:	48 82       	st	Y, r4
     33a:	cd 50       	subi	r28, 0x0D	; 13
     33c:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

		struct io_type steering; strcpy(steering.name, "steering");
     33e:	1e 01       	movw	r2, r28
     340:	e3 ef       	ldi	r30, 0xF3	; 243
     342:	2e 0e       	add	r2, r30
     344:	31 1c       	adc	r3, r1
     346:	89 e0       	ldi	r24, 0x09	; 9
     348:	e3 e4       	ldi	r30, 0x43	; 67
     34a:	f1 e0       	ldi	r31, 0x01	; 1
     34c:	d1 01       	movw	r26, r2
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <FLC_steering+0x282>
		
		struct mf_type sharpRight;
		MATLAB_MF(&sharpRight, "sharpRight", 2259, 2260, 2260, 2460);
     356:	2e 01       	movw	r4, r28
     358:	f9 e5       	ldi	r31, 0x59	; 89
     35a:	4f 0e       	add	r4, r31
     35c:	51 1c       	adc	r5, r1
     35e:	0f 2e       	mov	r0, r31
     360:	fc e9       	ldi	r31, 0x9C	; 156
     362:	ef 2e       	mov	r14, r31
     364:	f9 e0       	ldi	r31, 0x09	; 9
     366:	ff 2e       	mov	r15, r31
     368:	f0 2d       	mov	r31, r0
     36a:	04 ed       	ldi	r16, 0xD4	; 212
     36c:	18 e0       	ldi	r17, 0x08	; 8
     36e:	24 ed       	ldi	r18, 0xD4	; 212
     370:	38 e0       	ldi	r19, 0x08	; 8
     372:	43 ed       	ldi	r20, 0xD3	; 211
     374:	58 e0       	ldi	r21, 0x08	; 8
     376:	6c e4       	ldi	r22, 0x4C	; 76
     378:	71 e0       	ldi	r23, 0x01	; 1
     37a:	c2 01       	movw	r24, r4
     37c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type right;
		MATLAB_MF(&right, "right", 2260, 2460, 2460, 2660);
     380:	6e 01       	movw	r12, r28
     382:	13 e4       	ldi	r17, 0x43	; 67
     384:	c1 0e       	add	r12, r17
     386:	d1 1c       	adc	r13, r1
     388:	0f 2e       	mov	r0, r31
     38a:	f4 e6       	ldi	r31, 0x64	; 100
     38c:	ef 2e       	mov	r14, r31
     38e:	fa e0       	ldi	r31, 0x0A	; 10
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
     394:	0c e9       	ldi	r16, 0x9C	; 156
     396:	19 e0       	ldi	r17, 0x09	; 9
     398:	2c e9       	ldi	r18, 0x9C	; 156
     39a:	39 e0       	ldi	r19, 0x09	; 9
     39c:	44 ed       	ldi	r20, 0xD4	; 212
     39e:	58 e0       	ldi	r21, 0x08	; 8
     3a0:	67 e5       	ldi	r22, 0x57	; 87
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	c6 01       	movw	r24, r12
     3a6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type straight;
		MATLAB_MF(&straight, "straight", 2460, 2660, 2660, 2860);
     3aa:	3e 01       	movw	r6, r28
     3ac:	2d e2       	ldi	r18, 0x2D	; 45
     3ae:	62 0e       	add	r6, r18
     3b0:	71 1c       	adc	r7, r1
     3b2:	0f 2e       	mov	r0, r31
     3b4:	fc e2       	ldi	r31, 0x2C	; 44
     3b6:	ef 2e       	mov	r14, r31
     3b8:	fb e0       	ldi	r31, 0x0B	; 11
     3ba:	ff 2e       	mov	r15, r31
     3bc:	f0 2d       	mov	r31, r0
     3be:	04 e6       	ldi	r16, 0x64	; 100
     3c0:	1a e0       	ldi	r17, 0x0A	; 10
     3c2:	24 e6       	ldi	r18, 0x64	; 100
     3c4:	3a e0       	ldi	r19, 0x0A	; 10
     3c6:	4c e9       	ldi	r20, 0x9C	; 156
     3c8:	59 e0       	ldi	r21, 0x09	; 9
     3ca:	6d e5       	ldi	r22, 0x5D	; 93
     3cc:	71 e0       	ldi	r23, 0x01	; 1
     3ce:	c3 01       	movw	r24, r6
     3d0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MATLAB_MF>
		struct mf_type left;
		MATLAB_MF(&left, "left", 2660, 2860, 2860, 3060);
     3d4:	4e 01       	movw	r8, r28
     3d6:	37 e1       	ldi	r19, 0x17	; 23
     3d8:	83 0e       	add	r8, r19
     3da:	91 1c       	adc	r9, r1
     3dc:	0f 2e       	mov	r0, r31
     3de:	f4 ef       	ldi	r31, 0xF4	; 244
     3e0:	ef 2e       	mov	r14, r31
     3e2:	fb e0       	ldi	r31, 0x0B	; 11
     3e4:	ff 2e       	mov	r15, r31
     3e6:	f0 2d       	mov	r31, r0
     3e8:	0c e2       	ldi	r16, 0x2C	; 44
     3ea:	1b e0       	ldi	r17, 0x0B	; 11
     3ec:	2c e2       	ldi	r18, 0x2C	; 44
     3ee:	3b e0       	ldi	r19, 0x0B	; 11
     3f0:	44 e6       	ldi	r20, 0x64	; 100
     3f2:	5a e0       	ldi	r21, 0x0A	; 10
     3f4:	66 e6       	ldi	r22, 0x66	; 102
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	c4 01       	movw	r24, r8
     3fa:	f3 d7       	rcall	.+4070   	; 0x13e2 <MATLAB_MF>
		struct mf_type sharpLeft;
		MATLAB_MF(&sharpLeft, "sharpLeft", 2860, 3060, 3060, 3061);
     3fc:	0f 2e       	mov	r0, r31
     3fe:	f5 ef       	ldi	r31, 0xF5	; 245
     400:	ef 2e       	mov	r14, r31
     402:	fb e0       	ldi	r31, 0x0B	; 11
     404:	ff 2e       	mov	r15, r31
     406:	f0 2d       	mov	r31, r0
     408:	04 ef       	ldi	r16, 0xF4	; 244
     40a:	1b e0       	ldi	r17, 0x0B	; 11
     40c:	24 ef       	ldi	r18, 0xF4	; 244
     40e:	3b e0       	ldi	r19, 0x0B	; 11
     410:	4c e2       	ldi	r20, 0x2C	; 44
     412:	5b e0       	ldi	r21, 0x0B	; 11
     414:	6b e6       	ldi	r22, 0x6B	; 107
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	5c 01       	movw	r10, r24
     41e:	e1 d7       	rcall	.+4034   	; 0x13e2 <MATLAB_MF>
		
		steering.membership_functions = &sharpRight;
     420:	d1 01       	movw	r26, r2
     422:	1d 96       	adiw	r26, 0x0d	; 13
     424:	5c 92       	st	X, r5
     426:	4e 92       	st	-X, r4
     428:	1c 97       	sbiw	r26, 0x0c	; 12
		sharpRight.next = &right;
     42a:	f2 01       	movw	r30, r4
     42c:	d5 8a       	std	Z+21, r13	; 0x15
     42e:	c4 8a       	std	Z+20, r12	; 0x14
		right.next = &straight;
     430:	d6 01       	movw	r26, r12
     432:	55 96       	adiw	r26, 0x15	; 21
     434:	7c 92       	st	X, r7
     436:	6e 92       	st	-X, r6
     438:	54 97       	sbiw	r26, 0x14	; 20
		straight.next = &left;
     43a:	23 96       	adiw	r28, 0x03	; 3
     43c:	9f ae       	std	Y+63, r9	; 0x3f
     43e:	8e ae       	std	Y+62, r8	; 0x3e
     440:	23 97       	sbiw	r28, 0x03	; 3
		left.next = &sharpLeft;
     442:	bc a6       	std	Y+44, r11	; 0x2c
     444:	ab a6       	std	Y+43, r10	; 0x2b
		sharpLeft.next = NULL;
     446:	1e 8a       	std	Y+22, r1	; 0x16
     448:	1d 8a       	std	Y+21, r1	; 0x15
		
		
		
		// pointers to top of lists

		System_Inputs = &delta_C;
     44a:	a0 53       	subi	r26, 0x30	; 48
     44c:	bf 4f       	sbci	r27, 0xFF	; 255
     44e:	b0 93 f7 02 	sts	0x02F7, r27
     452:	a0 93 f6 02 	sts	0x02F6, r26
		delta_C.next = &delta_V;
     456:	e6 55       	subi	r30, 0x56	; 86
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	1f 96       	adiw	r26, 0x0f	; 15
     45c:	fc 93       	st	X, r31
     45e:	ee 93       	st	-X, r30
     460:	1e 97       	sbiw	r26, 0x0e	; 14
		delta_V.next = NULL;
     462:	17 86       	std	Z+15, r1	; 0x0f
     464:	16 86       	std	Z+14, r1	; 0x0e
		System_Outputs = &steering;
     466:	30 92 f5 02 	sts	0x02F5, r3
     46a:	20 92 f4 02 	sts	0x02F4, r2
		steering.next = NULL;
     46e:	f1 01       	movw	r30, r2
     470:	17 86       	std	Z+15, r1	; 0x0f
     472:	16 86       	std	Z+14, r1	; 0x0e
		
		
		
		//RULE 9 "if C is zero AND V is high then servo is left"
		struct rule_element_type then9;
		then9.value = &left.value;
     474:	a2 55       	subi	r26, 0x52	; 82
     476:	bf 4f       	sbci	r27, 0xFF	; 255
     478:	21 e2       	ldi	r18, 0x21	; 33
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	2c 0f       	add	r18, r28
     47e:	3d 1f       	adc	r19, r29
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	3c 93       	st	X, r19
     484:	2e 93       	st	-X, r18
		then9.next = NULL;
     486:	13 96       	adiw	r26, 0x03	; 3
     488:	1c 92       	st	X, r1
     48a:	1e 92       	st	-X, r1
     48c:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if92;
		if92.value = &inPlus.value;
     48e:	be 01       	movw	r22, r28
     490:	63 54       	subi	r22, 0x43	; 67
     492:	7e 4f       	sbci	r23, 0xFE	; 254
     494:	28 5a       	subi	r18, 0xA8	; 168
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	fb 01       	movw	r30, r22
     49a:	31 83       	std	Z+1, r19	; 0x01
     49c:	20 83       	st	Z, r18
		if92.next = NULL;
     49e:	13 82       	std	Z+3, r1	; 0x03
     4a0:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if91;
		if91.value = &inZero.value;
     4a2:	ce 01       	movw	r24, r28
     4a4:	87 54       	subi	r24, 0x47	; 71
     4a6:	9e 4f       	sbci	r25, 0xFE	; 254
     4a8:	3e 01       	movw	r6, r28
     4aa:	f1 ed       	ldi	r31, 0xD1	; 209
     4ac:	6f 0e       	add	r6, r31
     4ae:	71 1c       	adc	r7, r1
     4b0:	fc 01       	movw	r30, r24
     4b2:	71 82       	std	Z+1, r7	; 0x01
     4b4:	60 82       	st	Z, r6
		if91.next = &if92;
     4b6:	73 83       	std	Z+3, r23	; 0x03
     4b8:	62 83       	std	Z+2, r22	; 0x02

		struct rule_type rule9;
		rule9.if_side = &if91;
     4ba:	e6 56       	subi	r30, 0x66	; 102
     4bc:	f1 09       	sbc	r31, r1
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	80 83       	st	Z, r24
		rule9.then_side = &then9;
     4c2:	b3 83       	std	Z+3, r27	; 0x03
     4c4:	a2 83       	std	Z+2, r26	; 0x02
		rule9.next = NULL;
     4c6:	15 82       	std	Z+5, r1	; 0x05
     4c8:	14 82       	std	Z+4, r1	; 0x04

		
		//RULE 8 "if C is positive AND V is inPlus then servo is right"
		struct rule_element_type then8;
		then8.value = &right.value;
     4ca:	ae 01       	movw	r20, r28
     4cc:	4b 54       	subi	r20, 0x4B	; 75
     4ce:	5e 4f       	sbci	r21, 0xFE	; 254
     4d0:	76 01       	movw	r14, r12
     4d2:	1a e0       	ldi	r17, 0x0A	; 10
     4d4:	e1 0e       	add	r14, r17
     4d6:	f1 1c       	adc	r15, r1
     4d8:	da 01       	movw	r26, r20
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	fc 92       	st	X, r15
     4de:	ee 92       	st	-X, r14
		then8.next = NULL;
     4e0:	13 96       	adiw	r26, 0x03	; 3
     4e2:	1c 92       	st	X, r1
     4e4:	1e 92       	st	-X, r1
     4e6:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if82;
		if82.value = &inPlus.value;
     4e8:	08 97       	sbiw	r24, 0x08	; 8
     4ea:	dc 01       	movw	r26, r24
     4ec:	11 96       	adiw	r26, 0x01	; 1
     4ee:	3c 93       	st	X, r19
     4f0:	2e 93       	st	-X, r18
		if82.next = NULL;
     4f2:	13 96       	adiw	r26, 0x03	; 3
     4f4:	1c 92       	st	X, r1
     4f6:	1e 92       	st	-X, r1
     4f8:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if81;
		if81.value = &inPositive.value;
     4fa:	60 51       	subi	r22, 0x10	; 16
     4fc:	71 09       	sbc	r23, r1
     4fe:	8e 01       	movw	r16, r28
     500:	05 54       	subi	r16, 0x45	; 69
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	db 01       	movw	r26, r22
     506:	11 96       	adiw	r26, 0x01	; 1
     508:	1c 93       	st	X, r17
     50a:	0e 93       	st	-X, r16
		if81.next = &if82;
     50c:	13 96       	adiw	r26, 0x03	; 3
     50e:	9c 93       	st	X, r25
     510:	8e 93       	st	-X, r24
     512:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule8;
		rule8.if_side = &if81;
     514:	84 56       	subi	r24, 0x64	; 100
     516:	91 09       	sbc	r25, r1
     518:	dc 01       	movw	r26, r24
     51a:	11 96       	adiw	r26, 0x01	; 1
     51c:	7c 93       	st	X, r23
     51e:	6e 93       	st	-X, r22
		rule8.then_side = &then8;
     520:	13 96       	adiw	r26, 0x03	; 3
     522:	5c 93       	st	X, r21
     524:	4e 93       	st	-X, r20
     526:	12 97       	sbiw	r26, 0x02	; 2
		rule8.next = &rule9;
     528:	15 96       	adiw	r26, 0x05	; 5
     52a:	fc 93       	st	X, r31
     52c:	ee 93       	st	-X, r30
     52e:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
		struct rule_element_type then7;
		then7.value = &sharpRight.value;
     530:	4c 50       	subi	r20, 0x0C	; 12
     532:	51 09       	sbc	r21, r1
     534:	ba e0       	ldi	r27, 0x0A	; 10
     536:	4b 0e       	add	r4, r27
     538:	51 1c       	adc	r5, r1
     53a:	fa 01       	movw	r30, r20
     53c:	51 82       	std	Z+1, r5	; 0x01
     53e:	40 82       	st	Z, r4
		then7.next = NULL;
     540:	13 82       	std	Z+3, r1	; 0x03
     542:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if72;
		if72.value = &inNyll.value;
     544:	34 97       	sbiw	r30, 0x04	; 4
     546:	6e 51       	subi	r22, 0x1E	; 30
     548:	71 40       	sbci	r23, 0x01	; 1
     54a:	71 83       	std	Z+1, r23	; 0x01
     54c:	60 83       	st	Z, r22
		if72.next = NULL;
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if71;
		if71.value = &inPositive.value;
     552:	6e 01       	movw	r12, r28
     554:	af e5       	ldi	r26, 0x5F	; 95
     556:	ca 1a       	sub	r12, r26
     558:	ae ef       	ldi	r26, 0xFE	; 254
     55a:	da 0a       	sbc	r13, r26
     55c:	d6 01       	movw	r26, r12
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	1c 93       	st	X, r17
     562:	0e 93       	st	-X, r16
		if71.next = &if72;
     564:	13 96       	adiw	r26, 0x03	; 3
     566:	fc 93       	st	X, r31
     568:	ee 93       	st	-X, r30
     56a:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule7;
		rule7.if_side = &if71;
     56c:	ee 55       	subi	r30, 0x5E	; 94
     56e:	f1 09       	sbc	r31, r1
     570:	d1 82       	std	Z+1, r13	; 0x01
     572:	c0 82       	st	Z, r12
		rule7.then_side = &then7;
     574:	53 83       	std	Z+3, r21	; 0x03
     576:	42 83       	std	Z+2, r20	; 0x02
		rule7.next = &rule8;
     578:	95 83       	std	Z+5, r25	; 0x05
     57a:	84 83       	std	Z+4, r24	; 0x04
		
		
		//RULE 6 "if C is positive AND V is minus then servo is straight" 
		struct rule_element_type then6;
		then6.value = &straight.value;
     57c:	80 5b       	subi	r24, 0xB0	; 176
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	42 57       	subi	r20, 0x72	; 114
     582:	51 40       	sbci	r21, 0x01	; 1
     584:	dc 01       	movw	r26, r24
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	5c 93       	st	X, r21
     58a:	4e 93       	st	-X, r20
		then6.next = NULL;
     58c:	13 96       	adiw	r26, 0x03	; 3
     58e:	1c 92       	st	X, r1
     590:	1e 92       	st	-X, r1
     592:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if62;
		if62.value = &inMinus.value;
     594:	5e 01       	movw	r10, r28
     596:	b7 e6       	ldi	r27, 0x67	; 103
     598:	ab 1a       	sub	r10, r27
     59a:	be ef       	ldi	r27, 0xFE	; 254
     59c:	bb 0a       	sbc	r11, r27
     59e:	4e 01       	movw	r8, r28
     5a0:	a5 ea       	ldi	r26, 0xA5	; 165
     5a2:	8a 0e       	add	r8, r26
     5a4:	91 1c       	adc	r9, r1
     5a6:	d5 01       	movw	r26, r10
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	9c 92       	st	X, r9
     5ac:	8e 92       	st	-X, r8
		if62.next = NULL;
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	1c 92       	st	X, r1
     5b2:	1e 92       	st	-X, r1
     5b4:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if61;
		if61.value = &inPositive.value;
     5b6:	6e 01       	movw	r12, r28
     5b8:	bb e6       	ldi	r27, 0x6B	; 107
     5ba:	cb 1a       	sub	r12, r27
     5bc:	be ef       	ldi	r27, 0xFE	; 254
     5be:	db 0a       	sbc	r13, r27
     5c0:	d6 01       	movw	r26, r12
     5c2:	11 96       	adiw	r26, 0x01	; 1
     5c4:	1c 93       	st	X, r17
     5c6:	0e 93       	st	-X, r16
		if61.next = &if62;
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	bc 92       	st	X, r11
     5cc:	ae 92       	st	-X, r10
     5ce:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule6;
		rule6.if_side = &if61;
     5d0:	a4 55       	subi	r26, 0x54	; 84
     5d2:	b1 09       	sbc	r27, r1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	dc 92       	st	X, r13
     5d8:	ce 92       	st	-X, r12
		rule6.then_side = &then6;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	12 97       	sbiw	r26, 0x02	; 2
		rule6.next = &rule7;
     5e2:	15 96       	adiw	r26, 0x05	; 5
     5e4:	fc 93       	st	X, r31
     5e6:	ee 93       	st	-X, r30
     5e8:	14 97       	sbiw	r26, 0x04	; 4

		

		//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
		struct rule_element_type then5;
		then5.value = &sharpLeft.value;
     5ea:	6e 01       	movw	r12, r28
     5ec:	ef e6       	ldi	r30, 0x6F	; 111
     5ee:	ce 1a       	sub	r12, r30
     5f0:	ee ef       	ldi	r30, 0xFE	; 254
     5f2:	de 0a       	sbc	r13, r30
     5f4:	82 59       	subi	r24, 0x92	; 146
     5f6:	91 40       	sbci	r25, 0x01	; 1
     5f8:	f6 01       	movw	r30, r12
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
		then5.next = NULL;
     5fe:	13 82       	std	Z+3, r1	; 0x03
     600:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if52;
		if52.value = &inNyll.value;
     602:	0e 52       	subi	r16, 0x2E	; 46
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	f8 01       	movw	r30, r16
     608:	71 83       	std	Z+1, r23	; 0x01
     60a:	60 83       	st	Z, r22
		if52.next = NULL;
     60c:	13 82       	std	Z+3, r1	; 0x03
     60e:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if51;
		if51.value = &inNegative.value;
     610:	5e 01       	movw	r10, r28
     612:	f7 e7       	ldi	r31, 0x77	; 119
     614:	af 1a       	sub	r10, r31
     616:	fe ef       	ldi	r31, 0xFE	; 254
     618:	bf 0a       	sbc	r11, r31
     61a:	84 52       	subi	r24, 0x24	; 36
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	f5 01       	movw	r30, r10
     620:	91 83       	std	Z+1, r25	; 0x01
     622:	80 83       	st	Z, r24
		if51.next = &if52;
     624:	13 83       	std	Z+3, r17	; 0x03
     626:	02 83       	std	Z+2, r16	; 0x02

		struct rule_type rule5;
		rule5.if_side = &if51;
     628:	ee 54       	subi	r30, 0x4E	; 78
     62a:	f1 09       	sbc	r31, r1
     62c:	b1 82       	std	Z+1, r11	; 0x01
     62e:	a0 82       	st	Z, r10
		rule5.then_side = &then5;
     630:	d3 82       	std	Z+3, r13	; 0x03
     632:	c2 82       	std	Z+2, r12	; 0x02
		rule5.next = &rule6;
     634:	b5 83       	std	Z+5, r27	; 0x05
     636:	a4 83       	std	Z+4, r26	; 0x04

		

		//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
		struct rule_element_type then4;
		then4.value = &straight.value;
     638:	5e 01       	movw	r10, r28
     63a:	1b e7       	ldi	r17, 0x7B	; 123
     63c:	a1 1a       	sub	r10, r17
     63e:	1e ef       	ldi	r17, 0xFE	; 254
     640:	b1 0a       	sbc	r11, r17
     642:	d5 01       	movw	r26, r10
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	5c 93       	st	X, r21
     648:	4e 93       	st	-X, r20
		then4.next = NULL;
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	1c 92       	st	X, r1
     64e:	1e 92       	st	-X, r1
     650:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if42;
		if42.value = &inNyll.value;
     652:	6e 01       	movw	r12, r28
     654:	bf e7       	ldi	r27, 0x7F	; 127
     656:	cb 1a       	sub	r12, r27
     658:	be ef       	ldi	r27, 0xFE	; 254
     65a:	db 0a       	sbc	r13, r27
     65c:	d6 01       	movw	r26, r12
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	7c 93       	st	X, r23
     662:	6e 93       	st	-X, r22
		if42.next = NULL;
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	1c 92       	st	X, r1
     668:	1e 92       	st	-X, r1
     66a:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if41;
		if41.value = &inZero.value;
     66c:	62 51       	subi	r22, 0x12	; 18
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	db 01       	movw	r26, r22
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	7c 92       	st	X, r7
     676:	6e 92       	st	-X, r6
		if41.next = &if42;
     678:	13 96       	adiw	r26, 0x03	; 3
     67a:	dc 92       	st	X, r13
     67c:	ce 92       	st	-X, r12
     67e:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule4;
		rule4.if_side = &if41;
     680:	6e 01       	movw	r12, r28
     682:	bb ec       	ldi	r27, 0xCB	; 203
     684:	cb 1a       	sub	r12, r27
     686:	be ef       	ldi	r27, 0xFE	; 254
     688:	db 0a       	sbc	r13, r27
     68a:	d6 01       	movw	r26, r12
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	7c 93       	st	X, r23
     690:	6e 93       	st	-X, r22
		rule4.then_side = &then4;
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	bc 92       	st	X, r11
     696:	ae 92       	st	-X, r10
     698:	12 97       	sbiw	r26, 0x02	; 2
		rule4.next = &rule5;
     69a:	15 96       	adiw	r26, 0x05	; 5
     69c:	fc 93       	st	X, r31
     69e:	ee 93       	st	-X, r30
     6a0:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
		struct rule_element_type then3;
		then3.value = &straight.value;
     6a2:	64 50       	subi	r22, 0x04	; 4
     6a4:	71 09       	sbc	r23, r1
     6a6:	fb 01       	movw	r30, r22
     6a8:	51 83       	std	Z+1, r21	; 0x01
     6aa:	40 83       	st	Z, r20
		then3.next = NULL;
     6ac:	13 82       	std	Z+3, r1	; 0x03
     6ae:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if32;
		if32.value = &inPlus.value;
     6b0:	a0 5c       	subi	r26, 0xC0	; 192
     6b2:	bf 4f       	sbci	r27, 0xFF	; 255
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	3c 93       	st	X, r19
     6b8:	2e 93       	st	-X, r18
		if32.next = NULL;
     6ba:	13 96       	adiw	r26, 0x03	; 3
     6bc:	1c 92       	st	X, r1
     6be:	1e 92       	st	-X, r1
     6c0:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if31;
		if31.value = &inNegative.value;
     6c2:	28 50       	subi	r18, 0x08	; 8
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	f9 01       	movw	r30, r18
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
		if31.next = &if32;
     6cc:	b3 83       	std	Z+3, r27	; 0x03
     6ce:	a2 83       	std	Z+2, r26	; 0x02

		struct rule_type rule3;
		rule3.if_side = &if31;
     6d0:	a6 54       	subi	r26, 0x46	; 70
     6d2:	b1 09       	sbc	r27, r1
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	3c 93       	st	X, r19
     6d8:	2e 93       	st	-X, r18
		rule3.then_side = &then3;
     6da:	13 96       	adiw	r26, 0x03	; 3
     6dc:	7c 93       	st	X, r23
     6de:	6e 93       	st	-X, r22
     6e0:	12 97       	sbiw	r26, 0x02	; 2
		rule3.next = &rule4;
     6e2:	15 96       	adiw	r26, 0x05	; 5
     6e4:	dc 92       	st	X, r13
     6e6:	ce 92       	st	-X, r12
     6e8:	14 97       	sbiw	r26, 0x04	; 4
		
		
		//RULE 2 "if C is negative AND V is minus then servo is Left"
		struct rule_element_type then2;
		then2.value = &left.value;
     6ea:	6c 50       	subi	r22, 0x0C	; 12
     6ec:	71 09       	sbc	r23, r1
     6ee:	21 e2       	ldi	r18, 0x21	; 33
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	2c 0f       	add	r18, r28
     6f4:	3d 1f       	adc	r19, r29
     6f6:	fb 01       	movw	r30, r22
     6f8:	31 83       	std	Z+1, r19	; 0x01
     6fa:	20 83       	st	Z, r18
		then2.next = NULL;
     6fc:	13 82       	std	Z+3, r1	; 0x03
     6fe:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if22;
		if22.value = &inMinus.value;
     700:	4e 5c       	subi	r20, 0xCE	; 206
     702:	5e 4f       	sbci	r21, 0xFE	; 254
     704:	fa 01       	movw	r30, r20
     706:	91 82       	std	Z+1, r9	; 0x01
     708:	80 82       	st	Z, r8
		if22.next = NULL;
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if21;
		if21.value = &inNegative.value;
     70e:	2c 5b       	subi	r18, 0xBC	; 188
     710:	3e 4f       	sbci	r19, 0xFE	; 254
     712:	f9 01       	movw	r30, r18
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	80 83       	st	Z, r24
		if21.next = &if22;
     718:	53 83       	std	Z+3, r21	; 0x03
     71a:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule2;
		rule2.if_side = &if21;
     71c:	8e 5b       	subi	r24, 0xBE	; 190
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	fc 01       	movw	r30, r24
     722:	31 83       	std	Z+1, r19	; 0x01
     724:	20 83       	st	Z, r18
		rule2.then_side = &then2;
     726:	73 83       	std	Z+3, r23	; 0x03
     728:	62 83       	std	Z+2, r22	; 0x02
		rule2.next = &rule3;
     72a:	b5 83       	std	Z+5, r27	; 0x05
     72c:	a4 83       	std	Z+4, r26	; 0x04

		//RULE 1 "if C is zero AND V is minus then steering is right"
		struct rule_element_type then1;
		then1.value = &right.value;
     72e:	d2 96       	adiw	r26, 0x32	; 50
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	fc 92       	st	X, r15
     734:	ee 92       	st	-X, r14
		then1.next = NULL;
     736:	13 96       	adiw	r26, 0x03	; 3
     738:	1c 92       	st	X, r1
     73a:	1e 92       	st	-X, r1
     73c:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if12;
		if12.value = &inMinus.value;
     73e:	4c 50       	subi	r20, 0x0C	; 12
     740:	51 09       	sbc	r21, r1
     742:	fa 01       	movw	r30, r20
     744:	91 82       	std	Z+1, r9	; 0x01
     746:	80 82       	st	Z, r8
		if12.next = NULL;
     748:	13 82       	std	Z+3, r1	; 0x03
     74a:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if11;
		if11.value = &inZero.value;
     74c:	2c 50       	subi	r18, 0x0C	; 12
     74e:	31 09       	sbc	r19, r1
     750:	f9 01       	movw	r30, r18
     752:	71 82       	std	Z+1, r7	; 0x01
     754:	60 82       	st	Z, r6
		if11.next = &if12;
     756:	53 83       	std	Z+3, r21	; 0x03
     758:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule1;
		rule1.if_side = &if11;
     75a:	f6 97       	sbiw	r30, 0x36	; 54
     75c:	31 83       	std	Z+1, r19	; 0x01
     75e:	20 83       	st	Z, r18
		rule1.then_side = &then1;
     760:	b3 83       	std	Z+3, r27	; 0x03
     762:	a2 83       	std	Z+2, r26	; 0x02
		rule1.next = &rule2;
     764:	95 83       	std	Z+5, r25	; 0x05
     766:	84 83       	std	Z+4, r24	; 0x04
		Rule_Base = &rule1;
     768:	f0 93 f9 02 	sts	0x02F9, r31
     76c:	e0 93 f8 02 	sts	0x02F8, r30
		
		
		// the methods performing the FLC
		fuzzification();
     770:	0e d5       	rcall	.+2588   	; 0x118e <fuzzification>
		rule_evaluation();
     772:	34 d5       	rcall	.+2664   	; 0x11dc <rule_evaluation>
		defuzzification();
     774:	79 d5       	rcall	.+2802   	; 0x1268 <defuzzification>
		if (steering.value < 2260)
     776:	d1 01       	movw	r26, r2
     778:	1a 96       	adiw	r26, 0x0a	; 10
     77a:	8d 91       	ld	r24, X+
     77c:	9c 91       	ld	r25, X
     77e:	1b 97       	sbiw	r26, 0x0b	; 11
     780:	84 3d       	cpi	r24, 0xD4	; 212
     782:	b8 e0       	ldi	r27, 0x08	; 8
     784:	9b 07       	cpc	r25, r27
     786:	24 f4       	brge	.+8      	; 0x790 <FLC_steering+0x6c4>
		{
			setServo(2260);
     788:	84 ed       	ldi	r24, 0xD4	; 212
     78a:	98 e0       	ldi	r25, 0x08	; 8
     78c:	31 d7       	rcall	.+3682   	; 0x15f0 <setServo>
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <FLC_steering+0x6d6>
		}
		else if (steering.value >3060)
     790:	85 3f       	cpi	r24, 0xF5	; 245
     792:	eb e0       	ldi	r30, 0x0B	; 11
     794:	9e 07       	cpc	r25, r30
     796:	24 f0       	brlt	.+8      	; 0x7a0 <FLC_steering+0x6d4>
		{
			setServo(3060);
     798:	84 ef       	ldi	r24, 0xF4	; 244
     79a:	9b e0       	ldi	r25, 0x0B	; 11
     79c:	29 d7       	rcall	.+3666   	; 0x15f0 <setServo>
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <FLC_steering+0x6d6>
		}
		else
		{
			setServo(steering.value);
     7a0:	27 d7       	rcall	.+3662   	; 0x15f0 <setServo>
		}
		
	}
}
     7a2:	cc 53       	subi	r28, 0x3C	; 60
     7a4:	de 4f       	sbci	r29, 0xFE	; 254
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	bf 90       	pop	r11
     7c2:	af 90       	pop	r10
     7c4:	9f 90       	pop	r9
     7c6:	8f 90       	pop	r8
     7c8:	7f 90       	pop	r7
     7ca:	6f 90       	pop	r6
     7cc:	5f 90       	pop	r5
     7ce:	4f 90       	pop	r4
     7d0:	3f 90       	pop	r3
     7d2:	2f 90       	pop	r2
     7d4:	08 95       	ret

000007d6 <FLC_obstacle>:

// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////

void FLC_obstacle(int currentOCR1A, int midSonicRange, int specialAngle)
{
     7d6:	2f 92       	push	r2
     7d8:	3f 92       	push	r3
     7da:	4f 92       	push	r4
     7dc:	5f 92       	push	r5
     7de:	6f 92       	push	r6
     7e0:	7f 92       	push	r7
     7e2:	8f 92       	push	r8
     7e4:	9f 92       	push	r9
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	c4 53       	subi	r28, 0x34	; 52
     800:	d2 40       	sbci	r29, 0x02	; 2
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	1c 01       	movw	r2, r24
     80e:	2b 01       	movw	r4, r22
	
	if ((midSonicRange == 227) & (specialAngle == 45))
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	63 3e       	cpi	r22, 0xE3	; 227
     814:	71 05       	cpc	r23, r1
     816:	09 f0       	breq	.+2      	; 0x81a <FLC_obstacle+0x44>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	88 23       	and	r24, r24
     81c:	59 f0       	breq	.+22     	; 0x834 <FLC_obstacle+0x5e>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	4d 32       	cpi	r20, 0x2D	; 45
     822:	51 05       	cpc	r21, r1
     824:	09 f0       	breq	.+2      	; 0x828 <FLC_obstacle+0x52>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	88 23       	and	r24, r24
     82a:	21 f0       	breq	.+8      	; 0x834 <FLC_obstacle+0x5e>
	{
		setESC(NEUTRAL);
     82c:	8d ec       	ldi	r24, 0xCD	; 205
     82e:	9a e0       	ldi	r25, 0x0A	; 10
     830:	c4 d6       	rcall	.+3464   	; 0x15ba <setESC>
     832:	30 c4       	rjmp	.+2144   	; 0x1094 <FLC_obstacle+0x8be>
	else
	{
		// DECLARATION OF DISTANCE INPUT VARIABLE
		//////////////////////////////////////////////////////////////////////////////
		
		struct io_type distance; strcpy(distance.name, "distance");
     834:	89 e0       	ldi	r24, 0x09	; 9
     836:	e5 e7       	ldi	r30, 0x75	; 117
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	de 01       	movw	r26, r28
     83c:	ab 5a       	subi	r26, 0xAB	; 171
     83e:	be 4f       	sbci	r27, 0xFE	; 254
     840:	01 90       	ld	r0, Z+
     842:	0d 92       	st	X+, r0
     844:	8a 95       	dec	r24
     846:	e1 f7       	brne	.-8      	; 0x840 <FLC_obstacle+0x6a>
		
		// Set MFs
		struct mf_type stopDist;
		MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 52);
     848:	3e 01       	movw	r6, r28
     84a:	31 ee       	ldi	r19, 0xE1	; 225
     84c:	63 1a       	sub	r6, r19
     84e:	3e ef       	ldi	r19, 0xFE	; 254
     850:	73 0a       	sbc	r7, r19
     852:	0f 2e       	mov	r0, r31
     854:	f4 e3       	ldi	r31, 0x34	; 52
     856:	ef 2e       	mov	r14, r31
     858:	f1 2c       	mov	r15, r1
     85a:	f0 2d       	mov	r31, r0
     85c:	0c e0       	ldi	r16, 0x0C	; 12
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	4f ef       	ldi	r20, 0xFF	; 255
     866:	5f ef       	ldi	r21, 0xFF	; 255
     868:	6e e7       	ldi	r22, 0x7E	; 126
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	c3 01       	movw	r24, r6
     86e:	b9 d5       	rcall	.+2930   	; 0x13e2 <MATLAB_MF>
		struct mf_type oneM;
		MATLAB_MF(&oneM, "oneM", 30, 60, 60, 95);
     870:	4e 01       	movw	r8, r28
     872:	47 ef       	ldi	r20, 0xF7	; 247
     874:	84 1a       	sub	r8, r20
     876:	4e ef       	ldi	r20, 0xFE	; 254
     878:	94 0a       	sbc	r9, r20
     87a:	0f 2e       	mov	r0, r31
     87c:	ff e5       	ldi	r31, 0x5F	; 95
     87e:	ef 2e       	mov	r14, r31
     880:	f1 2c       	mov	r15, r1
     882:	f0 2d       	mov	r31, r0
     884:	0c e3       	ldi	r16, 0x3C	; 60
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	2c e3       	ldi	r18, 0x3C	; 60
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	4e e1       	ldi	r20, 0x1E	; 30
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	67 e8       	ldi	r22, 0x87	; 135
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	c4 01       	movw	r24, r8
     896:	a5 d5       	rcall	.+2890   	; 0x13e2 <MATLAB_MF>
		struct mf_type twoM;
		MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     898:	5e 01       	movw	r10, r28
     89a:	63 ef       	ldi	r22, 0xF3	; 243
     89c:	a6 0e       	add	r10, r22
     89e:	b1 1c       	adc	r11, r1
     8a0:	0f 2e       	mov	r0, r31
     8a2:	ff ea       	ldi	r31, 0xAF	; 175
     8a4:	ef 2e       	mov	r14, r31
     8a6:	f1 2c       	mov	r15, r1
     8a8:	f0 2d       	mov	r31, r0
     8aa:	0d e7       	ldi	r16, 0x7D	; 125
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	2d e7       	ldi	r18, 0x7D	; 125
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	4b e4       	ldi	r20, 0x4B	; 75
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	6c e8       	ldi	r22, 0x8C	; 140
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	c5 01       	movw	r24, r10
     8bc:	92 d5       	rcall	.+2852   	; 0x13e2 <MATLAB_MF>
		struct mf_type threeM;
		MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     8be:	6e 01       	movw	r12, r28
     8c0:	7d ed       	ldi	r23, 0xDD	; 221
     8c2:	c7 0e       	add	r12, r23
     8c4:	d1 1c       	adc	r13, r1
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fb ef       	ldi	r31, 0xFB	; 251
     8ca:	ef 2e       	mov	r14, r31
     8cc:	f1 2c       	mov	r15, r1
     8ce:	f0 2d       	mov	r31, r0
     8d0:	0a ef       	ldi	r16, 0xFA	; 250
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	2a ef       	ldi	r18, 0xFA	; 250
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	46 e9       	ldi	r20, 0x96	; 150
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	61 e9       	ldi	r22, 0x91	; 145
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	c6 01       	movw	r24, r12
     8e2:	7f d5       	rcall	.+2814   	; 0x13e2 <MATLAB_MF>
		
		// Linked list for MFs
		distance.membership_functions = &stopDist;
     8e4:	cf 59       	subi	r28, 0x9F	; 159
     8e6:	de 4f       	sbci	r29, 0xFE	; 254
     8e8:	79 82       	std	Y+1, r7	; 0x01
     8ea:	68 82       	st	Y, r6
     8ec:	c1 56       	subi	r28, 0x61	; 97
     8ee:	d1 40       	sbci	r29, 0x01	; 1
		stopDist.next = &oneM;
     8f0:	d3 01       	movw	r26, r6
     8f2:	55 96       	adiw	r26, 0x15	; 21
     8f4:	9c 92       	st	X, r9
     8f6:	8e 92       	st	-X, r8
     8f8:	54 97       	sbiw	r26, 0x14	; 20
		oneM.next = &twoM;
     8fa:	f4 01       	movw	r30, r8
     8fc:	b5 8a       	std	Z+21, r11	; 0x15
     8fe:	a4 8a       	std	Z+20, r10	; 0x14
		twoM.next = &threeM;
     900:	d5 01       	movw	r26, r10
     902:	55 96       	adiw	r26, 0x15	; 21
     904:	dc 92       	st	X, r13
     906:	ce 92       	st	-X, r12
     908:	54 97       	sbiw	r26, 0x14	; 20
		threeM.next = NULL;
     90a:	f6 01       	movw	r30, r12
     90c:	15 8a       	std	Z+21, r1	; 0x15
     90e:	14 8a       	std	Z+20, r1	; 0x14
		
		// Variable assigned its reference value
		if(midSonicRange < MIN_DISTANCE)
     910:	55 20       	and	r5, r5
     912:	3c f4       	brge	.+14     	; 0x922 <FLC_obstacle+0x14c>
		{
			distance.value = MIN_DISTANCE;
     914:	c1 5a       	subi	r28, 0xA1	; 161
     916:	de 4f       	sbci	r29, 0xFE	; 254
     918:	19 82       	std	Y+1, r1	; 0x01
     91a:	18 82       	st	Y, r1
     91c:	cf 55       	subi	r28, 0x5F	; 95
     91e:	d1 40       	sbci	r29, 0x01	; 1
     920:	13 c0       	rjmp	.+38     	; 0x948 <FLC_obstacle+0x172>
		}
		else if (midSonicRange > MAX_DISTANCE)
     922:	fb ef       	ldi	r31, 0xFB	; 251
     924:	4f 16       	cp	r4, r31
     926:	51 04       	cpc	r5, r1
     928:	4c f0       	brlt	.+18     	; 0x93c <FLC_obstacle+0x166>
		{
			distance.value = MAX_DISTANCE;
     92a:	8a ef       	ldi	r24, 0xFA	; 250
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	c1 5a       	subi	r28, 0xA1	; 161
     930:	de 4f       	sbci	r29, 0xFE	; 254
     932:	99 83       	std	Y+1, r25	; 0x01
     934:	88 83       	st	Y, r24
     936:	cf 55       	subi	r28, 0x5F	; 95
     938:	d1 40       	sbci	r29, 0x01	; 1
     93a:	06 c0       	rjmp	.+12     	; 0x948 <FLC_obstacle+0x172>
		}
		else
		{
			distance.value = midSonicRange;
     93c:	c1 5a       	subi	r28, 0xA1	; 161
     93e:	de 4f       	sbci	r29, 0xFE	; 254
     940:	59 82       	std	Y+1, r5	; 0x01
     942:	48 82       	st	Y, r4
     944:	cf 55       	subi	r28, 0x5F	; 95
     946:	d1 40       	sbci	r29, 0x01	; 1
		
		
		// DECLARATION OF SPEED INPUT VARIABLE
		//////////////////////////////////////////////////////////////////////////////
		
		struct io_type speed; strcpy(speed.name, "speed");
     948:	86 e0       	ldi	r24, 0x06	; 6
     94a:	e8 e9       	ldi	r30, 0x98	; 152
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	de 01       	movw	r26, r28
     950:	ab 5b       	subi	r26, 0xBB	; 187
     952:	be 4f       	sbci	r27, 0xFE	; 254
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	8a 95       	dec	r24
     95a:	e1 f7       	brne	.-8      	; 0x954 <FLC_obstacle+0x17e>
		
		// Set MFs
		struct mf_type still;
		MATLAB_MF(&still, "still", MIN_SPEED-1, 2740, 2740, 2815);
     95c:	3e 01       	movw	r6, r28
     95e:	27 ec       	ldi	r18, 0xC7	; 199
     960:	62 0e       	add	r6, r18
     962:	71 1c       	adc	r7, r1
     964:	0f 2e       	mov	r0, r31
     966:	ee 24       	eor	r14, r14
     968:	ea 94       	dec	r14
     96a:	fa e0       	ldi	r31, 0x0A	; 10
     96c:	ff 2e       	mov	r15, r31
     96e:	f0 2d       	mov	r31, r0
     970:	04 eb       	ldi	r16, 0xB4	; 180
     972:	1a e0       	ldi	r17, 0x0A	; 10
     974:	24 eb       	ldi	r18, 0xB4	; 180
     976:	3a e0       	ldi	r19, 0x0A	; 10
     978:	43 eb       	ldi	r20, 0xB3	; 179
     97a:	5a e0       	ldi	r21, 0x0A	; 10
     97c:	6e e9       	ldi	r22, 0x9E	; 158
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	c3 01       	movw	r24, r6
     982:	2f d5       	rcall	.+2654   	; 0x13e2 <MATLAB_MF>
		struct mf_type low;
		MATLAB_MF(&low, "low", 2804, 2820, 2820, 2836);
     984:	4e 01       	movw	r8, r28
     986:	31 eb       	ldi	r19, 0xB1	; 177
     988:	83 0e       	add	r8, r19
     98a:	91 1c       	adc	r9, r1
     98c:	0f 2e       	mov	r0, r31
     98e:	f4 e1       	ldi	r31, 0x14	; 20
     990:	ef 2e       	mov	r14, r31
     992:	fb e0       	ldi	r31, 0x0B	; 11
     994:	ff 2e       	mov	r15, r31
     996:	f0 2d       	mov	r31, r0
     998:	04 e0       	ldi	r16, 0x04	; 4
     99a:	1b e0       	ldi	r17, 0x0B	; 11
     99c:	24 e0       	ldi	r18, 0x04	; 4
     99e:	3b e0       	ldi	r19, 0x0B	; 11
     9a0:	44 ef       	ldi	r20, 0xF4	; 244
     9a2:	5a e0       	ldi	r21, 0x0A	; 10
     9a4:	62 ec       	ldi	r22, 0xC2	; 194
     9a6:	71 e0       	ldi	r23, 0x01	; 1
     9a8:	c4 01       	movw	r24, r8
     9aa:	1b d5       	rcall	.+2614   	; 0x13e2 <MATLAB_MF>
		struct mf_type cruising;
		MATLAB_MF(&cruising, "cruising", 2827, 2843, 2843, 2859);
     9ac:	5e 01       	movw	r10, r28
     9ae:	4b e9       	ldi	r20, 0x9B	; 155
     9b0:	a4 0e       	add	r10, r20
     9b2:	b1 1c       	adc	r11, r1
     9b4:	0f 2e       	mov	r0, r31
     9b6:	fb e2       	ldi	r31, 0x2B	; 43
     9b8:	ef 2e       	mov	r14, r31
     9ba:	fb e0       	ldi	r31, 0x0B	; 11
     9bc:	ff 2e       	mov	r15, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	0b e1       	ldi	r16, 0x1B	; 27
     9c2:	1b e0       	ldi	r17, 0x0B	; 11
     9c4:	2b e1       	ldi	r18, 0x1B	; 27
     9c6:	3b e0       	ldi	r19, 0x0B	; 11
     9c8:	4b e0       	ldi	r20, 0x0B	; 11
     9ca:	5b e0       	ldi	r21, 0x0B	; 11
     9cc:	64 ea       	ldi	r22, 0xA4	; 164
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	c5 01       	movw	r24, r10
     9d2:	07 d5       	rcall	.+2574   	; 0x13e2 <MATLAB_MF>
		struct mf_type medium;
		MATLAB_MF(&medium, "medium", 2849, 2865, 2865, 2881);
     9d4:	6e 01       	movw	r12, r28
     9d6:	65 e8       	ldi	r22, 0x85	; 133
     9d8:	c6 0e       	add	r12, r22
     9da:	d1 1c       	adc	r13, r1
     9dc:	0f 2e       	mov	r0, r31
     9de:	f1 e4       	ldi	r31, 0x41	; 65
     9e0:	ef 2e       	mov	r14, r31
     9e2:	fb e0       	ldi	r31, 0x0B	; 11
     9e4:	ff 2e       	mov	r15, r31
     9e6:	f0 2d       	mov	r31, r0
     9e8:	01 e3       	ldi	r16, 0x31	; 49
     9ea:	1b e0       	ldi	r17, 0x0B	; 11
     9ec:	21 e3       	ldi	r18, 0x31	; 49
     9ee:	3b e0       	ldi	r19, 0x0B	; 11
     9f0:	41 e2       	ldi	r20, 0x21	; 33
     9f2:	5b e0       	ldi	r21, 0x0B	; 11
     9f4:	6d ea       	ldi	r22, 0xAD	; 173
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	c6 01       	movw	r24, r12
     9fa:	f3 d4       	rcall	.+2534   	; 0x13e2 <MATLAB_MF>
		struct mf_type high;
		MATLAB_MF(&high, "high", 2870, 2900, 2900, MAX_SPEED+1);
     9fc:	2e 01       	movw	r4, r28
     9fe:	7f e6       	ldi	r23, 0x6F	; 111
     a00:	47 0e       	add	r4, r23
     a02:	51 1c       	adc	r5, r1
     a04:	0f 2e       	mov	r0, r31
     a06:	f5 e5       	ldi	r31, 0x55	; 85
     a08:	ef 2e       	mov	r14, r31
     a0a:	fb e0       	ldi	r31, 0x0B	; 11
     a0c:	ff 2e       	mov	r15, r31
     a0e:	f0 2d       	mov	r31, r0
     a10:	04 e5       	ldi	r16, 0x54	; 84
     a12:	1b e0       	ldi	r17, 0x0B	; 11
     a14:	24 e5       	ldi	r18, 0x54	; 84
     a16:	3b e0       	ldi	r19, 0x0B	; 11
     a18:	46 e3       	ldi	r20, 0x36	; 54
     a1a:	5b e0       	ldi	r21, 0x0B	; 11
     a1c:	64 eb       	ldi	r22, 0xB4	; 180
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	c2 01       	movw	r24, r4
     a22:	df d4       	rcall	.+2494   	; 0x13e2 <MATLAB_MF>
		
		// Linked list for MFs
		speed.membership_functions = &still;
     a24:	cf 5a       	subi	r28, 0xAF	; 175
     a26:	de 4f       	sbci	r29, 0xFE	; 254
     a28:	79 82       	std	Y+1, r7	; 0x01
     a2a:	68 82       	st	Y, r6
     a2c:	c1 55       	subi	r28, 0x51	; 81
     a2e:	d1 40       	sbci	r29, 0x01	; 1
		still.next = &low;
     a30:	d3 01       	movw	r26, r6
     a32:	55 96       	adiw	r26, 0x15	; 21
     a34:	9c 92       	st	X, r9
     a36:	8e 92       	st	-X, r8
     a38:	54 97       	sbiw	r26, 0x14	; 20
		low.next = &cruising;
     a3a:	f4 01       	movw	r30, r8
     a3c:	b5 8a       	std	Z+21, r11	; 0x15
     a3e:	a4 8a       	std	Z+20, r10	; 0x14
		cruising.next = &medium;
     a40:	d5 01       	movw	r26, r10
     a42:	55 96       	adiw	r26, 0x15	; 21
     a44:	dc 92       	st	X, r13
     a46:	ce 92       	st	-X, r12
     a48:	54 97       	sbiw	r26, 0x14	; 20
		medium.next = &high;
     a4a:	f6 01       	movw	r30, r12
     a4c:	55 8a       	std	Z+21, r5	; 0x15
     a4e:	44 8a       	std	Z+20, r4	; 0x14
		high.next = NULL;
     a50:	d2 01       	movw	r26, r4
     a52:	55 96       	adiw	r26, 0x15	; 21
     a54:	1c 92       	st	X, r1
     a56:	1e 92       	st	-X, r1
     a58:	54 97       	sbiw	r26, 0x14	; 20
		
		// Variable assigned its reference value
		if (currentOCR1A<MIN_SPEED) {
     a5a:	b4 eb       	ldi	r27, 0xB4	; 180
     a5c:	2b 16       	cp	r2, r27
     a5e:	ba e0       	ldi	r27, 0x0A	; 10
     a60:	3b 06       	cpc	r3, r27
     a62:	4c f4       	brge	.+18     	; 0xa76 <FLC_obstacle+0x2a0>
			speed.value = MIN_SPEED;
     a64:	84 eb       	ldi	r24, 0xB4	; 180
     a66:	9a e0       	ldi	r25, 0x0A	; 10
     a68:	c1 5b       	subi	r28, 0xB1	; 177
     a6a:	de 4f       	sbci	r29, 0xFE	; 254
     a6c:	99 83       	std	Y+1, r25	; 0x01
     a6e:	88 83       	st	Y, r24
     a70:	cf 54       	subi	r28, 0x4F	; 79
     a72:	d1 40       	sbci	r29, 0x01	; 1
     a74:	14 c0       	rjmp	.+40     	; 0xa9e <FLC_obstacle+0x2c8>
		}
		else if (currentOCR1A>MAX_SPEED)
     a76:	e5 e5       	ldi	r30, 0x55	; 85
     a78:	2e 16       	cp	r2, r30
     a7a:	eb e0       	ldi	r30, 0x0B	; 11
     a7c:	3e 06       	cpc	r3, r30
     a7e:	4c f0       	brlt	.+18     	; 0xa92 <FLC_obstacle+0x2bc>
		{
			speed.value = MAX_SPEED;
     a80:	84 e5       	ldi	r24, 0x54	; 84
     a82:	9b e0       	ldi	r25, 0x0B	; 11
     a84:	c1 5b       	subi	r28, 0xB1	; 177
     a86:	de 4f       	sbci	r29, 0xFE	; 254
     a88:	99 83       	std	Y+1, r25	; 0x01
     a8a:	88 83       	st	Y, r24
     a8c:	cf 54       	subi	r28, 0x4F	; 79
     a8e:	d1 40       	sbci	r29, 0x01	; 1
     a90:	06 c0       	rjmp	.+12     	; 0xa9e <FLC_obstacle+0x2c8>
		}
		else
		{
			speed.value = currentOCR1A;
     a92:	c1 5b       	subi	r28, 0xB1	; 177
     a94:	de 4f       	sbci	r29, 0xFE	; 254
     a96:	39 82       	std	Y+1, r3	; 0x01
     a98:	28 82       	st	Y, r2
     a9a:	cf 54       	subi	r28, 0x4F	; 79
     a9c:	d1 40       	sbci	r29, 0x01	; 1
		
		
		// DECLARATION OF PWM OUTPUT VARIABLE
		//////////////////////////////////////////////////////////////////////////////
		
		struct io_type pwm; strcpy(pwm.name, "pwm");
     a9e:	1e 01       	movw	r2, r28
     aa0:	fb ec       	ldi	r31, 0xCB	; 203
     aa2:	2f 1a       	sub	r2, r31
     aa4:	fe ef       	ldi	r31, 0xFE	; 254
     aa6:	3f 0a       	sbc	r3, r31
     aa8:	80 e7       	ldi	r24, 0x70	; 112
     aaa:	97 e7       	ldi	r25, 0x77	; 119
     aac:	ad e6       	ldi	r26, 0x6D	; 109
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	f1 01       	movw	r30, r2
     ab2:	80 83       	st	Z, r24
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	a2 83       	std	Z+2, r26	; 0x02
     ab8:	b3 83       	std	Z+3, r27	; 0x03
		
		// Set MFs
		struct mf_type noSpeed;
		MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     aba:	6e 01       	movw	r12, r28
     abc:	f9 e5       	ldi	r31, 0x59	; 89
     abe:	cf 0e       	add	r12, r31
     ac0:	d1 1c       	adc	r13, r1
     ac2:	0f 2e       	mov	r0, r31
     ac4:	ee 24       	eor	r14, r14
     ac6:	ea 94       	dec	r14
     ac8:	fa e0       	ldi	r31, 0x0A	; 10
     aca:	ff 2e       	mov	r15, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	04 eb       	ldi	r16, 0xB4	; 180
     ad0:	1a e0       	ldi	r17, 0x0A	; 10
     ad2:	24 eb       	ldi	r18, 0xB4	; 180
     ad4:	3a e0       	ldi	r19, 0x0A	; 10
     ad6:	43 eb       	ldi	r20, 0xB3	; 179
     ad8:	5a e0       	ldi	r21, 0x0A	; 10
     ada:	69 eb       	ldi	r22, 0xB9	; 185
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	c6 01       	movw	r24, r12
     ae0:	80 d4       	rcall	.+2304   	; 0x13e2 <MATLAB_MF>
		struct mf_type slow;
		MATLAB_MF(&slow, "slow", 2804, 2820, 2820, 2836);
     ae2:	2e 01       	movw	r4, r28
     ae4:	23 e4       	ldi	r18, 0x43	; 67
     ae6:	42 0e       	add	r4, r18
     ae8:	51 1c       	adc	r5, r1
     aea:	0f 2e       	mov	r0, r31
     aec:	f4 e1       	ldi	r31, 0x14	; 20
     aee:	ef 2e       	mov	r14, r31
     af0:	fb e0       	ldi	r31, 0x0B	; 11
     af2:	ff 2e       	mov	r15, r31
     af4:	f0 2d       	mov	r31, r0
     af6:	04 e0       	ldi	r16, 0x04	; 4
     af8:	1b e0       	ldi	r17, 0x0B	; 11
     afa:	24 e0       	ldi	r18, 0x04	; 4
     afc:	3b e0       	ldi	r19, 0x0B	; 11
     afe:	44 ef       	ldi	r20, 0xF4	; 244
     b00:	5a e0       	ldi	r21, 0x0A	; 10
     b02:	61 ec       	ldi	r22, 0xC1	; 193
     b04:	71 e0       	ldi	r23, 0x01	; 1
     b06:	c2 01       	movw	r24, r4
     b08:	6c d4       	rcall	.+2264   	; 0x13e2 <MATLAB_MF>
		struct mf_type cruise;
		MATLAB_MF(&cruise, "cruise", 2827, 2843, 2843, 2859);
     b0a:	3e 01       	movw	r6, r28
     b0c:	3d e2       	ldi	r19, 0x2D	; 45
     b0e:	63 0e       	add	r6, r19
     b10:	71 1c       	adc	r7, r1
     b12:	0f 2e       	mov	r0, r31
     b14:	fb e2       	ldi	r31, 0x2B	; 43
     b16:	ef 2e       	mov	r14, r31
     b18:	fb e0       	ldi	r31, 0x0B	; 11
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	0b e1       	ldi	r16, 0x1B	; 27
     b20:	1b e0       	ldi	r17, 0x0B	; 11
     b22:	2b e1       	ldi	r18, 0x1B	; 27
     b24:	3b e0       	ldi	r19, 0x0B	; 11
     b26:	4b e0       	ldi	r20, 0x0B	; 11
     b28:	5b e0       	ldi	r21, 0x0B	; 11
     b2a:	66 ec       	ldi	r22, 0xC6	; 198
     b2c:	71 e0       	ldi	r23, 0x01	; 1
     b2e:	c3 01       	movw	r24, r6
     b30:	58 d4       	rcall	.+2224   	; 0x13e2 <MATLAB_MF>
		struct mf_type medHigh;
		MATLAB_MF(&medHigh, "medHigh", 2849, 2865, 2865, 2881);
     b32:	4e 01       	movw	r8, r28
     b34:	47 e1       	ldi	r20, 0x17	; 23
     b36:	84 0e       	add	r8, r20
     b38:	91 1c       	adc	r9, r1
     b3a:	0f 2e       	mov	r0, r31
     b3c:	f1 e4       	ldi	r31, 0x41	; 65
     b3e:	ef 2e       	mov	r14, r31
     b40:	fb e0       	ldi	r31, 0x0B	; 11
     b42:	ff 2e       	mov	r15, r31
     b44:	f0 2d       	mov	r31, r0
     b46:	01 e3       	ldi	r16, 0x31	; 49
     b48:	1b e0       	ldi	r17, 0x0B	; 11
     b4a:	21 e3       	ldi	r18, 0x31	; 49
     b4c:	3b e0       	ldi	r19, 0x0B	; 11
     b4e:	41 e2       	ldi	r20, 0x21	; 33
     b50:	5b e0       	ldi	r21, 0x0B	; 11
     b52:	6d ec       	ldi	r22, 0xCD	; 205
     b54:	71 e0       	ldi	r23, 0x01	; 1
     b56:	c4 01       	movw	r24, r8
     b58:	44 d4       	rcall	.+2184   	; 0x13e2 <MATLAB_MF>
		struct mf_type max;
		MATLAB_MF(&max, "max", 2870, 2900, 2900, 2901);
     b5a:	0f 2e       	mov	r0, r31
     b5c:	f5 e5       	ldi	r31, 0x55	; 85
     b5e:	ef 2e       	mov	r14, r31
     b60:	fb e0       	ldi	r31, 0x0B	; 11
     b62:	ff 2e       	mov	r15, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	04 e5       	ldi	r16, 0x54	; 84
     b68:	1b e0       	ldi	r17, 0x0B	; 11
     b6a:	24 e5       	ldi	r18, 0x54	; 84
     b6c:	3b e0       	ldi	r19, 0x0B	; 11
     b6e:	46 e3       	ldi	r20, 0x36	; 54
     b70:	5b e0       	ldi	r21, 0x0B	; 11
     b72:	65 ed       	ldi	r22, 0xD5	; 213
     b74:	71 e0       	ldi	r23, 0x01	; 1
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	5c 01       	movw	r10, r24
     b7c:	32 d4       	rcall	.+2148   	; 0x13e2 <MATLAB_MF>
		
		// Linked list for MFs
		pwm.membership_functions = &noSpeed;
     b7e:	d1 01       	movw	r26, r2
     b80:	1d 96       	adiw	r26, 0x0d	; 13
     b82:	dc 92       	st	X, r13
     b84:	ce 92       	st	-X, r12
     b86:	1c 97       	sbiw	r26, 0x0c	; 12
		noSpeed.next = &slow;
     b88:	f6 01       	movw	r30, r12
     b8a:	55 8a       	std	Z+21, r5	; 0x15
     b8c:	44 8a       	std	Z+20, r4	; 0x14
		slow.next = &cruise;
     b8e:	d2 01       	movw	r26, r4
     b90:	55 96       	adiw	r26, 0x15	; 21
     b92:	7c 92       	st	X, r7
     b94:	6e 92       	st	-X, r6
     b96:	54 97       	sbiw	r26, 0x14	; 20
		cruise.next = &medHigh;
     b98:	23 96       	adiw	r28, 0x03	; 3
     b9a:	9f ae       	std	Y+63, r9	; 0x3f
     b9c:	8e ae       	std	Y+62, r8	; 0x3e
     b9e:	23 97       	sbiw	r28, 0x03	; 3
		medHigh.next = &max;
     ba0:	bc a6       	std	Y+44, r11	; 0x2c
     ba2:	ab a6       	std	Y+43, r10	; 0x2b
		max.next = NULL;
     ba4:	1e 8a       	std	Y+22, r1	; 0x16
     ba6:	1d 8a       	std	Y+21, r1	; 0x15
		
		
		// SETTING I/O LINKED LISTS
		//////////////////////////////////////////////////////////////////////////////
		
		System_Inputs = &distance;
     ba8:	ae 5e       	subi	r26, 0xEE	; 238
     baa:	be 4f       	sbci	r27, 0xFE	; 254
     bac:	b0 93 f7 02 	sts	0x02F7, r27
     bb0:	a0 93 f6 02 	sts	0x02F6, r26
		distance.next = &speed;
     bb4:	e4 51       	subi	r30, 0x14	; 20
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	1f 96       	adiw	r26, 0x0f	; 15
     bba:	fc 93       	st	X, r31
     bbc:	ee 93       	st	-X, r30
     bbe:	1e 97       	sbiw	r26, 0x0e	; 14
		speed.next = NULL;
     bc0:	17 86       	std	Z+15, r1	; 0x0f
     bc2:	16 86       	std	Z+14, r1	; 0x0e
		
		System_Outputs = &pwm;
     bc4:	30 92 f5 02 	sts	0x02F5, r3
     bc8:	20 92 f4 02 	sts	0x02F4, r2
		pwm.next = NULL;
     bcc:	f1 01       	movw	r30, r2
     bce:	17 86       	std	Z+15, r1	; 0x0f
     bd0:	16 86       	std	Z+14, r1	; 0x0e

		
		// DECLARATION OF RULES AND LISTS
		//////////////////////////////////////////////////////////////////////////////
		
		struct rule_type rule1; Rule_Base = &rule1;
     bd2:	ae 01       	movw	r20, r28
     bd4:	49 55       	subi	r20, 0x59	; 89
     bd6:	5e 4f       	sbci	r21, 0xFE	; 254
     bd8:	50 93 f9 02 	sts	0x02F9, r21
     bdc:	40 93 f8 02 	sts	0x02F8, r20
		struct rule_type rule2; rule1.next = &rule2;
     be0:	9e 01       	movw	r18, r28
     be2:	2f 55       	subi	r18, 0x5F	; 95
     be4:	3e 4f       	sbci	r19, 0xFE	; 254
     be6:	da 01       	movw	r26, r20
     be8:	15 96       	adiw	r26, 0x05	; 5
     bea:	3c 93       	st	X, r19
     bec:	2e 93       	st	-X, r18
     bee:	14 97       	sbiw	r26, 0x04	; 4
		struct rule_type rule3; rule2.next = &rule3;
     bf0:	ce 01       	movw	r24, r28
     bf2:	85 56       	subi	r24, 0x65	; 101
     bf4:	9e 4f       	sbci	r25, 0xFE	; 254
     bf6:	f9 01       	movw	r30, r18
     bf8:	95 83       	std	Z+5, r25	; 0x05
     bfa:	84 83       	std	Z+4, r24	; 0x04
		struct rule_type rule4; rule3.next = &rule4;
     bfc:	52 97       	sbiw	r26, 0x12	; 18
     bfe:	fc 01       	movw	r30, r24
     c00:	b5 83       	std	Z+5, r27	; 0x05
     c02:	a4 83       	std	Z+4, r26	; 0x04
		struct rule_type rule5; rule4.next = &rule5;
     c04:	0f 2e       	mov	r0, r31
     c06:	ff e8       	ldi	r31, 0x8F	; 143
     c08:	8f 2e       	mov	r8, r31
     c0a:	99 24       	eor	r9, r9
     c0c:	93 94       	inc	r9
     c0e:	f0 2d       	mov	r31, r0
     c10:	8c 0e       	add	r8, r28
     c12:	9d 1e       	adc	r9, r29
     c14:	15 96       	adiw	r26, 0x05	; 5
     c16:	9c 92       	st	X, r9
     c18:	8e 92       	st	-X, r8
     c1a:	14 97       	sbiw	r26, 0x04	; 4
		struct rule_type rule6; rule5.next = &rule6;
     c1c:	4e 01       	movw	r8, r28
     c1e:	67 e7       	ldi	r22, 0x77	; 119
     c20:	86 1a       	sub	r8, r22
     c22:	6e ef       	ldi	r22, 0xFE	; 254
     c24:	96 0a       	sbc	r9, r22
     c26:	cd 56       	subi	r28, 0x6D	; 109
     c28:	de 4f       	sbci	r29, 0xFE	; 254
     c2a:	99 82       	std	Y+1, r9	; 0x01
     c2c:	88 82       	st	Y, r8
     c2e:	c3 59       	subi	r28, 0x93	; 147
     c30:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule7; rule6.next = &rule7;
     c32:	3e 01       	movw	r6, r28
     c34:	7d e7       	ldi	r23, 0x7D	; 125
     c36:	67 1a       	sub	r6, r23
     c38:	7e ef       	ldi	r23, 0xFE	; 254
     c3a:	77 0a       	sbc	r7, r23
     c3c:	f4 01       	movw	r30, r8
     c3e:	75 82       	std	Z+5, r7	; 0x05
     c40:	64 82       	std	Z+4, r6	; 0x04
		struct rule_type rule8; rule7.next = &rule8;
     c42:	0f 2e       	mov	r0, r31
     c44:	fd e7       	ldi	r31, 0x7D	; 125
     c46:	ef 2e       	mov	r14, r31
     c48:	ff 24       	eor	r15, r15
     c4a:	f3 94       	inc	r15
     c4c:	f0 2d       	mov	r31, r0
     c4e:	ec 0e       	add	r14, r28
     c50:	fd 1e       	adc	r15, r29
     c52:	f3 01       	movw	r30, r6
     c54:	f5 82       	std	Z+5, r15	; 0x05
     c56:	e4 82       	std	Z+4, r14	; 0x04
		struct rule_type rule9; rule8.next = &rule9;
     c58:	8e 01       	movw	r16, r28
     c5a:	09 58       	subi	r16, 0x89	; 137
     c5c:	1e 4f       	sbci	r17, 0xFE	; 254
     c5e:	cf 57       	subi	r28, 0x7F	; 127
     c60:	de 4f       	sbci	r29, 0xFE	; 254
     c62:	19 83       	std	Y+1, r17	; 0x01
     c64:	08 83       	st	Y, r16
     c66:	c1 58       	subi	r28, 0x81	; 129
     c68:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule10; rule9.next = &rule10;
     c6a:	7e 01       	movw	r14, r28
     c6c:	6f e8       	ldi	r22, 0x8F	; 143
     c6e:	e6 1a       	sub	r14, r22
     c70:	6e ef       	ldi	r22, 0xFE	; 254
     c72:	f6 0a       	sbc	r15, r22
     c74:	f8 01       	movw	r30, r16
     c76:	f5 82       	std	Z+5, r15	; 0x05
     c78:	e4 82       	std	Z+4, r14	; 0x04
		struct rule_type rule11; rule10.next = &rule11;
     c7a:	6b e6       	ldi	r22, 0x6B	; 107
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	6c 0f       	add	r22, r28
     c80:	7d 1f       	adc	r23, r29
     c82:	f7 01       	movw	r30, r14
     c84:	75 83       	std	Z+5, r23	; 0x05
     c86:	64 83       	std	Z+4, r22	; 0x04
		struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     c88:	e5 e6       	ldi	r30, 0x65	; 101
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	ec 0f       	add	r30, r28
     c8e:	fd 1f       	adc	r31, r29
     c90:	c1 59       	subi	r28, 0x91	; 145
     c92:	de 4f       	sbci	r29, 0xFE	; 254
     c94:	f9 83       	std	Y+1, r31	; 0x01
     c96:	e8 83       	st	Y, r30
     c98:	cf 56       	subi	r28, 0x6F	; 111
     c9a:	d1 40       	sbci	r29, 0x01	; 1
     c9c:	c7 59       	subi	r28, 0x97	; 151
     c9e:	de 4f       	sbci	r29, 0xFE	; 254
     ca0:	19 82       	std	Y+1, r1	; 0x01
     ca2:	18 82       	st	Y, r1
     ca4:	c9 56       	subi	r28, 0x69	; 105
     ca6:	d1 40       	sbci	r29, 0x01	; 1
		// RULE SETUP
		//////////////////////////////////////////////////////////////////////////////
		
		// if distance is stopDist then pwm is noSpeed
		struct rule_element_type if11, then1;
		rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     ca8:	5e 01       	movw	r10, r28
     caa:	ff ec       	ldi	r31, 0xCF	; 207
     cac:	af 1a       	sub	r10, r31
     cae:	fd ef       	ldi	r31, 0xFD	; 253
     cb0:	bf 0a       	sbc	r11, r31
     cb2:	fa 01       	movw	r30, r20
     cb4:	b1 82       	std	Z+1, r11	; 0x01
     cb6:	a0 82       	st	Z, r10
     cb8:	f5 01       	movw	r30, r10
     cba:	13 82       	std	Z+3, r1	; 0x03
     cbc:	12 82       	std	Z+2, r1	; 0x02
     cbe:	6e 53       	subi	r22, 0x3E	; 62
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	fa 01       	movw	r30, r20
     cc4:	73 83       	std	Z+3, r23	; 0x03
     cc6:	62 83       	std	Z+2, r22	; 0x02
     cc8:	fb 01       	movw	r30, r22
     cca:	13 82       	std	Z+3, r1	; 0x03
     ccc:	12 82       	std	Z+2, r1	; 0x02
		if11.value = &stopDist.value; then1.value = &noSpeed.value;
     cce:	4e 57       	subi	r20, 0x7E	; 126
     cd0:	51 09       	sbc	r21, r1
     cd2:	f5 01       	movw	r30, r10
     cd4:	51 83       	std	Z+1, r21	; 0x01
     cd6:	40 83       	st	Z, r20
     cd8:	fa e0       	ldi	r31, 0x0A	; 10
     cda:	cf 0e       	add	r12, r31
     cdc:	d1 1c       	adc	r13, r1
     cde:	fb 01       	movw	r30, r22
     ce0:	d1 82       	std	Z+1, r13	; 0x01
     ce2:	c0 82       	st	Z, r12
		
		// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
		struct rule_element_type if21, if22, then2;
		rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     ce4:	6e 01       	movw	r12, r28
     ce6:	f7 ed       	ldi	r31, 0xD7	; 215
     ce8:	cf 1a       	sub	r12, r31
     cea:	fd ef       	ldi	r31, 0xFD	; 253
     cec:	df 0a       	sbc	r13, r31
     cee:	f9 01       	movw	r30, r18
     cf0:	d1 82       	std	Z+1, r13	; 0x01
     cf2:	c0 82       	st	Z, r12
     cf4:	68 50       	subi	r22, 0x08	; 8
     cf6:	71 09       	sbc	r23, r1
     cf8:	f6 01       	movw	r30, r12
     cfa:	73 83       	std	Z+3, r23	; 0x03
     cfc:	62 83       	std	Z+2, r22	; 0x02
     cfe:	fb 01       	movw	r30, r22
     d00:	13 82       	std	Z+3, r1	; 0x03
     d02:	12 82       	std	Z+2, r1	; 0x02
     d04:	48 50       	subi	r20, 0x08	; 8
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	f9 01       	movw	r30, r18
     d0a:	53 83       	std	Z+3, r21	; 0x03
     d0c:	42 83       	std	Z+2, r20	; 0x02
     d0e:	fa 01       	movw	r30, r20
     d10:	13 82       	std	Z+3, r1	; 0x03
     d12:	12 82       	std	Z+2, r1	; 0x02
		if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     d14:	2b eb       	ldi	r18, 0xBB	; 187
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	2c 0f       	add	r18, r28
     d1a:	3d 1f       	adc	r19, r29
     d1c:	f6 01       	movw	r30, r12
     d1e:	31 83       	std	Z+1, r19	; 0x01
     d20:	20 83       	st	Z, r18
     d22:	28 5a       	subi	r18, 0xA8	; 168
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	fb 01       	movw	r30, r22
     d28:	31 83       	std	Z+1, r19	; 0x01
     d2a:	20 83       	st	Z, r18
     d2c:	fa e0       	ldi	r31, 0x0A	; 10
     d2e:	4f 0e       	add	r4, r31
     d30:	51 1c       	adc	r5, r1
     d32:	fa 01       	movw	r30, r20
     d34:	51 82       	std	Z+1, r5	; 0x01
     d36:	40 82       	st	Z, r4
		
		// if speed is medium and distance is oneM then speed is cruise
		struct rule_element_type if31, if32, then3;
		rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     d38:	6e 01       	movw	r12, r28
     d3a:	f3 ee       	ldi	r31, 0xE3	; 227
     d3c:	cf 1a       	sub	r12, r31
     d3e:	fd ef       	ldi	r31, 0xFD	; 253
     d40:	df 0a       	sbc	r13, r31
     d42:	fc 01       	movw	r30, r24
     d44:	d1 82       	std	Z+1, r13	; 0x01
     d46:	c0 82       	st	Z, r12
     d48:	6c 50       	subi	r22, 0x0C	; 12
     d4a:	71 09       	sbc	r23, r1
     d4c:	f6 01       	movw	r30, r12
     d4e:	73 83       	std	Z+3, r23	; 0x03
     d50:	62 83       	std	Z+2, r22	; 0x02
     d52:	fb 01       	movw	r30, r22
     d54:	13 82       	std	Z+3, r1	; 0x03
     d56:	12 82       	std	Z+2, r1	; 0x02
     d58:	4c 50       	subi	r20, 0x0C	; 12
     d5a:	51 09       	sbc	r21, r1
     d5c:	fc 01       	movw	r30, r24
     d5e:	53 83       	std	Z+3, r21	; 0x03
     d60:	42 83       	std	Z+2, r20	; 0x02
     d62:	fa 01       	movw	r30, r20
     d64:	13 82       	std	Z+3, r1	; 0x03
     d66:	12 82       	std	Z+2, r1	; 0x02
		if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     d68:	8f e8       	ldi	r24, 0x8F	; 143
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	8c 0f       	add	r24, r28
     d6e:	9d 1f       	adc	r25, r29
     d70:	f6 01       	movw	r30, r12
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	80 83       	st	Z, r24
     d76:	fb 01       	movw	r30, r22
     d78:	31 83       	std	Z+1, r19	; 0x01
     d7a:	20 83       	st	Z, r18
     d7c:	88 55       	subi	r24, 0x58	; 88
     d7e:	91 09       	sbc	r25, r1
     d80:	fa 01       	movw	r30, r20
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
		
		// if speed is high and distance is oneM then speed is cruise
		struct rule_element_type if41, if42, then4;
		rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     d86:	6e 01       	movw	r12, r28
     d88:	ff ee       	ldi	r31, 0xEF	; 239
     d8a:	cf 1a       	sub	r12, r31
     d8c:	fd ef       	ldi	r31, 0xFD	; 253
     d8e:	df 0a       	sbc	r13, r31
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	dc 92       	st	X, r13
     d94:	ce 92       	st	-X, r12
     d96:	6c 50       	subi	r22, 0x0C	; 12
     d98:	71 09       	sbc	r23, r1
     d9a:	f6 01       	movw	r30, r12
     d9c:	73 83       	std	Z+3, r23	; 0x03
     d9e:	62 83       	std	Z+2, r22	; 0x02
     da0:	fb 01       	movw	r30, r22
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	12 82       	std	Z+2, r1	; 0x02
     da6:	4c 50       	subi	r20, 0x0C	; 12
     da8:	51 09       	sbc	r21, r1
     daa:	13 96       	adiw	r26, 0x03	; 3
     dac:	5c 93       	st	X, r21
     dae:	4e 93       	st	-X, r20
     db0:	12 97       	sbiw	r26, 0x02	; 2
     db2:	da 01       	movw	r26, r20
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	1c 92       	st	X, r1
     db8:	1e 92       	st	-X, r1
     dba:	12 97       	sbiw	r26, 0x02	; 2
		if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     dbc:	a9 e7       	ldi	r26, 0x79	; 121
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	ac 0f       	add	r26, r28
     dc2:	bd 1f       	adc	r27, r29
     dc4:	f6 01       	movw	r30, r12
     dc6:	b1 83       	std	Z+1, r27	; 0x01
     dc8:	a0 83       	st	Z, r26
     dca:	fb 01       	movw	r30, r22
     dcc:	31 83       	std	Z+1, r19	; 0x01
     dce:	20 83       	st	Z, r18
     dd0:	da 01       	movw	r26, r20
     dd2:	8d 93       	st	X+, r24
     dd4:	9c 93       	st	X, r25
		
		// if speed is still and distance is oneM then speed is slow
		struct rule_element_type if51, if52, then5;
		rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     dd6:	6e 01       	movw	r12, r28
     dd8:	bb ef       	ldi	r27, 0xFB	; 251
     dda:	cb 1a       	sub	r12, r27
     ddc:	bd ef       	ldi	r27, 0xFD	; 253
     dde:	db 0a       	sbc	r13, r27
     de0:	c1 57       	subi	r28, 0x71	; 113
     de2:	de 4f       	sbci	r29, 0xFE	; 254
     de4:	d9 82       	std	Y+1, r13	; 0x01
     de6:	c8 82       	st	Y, r12
     de8:	cf 58       	subi	r28, 0x8F	; 143
     dea:	d1 40       	sbci	r29, 0x01	; 1
     dec:	6c 50       	subi	r22, 0x0C	; 12
     dee:	71 09       	sbc	r23, r1
     df0:	f6 01       	movw	r30, r12
     df2:	73 83       	std	Z+3, r23	; 0x03
     df4:	62 83       	std	Z+2, r22	; 0x02
     df6:	db 01       	movw	r26, r22
     df8:	13 96       	adiw	r26, 0x03	; 3
     dfa:	1c 92       	st	X, r1
     dfc:	1e 92       	st	-X, r1
     dfe:	12 97       	sbiw	r26, 0x02	; 2
     e00:	4c 50       	subi	r20, 0x0C	; 12
     e02:	51 09       	sbc	r21, r1
     e04:	cf 56       	subi	r28, 0x6F	; 111
     e06:	de 4f       	sbci	r29, 0xFE	; 254
     e08:	59 83       	std	Y+1, r21	; 0x01
     e0a:	48 83       	st	Y, r20
     e0c:	c1 59       	subi	r28, 0x91	; 145
     e0e:	d1 40       	sbci	r29, 0x01	; 1
     e10:	fa 01       	movw	r30, r20
     e12:	13 82       	std	Z+3, r1	; 0x03
     e14:	12 82       	std	Z+2, r1	; 0x02
		if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     e16:	e1 ed       	ldi	r30, 0xD1	; 209
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ec 0f       	add	r30, r28
     e1c:	fd 1f       	adc	r31, r29
     e1e:	d6 01       	movw	r26, r12
     e20:	ed 93       	st	X+, r30
     e22:	fc 93       	st	X, r31
     e24:	db 01       	movw	r26, r22
     e26:	2d 93       	st	X+, r18
     e28:	3c 93       	st	X, r19
     e2a:	fa 01       	movw	r30, r20
     e2c:	51 82       	std	Z+1, r5	; 0x01
     e2e:	40 82       	st	Z, r4
		
		// if speed is cruising and distance is oneM then speed is slow
		struct rule_element_type if61, if62, then6;
		rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     e30:	6e 01       	movw	r12, r28
     e32:	f7 e0       	ldi	r31, 0x07	; 7
     e34:	cf 1a       	sub	r12, r31
     e36:	fe ef       	ldi	r31, 0xFE	; 254
     e38:	df 0a       	sbc	r13, r31
     e3a:	d4 01       	movw	r26, r8
     e3c:	cd 92       	st	X+, r12
     e3e:	dc 92       	st	X, r13
     e40:	6c 50       	subi	r22, 0x0C	; 12
     e42:	71 09       	sbc	r23, r1
     e44:	f6 01       	movw	r30, r12
     e46:	73 83       	std	Z+3, r23	; 0x03
     e48:	62 83       	std	Z+2, r22	; 0x02
     e4a:	db 01       	movw	r26, r22
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	1c 92       	st	X, r1
     e50:	1e 92       	st	-X, r1
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	4c 50       	subi	r20, 0x0C	; 12
     e56:	51 09       	sbc	r21, r1
     e58:	f4 01       	movw	r30, r8
     e5a:	53 83       	std	Z+3, r21	; 0x03
     e5c:	42 83       	std	Z+2, r20	; 0x02
     e5e:	da 01       	movw	r26, r20
     e60:	13 96       	adiw	r26, 0x03	; 3
     e62:	1c 92       	st	X, r1
     e64:	1e 92       	st	-X, r1
     e66:	12 97       	sbiw	r26, 0x02	; 2
		if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     e68:	5e 01       	movw	r10, r28
     e6a:	b5 ea       	ldi	r27, 0xA5	; 165
     e6c:	ab 0e       	add	r10, r27
     e6e:	b1 1c       	adc	r11, r1
     e70:	f6 01       	movw	r30, r12
     e72:	b1 82       	std	Z+1, r11	; 0x01
     e74:	a0 82       	st	Z, r10
     e76:	db 01       	movw	r26, r22
     e78:	2d 93       	st	X+, r18
     e7a:	3c 93       	st	X, r19
     e7c:	fa 01       	movw	r30, r20
     e7e:	51 82       	std	Z+1, r5	; 0x01
     e80:	40 82       	st	Z, r4
		
		// if speed is low and distance is twoM then speed is cruise
		struct rule_element_type if71, if72, then7;
		rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     e82:	26 52       	subi	r18, 0x26	; 38
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	d3 01       	movw	r26, r6
     e88:	2d 93       	st	X+, r18
     e8a:	3c 93       	st	X, r19
     e8c:	6c 50       	subi	r22, 0x0C	; 12
     e8e:	71 09       	sbc	r23, r1
     e90:	f9 01       	movw	r30, r18
     e92:	73 83       	std	Z+3, r23	; 0x03
     e94:	62 83       	std	Z+2, r22	; 0x02
     e96:	db 01       	movw	r26, r22
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	1c 92       	st	X, r1
     e9c:	1e 92       	st	-X, r1
     e9e:	12 97       	sbiw	r26, 0x02	; 2
     ea0:	4c 50       	subi	r20, 0x0C	; 12
     ea2:	51 09       	sbc	r21, r1
     ea4:	f3 01       	movw	r30, r6
     ea6:	53 83       	std	Z+3, r21	; 0x03
     ea8:	42 83       	std	Z+2, r20	; 0x02
     eaa:	da 01       	movw	r26, r20
     eac:	13 96       	adiw	r26, 0x03	; 3
     eae:	1c 92       	st	X, r1
     eb0:	1e 92       	st	-X, r1
     eb2:	12 97       	sbiw	r26, 0x02	; 2
		if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     eb4:	0f 2e       	mov	r0, r31
     eb6:	fb eb       	ldi	r31, 0xBB	; 187
     eb8:	8f 2e       	mov	r8, r31
     eba:	91 2c       	mov	r9, r1
     ebc:	f0 2d       	mov	r31, r0
     ebe:	8c 0e       	add	r8, r28
     ec0:	9d 1e       	adc	r9, r29
     ec2:	f9 01       	movw	r30, r18
     ec4:	91 82       	std	Z+1, r9	; 0x01
     ec6:	80 82       	st	Z, r8
     ec8:	20 5f       	subi	r18, 0xF0	; 240
     eca:	31 09       	sbc	r19, r1
     ecc:	db 01       	movw	r26, r22
     ece:	2d 93       	st	X+, r18
     ed0:	3c 93       	st	X, r19
     ed2:	fa 01       	movw	r30, r20
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
		
		// if speed is medium and distance is twoM then speed is medHigh
		struct rule_element_type if81, if82, then8;
		rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     ed8:	6e 01       	movw	r12, r28
     eda:	ff e1       	ldi	r31, 0x1F	; 31
     edc:	cf 1a       	sub	r12, r31
     ede:	fe ef       	ldi	r31, 0xFE	; 254
     ee0:	df 0a       	sbc	r13, r31
     ee2:	c3 58       	subi	r28, 0x83	; 131
     ee4:	de 4f       	sbci	r29, 0xFE	; 254
     ee6:	d9 82       	std	Y+1, r13	; 0x01
     ee8:	c8 82       	st	Y, r12
     eea:	cd 57       	subi	r28, 0x7D	; 125
     eec:	d1 40       	sbci	r29, 0x01	; 1
     eee:	48 50       	subi	r20, 0x08	; 8
     ef0:	51 09       	sbc	r21, r1
     ef2:	d6 01       	movw	r26, r12
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	5c 93       	st	X, r21
     ef8:	4e 93       	st	-X, r20
     efa:	12 97       	sbiw	r26, 0x02	; 2
     efc:	fa 01       	movw	r30, r20
     efe:	13 82       	std	Z+3, r1	; 0x03
     f00:	12 82       	std	Z+2, r1	; 0x02
     f02:	60 51       	subi	r22, 0x10	; 16
     f04:	71 09       	sbc	r23, r1
     f06:	c1 58       	subi	r28, 0x81	; 129
     f08:	de 4f       	sbci	r29, 0xFE	; 254
     f0a:	79 83       	std	Y+1, r23	; 0x01
     f0c:	68 83       	st	Y, r22
     f0e:	cf 57       	subi	r28, 0x7F	; 127
     f10:	d1 40       	sbci	r29, 0x01	; 1
     f12:	db 01       	movw	r26, r22
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	1c 92       	st	X, r1
     f18:	1e 92       	st	-X, r1
     f1a:	12 97       	sbiw	r26, 0x02	; 2
		if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     f1c:	0f 2e       	mov	r0, r31
     f1e:	ff e8       	ldi	r31, 0x8F	; 143
     f20:	8f 2e       	mov	r8, r31
     f22:	91 2c       	mov	r9, r1
     f24:	f0 2d       	mov	r31, r0
     f26:	8c 0e       	add	r8, r28
     f28:	9d 1e       	adc	r9, r29
     f2a:	f6 01       	movw	r30, r12
     f2c:	91 82       	std	Z+1, r9	; 0x01
     f2e:	80 82       	st	Z, r8
     f30:	da 01       	movw	r26, r20
     f32:	2d 93       	st	X+, r18
     f34:	3c 93       	st	X, r19
     f36:	4c 5b       	subi	r20, 0xBC	; 188
     f38:	51 40       	sbci	r21, 0x01	; 1
     f3a:	fb 01       	movw	r30, r22
     f3c:	51 83       	std	Z+1, r21	; 0x01
     f3e:	40 83       	st	Z, r20
		
		// if speed is high and distance is twoM then speed is medHigh
		struct rule_element_type if91, if92, then9;
		rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     f40:	4e 01       	movw	r8, r28
     f42:	fb e2       	ldi	r31, 0x2B	; 43
     f44:	8f 1a       	sub	r8, r31
     f46:	fe ef       	ldi	r31, 0xFE	; 254
     f48:	9f 0a       	sbc	r9, r31
     f4a:	d8 01       	movw	r26, r16
     f4c:	8d 92       	st	X+, r8
     f4e:	9c 92       	st	X, r9
     f50:	6e 01       	movw	r12, r28
     f52:	bf e2       	ldi	r27, 0x2F	; 47
     f54:	cb 1a       	sub	r12, r27
     f56:	be ef       	ldi	r27, 0xFE	; 254
     f58:	db 0a       	sbc	r13, r27
     f5a:	f4 01       	movw	r30, r8
     f5c:	d3 82       	std	Z+3, r13	; 0x03
     f5e:	c2 82       	std	Z+2, r12	; 0x02
     f60:	d6 01       	movw	r26, r12
     f62:	13 96       	adiw	r26, 0x03	; 3
     f64:	1c 92       	st	X, r1
     f66:	1e 92       	st	-X, r1
     f68:	12 97       	sbiw	r26, 0x02	; 2
     f6a:	6c 50       	subi	r22, 0x0C	; 12
     f6c:	71 09       	sbc	r23, r1
     f6e:	f8 01       	movw	r30, r16
     f70:	73 83       	std	Z+3, r23	; 0x03
     f72:	62 83       	std	Z+2, r22	; 0x02
     f74:	db 01       	movw	r26, r22
     f76:	13 96       	adiw	r26, 0x03	; 3
     f78:	1c 92       	st	X, r1
     f7a:	1e 92       	st	-X, r1
     f7c:	12 97       	sbiw	r26, 0x02	; 2
		if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     f7e:	a9 e7       	ldi	r26, 0x79	; 121
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ac 0f       	add	r26, r28
     f84:	bd 1f       	adc	r27, r29
     f86:	f4 01       	movw	r30, r8
     f88:	b1 83       	std	Z+1, r27	; 0x01
     f8a:	a0 83       	st	Z, r26
     f8c:	f6 01       	movw	r30, r12
     f8e:	31 83       	std	Z+1, r19	; 0x01
     f90:	20 83       	st	Z, r18
     f92:	db 01       	movw	r26, r22
     f94:	4d 93       	st	X+, r20
     f96:	5c 93       	st	X, r21
		
		// if speed is still and distance is twoM then speed is cruise
		struct rule_element_type if101, if102, then10;
		rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     f98:	0e 5a       	subi	r16, 0xAE	; 174
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	f7 01       	movw	r30, r14
     f9e:	11 83       	std	Z+1, r17	; 0x01
     fa0:	00 83       	st	Z, r16
     fa2:	68 50       	subi	r22, 0x08	; 8
     fa4:	71 09       	sbc	r23, r1
     fa6:	d8 01       	movw	r26, r16
     fa8:	13 96       	adiw	r26, 0x03	; 3
     faa:	7c 93       	st	X, r23
     fac:	6e 93       	st	-X, r22
     fae:	12 97       	sbiw	r26, 0x02	; 2
     fb0:	fb 01       	movw	r30, r22
     fb2:	13 82       	std	Z+3, r1	; 0x03
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	18 97       	sbiw	r26, 0x08	; 8
     fb8:	f7 01       	movw	r30, r14
     fba:	b3 83       	std	Z+3, r27	; 0x03
     fbc:	a2 83       	std	Z+2, r26	; 0x02
     fbe:	13 96       	adiw	r26, 0x03	; 3
     fc0:	1c 92       	st	X, r1
     fc2:	1e 92       	st	-X, r1
     fc4:	12 97       	sbiw	r26, 0x02	; 2
		if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f1 ed       	ldi	r31, 0xD1	; 209
     fca:	8f 2e       	mov	r8, r31
     fcc:	91 2c       	mov	r9, r1
     fce:	f0 2d       	mov	r31, r0
     fd0:	8c 0e       	add	r8, r28
     fd2:	9d 1e       	adc	r9, r29
     fd4:	f8 01       	movw	r30, r16
     fd6:	91 82       	std	Z+1, r9	; 0x01
     fd8:	80 82       	st	Z, r8
     fda:	fb 01       	movw	r30, r22
     fdc:	31 83       	std	Z+1, r19	; 0x01
     fde:	20 83       	st	Z, r18
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	9c 93       	st	X, r25
     fe4:	8e 93       	st	-X, r24
		
		// if speed is cruising and distance is twoM then speed is medHigh
		struct rule_element_type if111, if112, then11;
		rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     fe6:	8a 57       	subi	r24, 0x7A	; 122
     fe8:	9e 4f       	sbci	r25, 0xFE	; 254
     fea:	c5 59       	subi	r28, 0x95	; 149
     fec:	de 4f       	sbci	r29, 0xFE	; 254
     fee:	99 83       	std	Y+1, r25	; 0x01
     ff0:	88 83       	st	Y, r24
     ff2:	cb 56       	subi	r28, 0x6B	; 107
     ff4:	d1 40       	sbci	r29, 0x01	; 1
     ff6:	18 97       	sbiw	r26, 0x08	; 8
     ff8:	fc 01       	movw	r30, r24
     ffa:	b3 83       	std	Z+3, r27	; 0x03
     ffc:	a2 83       	std	Z+2, r26	; 0x02
     ffe:	13 96       	adiw	r26, 0x03	; 3
    1000:	1c 92       	st	X, r1
    1002:	1e 92       	st	-X, r1
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	60 51       	subi	r22, 0x10	; 16
    1008:	71 09       	sbc	r23, r1
    100a:	c3 59       	subi	r28, 0x93	; 147
    100c:	de 4f       	sbci	r29, 0xFE	; 254
    100e:	79 83       	std	Y+1, r23	; 0x01
    1010:	68 83       	st	Y, r22
    1012:	cd 56       	subi	r28, 0x6D	; 109
    1014:	d1 40       	sbci	r29, 0x01	; 1
    1016:	fb 01       	movw	r30, r22
    1018:	13 82       	std	Z+3, r1	; 0x03
    101a:	12 82       	std	Z+2, r1	; 0x02
		if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
    101c:	fc 01       	movw	r30, r24
    101e:	b1 82       	std	Z+1, r11	; 0x01
    1020:	a0 82       	st	Z, r10
    1022:	2d 93       	st	X+, r18
    1024:	3c 93       	st	X, r19
    1026:	db 01       	movw	r26, r22
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	5c 93       	st	X, r21
    102c:	4e 93       	st	-X, r20
		
		// if distance is threeM then speed is max
		struct rule_element_type if121, then12;
		rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
    102e:	14 97       	sbiw	r26, 0x04	; 4
    1030:	cb 59       	subi	r28, 0x9B	; 155
    1032:	de 4f       	sbci	r29, 0xFE	; 254
    1034:	b9 83       	std	Y+1, r27	; 0x01
    1036:	a8 83       	st	Y, r26
    1038:	c5 56       	subi	r28, 0x65	; 101
    103a:	d1 40       	sbci	r29, 0x01	; 1
    103c:	13 96       	adiw	r26, 0x03	; 3
    103e:	1c 92       	st	X, r1
    1040:	1e 92       	st	-X, r1
    1042:	12 97       	sbiw	r26, 0x02	; 2
    1044:	70 97       	sbiw	r30, 0x10	; 16
    1046:	c9 59       	subi	r28, 0x99	; 153
    1048:	de 4f       	sbci	r29, 0xFE	; 254
    104a:	f9 83       	std	Y+1, r31	; 0x01
    104c:	e8 83       	st	Y, r30
    104e:	c7 56       	subi	r28, 0x67	; 103
    1050:	d1 40       	sbci	r29, 0x01	; 1
    1052:	13 82       	std	Z+3, r1	; 0x03
    1054:	12 82       	std	Z+2, r1	; 0x02
		if121.value = &threeM.value; then12.value = &max.value;
    1056:	86 5d       	subi	r24, 0xD6	; 214
    1058:	91 09       	sbc	r25, r1
    105a:	8d 93       	st	X+, r24
    105c:	9c 93       	st	X, r25
    105e:	8c 5d       	subi	r24, 0xDC	; 220
    1060:	91 09       	sbc	r25, r1
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
		
		
		// EXECUTING FUZZY LOGIC & OUTPUT VALUE
		//////////////////////////////////////////////////////////////////////////////
		
		fuzzification();
    1066:	93 d0       	rcall	.+294    	; 0x118e <fuzzification>
		rule_evaluation();
    1068:	b9 d0       	rcall	.+370    	; 0x11dc <rule_evaluation>
		defuzzification();
    106a:	fe d0       	rcall	.+508    	; 0x1268 <defuzzification>
		if (pwm.value > 2825)
    106c:	f1 01       	movw	r30, r2
    106e:	82 85       	ldd	r24, Z+10	; 0x0a
    1070:	93 85       	ldd	r25, Z+11	; 0x0b
    1072:	8a 30       	cpi	r24, 0x0A	; 10
    1074:	fb e0       	ldi	r31, 0x0B	; 11
    1076:	9f 07       	cpc	r25, r31
    1078:	24 f0       	brlt	.+8      	; 0x1082 <FLC_obstacle+0x8ac>
		{
			setESC(2825);
    107a:	89 e0       	ldi	r24, 0x09	; 9
    107c:	9b e0       	ldi	r25, 0x0B	; 11
    107e:	9d d2       	rcall	.+1338   	; 0x15ba <setESC>
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <FLC_obstacle+0x8be>
		}
		else if (pwm.value < 2750)
    1082:	8e 3b       	cpi	r24, 0xBE	; 190
    1084:	2a e0       	ldi	r18, 0x0A	; 10
    1086:	92 07       	cpc	r25, r18
    1088:	24 f4       	brge	.+8      	; 0x1092 <FLC_obstacle+0x8bc>
		{
			setESC(2750);
    108a:	8e eb       	ldi	r24, 0xBE	; 190
    108c:	9a e0       	ldi	r25, 0x0A	; 10
    108e:	95 d2       	rcall	.+1322   	; 0x15ba <setESC>
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <FLC_obstacle+0x8be>
		}
		else
		{
			setESC(pwm.value);
    1092:	93 d2       	rcall	.+1318   	; 0x15ba <setESC>
		}
	}
	
	
}
    1094:	cc 5c       	subi	r28, 0xCC	; 204
    1096:	dd 4f       	sbci	r29, 0xFD	; 253
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	4f 90       	pop	r4
    10c2:	3f 90       	pop	r3
    10c4:	2f 90       	pop	r2
    10c6:	08 95       	ret

000010c8 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    10c8:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    10ca:	84 85       	ldd	r24, Z+12	; 0x0c
    10cc:	95 85       	ldd	r25, Z+13	; 0x0d
    10ce:	9b 01       	movw	r18, r22
    10d0:	28 1b       	sub	r18, r24
    10d2:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    10d4:	86 85       	ldd	r24, Z+14	; 0x0e
    10d6:	97 85       	ldd	r25, Z+15	; 0x0f
    10d8:	86 1b       	sub	r24, r22
    10da:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	f4 f4       	brge	.+60     	; 0x111e <compute_degree_of_membership+0x56>
    10e2:	18 16       	cp	r1, r24
    10e4:	19 06       	cpc	r1, r25
    10e6:	f4 f4       	brge	.+60     	; 0x1124 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    10e8:	60 89       	ldd	r22, Z+16	; 0x10
    10ea:	71 89       	ldd	r23, Z+17	; 0x11
    10ec:	a2 89       	ldd	r26, Z+18	; 0x12
    10ee:	b3 89       	ldd	r27, Z+19	; 0x13
    10f0:	8a 9f       	mul	r24, r26
    10f2:	a0 01       	movw	r20, r0
    10f4:	8b 9f       	mul	r24, r27
    10f6:	50 0d       	add	r21, r0
    10f8:	9a 9f       	mul	r25, r26
    10fa:	50 0d       	add	r21, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	26 9f       	mul	r18, r22
    1100:	c0 01       	movw	r24, r0
    1102:	27 9f       	mul	r18, r23
    1104:	90 0d       	add	r25, r0
    1106:	36 9f       	mul	r19, r22
    1108:	90 0d       	add	r25, r0
    110a:	11 24       	eor	r1, r1
    110c:	48 17       	cp	r20, r24
    110e:	59 07       	cpc	r21, r25
    1110:	0c f4       	brge	.+2      	; 0x1114 <compute_degree_of_membership+0x4c>
    1112:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    1114:	8f 3f       	cpi	r24, 0xFF	; 255
    1116:	91 05       	cpc	r25, r1
    1118:	09 f0       	breq	.+2      	; 0x111c <compute_degree_of_membership+0x54>
    111a:	3c f4       	brge	.+14     	; 0x112a <compute_degree_of_membership+0x62>
    111c:	08 c0       	rjmp	.+16     	; 0x112e <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	05 c0       	rjmp	.+10     	; 0x112e <compute_degree_of_membership+0x66>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    112e:	93 87       	std	Z+11, r25	; 0x0b
    1130:	82 87       	std	Z+10, r24	; 0x0a
    1132:	08 95       	ret

00001134 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    113e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1140:	d7 85       	ldd	r29, Z+15	; 0x0f
    1142:	84 85       	ldd	r24, Z+12	; 0x0c
    1144:	95 85       	ldd	r25, Z+13	; 0x0d
    1146:	c8 1b       	sub	r28, r24
    1148:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    114a:	22 85       	ldd	r18, Z+10	; 0x0a
    114c:	33 85       	ldd	r19, Z+11	; 0x0b
    114e:	60 89       	ldd	r22, Z+16	; 0x10
    1150:	71 89       	ldd	r23, Z+17	; 0x11
    1152:	c9 01       	movw	r24, r18
    1154:	e0 d5       	rcall	.+3008   	; 0x1d16 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    1156:	8e 01       	movw	r16, r28
    1158:	06 1b       	sub	r16, r22
    115a:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    115c:	62 89       	ldd	r22, Z+18	; 0x12
    115e:	73 89       	ldd	r23, Z+19	; 0x13
    1160:	c9 01       	movw	r24, r18
    1162:	d9 d5       	rcall	.+2994   	; 0x1d16 <__divmodhi4>
    top = base - run_1 - run_2;
    1164:	06 1b       	sub	r16, r22
    1166:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    1168:	c0 0f       	add	r28, r16
    116a:	d1 1f       	adc	r29, r17
    116c:	2c 9f       	mul	r18, r28
    116e:	c0 01       	movw	r24, r0
    1170:	2d 9f       	mul	r18, r29
    1172:	90 0d       	add	r25, r0
    1174:	3c 9f       	mul	r19, r28
    1176:	90 0d       	add	r25, r0
    1178:	11 24       	eor	r1, r1
    117a:	99 23       	and	r25, r25
    117c:	0c f4       	brge	.+2      	; 0x1180 <compute_area_of_trapezoid+0x4c>
    117e:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    1180:	95 95       	asr	r25
    1182:	87 95       	ror	r24
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1196:	00 91 f6 02 	lds	r16, 0x02F6
    119a:	10 91 f7 02 	lds	r17, 0x02F7
    119e:	01 15       	cp	r16, r1
    11a0:	11 05       	cpc	r17, r1
    11a2:	b9 f0       	breq	.+46     	; 0x11d2 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    11a4:	f8 01       	movw	r30, r16
    11a6:	c4 85       	ldd	r28, Z+12	; 0x0c
    11a8:	d5 85       	ldd	r29, Z+13	; 0x0d
    11aa:	20 97       	sbiw	r28, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <fuzzification+0x38>
            if (mf!=NULL) {
    11ae:	20 97       	sbiw	r28, 0x00	; 0
    11b0:	29 f0       	breq	.+10     	; 0x11bc <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    11b2:	f8 01       	movw	r30, r16
    11b4:	62 85       	ldd	r22, Z+10	; 0x0a
    11b6:	73 85       	ldd	r23, Z+11	; 0x0b
    11b8:	ce 01       	movw	r24, r28
    11ba:	86 df       	rcall	.-244    	; 0x10c8 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    11bc:	0c 88       	ldd	r0, Y+20	; 0x14
    11be:	dd 89       	ldd	r29, Y+21	; 0x15
    11c0:	c0 2d       	mov	r28, r0
    11c2:	20 97       	sbiw	r28, 0x00	; 0
    11c4:	a1 f7       	brne	.-24     	; 0x11ae <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    11c6:	f8 01       	movw	r30, r16
    11c8:	06 85       	ldd	r16, Z+14	; 0x0e
    11ca:	17 85       	ldd	r17, Z+15	; 0x0f
    11cc:	01 15       	cp	r16, r1
    11ce:	11 05       	cpc	r17, r1
    11d0:	49 f7       	brne	.-46     	; 0x11a4 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    11e4:	c0 91 f8 02 	lds	r28, 0x02F8
    11e8:	d0 91 f9 02 	lds	r29, 0x02F9
    11ec:	20 97       	sbiw	r28, 0x00	; 0
    11ee:	b9 f1       	breq	.+110    	; 0x125e <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11f0:	00 e0       	ldi	r16, 0x00	; 0
    11f2:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    11f4:	e8 81       	ld	r30, Y
    11f6:	f9 81       	ldd	r31, Y+1	; 0x01
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	81 f0       	breq	.+32     	; 0x121c <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11fc:	20 2f       	mov	r18, r16
    11fe:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    1200:	a0 81       	ld	r26, Z
    1202:	b1 81       	ldd	r27, Z+1	; 0x01
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	82 17       	cp	r24, r18
    120a:	93 07       	cpc	r25, r19
    120c:	0c f4       	brge	.+2      	; 0x1210 <rule_evaluation+0x34>
    120e:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1210:	02 80       	ldd	r0, Z+2	; 0x02
    1212:	f3 81       	ldd	r31, Z+3	; 0x03
    1214:	e0 2d       	mov	r30, r0
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	99 f7       	brne	.-26     	; 0x1200 <rule_evaluation+0x24>
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    121c:	20 2f       	mov	r18, r16
    121e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1220:	ea 81       	ldd	r30, Y+2	; 0x02
    1222:	fb 81       	ldd	r31, Y+3	; 0x03
    1224:	30 97       	sbiw	r30, 0x00	; 0
    1226:	b1 f0       	breq	.+44     	; 0x1254 <rule_evaluation+0x78>
    1228:	72 2f       	mov	r23, r18
    122a:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    122c:	a0 81       	ld	r26, Z
    122e:	b1 81       	ldd	r27, Z+1	; 0x01
    1230:	8d 91       	ld	r24, X+
    1232:	9c 91       	ld	r25, X
    1234:	11 97       	sbiw	r26, 0x01	; 1
    1236:	57 2f       	mov	r21, r23
    1238:	46 2f       	mov	r20, r22
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	14 f4       	brge	.+4      	; 0x1244 <rule_evaluation+0x68>
    1240:	58 2f       	mov	r21, r24
    1242:	49 2f       	mov	r20, r25
    1244:	5c 93       	st	X, r21
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    124a:	02 80       	ldd	r0, Z+2	; 0x02
    124c:	f3 81       	ldd	r31, Z+3	; 0x03
    124e:	e0 2d       	mov	r30, r0
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	61 f7       	brne	.-40     	; 0x122c <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    1254:	0c 80       	ldd	r0, Y+4	; 0x04
    1256:	dd 81       	ldd	r29, Y+5	; 0x05
    1258:	c0 2d       	mov	r28, r0
    125a:	20 97       	sbiw	r28, 0x00	; 0
    125c:	59 f6       	brne	.-106    	; 0x11f4 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    1268:	2f 92       	push	r2
    126a:	3f 92       	push	r3
    126c:	4f 92       	push	r4
    126e:	5f 92       	push	r5
    1270:	6f 92       	push	r6
    1272:	7f 92       	push	r7
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	00 d0       	rcall	.+0      	; 0x128e <defuzzification+0x26>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <defuzzification+0x28>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <defuzzification+0x2a>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1296:	80 91 f4 02 	lds	r24, 0x02F4
    129a:	90 91 f5 02 	lds	r25, 0x02F5
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	89 2b       	or	r24, r25
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <defuzzification+0x40>
    12a6:	84 c0       	rjmp	.+264    	; 0x13b0 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    12a8:	eb 81       	ldd	r30, Y+3	; 0x03
    12aa:	fc 81       	ldd	r31, Y+4	; 0x04
    12ac:	04 84       	ldd	r0, Z+12	; 0x0c
    12ae:	f5 85       	ldd	r31, Z+13	; 0x0d
    12b0:	e0 2d       	mov	r30, r0
    12b2:	fe 83       	std	Y+6, r31	; 0x06
    12b4:	ed 83       	std	Y+5, r30	; 0x05
    12b6:	ef 2b       	or	r30, r31
    12b8:	09 f4       	brne	.+2      	; 0x12bc <defuzzification+0x54>
    12ba:	66 c0       	rjmp	.+204    	; 0x1388 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    12bc:	51 2c       	mov	r5, r1
    12be:	61 2c       	mov	r6, r1
    12c0:	71 2c       	mov	r7, r1
    12c2:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    12c4:	31 2c       	mov	r3, r1
    12c6:	21 2c       	mov	r2, r1
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	31 df       	rcall	.-414    	; 0x1134 <compute_area_of_trapezoid>
    12d2:	bc 01       	movw	r22, r24
    12d4:	88 27       	eor	r24, r24
    12d6:	77 fd       	sbrc	r23, 7
    12d8:	80 95       	com	r24
    12da:	98 2f       	mov	r25, r24
    12dc:	2d d4       	rcall	.+2138   	; 0x1b38 <__floatsisf>
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	04 85       	ldd	r16, Z+12	; 0x0c
    12e8:	15 85       	ldd	r17, Z+13	; 0x0d
    12ea:	b8 01       	movw	r22, r16
    12ec:	88 27       	eor	r24, r24
    12ee:	77 fd       	sbrc	r23, 7
    12f0:	80 95       	com	r24
    12f2:	98 2f       	mov	r25, r24
    12f4:	21 d4       	rcall	.+2114   	; 0x1b38 <__floatsisf>
    12f6:	4b 01       	movw	r8, r22
    12f8:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    12fa:	ed 81       	ldd	r30, Y+5	; 0x05
    12fc:	fe 81       	ldd	r31, Y+6	; 0x06
    12fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1300:	97 85       	ldd	r25, Z+15	; 0x0f
    1302:	80 1b       	sub	r24, r16
    1304:	91 0b       	sbc	r25, r17
    1306:	bc 01       	movw	r22, r24
    1308:	12 f4       	brpl	.+4      	; 0x130e <defuzzification+0xa6>
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	75 95       	asr	r23
    1310:	67 95       	ror	r22
            centroid = centroid + intermed;
    1312:	88 27       	eor	r24, r24
    1314:	77 fd       	sbrc	r23, 7
    1316:	80 95       	com	r24
    1318:	98 2f       	mov	r25, r24
    131a:	0e d4       	rcall	.+2076   	; 0x1b38 <__floatsisf>
    131c:	a5 01       	movw	r20, r10
    131e:	94 01       	movw	r18, r8
    1320:	0c d3       	rcall	.+1560   	; 0x193a <__addsf3>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	92 d4       	rcall	.+2340   	; 0x1c50 <__mulsf3>
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	63 2d       	mov	r22, r3
    1332:	72 2d       	mov	r23, r2
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	00 d3       	rcall	.+1536   	; 0x193a <__addsf3>
    133a:	36 2e       	mov	r3, r22
    133c:	27 2e       	mov	r2, r23
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1342:	a7 01       	movw	r20, r14
    1344:	96 01       	movw	r18, r12
    1346:	65 2d       	mov	r22, r5
    1348:	76 2d       	mov	r23, r6
    134a:	87 2d       	mov	r24, r7
    134c:	94 2d       	mov	r25, r4
    134e:	f5 d2       	rcall	.+1514   	; 0x193a <__addsf3>
    1350:	56 2e       	mov	r5, r22
    1352:	67 2e       	mov	r6, r23
    1354:	78 2e       	mov	r7, r24
    1356:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1358:	ed 81       	ldd	r30, Y+5	; 0x05
    135a:	fe 81       	ldd	r31, Y+6	; 0x06
    135c:	04 88       	ldd	r0, Z+20	; 0x14
    135e:	f5 89       	ldd	r31, Z+21	; 0x15
    1360:	e0 2d       	mov	r30, r0
    1362:	fe 83       	std	Y+6, r31	; 0x06
    1364:	ed 83       	std	Y+5, r30	; 0x05
    1366:	ef 2b       	or	r30, r31
    1368:	09 f0       	breq	.+2      	; 0x136c <defuzzification+0x104>
    136a:	b0 cf       	rjmp	.-160    	; 0x12cc <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    136c:	26 2f       	mov	r18, r22
    136e:	37 2f       	mov	r19, r23
    1370:	48 2f       	mov	r20, r24
    1372:	59 2f       	mov	r21, r25
    1374:	63 2d       	mov	r22, r3
    1376:	72 2d       	mov	r23, r2
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	42 d3       	rcall	.+1668   	; 0x1a02 <__divsf3>
    137e:	26 2f       	mov	r18, r22
    1380:	37 2f       	mov	r19, r23
    1382:	48 2f       	mov	r20, r24
    1384:	59 2f       	mov	r21, r25
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    1390:	62 2f       	mov	r22, r18
    1392:	73 2f       	mov	r23, r19
    1394:	84 2f       	mov	r24, r20
    1396:	95 2f       	mov	r25, r21
    1398:	9c d3       	rcall	.+1848   	; 0x1ad2 <__fixsfsi>
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	73 87       	std	Z+11, r23	; 0x0b
    13a0:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    13a2:	86 85       	ldd	r24, Z+14	; 0x0e
    13a4:	97 85       	ldd	r25, Z+15	; 0x0f
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	8b 83       	std	Y+3, r24	; 0x03
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <defuzzification+0x148>
    13ae:	7c cf       	rjmp	.-264    	; 0x12a8 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    13b0:	26 96       	adiw	r28, 0x06	; 6
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	9f 90       	pop	r9
    13d2:	8f 90       	pop	r8
    13d4:	7f 90       	pop	r7
    13d6:	6f 90       	pop	r6
    13d8:	5f 90       	pop	r5
    13da:	4f 90       	pop	r4
    13dc:	3f 90       	pop	r3
    13de:	2f 90       	pop	r2
    13e0:	08 95       	ret

000013e2 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
    13f8:	6a 01       	movw	r12, r20
    13fa:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    13fc:	b3 d4       	rcall	.+2406   	; 0x1d64 <strcpy>
    newMf->value = 0;
    13fe:	1b 86       	std	Y+11, r1	; 0x0b
    1400:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    1402:	dd 86       	std	Y+13, r13	; 0x0d
    1404:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    1406:	ff 86       	std	Y+15, r15	; 0x0f
    1408:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    140a:	b5 01       	movw	r22, r10
    140c:	6c 19       	sub	r22, r12
    140e:	7d 09       	sbc	r23, r13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	c9 01       	movw	r24, r18
    1416:	7f d4       	rcall	.+2302   	; 0x1d16 <__divmodhi4>
    1418:	79 8b       	std	Y+17, r23	; 0x11
    141a:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    141c:	b7 01       	movw	r22, r14
    141e:	60 1b       	sub	r22, r16
    1420:	71 0b       	sbc	r23, r17
    1422:	c9 01       	movw	r24, r18
    1424:	78 d4       	rcall	.+2288   	; 0x1d16 <__divmodhi4>
    1426:	7b 8b       	std	Y+19, r23	; 0x13
    1428:	6a 8b       	std	Y+18, r22	; 0x12
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	08 95       	ret

00001440 <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile int counter_UART1_reciever;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	0b b6       	in	r0, 0x3b	; 59
    144c:	0f 92       	push	r0
    144e:	8f 93       	push	r24
    1450:	9f 93       	push	r25
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
    1456:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	29 f4       	brne	.+10     	; 0x1468 <__vector_28+0x28>
		counter_UART1_reciever = 0;
    145e:	10 92 1b 03 	sts	0x031B, r1
    1462:	10 92 1a 03 	sts	0x031A, r1
    1466:	10 c0       	rjmp	.+32     	; 0x1488 <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
    1468:	e0 91 1a 03 	lds	r30, 0x031A
    146c:	f0 91 1b 03 	lds	r31, 0x031B
    1470:	e6 50       	subi	r30, 0x06	; 6
    1472:	fd 4f       	sbci	r31, 0xFD	; 253
    1474:	80 83       	st	Z, r24
		counter_UART1_reciever++;
    1476:	80 91 1a 03 	lds	r24, 0x031A
    147a:	90 91 1b 03 	lds	r25, 0x031B
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	90 93 1b 03 	sts	0x031B, r25
    1484:	80 93 1a 03 	sts	0x031A, r24
	
	//Enabling interrupts
	//sei();

	
}
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
    149e:	7e d0       	rcall	.+252    	; 0x159c <pwmInit>
	spi_slave_init();
    14a0:	2e d1       	rcall	.+604    	; 0x16fe <spi_slave_init>
	setESC(NEUTRAL);
    14a2:	8d ec       	ldi	r24, 0xCD	; 205
    14a4:	9a e0       	ldi	r25, 0x0A	; 10
    14a6:	89 d0       	rcall	.+274    	; 0x15ba <setESC>
	setServo(STRAIGHT);
    14a8:	84 e6       	ldi	r24, 0x64	; 100
    14aa:	9a e0       	ldi	r25, 0x0A	; 10
    14ac:	a1 c0       	rjmp	.+322    	; 0x15f0 <setServo>
    14ae:	08 95       	ret

000014b0 <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
    14b0:	ec ec       	ldi	r30, 0xCC	; 204
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	11 82       	std	Z+1, r1	; 0x01
    14b6:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
    14b8:	20 e9       	ldi	r18, 0x90	; 144
    14ba:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
    14be:	2e e0       	ldi	r18, 0x0E	; 14
    14c0:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	08 95       	ret

000014ca <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
    14ca:	fc 01       	movw	r30, r24
	
	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
    14cc:	a9 ec       	ldi	r26, 0xC9	; 201
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	8c 91       	ld	r24, X
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	8c 93       	st	X, r24
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[4];
    14d6:	80 91 fe 02 	lds	r24, 0x02FE
    14da:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[5];
    14dc:	80 91 ff 02 	lds	r24, 0x02FF
    14e0:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[2];
    14e2:	80 91 fc 02 	lds	r24, 0x02FC
    14e6:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[0];
    14e8:	80 91 fa 02 	lds	r24, 0x02FA
    14ec:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[1];
    14ee:	80 91 fb 02 	lds	r24, 0x02FB
    14f2:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[3];
    14f4:	80 91 fd 02 	lds	r24, 0x02FD
    14f8:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
    14fa:	10 92 1b 03 	sts	0x031B, r1
    14fe:	10 92 1a 03 	sts	0x031A, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    1502:	8c 91       	ld	r24, X
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
    1508:	08 95       	ret

0000150a <main>:




int main (void)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2b 97       	sbiw	r28, 0x0b	; 11
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
	
	
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
	
	carInit();
    151e:	bf df       	rcall	.-130    	; 0x149e <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1520:	2f ef       	ldi	r18, 0xFF	; 255
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	90 ee       	ldi	r25, 0xE0	; 224
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	80 40       	sbci	r24, 0x00	; 0
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <main+0x1c>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <main+0x26>
    1530:	00 00       	nop
	_delay_ms(5000);
	
	
	
	sei();
    1532:	78 94       	sei
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    1534:	87 e0       	ldi	r24, 0x07	; 7
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	bb df       	rcall	.-138    	; 0x14b0 <USART1_init>
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			
			cli();
			
			FLC_obstacle(OCR1A, sF, v);
    153a:	0f 2e       	mov	r0, r31
    153c:	f8 e8       	ldi	r31, 0x88	; 136
    153e:	ef 2e       	mov	r14, r31
    1540:	f1 2c       	mov	r15, r1
    1542:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    1544:	0f 2e       	mov	r0, r31
    1546:	fa e8       	ldi	r31, 0x8A	; 138
    1548:	af 2e       	mov	r10, r31
    154a:	b1 2c       	mov	r11, r1
    154c:	f0 2d       	mov	r31, r0
	//DDRA = 0xFF;
	//End of test setting
	
	while (1) {
		
		if (counter_UART1_reciever > 5) {
    154e:	80 91 1a 03 	lds	r24, 0x031A
    1552:	90 91 1b 03 	lds	r25, 0x031B
    1556:	06 97       	sbiw	r24, 0x06	; 6
    1558:	d4 f3       	brlt	.-12     	; 0x154e <main+0x44>
			
			//Reading Information
			read_sensor_info(&control_mode, sens_info_ptr);
    155a:	be 01       	movw	r22, r28
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	ce 01       	movw	r24, r28
    1562:	0b 96       	adiw	r24, 0x0b	; 11
    1564:	0c d1       	rcall	.+536    	; 0x177e <read_sensor_info>
			Sens_info_read(sens_info_ptr);
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	af df       	rcall	.-162    	; 0x14ca <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    156c:	6b 81       	ldd	r22, Y+3	; 0x03
    156e:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    1570:	c9 80       	ldd	r12, Y+1	; 0x01
    1572:	d1 2c       	mov	r13, r1
			int v = (int) sensor_info.angular_diff;
    1574:	0a 81       	ldd	r16, Y+2	; 0x02
    1576:	10 e0       	ldi	r17, 0x00	; 0
			
			cli();
    1578:	f8 94       	cli
			
			FLC_obstacle(OCR1A, sF, v);
    157a:	f7 01       	movw	r30, r14
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	a8 01       	movw	r20, r16
    1582:	29 d9       	rcall	.-3502   	; 0x7d6 <FLC_obstacle>
			FLC_steering(c, v);
    1584:	b8 01       	movw	r22, r16
    1586:	c6 01       	movw	r24, r12
    1588:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
			//fuzzyParking(sL,sF, OCR1A);
			sei();
    158c:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
    158e:	f7 01       	movw	r30, r14
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    1594:	f5 01       	movw	r30, r10
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	d9 cf       	rjmp	.-78     	; 0x154e <main+0x44>

0000159c <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    159c:	80 e3       	ldi	r24, 0x30	; 48
    159e:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    15a0:	82 ea       	ldi	r24, 0xA2	; 162
    15a2:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	9f e8       	ldi	r25, 0x8F	; 143
    15aa:	90 93 87 00 	sts	0x0087, r25
    15ae:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    15b2:	8a e1       	ldi	r24, 0x1A	; 26
    15b4:	80 93 81 00 	sts	0x0081, r24
    15b8:	08 95       	ret

000015ba <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    15ba:	80 36       	cpi	r24, 0x60	; 96
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	92 07       	cpc	r25, r18
    15c0:	3c f4       	brge	.+14     	; 0x15d0 <setESC+0x16>
	{
		OCR1A = MINESC;
    15c2:	8f e5       	ldi	r24, 0x5F	; 95
    15c4:	9a e0       	ldi	r25, 0x0A	; 10
    15c6:	90 93 89 00 	sts	0x0089, r25
    15ca:	80 93 88 00 	sts	0x0088, r24
    15ce:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    15d0:	8b 33       	cpi	r24, 0x3B	; 59
    15d2:	2b e0       	ldi	r18, 0x0B	; 11
    15d4:	92 07       	cpc	r25, r18
    15d6:	3c f0       	brlt	.+14     	; 0x15e6 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    15d8:	8b e3       	ldi	r24, 0x3B	; 59
    15da:	9b e0       	ldi	r25, 0x0B	; 11
    15dc:	90 93 89 00 	sts	0x0089, r25
    15e0:	80 93 88 00 	sts	0x0088, r24
    15e4:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    15e6:	90 93 89 00 	sts	0x0089, r25
    15ea:	80 93 88 00 	sts	0x0088, r24
    15ee:	08 95       	ret

000015f0 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    15f0:	87 3e       	cpi	r24, 0xE7	; 231
    15f2:	27 e0       	ldi	r18, 0x07	; 7
    15f4:	92 07       	cpc	r25, r18
    15f6:	3c f4       	brge	.+14     	; 0x1606 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    15f8:	86 ee       	ldi	r24, 0xE6	; 230
    15fa:	97 e0       	ldi	r25, 0x07	; 7
    15fc:	90 93 8b 00 	sts	0x008B, r25
    1600:	80 93 8a 00 	sts	0x008A, r24
    1604:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1606:	8f 33       	cpi	r24, 0x3F	; 63
    1608:	2c e0       	ldi	r18, 0x0C	; 12
    160a:	92 07       	cpc	r25, r18
    160c:	3c f0       	brlt	.+14     	; 0x161c <setServo+0x2c>

		OCR1B = MAXLEFT;
    160e:	8f e3       	ldi	r24, 0x3F	; 63
    1610:	9c e0       	ldi	r25, 0x0C	; 12
    1612:	90 93 8b 00 	sts	0x008B, r25
    1616:	80 93 8a 00 	sts	0x008A, r24
    161a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    161c:	90 93 8b 00 	sts	0x008B, r25
    1620:	80 93 8a 00 	sts	0x008A, r24
    1624:	08 95       	ret

00001626 <__vector_19>:
		tx_spi.i_first = 0;
	}
			
			

	sei();
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	0b b6       	in	r0, 0x3b	; 59
    1632:	0f 92       	push	r0
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	10 98       	cbi	0x02, 0	; 2
    1646:	2e b5       	in	r18, 0x2e	; 46
    1648:	2d 3f       	cpi	r18, 0xFD	; 253
    164a:	a9 f0       	breq	.+42     	; 0x1676 <__vector_19+0x50>
    164c:	e4 e6       	ldi	r30, 0x64	; 100
    164e:	f2 e0       	ldi	r31, 0x02	; 2
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	dc 01       	movw	r26, r24
    1656:	ae 5d       	subi	r26, 0xDE	; 222
    1658:	bd 4f       	sbci	r27, 0xFD	; 253
    165a:	2c 93       	st	X, r18
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	e6 e6       	ldi	r30, 0x66	; 102
    1664:	f2 e0       	ldi	r31, 0x02	; 2
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 da 01 	sts	0x01DA, r24
    1676:	80 91 64 02 	lds	r24, 0x0264
    167a:	90 91 65 02 	lds	r25, 0x0265
    167e:	80 34       	cpi	r24, 0x40	; 64
    1680:	91 05       	cpc	r25, r1
    1682:	21 f4       	brne	.+8      	; 0x168c <__vector_19+0x66>
    1684:	10 92 65 02 	sts	0x0265, r1
    1688:	10 92 64 02 	sts	0x0264, r1
    168c:	80 91 20 02 	lds	r24, 0x0220
    1690:	90 91 21 02 	lds	r25, 0x0221
    1694:	89 2b       	or	r24, r25
    1696:	01 f1       	breq	.+64     	; 0x16d8 <__vector_19+0xb2>
    1698:	e0 91 1c 02 	lds	r30, 0x021C
    169c:	f0 91 1d 02 	lds	r31, 0x021D
    16a0:	e4 52       	subi	r30, 0x24	; 36
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	80 81       	ld	r24, Z
    16a6:	8e bd       	out	0x2e, r24	; 46
    16a8:	ec e1       	ldi	r30, 0x1C	; 28
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
    16b6:	e0 e2       	ldi	r30, 0x20	; 32
    16b8:	f2 e0       	ldi	r31, 0x02	; 2
    16ba:	20 81       	ld	r18, Z
    16bc:	31 81       	ldd	r19, Z+1	; 0x01
    16be:	21 50       	subi	r18, 0x01	; 1
    16c0:	31 09       	sbc	r19, r1
    16c2:	31 83       	std	Z+1, r19	; 0x01
    16c4:	20 83       	st	Z, r18
    16c6:	10 9a       	sbi	0x02, 0	; 2
    16c8:	80 34       	cpi	r24, 0x40	; 64
    16ca:	91 05       	cpc	r25, r1
    16cc:	49 f4       	brne	.+18     	; 0x16e0 <__vector_19+0xba>
    16ce:	10 92 1d 02 	sts	0x021D, r1
    16d2:	10 92 1c 02 	sts	0x021C, r1
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <__vector_19+0xba>
    16d8:	8d ef       	ldi	r24, 0xFD	; 253
    16da:	8e bd       	out	0x2e, r24	; 46
    16dc:	10 92 db 01 	sts	0x01DB, r1
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0b be       	out	0x3b, r0	; 59
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <spi_slave_init>:
    16fe:	80 e4       	ldi	r24, 0x40	; 64
    1700:	84 b9       	out	0x04, r24	; 4
    1702:	80 ec       	ldi	r24, 0xC0	; 192
    1704:	8c bd       	out	0x2c, r24	; 44
    1706:	08 9a       	sbi	0x01, 0	; 1
    1708:	10 98       	cbi	0x02, 0	; 2
    170a:	8d ef       	ldi	r24, 0xFD	; 253
    170c:	8e bd       	out	0x2e, r24	; 46
    170e:	08 95       	ret

00001710 <spi_get_byte>:
    1710:	f8 94       	cli
    1712:	20 91 66 02 	lds	r18, 0x0266
    1716:	30 91 67 02 	lds	r19, 0x0267
    171a:	21 15       	cp	r18, r1
    171c:	31 05       	cpc	r19, r1
    171e:	a9 f0       	breq	.+42     	; 0x174a <spi_get_byte+0x3a>
    1720:	e2 e6       	ldi	r30, 0x62	; 98
    1722:	f2 e0       	ldi	r31, 0x02	; 2
    1724:	40 81       	ld	r20, Z
    1726:	51 81       	ldd	r21, Z+1	; 0x01
    1728:	da 01       	movw	r26, r20
    172a:	ae 5d       	subi	r26, 0xDE	; 222
    172c:	bd 4f       	sbci	r27, 0xFD	; 253
    172e:	8c 91       	ld	r24, X
    1730:	4f 5f       	subi	r20, 0xFF	; 255
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	51 83       	std	Z+1, r21	; 0x01
    1736:	40 83       	st	Z, r20
    1738:	21 50       	subi	r18, 0x01	; 1
    173a:	31 09       	sbc	r19, r1
    173c:	30 93 67 02 	sts	0x0267, r19
    1740:	20 93 66 02 	sts	0x0266, r18
    1744:	23 2b       	or	r18, r19
    1746:	21 f4       	brne	.+8      	; 0x1750 <spi_get_byte+0x40>
    1748:	01 c0       	rjmp	.+2      	; 0x174c <spi_get_byte+0x3c>
    174a:	8e ef       	ldi	r24, 0xFE	; 254
    174c:	10 92 da 01 	sts	0x01DA, r1
    1750:	20 91 62 02 	lds	r18, 0x0262
    1754:	30 91 63 02 	lds	r19, 0x0263
    1758:	20 34       	cpi	r18, 0x40	; 64
    175a:	31 05       	cpc	r19, r1
    175c:	21 f4       	brne	.+8      	; 0x1766 <spi_get_byte+0x56>
    175e:	10 92 63 02 	sts	0x0263, r1
    1762:	10 92 62 02 	sts	0x0262, r1
    1766:	78 94       	sei
    1768:	08 95       	ret

0000176a <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	20 91 66 02 	lds	r18, 0x0266
    1770:	30 91 67 02 	lds	r19, 0x0267
    1774:	25 30       	cpi	r18, 0x05	; 5
    1776:	31 05       	cpc	r19, r1
    1778:	08 f4       	brcc	.+2      	; 0x177c <is_package_recieved+0x12>
    177a:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    177c:	08 95       	ret

0000177e <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	8c 01       	movw	r16, r24
    1788:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    178a:	20 91 66 02 	lds	r18, 0x0266
    178e:	30 91 67 02 	lds	r19, 0x0267
    1792:	23 2b       	or	r18, r19
    1794:	f9 f0       	breq	.+62     	; 0x17d4 <read_sensor_info+0x56>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1796:	e0 91 62 02 	lds	r30, 0x0262
    179a:	f0 91 63 02 	lds	r31, 0x0263
    179e:	ee 5d       	subi	r30, 0xDE	; 222
    17a0:	fd 4f       	sbci	r31, 0xFD	; 253
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 3f       	cpi	r24, 0xFF	; 255
    17a6:	71 f4       	brne	.+28     	; 0x17c4 <read_sensor_info+0x46>
    17a8:	e0 df       	rcall	.-64     	; 0x176a <is_package_recieved>
    17aa:	88 23       	and	r24, r24
    17ac:	a1 f0       	breq	.+40     	; 0x17d6 <read_sensor_info+0x58>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    17ae:	b0 df       	rcall	.-160    	; 0x1710 <spi_get_byte>
		//Read all info and write it to sensor struct

		//*control_mode_ptr = spi_get_byte();
		//sens_info_ptr->dist_right_line = spi_get_byte();
		//sens_info_ptr->angular_diff = spi_get_byte();
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    17b0:	af df       	rcall	.-162    	; 0x1710 <spi_get_byte>
    17b2:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    17b4:	ad df       	rcall	.-166    	; 0x1710 <spi_get_byte>
    17b6:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    17b8:	ab df       	rcall	.-170    	; 0x1710 <spi_get_byte>
    17ba:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    17bc:	a9 df       	rcall	.-174    	; 0x1710 <spi_get_byte>
    17be:	8d 83       	std	Y+5, r24	; 0x05
		//sens_info_ptr->car_speed = spi_get_byte();
		//sens_info_ptr->dist_to_stop_line = spi_get_byte();
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <read_sensor_info+0x58>
	} else if (is_package_recieved()){
    17c4:	d2 df       	rcall	.-92     	; 0x176a <is_package_recieved>
    17c6:	88 23       	and	r24, r24
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <read_sensor_info+0x58>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    17ca:	a2 df       	rcall	.-188    	; 0x1710 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    17cc:	be 01       	movw	r22, r28
    17ce:	c8 01       	movw	r24, r16
    17d0:	d6 df       	rcall	.-84     	; 0x177e <read_sensor_info>
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <read_sensor_info+0x58>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	0b b6       	in	r0, 0x3b	; 59
    17ec:	0f 92       	push	r0
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1800:	80 91 f2 02 	lds	r24, 0x02F2
    1804:	90 91 f3 02 	lds	r25, 0x02F3
    1808:	80 34       	cpi	r24, 0x40	; 64
    180a:	91 05       	cpc	r25, r1
    180c:	31 f4       	brne	.+12     	; 0x181a <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 93 20 03 	sts	0x0320, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1814:	80 91 c6 00 	lds	r24, 0x00C6
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    181a:	80 34       	cpi	r24, 0x40	; 64
    181c:	91 05       	cpc	r25, r1
    181e:	e8 f4       	brcc	.+58     	; 0x185a <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1820:	e0 ef       	ldi	r30, 0xF0	; 240
    1822:	f2 e0       	ldi	r31, 0x02	; 2
    1824:	20 81       	ld	r18, Z
    1826:	31 81       	ldd	r19, Z+1	; 0x01
    1828:	40 91 c6 00 	lds	r20, 0x00C6
    182c:	d9 01       	movw	r26, r18
    182e:	a2 55       	subi	r26, 0x52	; 82
    1830:	bd 4f       	sbci	r27, 0xFD	; 253
    1832:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1834:	2f 5f       	subi	r18, 0xFF	; 255
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	31 83       	std	Z+1, r19	; 0x01
    183a:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	90 93 f3 02 	sts	0x02F3, r25
    1842:	80 93 f2 02 	sts	0x02F2, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1846:	80 91 f2 02 	lds	r24, 0x02F2
    184a:	90 91 f3 02 	lds	r25, 0x02F3
    184e:	80 34       	cpi	r24, 0x40	; 64
    1850:	91 05       	cpc	r25, r1
    1852:	19 f4       	brne	.+6      	; 0x185a <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 1e 03 	sts	0x031E, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    185a:	80 91 f0 02 	lds	r24, 0x02F0
    185e:	90 91 f1 02 	lds	r25, 0x02F1
    1862:	80 34       	cpi	r24, 0x40	; 64
    1864:	91 05       	cpc	r25, r1
    1866:	21 f4       	brne	.+8      	; 0x1870 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1868:	10 92 f1 02 	sts	0x02F1, r1
    186c:	10 92 f0 02 	sts	0x02F0, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 1d 03 	sts	0x031D, r24
}
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	4f 91       	pop	r20
    1884:	3f 91       	pop	r19
    1886:	2f 91       	pop	r18
    1888:	0f 90       	pop	r0
    188a:	0b be       	out	0x3b, r0	; 59
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_22>:




ISR(USART0_TX_vect)
{
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	0b b6       	in	r0, 0x3b	; 59
    18a2:	0f 92       	push	r0
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    18ac:	80 91 ac 02 	lds	r24, 0x02AC
    18b0:	90 91 ad 02 	lds	r25, 0x02AD
    18b4:	80 34       	cpi	r24, 0x40	; 64
    18b6:	91 05       	cpc	r25, r1
    18b8:	19 f4       	brne	.+6      	; 0x18c0 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    18ba:	10 92 1c 03 	sts	0x031C, r1
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    18c0:	89 2b       	or	r24, r25
    18c2:	b9 f0       	breq	.+46     	; 0x18f2 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    18c4:	e0 91 a8 02 	lds	r30, 0x02A8
    18c8:	f0 91 a9 02 	lds	r31, 0x02A9
    18cc:	e8 59       	subi	r30, 0x98	; 152
    18ce:	fd 4f       	sbci	r31, 0xFD	; 253
    18d0:	80 81       	ld	r24, Z
    18d2:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    18d6:	e8 ea       	ldi	r30, 0xA8	; 168
    18d8:	f2 e0       	ldi	r31, 0x02	; 2
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    18e4:	ec ea       	ldi	r30, 0xAC	; 172
    18e6:	f2 e0       	ldi	r31, 0x02	; 2
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    18f2:	80 91 a8 02 	lds	r24, 0x02A8
    18f6:	90 91 a9 02 	lds	r25, 0x02A9
    18fa:	80 34       	cpi	r24, 0x40	; 64
    18fc:	91 05       	cpc	r25, r1
    18fe:	21 f4       	brne	.+8      	; 0x1908 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1900:	10 92 a9 02 	sts	0x02A9, r1
    1904:	10 92 a8 02 	sts	0x02A8, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1908:	80 91 ac 02 	lds	r24, 0x02AC
    190c:	90 91 ad 02 	lds	r25, 0x02AD
    1910:	89 2b       	or	r24, r25
    1912:	39 f4       	brne	.+14     	; 0x1922 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1914:	10 92 1f 03 	sts	0x031F, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1918:	e1 ec       	ldi	r30, 0xC1	; 193
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8f 7b       	andi	r24, 0xBF	; 191
    1920:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	0f 90       	pop	r0
    192c:	0b be       	out	0x3b, r0	; 59
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__subsf3>:
    1938:	50 58       	subi	r21, 0x80	; 128

0000193a <__addsf3>:
    193a:	bb 27       	eor	r27, r27
    193c:	aa 27       	eor	r26, r26
    193e:	0e d0       	rcall	.+28     	; 0x195c <__addsf3x>
    1940:	4d c1       	rjmp	.+666    	; 0x1bdc <__fp_round>
    1942:	3e d1       	rcall	.+636    	; 0x1bc0 <__fp_pscA>
    1944:	30 f0       	brcs	.+12     	; 0x1952 <__addsf3+0x18>
    1946:	43 d1       	rcall	.+646    	; 0x1bce <__fp_pscB>
    1948:	20 f0       	brcs	.+8      	; 0x1952 <__addsf3+0x18>
    194a:	31 f4       	brne	.+12     	; 0x1958 <__addsf3+0x1e>
    194c:	9f 3f       	cpi	r25, 0xFF	; 255
    194e:	11 f4       	brne	.+4      	; 0x1954 <__addsf3+0x1a>
    1950:	1e f4       	brtc	.+6      	; 0x1958 <__addsf3+0x1e>
    1952:	33 c1       	rjmp	.+614    	; 0x1bba <__fp_nan>
    1954:	0e f4       	brtc	.+2      	; 0x1958 <__addsf3+0x1e>
    1956:	e0 95       	com	r30
    1958:	e7 fb       	bst	r30, 7
    195a:	29 c1       	rjmp	.+594    	; 0x1bae <__fp_inf>

0000195c <__addsf3x>:
    195c:	e9 2f       	mov	r30, r25
    195e:	4f d1       	rcall	.+670    	; 0x1bfe <__fp_split3>
    1960:	80 f3       	brcs	.-32     	; 0x1942 <__addsf3+0x8>
    1962:	ba 17       	cp	r27, r26
    1964:	62 07       	cpc	r22, r18
    1966:	73 07       	cpc	r23, r19
    1968:	84 07       	cpc	r24, r20
    196a:	95 07       	cpc	r25, r21
    196c:	18 f0       	brcs	.+6      	; 0x1974 <__addsf3x+0x18>
    196e:	71 f4       	brne	.+28     	; 0x198c <__addsf3x+0x30>
    1970:	9e f5       	brtc	.+102    	; 0x19d8 <__addsf3x+0x7c>
    1972:	67 c1       	rjmp	.+718    	; 0x1c42 <__fp_zero>
    1974:	0e f4       	brtc	.+2      	; 0x1978 <__addsf3x+0x1c>
    1976:	e0 95       	com	r30
    1978:	0b 2e       	mov	r0, r27
    197a:	ba 2f       	mov	r27, r26
    197c:	a0 2d       	mov	r26, r0
    197e:	0b 01       	movw	r0, r22
    1980:	b9 01       	movw	r22, r18
    1982:	90 01       	movw	r18, r0
    1984:	0c 01       	movw	r0, r24
    1986:	ca 01       	movw	r24, r20
    1988:	a0 01       	movw	r20, r0
    198a:	11 24       	eor	r1, r1
    198c:	ff 27       	eor	r31, r31
    198e:	59 1b       	sub	r21, r25
    1990:	99 f0       	breq	.+38     	; 0x19b8 <__addsf3x+0x5c>
    1992:	59 3f       	cpi	r21, 0xF9	; 249
    1994:	50 f4       	brcc	.+20     	; 0x19aa <__addsf3x+0x4e>
    1996:	50 3e       	cpi	r21, 0xE0	; 224
    1998:	68 f1       	brcs	.+90     	; 0x19f4 <__addsf3x+0x98>
    199a:	1a 16       	cp	r1, r26
    199c:	f0 40       	sbci	r31, 0x00	; 0
    199e:	a2 2f       	mov	r26, r18
    19a0:	23 2f       	mov	r18, r19
    19a2:	34 2f       	mov	r19, r20
    19a4:	44 27       	eor	r20, r20
    19a6:	58 5f       	subi	r21, 0xF8	; 248
    19a8:	f3 cf       	rjmp	.-26     	; 0x1990 <__addsf3x+0x34>
    19aa:	46 95       	lsr	r20
    19ac:	37 95       	ror	r19
    19ae:	27 95       	ror	r18
    19b0:	a7 95       	ror	r26
    19b2:	f0 40       	sbci	r31, 0x00	; 0
    19b4:	53 95       	inc	r21
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__addsf3x+0x4e>
    19b8:	7e f4       	brtc	.+30     	; 0x19d8 <__addsf3x+0x7c>
    19ba:	1f 16       	cp	r1, r31
    19bc:	ba 0b       	sbc	r27, r26
    19be:	62 0b       	sbc	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	ba f0       	brmi	.+46     	; 0x19f4 <__addsf3x+0x98>
    19c6:	91 50       	subi	r25, 0x01	; 1
    19c8:	a1 f0       	breq	.+40     	; 0x19f2 <__addsf3x+0x96>
    19ca:	ff 0f       	add	r31, r31
    19cc:	bb 1f       	adc	r27, r27
    19ce:	66 1f       	adc	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	c2 f7       	brpl	.-16     	; 0x19c6 <__addsf3x+0x6a>
    19d6:	0e c0       	rjmp	.+28     	; 0x19f4 <__addsf3x+0x98>
    19d8:	ba 0f       	add	r27, r26
    19da:	62 1f       	adc	r22, r18
    19dc:	73 1f       	adc	r23, r19
    19de:	84 1f       	adc	r24, r20
    19e0:	48 f4       	brcc	.+18     	; 0x19f4 <__addsf3x+0x98>
    19e2:	87 95       	ror	r24
    19e4:	77 95       	ror	r23
    19e6:	67 95       	ror	r22
    19e8:	b7 95       	ror	r27
    19ea:	f7 95       	ror	r31
    19ec:	9e 3f       	cpi	r25, 0xFE	; 254
    19ee:	08 f0       	brcs	.+2      	; 0x19f2 <__addsf3x+0x96>
    19f0:	b3 cf       	rjmp	.-154    	; 0x1958 <__addsf3+0x1e>
    19f2:	93 95       	inc	r25
    19f4:	88 0f       	add	r24, r24
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <__addsf3x+0x9e>
    19f8:	99 27       	eor	r25, r25
    19fa:	ee 0f       	add	r30, r30
    19fc:	97 95       	ror	r25
    19fe:	87 95       	ror	r24
    1a00:	08 95       	ret

00001a02 <__divsf3>:
    1a02:	0c d0       	rcall	.+24     	; 0x1a1c <__divsf3x>
    1a04:	eb c0       	rjmp	.+470    	; 0x1bdc <__fp_round>
    1a06:	e3 d0       	rcall	.+454    	; 0x1bce <__fp_pscB>
    1a08:	40 f0       	brcs	.+16     	; 0x1a1a <__divsf3+0x18>
    1a0a:	da d0       	rcall	.+436    	; 0x1bc0 <__fp_pscA>
    1a0c:	30 f0       	brcs	.+12     	; 0x1a1a <__divsf3+0x18>
    1a0e:	21 f4       	brne	.+8      	; 0x1a18 <__divsf3+0x16>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <__divsf3+0x18>
    1a14:	cc c0       	rjmp	.+408    	; 0x1bae <__fp_inf>
    1a16:	51 11       	cpse	r21, r1
    1a18:	15 c1       	rjmp	.+554    	; 0x1c44 <__fp_szero>
    1a1a:	cf c0       	rjmp	.+414    	; 0x1bba <__fp_nan>

00001a1c <__divsf3x>:
    1a1c:	f0 d0       	rcall	.+480    	; 0x1bfe <__fp_split3>
    1a1e:	98 f3       	brcs	.-26     	; 0x1a06 <__divsf3+0x4>

00001a20 <__divsf3_pse>:
    1a20:	99 23       	and	r25, r25
    1a22:	c9 f3       	breq	.-14     	; 0x1a16 <__divsf3+0x14>
    1a24:	55 23       	and	r21, r21
    1a26:	b1 f3       	breq	.-20     	; 0x1a14 <__divsf3+0x12>
    1a28:	95 1b       	sub	r25, r21
    1a2a:	55 0b       	sbc	r21, r21
    1a2c:	bb 27       	eor	r27, r27
    1a2e:	aa 27       	eor	r26, r26
    1a30:	62 17       	cp	r22, r18
    1a32:	73 07       	cpc	r23, r19
    1a34:	84 07       	cpc	r24, r20
    1a36:	38 f0       	brcs	.+14     	; 0x1a46 <__divsf3_pse+0x26>
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3c:	22 0f       	add	r18, r18
    1a3e:	33 1f       	adc	r19, r19
    1a40:	44 1f       	adc	r20, r20
    1a42:	aa 1f       	adc	r26, r26
    1a44:	a9 f3       	breq	.-22     	; 0x1a30 <__divsf3_pse+0x10>
    1a46:	33 d0       	rcall	.+102    	; 0x1aae <__divsf3_pse+0x8e>
    1a48:	0e 2e       	mov	r0, r30
    1a4a:	3a f0       	brmi	.+14     	; 0x1a5a <__divsf3_pse+0x3a>
    1a4c:	e0 e8       	ldi	r30, 0x80	; 128
    1a4e:	30 d0       	rcall	.+96     	; 0x1ab0 <__divsf3_pse+0x90>
    1a50:	91 50       	subi	r25, 0x01	; 1
    1a52:	50 40       	sbci	r21, 0x00	; 0
    1a54:	e6 95       	lsr	r30
    1a56:	00 1c       	adc	r0, r0
    1a58:	ca f7       	brpl	.-14     	; 0x1a4c <__divsf3_pse+0x2c>
    1a5a:	29 d0       	rcall	.+82     	; 0x1aae <__divsf3_pse+0x8e>
    1a5c:	fe 2f       	mov	r31, r30
    1a5e:	27 d0       	rcall	.+78     	; 0x1aae <__divsf3_pse+0x8e>
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	bb 1f       	adc	r27, r27
    1a68:	26 17       	cp	r18, r22
    1a6a:	37 07       	cpc	r19, r23
    1a6c:	48 07       	cpc	r20, r24
    1a6e:	ab 07       	cpc	r26, r27
    1a70:	b0 e8       	ldi	r27, 0x80	; 128
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <__divsf3_pse+0x56>
    1a74:	bb 0b       	sbc	r27, r27
    1a76:	80 2d       	mov	r24, r0
    1a78:	bf 01       	movw	r22, r30
    1a7a:	ff 27       	eor	r31, r31
    1a7c:	93 58       	subi	r25, 0x83	; 131
    1a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a80:	2a f0       	brmi	.+10     	; 0x1a8c <__divsf3_pse+0x6c>
    1a82:	9e 3f       	cpi	r25, 0xFE	; 254
    1a84:	51 05       	cpc	r21, r1
    1a86:	68 f0       	brcs	.+26     	; 0x1aa2 <__divsf3_pse+0x82>
    1a88:	92 c0       	rjmp	.+292    	; 0x1bae <__fp_inf>
    1a8a:	dc c0       	rjmp	.+440    	; 0x1c44 <__fp_szero>
    1a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a8e:	ec f3       	brlt	.-6      	; 0x1a8a <__divsf3_pse+0x6a>
    1a90:	98 3e       	cpi	r25, 0xE8	; 232
    1a92:	dc f3       	brlt	.-10     	; 0x1a8a <__divsf3_pse+0x6a>
    1a94:	86 95       	lsr	r24
    1a96:	77 95       	ror	r23
    1a98:	67 95       	ror	r22
    1a9a:	b7 95       	ror	r27
    1a9c:	f7 95       	ror	r31
    1a9e:	9f 5f       	subi	r25, 0xFF	; 255
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__divsf3_pse+0x74>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	96 95       	lsr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	97 f9       	bld	r25, 7
    1aac:	08 95       	ret
    1aae:	e1 e0       	ldi	r30, 0x01	; 1
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	62 17       	cp	r22, r18
    1aba:	73 07       	cpc	r23, r19
    1abc:	84 07       	cpc	r24, r20
    1abe:	ba 07       	cpc	r27, r26
    1ac0:	20 f0       	brcs	.+8      	; 0x1aca <__divsf3_pse+0xaa>
    1ac2:	62 1b       	sub	r22, r18
    1ac4:	73 0b       	sbc	r23, r19
    1ac6:	84 0b       	sbc	r24, r20
    1ac8:	ba 0b       	sbc	r27, r26
    1aca:	ee 1f       	adc	r30, r30
    1acc:	88 f7       	brcc	.-30     	; 0x1ab0 <__divsf3_pse+0x90>
    1ace:	e0 95       	com	r30
    1ad0:	08 95       	ret

00001ad2 <__fixsfsi>:
    1ad2:	04 d0       	rcall	.+8      	; 0x1adc <__fixunssfsi>
    1ad4:	68 94       	set
    1ad6:	b1 11       	cpse	r27, r1
    1ad8:	b5 c0       	rjmp	.+362    	; 0x1c44 <__fp_szero>
    1ada:	08 95       	ret

00001adc <__fixunssfsi>:
    1adc:	98 d0       	rcall	.+304    	; 0x1c0e <__fp_splitA>
    1ade:	88 f0       	brcs	.+34     	; 0x1b02 <__fixunssfsi+0x26>
    1ae0:	9f 57       	subi	r25, 0x7F	; 127
    1ae2:	90 f0       	brcs	.+36     	; 0x1b08 <__fixunssfsi+0x2c>
    1ae4:	b9 2f       	mov	r27, r25
    1ae6:	99 27       	eor	r25, r25
    1ae8:	b7 51       	subi	r27, 0x17	; 23
    1aea:	a0 f0       	brcs	.+40     	; 0x1b14 <__fixunssfsi+0x38>
    1aec:	d1 f0       	breq	.+52     	; 0x1b22 <__fixunssfsi+0x46>
    1aee:	66 0f       	add	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	1a f0       	brmi	.+6      	; 0x1afe <__fixunssfsi+0x22>
    1af8:	ba 95       	dec	r27
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__fixunssfsi+0x12>
    1afc:	12 c0       	rjmp	.+36     	; 0x1b22 <__fixunssfsi+0x46>
    1afe:	b1 30       	cpi	r27, 0x01	; 1
    1b00:	81 f0       	breq	.+32     	; 0x1b22 <__fixunssfsi+0x46>
    1b02:	9f d0       	rcall	.+318    	; 0x1c42 <__fp_zero>
    1b04:	b1 e0       	ldi	r27, 0x01	; 1
    1b06:	08 95       	ret
    1b08:	9c c0       	rjmp	.+312    	; 0x1c42 <__fp_zero>
    1b0a:	67 2f       	mov	r22, r23
    1b0c:	78 2f       	mov	r23, r24
    1b0e:	88 27       	eor	r24, r24
    1b10:	b8 5f       	subi	r27, 0xF8	; 248
    1b12:	39 f0       	breq	.+14     	; 0x1b22 <__fixunssfsi+0x46>
    1b14:	b9 3f       	cpi	r27, 0xF9	; 249
    1b16:	cc f3       	brlt	.-14     	; 0x1b0a <__fixunssfsi+0x2e>
    1b18:	86 95       	lsr	r24
    1b1a:	77 95       	ror	r23
    1b1c:	67 95       	ror	r22
    1b1e:	b3 95       	inc	r27
    1b20:	d9 f7       	brne	.-10     	; 0x1b18 <__fixunssfsi+0x3c>
    1b22:	3e f4       	brtc	.+14     	; 0x1b32 <__fixunssfsi+0x56>
    1b24:	90 95       	com	r25
    1b26:	80 95       	com	r24
    1b28:	70 95       	com	r23
    1b2a:	61 95       	neg	r22
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	08 95       	ret

00001b34 <__floatunsisf>:
    1b34:	e8 94       	clt
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <__floatsisf+0x12>

00001b38 <__floatsisf>:
    1b38:	97 fb       	bst	r25, 7
    1b3a:	3e f4       	brtc	.+14     	; 0x1b4a <__floatsisf+0x12>
    1b3c:	90 95       	com	r25
    1b3e:	80 95       	com	r24
    1b40:	70 95       	com	r23
    1b42:	61 95       	neg	r22
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	99 23       	and	r25, r25
    1b4c:	a9 f0       	breq	.+42     	; 0x1b78 <__floatsisf+0x40>
    1b4e:	f9 2f       	mov	r31, r25
    1b50:	96 e9       	ldi	r25, 0x96	; 150
    1b52:	bb 27       	eor	r27, r27
    1b54:	93 95       	inc	r25
    1b56:	f6 95       	lsr	r31
    1b58:	87 95       	ror	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	b7 95       	ror	r27
    1b60:	f1 11       	cpse	r31, r1
    1b62:	f8 cf       	rjmp	.-16     	; 0x1b54 <__floatsisf+0x1c>
    1b64:	fa f4       	brpl	.+62     	; 0x1ba4 <__floatsisf+0x6c>
    1b66:	bb 0f       	add	r27, r27
    1b68:	11 f4       	brne	.+4      	; 0x1b6e <__floatsisf+0x36>
    1b6a:	60 ff       	sbrs	r22, 0
    1b6c:	1b c0       	rjmp	.+54     	; 0x1ba4 <__floatsisf+0x6c>
    1b6e:	6f 5f       	subi	r22, 0xFF	; 255
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	8f 4f       	sbci	r24, 0xFF	; 255
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	16 c0       	rjmp	.+44     	; 0x1ba4 <__floatsisf+0x6c>
    1b78:	88 23       	and	r24, r24
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <__floatsisf+0x48>
    1b7c:	96 e9       	ldi	r25, 0x96	; 150
    1b7e:	11 c0       	rjmp	.+34     	; 0x1ba2 <__floatsisf+0x6a>
    1b80:	77 23       	and	r23, r23
    1b82:	21 f0       	breq	.+8      	; 0x1b8c <__floatsisf+0x54>
    1b84:	9e e8       	ldi	r25, 0x8E	; 142
    1b86:	87 2f       	mov	r24, r23
    1b88:	76 2f       	mov	r23, r22
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <__floatsisf+0x5e>
    1b8c:	66 23       	and	r22, r22
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <__floatsisf+0x74>
    1b90:	96 e8       	ldi	r25, 0x86	; 134
    1b92:	86 2f       	mov	r24, r22
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	2a f0       	brmi	.+10     	; 0x1ba4 <__floatsisf+0x6c>
    1b9a:	9a 95       	dec	r25
    1b9c:	66 0f       	add	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	da f7       	brpl	.-10     	; 0x1b9a <__floatsisf+0x62>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	97 f9       	bld	r25, 7
    1bac:	08 95       	ret

00001bae <__fp_inf>:
    1bae:	97 f9       	bld	r25, 7
    1bb0:	9f 67       	ori	r25, 0x7F	; 127
    1bb2:	80 e8       	ldi	r24, 0x80	; 128
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	08 95       	ret

00001bba <__fp_nan>:
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	80 ec       	ldi	r24, 0xC0	; 192
    1bbe:	08 95       	ret

00001bc0 <__fp_pscA>:
    1bc0:	00 24       	eor	r0, r0
    1bc2:	0a 94       	dec	r0
    1bc4:	16 16       	cp	r1, r22
    1bc6:	17 06       	cpc	r1, r23
    1bc8:	18 06       	cpc	r1, r24
    1bca:	09 06       	cpc	r0, r25
    1bcc:	08 95       	ret

00001bce <__fp_pscB>:
    1bce:	00 24       	eor	r0, r0
    1bd0:	0a 94       	dec	r0
    1bd2:	12 16       	cp	r1, r18
    1bd4:	13 06       	cpc	r1, r19
    1bd6:	14 06       	cpc	r1, r20
    1bd8:	05 06       	cpc	r0, r21
    1bda:	08 95       	ret

00001bdc <__fp_round>:
    1bdc:	09 2e       	mov	r0, r25
    1bde:	03 94       	inc	r0
    1be0:	00 0c       	add	r0, r0
    1be2:	11 f4       	brne	.+4      	; 0x1be8 <__fp_round+0xc>
    1be4:	88 23       	and	r24, r24
    1be6:	52 f0       	brmi	.+20     	; 0x1bfc <__fp_round+0x20>
    1be8:	bb 0f       	add	r27, r27
    1bea:	40 f4       	brcc	.+16     	; 0x1bfc <__fp_round+0x20>
    1bec:	bf 2b       	or	r27, r31
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <__fp_round+0x18>
    1bf0:	60 ff       	sbrs	r22, 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <__fp_round+0x20>
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__fp_split3>:
    1bfe:	57 fd       	sbrc	r21, 7
    1c00:	90 58       	subi	r25, 0x80	; 128
    1c02:	44 0f       	add	r20, r20
    1c04:	55 1f       	adc	r21, r21
    1c06:	59 f0       	breq	.+22     	; 0x1c1e <__fp_splitA+0x10>
    1c08:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0a:	71 f0       	breq	.+28     	; 0x1c28 <__fp_splitA+0x1a>
    1c0c:	47 95       	ror	r20

00001c0e <__fp_splitA>:
    1c0e:	88 0f       	add	r24, r24
    1c10:	97 fb       	bst	r25, 7
    1c12:	99 1f       	adc	r25, r25
    1c14:	61 f0       	breq	.+24     	; 0x1c2e <__fp_splitA+0x20>
    1c16:	9f 3f       	cpi	r25, 0xFF	; 255
    1c18:	79 f0       	breq	.+30     	; 0x1c38 <__fp_splitA+0x2a>
    1c1a:	87 95       	ror	r24
    1c1c:	08 95       	ret
    1c1e:	12 16       	cp	r1, r18
    1c20:	13 06       	cpc	r1, r19
    1c22:	14 06       	cpc	r1, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	f2 cf       	rjmp	.-28     	; 0x1c0c <__fp_split3+0xe>
    1c28:	46 95       	lsr	r20
    1c2a:	f1 df       	rcall	.-30     	; 0x1c0e <__fp_splitA>
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <__fp_splitA+0x30>
    1c2e:	16 16       	cp	r1, r22
    1c30:	17 06       	cpc	r1, r23
    1c32:	18 06       	cpc	r1, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	f1 cf       	rjmp	.-30     	; 0x1c1a <__fp_splitA+0xc>
    1c38:	86 95       	lsr	r24
    1c3a:	71 05       	cpc	r23, r1
    1c3c:	61 05       	cpc	r22, r1
    1c3e:	08 94       	sec
    1c40:	08 95       	ret

00001c42 <__fp_zero>:
    1c42:	e8 94       	clt

00001c44 <__fp_szero>:
    1c44:	bb 27       	eor	r27, r27
    1c46:	66 27       	eor	r22, r22
    1c48:	77 27       	eor	r23, r23
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	97 f9       	bld	r25, 7
    1c4e:	08 95       	ret

00001c50 <__mulsf3>:
    1c50:	0b d0       	rcall	.+22     	; 0x1c68 <__mulsf3x>
    1c52:	c4 cf       	rjmp	.-120    	; 0x1bdc <__fp_round>
    1c54:	b5 df       	rcall	.-150    	; 0x1bc0 <__fp_pscA>
    1c56:	28 f0       	brcs	.+10     	; 0x1c62 <__mulsf3+0x12>
    1c58:	ba df       	rcall	.-140    	; 0x1bce <__fp_pscB>
    1c5a:	18 f0       	brcs	.+6      	; 0x1c62 <__mulsf3+0x12>
    1c5c:	95 23       	and	r25, r21
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <__mulsf3+0x12>
    1c60:	a6 cf       	rjmp	.-180    	; 0x1bae <__fp_inf>
    1c62:	ab cf       	rjmp	.-170    	; 0x1bba <__fp_nan>
    1c64:	11 24       	eor	r1, r1
    1c66:	ee cf       	rjmp	.-36     	; 0x1c44 <__fp_szero>

00001c68 <__mulsf3x>:
    1c68:	ca df       	rcall	.-108    	; 0x1bfe <__fp_split3>
    1c6a:	a0 f3       	brcs	.-24     	; 0x1c54 <__mulsf3+0x4>

00001c6c <__mulsf3_pse>:
    1c6c:	95 9f       	mul	r25, r21
    1c6e:	d1 f3       	breq	.-12     	; 0x1c64 <__mulsf3+0x14>
    1c70:	95 0f       	add	r25, r21
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	55 1f       	adc	r21, r21
    1c76:	62 9f       	mul	r22, r18
    1c78:	f0 01       	movw	r30, r0
    1c7a:	72 9f       	mul	r23, r18
    1c7c:	bb 27       	eor	r27, r27
    1c7e:	f0 0d       	add	r31, r0
    1c80:	b1 1d       	adc	r27, r1
    1c82:	63 9f       	mul	r22, r19
    1c84:	aa 27       	eor	r26, r26
    1c86:	f0 0d       	add	r31, r0
    1c88:	b1 1d       	adc	r27, r1
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	64 9f       	mul	r22, r20
    1c8e:	66 27       	eor	r22, r22
    1c90:	b0 0d       	add	r27, r0
    1c92:	a1 1d       	adc	r26, r1
    1c94:	66 1f       	adc	r22, r22
    1c96:	82 9f       	mul	r24, r18
    1c98:	22 27       	eor	r18, r18
    1c9a:	b0 0d       	add	r27, r0
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	62 1f       	adc	r22, r18
    1ca0:	73 9f       	mul	r23, r19
    1ca2:	b0 0d       	add	r27, r0
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	62 1f       	adc	r22, r18
    1ca8:	83 9f       	mul	r24, r19
    1caa:	a0 0d       	add	r26, r0
    1cac:	61 1d       	adc	r22, r1
    1cae:	22 1f       	adc	r18, r18
    1cb0:	74 9f       	mul	r23, r20
    1cb2:	33 27       	eor	r19, r19
    1cb4:	a0 0d       	add	r26, r0
    1cb6:	61 1d       	adc	r22, r1
    1cb8:	23 1f       	adc	r18, r19
    1cba:	84 9f       	mul	r24, r20
    1cbc:	60 0d       	add	r22, r0
    1cbe:	21 1d       	adc	r18, r1
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	76 2f       	mov	r23, r22
    1cc4:	6a 2f       	mov	r22, r26
    1cc6:	11 24       	eor	r1, r1
    1cc8:	9f 57       	subi	r25, 0x7F	; 127
    1cca:	50 40       	sbci	r21, 0x00	; 0
    1ccc:	8a f0       	brmi	.+34     	; 0x1cf0 <__mulsf3_pse+0x84>
    1cce:	e1 f0       	breq	.+56     	; 0x1d08 <__mulsf3_pse+0x9c>
    1cd0:	88 23       	and	r24, r24
    1cd2:	4a f0       	brmi	.+18     	; 0x1ce6 <__mulsf3_pse+0x7a>
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	66 1f       	adc	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__mulsf3_pse+0x64>
    1ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce8:	51 05       	cpc	r21, r1
    1cea:	70 f0       	brcs	.+28     	; 0x1d08 <__mulsf3_pse+0x9c>
    1cec:	60 cf       	rjmp	.-320    	; 0x1bae <__fp_inf>
    1cee:	aa cf       	rjmp	.-172    	; 0x1c44 <__fp_szero>
    1cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf2:	ec f3       	brlt	.-6      	; 0x1cee <__mulsf3_pse+0x82>
    1cf4:	98 3e       	cpi	r25, 0xE8	; 232
    1cf6:	dc f3       	brlt	.-10     	; 0x1cee <__mulsf3_pse+0x82>
    1cf8:	86 95       	lsr	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b7 95       	ror	r27
    1d00:	f7 95       	ror	r31
    1d02:	e7 95       	ror	r30
    1d04:	9f 5f       	subi	r25, 0xFF	; 255
    1d06:	c1 f7       	brne	.-16     	; 0x1cf8 <__mulsf3_pse+0x8c>
    1d08:	fe 2b       	or	r31, r30
    1d0a:	88 0f       	add	r24, r24
    1d0c:	91 1d       	adc	r25, r1
    1d0e:	96 95       	lsr	r25
    1d10:	87 95       	ror	r24
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret

00001d16 <__divmodhi4>:
    1d16:	97 fb       	bst	r25, 7
    1d18:	07 2e       	mov	r0, r23
    1d1a:	16 f4       	brtc	.+4      	; 0x1d20 <__divmodhi4+0xa>
    1d1c:	00 94       	com	r0
    1d1e:	06 d0       	rcall	.+12     	; 0x1d2c <__divmodhi4_neg1>
    1d20:	77 fd       	sbrc	r23, 7
    1d22:	08 d0       	rcall	.+16     	; 0x1d34 <__divmodhi4_neg2>
    1d24:	0b d0       	rcall	.+22     	; 0x1d3c <__udivmodhi4>
    1d26:	07 fc       	sbrc	r0, 7
    1d28:	05 d0       	rcall	.+10     	; 0x1d34 <__divmodhi4_neg2>
    1d2a:	3e f4       	brtc	.+14     	; 0x1d3a <__divmodhi4_exit>

00001d2c <__divmodhi4_neg1>:
    1d2c:	90 95       	com	r25
    1d2e:	81 95       	neg	r24
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	08 95       	ret

00001d34 <__divmodhi4_neg2>:
    1d34:	70 95       	com	r23
    1d36:	61 95       	neg	r22
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255

00001d3a <__divmodhi4_exit>:
    1d3a:	08 95       	ret

00001d3c <__udivmodhi4>:
    1d3c:	aa 1b       	sub	r26, r26
    1d3e:	bb 1b       	sub	r27, r27
    1d40:	51 e1       	ldi	r21, 0x11	; 17
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <__udivmodhi4_ep>

00001d44 <__udivmodhi4_loop>:
    1d44:	aa 1f       	adc	r26, r26
    1d46:	bb 1f       	adc	r27, r27
    1d48:	a6 17       	cp	r26, r22
    1d4a:	b7 07       	cpc	r27, r23
    1d4c:	10 f0       	brcs	.+4      	; 0x1d52 <__udivmodhi4_ep>
    1d4e:	a6 1b       	sub	r26, r22
    1d50:	b7 0b       	sbc	r27, r23

00001d52 <__udivmodhi4_ep>:
    1d52:	88 1f       	adc	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	5a 95       	dec	r21
    1d58:	a9 f7       	brne	.-22     	; 0x1d44 <__udivmodhi4_loop>
    1d5a:	80 95       	com	r24
    1d5c:	90 95       	com	r25
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	08 95       	ret

00001d64 <strcpy>:
    1d64:	fb 01       	movw	r30, r22
    1d66:	dc 01       	movw	r26, r24
    1d68:	01 90       	ld	r0, Z+
    1d6a:	0d 92       	st	X+, r0
    1d6c:	00 20       	and	r0, r0
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <strcpy+0x4>
    1d70:	08 95       	ret

00001d72 <_exit>:
    1d72:	f8 94       	cli

00001d74 <__stop_program>:
    1d74:	ff cf       	rjmp	.-2      	; 0x1d74 <__stop_program>
