
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00002098  0000212c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001c6  008001c6  000021f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021f2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00002222  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f8b  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb6  00000000  00000000  00005395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026e0  00000000  00000000  00005f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  0000862c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010c14  00000000  00000000  00008c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001809  00000000  00000000  00019870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  0001b079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b94  00000000  00000000  0001b219  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_19>
      50:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3c       	cpi	r26, 0xC6	; 198
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 ec       	ldi	r26, 0xC6	; 198
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 30       	cpi	r26, 0x0E	; 14
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2f 0b 	call	0x165e	; 0x165e <main>
      c6:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	int req_count = (int) req_delay*F_CPU/1024-1;
	if(TCNT3<req_count)
      f0:	e0 91 94 00 	lds	r30, 0x0094
      f4:	f0 91 95 00 	lds	r31, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024-1;
      f8:	dc 01       	movw	r26, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	41 ee       	ldi	r20, 0xE1	; 225
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	0e 94 10 10 	call	0x2020	; 0x2020 <__mulshisi3>
     106:	8b 01       	movw	r16, r22
     108:	9c 01       	movw	r18, r24
     10a:	99 23       	and	r25, r25
     10c:	24 f4       	brge	.+8      	; 0x116 <checkCount+0x2a>
     10e:	01 50       	subi	r16, 0x01	; 1
     110:	1c 4f       	sbci	r17, 0xFC	; 252
     112:	2f 4f       	sbci	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	d9 01       	movw	r26, r18
     118:	c8 01       	movw	r24, r16
     11a:	07 2e       	mov	r0, r23
     11c:	7a e0       	ldi	r23, 0x0A	; 10
     11e:	b5 95       	asr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	7a 95       	dec	r23
     128:	d1 f7       	brne	.-12     	; 0x11e <checkCount+0x32>
     12a:	70 2d       	mov	r23, r0
     12c:	01 97       	sbiw	r24, 0x01	; 1
	if(TCNT3<req_count)
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	e8 17       	cp	r30, r24
     134:	f9 07       	cpc	r31, r25
     136:	10 f4       	brcc	.+4      	; 0x13c <checkCount+0x50>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 0;
	}
	return 1;
     13c:	c9 01       	movw	r24, r18
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange)
{
     144:	2f 92       	push	r2
     146:	3f 92       	push	r3
     148:	4f 92       	push	r4
     14a:	5f 92       	push	r5
     14c:	6f 92       	push	r6
     14e:	7f 92       	push	r7
     150:	8f 92       	push	r8
     152:	9f 92       	push	r9
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	c8 54       	subi	r28, 0x48	; 72
     16e:	d1 40       	sbci	r29, 0x01	; 1
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	9b 01       	movw	r18, r22
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     17c:	49 e0       	ldi	r20, 0x09	; 9
     17e:	e4 e0       	ldi	r30, 0x04	; 4
     180:	f1 e0       	ldi	r31, 0x01	; 1
     182:	de 01       	movw	r26, r28
     184:	11 96       	adiw	r26, 0x01	; 1
     186:	01 90       	ld	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	4a 95       	dec	r20
     18c:	e1 f7       	brne	.-8      	; 0x186 <FLC_speed+0x42>
	struct io_type steering; strcpy(steering.name, "steering");
     18e:	49 e0       	ldi	r20, 0x09	; 9
     190:	ed e0       	ldi	r30, 0x0D	; 13
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	de 01       	movw	r26, r28
     196:	51 96       	adiw	r26, 0x11	; 17
     198:	01 90       	ld	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	4a 95       	dec	r20
     19e:	e1 f7       	brne	.-8      	; 0x198 <FLC_speed+0x54>

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     1a0:	46 e0       	ldi	r20, 0x06	; 6
     1a2:	e6 e1       	ldi	r30, 0x16	; 22
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	de 01       	movw	r26, r28
     1a8:	91 96       	adiw	r26, 0x21	; 33
     1aa:	01 90       	ld	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	4a 95       	dec	r20
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <FLC_speed+0x66>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     1b2:	87 3e       	cpi	r24, 0xE7	; 231
     1b4:	47 e0       	ldi	r20, 0x07	; 7
     1b6:	94 07       	cpc	r25, r20
     1b8:	2c f4       	brge	.+10     	; 0x1c4 <FLC_speed+0x80>
		steering.value = 202;
     1ba:	8a ec       	ldi	r24, 0xCA	; 202
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	9c 8f       	std	Y+28, r25	; 0x1c
     1c0:	8b 8f       	std	Y+27, r24	; 0x1b
     1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <FLC_speed+0x9e>
	}
	else if (currentServo>=MAXRIGHT)
     1c4:	84 3e       	cpi	r24, 0xE4	; 228
     1c6:	6c e0       	ldi	r22, 0x0C	; 12
     1c8:	96 07       	cpc	r25, r22
     1ca:	2c f0       	brlt	.+10     	; 0x1d6 <FLC_speed+0x92>
	{
		steering.value = 330;
     1cc:	8a e4       	ldi	r24, 0x4A	; 74
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	9c 8f       	std	Y+28, r25	; 0x1c
     1d2:	8b 8f       	std	Y+27, r24	; 0x1b
     1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <FLC_speed+0x9e>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     1d6:	6a e0       	ldi	r22, 0x0A	; 10
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodhi4>
     1de:	7c 8f       	std	Y+28, r23	; 0x1c
     1e0:	6b 8f       	std	Y+27, r22	; 0x1b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     1e2:	33 23       	and	r19, r19
     1e4:	1c f4       	brge	.+6      	; 0x1ec <FLC_speed+0xa8>
	{
		distance.value = MIN_DISTANCE;
     1e6:	1c 86       	std	Y+12, r1	; 0x0c
     1e8:	1b 86       	std	Y+11, r1	; 0x0b
     1ea:	0a c0       	rjmp	.+20     	; 0x200 <FLC_speed+0xbc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     1ec:	23 33       	cpi	r18, 0x33	; 51
     1ee:	31 05       	cpc	r19, r1
     1f0:	2c f0       	brlt	.+10     	; 0x1fc <FLC_speed+0xb8>
	{
		distance.value = MAX_DISTANCE;
     1f2:	82 e3       	ldi	r24, 0x32	; 50
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	9c 87       	std	Y+12, r25	; 0x0c
     1f8:	8b 87       	std	Y+11, r24	; 0x0b
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <FLC_speed+0xbc>
	}
	else
	{
		distance.value = midSonicRange;
     1fc:	3c 87       	std	Y+12, r19	; 0x0c
     1fe:	2b 87       	std	Y+11, r18	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type right;
	MATLAB_MF(&right, "right", 266, 330, 330, 331);
     200:	6e 01       	movw	r12, r28
     202:	81 e3       	ldi	r24, 0x31	; 49
     204:	c8 0e       	add	r12, r24
     206:	d1 1c       	adc	r13, r1
     208:	0f 2e       	mov	r0, r31
     20a:	fb e4       	ldi	r31, 0x4B	; 75
     20c:	ef 2e       	mov	r14, r31
     20e:	ff 24       	eor	r15, r15
     210:	f3 94       	inc	r15
     212:	f0 2d       	mov	r31, r0
     214:	0a e4       	ldi	r16, 0x4A	; 74
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	2a e4       	ldi	r18, 0x4A	; 74
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	4a e0       	ldi	r20, 0x0A	; 10
     21e:	51 e0       	ldi	r21, 0x01	; 1
     220:	6c e1       	ldi	r22, 0x1C	; 28
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	c6 01       	movw	r24, r12
     226:	ab d6       	rcall	.+3414   	; 0xf7e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 216, 266, 266, 316);
     228:	0f 2e       	mov	r0, r31
     22a:	fc e3       	ldi	r31, 0x3C	; 60
     22c:	ef 2e       	mov	r14, r31
     22e:	ff 24       	eor	r15, r15
     230:	f3 94       	inc	r15
     232:	f0 2d       	mov	r31, r0
     234:	0a e0       	ldi	r16, 0x0A	; 10
     236:	11 e0       	ldi	r17, 0x01	; 1
     238:	2a e0       	ldi	r18, 0x0A	; 10
     23a:	31 e0       	ldi	r19, 0x01	; 1
     23c:	48 ed       	ldi	r20, 0xD8	; 216
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	62 e2       	ldi	r22, 0x22	; 34
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	ce 01       	movw	r24, r28
     246:	89 5b       	subi	r24, 0xB9	; 185
     248:	9f 4f       	sbci	r25, 0xFF	; 255
     24a:	99 d6       	rcall	.+3378   	; 0xf7e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 201, 202, 202, 266);
     24c:	1e 01       	movw	r2, r28
     24e:	9d e5       	ldi	r25, 0x5D	; 93
     250:	29 0e       	add	r2, r25
     252:	31 1c       	adc	r3, r1
     254:	0f 2e       	mov	r0, r31
     256:	fa e0       	ldi	r31, 0x0A	; 10
     258:	ef 2e       	mov	r14, r31
     25a:	ff 24       	eor	r15, r15
     25c:	f3 94       	inc	r15
     25e:	f0 2d       	mov	r31, r0
     260:	0a ec       	ldi	r16, 0xCA	; 202
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	2a ec       	ldi	r18, 0xCA	; 202
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	49 ec       	ldi	r20, 0xC9	; 201
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	6b e2       	ldi	r22, 0x2B	; 43
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	c1 01       	movw	r24, r2
     272:	85 d6       	rcall	.+3338   	; 0xf7e <MATLAB_MF>

	// Linked list for MFs
	steering.membership_functions = &right;
     274:	de 8e       	std	Y+30, r13	; 0x1e
     276:	cd 8e       	std	Y+29, r12	; 0x1d
	right.next = &straight;
     278:	e7 e4       	ldi	r30, 0x47	; 71
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ec 0f       	add	r30, r28
     27e:	fd 1f       	adc	r31, r29
     280:	27 96       	adiw	r28, 0x07	; 7
     282:	ff af       	std	Y+63, r31	; 0x3f
     284:	ee af       	std	Y+62, r30	; 0x3e
     286:	27 97       	sbiw	r28, 0x07	; 7
	straight.next = &left;
     288:	6d 96       	adiw	r28, 0x1d	; 29
     28a:	3f ae       	std	Y+63, r3	; 0x3f
     28c:	2e ae       	std	Y+62, r2	; 0x3e
     28e:	6d 97       	sbiw	r28, 0x1d	; 29
	left.next = NULL;
     290:	f1 01       	movw	r30, r2
     292:	15 8a       	std	Z+21, r1	; 0x15
     294:	14 8a       	std	Z+20, r1	; 0x14
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 5, 20);
     296:	3e 01       	movw	r6, r28
     298:	f3 e7       	ldi	r31, 0x73	; 115
     29a:	6f 0e       	add	r6, r31
     29c:	71 1c       	adc	r7, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	f4 e1       	ldi	r31, 0x14	; 20
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f1 2c       	mov	r15, r1
     2a6:	f0 2d       	mov	r31, r0
     2a8:	05 e0       	ldi	r16, 0x05	; 5
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	4f ef       	ldi	r20, 0xFF	; 255
     2b2:	5f ef       	ldi	r21, 0xFF	; 255
     2b4:	60 e3       	ldi	r22, 0x30	; 48
     2b6:	71 e0       	ldi	r23, 0x01	; 1
     2b8:	c3 01       	movw	r24, r6
     2ba:	61 d6       	rcall	.+3266   	; 0xf7e <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 0, 20, 20, 60);
     2bc:	5e 01       	movw	r10, r28
     2be:	29 e8       	ldi	r18, 0x89	; 137
     2c0:	a2 0e       	add	r10, r18
     2c2:	b1 1c       	adc	r11, r1
     2c4:	0f 2e       	mov	r0, r31
     2c6:	fc e3       	ldi	r31, 0x3C	; 60
     2c8:	ef 2e       	mov	r14, r31
     2ca:	f1 2c       	mov	r15, r1
     2cc:	f0 2d       	mov	r31, r0
     2ce:	04 e1       	ldi	r16, 0x14	; 20
     2d0:	10 e0       	ldi	r17, 0x00	; 0
     2d2:	24 e1       	ldi	r18, 0x14	; 20
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	69 e3       	ldi	r22, 0x39	; 57
     2dc:	71 e0       	ldi	r23, 0x01	; 1
     2de:	c5 01       	movw	r24, r10
     2e0:	4e d6       	rcall	.+3228   	; 0xf7e <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 20, 35, 45, MAX_DISTANCE+1);
     2e2:	2e 01       	movw	r4, r28
     2e4:	4f e9       	ldi	r20, 0x9F	; 159
     2e6:	44 0e       	add	r4, r20
     2e8:	51 1c       	adc	r5, r1
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f3 e3       	ldi	r31, 0x33	; 51
     2ee:	ef 2e       	mov	r14, r31
     2f0:	f1 2c       	mov	r15, r1
     2f2:	f0 2d       	mov	r31, r0
     2f4:	0d e2       	ldi	r16, 0x2D	; 45
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	23 e2       	ldi	r18, 0x23	; 35
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	44 e1       	ldi	r20, 0x14	; 20
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	6f e3       	ldi	r22, 0x3F	; 63
     302:	71 e0       	ldi	r23, 0x01	; 1
     304:	c2 01       	movw	r24, r4
     306:	3b d6       	rcall	.+3190   	; 0xf7e <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     308:	7e 86       	std	Y+14, r7	; 0x0e
     30a:	6d 86       	std	Y+13, r6	; 0x0d
	stopDist.next = &close;
     30c:	f3 01       	movw	r30, r6
     30e:	b5 8a       	std	Z+21, r11	; 0x15
     310:	a4 8a       	std	Z+20, r10	; 0x14
	close.next = &faar;
     312:	f5 01       	movw	r30, r10
     314:	55 8a       	std	Z+21, r5	; 0x15
     316:	44 8a       	std	Z+20, r4	; 0x14
	faar.next = NULL;
     318:	f2 01       	movw	r30, r4
     31a:	15 8a       	std	Z+21, r1	; 0x15
     31c:	14 8a       	std	Z+20, r1	; 0x14
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2789, 2790, 2790, 2810);
     31e:	4e 01       	movw	r8, r28
     320:	f5 eb       	ldi	r31, 0xB5	; 181
     322:	8f 0e       	add	r8, r31
     324:	91 1c       	adc	r9, r1
     326:	0f 2e       	mov	r0, r31
     328:	fa ef       	ldi	r31, 0xFA	; 250
     32a:	ef 2e       	mov	r14, r31
     32c:	fa e0       	ldi	r31, 0x0A	; 10
     32e:	ff 2e       	mov	r15, r31
     330:	f0 2d       	mov	r31, r0
     332:	06 ee       	ldi	r16, 0xE6	; 230
     334:	1a e0       	ldi	r17, 0x0A	; 10
     336:	26 ee       	ldi	r18, 0xE6	; 230
     338:	3a e0       	ldi	r19, 0x0A	; 10
     33a:	45 ee       	ldi	r20, 0xE5	; 229
     33c:	5a e0       	ldi	r21, 0x0A	; 10
     33e:	64 e4       	ldi	r22, 0x44	; 68
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	c4 01       	movw	r24, r8
     344:	1c d6       	rcall	.+3128   	; 0xf7e <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2801, 2827, 2833, 2859);
     346:	6e 01       	movw	r12, r28
     348:	2b ec       	ldi	r18, 0xCB	; 203
     34a:	c2 0e       	add	r12, r18
     34c:	d1 1c       	adc	r13, r1
     34e:	0f 2e       	mov	r0, r31
     350:	fb e2       	ldi	r31, 0x2B	; 43
     352:	ef 2e       	mov	r14, r31
     354:	fb e0       	ldi	r31, 0x0B	; 11
     356:	ff 2e       	mov	r15, r31
     358:	f0 2d       	mov	r31, r0
     35a:	01 e1       	ldi	r16, 0x11	; 17
     35c:	1b e0       	ldi	r17, 0x0B	; 11
     35e:	2b e0       	ldi	r18, 0x0B	; 11
     360:	3b e0       	ldi	r19, 0x0B	; 11
     362:	41 ef       	ldi	r20, 0xF1	; 241
     364:	5a e0       	ldi	r21, 0x0A	; 10
     366:	6c e4       	ldi	r22, 0x4C	; 76
     368:	71 e0       	ldi	r23, 0x01	; 1
     36a:	c6 01       	movw	r24, r12
     36c:	08 d6       	rcall	.+3088   	; 0xf7e <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2840, 2850, 2860, 2890);
     36e:	0f 2e       	mov	r0, r31
     370:	fa e4       	ldi	r31, 0x4A	; 74
     372:	ef 2e       	mov	r14, r31
     374:	fb e0       	ldi	r31, 0x0B	; 11
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
     37a:	0c e2       	ldi	r16, 0x2C	; 44
     37c:	1b e0       	ldi	r17, 0x0B	; 11
     37e:	22 e2       	ldi	r18, 0x22	; 34
     380:	3b e0       	ldi	r19, 0x0B	; 11
     382:	48 e1       	ldi	r20, 0x18	; 24
     384:	5b e0       	ldi	r21, 0x0B	; 11
     386:	60 e5       	ldi	r22, 0x50	; 80
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	ce 01       	movw	r24, r28
     38c:	8f 51       	subi	r24, 0x1F	; 31
     38e:	9f 4f       	sbci	r25, 0xFF	; 255
     390:	f6 d5       	rcall	.+3052   	; 0xf7e <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &neutral;
     392:	9e a6       	std	Y+46, r9	; 0x2e
     394:	8d a6       	std	Y+45, r8	; 0x2d
	neutral.next = &low;
     396:	f4 01       	movw	r30, r8
     398:	d5 8a       	std	Z+21, r13	; 0x15
     39a:	c4 8a       	std	Z+20, r12	; 0x14
	low.next = &high;
     39c:	81 ee       	ldi	r24, 0xE1	; 225
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	8c 0f       	add	r24, r28
     3a2:	9d 1f       	adc	r25, r29
     3a4:	f6 01       	movw	r30, r12
     3a6:	95 8b       	std	Z+21, r25	; 0x15
     3a8:	84 8b       	std	Z+20, r24	; 0x14
	high.next = NULL;
     3aa:	cb 50       	subi	r28, 0x0B	; 11
     3ac:	df 4f       	sbci	r29, 0xFF	; 255
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	18 82       	st	Y, r1
     3b2:	c5 5f       	subi	r28, 0xF5	; 245
     3b4:	d0 40       	sbci	r29, 0x00	; 0


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     3b6:	80 5e       	subi	r24, 0xE0	; 224
     3b8:	91 09       	sbc	r25, r1
     3ba:	90 93 e5 02 	sts	0x02E5, r25
     3be:	80 93 e4 02 	sts	0x02E4, r24
	distance.next = &steering;
     3c2:	40 96       	adiw	r24, 0x10	; 16
     3c4:	98 8b       	std	Y+16, r25	; 0x10
     3c6:	8f 87       	std	Y+15, r24	; 0x0f
	steering.next = NULL;
     3c8:	18 a2       	std	Y+32, r1	; 0x20
     3ca:	1f 8e       	std	Y+31, r1	; 0x1f

	System_Outputs = &speed;
     3cc:	40 96       	adiw	r24, 0x10	; 16
     3ce:	90 93 e3 02 	sts	0x02E3, r25
     3d2:	80 93 e2 02 	sts	0x02E2, r24
	speed.next = NULL;
     3d6:	18 aa       	std	Y+48, r1	; 0x30
     3d8:	1f a6       	std	Y+47, r1	; 0x2f


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     3da:	ae 01       	movw	r20, r28
     3dc:	49 50       	subi	r20, 0x09	; 9
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	50 93 e7 02 	sts	0x02E7, r21
     3e4:	40 93 e6 02 	sts	0x02E6, r20
	struct rule_type rule2; rule1.next = &rule2;
     3e8:	9e 01       	movw	r18, r28
     3ea:	23 50       	subi	r18, 0x03	; 3
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	fa 01       	movw	r30, r20
     3f0:	35 83       	std	Z+5, r19	; 0x05
     3f2:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
     3f4:	8e 51       	subi	r24, 0x1E	; 30
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	f9 01       	movw	r30, r18
     3fa:	95 83       	std	Z+5, r25	; 0x05
     3fc:	84 83       	std	Z+4, r24	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
     3fe:	de 01       	movw	r26, r28
     400:	a7 5f       	subi	r26, 0xF7	; 247
     402:	be 4f       	sbci	r27, 0xFE	; 254
     404:	fc 01       	movw	r30, r24
     406:	b5 83       	std	Z+5, r27	; 0x05
     408:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule5; rule4.next = &rule5; rule5.next = NULL;
     40a:	7e 01       	movw	r14, r28
     40c:	f1 ef       	ldi	r31, 0xF1	; 241
     40e:	ef 1a       	sub	r14, r31
     410:	fe ef       	ldi	r31, 0xFE	; 254
     412:	ff 0a       	sbc	r15, r31
     414:	15 96       	adiw	r26, 0x05	; 5
     416:	fc 92       	st	X, r15
     418:	ee 92       	st	-X, r14
     41a:	14 97       	sbiw	r26, 0x04	; 4
     41c:	f7 01       	movw	r30, r14
     41e:	15 82       	std	Z+5, r1	; 0x05
     420:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     422:	be 01       	movw	r22, r28
     424:	6b 5e       	subi	r22, 0xEB	; 235
     426:	7e 4f       	sbci	r23, 0xFE	; 254
     428:	fa 01       	movw	r30, r20
     42a:	71 83       	std	Z+1, r23	; 0x01
     42c:	60 83       	st	Z, r22
     42e:	fb 01       	movw	r30, r22
     430:	13 82       	std	Z+3, r1	; 0x03
     432:	12 82       	std	Z+2, r1	; 0x02
     434:	8e 01       	movw	r16, r28
     436:	07 5e       	subi	r16, 0xE7	; 231
     438:	1e 4f       	sbci	r17, 0xFE	; 254
     43a:	fa 01       	movw	r30, r20
     43c:	13 83       	std	Z+3, r17	; 0x03
     43e:	02 83       	std	Z+2, r16	; 0x02
     440:	f8 01       	movw	r30, r16
     442:	13 82       	std	Z+3, r1	; 0x03
     444:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &neutral.value;
     446:	fa e0       	ldi	r31, 0x0A	; 10
     448:	6f 0e       	add	r6, r31
     44a:	71 1c       	adc	r7, r1
     44c:	fb 01       	movw	r30, r22
     44e:	71 82       	std	Z+1, r7	; 0x01
     450:	60 82       	st	Z, r6
     452:	fa e0       	ldi	r31, 0x0A	; 10
     454:	8f 0e       	add	r8, r31
     456:	91 1c       	adc	r9, r1
     458:	f8 01       	movw	r30, r16
     45a:	91 82       	std	Z+1, r9	; 0x01
     45c:	80 82       	st	Z, r8

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     45e:	4a 5d       	subi	r20, 0xDA	; 218
     460:	5f 4f       	sbci	r21, 0xFF	; 255
     462:	f9 01       	movw	r30, r18
     464:	51 83       	std	Z+1, r21	; 0x01
     466:	40 83       	st	Z, r20
     468:	fa 01       	movw	r30, r20
     46a:	13 82       	std	Z+3, r1	; 0x03
     46c:	12 82       	std	Z+2, r1	; 0x02
     46e:	64 5f       	subi	r22, 0xF4	; 244
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	f9 01       	movw	r30, r18
     474:	73 83       	std	Z+3, r23	; 0x03
     476:	62 83       	std	Z+2, r22	; 0x02
     478:	fb 01       	movw	r30, r22
     47a:	13 82       	std	Z+3, r1	; 0x03
     47c:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &low.value;
     47e:	fa e0       	ldi	r31, 0x0A	; 10
     480:	af 0e       	add	r10, r31
     482:	b1 1c       	adc	r11, r1
     484:	fa 01       	movw	r30, r20
     486:	b1 82       	std	Z+1, r11	; 0x01
     488:	a0 82       	st	Z, r10
     48a:	fa e0       	ldi	r31, 0x0A	; 10
     48c:	cf 0e       	add	r12, r31
     48e:	d1 1c       	adc	r13, r1
     490:	fb 01       	movw	r30, r22
     492:	d1 82       	std	Z+1, r13	; 0x01
     494:	c0 82       	st	Z, r12

	// if dist is faar and steering is right then speed is slow
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     496:	48 5f       	subi	r20, 0xF8	; 248
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	fc 01       	movw	r30, r24
     49c:	51 83       	std	Z+1, r21	; 0x01
     49e:	40 83       	st	Z, r20
     4a0:	24 5d       	subi	r18, 0xD4	; 212
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	fa 01       	movw	r30, r20
     4a6:	33 83       	std	Z+3, r19	; 0x03
     4a8:	22 83       	std	Z+2, r18	; 0x02
     4aa:	f9 01       	movw	r30, r18
     4ac:	13 82       	std	Z+3, r1	; 0x03
     4ae:	12 82       	std	Z+2, r1	; 0x02
     4b0:	64 5f       	subi	r22, 0xF4	; 244
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	fc 01       	movw	r30, r24
     4b6:	73 83       	std	Z+3, r23	; 0x03
     4b8:	62 83       	std	Z+2, r22	; 0x02
     4ba:	fb 01       	movw	r30, r22
     4bc:	13 82       	std	Z+3, r1	; 0x03
     4be:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &low.value;
     4c0:	fa e0       	ldi	r31, 0x0A	; 10
     4c2:	4f 0e       	add	r4, r31
     4c4:	51 1c       	adc	r5, r1
     4c6:	fa 01       	movw	r30, r20
     4c8:	51 82       	std	Z+1, r5	; 0x01
     4ca:	40 82       	st	Z, r4
     4cc:	88 5c       	subi	r24, 0xC8	; 200
     4ce:	91 09       	sbc	r25, r1
     4d0:	f9 01       	movw	r30, r18
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	80 83       	st	Z, r24
     4d6:	fb 01       	movw	r30, r22
     4d8:	d1 82       	std	Z+1, r13	; 0x01
     4da:	c0 82       	st	Z, r12

	// if dist is faar and steering is left then speed is slow
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     4dc:	44 5f       	subi	r20, 0xF4	; 244
     4de:	5f 4f       	sbci	r21, 0xFF	; 255
     4e0:	11 96       	adiw	r26, 0x01	; 1
     4e2:	5c 93       	st	X, r21
     4e4:	4e 93       	st	-X, r20
     4e6:	24 5f       	subi	r18, 0xF4	; 244
     4e8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ea:	fa 01       	movw	r30, r20
     4ec:	33 83       	std	Z+3, r19	; 0x03
     4ee:	22 83       	std	Z+2, r18	; 0x02
     4f0:	f9 01       	movw	r30, r18
     4f2:	13 82       	std	Z+3, r1	; 0x03
     4f4:	12 82       	std	Z+2, r1	; 0x02
     4f6:	82 50       	subi	r24, 0x02	; 2
     4f8:	9f 4f       	sbci	r25, 0xFF	; 255
     4fa:	13 96       	adiw	r26, 0x03	; 3
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	12 97       	sbiw	r26, 0x02	; 2
     502:	fc 01       	movw	r30, r24
     504:	13 82       	std	Z+3, r1	; 0x03
     506:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &low.value;
     508:	fa 01       	movw	r30, r20
     50a:	51 82       	std	Z+1, r5	; 0x01
     50c:	40 82       	st	Z, r4
     50e:	fa e0       	ldi	r31, 0x0A	; 10
     510:	2f 0e       	add	r2, r31
     512:	31 1c       	adc	r3, r1
     514:	f9 01       	movw	r30, r18
     516:	31 82       	std	Z+1, r3	; 0x01
     518:	20 82       	st	Z, r2
     51a:	fc 01       	movw	r30, r24
     51c:	d1 82       	std	Z+1, r13	; 0x01
     51e:	c0 82       	st	Z, r12

	// if dist is faar and steering is straight then speed is high
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     520:	28 5f       	subi	r18, 0xF8	; 248
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	f7 01       	movw	r30, r14
     526:	31 83       	std	Z+1, r19	; 0x01
     528:	20 83       	st	Z, r18
     52a:	08 96       	adiw	r24, 0x08	; 8
     52c:	f9 01       	movw	r30, r18
     52e:	93 83       	std	Z+3, r25	; 0x03
     530:	82 83       	std	Z+2, r24	; 0x02
     532:	fc 01       	movw	r30, r24
     534:	13 82       	std	Z+3, r1	; 0x03
     536:	12 82       	std	Z+2, r1	; 0x02
     538:	dc 96       	adiw	r26, 0x3c	; 60
     53a:	f7 01       	movw	r30, r14
     53c:	b3 83       	std	Z+3, r27	; 0x03
     53e:	a2 83       	std	Z+2, r26	; 0x02
     540:	13 96       	adiw	r26, 0x03	; 3
     542:	1c 92       	st	X, r1
     544:	1e 92       	st	-X, r1
     546:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &straight.value; then5.value = &high.value;
     548:	f9 01       	movw	r30, r18
     54a:	51 82       	std	Z+1, r5	; 0x01
     54c:	40 82       	st	Z, r4
     54e:	27 e4       	ldi	r18, 0x47	; 71
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	2c 0f       	add	r18, r28
     554:	3d 1f       	adc	r19, r29
     556:	26 5f       	subi	r18, 0xF6	; 246
     558:	3f 4f       	sbci	r19, 0xFF	; 255
     55a:	fc 01       	movw	r30, r24
     55c:	31 83       	std	Z+1, r19	; 0x01
     55e:	20 83       	st	Z, r18
     560:	81 ee       	ldi	r24, 0xE1	; 225
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	8c 0f       	add	r24, r28
     566:	9d 1f       	adc	r25, r29
     568:	0a 96       	adiw	r24, 0x0a	; 10
     56a:	8d 93       	st	X+, r24
     56c:	9c 93       	st	X, r25


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     56e:	dc d3       	rcall	.+1976   	; 0xd28 <fuzzification>
	rule_evaluation();
     570:	02 d4       	rcall	.+2052   	; 0xd76 <rule_evaluation>
	defuzzification();
     572:	47 d4       	rcall	.+2190   	; 0xe02 <defuzzification>

	if (speed.value > MAXESC)
     574:	8b a5       	ldd	r24, Y+43	; 0x2b
     576:	9c a5       	ldd	r25, Y+44	; 0x2c
     578:	89 31       	cpi	r24, 0x19	; 25
     57a:	fb e0       	ldi	r31, 0x0B	; 11
     57c:	9f 07       	cpc	r25, r31
     57e:	2c f0       	brlt	.+10     	; 0x58a <FLC_speed+0x446>
	{
		setESC(MAXESC);
     580:	88 e1       	ldi	r24, 0x18	; 24
     582:	9b e0       	ldi	r25, 0x0B	; 11
     584:	0e 94 ce 0b 	call	0x179c	; 0x179c <setESC>
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <FLC_speed+0x45c>
	}
	else if (speed.value < NEUTRAL)
     58a:	8d 3c       	cpi	r24, 0xCD	; 205
     58c:	2a e0       	ldi	r18, 0x0A	; 10
     58e:	92 07       	cpc	r25, r18
     590:	2c f4       	brge	.+10     	; 0x59c <FLC_speed+0x458>
	{
		setESC(NEUTRAL);
     592:	8d ec       	ldi	r24, 0xCD	; 205
     594:	9a e0       	ldi	r25, 0x0A	; 10
     596:	0e 94 ce 0b 	call	0x179c	; 0x179c <setESC>
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <FLC_speed+0x45c>
	}
	else
	{
		setESC(speed.value);
     59c:	0e 94 ce 0b 	call	0x179c	; 0x179c <setESC>
	}
}
     5a0:	c8 5b       	subi	r28, 0xB8	; 184
     5a2:	de 4f       	sbci	r29, 0xFE	; 254
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	5f 90       	pop	r5
     5cc:	4f 90       	pop	r4
     5ce:	3f 90       	pop	r3
     5d0:	2f 90       	pop	r2
     5d2:	08 95       	ret

000005d4 <doFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void doFuzzy(int c, int v)
{
     5d4:	2f 92       	push	r2
     5d6:	3f 92       	push	r3
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	c4 5c       	subi	r28, 0xC4	; 196
     5fe:	d1 40       	sbci	r29, 0x01	; 1
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	2c 01       	movw	r4, r24
     60c:	6b 01       	movw	r12, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     60e:	88 e0       	ldi	r24, 0x08	; 8
     610:	e5 e5       	ldi	r30, 0x55	; 85
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	de 01       	movw	r26, r28
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	8a 95       	dec	r24
     61e:	e1 f7       	brne	.-8      	; 0x618 <doFuzzy+0x44>
	
	struct mf_type rightSide;
	MATLAB_MF(&rightSide, "rightSide", 99, 100, 120, 135); // Min_value = 100
     620:	3e 01       	movw	r6, r28
     622:	21 e1       	ldi	r18, 0x11	; 17
     624:	62 0e       	add	r6, r18
     626:	71 1c       	adc	r7, r1
     628:	0f 2e       	mov	r0, r31
     62a:	f7 e8       	ldi	r31, 0x87	; 135
     62c:	ef 2e       	mov	r14, r31
     62e:	f1 2c       	mov	r15, r1
     630:	f0 2d       	mov	r31, r0
     632:	08 e7       	ldi	r16, 0x78	; 120
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	24 e6       	ldi	r18, 0x64	; 100
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	43 e6       	ldi	r20, 0x63	; 99
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6d e5       	ldi	r22, 0x5D	; 93
     640:	71 e0       	ldi	r23, 0x01	; 1
     642:	c3 01       	movw	r24, r6
     644:	9c d4       	rcall	.+2360   	; 0xf7e <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 125, 145, 155, 175);
     646:	4e 01       	movw	r8, r28
     648:	47 e2       	ldi	r20, 0x27	; 39
     64a:	84 0e       	add	r8, r20
     64c:	91 1c       	adc	r9, r1
     64e:	0f 2e       	mov	r0, r31
     650:	ff ea       	ldi	r31, 0xAF	; 175
     652:	ef 2e       	mov	r14, r31
     654:	f1 2c       	mov	r15, r1
     656:	f0 2d       	mov	r31, r0
     658:	0b e9       	ldi	r16, 0x9B	; 155
     65a:	10 e0       	ldi	r17, 0x00	; 0
     65c:	21 e9       	ldi	r18, 0x91	; 145
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	4d e7       	ldi	r20, 0x7D	; 125
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	67 e6       	ldi	r22, 0x67	; 103
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	c4 01       	movw	r24, r8
     66a:	89 d4       	rcall	.+2322   	; 0xf7e <MATLAB_MF>
	struct mf_type leftSide;
	MATLAB_MF(&leftSide, "leftSide", 175, 186, 199, 200);  // Max_value = 199
     66c:	5e 01       	movw	r10, r28
     66e:	5d e3       	ldi	r21, 0x3D	; 61
     670:	a5 0e       	add	r10, r21
     672:	b1 1c       	adc	r11, r1
     674:	0f 2e       	mov	r0, r31
     676:	f8 ec       	ldi	r31, 0xC8	; 200
     678:	ef 2e       	mov	r14, r31
     67a:	f1 2c       	mov	r15, r1
     67c:	f0 2d       	mov	r31, r0
     67e:	07 ec       	ldi	r16, 0xC7	; 199
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	2a eb       	ldi	r18, 0xBA	; 186
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	4f ea       	ldi	r20, 0xAF	; 175
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	6e e6       	ldi	r22, 0x6E	; 110
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	c5 01       	movw	r24, r10
     690:	76 d4       	rcall	.+2284   	; 0xf7e <MATLAB_MF>
	
	delta_C.membership_functions = &rightSide;
     692:	7e 86       	std	Y+14, r7	; 0x0e
     694:	6d 86       	std	Y+13, r6	; 0x0d
	rightSide.next = &centre;
     696:	9e a2       	std	Y+38, r9	; 0x26
     698:	8d a2       	std	Y+37, r8	; 0x25
	centre.next = &leftSide;
     69a:	bc ae       	std	Y+60, r11	; 0x3c
     69c:	ab ae       	std	Y+59, r10	; 0x3b
	leftSide.next = NULL;
     69e:	63 96       	adiw	r28, 0x13	; 19
     6a0:	1f ae       	std	Y+63, r1	; 0x3f
     6a2:	1e ae       	std	Y+62, r1	; 0x3e
     6a4:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
     6a6:	84 e6       	ldi	r24, 0x64	; 100
     6a8:	48 16       	cp	r4, r24
     6aa:	51 04       	cpc	r5, r1
     6ac:	2c f4       	brge	.+10     	; 0x6b8 <doFuzzy+0xe4>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
     6ae:	84 e6       	ldi	r24, 0x64	; 100
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9c 87       	std	Y+12, r25	; 0x0c
     6b4:	8b 87       	std	Y+11, r24	; 0x0b
     6b6:	0b c0       	rjmp	.+22     	; 0x6ce <doFuzzy+0xfa>
	}
	else if(c>199)			// if sensor value is bigger than delta_C's input set's upper limit
     6b8:	a8 ec       	ldi	r26, 0xC8	; 200
     6ba:	4a 16       	cp	r4, r26
     6bc:	51 04       	cpc	r5, r1
     6be:	2c f0       	brlt	.+10     	; 0x6ca <doFuzzy+0xf6>
	{
		delta_C.value = 199;  // force input value to lowest point in delta_C's input set
     6c0:	87 ec       	ldi	r24, 0xC7	; 199
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9c 87       	std	Y+12, r25	; 0x0c
     6c6:	8b 87       	std	Y+11, r24	; 0x0b
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <doFuzzy+0xfa>
	}
	else
	{
		delta_C.value = c;
     6ca:	5c 86       	std	Y+12, r5	; 0x0c
     6cc:	4b 86       	std	Y+11, r4	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     6ce:	88 e0       	ldi	r24, 0x08	; 8
     6d0:	e7 e7       	ldi	r30, 0x77	; 119
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	de 01       	movw	r26, r28
     6d6:	ad 5a       	subi	r26, 0xAD	; 173
     6d8:	bf 4f       	sbci	r27, 0xFF	; 255
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	8a 95       	dec	r24
     6e0:	e1 f7       	brne	.-8      	; 0x6da <doFuzzy+0x106>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", 0, 1, 20, 35); // min V is 1
     6e2:	3e 01       	movw	r6, r28
     6e4:	b3 e6       	ldi	r27, 0x63	; 99
     6e6:	6b 0e       	add	r6, r27
     6e8:	71 1c       	adc	r7, r1
     6ea:	0f 2e       	mov	r0, r31
     6ec:	f3 e2       	ldi	r31, 0x23	; 35
     6ee:	ef 2e       	mov	r14, r31
     6f0:	f1 2c       	mov	r15, r1
     6f2:	f0 2d       	mov	r31, r0
     6f4:	04 e1       	ldi	r16, 0x14	; 20
     6f6:	10 e0       	ldi	r17, 0x00	; 0
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	6f e7       	ldi	r22, 0x7F	; 127
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	c3 01       	movw	r24, r6
     706:	3b d4       	rcall	.+2166   	; 0xf7e <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 15, 35, 40, 55);
     708:	4e 01       	movw	r8, r28
     70a:	e9 e7       	ldi	r30, 0x79	; 121
     70c:	8e 0e       	add	r8, r30
     70e:	91 1c       	adc	r9, r1
     710:	0f 2e       	mov	r0, r31
     712:	f7 e3       	ldi	r31, 0x37	; 55
     714:	ef 2e       	mov	r14, r31
     716:	f1 2c       	mov	r15, r1
     718:	f0 2d       	mov	r31, r0
     71a:	08 e2       	ldi	r16, 0x28	; 40
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	23 e2       	ldi	r18, 0x23	; 35
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4f e0       	ldi	r20, 0x0F	; 15
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	67 e8       	ldi	r22, 0x87	; 135
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	c4 01       	movw	r24, r8
     72c:	28 d4       	rcall	.+2128   	; 0xf7e <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 35, 50, 74 , 75); // max V is 74
     72e:	5e 01       	movw	r10, r28
     730:	ff e8       	ldi	r31, 0x8F	; 143
     732:	af 0e       	add	r10, r31
     734:	b1 1c       	adc	r11, r1
     736:	0f 2e       	mov	r0, r31
     738:	fb e4       	ldi	r31, 0x4B	; 75
     73a:	ef 2e       	mov	r14, r31
     73c:	f1 2c       	mov	r15, r1
     73e:	f0 2d       	mov	r31, r0
     740:	0a e4       	ldi	r16, 0x4A	; 74
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	22 e3       	ldi	r18, 0x32	; 50
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	43 e2       	ldi	r20, 0x23	; 35
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	6e e8       	ldi	r22, 0x8E	; 142
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	c5 01       	movw	r24, r10
     752:	15 d4       	rcall	.+2090   	; 0xf7e <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     754:	a1 96       	adiw	r28, 0x21	; 33
     756:	7f ae       	std	Y+63, r7	; 0x3f
     758:	6e ae       	std	Y+62, r6	; 0x3e
     75a:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     75c:	d3 01       	movw	r26, r6
     75e:	55 96       	adiw	r26, 0x15	; 21
     760:	9c 92       	st	X, r9
     762:	8e 92       	st	-X, r8
     764:	54 97       	sbiw	r26, 0x14	; 20
	inNyll.next = &inPlus;
     766:	f4 01       	movw	r30, r8
     768:	b5 8a       	std	Z+21, r11	; 0x15
     76a:	a4 8a       	std	Z+20, r10	; 0x14
	inPlus.next = NULL;
     76c:	d5 01       	movw	r26, r10
     76e:	55 96       	adiw	r26, 0x15	; 21
     770:	1c 92       	st	X, r1
     772:	1e 92       	st	-X, r1
     774:	54 97       	sbiw	r26, 0x14	; 20
	
	// set V's input value to V´s value
	if(v<1)				// if sensor value is smaller than error's input set lower limit
     776:	1c 14       	cp	r1, r12
     778:	1d 04       	cpc	r1, r13
     77a:	3c f0       	brlt	.+14     	; 0x78a <doFuzzy+0x1b6>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	6f 96       	adiw	r28, 0x1f	; 31
     782:	9f af       	std	Y+63, r25	; 0x3f
     784:	8e af       	std	Y+62, r24	; 0x3e
     786:	6f 97       	sbiw	r28, 0x1f	; 31
     788:	0f c0       	rjmp	.+30     	; 0x7a8 <doFuzzy+0x1d4>
	}
	else if(v>74)			// if sensor value is bigger than error's input set's upper limit
     78a:	bb e4       	ldi	r27, 0x4B	; 75
     78c:	cb 16       	cp	r12, r27
     78e:	d1 04       	cpc	r13, r1
     790:	3c f0       	brlt	.+14     	; 0x7a0 <doFuzzy+0x1cc>
	{
		delta_V.value = 74;  // force input value to lowest point in error's input set
     792:	8a e4       	ldi	r24, 0x4A	; 74
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	6f 96       	adiw	r28, 0x1f	; 31
     798:	9f af       	std	Y+63, r25	; 0x3f
     79a:	8e af       	std	Y+62, r24	; 0x3e
     79c:	6f 97       	sbiw	r28, 0x1f	; 31
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <doFuzzy+0x1d4>
	}
	else
	{
		delta_V.value = v;
     7a0:	6f 96       	adiw	r28, 0x1f	; 31
     7a2:	df ae       	std	Y+63, r13	; 0x3f
     7a4:	ce ae       	std	Y+62, r12	; 0x3e
     7a6:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     7a8:	1e 01       	movw	r2, r28
     7aa:	e5 ea       	ldi	r30, 0xA5	; 165
     7ac:	2e 0e       	add	r2, r30
     7ae:	31 1c       	adc	r3, r1
     7b0:	89 e0       	ldi	r24, 0x09	; 9
     7b2:	ed e0       	ldi	r30, 0x0D	; 13
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	d1 01       	movw	r26, r2
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	8a 95       	dec	r24
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <doFuzzy+0x1e4>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2359, 2360, 2360, 2460);
     7c0:	2e 01       	movw	r4, r28
     7c2:	f5 eb       	ldi	r31, 0xB5	; 181
     7c4:	4f 0e       	add	r4, r31
     7c6:	51 1c       	adc	r5, r1
     7c8:	0f 2e       	mov	r0, r31
     7ca:	fc e9       	ldi	r31, 0x9C	; 156
     7cc:	ef 2e       	mov	r14, r31
     7ce:	f9 e0       	ldi	r31, 0x09	; 9
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	08 e3       	ldi	r16, 0x38	; 56
     7d6:	19 e0       	ldi	r17, 0x09	; 9
     7d8:	28 e3       	ldi	r18, 0x38	; 56
     7da:	39 e0       	ldi	r19, 0x09	; 9
     7dc:	47 e3       	ldi	r20, 0x37	; 55
     7de:	59 e0       	ldi	r21, 0x09	; 9
     7e0:	65 e9       	ldi	r22, 0x95	; 149
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	c2 01       	movw	r24, r4
     7e6:	cb d3       	rcall	.+1942   	; 0xf7e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2400, 2460, 2460, 2560);
     7e8:	3e 01       	movw	r6, r28
     7ea:	2b ec       	ldi	r18, 0xCB	; 203
     7ec:	62 0e       	add	r6, r18
     7ee:	71 1c       	adc	r7, r1
     7f0:	0f 2e       	mov	r0, r31
     7f2:	e1 2c       	mov	r14, r1
     7f4:	fa e0       	ldi	r31, 0x0A	; 10
     7f6:	ff 2e       	mov	r15, r31
     7f8:	f0 2d       	mov	r31, r0
     7fa:	0c e9       	ldi	r16, 0x9C	; 156
     7fc:	19 e0       	ldi	r17, 0x09	; 9
     7fe:	2c e9       	ldi	r18, 0x9C	; 156
     800:	39 e0       	ldi	r19, 0x09	; 9
     802:	40 e6       	ldi	r20, 0x60	; 96
     804:	59 e0       	ldi	r21, 0x09	; 9
     806:	6b e2       	ldi	r22, 0x2B	; 43
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	c3 01       	movw	r24, r6
     80c:	b8 d3       	rcall	.+1904   	; 0xf7e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2520, 2660, 2660, 2720);
     80e:	6e 01       	movw	r12, r28
     810:	41 ee       	ldi	r20, 0xE1	; 225
     812:	c4 0e       	add	r12, r20
     814:	d1 1c       	adc	r13, r1
     816:	0f 2e       	mov	r0, r31
     818:	f0 ea       	ldi	r31, 0xA0	; 160
     81a:	ef 2e       	mov	r14, r31
     81c:	fa e0       	ldi	r31, 0x0A	; 10
     81e:	ff 2e       	mov	r15, r31
     820:	f0 2d       	mov	r31, r0
     822:	04 e6       	ldi	r16, 0x64	; 100
     824:	1a e0       	ldi	r17, 0x0A	; 10
     826:	24 e6       	ldi	r18, 0x64	; 100
     828:	3a e0       	ldi	r19, 0x0A	; 10
     82a:	48 ed       	ldi	r20, 0xD8	; 216
     82c:	59 e0       	ldi	r21, 0x09	; 9
     82e:	62 e2       	ldi	r22, 0x22	; 34
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	c6 01       	movw	r24, r12
     834:	a4 d3       	rcall	.+1864   	; 0xf7e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2700, 2800, 2800, 2900);
     836:	4e 01       	movw	r8, r28
     838:	57 ef       	ldi	r21, 0xF7	; 247
     83a:	85 0e       	add	r8, r21
     83c:	91 1c       	adc	r9, r1
     83e:	0f 2e       	mov	r0, r31
     840:	f4 e5       	ldi	r31, 0x54	; 84
     842:	ef 2e       	mov	r14, r31
     844:	fb e0       	ldi	r31, 0x0B	; 11
     846:	ff 2e       	mov	r15, r31
     848:	f0 2d       	mov	r31, r0
     84a:	00 ef       	ldi	r16, 0xF0	; 240
     84c:	1a e0       	ldi	r17, 0x0A	; 10
     84e:	20 ef       	ldi	r18, 0xF0	; 240
     850:	3a e0       	ldi	r19, 0x0A	; 10
     852:	4c e8       	ldi	r20, 0x8C	; 140
     854:	5a e0       	ldi	r21, 0x0A	; 10
     856:	6c e1       	ldi	r22, 0x1C	; 28
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	c4 01       	movw	r24, r8
     85c:	90 d3       	rcall	.+1824   	; 0xf7e <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2860, 2960, 2960, 2961);
     85e:	5e 01       	movw	r10, r28
     860:	83 ef       	ldi	r24, 0xF3	; 243
     862:	a8 1a       	sub	r10, r24
     864:	8e ef       	ldi	r24, 0xFE	; 254
     866:	b8 0a       	sbc	r11, r24
     868:	0f 2e       	mov	r0, r31
     86a:	f1 e9       	ldi	r31, 0x91	; 145
     86c:	ef 2e       	mov	r14, r31
     86e:	fb e0       	ldi	r31, 0x0B	; 11
     870:	ff 2e       	mov	r15, r31
     872:	f0 2d       	mov	r31, r0
     874:	00 e9       	ldi	r16, 0x90	; 144
     876:	1b e0       	ldi	r17, 0x0B	; 11
     878:	20 e9       	ldi	r18, 0x90	; 144
     87a:	3b e0       	ldi	r19, 0x0B	; 11
     87c:	4c e2       	ldi	r20, 0x2C	; 44
     87e:	5b e0       	ldi	r21, 0x0B	; 11
     880:	6f e9       	ldi	r22, 0x9F	; 159
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	c5 01       	movw	r24, r10
     886:	7b d3       	rcall	.+1782   	; 0xf7e <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     888:	d1 01       	movw	r26, r2
     88a:	1d 96       	adiw	r26, 0x0d	; 13
     88c:	bc 92       	st	X, r11
     88e:	ae 92       	st	-X, r10
     890:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
     892:	f5 01       	movw	r30, r10
     894:	95 8a       	std	Z+21, r9	; 0x15
     896:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &straight;
     898:	d4 01       	movw	r26, r8
     89a:	55 96       	adiw	r26, 0x15	; 21
     89c:	dc 92       	st	X, r13
     89e:	ce 92       	st	-X, r12
     8a0:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
     8a2:	f6 01       	movw	r30, r12
     8a4:	75 8a       	std	Z+21, r7	; 0x15
     8a6:	64 8a       	std	Z+20, r6	; 0x14
	left.next = &sharpLeft;
     8a8:	d3 01       	movw	r26, r6
     8aa:	55 96       	adiw	r26, 0x15	; 21
     8ac:	5c 92       	st	X, r5
     8ae:	4e 92       	st	-X, r4
     8b0:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
     8b2:	f2 01       	movw	r30, r4
     8b4:	15 8a       	std	Z+21, r1	; 0x15
     8b6:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	90 93 e5 02 	sts	0x02E5, r25
     8c0:	80 93 e4 02 	sts	0x02E4, r24
	delta_C.next = &delta_V;
     8c4:	e2 56       	subi	r30, 0x62	; 98
     8c6:	f1 09       	sbc	r31, r1
     8c8:	f8 8b       	std	Y+16, r31	; 0x10
     8ca:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     8cc:	17 86       	std	Z+15, r1	; 0x0f
     8ce:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     8d0:	30 92 e3 02 	sts	0x02E3, r3
     8d4:	20 92 e2 02 	sts	0x02E2, r2
	steering.next = NULL;
     8d8:	d1 01       	movw	r26, r2
     8da:	1f 96       	adiw	r26, 0x0f	; 15
     8dc:	1c 92       	st	X, r1
     8de:	1e 92       	st	-X, r1
     8e0:	1e 97       	sbiw	r26, 0x0e	; 14
	
	
	
	//RULE 9 "if C is centre AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     8e2:	a2 58       	subi	r26, 0x82	; 130
     8e4:	bf 4f       	sbci	r27, 0xFF	; 255
     8e6:	73 01       	movw	r14, r6
     8e8:	ea e0       	ldi	r30, 0x0A	; 10
     8ea:	ee 0e       	add	r14, r30
     8ec:	f1 1c       	adc	r15, r1
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	fc 92       	st	X, r15
     8f2:	ee 92       	st	-X, r14
	then9.next = NULL;
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	1c 92       	st	X, r1
     8f8:	1e 92       	st	-X, r1
     8fa:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     8fc:	9e 01       	movw	r18, r28
     8fe:	29 5d       	subi	r18, 0xD9	; 217
     900:	3e 4f       	sbci	r19, 0xFE	; 254
     902:	3e 01       	movw	r6, r28
     904:	f9 e9       	ldi	r31, 0x99	; 153
     906:	6f 0e       	add	r6, r31
     908:	71 1c       	adc	r7, r1
     90a:	f9 01       	movw	r30, r18
     90c:	71 82       	std	Z+1, r7	; 0x01
     90e:	60 82       	st	Z, r6
	if92.next = NULL;
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if91;
	if91.value = &centre.value;
     914:	86 5d       	subi	r24, 0xD6	; 214
     916:	9e 4f       	sbci	r25, 0xFE	; 254
     918:	8e 01       	movw	r16, r28
     91a:	0f 5c       	subi	r16, 0xCF	; 207
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	fc 01       	movw	r30, r24
     920:	11 83       	std	Z+1, r17	; 0x01
     922:	00 83       	st	Z, r16
	if91.next = &if92;
     924:	33 83       	std	Z+3, r19	; 0x03
     926:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     928:	34 96       	adiw	r30, 0x04	; 4
     92a:	91 83       	std	Z+1, r25	; 0x01
     92c:	80 83       	st	Z, r24
	rule9.then_side = &then9;
     92e:	b3 83       	std	Z+3, r27	; 0x03
     930:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = NULL;
     932:	15 82       	std	Z+5, r1	; 0x05
     934:	14 82       	std	Z+4, r1	; 0x04

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
     936:	22 5f       	subi	r18, 0xF2	; 242
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	4a e0       	ldi	r20, 0x0A	; 10
     93c:	84 0e       	add	r8, r20
     93e:	91 1c       	adc	r9, r1
     940:	d9 01       	movw	r26, r18
     942:	11 96       	adiw	r26, 0x01	; 1
     944:	9c 92       	st	X, r9
     946:	8e 92       	st	-X, r8
	then8.next = NULL;
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	1c 92       	st	X, r1
     94c:	1e 92       	st	-X, r1
     94e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if82;
	if82.value = &inPlus.value;
     950:	be 01       	movw	r22, r28
     952:	67 5c       	subi	r22, 0xC7	; 199
     954:	7e 4f       	sbci	r23, 0xFE	; 254
     956:	db 01       	movw	r26, r22
     958:	11 96       	adiw	r26, 0x01	; 1
     95a:	7c 92       	st	X, r7
     95c:	6e 92       	st	-X, r6
	if82.next = NULL;
     95e:	13 96       	adiw	r26, 0x03	; 3
     960:	1c 92       	st	X, r1
     962:	1e 92       	st	-X, r1
     964:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if81;
	if81.value = &leftSide.value;
     966:	ae 01       	movw	r20, r28
     968:	43 5c       	subi	r20, 0xC3	; 195
     96a:	5e 4f       	sbci	r21, 0xFE	; 254
     96c:	84 5e       	subi	r24, 0xE4	; 228
     96e:	91 09       	sbc	r25, r1
     970:	da 01       	movw	r26, r20
     972:	11 96       	adiw	r26, 0x01	; 1
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
	if81.next = &if82;
     978:	13 96       	adiw	r26, 0x03	; 3
     97a:	7c 93       	st	X, r23
     97c:	6e 93       	st	-X, r22
     97e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule8;
	rule8.if_side = &if81;
     980:	14 96       	adiw	r26, 0x04	; 4
     982:	11 96       	adiw	r26, 0x01	; 1
     984:	5c 93       	st	X, r21
     986:	4e 93       	st	-X, r20
	rule8.then_side = &then8;
     988:	13 96       	adiw	r26, 0x03	; 3
     98a:	3c 93       	st	X, r19
     98c:	2e 93       	st	-X, r18
     98e:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     990:	15 96       	adiw	r26, 0x05	; 5
     992:	fc 93       	st	X, r31
     994:	ee 93       	st	-X, r30
     996:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
     998:	46 5f       	subi	r20, 0xF6	; 246
     99a:	5f 4f       	sbci	r21, 0xFF	; 255
     99c:	ea e0       	ldi	r30, 0x0A	; 10
     99e:	ae 0e       	add	r10, r30
     9a0:	b1 1c       	adc	r11, r1
     9a2:	fa 01       	movw	r30, r20
     9a4:	b1 82       	std	Z+1, r11	; 0x01
     9a6:	a0 82       	st	Z, r10
	then7.next = NULL;
     9a8:	13 82       	std	Z+3, r1	; 0x03
     9aa:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if72;
	if72.value = &inNyll.value;
     9ac:	5e 01       	movw	r10, r28
     9ae:	f5 eb       	ldi	r31, 0xB5	; 181
     9b0:	af 1a       	sub	r10, r31
     9b2:	fe ef       	ldi	r31, 0xFE	; 254
     9b4:	bf 0a       	sbc	r11, r31
     9b6:	22 5b       	subi	r18, 0xB2	; 178
     9b8:	31 09       	sbc	r19, r1
     9ba:	f5 01       	movw	r30, r10
     9bc:	31 83       	std	Z+1, r19	; 0x01
     9be:	20 83       	st	Z, r18
	if72.next = NULL;
     9c0:	13 82       	std	Z+3, r1	; 0x03
     9c2:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if71;
	if71.value = &leftSide.value;
     9c4:	6a 5e       	subi	r22, 0xEA	; 234
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	fb 01       	movw	r30, r22
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
	if71.next = &if72;
     9ce:	b3 82       	std	Z+3, r11	; 0x03
     9d0:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule7;
	rule7.if_side = &if71;
     9d2:	34 96       	adiw	r30, 0x04	; 4
     9d4:	71 83       	std	Z+1, r23	; 0x01
     9d6:	60 83       	st	Z, r22
	rule7.then_side = &then7;
     9d8:	53 83       	std	Z+3, r21	; 0x03
     9da:	42 83       	std	Z+2, r20	; 0x02
	rule7.next = &rule8;
     9dc:	b5 83       	std	Z+5, r27	; 0x05
     9de:	a4 83       	std	Z+4, r26	; 0x04
	
	
	//RULE 6 "if C is positive AND V is minus then servo is straight"
	struct rule_element_type then6;
	then6.value = &straight.value;
     9e0:	4a e0       	ldi	r20, 0x0A	; 10
     9e2:	c4 0e       	add	r12, r20
     9e4:	d1 1c       	adc	r13, r1
     9e6:	c7 5a       	subi	r28, 0xA7	; 167
     9e8:	de 4f       	sbci	r29, 0xFE	; 254
     9ea:	d9 82       	std	Y+1, r13	; 0x01
     9ec:	c8 82       	st	Y, r12
     9ee:	c9 55       	subi	r28, 0x59	; 89
     9f0:	d1 40       	sbci	r29, 0x01	; 1
	then6.next = NULL;
     9f2:	c5 5a       	subi	r28, 0xA5	; 165
     9f4:	de 4f       	sbci	r29, 0xFE	; 254
     9f6:	19 82       	std	Y+1, r1	; 0x01
     9f8:	18 82       	st	Y, r1
     9fa:	cb 55       	subi	r28, 0x5B	; 91
     9fc:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if62;
	if62.value = &inMinus.value;
     9fe:	62 5f       	subi	r22, 0xF2	; 242
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	5e 01       	movw	r10, r28
     a04:	5d e6       	ldi	r21, 0x6D	; 109
     a06:	a5 0e       	add	r10, r21
     a08:	b1 1c       	adc	r11, r1
     a0a:	db 01       	movw	r26, r22
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	bc 92       	st	X, r11
     a10:	ae 92       	st	-X, r10
	if62.next = NULL;
     a12:	13 96       	adiw	r26, 0x03	; 3
     a14:	1c 92       	st	X, r1
     a16:	1e 92       	st	-X, r1
     a18:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &leftSide.value;
     a1a:	ae 01       	movw	r20, r28
     a1c:	4f 59       	subi	r20, 0x9F	; 159
     a1e:	5e 4f       	sbci	r21, 0xFE	; 254
     a20:	da 01       	movw	r26, r20
     a22:	11 96       	adiw	r26, 0x01	; 1
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
	if61.next = &if62;
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	7c 93       	st	X, r23
     a2c:	6e 93       	st	-X, r22
     a2e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule6;
	rule6.if_side = &if61;
     a30:	82 5e       	subi	r24, 0xE2	; 226
     a32:	9e 4f       	sbci	r25, 0xFE	; 254
     a34:	dc 01       	movw	r26, r24
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	5c 93       	st	X, r21
     a3a:	4e 93       	st	-X, r20
	rule6.then_side = &then6;
     a3c:	49 e5       	ldi	r20, 0x59	; 89
     a3e:	51 e0       	ldi	r21, 0x01	; 1
     a40:	4c 0f       	add	r20, r28
     a42:	5d 1f       	adc	r21, r29
     a44:	13 96       	adiw	r26, 0x03	; 3
     a46:	5c 93       	st	X, r21
     a48:	4e 93       	st	-X, r20
     a4a:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     a4c:	15 96       	adiw	r26, 0x05	; 5
     a4e:	fc 93       	st	X, r31
     a50:	ee 93       	st	-X, r30
     a52:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	5a e0       	ldi	r21, 0x0A	; 10
     a58:	45 0e       	add	r4, r21
     a5a:	51 1c       	adc	r5, r1
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	5c 92       	st	X, r5
     a60:	4e 92       	st	-X, r4
	then5.next = NULL;
     a62:	13 96       	adiw	r26, 0x03	; 3
     a64:	1c 92       	st	X, r1
     a66:	1e 92       	st	-X, r1
     a68:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
     a6a:	2e 01       	movw	r4, r28
     a6c:	e1 e9       	ldi	r30, 0x91	; 145
     a6e:	4e 1a       	sub	r4, r30
     a70:	ee ef       	ldi	r30, 0xFE	; 254
     a72:	5e 0a       	sbc	r5, r30
     a74:	f2 01       	movw	r30, r4
     a76:	31 83       	std	Z+1, r19	; 0x01
     a78:	20 83       	st	Z, r18
	if52.next = NULL;
     a7a:	13 82       	std	Z+3, r1	; 0x03
     a7c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &rightSide.value;
     a7e:	6a 5e       	subi	r22, 0xEA	; 234
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	ae 01       	movw	r20, r28
     a84:	45 5e       	subi	r20, 0xE5	; 229
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	fb 01       	movw	r30, r22
     a8a:	51 83       	std	Z+1, r21	; 0x01
     a8c:	40 83       	st	Z, r20
	if51.next = &if52;
     a8e:	53 82       	std	Z+3, r5	; 0x03
     a90:	42 82       	std	Z+2, r4	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     a92:	34 96       	adiw	r30, 0x04	; 4
     a94:	71 83       	std	Z+1, r23	; 0x01
     a96:	60 83       	st	Z, r22
	rule5.then_side = &then5;
     a98:	b3 83       	std	Z+3, r27	; 0x03
     a9a:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     a9c:	95 83       	std	Z+5, r25	; 0x05
     a9e:	84 83       	std	Z+4, r24	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
     aa0:	66 5f       	subi	r22, 0xF6	; 246
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	db 01       	movw	r26, r22
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	dc 92       	st	X, r13
     aaa:	ce 92       	st	-X, r12
	then4.next = NULL;
     aac:	13 96       	adiw	r26, 0x03	; 3
     aae:	1c 92       	st	X, r1
     ab0:	1e 92       	st	-X, r1
     ab2:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
     ab4:	4c 96       	adiw	r24, 0x1c	; 28
     ab6:	dc 01       	movw	r26, r24
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	3c 93       	st	X, r19
     abc:	2e 93       	st	-X, r18
	if42.next = NULL;
     abe:	13 96       	adiw	r26, 0x03	; 3
     ac0:	1c 92       	st	X, r1
     ac2:	1e 92       	st	-X, r1
     ac4:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &centre.value;
     ac6:	2e 5f       	subi	r18, 0xFE	; 254
     ac8:	3e 4f       	sbci	r19, 0xFE	; 254
     aca:	d9 01       	movw	r26, r18
     acc:	11 96       	adiw	r26, 0x01	; 1
     ace:	1c 93       	st	X, r17
     ad0:	0e 93       	st	-X, r16
	if41.next = &if42;
     ad2:	13 96       	adiw	r26, 0x03	; 3
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
     ad8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     ada:	08 96       	adiw	r24, 0x08	; 8
     adc:	dc 01       	movw	r26, r24
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	3c 93       	st	X, r19
     ae2:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	7c 93       	st	X, r23
     ae8:	6e 93       	st	-X, r22
     aea:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     aec:	15 96       	adiw	r26, 0x05	; 5
     aee:	fc 93       	st	X, r31
     af0:	ee 93       	st	-X, r30
     af2:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &straight.value;
     af4:	6e 5e       	subi	r22, 0xEE	; 238
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
     af8:	fb 01       	movw	r30, r22
     afa:	d1 82       	std	Z+1, r13	; 0x01
     afc:	c0 82       	st	Z, r12
	then3.next = NULL;
     afe:	13 82       	std	Z+3, r1	; 0x03
     b00:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inPlus.value;
     b02:	1a 96       	adiw	r26, 0x0a	; 10
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	7c 92       	st	X, r7
     b08:	6e 92       	st	-X, r6
	if32.next = NULL;
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	1c 92       	st	X, r1
     b0e:	1e 92       	st	-X, r1
     b10:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &rightSide.value;
     b12:	2e 5e       	subi	r18, 0xEE	; 238
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	f9 01       	movw	r30, r18
     b18:	51 83       	std	Z+1, r21	; 0x01
     b1a:	40 83       	st	Z, r20
	if31.next = &if32;
     b1c:	b3 83       	std	Z+3, r27	; 0x03
     b1e:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     b20:	18 96       	adiw	r26, 0x08	; 8
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	3c 93       	st	X, r19
     b26:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
     b28:	13 96       	adiw	r26, 0x03	; 3
     b2a:	7c 93       	st	X, r23
     b2c:	6e 93       	st	-X, r22
     b2e:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     b30:	15 96       	adiw	r26, 0x05	; 5
     b32:	9c 93       	st	X, r25
     b34:	8e 93       	st	-X, r24
     b36:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
     b38:	6e 5e       	subi	r22, 0xEE	; 238
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	fb 01       	movw	r30, r22
     b3e:	f1 82       	std	Z+1, r15	; 0x01
     b40:	e0 82       	st	Z, r14
	then2.next = NULL;
     b42:	13 82       	std	Z+3, r1	; 0x03
     b44:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
     b46:	4c 96       	adiw	r24, 0x1c	; 28
     b48:	fc 01       	movw	r30, r24
     b4a:	b1 82       	std	Z+1, r11	; 0x01
     b4c:	a0 82       	st	Z, r10
	if22.next = NULL;
     b4e:	13 82       	std	Z+3, r1	; 0x03
     b50:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &rightSide.value;
     b52:	2e 5e       	subi	r18, 0xEE	; 238
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	f9 01       	movw	r30, r18
     b58:	51 83       	std	Z+1, r21	; 0x01
     b5a:	40 83       	st	Z, r20
	if21.next = &if22;
     b5c:	93 83       	std	Z+3, r25	; 0x03
     b5e:	82 83       	std	Z+2, r24	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     b60:	08 96       	adiw	r24, 0x08	; 8
     b62:	fc 01       	movw	r30, r24
     b64:	31 83       	std	Z+1, r19	; 0x01
     b66:	20 83       	st	Z, r18
	rule2.then_side = &then2;
     b68:	73 83       	std	Z+3, r23	; 0x03
     b6a:	62 83       	std	Z+2, r22	; 0x02
	rule2.next = &rule3;
     b6c:	b5 83       	std	Z+5, r27	; 0x05
     b6e:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
     b70:	58 96       	adiw	r26, 0x18	; 24
     b72:	11 96       	adiw	r26, 0x01	; 1
     b74:	9c 92       	st	X, r9
     b76:	8e 92       	st	-X, r8
	then1.next = NULL;
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	1c 92       	st	X, r1
     b7c:	1e 92       	st	-X, r1
     b7e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &inMinus.value;
     b80:	44 56       	subi	r20, 0x64	; 100
     b82:	5e 4f       	sbci	r21, 0xFE	; 254
     b84:	fa 01       	movw	r30, r20
     b86:	b1 82       	std	Z+1, r11	; 0x01
     b88:	a0 82       	st	Z, r10
	if12.next = NULL;
     b8a:	13 82       	std	Z+3, r1	; 0x03
     b8c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &centre.value;
     b8e:	2e 5e       	subi	r18, 0xEE	; 238
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	f9 01       	movw	r30, r18
     b94:	11 83       	std	Z+1, r17	; 0x01
     b96:	00 83       	st	Z, r16
	if11.next = &if12;
     b98:	53 83       	std	Z+3, r21	; 0x03
     b9a:	42 83       	std	Z+2, r20	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     b9c:	34 96       	adiw	r30, 0x04	; 4
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
	rule1.then_side = &then1;
     ba2:	b3 83       	std	Z+3, r27	; 0x03
     ba4:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     ba6:	95 83       	std	Z+5, r25	; 0x05
     ba8:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
     baa:	f0 93 e7 02 	sts	0x02E7, r31
     bae:	e0 93 e6 02 	sts	0x02E6, r30
	
	
	// the methods performing the FLC
	fuzzification();
     bb2:	ba d0       	rcall	.+372    	; 0xd28 <fuzzification>
	rule_evaluation();
     bb4:	e0 d0       	rcall	.+448    	; 0xd76 <rule_evaluation>
	defuzzification();
     bb6:	25 d1       	rcall	.+586    	; 0xe02 <defuzzification>
	if (steering.value < MAXLEFT)
     bb8:	d1 01       	movw	r26, r2
     bba:	1a 96       	adiw	r26, 0x0a	; 10
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	1b 97       	sbiw	r26, 0x0b	; 11
     bc2:	86 3e       	cpi	r24, 0xE6	; 230
     bc4:	b7 e0       	ldi	r27, 0x07	; 7
     bc6:	9b 07       	cpc	r25, r27
     bc8:	24 f4       	brge	.+8      	; 0xbd2 <doFuzzy+0x5fe>
	{
		setServo(MAXLEFT);
     bca:	86 ee       	ldi	r24, 0xE6	; 230
     bcc:	97 e0       	ldi	r25, 0x07	; 7
     bce:	01 d6       	rcall	.+3074   	; 0x17d2 <setServo>
     bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <doFuzzy+0x610>
	}
	else if (steering.value >MAXRIGHT)
     bd2:	85 3e       	cpi	r24, 0xE5	; 229
     bd4:	ec e0       	ldi	r30, 0x0C	; 12
     bd6:	9e 07       	cpc	r25, r30
     bd8:	24 f0       	brlt	.+8      	; 0xbe2 <doFuzzy+0x60e>
	{
		setServo(MAXRIGHT);
     bda:	84 ee       	ldi	r24, 0xE4	; 228
     bdc:	9c e0       	ldi	r25, 0x0C	; 12
     bde:	f9 d5       	rcall	.+3058   	; 0x17d2 <setServo>
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <doFuzzy+0x610>
	}
	else
	{
		setServo(steering.value);
     be2:	f7 d5       	rcall	.+3054   	; 0x17d2 <setServo>
	}
}
     be4:	cc 53       	subi	r28, 0x3C	; 60
     be6:	de 4f       	sbci	r29, 0xFE	; 254
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	5f 90       	pop	r5
     c10:	4f 90       	pop	r4
     c12:	3f 90       	pop	r3
     c14:	2f 90       	pop	r2
     c16:	08 95       	ret

00000c18 <FLC_steering>:
int FLC_steering(int c, int v)
{
    
    
    
	if ((c == 1) & (v == 81))        // right curvature, turn right
     c18:	31 e0       	ldi	r19, 0x01	; 1
     c1a:	61 35       	cpi	r22, 0x51	; 81
     c1c:	71 05       	cpc	r23, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <FLC_steering+0xa>
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	91 05       	cpc	r25, r1
     c28:	09 f0       	breq	.+2      	; 0xc2c <FLC_steering+0x14>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	22 23       	and	r18, r18
     c2e:	31 f0       	breq	.+12     	; 0xc3c <FLC_steering+0x24>
     c30:	33 23       	and	r19, r19
     c32:	21 f0       	breq	.+8      	; 0xc3c <FLC_steering+0x24>
	{
		setServo(MAXRIGHT);
     c34:	84 ee       	ldi	r24, 0xE4	; 228
     c36:	9c e0       	ldi	r25, 0x0C	; 12
     c38:	cc d5       	rcall	.+2968   	; 0x17d2 <setServo>
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <FLC_steering+0x40>
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f0       	breq	.+2      	; 0xc46 <FLC_steering+0x2e>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	22 23       	and	r18, r18
     c48:	31 f0       	breq	.+12     	; 0xc56 <FLC_steering+0x3e>
     c4a:	33 23       	and	r19, r19
     c4c:	21 f0       	breq	.+8      	; 0xc56 <FLC_steering+0x3e>
	{
		setServo(MAXLEFT);
     c4e:	86 ee       	ldi	r24, 0xE6	; 230
     c50:	97 e0       	ldi	r25, 0x07	; 7
     c52:	bf d5       	rcall	.+2942   	; 0x17d2 <setServo>
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <FLC_steering+0x40>
	}
	else                                   // straight road, do fuzzy
	{
		doFuzzy(c,v);
     c56:	be dc       	rcall	.-1668   	; 0x5d4 <doFuzzy>
	}
	
	
	return 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	08 95       	ret

00000c5e <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c5e:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c60:	84 85       	ldd	r24, Z+12	; 0x0c
     c62:	95 85       	ldd	r25, Z+13	; 0x0d
     c64:	9b 01       	movw	r18, r22
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c6a:	86 85       	ldd	r24, Z+14	; 0x0e
     c6c:	97 85       	ldd	r25, Z+15	; 0x0f
     c6e:	86 1b       	sub	r24, r22
     c70:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c72:	12 16       	cp	r1, r18
     c74:	13 06       	cpc	r1, r19
     c76:	f4 f4       	brge	.+60     	; 0xcb4 <compute_degree_of_membership+0x56>
     c78:	18 16       	cp	r1, r24
     c7a:	19 06       	cpc	r1, r25
     c7c:	f4 f4       	brge	.+60     	; 0xcba <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c7e:	60 89       	ldd	r22, Z+16	; 0x10
     c80:	71 89       	ldd	r23, Z+17	; 0x11
     c82:	a2 89       	ldd	r26, Z+18	; 0x12
     c84:	b3 89       	ldd	r27, Z+19	; 0x13
     c86:	8a 9f       	mul	r24, r26
     c88:	a0 01       	movw	r20, r0
     c8a:	8b 9f       	mul	r24, r27
     c8c:	50 0d       	add	r21, r0
     c8e:	9a 9f       	mul	r25, r26
     c90:	50 0d       	add	r21, r0
     c92:	11 24       	eor	r1, r1
     c94:	26 9f       	mul	r18, r22
     c96:	c0 01       	movw	r24, r0
     c98:	27 9f       	mul	r18, r23
     c9a:	90 0d       	add	r25, r0
     c9c:	36 9f       	mul	r19, r22
     c9e:	90 0d       	add	r25, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	48 17       	cp	r20, r24
     ca4:	59 07       	cpc	r21, r25
     ca6:	0c f4       	brge	.+2      	; 0xcaa <compute_degree_of_membership+0x4c>
     ca8:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     caa:	8f 3f       	cpi	r24, 0xFF	; 255
     cac:	91 05       	cpc	r25, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <compute_degree_of_membership+0x54>
     cb0:	3c f4       	brge	.+14     	; 0xcc0 <compute_degree_of_membership+0x62>
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <compute_degree_of_membership+0x66>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     cc4:	93 87       	std	Z+11, r25	; 0x0b
     cc6:	82 87       	std	Z+10, r24	; 0x0a
     cc8:	08 95       	ret

00000cca <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     cd4:	c6 85       	ldd	r28, Z+14	; 0x0e
     cd6:	d7 85       	ldd	r29, Z+15	; 0x0f
     cd8:	84 85       	ldd	r24, Z+12	; 0x0c
     cda:	95 85       	ldd	r25, Z+13	; 0x0d
     cdc:	c8 1b       	sub	r28, r24
     cde:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     ce0:	22 85       	ldd	r18, Z+10	; 0x0a
     ce2:	33 85       	ldd	r19, Z+11	; 0x0b
     ce4:	60 89       	ldd	r22, Z+16	; 0x10
     ce6:	71 89       	ldd	r23, Z+17	; 0x11
     ce8:	c9 01       	movw	r24, r18
     cea:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     cee:	8e 01       	movw	r16, r28
     cf0:	06 1b       	sub	r16, r22
     cf2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     cf4:	62 89       	ldd	r22, Z+18	; 0x12
     cf6:	73 89       	ldd	r23, Z+19	; 0x13
     cf8:	c9 01       	movw	r24, r18
     cfa:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodhi4>
    top = base - run_1 - run_2;
     cfe:	06 1b       	sub	r16, r22
     d00:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     d02:	c0 0f       	add	r28, r16
     d04:	d1 1f       	adc	r29, r17
     d06:	2c 9f       	mul	r18, r28
     d08:	c0 01       	movw	r24, r0
     d0a:	2d 9f       	mul	r18, r29
     d0c:	90 0d       	add	r25, r0
     d0e:	3c 9f       	mul	r19, r28
     d10:	90 0d       	add	r25, r0
     d12:	11 24       	eor	r1, r1
     d14:	99 23       	and	r25, r25
     d16:	0c f4       	brge	.+2      	; 0xd1a <compute_area_of_trapezoid+0x50>
     d18:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d30:	00 91 e4 02 	lds	r16, 0x02E4
     d34:	10 91 e5 02 	lds	r17, 0x02E5
     d38:	01 15       	cp	r16, r1
     d3a:	11 05       	cpc	r17, r1
     d3c:	b9 f0       	breq	.+46     	; 0xd6c <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d3e:	f8 01       	movw	r30, r16
     d40:	c4 85       	ldd	r28, Z+12	; 0x0c
     d42:	d5 85       	ldd	r29, Z+13	; 0x0d
     d44:	20 97       	sbiw	r28, 0x00	; 0
     d46:	61 f0       	breq	.+24     	; 0xd60 <fuzzification+0x38>
            if (mf!=NULL) {
     d48:	20 97       	sbiw	r28, 0x00	; 0
     d4a:	29 f0       	breq	.+10     	; 0xd56 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     d4c:	f8 01       	movw	r30, r16
     d4e:	62 85       	ldd	r22, Z+10	; 0x0a
     d50:	73 85       	ldd	r23, Z+11	; 0x0b
     d52:	ce 01       	movw	r24, r28
     d54:	84 df       	rcall	.-248    	; 0xc5e <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d56:	0c 88       	ldd	r0, Y+20	; 0x14
     d58:	dd 89       	ldd	r29, Y+21	; 0x15
     d5a:	c0 2d       	mov	r28, r0
     d5c:	20 97       	sbiw	r28, 0x00	; 0
     d5e:	a1 f7       	brne	.-24     	; 0xd48 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d60:	f8 01       	movw	r30, r16
     d62:	06 85       	ldd	r16, Z+14	; 0x0e
     d64:	17 85       	ldd	r17, Z+15	; 0x0f
     d66:	01 15       	cp	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	49 f7       	brne	.-46     	; 0xd3e <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d7e:	c0 91 e6 02 	lds	r28, 0x02E6
     d82:	d0 91 e7 02 	lds	r29, 0x02E7
     d86:	20 97       	sbiw	r28, 0x00	; 0
     d88:	b9 f1       	breq	.+110    	; 0xdf8 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d8e:	e8 81       	ld	r30, Y
     d90:	f9 81       	ldd	r31, Y+1	; 0x01
     d92:	30 97       	sbiw	r30, 0x00	; 0
     d94:	81 f0       	breq	.+32     	; 0xdb6 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d96:	20 2f       	mov	r18, r16
     d98:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d9a:	a0 81       	ld	r26, Z
     d9c:	b1 81       	ldd	r27, Z+1	; 0x01
     d9e:	8d 91       	ld	r24, X+
     da0:	9c 91       	ld	r25, X
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	0c f4       	brge	.+2      	; 0xdaa <rule_evaluation+0x34>
     da8:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     daa:	02 80       	ldd	r0, Z+2	; 0x02
     dac:	f3 81       	ldd	r31, Z+3	; 0x03
     dae:	e0 2d       	mov	r30, r0
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	99 f7       	brne	.-26     	; 0xd9a <rule_evaluation+0x24>
     db4:	02 c0       	rjmp	.+4      	; 0xdba <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     db6:	20 2f       	mov	r18, r16
     db8:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     dba:	ea 81       	ldd	r30, Y+2	; 0x02
     dbc:	fb 81       	ldd	r31, Y+3	; 0x03
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	b1 f0       	breq	.+44     	; 0xdee <rule_evaluation+0x78>
     dc2:	72 2f       	mov	r23, r18
     dc4:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     dc6:	a0 81       	ld	r26, Z
     dc8:	b1 81       	ldd	r27, Z+1	; 0x01
     dca:	8d 91       	ld	r24, X+
     dcc:	9c 91       	ld	r25, X
     dce:	11 97       	sbiw	r26, 0x01	; 1
     dd0:	57 2f       	mov	r21, r23
     dd2:	46 2f       	mov	r20, r22
     dd4:	28 17       	cp	r18, r24
     dd6:	39 07       	cpc	r19, r25
     dd8:	14 f4       	brge	.+4      	; 0xdde <rule_evaluation+0x68>
     dda:	58 2f       	mov	r21, r24
     ddc:	49 2f       	mov	r20, r25
     dde:	5c 93       	st	X, r21
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     de4:	02 80       	ldd	r0, Z+2	; 0x02
     de6:	f3 81       	ldd	r31, Z+3	; 0x03
     de8:	e0 2d       	mov	r30, r0
     dea:	30 97       	sbiw	r30, 0x00	; 0
     dec:	61 f7       	brne	.-40     	; 0xdc6 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     dee:	0c 80       	ldd	r0, Y+4	; 0x04
     df0:	dd 81       	ldd	r29, Y+5	; 0x05
     df2:	c0 2d       	mov	r28, r0
     df4:	20 97       	sbiw	r28, 0x00	; 0
     df6:	59 f6       	brne	.-106    	; 0xd8e <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     e02:	2f 92       	push	r2
     e04:	3f 92       	push	r3
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	00 d0       	rcall	.+0      	; 0xe28 <defuzzification+0x26>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <defuzzification+0x28>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <defuzzification+0x2a>
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     e30:	80 91 e2 02 	lds	r24, 0x02E2
     e34:	90 91 e3 02 	lds	r25, 0x02E3
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	89 2b       	or	r24, r25
     e3e:	09 f4       	brne	.+2      	; 0xe42 <defuzzification+0x40>
     e40:	85 c0       	rjmp	.+266    	; 0xf4c <defuzzification+0x14a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     e42:	eb 81       	ldd	r30, Y+3	; 0x03
     e44:	fc 81       	ldd	r31, Y+4	; 0x04
     e46:	04 84       	ldd	r0, Z+12	; 0x0c
     e48:	f5 85       	ldd	r31, Z+13	; 0x0d
     e4a:	e0 2d       	mov	r30, r0
     e4c:	fe 83       	std	Y+6, r31	; 0x06
     e4e:	ed 83       	std	Y+5, r30	; 0x05
     e50:	ef 2b       	or	r30, r31
     e52:	09 f4       	brne	.+2      	; 0xe56 <defuzzification+0x54>
     e54:	67 c0       	rjmp	.+206    	; 0xf24 <defuzzification+0x122>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     e56:	51 2c       	mov	r5, r1
     e58:	61 2c       	mov	r6, r1
     e5a:	71 2c       	mov	r7, r1
     e5c:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e5e:	31 2c       	mov	r3, r1
     e60:	21 2c       	mov	r2, r1
     e62:	19 82       	std	Y+1, r1	; 0x01
     e64:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	2f df       	rcall	.-418    	; 0xcca <compute_area_of_trapezoid>
     e6c:	bc 01       	movw	r22, r24
     e6e:	88 27       	eor	r24, r24
     e70:	77 fd       	sbrc	r23, 7
     e72:	80 95       	com	r24
     e74:	98 2f       	mov	r25, r24
     e76:	d2 d7       	rcall	.+4004   	; 0x1e1c <__floatsisf>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e7c:	ed 81       	ldd	r30, Y+5	; 0x05
     e7e:	fe 81       	ldd	r31, Y+6	; 0x06
     e80:	04 85       	ldd	r16, Z+12	; 0x0c
     e82:	15 85       	ldd	r17, Z+13	; 0x0d
     e84:	b8 01       	movw	r22, r16
     e86:	88 27       	eor	r24, r24
     e88:	77 fd       	sbrc	r23, 7
     e8a:	80 95       	com	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	c6 d7       	rcall	.+3980   	; 0x1e1c <__floatsisf>
     e90:	4b 01       	movw	r8, r22
     e92:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e94:	ed 81       	ldd	r30, Y+5	; 0x05
     e96:	fe 81       	ldd	r31, Y+6	; 0x06
     e98:	86 85       	ldd	r24, Z+14	; 0x0e
     e9a:	97 85       	ldd	r25, Z+15	; 0x0f
     e9c:	80 1b       	sub	r24, r16
     e9e:	91 0b       	sbc	r25, r17
     ea0:	bc 01       	movw	r22, r24
     ea2:	12 f4       	brpl	.+4      	; 0xea8 <defuzzification+0xa6>
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	75 95       	asr	r23
     eaa:	67 95       	ror	r22
            centroid = centroid + intermed;
     eac:	88 27       	eor	r24, r24
     eae:	77 fd       	sbrc	r23, 7
     eb0:	80 95       	com	r24
     eb2:	98 2f       	mov	r25, r24
     eb4:	b3 d7       	rcall	.+3942   	; 0x1e1c <__floatsisf>
     eb6:	a5 01       	movw	r20, r10
     eb8:	94 01       	movw	r18, r8
     eba:	b1 d6       	rcall	.+3426   	; 0x1c1e <__addsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__mulsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	63 2d       	mov	r22, r3
     ece:	72 2d       	mov	r23, r2
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	a4 d6       	rcall	.+3400   	; 0x1c1e <__addsf3>
     ed6:	36 2e       	mov	r3, r22
     ed8:	27 2e       	mov	r2, r23
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     ede:	a7 01       	movw	r20, r14
     ee0:	96 01       	movw	r18, r12
     ee2:	65 2d       	mov	r22, r5
     ee4:	76 2d       	mov	r23, r6
     ee6:	87 2d       	mov	r24, r7
     ee8:	94 2d       	mov	r25, r4
     eea:	99 d6       	rcall	.+3378   	; 0x1c1e <__addsf3>
     eec:	56 2e       	mov	r5, r22
     eee:	67 2e       	mov	r6, r23
     ef0:	78 2e       	mov	r7, r24
     ef2:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     ef4:	ed 81       	ldd	r30, Y+5	; 0x05
     ef6:	fe 81       	ldd	r31, Y+6	; 0x06
     ef8:	04 88       	ldd	r0, Z+20	; 0x14
     efa:	f5 89       	ldd	r31, Z+21	; 0x15
     efc:	e0 2d       	mov	r30, r0
     efe:	fe 83       	std	Y+6, r31	; 0x06
     f00:	ed 83       	std	Y+5, r30	; 0x05
     f02:	ef 2b       	or	r30, r31
     f04:	09 f0       	breq	.+2      	; 0xf08 <defuzzification+0x106>
     f06:	af cf       	rjmp	.-162    	; 0xe66 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     f08:	26 2f       	mov	r18, r22
     f0a:	37 2f       	mov	r19, r23
     f0c:	48 2f       	mov	r20, r24
     f0e:	59 2f       	mov	r21, r25
     f10:	63 2d       	mov	r22, r3
     f12:	72 2d       	mov	r23, r2
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	e6 d6       	rcall	.+3532   	; 0x1ce6 <__divsf3>
     f1a:	26 2f       	mov	r18, r22
     f1c:	37 2f       	mov	r19, r23
     f1e:	48 2f       	mov	r20, r24
     f20:	59 2f       	mov	r21, r25
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <defuzzification+0x12a>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     f2c:	62 2f       	mov	r22, r18
     f2e:	73 2f       	mov	r23, r19
     f30:	84 2f       	mov	r24, r20
     f32:	95 2f       	mov	r25, r21
     f34:	40 d7       	rcall	.+3712   	; 0x1db6 <__fixsfsi>
     f36:	eb 81       	ldd	r30, Y+3	; 0x03
     f38:	fc 81       	ldd	r31, Y+4	; 0x04
     f3a:	73 87       	std	Z+11, r23	; 0x0b
     f3c:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     f3e:	86 85       	ldd	r24, Z+14	; 0x0e
     f40:	97 85       	ldd	r25, Z+15	; 0x0f
     f42:	9c 83       	std	Y+4, r25	; 0x04
     f44:	8b 83       	std	Y+3, r24	; 0x03
     f46:	89 2b       	or	r24, r25
     f48:	09 f0       	breq	.+2      	; 0xf4c <defuzzification+0x14a>
     f4a:	7b cf       	rjmp	.-266    	; 0xe42 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     f4c:	26 96       	adiw	r28, 0x06	; 6
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	8f 90       	pop	r8
     f70:	7f 90       	pop	r7
     f72:	6f 90       	pop	r6
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	3f 90       	pop	r3
     f7a:	2f 90       	pop	r2
     f7c:	08 95       	ret

00000f7e <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
     f94:	6a 01       	movw	r12, r20
     f96:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     f98:	0e 94 43 10 	call	0x2086	; 0x2086 <strcpy>
    newMf->value = 0;
     f9c:	1b 86       	std	Y+11, r1	; 0x0b
     f9e:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     fa0:	dd 86       	std	Y+13, r13	; 0x0d
     fa2:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     fa4:	ff 86       	std	Y+15, r15	; 0x0f
     fa6:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     fa8:	b5 01       	movw	r22, r10
     faa:	6c 19       	sub	r22, r12
     fac:	7d 09       	sbc	r23, r13
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	c9 01       	movw	r24, r18
     fb4:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodhi4>
     fb8:	79 8b       	std	Y+17, r23	; 0x11
     fba:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     fbc:	b7 01       	movw	r22, r14
     fbe:	60 1b       	sub	r22, r16
     fc0:	71 0b       	sbc	r23, r17
     fc2:	c9 01       	movw	r24, r18
     fc4:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__divmodhi4>
     fc8:	7b 8b       	std	Y+19, r23	; 0x13
     fca:	6a 8b       	std	Y+18, r22	; 0x12
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	08 95       	ret

00000fe2 <rightTurn>:
void leftTurn(int gyro);



void rightTurn(int gyro)
{
     fe2:	2f 92       	push	r2
     fe4:	3f 92       	push	r3
     fe6:	4f 92       	push	r4
     fe8:	5f 92       	push	r5
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	ce 5c       	subi	r28, 0xCE	; 206
    100c:	d1 09       	sbc	r29, r1
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type turn; strcpy(turn.name, "turn");
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	ea ea       	ldi	r30, 0xAA	; 170
    101c:	f1 e0       	ldi	r31, 0x01	; 1
    101e:	9e 01       	movw	r18, r28
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	19 01       	movw	r2, r18
    1026:	d9 01       	movw	r26, r18
    1028:	01 90       	ld	r0, Z+
    102a:	0d 92       	st	X+, r0
    102c:	8a 95       	dec	r24
    102e:	e1 f7       	brne	.-8      	; 0x1028 <rightTurn+0x46>
	
	// Set MFs
	struct mf_type start;
	MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    1030:	5e 01       	movw	r10, r28
    1032:	31 e1       	ldi	r19, 0x11	; 17
    1034:	a3 0e       	add	r10, r19
    1036:	b1 1c       	adc	r11, r1
    1038:	0f 2e       	mov	r0, r31
    103a:	fd e2       	ldi	r31, 0x2D	; 45
    103c:	ef 2e       	mov	r14, r31
    103e:	f1 2c       	mov	r15, r1
    1040:	f0 2d       	mov	r31, r0
    1042:	00 e0       	ldi	r16, 0x00	; 0
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4f ef       	ldi	r20, 0xFF	; 255
    104c:	5f ef       	ldi	r21, 0xFF	; 255
    104e:	6f ea       	ldi	r22, 0xAF	; 175
    1050:	71 e0       	ldi	r23, 0x01	; 1
    1052:	c5 01       	movw	r24, r10
    1054:	94 df       	rcall	.-216    	; 0xf7e <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1056:	6e 01       	movw	r12, r28
    1058:	87 e2       	ldi	r24, 0x27	; 39
    105a:	c8 0e       	add	r12, r24
    105c:	d1 1c       	adc	r13, r1
    105e:	0f 2e       	mov	r0, r31
    1060:	fc e3       	ldi	r31, 0x3C	; 60
    1062:	ef 2e       	mov	r14, r31
    1064:	f1 2c       	mov	r15, r1
    1066:	f0 2d       	mov	r31, r0
    1068:	0d e2       	ldi	r16, 0x2D	; 45
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	2d e2       	ldi	r18, 0x2D	; 45
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4e e1       	ldi	r20, 0x1E	; 30
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	65 eb       	ldi	r22, 0xB5	; 181
    1076:	71 e0       	ldi	r23, 0x01	; 1
    1078:	c6 01       	movw	r24, r12
    107a:	81 df       	rcall	.-254    	; 0xf7e <MATLAB_MF>
	struct mf_type end;
	MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    107c:	2e 01       	movw	r4, r28
    107e:	ed e3       	ldi	r30, 0x3D	; 61
    1080:	4e 0e       	add	r4, r30
    1082:	51 1c       	adc	r5, r1
    1084:	0f 2e       	mov	r0, r31
    1086:	fe e7       	ldi	r31, 0x7E	; 126
    1088:	ef 2e       	mov	r14, r31
    108a:	f1 2c       	mov	r15, r1
    108c:	f0 2d       	mov	r31, r0
    108e:	0d e7       	ldi	r16, 0x7D	; 125
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	2d e2       	ldi	r18, 0x2D	; 45
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4d e2       	ldi	r20, 0x2D	; 45
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	6c eb       	ldi	r22, 0xBC	; 188
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	c2 01       	movw	r24, r4
    10a0:	6e df       	rcall	.-292    	; 0xf7e <MATLAB_MF>

	// Linked list for MFs
	turn.membership_functions = &start;
    10a2:	be 86       	std	Y+14, r11	; 0x0e
    10a4:	ad 86       	std	Y+13, r10	; 0x0d
	start.next = &middle;
    10a6:	de a2       	std	Y+38, r13	; 0x26
    10a8:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &end;
    10aa:	5c ae       	std	Y+60, r5	; 0x3c
    10ac:	4b ae       	std	Y+59, r4	; 0x3b
	end.next = NULL;
    10ae:	63 96       	adiw	r28, 0x13	; 19
    10b0:	1f ae       	std	Y+63, r1	; 0x3f
    10b2:	1e ae       	std	Y+62, r1	; 0x3e
    10b4:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    10b6:	6e 01       	movw	r12, r28
    10b8:	f3 e5       	ldi	r31, 0x53	; 83
    10ba:	cf 0e       	add	r12, r31
    10bc:	d1 1c       	adc	r13, r1
    10be:	86 e0       	ldi	r24, 0x06	; 6
    10c0:	e0 ec       	ldi	r30, 0xC0	; 192
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	d6 01       	movw	r26, r12
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	8a 95       	dec	r24
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <rightTurn+0xe4>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2739, 2740, 2740, 2815);
    10ce:	5e 01       	movw	r10, r28
    10d0:	23 e6       	ldi	r18, 0x63	; 99
    10d2:	a2 0e       	add	r10, r18
    10d4:	b1 1c       	adc	r11, r1
    10d6:	0f 2e       	mov	r0, r31
    10d8:	ee 24       	eor	r14, r14
    10da:	ea 94       	dec	r14
    10dc:	fa e0       	ldi	r31, 0x0A	; 10
    10de:	ff 2e       	mov	r15, r31
    10e0:	f0 2d       	mov	r31, r0
    10e2:	04 eb       	ldi	r16, 0xB4	; 180
    10e4:	1a e0       	ldi	r17, 0x0A	; 10
    10e6:	24 eb       	ldi	r18, 0xB4	; 180
    10e8:	3a e0       	ldi	r19, 0x0A	; 10
    10ea:	43 eb       	ldi	r20, 0xB3	; 179
    10ec:	5a e0       	ldi	r21, 0x0A	; 10
    10ee:	62 e2       	ldi	r22, 0x22	; 34
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	c5 01       	movw	r24, r10
    10f4:	44 df       	rcall	.-376    	; 0xf7e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2804, 2820, 2820, 2836);
    10f6:	4e 01       	movw	r8, r28
    10f8:	39 e7       	ldi	r19, 0x79	; 121
    10fa:	83 0e       	add	r8, r19
    10fc:	91 1c       	adc	r9, r1
    10fe:	0f 2e       	mov	r0, r31
    1100:	f4 e1       	ldi	r31, 0x14	; 20
    1102:	ef 2e       	mov	r14, r31
    1104:	fb e0       	ldi	r31, 0x0B	; 11
    1106:	ff 2e       	mov	r15, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	04 e0       	ldi	r16, 0x04	; 4
    110c:	1b e0       	ldi	r17, 0x0B	; 11
    110e:	24 e0       	ldi	r18, 0x04	; 4
    1110:	3b e0       	ldi	r19, 0x0B	; 11
    1112:	44 ef       	ldi	r20, 0xF4	; 244
    1114:	5a e0       	ldi	r21, 0x0A	; 10
    1116:	6c e1       	ldi	r22, 0x1C	; 28
    1118:	71 e0       	ldi	r23, 0x01	; 1
    111a:	c4 01       	movw	r24, r8
    111c:	30 df       	rcall	.-416    	; 0xf7e <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", MAXRIGHT-1, MAXRIGHT, MAXRIGHT, MAXRIGHT+1);
    111e:	3e 01       	movw	r6, r28
    1120:	8f e8       	ldi	r24, 0x8F	; 143
    1122:	68 0e       	add	r6, r24
    1124:	71 1c       	adc	r7, r1
    1126:	0f 2e       	mov	r0, r31
    1128:	f5 ee       	ldi	r31, 0xE5	; 229
    112a:	ef 2e       	mov	r14, r31
    112c:	fc e0       	ldi	r31, 0x0C	; 12
    112e:	ff 2e       	mov	r15, r31
    1130:	f0 2d       	mov	r31, r0
    1132:	04 ee       	ldi	r16, 0xE4	; 228
    1134:	1c e0       	ldi	r17, 0x0C	; 12
    1136:	24 ee       	ldi	r18, 0xE4	; 228
    1138:	3c e0       	ldi	r19, 0x0C	; 12
    113a:	43 ee       	ldi	r20, 0xE3	; 227
    113c:	5c e0       	ldi	r21, 0x0C	; 12
    113e:	6f e9       	ldi	r22, 0x9F	; 159
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	c3 01       	movw	r24, r6
    1144:	1c df       	rcall	.-456    	; 0xf7e <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    1146:	f6 01       	movw	r30, r12
    1148:	b5 86       	std	Z+13, r11	; 0x0d
    114a:	a4 86       	std	Z+12, r10	; 0x0c
	straight.next = &right;
    114c:	f5 01       	movw	r30, r10
    114e:	95 8a       	std	Z+21, r9	; 0x15
    1150:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &sharpRight;
    1152:	f4 01       	movw	r30, r8
    1154:	75 8a       	std	Z+21, r7	; 0x15
    1156:	64 8a       	std	Z+20, r6	; 0x14
	sharpRight.next = NULL;
    1158:	f3 01       	movw	r30, r6
    115a:	15 8a       	std	Z+21, r1	; 0x15
    115c:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &turn;
    115e:	30 92 e5 02 	sts	0x02E5, r3
    1162:	20 92 e4 02 	sts	0x02E4, r2
	turn.next = NULL;
    1166:	18 8a       	std	Y+16, r1	; 0x10
    1168:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    116a:	d0 92 e3 02 	sts	0x02E3, r13
    116e:	c0 92 e2 02 	sts	0x02E2, r12
	servo.next = NULL;
    1172:	f6 01       	movw	r30, r12
    1174:	17 86       	std	Z+15, r1	; 0x0f
    1176:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    1178:	ce 01       	movw	r24, r28
    117a:	8b 55       	subi	r24, 0x5B	; 91
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	90 93 e7 02 	sts	0x02E7, r25
    1182:	80 93 e6 02 	sts	0x02E6, r24
	struct rule_type rule2; rule1.next = &rule2;
    1186:	de 01       	movw	r26, r28
    1188:	a5 55       	subi	r26, 0x55	; 85
    118a:	bf 4f       	sbci	r27, 0xFF	; 255
    118c:	fc 01       	movw	r30, r24
    118e:	b5 83       	std	Z+5, r27	; 0x05
    1190:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1192:	be 01       	movw	r22, r28
    1194:	6f 54       	subi	r22, 0x4F	; 79
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	15 96       	adiw	r26, 0x05	; 5
    119a:	7c 93       	st	X, r23
    119c:	6e 93       	st	-X, r22
    119e:	14 97       	sbiw	r26, 0x04	; 4
    11a0:	fb 01       	movw	r30, r22
    11a2:	15 82       	std	Z+5, r1	; 0x05
    11a4:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    11a6:	ae 01       	movw	r20, r28
    11a8:	49 54       	subi	r20, 0x49	; 73
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	fc 01       	movw	r30, r24
    11ae:	51 83       	std	Z+1, r21	; 0x01
    11b0:	40 83       	st	Z, r20
    11b2:	fa 01       	movw	r30, r20
    11b4:	13 82       	std	Z+3, r1	; 0x03
    11b6:	12 82       	std	Z+2, r1	; 0x02
    11b8:	9e 01       	movw	r18, r28
    11ba:	25 54       	subi	r18, 0x45	; 69
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	fc 01       	movw	r30, r24
    11c0:	33 83       	std	Z+3, r19	; 0x03
    11c2:	22 83       	std	Z+2, r18	; 0x02
    11c4:	f9 01       	movw	r30, r18
    11c6:	13 82       	std	Z+3, r1	; 0x03
    11c8:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &start.value; then1.value = &sharpRight.value;
    11ca:	8a 58       	subi	r24, 0x8A	; 138
    11cc:	91 09       	sbc	r25, r1
    11ce:	fa 01       	movw	r30, r20
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
    11d4:	fa e0       	ldi	r31, 0x0A	; 10
    11d6:	6f 0e       	add	r6, r31
    11d8:	71 1c       	adc	r7, r1
    11da:	f9 01       	movw	r30, r18
    11dc:	71 82       	std	Z+1, r7	; 0x01
    11de:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    11e0:	2c 5f       	subi	r18, 0xFC	; 252
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	3c 93       	st	X, r19
    11e8:	2e 93       	st	-X, r18
    11ea:	f9 01       	movw	r30, r18
    11ec:	13 82       	std	Z+3, r1	; 0x03
    11ee:	12 82       	std	Z+2, r1	; 0x02
    11f0:	88 55       	subi	r24, 0x58	; 88
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	13 96       	adiw	r26, 0x03	; 3
    11f6:	9c 93       	st	X, r25
    11f8:	8e 93       	st	-X, r24
    11fa:	12 97       	sbiw	r26, 0x02	; 2
    11fc:	fc 01       	movw	r30, r24
    11fe:	13 82       	std	Z+3, r1	; 0x03
    1200:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &middle.value; then2.value = &right.value;
    1202:	46 58       	subi	r20, 0x86	; 134
    1204:	51 09       	sbc	r21, r1
    1206:	f9 01       	movw	r30, r18
    1208:	51 83       	std	Z+1, r21	; 0x01
    120a:	40 83       	st	Z, r20
    120c:	fa e0       	ldi	r31, 0x0A	; 10
    120e:	8f 0e       	add	r8, r31
    1210:	91 1c       	adc	r9, r1
    1212:	fc 01       	movw	r30, r24
    1214:	91 82       	std	Z+1, r9	; 0x01
    1216:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1218:	04 96       	adiw	r24, 0x04	; 4
    121a:	fb 01       	movw	r30, r22
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    1220:	fc 01       	movw	r30, r24
    1222:	13 82       	std	Z+3, r1	; 0x03
    1224:	12 82       	std	Z+2, r1	; 0x02
    1226:	90 96       	adiw	r26, 0x20	; 32
    1228:	fb 01       	movw	r30, r22
    122a:	b3 83       	std	Z+3, r27	; 0x03
    122c:	a2 83       	std	Z+2, r26	; 0x02
    122e:	13 96       	adiw	r26, 0x03	; 3
    1230:	1c 92       	st	X, r1
    1232:	1e 92       	st	-X, r1
    1234:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &end.value; then3.value = &straight.value;
    1236:	fa e0       	ldi	r31, 0x0A	; 10
    1238:	4f 0e       	add	r4, r31
    123a:	51 1c       	adc	r5, r1
    123c:	fc 01       	movw	r30, r24
    123e:	51 82       	std	Z+1, r5	; 0x01
    1240:	40 82       	st	Z, r4
    1242:	fa e0       	ldi	r31, 0x0A	; 10
    1244:	af 0e       	add	r10, r31
    1246:	b1 1c       	adc	r11, r1
    1248:	ad 92       	st	X+, r10
    124a:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    124c:	6d dd       	rcall	.-1318   	; 0xd28 <fuzzification>
	rule_evaluation();
    124e:	93 dd       	rcall	.-1242   	; 0xd76 <rule_evaluation>
	defuzzification();
    1250:	d8 dd       	rcall	.-1104   	; 0xe02 <defuzzification>
	if (servo.value > MAXLEFT)
    1252:	f6 01       	movw	r30, r12
    1254:	82 85       	ldd	r24, Z+10	; 0x0a
    1256:	93 85       	ldd	r25, Z+11	; 0x0b
    1258:	87 3e       	cpi	r24, 0xE7	; 231
    125a:	f7 e0       	ldi	r31, 0x07	; 7
    125c:	9f 07       	cpc	r25, r31
    125e:	24 f0       	brlt	.+8      	; 0x1268 <rightTurn+0x286>
	{
		setServo(MAXLEFT);
    1260:	86 ee       	ldi	r24, 0xE6	; 230
    1262:	97 e0       	ldi	r25, 0x07	; 7
    1264:	b6 d2       	rcall	.+1388   	; 0x17d2 <setServo>
    1266:	09 c0       	rjmp	.+18     	; 0x127a <rightTurn+0x298>
	}
	else if (servo.value < MAXRIGHT)
    1268:	84 3e       	cpi	r24, 0xE4	; 228
    126a:	2c e0       	ldi	r18, 0x0C	; 12
    126c:	92 07       	cpc	r25, r18
    126e:	24 f4       	brge	.+8      	; 0x1278 <rightTurn+0x296>
	{
		setServo(MAXRIGHT);
    1270:	84 ee       	ldi	r24, 0xE4	; 228
    1272:	9c e0       	ldi	r25, 0x0C	; 12
    1274:	ae d2       	rcall	.+1372   	; 0x17d2 <setServo>
    1276:	01 c0       	rjmp	.+2      	; 0x127a <rightTurn+0x298>
	}
	else
	{
		setServo(servo.value);
    1278:	ac d2       	rcall	.+1368   	; 0x17d2 <setServo>
	}
}
    127a:	c2 53       	subi	r28, 0x32	; 50
    127c:	df 4f       	sbci	r29, 0xFF	; 255
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	4f 90       	pop	r4
    12a8:	3f 90       	pop	r3
    12aa:	2f 90       	pop	r2
    12ac:	08 95       	ret

000012ae <leftTurn>:

/*
 * This function deals with left turns
 */
void leftTurn(int gyro)
{
    12ae:	2f 92       	push	r2
    12b0:	3f 92       	push	r3
    12b2:	4f 92       	push	r4
    12b4:	5f 92       	push	r5
    12b6:	6f 92       	push	r6
    12b8:	7f 92       	push	r7
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	ce 5c       	subi	r28, 0xCE	; 206
    12d8:	d1 09       	sbc	r29, r1
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    
    // DECLARATION OF GYRO INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type turn; strcpy(turn.name, "turn");
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	ea ea       	ldi	r30, 0xAA	; 170
    12e8:	f1 e0       	ldi	r31, 0x01	; 1
    12ea:	9e 01       	movw	r18, r28
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	19 01       	movw	r2, r18
    12f2:	d9 01       	movw	r26, r18
    12f4:	01 90       	ld	r0, Z+
    12f6:	0d 92       	st	X+, r0
    12f8:	8a 95       	dec	r24
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <leftTurn+0x46>
    
    // Set MFs
    struct mf_type start;
    MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    12fc:	5e 01       	movw	r10, r28
    12fe:	31 e1       	ldi	r19, 0x11	; 17
    1300:	a3 0e       	add	r10, r19
    1302:	b1 1c       	adc	r11, r1
    1304:	0f 2e       	mov	r0, r31
    1306:	fd e2       	ldi	r31, 0x2D	; 45
    1308:	ef 2e       	mov	r14, r31
    130a:	f1 2c       	mov	r15, r1
    130c:	f0 2d       	mov	r31, r0
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4f ef       	ldi	r20, 0xFF	; 255
    1318:	5f ef       	ldi	r21, 0xFF	; 255
    131a:	6f ea       	ldi	r22, 0xAF	; 175
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	c5 01       	movw	r24, r10
    1320:	2e de       	rcall	.-932    	; 0xf7e <MATLAB_MF>
    struct mf_type middle;
    MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1322:	6e 01       	movw	r12, r28
    1324:	87 e2       	ldi	r24, 0x27	; 39
    1326:	c8 0e       	add	r12, r24
    1328:	d1 1c       	adc	r13, r1
    132a:	0f 2e       	mov	r0, r31
    132c:	fc e3       	ldi	r31, 0x3C	; 60
    132e:	ef 2e       	mov	r14, r31
    1330:	f1 2c       	mov	r15, r1
    1332:	f0 2d       	mov	r31, r0
    1334:	0d e2       	ldi	r16, 0x2D	; 45
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	2d e2       	ldi	r18, 0x2D	; 45
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4e e1       	ldi	r20, 0x1E	; 30
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	65 eb       	ldi	r22, 0xB5	; 181
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	c6 01       	movw	r24, r12
    1346:	1b de       	rcall	.-970    	; 0xf7e <MATLAB_MF>
    struct mf_type end;
    MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    1348:	2e 01       	movw	r4, r28
    134a:	ed e3       	ldi	r30, 0x3D	; 61
    134c:	4e 0e       	add	r4, r30
    134e:	51 1c       	adc	r5, r1
    1350:	0f 2e       	mov	r0, r31
    1352:	fe e7       	ldi	r31, 0x7E	; 126
    1354:	ef 2e       	mov	r14, r31
    1356:	f1 2c       	mov	r15, r1
    1358:	f0 2d       	mov	r31, r0
    135a:	0d e7       	ldi	r16, 0x7D	; 125
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	2d e2       	ldi	r18, 0x2D	; 45
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4d e2       	ldi	r20, 0x2D	; 45
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	6c eb       	ldi	r22, 0xBC	; 188
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	c2 01       	movw	r24, r4
    136c:	08 de       	rcall	.-1008   	; 0xf7e <MATLAB_MF>

    // Linked list for MFs
    turn.membership_functions = &start;
    136e:	be 86       	std	Y+14, r11	; 0x0e
    1370:	ad 86       	std	Y+13, r10	; 0x0d
    start.next = &middle;
    1372:	de a2       	std	Y+38, r13	; 0x26
    1374:	cd a2       	std	Y+37, r12	; 0x25
    middle.next = &end;
    1376:	5c ae       	std	Y+60, r5	; 0x3c
    1378:	4b ae       	std	Y+59, r4	; 0x3b
    end.next = NULL;
    137a:	63 96       	adiw	r28, 0x13	; 19
    137c:	1f ae       	std	Y+63, r1	; 0x3f
    137e:	1e ae       	std	Y+62, r1	; 0x3e
    1380:	63 97       	sbiw	r28, 0x13	; 19
    
    
    // DECLARATION OF SERVO OUTPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type servo; strcpy(servo.name, "servo");
    1382:	6e 01       	movw	r12, r28
    1384:	f3 e5       	ldi	r31, 0x53	; 83
    1386:	cf 0e       	add	r12, r31
    1388:	d1 1c       	adc	r13, r1
    138a:	86 e0       	ldi	r24, 0x06	; 6
    138c:	e0 ec       	ldi	r30, 0xC0	; 192
    138e:	f1 e0       	ldi	r31, 0x01	; 1
    1390:	d6 01       	movw	r26, r12
    1392:	01 90       	ld	r0, Z+
    1394:	0d 92       	st	X+, r0
    1396:	8a 95       	dec	r24
    1398:	e1 f7       	brne	.-8      	; 0x1392 <leftTurn+0xe4>
    
    // Set MFs
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2460, 2560, 2560, 2660);
    139a:	5e 01       	movw	r10, r28
    139c:	23 e6       	ldi	r18, 0x63	; 99
    139e:	a2 0e       	add	r10, r18
    13a0:	b1 1c       	adc	r11, r1
    13a2:	0f 2e       	mov	r0, r31
    13a4:	f4 e6       	ldi	r31, 0x64	; 100
    13a6:	ef 2e       	mov	r14, r31
    13a8:	fa e0       	ldi	r31, 0x0A	; 10
    13aa:	ff 2e       	mov	r15, r31
    13ac:	f0 2d       	mov	r31, r0
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	1a e0       	ldi	r17, 0x0A	; 10
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3a e0       	ldi	r19, 0x0A	; 10
    13b6:	4c e9       	ldi	r20, 0x9C	; 156
    13b8:	59 e0       	ldi	r21, 0x09	; 9
    13ba:	62 e2       	ldi	r22, 0x22	; 34
    13bc:	71 e0       	ldi	r23, 0x01	; 1
    13be:	c5 01       	movw	r24, r10
    13c0:	de dd       	rcall	.-1092   	; 0xf7e <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2240, 2240, 2400, 2560);
    13c2:	4e 01       	movw	r8, r28
    13c4:	39 e7       	ldi	r19, 0x79	; 121
    13c6:	83 0e       	add	r8, r19
    13c8:	91 1c       	adc	r9, r1
    13ca:	0f 2e       	mov	r0, r31
    13cc:	e1 2c       	mov	r14, r1
    13ce:	fa e0       	ldi	r31, 0x0A	; 10
    13d0:	ff 2e       	mov	r15, r31
    13d2:	f0 2d       	mov	r31, r0
    13d4:	00 e6       	ldi	r16, 0x60	; 96
    13d6:	19 e0       	ldi	r17, 0x09	; 9
    13d8:	20 ec       	ldi	r18, 0xC0	; 192
    13da:	38 e0       	ldi	r19, 0x08	; 8
    13dc:	40 ec       	ldi	r20, 0xC0	; 192
    13de:	58 e0       	ldi	r21, 0x08	; 8
    13e0:	6b e2       	ldi	r22, 0x2B	; 43
    13e2:	71 e0       	ldi	r23, 0x01	; 1
    13e4:	c4 01       	movw	r24, r8
    13e6:	cb dd       	rcall	.-1130   	; 0xf7e <MATLAB_MF>
    struct mf_type sharpLeft;
    MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT-1, MAXLEFT, MAXLEFT, MAXLEFT+1);
    13e8:	3e 01       	movw	r6, r28
    13ea:	8f e8       	ldi	r24, 0x8F	; 143
    13ec:	68 0e       	add	r6, r24
    13ee:	71 1c       	adc	r7, r1
    13f0:	0f 2e       	mov	r0, r31
    13f2:	f7 ee       	ldi	r31, 0xE7	; 231
    13f4:	ef 2e       	mov	r14, r31
    13f6:	f7 e0       	ldi	r31, 0x07	; 7
    13f8:	ff 2e       	mov	r15, r31
    13fa:	f0 2d       	mov	r31, r0
    13fc:	06 ee       	ldi	r16, 0xE6	; 230
    13fe:	17 e0       	ldi	r17, 0x07	; 7
    1400:	26 ee       	ldi	r18, 0xE6	; 230
    1402:	37 e0       	ldi	r19, 0x07	; 7
    1404:	45 ee       	ldi	r20, 0xE5	; 229
    1406:	57 e0       	ldi	r21, 0x07	; 7
    1408:	65 e9       	ldi	r22, 0x95	; 149
    140a:	71 e0       	ldi	r23, 0x01	; 1
    140c:	c3 01       	movw	r24, r6
    140e:	b7 dd       	rcall	.-1170   	; 0xf7e <MATLAB_MF>

    // Linked list for MFs
    servo.membership_functions = &straight;
    1410:	f6 01       	movw	r30, r12
    1412:	b5 86       	std	Z+13, r11	; 0x0d
    1414:	a4 86       	std	Z+12, r10	; 0x0c
    straight.next = &left;
    1416:	f5 01       	movw	r30, r10
    1418:	95 8a       	std	Z+21, r9	; 0x15
    141a:	84 8a       	std	Z+20, r8	; 0x14
    left.next = &sharpLeft;
    141c:	f4 01       	movw	r30, r8
    141e:	75 8a       	std	Z+21, r7	; 0x15
    1420:	64 8a       	std	Z+20, r6	; 0x14
    sharpLeft.next = NULL;
    1422:	f3 01       	movw	r30, r6
    1424:	15 8a       	std	Z+21, r1	; 0x15
    1426:	14 8a       	std	Z+20, r1	; 0x14
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &turn;
    1428:	30 92 e5 02 	sts	0x02E5, r3
    142c:	20 92 e4 02 	sts	0x02E4, r2
    turn.next = NULL;
    1430:	18 8a       	std	Y+16, r1	; 0x10
    1432:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
    1434:	d0 92 e3 02 	sts	0x02E3, r13
    1438:	c0 92 e2 02 	sts	0x02E2, r12
    servo.next = NULL;
    143c:	f6 01       	movw	r30, r12
    143e:	17 86       	std	Z+15, r1	; 0x0f
    1440:	16 86       	std	Z+14, r1	; 0x0e
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
    1442:	ce 01       	movw	r24, r28
    1444:	8b 55       	subi	r24, 0x5B	; 91
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	90 93 e7 02 	sts	0x02E7, r25
    144c:	80 93 e6 02 	sts	0x02E6, r24
    struct rule_type rule2; rule1.next = &rule2;
    1450:	de 01       	movw	r26, r28
    1452:	a5 55       	subi	r26, 0x55	; 85
    1454:	bf 4f       	sbci	r27, 0xFF	; 255
    1456:	fc 01       	movw	r30, r24
    1458:	b5 83       	std	Z+5, r27	; 0x05
    145a:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    145c:	be 01       	movw	r22, r28
    145e:	6f 54       	subi	r22, 0x4F	; 79
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	15 96       	adiw	r26, 0x05	; 5
    1464:	7c 93       	st	X, r23
    1466:	6e 93       	st	-X, r22
    1468:	14 97       	sbiw	r26, 0x04	; 4
    146a:	fb 01       	movw	r30, r22
    146c:	15 82       	std	Z+5, r1	; 0x05
    146e:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if gyro is start then servo is noSpeed
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1470:	ae 01       	movw	r20, r28
    1472:	49 54       	subi	r20, 0x49	; 73
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	fc 01       	movw	r30, r24
    1478:	51 83       	std	Z+1, r21	; 0x01
    147a:	40 83       	st	Z, r20
    147c:	fa 01       	movw	r30, r20
    147e:	13 82       	std	Z+3, r1	; 0x03
    1480:	12 82       	std	Z+2, r1	; 0x02
    1482:	9e 01       	movw	r18, r28
    1484:	25 54       	subi	r18, 0x45	; 69
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	fc 01       	movw	r30, r24
    148a:	33 83       	std	Z+3, r19	; 0x03
    148c:	22 83       	std	Z+2, r18	; 0x02
    148e:	f9 01       	movw	r30, r18
    1490:	13 82       	std	Z+3, r1	; 0x03
    1492:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &start.value; then1.value = &sharpLeft.value;
    1494:	8a 58       	subi	r24, 0x8A	; 138
    1496:	91 09       	sbc	r25, r1
    1498:	fa 01       	movw	r30, r20
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    149e:	fa e0       	ldi	r31, 0x0A	; 10
    14a0:	6f 0e       	add	r6, r31
    14a2:	71 1c       	adc	r7, r1
    14a4:	f9 01       	movw	r30, r18
    14a6:	71 82       	std	Z+1, r7	; 0x01
    14a8:	60 82       	st	Z, r6
    
    // if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    14aa:	2c 5f       	subi	r18, 0xFC	; 252
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	11 96       	adiw	r26, 0x01	; 1
    14b0:	3c 93       	st	X, r19
    14b2:	2e 93       	st	-X, r18
    14b4:	f9 01       	movw	r30, r18
    14b6:	13 82       	std	Z+3, r1	; 0x03
    14b8:	12 82       	std	Z+2, r1	; 0x02
    14ba:	88 55       	subi	r24, 0x58	; 88
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	13 96       	adiw	r26, 0x03	; 3
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	12 97       	sbiw	r26, 0x02	; 2
    14c6:	fc 01       	movw	r30, r24
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &middle.value; then2.value = &left.value;
    14cc:	46 58       	subi	r20, 0x86	; 134
    14ce:	51 09       	sbc	r21, r1
    14d0:	f9 01       	movw	r30, r18
    14d2:	51 83       	std	Z+1, r21	; 0x01
    14d4:	40 83       	st	Z, r20
    14d6:	fa e0       	ldi	r31, 0x0A	; 10
    14d8:	8f 0e       	add	r8, r31
    14da:	91 1c       	adc	r9, r1
    14dc:	fc 01       	movw	r30, r24
    14de:	91 82       	std	Z+1, r9	; 0x01
    14e0:	80 82       	st	Z, r8
    
    // if speed is medium and distance is oneM then speed is cruise
    struct rule_element_type if31, then3;
    rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    14e2:	04 96       	adiw	r24, 0x04	; 4
    14e4:	fb 01       	movw	r30, r22
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	fc 01       	movw	r30, r24
    14ec:	13 82       	std	Z+3, r1	; 0x03
    14ee:	12 82       	std	Z+2, r1	; 0x02
    14f0:	90 96       	adiw	r26, 0x20	; 32
    14f2:	fb 01       	movw	r30, r22
    14f4:	b3 83       	std	Z+3, r27	; 0x03
    14f6:	a2 83       	std	Z+2, r26	; 0x02
    14f8:	13 96       	adiw	r26, 0x03	; 3
    14fa:	1c 92       	st	X, r1
    14fc:	1e 92       	st	-X, r1
    14fe:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &end.value; then3.value = &straight.value;
    1500:	fa e0       	ldi	r31, 0x0A	; 10
    1502:	4f 0e       	add	r4, r31
    1504:	51 1c       	adc	r5, r1
    1506:	fc 01       	movw	r30, r24
    1508:	51 82       	std	Z+1, r5	; 0x01
    150a:	40 82       	st	Z, r4
    150c:	fa e0       	ldi	r31, 0x0A	; 10
    150e:	af 0e       	add	r10, r31
    1510:	b1 1c       	adc	r11, r1
    1512:	ad 92       	st	X+, r10
    1514:	bc 92       	st	X, r11
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
    1516:	08 dc       	rcall	.-2032   	; 0xd28 <fuzzification>
    rule_evaluation();
    1518:	2e dc       	rcall	.-1956   	; 0xd76 <rule_evaluation>
    defuzzification();
    151a:	73 dc       	rcall	.-1818   	; 0xe02 <defuzzification>
    if (servo.value > MAXLEFT)
    151c:	f6 01       	movw	r30, r12
    151e:	82 85       	ldd	r24, Z+10	; 0x0a
    1520:	93 85       	ldd	r25, Z+11	; 0x0b
    1522:	87 3e       	cpi	r24, 0xE7	; 231
    1524:	f7 e0       	ldi	r31, 0x07	; 7
    1526:	9f 07       	cpc	r25, r31
    1528:	24 f0       	brlt	.+8      	; 0x1532 <leftTurn+0x284>
    {
	    setServo(MAXLEFT);
    152a:	86 ee       	ldi	r24, 0xE6	; 230
    152c:	97 e0       	ldi	r25, 0x07	; 7
    152e:	51 d1       	rcall	.+674    	; 0x17d2 <setServo>
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <leftTurn+0x296>
    }
    else if (servo.value < MAXRIGHT)
    1532:	84 3e       	cpi	r24, 0xE4	; 228
    1534:	2c e0       	ldi	r18, 0x0C	; 12
    1536:	92 07       	cpc	r25, r18
    1538:	24 f4       	brge	.+8      	; 0x1542 <leftTurn+0x294>
    {
	    setServo(MAXRIGHT);
    153a:	84 ee       	ldi	r24, 0xE4	; 228
    153c:	9c e0       	ldi	r25, 0x0C	; 12
    153e:	49 d1       	rcall	.+658    	; 0x17d2 <setServo>
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <leftTurn+0x296>
    }
    else
    {
	    setServo(servo.value);
    1542:	47 d1       	rcall	.+654    	; 0x17d2 <setServo>
    }
    
}
    1544:	c2 53       	subi	r28, 0x32	; 50
    1546:	df 4f       	sbci	r29, 0xFF	; 255
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	3f 90       	pop	r3
    1574:	2f 90       	pop	r2
    1576:	08 95       	ret

00001578 <intersection>:


void intersection(int type, int gyro, int c, int v)
{
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	8a 01       	movw	r16, r20
    1586:	79 01       	movw	r14, r18
    1588:	fb 01       	movw	r30, r22
    158a:	ff 23       	and	r31, r31
    158c:	24 f4       	brge	.+8      	; 0x1596 <intersection+0x1e>
    158e:	ee 27       	eor	r30, r30
    1590:	ff 27       	eor	r31, r31
    1592:	e6 1b       	sub	r30, r22
    1594:	f7 0b       	sbc	r31, r23
    1596:	ef 01       	movw	r28, r30
    1598:	ee 37       	cpi	r30, 0x7E	; 126
    159a:	f1 05       	cpc	r31, r1
    159c:	14 f0       	brlt	.+4      	; 0x15a2 <intersection+0x2a>
    159e:	cd e7       	ldi	r28, 0x7D	; 125
    15a0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
    15a2:	82 37       	cpi	r24, 0x72	; 114
    15a4:	91 05       	cpc	r25, r1
    15a6:	19 f4       	brne	.+6      	; 0x15ae <intersection+0x36>
    {
		rightTurn(gyro);
    15a8:	ce 01       	movw	r24, r28
    15aa:	1b dd       	rcall	.-1482   	; 0xfe2 <rightTurn>
    15ac:	13 c0       	rjmp	.+38     	; 0x15d4 <intersection+0x5c>
    }
	else if (type == 'l')
    15ae:	8c 36       	cpi	r24, 0x6C	; 108
    15b0:	91 05       	cpc	r25, r1
    15b2:	81 f4       	brne	.+32     	; 0x15d4 <intersection+0x5c>
	{
		if (checkCount(500) == 0) // if count less than 500 ms then, keep straight
    15b4:	84 ef       	ldi	r24, 0xF4	; 244
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 76 00 	call	0xec	; 0xec <checkCount>
    15bc:	89 2b       	or	r24, r25
    15be:	21 f4       	brne	.+8      	; 0x15c8 <intersection+0x50>
		{
			FLC_steering(c,v);
    15c0:	b7 01       	movw	r22, r14
    15c2:	c8 01       	movw	r24, r16
    15c4:	29 db       	rcall	.-2478   	; 0xc18 <FLC_steering>
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <intersection+0x5c>
		}
		else
		{
		count(0);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 66 00 	call	0xcc	; 0xcc <count>
		leftTurn(gyro);	
    15d0:	ce 01       	movw	r24, r28
    15d2:	6d de       	rcall	.-806    	; 0x12ae <leftTurn>
		}
	}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	ef 90       	pop	r14
    15e0:	08 95       	ret

000015e2 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	0b b6       	in	r0, 0x3b	; 59
    15ee:	0f 92       	push	r0
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	80 91 ce 00 	lds	r24, 0x00CE
    15fc:	8f 3f       	cpi	r24, 0xFF	; 255
    15fe:	29 f4       	brne	.+10     	; 0x160a <__vector_28+0x28>
    1600:	10 92 c7 01 	sts	0x01C7, r1
    1604:	10 92 c6 01 	sts	0x01C6, r1
    1608:	10 c0       	rjmp	.+32     	; 0x162a <__vector_28+0x48>
    160a:	e0 91 c6 01 	lds	r30, 0x01C6
    160e:	f0 91 c7 01 	lds	r31, 0x01C7
    1612:	e8 51       	subi	r30, 0x18	; 24
    1614:	fd 4f       	sbci	r31, 0xFD	; 253
    1616:	80 83       	st	Z, r24
    1618:	80 91 c6 01 	lds	r24, 0x01C6
    161c:	90 91 c7 01 	lds	r25, 0x01C7
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	90 93 c7 01 	sts	0x01C7, r25
    1626:	80 93 c6 01 	sts	0x01C6, r24
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	0f 90       	pop	r0
    1634:	0b be       	out	0x3b, r0	; 59
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <carInit>:
    1640:	9e d0       	rcall	.+316    	; 0x177e <pwmInit>
    1642:	98 d1       	rcall	.+816    	; 0x1974 <spi_slave_init>
    1644:	8d ec       	ldi	r24, 0xCD	; 205
    1646:	9a e0       	ldi	r25, 0x0A	; 10
    1648:	90 93 89 00 	sts	0x0089, r25
    164c:	80 93 88 00 	sts	0x0088, r24
    1650:	84 e6       	ldi	r24, 0x64	; 100
    1652:	9a e0       	ldi	r25, 0x0A	; 10
    1654:	90 93 8b 00 	sts	0x008B, r25
    1658:	80 93 8a 00 	sts	0x008A, r24
    165c:	08 95       	ret

0000165e <main>:




int main (void)
{
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	2b 97       	sbiw	r28, 0x0b	; 11
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	//	FLC_obstacle(2800, 150);

	FLC_speed(210, 10);
    1672:	6a e0       	ldi	r22, 0x0A	; 10
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	82 ed       	ldi	r24, 0xD2	; 210
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 a2 00 	call	0x144	; 0x144 <FLC_speed>




	carInit();
    167e:	e0 df       	rcall	.-64     	; 0x1640 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1680:	2f ef       	ldi	r18, 0xFF	; 255
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	90 ee       	ldi	r25, 0xE0	; 224
    1686:	21 50       	subi	r18, 0x01	; 1
    1688:	80 40       	sbci	r24, 0x00	; 0
    168a:	90 40       	sbci	r25, 0x00	; 0
    168c:	e1 f7       	brne	.-8      	; 0x1686 <main+0x28>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <main+0x32>
    1690:	00 00       	nop
	//USART1_init(baud_setting);
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    1696:	78 94       	sei
					setServo(STRAIGHT);
				//}
			}
			else if (control_mode == 1)
			{
				FLC_speed(OCR1A, sF);
    1698:	0f 2e       	mov	r0, r31
    169a:	f8 e8       	ldi	r31, 0x88	; 136
    169c:	6f 2e       	mov	r6, r31
    169e:	71 2c       	mov	r7, r1
    16a0:	f0 2d       	mov	r31, r0
			cli();
			
			if (control_mode == 0)
			{
				FLC_steering(c,v);
				FLC_speed(OCR1B, sF);
    16a2:	0f 2e       	mov	r0, r31
    16a4:	fa e8       	ldi	r31, 0x8A	; 138
    16a6:	af 2e       	mov	r10, r31
    16a8:	b1 2c       	mov	r11, r1
    16aa:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    16ac:	c2 d1       	rcall	.+900    	; 0x1a32 <is_package_recieved>
    16ae:	88 23       	and	r24, r24
    16b0:	e9 f3       	breq	.-6      	; 0x16ac <main+0x4e>
			

			//Reading Information
			prev_control_mode = control_mode;
    16b2:	4b 84       	ldd	r4, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    16b4:	be 01       	movw	r22, r28
    16b6:	6f 5f       	subi	r22, 0xFF	; 255
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	ce 01       	movw	r24, r28
    16bc:	0b 96       	adiw	r24, 0x0b	; 11
    16be:	c3 d1       	rcall	.+902    	; 0x1a46 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    16c0:	cb 80       	ldd	r12, Y+3	; 0x03
    16c2:	d1 2c       	mov	r13, r1
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    16c4:	09 81       	ldd	r16, Y+1	; 0x01
    16c6:	10 e0       	ldi	r17, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
    16c8:	ea 80       	ldd	r14, Y+2	; 0x02
    16ca:	f1 2c       	mov	r15, r1
			int gyro_angle = (int) sensor_info.angle - 125;
    16cc:	58 84       	ldd	r5, Y+8	; 0x08
			int intersection_type = (int) sensor_info.next_turn_decision;
    16ce:	8a 84       	ldd	r8, Y+10	; 0x0a
    16d0:	91 2c       	mov	r9, r1
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    16d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	51 f4       	brne	.+20     	; 0x16ec <main+0x8e>
    16d8:	41 10       	cpse	r4, r1
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <main+0xaa>
				count(1);
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 66 00 	call	0xcc	; 0xcc <count>
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			
			}
			if (control_mode == 1 && control_mode != prev_control_mode && intersection_type == 'l') // if left turn is initiated
    16e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	79 f4       	brne	.+30     	; 0x1708 <main+0xaa>
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <main+0x9a>
    16ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	59 f4       	brne	.+22     	; 0x1708 <main+0xaa>
    16f2:	e1 e0       	ldi	r30, 0x01	; 1
    16f4:	4e 16       	cp	r4, r30
    16f6:	41 f0       	breq	.+16     	; 0x1708 <main+0xaa>
    16f8:	fc e6       	ldi	r31, 0x6C	; 108
    16fa:	8f 16       	cp	r8, r31
    16fc:	91 04       	cpc	r9, r1
    16fe:	21 f4       	brne	.+8      	; 0x1708 <main+0xaa>
			{
				count(1);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			}
			
			
			
			
			cli();
    1708:	f8 94       	cli
			
			if (control_mode == 0)
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	91 11       	cpse	r25, r1
    170e:	0a c0       	rjmp	.+20     	; 0x1724 <main+0xc6>
			{
				FLC_steering(c,v);
    1710:	b7 01       	movw	r22, r14
    1712:	c8 01       	movw	r24, r16
    1714:	81 da       	rcall	.-2814   	; 0xc18 <FLC_steering>
				FLC_speed(OCR1B, sF);
    1716:	f5 01       	movw	r30, r10
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	b6 01       	movw	r22, r12
    171e:	0e 94 a2 00 	call	0x144	; 0x144 <FLC_speed>
    1722:	1d c0       	rjmp	.+58     	; 0x175e <main+0x100>
			}
			else if (control_mode == 4)
    1724:	94 30       	cpi	r25, 0x04	; 4
    1726:	59 f4       	brne	.+22     	; 0x173e <main+0xe0>
					//setESC(2835);
					//stop(k_value_stop_line);
				//}
				//else
				//{
					count(0);
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 66 00 	call	0xcc	; 0xcc <count>
					setESC(NEUTRAL);
    1730:	8d ec       	ldi	r24, 0xCD	; 205
    1732:	9a e0       	ldi	r25, 0x0A	; 10
    1734:	33 d0       	rcall	.+102    	; 0x179c <setESC>
					setServo(STRAIGHT);
    1736:	84 e6       	ldi	r24, 0x64	; 100
    1738:	9a e0       	ldi	r25, 0x0A	; 10
    173a:	4b d0       	rcall	.+150    	; 0x17d2 <setServo>
    173c:	10 c0       	rjmp	.+32     	; 0x175e <main+0x100>
				//}
			}
			else if (control_mode == 1)
    173e:	91 30       	cpi	r25, 0x01	; 1
    1740:	71 f4       	brne	.+28     	; 0x175e <main+0x100>
			{
				FLC_speed(OCR1A, sF);
    1742:	f3 01       	movw	r30, r6
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	b6 01       	movw	r22, r12
    174a:	0e 94 a2 00 	call	0x144	; 0x144 <FLC_speed>
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro_angle = (int) sensor_info.angle - 125;
    174e:	85 2d       	mov	r24, r5
    1750:	90 e0       	ldi	r25, 0x00	; 0
				//}
			}
			else if (control_mode == 1)
			{
				FLC_speed(OCR1A, sF);
				intersection(gyro_angle, intersection_type, c, v);
    1752:	97 01       	movw	r18, r14
    1754:	a8 01       	movw	r20, r16
    1756:	b4 01       	movw	r22, r8
    1758:	8d 57       	subi	r24, 0x7D	; 125
    175a:	91 09       	sbc	r25, r1
    175c:	0d df       	rcall	.-486    	; 0x1578 <intersection>
			}
			
			sei();
    175e:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1760:	f3 01       	movw	r30, r6
    1762:	e0 80       	ld	r14, Z
    1764:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1766:	f5 01       	movw	r30, r10
    1768:	00 81       	ld	r16, Z
    176a:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0b d1       	rcall	.+534    	; 0x1986 <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1770:	8e 2d       	mov	r24, r14
    1772:	09 d1       	rcall	.+530    	; 0x1986 <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	07 d1       	rcall	.+526    	; 0x1986 <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    1778:	80 2f       	mov	r24, r16
    177a:	05 d1       	rcall	.+522    	; 0x1986 <spi_send_byte>
    177c:	97 cf       	rjmp	.-210    	; 0x16ac <main+0x4e>

0000177e <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1782:	82 ea       	ldi	r24, 0xA2	; 162
    1784:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f e8       	ldi	r25, 0x8F	; 143
    178c:	90 93 87 00 	sts	0x0087, r25
    1790:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1794:	8a e1       	ldi	r24, 0x1A	; 26
    1796:	80 93 81 00 	sts	0x0081, r24
    179a:	08 95       	ret

0000179c <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    179c:	80 36       	cpi	r24, 0x60	; 96
    179e:	2a e0       	ldi	r18, 0x0A	; 10
    17a0:	92 07       	cpc	r25, r18
    17a2:	3c f4       	brge	.+14     	; 0x17b2 <setESC+0x16>
	{
		OCR1A = MINESC;
    17a4:	8f e5       	ldi	r24, 0x5F	; 95
    17a6:	9a e0       	ldi	r25, 0x0A	; 10
    17a8:	90 93 89 00 	sts	0x0089, r25
    17ac:	80 93 88 00 	sts	0x0088, r24
    17b0:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    17b2:	88 31       	cpi	r24, 0x18	; 24
    17b4:	2b e0       	ldi	r18, 0x0B	; 11
    17b6:	92 07       	cpc	r25, r18
    17b8:	3c f0       	brlt	.+14     	; 0x17c8 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    17ba:	88 e1       	ldi	r24, 0x18	; 24
    17bc:	9b e0       	ldi	r25, 0x0B	; 11
    17be:	90 93 89 00 	sts	0x0089, r25
    17c2:	80 93 88 00 	sts	0x0088, r24
    17c6:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    17c8:	90 93 89 00 	sts	0x0089, r25
    17cc:	80 93 88 00 	sts	0x0088, r24
    17d0:	08 95       	ret

000017d2 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    17d2:	84 3e       	cpi	r24, 0xE4	; 228
    17d4:	2c e0       	ldi	r18, 0x0C	; 12
    17d6:	92 07       	cpc	r25, r18
    17d8:	3c f0       	brlt	.+14     	; 0x17e8 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    17da:	84 ee       	ldi	r24, 0xE4	; 228
    17dc:	9c e0       	ldi	r25, 0x0C	; 12
    17de:	90 93 8b 00 	sts	0x008B, r25
    17e2:	80 93 8a 00 	sts	0x008A, r24
    17e6:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    17e8:	87 3e       	cpi	r24, 0xE7	; 231
    17ea:	27 e0       	ldi	r18, 0x07	; 7
    17ec:	92 07       	cpc	r25, r18
    17ee:	3c f4       	brge	.+14     	; 0x17fe <setServo+0x2c>

		OCR1B = MAXLEFT;
    17f0:	86 ee       	ldi	r24, 0xE6	; 230
    17f2:	97 e0       	ldi	r25, 0x07	; 7
    17f4:	90 93 8b 00 	sts	0x008B, r25
    17f8:	80 93 8a 00 	sts	0x008A, r24
    17fc:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    17fe:	ea e8       	ldi	r30, 0x8A	; 138
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	40 91 00 01 	lds	r20, 0x0100
    180a:	50 91 01 01 	lds	r21, 0x0101
    180e:	84 9f       	mul	r24, r20
    1810:	90 01       	movw	r18, r0
    1812:	85 9f       	mul	r24, r21
    1814:	30 0d       	add	r19, r0
    1816:	94 9f       	mul	r25, r20
    1818:	30 0d       	add	r19, r0
    181a:	11 24       	eor	r1, r1
    181c:	40 91 02 01 	lds	r20, 0x0102
    1820:	50 91 03 01 	lds	r21, 0x0103
    1824:	64 9f       	mul	r22, r20
    1826:	c0 01       	movw	r24, r0
    1828:	65 9f       	mul	r22, r21
    182a:	90 0d       	add	r25, r0
    182c:	74 9f       	mul	r23, r20
    182e:	90 0d       	add	r25, r0
    1830:	11 24       	eor	r1, r1
    1832:	82 0f       	add	r24, r18
    1834:	93 1f       	adc	r25, r19
    1836:	6a e0       	ldi	r22, 0x0A	; 10
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	df d3       	rcall	.+1982   	; 0x1ffa <__divmodhi4>
    183c:	71 83       	std	Z+1, r23	; 0x01
    183e:	60 83       	st	Z, r22
    1840:	08 95       	ret

00001842 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1842:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1844:	20 91 54 02 	lds	r18, 0x0254
    1848:	30 91 55 02 	lds	r19, 0x0255
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	a9 f0       	breq	.+42     	; 0x187c <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1852:	e0 e5       	ldi	r30, 0x50	; 80
    1854:	f2 e0       	ldi	r31, 0x02	; 2
    1856:	40 81       	ld	r20, Z
    1858:	51 81       	ldd	r21, Z+1	; 0x01
    185a:	da 01       	movw	r26, r20
    185c:	a0 5f       	subi	r26, 0xF0	; 240
    185e:	bd 4f       	sbci	r27, 0xFD	; 253
    1860:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1862:	4f 5f       	subi	r20, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	51 83       	std	Z+1, r21	; 0x01
    1868:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    186a:	21 50       	subi	r18, 0x01	; 1
    186c:	31 09       	sbc	r19, r1
    186e:	30 93 55 02 	sts	0x0255, r19
    1872:	20 93 54 02 	sts	0x0254, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1876:	23 2b       	or	r18, r19
    1878:	21 f4       	brne	.+8      	; 0x1882 <spi_get_byte+0x40>
    187a:	01 c0       	rjmp	.+2      	; 0x187e <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    187c:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    187e:	10 92 c8 01 	sts	0x01C8, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1882:	20 91 50 02 	lds	r18, 0x0250
    1886:	30 91 51 02 	lds	r19, 0x0251
    188a:	20 34       	cpi	r18, 0x40	; 64
    188c:	31 05       	cpc	r19, r1
    188e:	21 f4       	brne	.+8      	; 0x1898 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1890:	10 92 51 02 	sts	0x0251, r1
    1894:	10 92 50 02 	sts	0x0250, r1
	}
	

	sei();
    1898:	78 94       	sei
	
	return value;
	
		
}
    189a:	08 95       	ret

0000189c <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	0b b6       	in	r0, 0x3b	; 59
    18a8:	0f 92       	push	r0
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
    18b2:	af 93       	push	r26
    18b4:	bf 93       	push	r27
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    18ba:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    18bc:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    18be:	2d 3f       	cpi	r18, 0xFD	; 253
    18c0:	a9 f0       	breq	.+42     	; 0x18ec <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    18c2:	e2 e5       	ldi	r30, 0x52	; 82
    18c4:	f2 e0       	ldi	r31, 0x02	; 2
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	dc 01       	movw	r26, r24
    18cc:	a0 5f       	subi	r26, 0xF0	; 240
    18ce:	bd 4f       	sbci	r27, 0xFD	; 253
    18d0:	2c 93       	st	X, r18
		rx_spi.i_last++;
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    18d8:	e4 e5       	ldi	r30, 0x54	; 84
    18da:	f2 e0       	ldi	r31, 0x02	; 2
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 c8 01 	sts	0x01C8, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    18ec:	80 91 52 02 	lds	r24, 0x0252
    18f0:	90 91 53 02 	lds	r25, 0x0253
    18f4:	80 34       	cpi	r24, 0x40	; 64
    18f6:	91 05       	cpc	r25, r1
    18f8:	21 f4       	brne	.+8      	; 0x1902 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    18fa:	10 92 53 02 	sts	0x0253, r1
    18fe:	10 92 52 02 	sts	0x0252, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1902:	80 91 0e 02 	lds	r24, 0x020E
    1906:	90 91 0f 02 	lds	r25, 0x020F
    190a:	89 2b       	or	r24, r25
    190c:	01 f1       	breq	.+64     	; 0x194e <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    190e:	e0 91 0a 02 	lds	r30, 0x020A
    1912:	f0 91 0b 02 	lds	r31, 0x020B
    1916:	e6 53       	subi	r30, 0x36	; 54
    1918:	fe 4f       	sbci	r31, 0xFE	; 254
    191a:	80 81       	ld	r24, Z
    191c:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    191e:	ea e0       	ldi	r30, 0x0A	; 10
    1920:	f2 e0       	ldi	r31, 0x02	; 2
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    192c:	ee e0       	ldi	r30, 0x0E	; 14
    192e:	f2 e0       	ldi	r31, 0x02	; 2
    1930:	20 81       	ld	r18, Z
    1932:	31 81       	ldd	r19, Z+1	; 0x01
    1934:	21 50       	subi	r18, 0x01	; 1
    1936:	31 09       	sbc	r19, r1
    1938:	31 83       	std	Z+1, r19	; 0x01
    193a:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    193c:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    193e:	80 34       	cpi	r24, 0x40	; 64
    1940:	91 05       	cpc	r25, r1
    1942:	49 f4       	brne	.+18     	; 0x1956 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1944:	10 92 0b 02 	sts	0x020B, r1
    1948:	10 92 0a 02 	sts	0x020A, r1
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    194e:	8d ef       	ldi	r24, 0xFD	; 253
    1950:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1952:	10 92 c9 01 	sts	0x01C9, r1
		
	} 	
	

}
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	3f 91       	pop	r19
    1964:	2f 91       	pop	r18
    1966:	0f 90       	pop	r0
    1968:	0b be       	out	0x3b, r0	; 59
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1974:	80 e4       	ldi	r24, 0x40	; 64
    1976:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1978:	80 ec       	ldi	r24, 0xC0	; 192
    197a:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    197c:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    197e:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1980:	8d ef       	ldi	r24, 0xFD	; 253
    1982:	8e bd       	out	0x2e, r24	; 46
    1984:	08 95       	ret

00001986 <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1986:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1988:	20 91 0e 02 	lds	r18, 0x020E
    198c:	30 91 0f 02 	lds	r19, 0x020F
    1990:	20 34       	cpi	r18, 0x40	; 64
    1992:	31 05       	cpc	r19, r1
    1994:	90 f4       	brcc	.+36     	; 0x19ba <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1996:	ec e0       	ldi	r30, 0x0C	; 12
    1998:	f2 e0       	ldi	r31, 0x02	; 2
    199a:	40 81       	ld	r20, Z
    199c:	51 81       	ldd	r21, Z+1	; 0x01
    199e:	da 01       	movw	r26, r20
    19a0:	a6 53       	subi	r26, 0x36	; 54
    19a2:	be 4f       	sbci	r27, 0xFE	; 254
    19a4:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    19a6:	4f 5f       	subi	r20, 0xFF	; 255
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	51 83       	std	Z+1, r21	; 0x01
    19ac:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	30 93 0f 02 	sts	0x020F, r19
    19b6:	20 93 0e 02 	sts	0x020E, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    19ba:	80 91 0c 02 	lds	r24, 0x020C
    19be:	90 91 0d 02 	lds	r25, 0x020D
    19c2:	80 34       	cpi	r24, 0x40	; 64
    19c4:	91 05       	cpc	r25, r1
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    19c8:	10 92 0d 02 	sts	0x020D, r1
    19cc:	10 92 0c 02 	sts	0x020C, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    19d0:	80 91 0e 02 	lds	r24, 0x020E
    19d4:	90 91 0f 02 	lds	r25, 0x020F
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f4       	brne	.+60     	; 0x1a18 <spi_send_byte+0x92>
    19dc:	80 91 c9 01 	lds	r24, 0x01C9
    19e0:	81 11       	cpse	r24, r1
    19e2:	1a c0       	rjmp	.+52     	; 0x1a18 <spi_send_byte+0x92>
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    19e4:	e0 91 0a 02 	lds	r30, 0x020A
    19e8:	f0 91 0b 02 	lds	r31, 0x020B
    19ec:	e6 53       	subi	r30, 0x36	; 54
    19ee:	fe 4f       	sbci	r31, 0xFE	; 254
    19f0:	80 81       	ld	r24, Z
    19f2:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    19f4:	ea e0       	ldi	r30, 0x0A	; 10
    19f6:	f2 e0       	ldi	r31, 0x02	; 2
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1a02:	ee e0       	ldi	r30, 0x0E	; 14
    1a04:	f2 e0       	ldi	r31, 0x02	; 2
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1a10:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 c9 01 	sts	0x01C9, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1a18:	80 91 0a 02 	lds	r24, 0x020A
    1a1c:	90 91 0b 02 	lds	r25, 0x020B
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	91 05       	cpc	r25, r1
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <spi_send_byte+0xa8>
		tx_spi.i_first = 0;
    1a26:	10 92 0b 02 	sts	0x020B, r1
    1a2a:	10 92 0a 02 	sts	0x020A, r1
	}
			
			

	sei();
    1a2e:	78 94       	sei
    1a30:	08 95       	ret

00001a32 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	20 91 54 02 	lds	r18, 0x0254
    1a38:	30 91 55 02 	lds	r19, 0x0255
    1a3c:	2b 30       	cpi	r18, 0x0B	; 11
    1a3e:	31 05       	cpc	r19, r1
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <is_package_recieved+0x12>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1a44:	08 95       	ret

00001a46 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	8c 01       	movw	r16, r24
    1a50:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1a52:	20 91 54 02 	lds	r18, 0x0254
    1a56:	30 91 55 02 	lds	r19, 0x0255
    1a5a:	23 2b       	or	r18, r19
    1a5c:	69 f1       	breq	.+90     	; 0x1ab8 <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1a5e:	e0 91 50 02 	lds	r30, 0x0250
    1a62:	f0 91 51 02 	lds	r31, 0x0251
    1a66:	e0 5f       	subi	r30, 0xF0	; 240
    1a68:	fd 4f       	sbci	r31, 0xFD	; 253
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6e:	e1 f4       	brne	.+56     	; 0x1aa8 <read_sensor_info+0x62>
    1a70:	e0 df       	rcall	.-64     	; 0x1a32 <is_package_recieved>
    1a72:	88 23       	and	r24, r24
    1a74:	11 f1       	breq	.+68     	; 0x1aba <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1a76:	e5 de       	rcall	.-566    	; 0x1842 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1a78:	e4 de       	rcall	.-568    	; 0x1842 <spi_get_byte>
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1a7e:	e1 de       	rcall	.-574    	; 0x1842 <spi_get_byte>
    1a80:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1a82:	df de       	rcall	.-578    	; 0x1842 <spi_get_byte>
    1a84:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1a86:	dd de       	rcall	.-582    	; 0x1842 <spi_get_byte>
    1a88:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1a8a:	db de       	rcall	.-586    	; 0x1842 <spi_get_byte>
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1a8e:	d9 de       	rcall	.-590    	; 0x1842 <spi_get_byte>
    1a90:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1a92:	d7 de       	rcall	.-594    	; 0x1842 <spi_get_byte>
    1a94:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1a96:	81 e2       	ldi	r24, 0x21	; 33
    1a98:	9c e0       	ldi	r25, 0x0C	; 12
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1a9c:	d2 de       	rcall	.-604    	; 0x1842 <spi_get_byte>
    1a9e:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1aa0:	d0 de       	rcall	.-608    	; 0x1842 <spi_get_byte>
    1aa2:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    1aa8:	c4 df       	rcall	.-120    	; 0x1a32 <is_package_recieved>
    1aaa:	88 23       	and	r24, r24
    1aac:	31 f0       	breq	.+12     	; 0x1aba <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1aae:	c9 de       	rcall	.-622    	; 0x1842 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1ab0:	be 01       	movw	r22, r28
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	c8 df       	rcall	.-112    	; 0x1a46 <read_sensor_info>
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	0b b6       	in	r0, 0x3b	; 59
    1ad0:	0f 92       	push	r0
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1ae4:	80 91 e0 02 	lds	r24, 0x02E0
    1ae8:	90 91 e1 02 	lds	r25, 0x02E1
    1aec:	80 34       	cpi	r24, 0x40	; 64
    1aee:	91 05       	cpc	r25, r1
    1af0:	31 f4       	brne	.+12     	; 0x1afe <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	80 93 0c 03 	sts	0x030C, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1af8:	80 91 c6 00 	lds	r24, 0x00C6
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1afe:	80 34       	cpi	r24, 0x40	; 64
    1b00:	91 05       	cpc	r25, r1
    1b02:	e8 f4       	brcc	.+58     	; 0x1b3e <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1b04:	ee ed       	ldi	r30, 0xDE	; 222
    1b06:	f2 e0       	ldi	r31, 0x02	; 2
    1b08:	20 81       	ld	r18, Z
    1b0a:	31 81       	ldd	r19, Z+1	; 0x01
    1b0c:	40 91 c6 00 	lds	r20, 0x00C6
    1b10:	d9 01       	movw	r26, r18
    1b12:	a4 56       	subi	r26, 0x64	; 100
    1b14:	bd 4f       	sbci	r27, 0xFD	; 253
    1b16:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	31 83       	std	Z+1, r19	; 0x01
    1b1e:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	90 93 e1 02 	sts	0x02E1, r25
    1b26:	80 93 e0 02 	sts	0x02E0, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1b2a:	80 91 e0 02 	lds	r24, 0x02E0
    1b2e:	90 91 e1 02 	lds	r25, 0x02E1
    1b32:	80 34       	cpi	r24, 0x40	; 64
    1b34:	91 05       	cpc	r25, r1
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 0a 03 	sts	0x030A, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1b3e:	80 91 de 02 	lds	r24, 0x02DE
    1b42:	90 91 df 02 	lds	r25, 0x02DF
    1b46:	80 34       	cpi	r24, 0x40	; 64
    1b48:	91 05       	cpc	r25, r1
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1b4c:	10 92 df 02 	sts	0x02DF, r1
    1b50:	10 92 de 02 	sts	0x02DE, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	80 93 09 03 	sts	0x0309, r24
}
    1b5a:	ff 91       	pop	r31
    1b5c:	ef 91       	pop	r30
    1b5e:	bf 91       	pop	r27
    1b60:	af 91       	pop	r26
    1b62:	9f 91       	pop	r25
    1b64:	8f 91       	pop	r24
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	0f 90       	pop	r0
    1b6e:	0b be       	out	0x3b, r0	; 59
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <__vector_22>:




ISR(USART0_TX_vect)
{
    1b7a:	1f 92       	push	r1
    1b7c:	0f 92       	push	r0
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	0b b6       	in	r0, 0x3b	; 59
    1b86:	0f 92       	push	r0
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1b90:	80 91 9a 02 	lds	r24, 0x029A
    1b94:	90 91 9b 02 	lds	r25, 0x029B
    1b98:	80 34       	cpi	r24, 0x40	; 64
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	19 f4       	brne	.+6      	; 0x1ba4 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1b9e:	10 92 08 03 	sts	0x0308, r1
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1ba4:	89 2b       	or	r24, r25
    1ba6:	b9 f0       	breq	.+46     	; 0x1bd6 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1ba8:	e0 91 96 02 	lds	r30, 0x0296
    1bac:	f0 91 97 02 	lds	r31, 0x0297
    1bb0:	ea 5a       	subi	r30, 0xAA	; 170
    1bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1bba:	e6 e9       	ldi	r30, 0x96	; 150
    1bbc:	f2 e0       	ldi	r31, 0x02	; 2
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1bc8:	ea e9       	ldi	r30, 0x9A	; 154
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1bd6:	80 91 96 02 	lds	r24, 0x0296
    1bda:	90 91 97 02 	lds	r25, 0x0297
    1bde:	80 34       	cpi	r24, 0x40	; 64
    1be0:	91 05       	cpc	r25, r1
    1be2:	21 f4       	brne	.+8      	; 0x1bec <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1be4:	10 92 97 02 	sts	0x0297, r1
    1be8:	10 92 96 02 	sts	0x0296, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1bec:	80 91 9a 02 	lds	r24, 0x029A
    1bf0:	90 91 9b 02 	lds	r25, 0x029B
    1bf4:	89 2b       	or	r24, r25
    1bf6:	39 f4       	brne	.+14     	; 0x1c06 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1bf8:	10 92 0b 03 	sts	0x030B, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1bfc:	e1 ec       	ldi	r30, 0xC1	; 193
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 7b       	andi	r24, 0xBF	; 191
    1c04:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1c06:	ff 91       	pop	r31
    1c08:	ef 91       	pop	r30
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	0f 90       	pop	r0
    1c10:	0b be       	out	0x3b, r0	; 59
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <__subsf3>:
    1c1c:	50 58       	subi	r21, 0x80	; 128

00001c1e <__addsf3>:
    1c1e:	bb 27       	eor	r27, r27
    1c20:	aa 27       	eor	r26, r26
    1c22:	0e d0       	rcall	.+28     	; 0x1c40 <__addsf3x>
    1c24:	4d c1       	rjmp	.+666    	; 0x1ec0 <__fp_round>
    1c26:	3e d1       	rcall	.+636    	; 0x1ea4 <__fp_pscA>
    1c28:	30 f0       	brcs	.+12     	; 0x1c36 <__addsf3+0x18>
    1c2a:	43 d1       	rcall	.+646    	; 0x1eb2 <__fp_pscB>
    1c2c:	20 f0       	brcs	.+8      	; 0x1c36 <__addsf3+0x18>
    1c2e:	31 f4       	brne	.+12     	; 0x1c3c <__addsf3+0x1e>
    1c30:	9f 3f       	cpi	r25, 0xFF	; 255
    1c32:	11 f4       	brne	.+4      	; 0x1c38 <__addsf3+0x1a>
    1c34:	1e f4       	brtc	.+6      	; 0x1c3c <__addsf3+0x1e>
    1c36:	33 c1       	rjmp	.+614    	; 0x1e9e <__fp_nan>
    1c38:	0e f4       	brtc	.+2      	; 0x1c3c <__addsf3+0x1e>
    1c3a:	e0 95       	com	r30
    1c3c:	e7 fb       	bst	r30, 7
    1c3e:	29 c1       	rjmp	.+594    	; 0x1e92 <__fp_inf>

00001c40 <__addsf3x>:
    1c40:	e9 2f       	mov	r30, r25
    1c42:	4f d1       	rcall	.+670    	; 0x1ee2 <__fp_split3>
    1c44:	80 f3       	brcs	.-32     	; 0x1c26 <__addsf3+0x8>
    1c46:	ba 17       	cp	r27, r26
    1c48:	62 07       	cpc	r22, r18
    1c4a:	73 07       	cpc	r23, r19
    1c4c:	84 07       	cpc	r24, r20
    1c4e:	95 07       	cpc	r25, r21
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <__addsf3x+0x18>
    1c52:	71 f4       	brne	.+28     	; 0x1c70 <__addsf3x+0x30>
    1c54:	9e f5       	brtc	.+102    	; 0x1cbc <__addsf3x+0x7c>
    1c56:	67 c1       	rjmp	.+718    	; 0x1f26 <__fp_zero>
    1c58:	0e f4       	brtc	.+2      	; 0x1c5c <__addsf3x+0x1c>
    1c5a:	e0 95       	com	r30
    1c5c:	0b 2e       	mov	r0, r27
    1c5e:	ba 2f       	mov	r27, r26
    1c60:	a0 2d       	mov	r26, r0
    1c62:	0b 01       	movw	r0, r22
    1c64:	b9 01       	movw	r22, r18
    1c66:	90 01       	movw	r18, r0
    1c68:	0c 01       	movw	r0, r24
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	a0 01       	movw	r20, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	ff 27       	eor	r31, r31
    1c72:	59 1b       	sub	r21, r25
    1c74:	99 f0       	breq	.+38     	; 0x1c9c <__addsf3x+0x5c>
    1c76:	59 3f       	cpi	r21, 0xF9	; 249
    1c78:	50 f4       	brcc	.+20     	; 0x1c8e <__addsf3x+0x4e>
    1c7a:	50 3e       	cpi	r21, 0xE0	; 224
    1c7c:	68 f1       	brcs	.+90     	; 0x1cd8 <__addsf3x+0x98>
    1c7e:	1a 16       	cp	r1, r26
    1c80:	f0 40       	sbci	r31, 0x00	; 0
    1c82:	a2 2f       	mov	r26, r18
    1c84:	23 2f       	mov	r18, r19
    1c86:	34 2f       	mov	r19, r20
    1c88:	44 27       	eor	r20, r20
    1c8a:	58 5f       	subi	r21, 0xF8	; 248
    1c8c:	f3 cf       	rjmp	.-26     	; 0x1c74 <__addsf3x+0x34>
    1c8e:	46 95       	lsr	r20
    1c90:	37 95       	ror	r19
    1c92:	27 95       	ror	r18
    1c94:	a7 95       	ror	r26
    1c96:	f0 40       	sbci	r31, 0x00	; 0
    1c98:	53 95       	inc	r21
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__addsf3x+0x4e>
    1c9c:	7e f4       	brtc	.+30     	; 0x1cbc <__addsf3x+0x7c>
    1c9e:	1f 16       	cp	r1, r31
    1ca0:	ba 0b       	sbc	r27, r26
    1ca2:	62 0b       	sbc	r22, r18
    1ca4:	73 0b       	sbc	r23, r19
    1ca6:	84 0b       	sbc	r24, r20
    1ca8:	ba f0       	brmi	.+46     	; 0x1cd8 <__addsf3x+0x98>
    1caa:	91 50       	subi	r25, 0x01	; 1
    1cac:	a1 f0       	breq	.+40     	; 0x1cd6 <__addsf3x+0x96>
    1cae:	ff 0f       	add	r31, r31
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	66 1f       	adc	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	c2 f7       	brpl	.-16     	; 0x1caa <__addsf3x+0x6a>
    1cba:	0e c0       	rjmp	.+28     	; 0x1cd8 <__addsf3x+0x98>
    1cbc:	ba 0f       	add	r27, r26
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	73 1f       	adc	r23, r19
    1cc2:	84 1f       	adc	r24, r20
    1cc4:	48 f4       	brcc	.+18     	; 0x1cd8 <__addsf3x+0x98>
    1cc6:	87 95       	ror	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	f7 95       	ror	r31
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <__addsf3x+0x96>
    1cd4:	b3 cf       	rjmp	.-154    	; 0x1c3c <__addsf3+0x1e>
    1cd6:	93 95       	inc	r25
    1cd8:	88 0f       	add	r24, r24
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <__addsf3x+0x9e>
    1cdc:	99 27       	eor	r25, r25
    1cde:	ee 0f       	add	r30, r30
    1ce0:	97 95       	ror	r25
    1ce2:	87 95       	ror	r24
    1ce4:	08 95       	ret

00001ce6 <__divsf3>:
    1ce6:	0c d0       	rcall	.+24     	; 0x1d00 <__divsf3x>
    1ce8:	eb c0       	rjmp	.+470    	; 0x1ec0 <__fp_round>
    1cea:	e3 d0       	rcall	.+454    	; 0x1eb2 <__fp_pscB>
    1cec:	40 f0       	brcs	.+16     	; 0x1cfe <__divsf3+0x18>
    1cee:	da d0       	rcall	.+436    	; 0x1ea4 <__fp_pscA>
    1cf0:	30 f0       	brcs	.+12     	; 0x1cfe <__divsf3+0x18>
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <__divsf3+0x16>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <__divsf3+0x18>
    1cf8:	cc c0       	rjmp	.+408    	; 0x1e92 <__fp_inf>
    1cfa:	51 11       	cpse	r21, r1
    1cfc:	15 c1       	rjmp	.+554    	; 0x1f28 <__fp_szero>
    1cfe:	cf c0       	rjmp	.+414    	; 0x1e9e <__fp_nan>

00001d00 <__divsf3x>:
    1d00:	f0 d0       	rcall	.+480    	; 0x1ee2 <__fp_split3>
    1d02:	98 f3       	brcs	.-26     	; 0x1cea <__divsf3+0x4>

00001d04 <__divsf3_pse>:
    1d04:	99 23       	and	r25, r25
    1d06:	c9 f3       	breq	.-14     	; 0x1cfa <__divsf3+0x14>
    1d08:	55 23       	and	r21, r21
    1d0a:	b1 f3       	breq	.-20     	; 0x1cf8 <__divsf3+0x12>
    1d0c:	95 1b       	sub	r25, r21
    1d0e:	55 0b       	sbc	r21, r21
    1d10:	bb 27       	eor	r27, r27
    1d12:	aa 27       	eor	r26, r26
    1d14:	62 17       	cp	r22, r18
    1d16:	73 07       	cpc	r23, r19
    1d18:	84 07       	cpc	r24, r20
    1d1a:	38 f0       	brcs	.+14     	; 0x1d2a <__divsf3_pse+0x26>
    1d1c:	9f 5f       	subi	r25, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d20:	22 0f       	add	r18, r18
    1d22:	33 1f       	adc	r19, r19
    1d24:	44 1f       	adc	r20, r20
    1d26:	aa 1f       	adc	r26, r26
    1d28:	a9 f3       	breq	.-22     	; 0x1d14 <__divsf3_pse+0x10>
    1d2a:	33 d0       	rcall	.+102    	; 0x1d92 <__divsf3_pse+0x8e>
    1d2c:	0e 2e       	mov	r0, r30
    1d2e:	3a f0       	brmi	.+14     	; 0x1d3e <__divsf3_pse+0x3a>
    1d30:	e0 e8       	ldi	r30, 0x80	; 128
    1d32:	30 d0       	rcall	.+96     	; 0x1d94 <__divsf3_pse+0x90>
    1d34:	91 50       	subi	r25, 0x01	; 1
    1d36:	50 40       	sbci	r21, 0x00	; 0
    1d38:	e6 95       	lsr	r30
    1d3a:	00 1c       	adc	r0, r0
    1d3c:	ca f7       	brpl	.-14     	; 0x1d30 <__divsf3_pse+0x2c>
    1d3e:	29 d0       	rcall	.+82     	; 0x1d92 <__divsf3_pse+0x8e>
    1d40:	fe 2f       	mov	r31, r30
    1d42:	27 d0       	rcall	.+78     	; 0x1d92 <__divsf3_pse+0x8e>
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	26 17       	cp	r18, r22
    1d4e:	37 07       	cpc	r19, r23
    1d50:	48 07       	cpc	r20, r24
    1d52:	ab 07       	cpc	r26, r27
    1d54:	b0 e8       	ldi	r27, 0x80	; 128
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <__divsf3_pse+0x56>
    1d58:	bb 0b       	sbc	r27, r27
    1d5a:	80 2d       	mov	r24, r0
    1d5c:	bf 01       	movw	r22, r30
    1d5e:	ff 27       	eor	r31, r31
    1d60:	93 58       	subi	r25, 0x83	; 131
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	2a f0       	brmi	.+10     	; 0x1d70 <__divsf3_pse+0x6c>
    1d66:	9e 3f       	cpi	r25, 0xFE	; 254
    1d68:	51 05       	cpc	r21, r1
    1d6a:	68 f0       	brcs	.+26     	; 0x1d86 <__divsf3_pse+0x82>
    1d6c:	92 c0       	rjmp	.+292    	; 0x1e92 <__fp_inf>
    1d6e:	dc c0       	rjmp	.+440    	; 0x1f28 <__fp_szero>
    1d70:	5f 3f       	cpi	r21, 0xFF	; 255
    1d72:	ec f3       	brlt	.-6      	; 0x1d6e <__divsf3_pse+0x6a>
    1d74:	98 3e       	cpi	r25, 0xE8	; 232
    1d76:	dc f3       	brlt	.-10     	; 0x1d6e <__divsf3_pse+0x6a>
    1d78:	86 95       	lsr	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	f7 95       	ror	r31
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__divsf3_pse+0x74>
    1d86:	88 0f       	add	r24, r24
    1d88:	91 1d       	adc	r25, r1
    1d8a:	96 95       	lsr	r25
    1d8c:	87 95       	ror	r24
    1d8e:	97 f9       	bld	r25, 7
    1d90:	08 95       	ret
    1d92:	e1 e0       	ldi	r30, 0x01	; 1
    1d94:	66 0f       	add	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	62 17       	cp	r22, r18
    1d9e:	73 07       	cpc	r23, r19
    1da0:	84 07       	cpc	r24, r20
    1da2:	ba 07       	cpc	r27, r26
    1da4:	20 f0       	brcs	.+8      	; 0x1dae <__divsf3_pse+0xaa>
    1da6:	62 1b       	sub	r22, r18
    1da8:	73 0b       	sbc	r23, r19
    1daa:	84 0b       	sbc	r24, r20
    1dac:	ba 0b       	sbc	r27, r26
    1dae:	ee 1f       	adc	r30, r30
    1db0:	88 f7       	brcc	.-30     	; 0x1d94 <__divsf3_pse+0x90>
    1db2:	e0 95       	com	r30
    1db4:	08 95       	ret

00001db6 <__fixsfsi>:
    1db6:	04 d0       	rcall	.+8      	; 0x1dc0 <__fixunssfsi>
    1db8:	68 94       	set
    1dba:	b1 11       	cpse	r27, r1
    1dbc:	b5 c0       	rjmp	.+362    	; 0x1f28 <__fp_szero>
    1dbe:	08 95       	ret

00001dc0 <__fixunssfsi>:
    1dc0:	98 d0       	rcall	.+304    	; 0x1ef2 <__fp_splitA>
    1dc2:	88 f0       	brcs	.+34     	; 0x1de6 <__fixunssfsi+0x26>
    1dc4:	9f 57       	subi	r25, 0x7F	; 127
    1dc6:	90 f0       	brcs	.+36     	; 0x1dec <__fixunssfsi+0x2c>
    1dc8:	b9 2f       	mov	r27, r25
    1dca:	99 27       	eor	r25, r25
    1dcc:	b7 51       	subi	r27, 0x17	; 23
    1dce:	a0 f0       	brcs	.+40     	; 0x1df8 <__fixunssfsi+0x38>
    1dd0:	d1 f0       	breq	.+52     	; 0x1e06 <__fixunssfsi+0x46>
    1dd2:	66 0f       	add	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	1a f0       	brmi	.+6      	; 0x1de2 <__fixunssfsi+0x22>
    1ddc:	ba 95       	dec	r27
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <__fixunssfsi+0x12>
    1de0:	12 c0       	rjmp	.+36     	; 0x1e06 <__fixunssfsi+0x46>
    1de2:	b1 30       	cpi	r27, 0x01	; 1
    1de4:	81 f0       	breq	.+32     	; 0x1e06 <__fixunssfsi+0x46>
    1de6:	9f d0       	rcall	.+318    	; 0x1f26 <__fp_zero>
    1de8:	b1 e0       	ldi	r27, 0x01	; 1
    1dea:	08 95       	ret
    1dec:	9c c0       	rjmp	.+312    	; 0x1f26 <__fp_zero>
    1dee:	67 2f       	mov	r22, r23
    1df0:	78 2f       	mov	r23, r24
    1df2:	88 27       	eor	r24, r24
    1df4:	b8 5f       	subi	r27, 0xF8	; 248
    1df6:	39 f0       	breq	.+14     	; 0x1e06 <__fixunssfsi+0x46>
    1df8:	b9 3f       	cpi	r27, 0xF9	; 249
    1dfa:	cc f3       	brlt	.-14     	; 0x1dee <__fixunssfsi+0x2e>
    1dfc:	86 95       	lsr	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	b3 95       	inc	r27
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <__fixunssfsi+0x3c>
    1e06:	3e f4       	brtc	.+14     	; 0x1e16 <__fixunssfsi+0x56>
    1e08:	90 95       	com	r25
    1e0a:	80 95       	com	r24
    1e0c:	70 95       	com	r23
    1e0e:	61 95       	neg	r22
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	8f 4f       	sbci	r24, 0xFF	; 255
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	08 95       	ret

00001e18 <__floatunsisf>:
    1e18:	e8 94       	clt
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <__floatsisf+0x12>

00001e1c <__floatsisf>:
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__floatsisf+0x12>
    1e20:	90 95       	com	r25
    1e22:	80 95       	com	r24
    1e24:	70 95       	com	r23
    1e26:	61 95       	neg	r22
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	99 23       	and	r25, r25
    1e30:	a9 f0       	breq	.+42     	; 0x1e5c <__floatsisf+0x40>
    1e32:	f9 2f       	mov	r31, r25
    1e34:	96 e9       	ldi	r25, 0x96	; 150
    1e36:	bb 27       	eor	r27, r27
    1e38:	93 95       	inc	r25
    1e3a:	f6 95       	lsr	r31
    1e3c:	87 95       	ror	r24
    1e3e:	77 95       	ror	r23
    1e40:	67 95       	ror	r22
    1e42:	b7 95       	ror	r27
    1e44:	f1 11       	cpse	r31, r1
    1e46:	f8 cf       	rjmp	.-16     	; 0x1e38 <__floatsisf+0x1c>
    1e48:	fa f4       	brpl	.+62     	; 0x1e88 <__floatsisf+0x6c>
    1e4a:	bb 0f       	add	r27, r27
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <__floatsisf+0x36>
    1e4e:	60 ff       	sbrs	r22, 0
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <__floatsisf+0x6c>
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	8f 4f       	sbci	r24, 0xFF	; 255
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	16 c0       	rjmp	.+44     	; 0x1e88 <__floatsisf+0x6c>
    1e5c:	88 23       	and	r24, r24
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <__floatsisf+0x48>
    1e60:	96 e9       	ldi	r25, 0x96	; 150
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <__floatsisf+0x6a>
    1e64:	77 23       	and	r23, r23
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <__floatsisf+0x54>
    1e68:	9e e8       	ldi	r25, 0x8E	; 142
    1e6a:	87 2f       	mov	r24, r23
    1e6c:	76 2f       	mov	r23, r22
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <__floatsisf+0x5e>
    1e70:	66 23       	and	r22, r22
    1e72:	71 f0       	breq	.+28     	; 0x1e90 <__floatsisf+0x74>
    1e74:	96 e8       	ldi	r25, 0x86	; 134
    1e76:	86 2f       	mov	r24, r22
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	2a f0       	brmi	.+10     	; 0x1e88 <__floatsisf+0x6c>
    1e7e:	9a 95       	dec	r25
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	da f7       	brpl	.-10     	; 0x1e7e <__floatsisf+0x62>
    1e88:	88 0f       	add	r24, r24
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret

00001e92 <__fp_inf>:
    1e92:	97 f9       	bld	r25, 7
    1e94:	9f 67       	ori	r25, 0x7F	; 127
    1e96:	80 e8       	ldi	r24, 0x80	; 128
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	08 95       	ret

00001e9e <__fp_nan>:
    1e9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ea0:	80 ec       	ldi	r24, 0xC0	; 192
    1ea2:	08 95       	ret

00001ea4 <__fp_pscA>:
    1ea4:	00 24       	eor	r0, r0
    1ea6:	0a 94       	dec	r0
    1ea8:	16 16       	cp	r1, r22
    1eaa:	17 06       	cpc	r1, r23
    1eac:	18 06       	cpc	r1, r24
    1eae:	09 06       	cpc	r0, r25
    1eb0:	08 95       	ret

00001eb2 <__fp_pscB>:
    1eb2:	00 24       	eor	r0, r0
    1eb4:	0a 94       	dec	r0
    1eb6:	12 16       	cp	r1, r18
    1eb8:	13 06       	cpc	r1, r19
    1eba:	14 06       	cpc	r1, r20
    1ebc:	05 06       	cpc	r0, r21
    1ebe:	08 95       	ret

00001ec0 <__fp_round>:
    1ec0:	09 2e       	mov	r0, r25
    1ec2:	03 94       	inc	r0
    1ec4:	00 0c       	add	r0, r0
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc <__fp_round+0xc>
    1ec8:	88 23       	and	r24, r24
    1eca:	52 f0       	brmi	.+20     	; 0x1ee0 <__fp_round+0x20>
    1ecc:	bb 0f       	add	r27, r27
    1ece:	40 f4       	brcc	.+16     	; 0x1ee0 <__fp_round+0x20>
    1ed0:	bf 2b       	or	r27, r31
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <__fp_round+0x18>
    1ed4:	60 ff       	sbrs	r22, 0
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <__fp_round+0x20>
    1ed8:	6f 5f       	subi	r22, 0xFF	; 255
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	08 95       	ret

00001ee2 <__fp_split3>:
    1ee2:	57 fd       	sbrc	r21, 7
    1ee4:	90 58       	subi	r25, 0x80	; 128
    1ee6:	44 0f       	add	r20, r20
    1ee8:	55 1f       	adc	r21, r21
    1eea:	59 f0       	breq	.+22     	; 0x1f02 <__fp_splitA+0x10>
    1eec:	5f 3f       	cpi	r21, 0xFF	; 255
    1eee:	71 f0       	breq	.+28     	; 0x1f0c <__fp_splitA+0x1a>
    1ef0:	47 95       	ror	r20

00001ef2 <__fp_splitA>:
    1ef2:	88 0f       	add	r24, r24
    1ef4:	97 fb       	bst	r25, 7
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	61 f0       	breq	.+24     	; 0x1f12 <__fp_splitA+0x20>
    1efa:	9f 3f       	cpi	r25, 0xFF	; 255
    1efc:	79 f0       	breq	.+30     	; 0x1f1c <__fp_splitA+0x2a>
    1efe:	87 95       	ror	r24
    1f00:	08 95       	ret
    1f02:	12 16       	cp	r1, r18
    1f04:	13 06       	cpc	r1, r19
    1f06:	14 06       	cpc	r1, r20
    1f08:	55 1f       	adc	r21, r21
    1f0a:	f2 cf       	rjmp	.-28     	; 0x1ef0 <__fp_split3+0xe>
    1f0c:	46 95       	lsr	r20
    1f0e:	f1 df       	rcall	.-30     	; 0x1ef2 <__fp_splitA>
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <__fp_splitA+0x30>
    1f12:	16 16       	cp	r1, r22
    1f14:	17 06       	cpc	r1, r23
    1f16:	18 06       	cpc	r1, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	f1 cf       	rjmp	.-30     	; 0x1efe <__fp_splitA+0xc>
    1f1c:	86 95       	lsr	r24
    1f1e:	71 05       	cpc	r23, r1
    1f20:	61 05       	cpc	r22, r1
    1f22:	08 94       	sec
    1f24:	08 95       	ret

00001f26 <__fp_zero>:
    1f26:	e8 94       	clt

00001f28 <__fp_szero>:
    1f28:	bb 27       	eor	r27, r27
    1f2a:	66 27       	eor	r22, r22
    1f2c:	77 27       	eor	r23, r23
    1f2e:	cb 01       	movw	r24, r22
    1f30:	97 f9       	bld	r25, 7
    1f32:	08 95       	ret

00001f34 <__mulsf3>:
    1f34:	0b d0       	rcall	.+22     	; 0x1f4c <__mulsf3x>
    1f36:	c4 cf       	rjmp	.-120    	; 0x1ec0 <__fp_round>
    1f38:	b5 df       	rcall	.-150    	; 0x1ea4 <__fp_pscA>
    1f3a:	28 f0       	brcs	.+10     	; 0x1f46 <__mulsf3+0x12>
    1f3c:	ba df       	rcall	.-140    	; 0x1eb2 <__fp_pscB>
    1f3e:	18 f0       	brcs	.+6      	; 0x1f46 <__mulsf3+0x12>
    1f40:	95 23       	and	r25, r21
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <__mulsf3+0x12>
    1f44:	a6 cf       	rjmp	.-180    	; 0x1e92 <__fp_inf>
    1f46:	ab cf       	rjmp	.-170    	; 0x1e9e <__fp_nan>
    1f48:	11 24       	eor	r1, r1
    1f4a:	ee cf       	rjmp	.-36     	; 0x1f28 <__fp_szero>

00001f4c <__mulsf3x>:
    1f4c:	ca df       	rcall	.-108    	; 0x1ee2 <__fp_split3>
    1f4e:	a0 f3       	brcs	.-24     	; 0x1f38 <__mulsf3+0x4>

00001f50 <__mulsf3_pse>:
    1f50:	95 9f       	mul	r25, r21
    1f52:	d1 f3       	breq	.-12     	; 0x1f48 <__mulsf3+0x14>
    1f54:	95 0f       	add	r25, r21
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	55 1f       	adc	r21, r21
    1f5a:	62 9f       	mul	r22, r18
    1f5c:	f0 01       	movw	r30, r0
    1f5e:	72 9f       	mul	r23, r18
    1f60:	bb 27       	eor	r27, r27
    1f62:	f0 0d       	add	r31, r0
    1f64:	b1 1d       	adc	r27, r1
    1f66:	63 9f       	mul	r22, r19
    1f68:	aa 27       	eor	r26, r26
    1f6a:	f0 0d       	add	r31, r0
    1f6c:	b1 1d       	adc	r27, r1
    1f6e:	aa 1f       	adc	r26, r26
    1f70:	64 9f       	mul	r22, r20
    1f72:	66 27       	eor	r22, r22
    1f74:	b0 0d       	add	r27, r0
    1f76:	a1 1d       	adc	r26, r1
    1f78:	66 1f       	adc	r22, r22
    1f7a:	82 9f       	mul	r24, r18
    1f7c:	22 27       	eor	r18, r18
    1f7e:	b0 0d       	add	r27, r0
    1f80:	a1 1d       	adc	r26, r1
    1f82:	62 1f       	adc	r22, r18
    1f84:	73 9f       	mul	r23, r19
    1f86:	b0 0d       	add	r27, r0
    1f88:	a1 1d       	adc	r26, r1
    1f8a:	62 1f       	adc	r22, r18
    1f8c:	83 9f       	mul	r24, r19
    1f8e:	a0 0d       	add	r26, r0
    1f90:	61 1d       	adc	r22, r1
    1f92:	22 1f       	adc	r18, r18
    1f94:	74 9f       	mul	r23, r20
    1f96:	33 27       	eor	r19, r19
    1f98:	a0 0d       	add	r26, r0
    1f9a:	61 1d       	adc	r22, r1
    1f9c:	23 1f       	adc	r18, r19
    1f9e:	84 9f       	mul	r24, r20
    1fa0:	60 0d       	add	r22, r0
    1fa2:	21 1d       	adc	r18, r1
    1fa4:	82 2f       	mov	r24, r18
    1fa6:	76 2f       	mov	r23, r22
    1fa8:	6a 2f       	mov	r22, r26
    1faa:	11 24       	eor	r1, r1
    1fac:	9f 57       	subi	r25, 0x7F	; 127
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	8a f0       	brmi	.+34     	; 0x1fd4 <__mulsf3_pse+0x84>
    1fb2:	e1 f0       	breq	.+56     	; 0x1fec <__mulsf3_pse+0x9c>
    1fb4:	88 23       	and	r24, r24
    1fb6:	4a f0       	brmi	.+18     	; 0x1fca <__mulsf3_pse+0x7a>
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	bb 1f       	adc	r27, r27
    1fbe:	66 1f       	adc	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	91 50       	subi	r25, 0x01	; 1
    1fc6:	50 40       	sbci	r21, 0x00	; 0
    1fc8:	a9 f7       	brne	.-22     	; 0x1fb4 <__mulsf3_pse+0x64>
    1fca:	9e 3f       	cpi	r25, 0xFE	; 254
    1fcc:	51 05       	cpc	r21, r1
    1fce:	70 f0       	brcs	.+28     	; 0x1fec <__mulsf3_pse+0x9c>
    1fd0:	60 cf       	rjmp	.-320    	; 0x1e92 <__fp_inf>
    1fd2:	aa cf       	rjmp	.-172    	; 0x1f28 <__fp_szero>
    1fd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd6:	ec f3       	brlt	.-6      	; 0x1fd2 <__mulsf3_pse+0x82>
    1fd8:	98 3e       	cpi	r25, 0xE8	; 232
    1fda:	dc f3       	brlt	.-10     	; 0x1fd2 <__mulsf3_pse+0x82>
    1fdc:	86 95       	lsr	r24
    1fde:	77 95       	ror	r23
    1fe0:	67 95       	ror	r22
    1fe2:	b7 95       	ror	r27
    1fe4:	f7 95       	ror	r31
    1fe6:	e7 95       	ror	r30
    1fe8:	9f 5f       	subi	r25, 0xFF	; 255
    1fea:	c1 f7       	brne	.-16     	; 0x1fdc <__mulsf3_pse+0x8c>
    1fec:	fe 2b       	or	r31, r30
    1fee:	88 0f       	add	r24, r24
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	96 95       	lsr	r25
    1ff4:	87 95       	ror	r24
    1ff6:	97 f9       	bld	r25, 7
    1ff8:	08 95       	ret

00001ffa <__divmodhi4>:
    1ffa:	97 fb       	bst	r25, 7
    1ffc:	07 2e       	mov	r0, r23
    1ffe:	16 f4       	brtc	.+4      	; 0x2004 <__divmodhi4+0xa>
    2000:	00 94       	com	r0
    2002:	06 d0       	rcall	.+12     	; 0x2010 <__divmodhi4_neg1>
    2004:	77 fd       	sbrc	r23, 7
    2006:	08 d0       	rcall	.+16     	; 0x2018 <__divmodhi4_neg2>
    2008:	11 d0       	rcall	.+34     	; 0x202c <__udivmodhi4>
    200a:	07 fc       	sbrc	r0, 7
    200c:	05 d0       	rcall	.+10     	; 0x2018 <__divmodhi4_neg2>
    200e:	3e f4       	brtc	.+14     	; 0x201e <__divmodhi4_exit>

00002010 <__divmodhi4_neg1>:
    2010:	90 95       	com	r25
    2012:	81 95       	neg	r24
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	08 95       	ret

00002018 <__divmodhi4_neg2>:
    2018:	70 95       	com	r23
    201a:	61 95       	neg	r22
    201c:	7f 4f       	sbci	r23, 0xFF	; 255

0000201e <__divmodhi4_exit>:
    201e:	08 95       	ret

00002020 <__mulshisi3>:
    2020:	b7 ff       	sbrs	r27, 7
    2022:	18 c0       	rjmp	.+48     	; 0x2054 <__muluhisi3>

00002024 <__mulohisi3>:
    2024:	17 d0       	rcall	.+46     	; 0x2054 <__muluhisi3>
    2026:	82 1b       	sub	r24, r18
    2028:	93 0b       	sbc	r25, r19
    202a:	08 95       	ret

0000202c <__udivmodhi4>:
    202c:	aa 1b       	sub	r26, r26
    202e:	bb 1b       	sub	r27, r27
    2030:	51 e1       	ldi	r21, 0x11	; 17
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <__udivmodhi4_ep>

00002034 <__udivmodhi4_loop>:
    2034:	aa 1f       	adc	r26, r26
    2036:	bb 1f       	adc	r27, r27
    2038:	a6 17       	cp	r26, r22
    203a:	b7 07       	cpc	r27, r23
    203c:	10 f0       	brcs	.+4      	; 0x2042 <__udivmodhi4_ep>
    203e:	a6 1b       	sub	r26, r22
    2040:	b7 0b       	sbc	r27, r23

00002042 <__udivmodhi4_ep>:
    2042:	88 1f       	adc	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	5a 95       	dec	r21
    2048:	a9 f7       	brne	.-22     	; 0x2034 <__udivmodhi4_loop>
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	08 95       	ret

00002054 <__muluhisi3>:
    2054:	09 d0       	rcall	.+18     	; 0x2068 <__umulhisi3>
    2056:	a5 9f       	mul	r26, r21
    2058:	90 0d       	add	r25, r0
    205a:	b4 9f       	mul	r27, r20
    205c:	90 0d       	add	r25, r0
    205e:	a4 9f       	mul	r26, r20
    2060:	80 0d       	add	r24, r0
    2062:	91 1d       	adc	r25, r1
    2064:	11 24       	eor	r1, r1
    2066:	08 95       	ret

00002068 <__umulhisi3>:
    2068:	a2 9f       	mul	r26, r18
    206a:	b0 01       	movw	r22, r0
    206c:	b3 9f       	mul	r27, r19
    206e:	c0 01       	movw	r24, r0
    2070:	a3 9f       	mul	r26, r19
    2072:	70 0d       	add	r23, r0
    2074:	81 1d       	adc	r24, r1
    2076:	11 24       	eor	r1, r1
    2078:	91 1d       	adc	r25, r1
    207a:	b2 9f       	mul	r27, r18
    207c:	70 0d       	add	r23, r0
    207e:	81 1d       	adc	r24, r1
    2080:	11 24       	eor	r1, r1
    2082:	91 1d       	adc	r25, r1
    2084:	08 95       	ret

00002086 <strcpy>:
    2086:	fb 01       	movw	r30, r22
    2088:	dc 01       	movw	r26, r24
    208a:	01 90       	ld	r0, Z+
    208c:	0d 92       	st	X+, r0
    208e:	00 20       	and	r0, r0
    2090:	e1 f7       	brne	.-8      	; 0x208a <strcpy+0x4>
    2092:	08 95       	ret

00002094 <_exit>:
    2094:	f8 94       	cli

00002096 <__stop_program>:
    2096:	ff cf       	rjmp	.-2      	; 0x2096 <__stop_program>
