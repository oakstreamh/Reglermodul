
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00002776  0000280a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001fa  008001fa  00002904  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003524  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bc5  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002836  00000000  00000000  00006c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  0000943c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010cf0  00000000  00000000  00009a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000183f  00000000  00000000  0001a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  0001bf9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b94  00000000  00000000  0001c13b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_19>
      50:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e7       	ldi	r30, 0x76	; 118
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3f       	cpi	r26, 0xFA	; 250
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ef       	ldi	r26, 0xFA	; 250
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 34       	cpi	r26, 0x42	; 66
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <main>
      c6:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	int req_count = (int) req_delay*F_CPU/1024-1;
	if(TCNT3<req_count)
      f0:	e0 91 94 00 	lds	r30, 0x0094
      f4:	f0 91 95 00 	lds	r31, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024-1;
      f8:	dc 01       	movw	r26, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	41 ee       	ldi	r20, 0xE1	; 225
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulshisi3>
     106:	8b 01       	movw	r16, r22
     108:	9c 01       	movw	r18, r24
     10a:	99 23       	and	r25, r25
     10c:	24 f4       	brge	.+8      	; 0x116 <checkCount+0x2a>
     10e:	01 50       	subi	r16, 0x01	; 1
     110:	1c 4f       	sbci	r17, 0xFC	; 252
     112:	2f 4f       	sbci	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	d9 01       	movw	r26, r18
     118:	c8 01       	movw	r24, r16
     11a:	07 2e       	mov	r0, r23
     11c:	7a e0       	ldi	r23, 0x0A	; 10
     11e:	b5 95       	asr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	7a 95       	dec	r23
     128:	d1 f7       	brne	.-12     	; 0x11e <checkCount+0x32>
     12a:	70 2d       	mov	r23, r0
     12c:	01 97       	sbiw	r24, 0x01	; 1
	if(TCNT3<req_count)
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	e8 17       	cp	r30, r24
     134:	f9 07       	cpc	r31, r25
     136:	10 f4       	brcc	.+4      	; 0x13c <checkCount+0x50>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 0;
	}
	return 1;
     13c:	c9 01       	movw	r24, r18
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange, int currentEsc)
{
     144:	2f 92       	push	r2
     146:	3f 92       	push	r3
     148:	4f 92       	push	r4
     14a:	5f 92       	push	r5
     14c:	6f 92       	push	r6
     14e:	7f 92       	push	r7
     150:	8f 92       	push	r8
     152:	9f 92       	push	r9
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	ca 5b       	subi	r28, 0xBA	; 186
     16e:	d2 40       	sbci	r29, 0x02	; 2
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	7b 01       	movw	r14, r22
     17c:	6a 01       	movw	r12, r20
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     17e:	29 e0       	ldi	r18, 0x09	; 9
     180:	e4 e0       	ldi	r30, 0x04	; 4
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	de 01       	movw	r26, r28
     186:	11 96       	adiw	r26, 0x01	; 1
     188:	01 90       	ld	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	2a 95       	dec	r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <FLC_speed+0x44>
	struct io_type steering; strcpy(steering.name, "steering");
     190:	29 e0       	ldi	r18, 0x09	; 9
     192:	ed e0       	ldi	r30, 0x0D	; 13
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	de 01       	movw	r26, r28
     198:	51 96       	adiw	r26, 0x11	; 17
     19a:	01 90       	ld	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	2a 95       	dec	r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <FLC_speed+0x56>
	struct io_type esc; strcpy(esc.name, "esc");
     1a2:	05 e6       	ldi	r16, 0x65	; 101
     1a4:	13 e7       	ldi	r17, 0x73	; 115
     1a6:	23 e6       	ldi	r18, 0x63	; 99
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	09 a3       	std	Y+33, r16	; 0x21
     1ac:	1a a3       	std	Y+34, r17	; 0x22
     1ae:	2b a3       	std	Y+35, r18	; 0x23
     1b0:	3c a3       	std	Y+36, r19	; 0x24

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     1b2:	26 e0       	ldi	r18, 0x06	; 6
     1b4:	e6 e1       	ldi	r30, 0x16	; 22
     1b6:	f1 e0       	ldi	r31, 0x01	; 1
     1b8:	de 01       	movw	r26, r28
     1ba:	d1 96       	adiw	r26, 0x31	; 49
     1bc:	01 90       	ld	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	2a 95       	dec	r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <FLC_speed+0x78>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     1c4:	87 3e       	cpi	r24, 0xE7	; 231
     1c6:	17 e0       	ldi	r17, 0x07	; 7
     1c8:	91 07       	cpc	r25, r17
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <FLC_speed+0x92>
		steering.value = 202;
     1cc:	8a ec       	ldi	r24, 0xCA	; 202
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9c 8f       	std	Y+28, r25	; 0x1c
     1d2:	8b 8f       	std	Y+27, r24	; 0x1b
     1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <FLC_speed+0xb0>
	}
	else if (currentServo>=MAXRIGHT)
     1d6:	84 3e       	cpi	r24, 0xE4	; 228
     1d8:	2c e0       	ldi	r18, 0x0C	; 12
     1da:	92 07       	cpc	r25, r18
     1dc:	2c f0       	brlt	.+10     	; 0x1e8 <FLC_speed+0xa4>
	{
		steering.value = 330;
     1de:	8a e4       	ldi	r24, 0x4A	; 74
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9c 8f       	std	Y+28, r25	; 0x1c
     1e4:	8b 8f       	std	Y+27, r24	; 0x1b
     1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <FLC_speed+0xb0>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     1e8:	6a e0       	ldi	r22, 0x0A	; 10
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
     1f0:	7c 8f       	std	Y+28, r23	; 0x1c
     1f2:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// Variable assigned its reference value
	if (currentEsc<MINESC)
     1f4:	4f e5       	ldi	r20, 0x5F	; 95
     1f6:	c4 16       	cp	r12, r20
     1f8:	4a e0       	ldi	r20, 0x0A	; 10
     1fa:	d4 06       	cpc	r13, r20
     1fc:	2c f4       	brge	.+10     	; 0x208 <FLC_speed+0xc4>
	{
		esc.value = MINESC;
     1fe:	8f e5       	ldi	r24, 0x5F	; 95
     200:	9a e0       	ldi	r25, 0x0A	; 10
     202:	9c a7       	std	Y+44, r25	; 0x2c
     204:	8b a7       	std	Y+43, r24	; 0x2b
     206:	0c c0       	rjmp	.+24     	; 0x220 <FLC_speed+0xdc>
	}
	else if (currentEsc>MAXESC)
     208:	53 e2       	ldi	r21, 0x23	; 35
     20a:	c5 16       	cp	r12, r21
     20c:	5b e0       	ldi	r21, 0x0B	; 11
     20e:	d5 06       	cpc	r13, r21
     210:	2c f0       	brlt	.+10     	; 0x21c <FLC_speed+0xd8>
	{
		esc.value = MAXESC;
     212:	82 e2       	ldi	r24, 0x22	; 34
     214:	9b e0       	ldi	r25, 0x0B	; 11
     216:	9c a7       	std	Y+44, r25	; 0x2c
     218:	8b a7       	std	Y+43, r24	; 0x2b
     21a:	02 c0       	rjmp	.+4      	; 0x220 <FLC_speed+0xdc>
	}
	else
	{
		esc.value = currentEsc;
     21c:	dc a6       	std	Y+44, r13	; 0x2c
     21e:	cb a6       	std	Y+43, r12	; 0x2b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     220:	ff 20       	and	r15, r15
     222:	1c f4       	brge	.+6      	; 0x22a <FLC_speed+0xe6>
	{
		distance.value = MIN_DISTANCE;
     224:	1c 86       	std	Y+12, r1	; 0x0c
     226:	1b 86       	std	Y+11, r1	; 0x0b
     228:	0b c0       	rjmp	.+22     	; 0x240 <FLC_speed+0xfc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     22a:	6c e4       	ldi	r22, 0x4C	; 76
     22c:	e6 16       	cp	r14, r22
     22e:	f1 04       	cpc	r15, r1
     230:	2c f0       	brlt	.+10     	; 0x23c <FLC_speed+0xf8>
	{
		distance.value = MAX_DISTANCE;
     232:	8b e4       	ldi	r24, 0x4B	; 75
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	9c 87       	std	Y+12, r25	; 0x0c
     238:	8b 87       	std	Y+11, r24	; 0x0b
     23a:	02 c0       	rjmp	.+4      	; 0x240 <FLC_speed+0xfc>
	}
	else
	{
		distance.value = midSonicRange;
     23c:	fc 86       	std	Y+12, r15	; 0x0c
     23e:	eb 86       	std	Y+11, r14	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type maxLeft;
	MATLAB_MF(&maxLeft, "maxLeft", 201, 202, 205, 230);
     240:	0f 2e       	mov	r0, r31
     242:	f6 ee       	ldi	r31, 0xE6	; 230
     244:	ef 2e       	mov	r14, r31
     246:	f1 2c       	mov	r15, r1
     248:	f0 2d       	mov	r31, r0
     24a:	0d ec       	ldi	r16, 0xCD	; 205
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	2a ec       	ldi	r18, 0xCA	; 202
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	49 ec       	ldi	r20, 0xC9	; 201
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	6c e1       	ldi	r22, 0x1C	; 28
     258:	71 e0       	ldi	r23, 0x01	; 1
     25a:	ce 01       	movw	r24, r28
     25c:	8f 5b       	subi	r24, 0xBF	; 191
     25e:	9f 4f       	sbci	r25, 0xFF	; 255
     260:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 205, 230, 237, 262);
     264:	0f 2e       	mov	r0, r31
     266:	f6 e0       	ldi	r31, 0x06	; 6
     268:	ef 2e       	mov	r14, r31
     26a:	ff 24       	eor	r15, r15
     26c:	f3 94       	inc	r15
     26e:	f0 2d       	mov	r31, r0
     270:	0d ee       	ldi	r16, 0xED	; 237
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	26 ee       	ldi	r18, 0xE6	; 230
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	4d ec       	ldi	r20, 0xCD	; 205
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	64 e2       	ldi	r22, 0x24	; 36
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	ce 01       	movw	r24, r28
     282:	89 5a       	subi	r24, 0xA9	; 169
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 236, 266, 266, 296);
     28a:	0f 2e       	mov	r0, r31
     28c:	f8 e2       	ldi	r31, 0x28	; 40
     28e:	ef 2e       	mov	r14, r31
     290:	ff 24       	eor	r15, r15
     292:	f3 94       	inc	r15
     294:	f0 2d       	mov	r31, r0
     296:	0a e0       	ldi	r16, 0x0A	; 10
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	2a e0       	ldi	r18, 0x0A	; 10
     29c:	31 e0       	ldi	r19, 0x01	; 1
     29e:	4c ee       	ldi	r20, 0xEC	; 236
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	69 e2       	ldi	r22, 0x29	; 41
     2a4:	71 e0       	ldi	r23, 0x01	; 1
     2a6:	ce 01       	movw	r24, r28
     2a8:	83 59       	subi	r24, 0x93	; 147
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 267, 295, 302, 325);
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f5 e4       	ldi	r31, 0x45	; 69
     2b4:	ef 2e       	mov	r14, r31
     2b6:	ff 24       	eor	r15, r15
     2b8:	f3 94       	inc	r15
     2ba:	f0 2d       	mov	r31, r0
     2bc:	0e e2       	ldi	r16, 0x2E	; 46
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	27 e2       	ldi	r18, 0x27	; 39
     2c2:	31 e0       	ldi	r19, 0x01	; 1
     2c4:	4b e0       	ldi	r20, 0x0B	; 11
     2c6:	51 e0       	ldi	r21, 0x01	; 1
     2c8:	62 e3       	ldi	r22, 0x32	; 50
     2ca:	71 e0       	ldi	r23, 0x01	; 1
     2cc:	ce 01       	movw	r24, r28
     2ce:	8d 57       	subi	r24, 0x7D	; 125
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type maxRight;
	MATLAB_MF(&maxRight, "maxRight", 301, 325, 330, 331);
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fb e4       	ldi	r31, 0x4B	; 75
     2da:	ef 2e       	mov	r14, r31
     2dc:	ff 24       	eor	r15, r15
     2de:	f3 94       	inc	r15
     2e0:	f0 2d       	mov	r31, r0
     2e2:	0a e4       	ldi	r16, 0x4A	; 74
     2e4:	11 e0       	ldi	r17, 0x01	; 1
     2e6:	25 e4       	ldi	r18, 0x45	; 69
     2e8:	31 e0       	ldi	r19, 0x01	; 1
     2ea:	4d e2       	ldi	r20, 0x2D	; 45
     2ec:	51 e0       	ldi	r21, 0x01	; 1
     2ee:	68 e3       	ldi	r22, 0x38	; 56
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	ce 01       	movw	r24, r28
     2f4:	87 56       	subi	r24, 0x67	; 103
     2f6:	9f 4f       	sbci	r25, 0xFF	; 255
     2f8:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	

	// Linked list for MFs
	steering.membership_functions = &maxLeft;
     2fc:	81 e4       	ldi	r24, 0x41	; 65
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	8c 0f       	add	r24, r28
     302:	9d 1f       	adc	r25, r29
     304:	9e 8f       	std	Y+30, r25	; 0x1e
     306:	8d 8f       	std	Y+29, r24	; 0x1d
	maxLeft.next = &left;
     308:	a7 e5       	ldi	r26, 0x57	; 87
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	ac 0f       	add	r26, r28
     30e:	bd 1f       	adc	r27, r29
     310:	67 96       	adiw	r28, 0x17	; 23
     312:	bf af       	std	Y+63, r27	; 0x3f
     314:	ae af       	std	Y+62, r26	; 0x3e
     316:	67 97       	sbiw	r28, 0x17	; 23
	left.next = &straight;
     318:	ed e6       	ldi	r30, 0x6D	; 109
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ec 0f       	add	r30, r28
     31e:	fd 1f       	adc	r31, r29
     320:	ad 96       	adiw	r28, 0x2d	; 45
     322:	ff af       	std	Y+63, r31	; 0x3f
     324:	ee af       	std	Y+62, r30	; 0x3e
     326:	ad 97       	sbiw	r28, 0x2d	; 45
	straight.next = &right;
     328:	0f 2e       	mov	r0, r31
     32a:	f3 e8       	ldi	r31, 0x83	; 131
     32c:	ef 2e       	mov	r14, r31
     32e:	f1 2c       	mov	r15, r1
     330:	f0 2d       	mov	r31, r0
     332:	ec 0e       	add	r14, r28
     334:	fd 1e       	adc	r15, r29
     336:	cf 57       	subi	r28, 0x7F	; 127
     338:	df 4f       	sbci	r29, 0xFF	; 255
     33a:	f9 82       	std	Y+1, r15	; 0x01
     33c:	e8 82       	st	Y, r14
     33e:	c1 58       	subi	r28, 0x81	; 129
     340:	d0 40       	sbci	r29, 0x00	; 0
	right.next = & maxRight;
     342:	49 e9       	ldi	r20, 0x99	; 153
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	4c 0f       	add	r20, r28
     348:	5d 1f       	adc	r21, r29
     34a:	c9 56       	subi	r28, 0x69	; 105
     34c:	df 4f       	sbci	r29, 0xFF	; 255
     34e:	59 83       	std	Y+1, r21	; 0x01
     350:	48 83       	st	Y, r20
     352:	c7 59       	subi	r28, 0x97	; 151
     354:	d0 40       	sbci	r29, 0x00	; 0
	maxRight.next = NULL;
     356:	c3 55       	subi	r28, 0x53	; 83
     358:	df 4f       	sbci	r29, 0xFF	; 255
     35a:	19 82       	std	Y+1, r1	; 0x01
     35c:	18 82       	st	Y, r1
     35e:	cd 5a       	subi	r28, 0xAD	; 173
     360:	d0 40       	sbci	r29, 0x00	; 0
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 10, 20);
     362:	0f 2e       	mov	r0, r31
     364:	f4 e1       	ldi	r31, 0x14	; 20
     366:	ef 2e       	mov	r14, r31
     368:	f1 2c       	mov	r15, r1
     36a:	f0 2d       	mov	r31, r0
     36c:	0a e0       	ldi	r16, 0x0A	; 10
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	4f ef       	ldi	r20, 0xFF	; 255
     376:	5f ef       	ldi	r21, 0xFF	; 255
     378:	61 e4       	ldi	r22, 0x41	; 65
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	82 59       	subi	r24, 0x92	; 146
     37e:	9f 4f       	sbci	r25, 0xFF	; 255
     380:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 10, 30, 30, 50);
     384:	0f 2e       	mov	r0, r31
     386:	f2 e3       	ldi	r31, 0x32	; 50
     388:	ef 2e       	mov	r14, r31
     38a:	f1 2c       	mov	r15, r1
     38c:	f0 2d       	mov	r31, r0
     38e:	0e e1       	ldi	r16, 0x1E	; 30
     390:	10 e0       	ldi	r17, 0x00	; 0
     392:	2e e1       	ldi	r18, 0x1E	; 30
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4a e0       	ldi	r20, 0x0A	; 10
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	6a e4       	ldi	r22, 0x4A	; 74
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	ce 01       	movw	r24, r28
     3a0:	8b 53       	subi	r24, 0x3B	; 59
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type distant;
	MATLAB_MF(&distant, "distant", 30, 50, 50, 70);
     3a8:	0f 2e       	mov	r0, r31
     3aa:	f6 e4       	ldi	r31, 0x46	; 70
     3ac:	ef 2e       	mov	r14, r31
     3ae:	f1 2c       	mov	r15, r1
     3b0:	f0 2d       	mov	r31, r0
     3b2:	02 e3       	ldi	r16, 0x32	; 50
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	22 e3       	ldi	r18, 0x32	; 50
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	4e e1       	ldi	r20, 0x1E	; 30
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	60 e5       	ldi	r22, 0x50	; 80
     3c0:	71 e0       	ldi	r23, 0x01	; 1
     3c2:	ce 01       	movw	r24, r28
     3c4:	85 52       	subi	r24, 0x25	; 37
     3c6:	9f 4f       	sbci	r25, 0xFF	; 255
     3c8:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 50, 70, 75, MAX_DISTANCE+1);
     3cc:	0f 2e       	mov	r0, r31
     3ce:	fc e4       	ldi	r31, 0x4C	; 76
     3d0:	ef 2e       	mov	r14, r31
     3d2:	f1 2c       	mov	r15, r1
     3d4:	f0 2d       	mov	r31, r0
     3d6:	0b e4       	ldi	r16, 0x4B	; 75
     3d8:	10 e0       	ldi	r17, 0x00	; 0
     3da:	26 e4       	ldi	r18, 0x46	; 70
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	42 e3       	ldi	r20, 0x32	; 50
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	68 e5       	ldi	r22, 0x58	; 88
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	ce 01       	movw	r24, r28
     3e8:	8f 50       	subi	r24, 0x0F	; 15
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     3f0:	8f ea       	ldi	r24, 0xAF	; 175
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	8c 0f       	add	r24, r28
     3f6:	9d 1f       	adc	r25, r29
     3f8:	9e 87       	std	Y+14, r25	; 0x0e
     3fa:	8d 87       	std	Y+13, r24	; 0x0d
	stopDist.next = &close;
     3fc:	a5 ec       	ldi	r26, 0xC5	; 197
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	ac 0f       	add	r26, r28
     402:	bd 1f       	adc	r27, r29
     404:	cd 53       	subi	r28, 0x3D	; 61
     406:	df 4f       	sbci	r29, 0xFF	; 255
     408:	b9 83       	std	Y+1, r27	; 0x01
     40a:	a8 83       	st	Y, r26
     40c:	c3 5c       	subi	r28, 0xC3	; 195
     40e:	d0 40       	sbci	r29, 0x00	; 0
	close.next = &distant;
     410:	eb ed       	ldi	r30, 0xDB	; 219
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ec 0f       	add	r30, r28
     416:	fd 1f       	adc	r31, r29
     418:	c7 52       	subi	r28, 0x27	; 39
     41a:	df 4f       	sbci	r29, 0xFF	; 255
     41c:	f9 83       	std	Y+1, r31	; 0x01
     41e:	e8 83       	st	Y, r30
     420:	c9 5d       	subi	r28, 0xD9	; 217
     422:	d0 40       	sbci	r29, 0x00	; 0
	distant.next = &faar;
     424:	0f 2e       	mov	r0, r31
     426:	f1 ef       	ldi	r31, 0xF1	; 241
     428:	ef 2e       	mov	r14, r31
     42a:	f1 2c       	mov	r15, r1
     42c:	f0 2d       	mov	r31, r0
     42e:	ec 0e       	add	r14, r28
     430:	fd 1e       	adc	r15, r29
     432:	c1 51       	subi	r28, 0x11	; 17
     434:	df 4f       	sbci	r29, 0xFF	; 255
     436:	f9 82       	std	Y+1, r15	; 0x01
     438:	e8 82       	st	Y, r14
     43a:	cf 5e       	subi	r28, 0xEF	; 239
     43c:	d0 40       	sbci	r29, 0x00	; 0
	faar.next = NULL;
     43e:	cb 5f       	subi	r28, 0xFB	; 251
     440:	de 4f       	sbci	r29, 0xFE	; 254
     442:	19 82       	std	Y+1, r1	; 0x01
     444:	18 82       	st	Y, r1
     446:	c5 50       	subi	r28, 0x05	; 5
     448:	d1 40       	sbci	r29, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2779, 2780, 2802, 2830);
     44a:	0f 2e       	mov	r0, r31
     44c:	fe e0       	ldi	r31, 0x0E	; 14
     44e:	ef 2e       	mov	r14, r31
     450:	fb e0       	ldi	r31, 0x0B	; 11
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
     456:	02 ef       	ldi	r16, 0xF2	; 242
     458:	1a e0       	ldi	r17, 0x0A	; 10
     45a:	2c ed       	ldi	r18, 0xDC	; 220
     45c:	3a e0       	ldi	r19, 0x0A	; 10
     45e:	4b ed       	ldi	r20, 0xDB	; 219
     460:	5a e0       	ldi	r21, 0x0A	; 10
     462:	6d e5       	ldi	r22, 0x5D	; 93
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	88 5a       	subi	r24, 0xA8	; 168
     468:	9f 4f       	sbci	r25, 0xFF	; 255
     46a:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2825, 2835, 2835, 2845);
     46e:	0f 2e       	mov	r0, r31
     470:	fd e1       	ldi	r31, 0x1D	; 29
     472:	ef 2e       	mov	r14, r31
     474:	fb e0       	ldi	r31, 0x0B	; 11
     476:	ff 2e       	mov	r15, r31
     478:	f0 2d       	mov	r31, r0
     47a:	03 e1       	ldi	r16, 0x13	; 19
     47c:	1b e0       	ldi	r17, 0x0B	; 11
     47e:	23 e1       	ldi	r18, 0x13	; 19
     480:	3b e0       	ldi	r19, 0x0B	; 11
     482:	49 e0       	ldi	r20, 0x09	; 9
     484:	5b e0       	ldi	r21, 0x0B	; 11
     486:	67 e7       	ldi	r22, 0x77	; 119
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	ce 01       	movw	r24, r28
     48c:	83 5e       	subi	r24, 0xE3	; 227
     48e:	9e 4f       	sbci	r25, 0xFE	; 254
     490:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     494:	0f 2e       	mov	r0, r31
     496:	f2 e2       	ldi	r31, 0x22	; 34
     498:	ef 2e       	mov	r14, r31
     49a:	fb e0       	ldi	r31, 0x0B	; 11
     49c:	ff 2e       	mov	r15, r31
     49e:	f0 2d       	mov	r31, r0
     4a0:	08 e1       	ldi	r16, 0x18	; 24
     4a2:	1b e0       	ldi	r17, 0x0B	; 11
     4a4:	28 e1       	ldi	r18, 0x18	; 24
     4a6:	3b e0       	ldi	r19, 0x0B	; 11
     4a8:	4e e0       	ldi	r20, 0x0E	; 14
     4aa:	5b e0       	ldi	r21, 0x0B	; 11
     4ac:	65 e6       	ldi	r22, 0x65	; 101
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	ce 01       	movw	r24, r28
     4b2:	8d 5c       	subi	r24, 0xCD	; 205
     4b4:	9e 4f       	sbci	r25, 0xFE	; 254
     4b6:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2835, 2845, 2845, 2855);
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f7 e2       	ldi	r31, 0x27	; 39
     4be:	ef 2e       	mov	r14, r31
     4c0:	fb e0       	ldi	r31, 0x0B	; 11
     4c2:	ff 2e       	mov	r15, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	0d e1       	ldi	r16, 0x1D	; 29
     4c8:	1b e0       	ldi	r17, 0x0B	; 11
     4ca:	2d e1       	ldi	r18, 0x1D	; 29
     4cc:	3b e0       	ldi	r19, 0x0B	; 11
     4ce:	43 e1       	ldi	r20, 0x13	; 19
     4d0:	5b e0       	ldi	r21, 0x0B	; 11
     4d2:	6c e6       	ldi	r22, 0x6C	; 108
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	ce 01       	movw	r24, r28
     4d8:	87 5b       	subi	r24, 0xB7	; 183
     4da:	9e 4f       	sbci	r25, 0xFE	; 254
     4dc:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>

	// Linked list for MFs
	esc.membership_functions = &neutral;
     4e0:	47 e0       	ldi	r20, 0x07	; 7
     4e2:	51 e0       	ldi	r21, 0x01	; 1
     4e4:	4c 0f       	add	r20, r28
     4e6:	5d 1f       	adc	r21, r29
     4e8:	5e a7       	std	Y+46, r21	; 0x2e
     4ea:	4d a7       	std	Y+45, r20	; 0x2d
	neutral.next = &low;
     4ec:	8d e1       	ldi	r24, 0x1D	; 29
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	8c 0f       	add	r24, r28
     4f2:	9d 1f       	adc	r25, r29
     4f4:	c5 5e       	subi	r28, 0xE5	; 229
     4f6:	de 4f       	sbci	r29, 0xFE	; 254
     4f8:	99 83       	std	Y+1, r25	; 0x01
     4fa:	88 83       	st	Y, r24
     4fc:	cb 51       	subi	r28, 0x1B	; 27
     4fe:	d1 40       	sbci	r29, 0x01	; 1
	low.next = &medium;
     500:	a3 e3       	ldi	r26, 0x33	; 51
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	ac 0f       	add	r26, r28
     506:	bd 1f       	adc	r27, r29
     508:	cf 5c       	subi	r28, 0xCF	; 207
     50a:	de 4f       	sbci	r29, 0xFE	; 254
     50c:	b9 83       	std	Y+1, r27	; 0x01
     50e:	a8 83       	st	Y, r26
     510:	c1 53       	subi	r28, 0x31	; 49
     512:	d1 40       	sbci	r29, 0x01	; 1
	medium.next = &high;
     514:	e9 e4       	ldi	r30, 0x49	; 73
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	ec 0f       	add	r30, r28
     51a:	fd 1f       	adc	r31, r29
     51c:	c9 5b       	subi	r28, 0xB9	; 185
     51e:	de 4f       	sbci	r29, 0xFE	; 254
     520:	f9 83       	std	Y+1, r31	; 0x01
     522:	e8 83       	st	Y, r30
     524:	c7 54       	subi	r28, 0x47	; 71
     526:	d1 40       	sbci	r29, 0x01	; 1
	high.next = NULL;
     528:	c3 5a       	subi	r28, 0xA3	; 163
     52a:	de 4f       	sbci	r29, 0xFE	; 254
     52c:	19 82       	std	Y+1, r1	; 0x01
     52e:	18 82       	st	Y, r1
     530:	cd 55       	subi	r28, 0x5D	; 93
     532:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     534:	46 50       	subi	r20, 0x06	; 6
     536:	51 40       	sbci	r21, 0x01	; 1
     538:	3a 01       	movw	r6, r20
     53a:	50 93 19 03 	sts	0x0319, r21
     53e:	40 93 18 03 	sts	0x0318, r20
	distance.next = &steering;
     542:	4e 01       	movw	r8, r28
     544:	51 e1       	ldi	r21, 0x11	; 17
     546:	85 0e       	add	r8, r21
     548:	91 1c       	adc	r9, r1
     54a:	98 8a       	std	Y+16, r9	; 0x10
     54c:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     54e:	5e 01       	movw	r10, r28
     550:	61 e2       	ldi	r22, 0x21	; 33
     552:	a6 0e       	add	r10, r22
     554:	b1 1c       	adc	r11, r1
     556:	b8 a2       	std	Y+32, r11	; 0x20
     558:	af 8e       	std	Y+31, r10	; 0x1f
	esc.next = NULL;
     55a:	18 aa       	std	Y+48, r1	; 0x30
     55c:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     55e:	6e 01       	movw	r12, r28
     560:	81 e3       	ldi	r24, 0x31	; 49
     562:	c8 0e       	add	r12, r24
     564:	d1 1c       	adc	r13, r1
     566:	d0 92 17 03 	sts	0x0317, r13
     56a:	c0 92 16 03 	sts	0x0316, r12
	speed.next = NULL;
     56e:	21 96       	adiw	r28, 0x01	; 1
     570:	1f ae       	std	Y+63, r1	; 0x3f
     572:	1e ae       	std	Y+62, r1	; 0x3e
     574:	21 97       	sbiw	r28, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type zero;
	MATLAB_MF(&zero, "zero", 2779, 2780, 2802, 2830);
     576:	2e 01       	movw	r4, r28
     578:	91 ea       	ldi	r25, 0xA1	; 161
     57a:	49 1a       	sub	r4, r25
     57c:	9e ef       	ldi	r25, 0xFE	; 254
     57e:	59 0a       	sbc	r5, r25
     580:	0f 2e       	mov	r0, r31
     582:	fe e0       	ldi	r31, 0x0E	; 14
     584:	ef 2e       	mov	r14, r31
     586:	fb e0       	ldi	r31, 0x0B	; 11
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
     58c:	02 ef       	ldi	r16, 0xF2	; 242
     58e:	1a e0       	ldi	r17, 0x0A	; 10
     590:	2c ed       	ldi	r18, 0xDC	; 220
     592:	3a e0       	ldi	r19, 0x0A	; 10
     594:	4b ed       	ldi	r20, 0xDB	; 219
     596:	5a e0       	ldi	r21, 0x0A	; 10
     598:	61 e7       	ldi	r22, 0x71	; 113
     59a:	71 e0       	ldi	r23, 0x01	; 1
     59c:	c2 01       	movw	r24, r4
     59e:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2825, 2835, 2835, 2845);
     5a2:	0f 2e       	mov	r0, r31
     5a4:	fd e1       	ldi	r31, 0x1D	; 29
     5a6:	ef 2e       	mov	r14, r31
     5a8:	fb e0       	ldi	r31, 0x0B	; 11
     5aa:	ff 2e       	mov	r15, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	03 e1       	ldi	r16, 0x13	; 19
     5b0:	1b e0       	ldi	r17, 0x0B	; 11
     5b2:	23 e1       	ldi	r18, 0x13	; 19
     5b4:	3b e0       	ldi	r19, 0x0B	; 11
     5b6:	49 e0       	ldi	r20, 0x09	; 9
     5b8:	5b e0       	ldi	r21, 0x0B	; 11
     5ba:	66 e7       	ldi	r22, 0x76	; 118
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	ce 01       	movw	r24, r28
     5c0:	8b 58       	subi	r24, 0x8B	; 139
     5c2:	9e 4f       	sbci	r25, 0xFE	; 254
     5c4:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type average;
	MATLAB_MF(&average, "average", 2830, 2840, 2840, 2850);
     5c8:	1e 01       	movw	r2, r28
     5ca:	a5 e7       	ldi	r26, 0x75	; 117
     5cc:	2a 1a       	sub	r2, r26
     5ce:	ae ef       	ldi	r26, 0xFE	; 254
     5d0:	3a 0a       	sbc	r3, r26
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f2 e2       	ldi	r31, 0x22	; 34
     5d6:	ef 2e       	mov	r14, r31
     5d8:	fb e0       	ldi	r31, 0x0B	; 11
     5da:	ff 2e       	mov	r15, r31
     5dc:	f0 2d       	mov	r31, r0
     5de:	08 e1       	ldi	r16, 0x18	; 24
     5e0:	1b e0       	ldi	r17, 0x0B	; 11
     5e2:	28 e1       	ldi	r18, 0x18	; 24
     5e4:	3b e0       	ldi	r19, 0x0B	; 11
     5e6:	4e e0       	ldi	r20, 0x0E	; 14
     5e8:	5b e0       	ldi	r21, 0x0B	; 11
     5ea:	6b e7       	ldi	r22, 0x7B	; 123
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	c1 01       	movw	r24, r2
     5f0:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>
	struct mf_type fast;
	MATLAB_MF(&fast, "fast", 2835, 2845, 2845, 2855);
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f7 e2       	ldi	r31, 0x27	; 39
     5f8:	ef 2e       	mov	r14, r31
     5fa:	fb e0       	ldi	r31, 0x0B	; 11
     5fc:	ff 2e       	mov	r15, r31
     5fe:	f0 2d       	mov	r31, r0
     600:	0d e1       	ldi	r16, 0x1D	; 29
     602:	1b e0       	ldi	r17, 0x0B	; 11
     604:	2d e1       	ldi	r18, 0x1D	; 29
     606:	3b e0       	ldi	r19, 0x0B	; 11
     608:	43 e1       	ldi	r20, 0x13	; 19
     60a:	5b e0       	ldi	r21, 0x0B	; 11
     60c:	63 e8       	ldi	r22, 0x83	; 131
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	ce 01       	movw	r24, r28
     612:	8f 55       	subi	r24, 0x5F	; 95
     614:	9e 4f       	sbci	r25, 0xFE	; 254
     616:	0e 94 30 0b 	call	0x1660	; 0x1660 <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &zero;
     61a:	5e ae       	std	Y+62, r5	; 0x3e
     61c:	4d ae       	std	Y+61, r4	; 0x3d
	zero.next = &slow;
     61e:	0f 2e       	mov	r0, r31
     620:	f5 e7       	ldi	r31, 0x75	; 117
     622:	ef 2e       	mov	r14, r31
     624:	ff 24       	eor	r15, r15
     626:	f3 94       	inc	r15
     628:	f0 2d       	mov	r31, r0
     62a:	ec 0e       	add	r14, r28
     62c:	fd 1e       	adc	r15, r29
     62e:	f2 01       	movw	r30, r4
     630:	f5 8a       	std	Z+21, r15	; 0x15
     632:	e4 8a       	std	Z+20, r14	; 0x14
	slow.next = &average;
     634:	c7 57       	subi	r28, 0x77	; 119
     636:	de 4f       	sbci	r29, 0xFE	; 254
     638:	39 82       	std	Y+1, r3	; 0x01
     63a:	28 82       	st	Y, r2
     63c:	c9 58       	subi	r28, 0x89	; 137
     63e:	d1 40       	sbci	r29, 0x01	; 1
	average.next = &fast;
     640:	e1 ea       	ldi	r30, 0xA1	; 161
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	ec 0f       	add	r30, r28
     646:	fd 1f       	adc	r31, r29
     648:	d1 01       	movw	r26, r2
     64a:	55 96       	adiw	r26, 0x15	; 21
     64c:	fc 93       	st	X, r31
     64e:	ee 93       	st	-X, r30
     650:	54 97       	sbiw	r26, 0x14	; 20
	fast.next = NULL;
     652:	cb 54       	subi	r28, 0x4B	; 75
     654:	de 4f       	sbci	r29, 0xFE	; 254
     656:	19 82       	std	Y+1, r1	; 0x01
     658:	18 82       	st	Y, r1
     65a:	c5 5b       	subi	r28, 0xB5	; 181
     65c:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     65e:	70 92 19 03 	sts	0x0319, r7
     662:	60 92 18 03 	sts	0x0318, r6
	distance.next = &steering;
     666:	98 8a       	std	Y+16, r9	; 0x10
     668:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     66a:	b8 a2       	std	Y+32, r11	; 0x20
     66c:	af 8e       	std	Y+31, r10	; 0x1f
	esc.next = NULL;
     66e:	18 aa       	std	Y+48, r1	; 0x30
     670:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     672:	d0 92 17 03 	sts	0x0317, r13
     676:	c0 92 16 03 	sts	0x0316, r12
	speed.next = NULL;
     67a:	21 96       	adiw	r28, 0x01	; 1
     67c:	1f ae       	std	Y+63, r1	; 0x3f
     67e:	1e ae       	std	Y+62, r1	; 0x3e
     680:	21 97       	sbiw	r28, 0x01	; 1


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     682:	be 01       	movw	r22, r28
     684:	69 54       	subi	r22, 0x49	; 73
     686:	7e 4f       	sbci	r23, 0xFE	; 254
     688:	70 93 1b 03 	sts	0x031B, r23
     68c:	60 93 1a 03 	sts	0x031A, r22
	struct rule_type rule2; rule1.next = &rule2;
     690:	ae 01       	movw	r20, r28
     692:	43 54       	subi	r20, 0x43	; 67
     694:	5e 4f       	sbci	r21, 0xFE	; 254
     696:	db 01       	movw	r26, r22
     698:	15 96       	adiw	r26, 0x05	; 5
     69a:	5c 93       	st	X, r21
     69c:	4e 93       	st	-X, r20
     69e:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule3; rule2.next = &rule3;
     6a0:	9e 01       	movw	r18, r28
     6a2:	2d 53       	subi	r18, 0x3D	; 61
     6a4:	3e 4f       	sbci	r19, 0xFE	; 254
     6a6:	fa 01       	movw	r30, r20
     6a8:	35 83       	std	Z+5, r19	; 0x05
     6aa:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
     6ac:	ce 01       	movw	r24, r28
     6ae:	87 53       	subi	r24, 0x37	; 55
     6b0:	9e 4f       	sbci	r25, 0xFE	; 254
     6b2:	d9 01       	movw	r26, r18
     6b4:	15 96       	adiw	r26, 0x05	; 5
     6b6:	9c 93       	st	X, r25
     6b8:	8e 93       	st	-X, r24
     6ba:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule5; rule4.next = &rule5; 
     6bc:	1c 96       	adiw	r26, 0x0c	; 12
     6be:	fc 01       	movw	r30, r24
     6c0:	b5 83       	std	Z+5, r27	; 0x05
     6c2:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f5 ed       	ldi	r31, 0xD5	; 213
     6c8:	ef 2e       	mov	r14, r31
     6ca:	ff 24       	eor	r15, r15
     6cc:	f3 94       	inc	r15
     6ce:	f0 2d       	mov	r31, r0
     6d0:	ec 0e       	add	r14, r28
     6d2:	fd 1e       	adc	r15, r29
     6d4:	15 96       	adiw	r26, 0x05	; 5
     6d6:	fc 92       	st	X, r15
     6d8:	ee 92       	st	-X, r14
     6da:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule7; rule6.next = &rule7;
     6dc:	4e 01       	movw	r8, r28
     6de:	15 e2       	ldi	r17, 0x25	; 37
     6e0:	81 1a       	sub	r8, r17
     6e2:	1e ef       	ldi	r17, 0xFE	; 254
     6e4:	91 0a       	sbc	r9, r17
     6e6:	c7 52       	subi	r28, 0x27	; 39
     6e8:	de 4f       	sbci	r29, 0xFE	; 254
     6ea:	99 82       	std	Y+1, r9	; 0x01
     6ec:	88 82       	st	Y, r8
     6ee:	c9 5d       	subi	r28, 0xD9	; 217
     6f0:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule8; rule7.next = &rule8;
     6f2:	3e 01       	movw	r6, r28
     6f4:	ef e1       	ldi	r30, 0x1F	; 31
     6f6:	6e 1a       	sub	r6, r30
     6f8:	ee ef       	ldi	r30, 0xFE	; 254
     6fa:	7e 0a       	sbc	r7, r30
     6fc:	f4 01       	movw	r30, r8
     6fe:	75 82       	std	Z+5, r7	; 0x05
     700:	64 82       	std	Z+4, r6	; 0x04
	struct rule_type rule9; rule8.next = &rule9;
     702:	8e 01       	movw	r16, r28
     704:	09 51       	subi	r16, 0x19	; 25
     706:	1e 4f       	sbci	r17, 0xFE	; 254
     708:	f3 01       	movw	r30, r6
     70a:	15 83       	std	Z+5, r17	; 0x05
     70c:	04 83       	std	Z+4, r16	; 0x04
	struct rule_type rule10; rule9.next = &rule10;
     70e:	0f 2e       	mov	r0, r31
     710:	fd ee       	ldi	r31, 0xED	; 237
     712:	ef 2e       	mov	r14, r31
     714:	ff 24       	eor	r15, r15
     716:	f3 94       	inc	r15
     718:	f0 2d       	mov	r31, r0
     71a:	ec 0e       	add	r14, r28
     71c:	fd 1e       	adc	r15, r29
     71e:	f8 01       	movw	r30, r16
     720:	f5 82       	std	Z+5, r15	; 0x05
     722:	e4 82       	std	Z+4, r14	; 0x04
	struct rule_type rule11; rule10.next = &rule11;
     724:	e3 ef       	ldi	r30, 0xF3	; 243
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	ec 0f       	add	r30, r28
     72a:	fd 1f       	adc	r31, r29
     72c:	cf 50       	subi	r28, 0x0F	; 15
     72e:	de 4f       	sbci	r29, 0xFE	; 254
     730:	f9 83       	std	Y+1, r31	; 0x01
     732:	e8 83       	st	Y, r30
     734:	c1 5f       	subi	r28, 0xF1	; 241
     736:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12;
     738:	0f 2e       	mov	r0, r31
     73a:	f9 ef       	ldi	r31, 0xF9	; 249
     73c:	ef 2e       	mov	r14, r31
     73e:	ff 24       	eor	r15, r15
     740:	f3 94       	inc	r15
     742:	f0 2d       	mov	r31, r0
     744:	ec 0e       	add	r14, r28
     746:	fd 1e       	adc	r15, r29
     748:	c9 50       	subi	r28, 0x09	; 9
     74a:	de 4f       	sbci	r29, 0xFE	; 254
     74c:	f9 82       	std	Y+1, r15	; 0x01
     74e:	e8 82       	st	Y, r14
     750:	c7 5f       	subi	r28, 0xF7	; 247
     752:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule13; rule12.next = &rule13;
     754:	ef ef       	ldi	r30, 0xFF	; 255
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	ec 0f       	add	r30, r28
     75a:	fd 1f       	adc	r31, r29
     75c:	c3 50       	subi	r28, 0x03	; 3
     75e:	de 4f       	sbci	r29, 0xFE	; 254
     760:	f9 83       	std	Y+1, r31	; 0x01
     762:	e8 83       	st	Y, r30
     764:	cd 5f       	subi	r28, 0xFD	; 253
     766:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule14; rule13.next = &rule14;
     768:	7e 01       	movw	r14, r28
     76a:	fb ef       	ldi	r31, 0xFB	; 251
     76c:	ef 1a       	sub	r14, r31
     76e:	fd ef       	ldi	r31, 0xFD	; 253
     770:	ff 0a       	sbc	r15, r31
     772:	cd 5f       	subi	r28, 0xFD	; 253
     774:	dd 4f       	sbci	r29, 0xFD	; 253
     776:	f9 82       	std	Y+1, r15	; 0x01
     778:	e8 82       	st	Y, r14
     77a:	c3 50       	subi	r28, 0x03	; 3
     77c:	d2 40       	sbci	r29, 0x02	; 2
	rule14.next = NULL;
     77e:	f7 01       	movw	r30, r14
     780:	15 82       	std	Z+5, r1	; 0x05
     782:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     784:	5e 01       	movw	r10, r28
     786:	f5 ef       	ldi	r31, 0xF5	; 245
     788:	af 1a       	sub	r10, r31
     78a:	fd ef       	ldi	r31, 0xFD	; 253
     78c:	bf 0a       	sbc	r11, r31
     78e:	fb 01       	movw	r30, r22
     790:	b1 82       	std	Z+1, r11	; 0x01
     792:	a0 82       	st	Z, r10
     794:	f5 01       	movw	r30, r10
     796:	13 82       	std	Z+3, r1	; 0x03
     798:	12 82       	std	Z+2, r1	; 0x02
     79a:	6e 01       	movw	r12, r28
     79c:	f1 ef       	ldi	r31, 0xF1	; 241
     79e:	cf 1a       	sub	r12, r31
     7a0:	fd ef       	ldi	r31, 0xFD	; 253
     7a2:	df 0a       	sbc	r13, r31
     7a4:	fb 01       	movw	r30, r22
     7a6:	d3 82       	std	Z+3, r13	; 0x03
     7a8:	c2 82       	std	Z+2, r12	; 0x02
     7aa:	f6 01       	movw	r30, r12
     7ac:	13 82       	std	Z+3, r1	; 0x03
     7ae:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &zero.value;
     7b0:	6f ea       	ldi	r22, 0xAF	; 175
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	6c 0f       	add	r22, r28
     7b6:	7d 1f       	adc	r23, r29
     7b8:	66 5f       	subi	r22, 0xF6	; 246
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	f5 01       	movw	r30, r10
     7be:	71 83       	std	Z+1, r23	; 0x01
     7c0:	60 83       	st	Z, r22
     7c2:	fa e0       	ldi	r31, 0x0A	; 10
     7c4:	4f 0e       	add	r4, r31
     7c6:	51 1c       	adc	r5, r1
     7c8:	f6 01       	movw	r30, r12
     7ca:	51 82       	std	Z+1, r5	; 0x01
     7cc:	40 82       	st	Z, r4

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     7ce:	6e 01       	movw	r12, r28
     7d0:	fd ee       	ldi	r31, 0xED	; 237
     7d2:	cf 1a       	sub	r12, r31
     7d4:	fd ef       	ldi	r31, 0xFD	; 253
     7d6:	df 0a       	sbc	r13, r31
     7d8:	fa 01       	movw	r30, r20
     7da:	d1 82       	std	Z+1, r13	; 0x01
     7dc:	c0 82       	st	Z, r12
     7de:	f6 01       	movw	r30, r12
     7e0:	13 82       	std	Z+3, r1	; 0x03
     7e2:	12 82       	std	Z+2, r1	; 0x02
     7e4:	62 5a       	subi	r22, 0xA2	; 162
     7e6:	7e 4f       	sbci	r23, 0xFE	; 254
     7e8:	fa 01       	movw	r30, r20
     7ea:	73 83       	std	Z+3, r23	; 0x03
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	fb 01       	movw	r30, r22
     7f0:	13 82       	std	Z+3, r1	; 0x03
     7f2:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &low.value;
     7f4:	45 ec       	ldi	r20, 0xC5	; 197
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	4c 0f       	add	r20, r28
     7fa:	5d 1f       	adc	r21, r29
     7fc:	46 5f       	subi	r20, 0xF6	; 246
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	f6 01       	movw	r30, r12
     802:	51 83       	std	Z+1, r21	; 0x01
     804:	40 83       	st	Z, r20
     806:	0f 2e       	mov	r0, r31
     808:	fd e1       	ldi	r31, 0x1D	; 29
     80a:	af 2e       	mov	r10, r31
     80c:	bb 24       	eor	r11, r11
     80e:	b3 94       	inc	r11
     810:	f0 2d       	mov	r31, r0
     812:	ac 0e       	add	r10, r28
     814:	bd 1e       	adc	r11, r29
     816:	fa e0       	ldi	r31, 0x0A	; 10
     818:	af 0e       	add	r10, r31
     81a:	b1 1c       	adc	r11, r1
     81c:	fb 01       	movw	r30, r22
     81e:	b1 82       	std	Z+1, r11	; 0x01
     820:	a0 82       	st	Z, r10

	// if dist is faar and steering is right then speed is average
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     822:	6e 01       	movw	r12, r28
     824:	f5 ee       	ldi	r31, 0xE5	; 229
     826:	cf 1a       	sub	r12, r31
     828:	fd ef       	ldi	r31, 0xFD	; 253
     82a:	df 0a       	sbc	r13, r31
     82c:	f9 01       	movw	r30, r18
     82e:	d1 82       	std	Z+1, r13	; 0x01
     830:	c0 82       	st	Z, r12
     832:	68 5f       	subi	r22, 0xF8	; 248
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	f6 01       	movw	r30, r12
     838:	73 83       	std	Z+3, r23	; 0x03
     83a:	62 83       	std	Z+2, r22	; 0x02
     83c:	fb 01       	movw	r30, r22
     83e:	13 82       	std	Z+3, r1	; 0x03
     840:	12 82       	std	Z+2, r1	; 0x02
     842:	4c 5a       	subi	r20, 0xAC	; 172
     844:	5e 4f       	sbci	r21, 0xFE	; 254
     846:	f9 01       	movw	r30, r18
     848:	53 83       	std	Z+3, r21	; 0x03
     84a:	42 83       	std	Z+2, r20	; 0x02
     84c:	fa 01       	movw	r30, r20
     84e:	13 82       	std	Z+3, r1	; 0x03
     850:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &average.value;
     852:	21 ef       	ldi	r18, 0xF1	; 241
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	2c 0f       	add	r18, r28
     858:	3d 1f       	adc	r19, r29
     85a:	26 5f       	subi	r18, 0xF6	; 246
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	f6 01       	movw	r30, r12
     860:	31 83       	std	Z+1, r19	; 0x01
     862:	20 83       	st	Z, r18
     864:	0f 2e       	mov	r0, r31
     866:	f3 e8       	ldi	r31, 0x83	; 131
     868:	cf 2e       	mov	r12, r31
     86a:	d1 2c       	mov	r13, r1
     86c:	f0 2d       	mov	r31, r0
     86e:	cc 0e       	add	r12, r28
     870:	dd 1e       	adc	r13, r29
     872:	fa e0       	ldi	r31, 0x0A	; 10
     874:	cf 0e       	add	r12, r31
     876:	d1 1c       	adc	r13, r1
     878:	fb 01       	movw	r30, r22
     87a:	d1 82       	std	Z+1, r13	; 0x01
     87c:	c0 82       	st	Z, r12
     87e:	fa e0       	ldi	r31, 0x0A	; 10
     880:	2f 0e       	add	r2, r31
     882:	31 1c       	adc	r3, r1
     884:	fa 01       	movw	r30, r20
     886:	31 82       	std	Z+1, r3	; 0x01
     888:	20 82       	st	Z, r2

	// if dist is faar and steering is left then speed is average
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     88a:	6e 01       	movw	r12, r28
     88c:	f9 ed       	ldi	r31, 0xD9	; 217
     88e:	cf 1a       	sub	r12, r31
     890:	fd ef       	ldi	r31, 0xFD	; 253
     892:	df 0a       	sbc	r13, r31
     894:	fc 01       	movw	r30, r24
     896:	d1 82       	std	Z+1, r13	; 0x01
     898:	c0 82       	st	Z, r12
     89a:	64 5f       	subi	r22, 0xF4	; 244
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	f6 01       	movw	r30, r12
     8a0:	73 83       	std	Z+3, r23	; 0x03
     8a2:	62 83       	std	Z+2, r22	; 0x02
     8a4:	fb 01       	movw	r30, r22
     8a6:	13 82       	std	Z+3, r1	; 0x03
     8a8:	12 82       	std	Z+2, r1	; 0x02
     8aa:	44 5f       	subi	r20, 0xF4	; 244
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	fc 01       	movw	r30, r24
     8b0:	53 83       	std	Z+3, r21	; 0x03
     8b2:	42 83       	std	Z+2, r20	; 0x02
     8b4:	fa 01       	movw	r30, r20
     8b6:	13 82       	std	Z+3, r1	; 0x03
     8b8:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &average.value;
     8ba:	f6 01       	movw	r30, r12
     8bc:	31 83       	std	Z+1, r19	; 0x01
     8be:	20 83       	st	Z, r18
     8c0:	87 e5       	ldi	r24, 0x57	; 87
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8c 0f       	add	r24, r28
     8c6:	9d 1f       	adc	r25, r29
     8c8:	0a 96       	adiw	r24, 0x0a	; 10
     8ca:	fb 01       	movw	r30, r22
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
     8d0:	fa 01       	movw	r30, r20
     8d2:	31 82       	std	Z+1, r3	; 0x01
     8d4:	20 82       	st	Z, r2

	// if dist is faar and steering is maxRight then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     8d6:	68 5f       	subi	r22, 0xF8	; 248
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	11 96       	adiw	r26, 0x01	; 1
     8dc:	7c 93       	st	X, r23
     8de:	6e 93       	st	-X, r22
     8e0:	8a 52       	subi	r24, 0x2A	; 42
     8e2:	9e 4f       	sbci	r25, 0xFE	; 254
     8e4:	fb 01       	movw	r30, r22
     8e6:	93 83       	std	Z+3, r25	; 0x03
     8e8:	82 83       	std	Z+2, r24	; 0x02
     8ea:	fc 01       	movw	r30, r24
     8ec:	13 82       	std	Z+3, r1	; 0x03
     8ee:	12 82       	std	Z+2, r1	; 0x02
     8f0:	44 5f       	subi	r20, 0xF4	; 244
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	5c 93       	st	X, r21
     8f8:	4e 93       	st	-X, r20
     8fa:	12 97       	sbiw	r26, 0x02	; 2
     8fc:	da 01       	movw	r26, r20
     8fe:	13 96       	adiw	r26, 0x03	; 3
     900:	1c 92       	st	X, r1
     902:	1e 92       	st	-X, r1
     904:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &maxRight.value; then5.value = &slow.value;
     906:	fb 01       	movw	r30, r22
     908:	31 83       	std	Z+1, r19	; 0x01
     90a:	20 83       	st	Z, r18
     90c:	69 e9       	ldi	r22, 0x99	; 153
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	6c 0f       	add	r22, r28
     912:	7d 1f       	adc	r23, r29
     914:	66 5f       	subi	r22, 0xF6	; 246
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	dc 01       	movw	r26, r24
     91a:	6d 93       	st	X+, r22
     91c:	7c 93       	st	X, r23
     91e:	85 e7       	ldi	r24, 0x75	; 117
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	8c 0f       	add	r24, r28
     924:	9d 1f       	adc	r25, r29
     926:	0a 96       	adiw	r24, 0x0a	; 10
     928:	fa 01       	movw	r30, r20
     92a:	91 83       	std	Z+1, r25	; 0x01
     92c:	80 83       	st	Z, r24
	
	// if dist is faar and steering is maxLeft then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     92e:	64 56       	subi	r22, 0x64	; 100
     930:	7e 4f       	sbci	r23, 0xFE	; 254
     932:	cb 52       	subi	r28, 0x2B	; 43
     934:	de 4f       	sbci	r29, 0xFE	; 254
     936:	79 83       	std	Y+1, r23	; 0x01
     938:	68 83       	st	Y, r22
     93a:	c5 5d       	subi	r28, 0xD5	; 213
     93c:	d1 40       	sbci	r29, 0x01	; 1
     93e:	48 5f       	subi	r20, 0xF8	; 248
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	db 01       	movw	r26, r22
     944:	13 96       	adiw	r26, 0x03	; 3
     946:	5c 93       	st	X, r21
     948:	4e 93       	st	-X, r20
     94a:	12 97       	sbiw	r26, 0x02	; 2
     94c:	fa 01       	movw	r30, r20
     94e:	13 82       	std	Z+3, r1	; 0x03
     950:	12 82       	std	Z+2, r1	; 0x02
     952:	18 96       	adiw	r26, 0x08	; 8
     954:	c9 52       	subi	r28, 0x29	; 41
     956:	de 4f       	sbci	r29, 0xFE	; 254
     958:	b9 83       	std	Y+1, r27	; 0x01
     95a:	a8 83       	st	Y, r26
     95c:	c7 5d       	subi	r28, 0xD7	; 215
     95e:	d1 40       	sbci	r29, 0x01	; 1
     960:	13 96       	adiw	r26, 0x03	; 3
     962:	1c 92       	st	X, r1
     964:	1e 92       	st	-X, r1
     966:	12 97       	sbiw	r26, 0x02	; 2
	if61.value = &faar.value; if62.value = &maxLeft.value; then6.value = &slow.value;
     968:	fb 01       	movw	r30, r22
     96a:	31 83       	std	Z+1, r19	; 0x01
     96c:	20 83       	st	Z, r18
     96e:	61 e4       	ldi	r22, 0x41	; 65
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	6c 0f       	add	r22, r28
     974:	7d 1f       	adc	r23, r29
     976:	66 5f       	subi	r22, 0xF6	; 246
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	fa 01       	movw	r30, r20
     97c:	71 83       	std	Z+1, r23	; 0x01
     97e:	60 83       	st	Z, r22
     980:	8d 93       	st	X+, r24
     982:	9c 93       	st	X, r25
	
	// if dist is distant and currentEsc is neutral then speed is slow
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     984:	48 5f       	subi	r20, 0xF8	; 248
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	d4 01       	movw	r26, r8
     98a:	4d 93       	st	X+, r20
     98c:	5c 93       	st	X, r21
     98e:	6e 01       	movw	r12, r28
     990:	b1 eb       	ldi	r27, 0xB1	; 177
     992:	cb 1a       	sub	r12, r27
     994:	bd ef       	ldi	r27, 0xFD	; 253
     996:	db 0a       	sbc	r13, r27
     998:	fa 01       	movw	r30, r20
     99a:	d3 82       	std	Z+3, r13	; 0x03
     99c:	c2 82       	std	Z+2, r12	; 0x02
     99e:	d6 01       	movw	r26, r12
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	1c 92       	st	X, r1
     9a4:	1e 92       	st	-X, r1
     9a6:	12 97       	sbiw	r26, 0x02	; 2
     9a8:	38 96       	adiw	r30, 0x08	; 8
     9aa:	d4 01       	movw	r26, r8
     9ac:	13 96       	adiw	r26, 0x03	; 3
     9ae:	fc 93       	st	X, r31
     9b0:	ee 93       	st	-X, r30
     9b2:	12 97       	sbiw	r26, 0x02	; 2
     9b4:	13 82       	std	Z+3, r1	; 0x03
     9b6:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &distant.value; if72.value = &neutral.value; then7.value = &slow.value;
     9b8:	6b ed       	ldi	r22, 0xDB	; 219
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	6c 0f       	add	r22, r28
     9be:	7d 1f       	adc	r23, r29
     9c0:	66 5f       	subi	r22, 0xF6	; 246
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	da 01       	movw	r26, r20
     9c6:	6d 93       	st	X+, r22
     9c8:	7c 93       	st	X, r23
     9ca:	47 e0       	ldi	r20, 0x07	; 7
     9cc:	51 e0       	ldi	r21, 0x01	; 1
     9ce:	4c 0f       	add	r20, r28
     9d0:	5d 1f       	adc	r21, r29
     9d2:	46 5f       	subi	r20, 0xF6	; 246
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	d6 01       	movw	r26, r12
     9d8:	4d 93       	st	X+, r20
     9da:	5c 93       	st	X, r21
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
	
	// if dist is distant and currentEsc is low then speed is average
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     9e0:	4a 5b       	subi	r20, 0xBA	; 186
     9e2:	5e 4f       	sbci	r21, 0xFE	; 254
     9e4:	f3 01       	movw	r30, r6
     9e6:	51 83       	std	Z+1, r21	; 0x01
     9e8:	40 83       	st	Z, r20
     9ea:	6e 01       	movw	r12, r28
     9ec:	f5 ea       	ldi	r31, 0xA5	; 165
     9ee:	cf 1a       	sub	r12, r31
     9f0:	fd ef       	ldi	r31, 0xFD	; 253
     9f2:	df 0a       	sbc	r13, r31
     9f4:	da 01       	movw	r26, r20
     9f6:	13 96       	adiw	r26, 0x03	; 3
     9f8:	dc 92       	st	X, r13
     9fa:	ce 92       	st	-X, r12
     9fc:	12 97       	sbiw	r26, 0x02	; 2
     9fe:	f6 01       	movw	r30, r12
     a00:	13 82       	std	Z+3, r1	; 0x03
     a02:	12 82       	std	Z+2, r1	; 0x02
     a04:	34 96       	adiw	r30, 0x04	; 4
     a06:	d3 01       	movw	r26, r6
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	fc 93       	st	X, r31
     a0c:	ee 93       	st	-X, r30
     a0e:	12 97       	sbiw	r26, 0x02	; 2
     a10:	13 82       	std	Z+3, r1	; 0x03
     a12:	12 82       	std	Z+2, r1	; 0x02
	if81.value = &distant.value; if82.value = &low.value; then8.value = &average.value;
     a14:	da 01       	movw	r26, r20
     a16:	6d 93       	st	X+, r22
     a18:	7c 93       	st	X, r23
     a1a:	d6 01       	movw	r26, r12
     a1c:	ad 92       	st	X+, r10
     a1e:	bc 92       	st	X, r11
     a20:	31 82       	std	Z+1, r3	; 0x01
     a22:	20 82       	st	Z, r2
	
	// if dist is distant and currentEsc is medium then speed is average
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     a24:	44 5f       	subi	r20, 0xF4	; 244
     a26:	5f 4f       	sbci	r21, 0xFF	; 255
     a28:	f8 01       	movw	r30, r16
     a2a:	51 83       	std	Z+1, r21	; 0x01
     a2c:	40 83       	st	Z, r20
     a2e:	6e 01       	movw	r12, r28
     a30:	f9 e9       	ldi	r31, 0x99	; 153
     a32:	cf 1a       	sub	r12, r31
     a34:	fd ef       	ldi	r31, 0xFD	; 253
     a36:	df 0a       	sbc	r13, r31
     a38:	da 01       	movw	r26, r20
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	dc 92       	st	X, r13
     a3e:	ce 92       	st	-X, r12
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	f6 01       	movw	r30, r12
     a44:	13 82       	std	Z+3, r1	; 0x03
     a46:	12 82       	std	Z+2, r1	; 0x02
     a48:	34 96       	adiw	r30, 0x04	; 4
     a4a:	d8 01       	movw	r26, r16
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	fc 93       	st	X, r31
     a50:	ee 93       	st	-X, r30
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	12 82       	std	Z+2, r1	; 0x02
	if91.value = &distant.value; if92.value = &medium.value; then9.value = &average.value;
     a58:	da 01       	movw	r26, r20
     a5a:	6d 93       	st	X+, r22
     a5c:	7c 93       	st	X, r23
     a5e:	03 e3       	ldi	r16, 0x33	; 51
     a60:	11 e0       	ldi	r17, 0x01	; 1
     a62:	0c 0f       	add	r16, r28
     a64:	1d 1f       	adc	r17, r29
     a66:	06 5f       	subi	r16, 0xF6	; 246
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	d6 01       	movw	r26, r12
     a6c:	0d 93       	st	X+, r16
     a6e:	1c 93       	st	X, r17
     a70:	31 82       	std	Z+1, r3	; 0x01
     a72:	20 82       	st	Z, r2
	
	// if dist is faar and steering is straight and currentEsc is neutral then speed is average
	struct rule_element_type if101, if102, if103, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = &if103; if103.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     a74:	66 57       	subi	r22, 0x76	; 118
     a76:	7e 4f       	sbci	r23, 0xFE	; 254
     a78:	c3 51       	subi	r28, 0x13	; 19
     a7a:	de 4f       	sbci	r29, 0xFE	; 254
     a7c:	79 83       	std	Y+1, r23	; 0x01
     a7e:	68 83       	st	Y, r22
     a80:	cd 5e       	subi	r28, 0xED	; 237
     a82:	d1 40       	sbci	r29, 0x01	; 1
     a84:	40 5f       	subi	r20, 0xF0	; 240
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	fb 01       	movw	r30, r22
     a8a:	53 83       	std	Z+3, r21	; 0x03
     a8c:	42 83       	std	Z+2, r20	; 0x02
     a8e:	6e 01       	movw	r12, r28
     a90:	f9 e8       	ldi	r31, 0x89	; 137
     a92:	cf 1a       	sub	r12, r31
     a94:	fd ef       	ldi	r31, 0xFD	; 253
     a96:	df 0a       	sbc	r13, r31
     a98:	da 01       	movw	r26, r20
     a9a:	13 96       	adiw	r26, 0x03	; 3
     a9c:	dc 92       	st	X, r13
     a9e:	ce 92       	st	-X, r12
     aa0:	12 97       	sbiw	r26, 0x02	; 2
     aa2:	f6 01       	movw	r30, r12
     aa4:	13 82       	std	Z+3, r1	; 0x03
     aa6:	12 82       	std	Z+2, r1	; 0x02
     aa8:	34 96       	adiw	r30, 0x04	; 4
     aaa:	c1 51       	subi	r28, 0x11	; 17
     aac:	de 4f       	sbci	r29, 0xFE	; 254
     aae:	f9 83       	std	Y+1, r31	; 0x01
     ab0:	e8 83       	st	Y, r30
     ab2:	cf 5e       	subi	r28, 0xEF	; 239
     ab4:	d1 40       	sbci	r29, 0x01	; 1
     ab6:	13 82       	std	Z+3, r1	; 0x03
     ab8:	12 82       	std	Z+2, r1	; 0x02
	if101.value = &faar.value; if102.value = &straight.value; if103.value = &neutral; then10.value = &slow.value;
     aba:	db 01       	movw	r26, r22
     abc:	2d 93       	st	X+, r18
     abe:	3c 93       	st	X, r19
     ac0:	6d e6       	ldi	r22, 0x6D	; 109
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	6c 0f       	add	r22, r28
     ac6:	7d 1f       	adc	r23, r29
     ac8:	66 5f       	subi	r22, 0xF6	; 246
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	da 01       	movw	r26, r20
     ace:	6d 93       	st	X+, r22
     ad0:	7c 93       	st	X, r23
     ad2:	47 e0       	ldi	r20, 0x07	; 7
     ad4:	51 e0       	ldi	r21, 0x01	; 1
     ad6:	4c 0f       	add	r20, r28
     ad8:	5d 1f       	adc	r21, r29
     ada:	d6 01       	movw	r26, r12
     adc:	4d 93       	st	X+, r20
     ade:	5c 93       	st	X, r21
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24

	// if dist is faar and steering is straight and currentEsc is low then speed is average
	struct rule_element_type if111, if112, if113, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = &if113; if113.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     ae4:	48 58       	subi	r20, 0x88	; 136
     ae6:	5e 4f       	sbci	r21, 0xFE	; 254
     ae8:	cd 50       	subi	r28, 0x0D	; 13
     aea:	de 4f       	sbci	r29, 0xFE	; 254
     aec:	59 83       	std	Y+1, r21	; 0x01
     aee:	48 83       	st	Y, r20
     af0:	c3 5f       	subi	r28, 0xF3	; 243
     af2:	d1 40       	sbci	r29, 0x01	; 1
     af4:	8c 5f       	subi	r24, 0xFC	; 252
     af6:	9e 4f       	sbci	r25, 0xFE	; 254
     af8:	da 01       	movw	r26, r20
     afa:	13 96       	adiw	r26, 0x03	; 3
     afc:	9c 93       	st	X, r25
     afe:	8e 93       	st	-X, r24
     b00:	12 97       	sbiw	r26, 0x02	; 2
     b02:	18 96       	adiw	r26, 0x08	; 8
     b04:	fc 01       	movw	r30, r24
     b06:	b3 83       	std	Z+3, r27	; 0x03
     b08:	a2 83       	std	Z+2, r26	; 0x02
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	1c 92       	st	X, r1
     b0e:	1e 92       	st	-X, r1
     b10:	12 97       	sbiw	r26, 0x02	; 2
     b12:	6e 01       	movw	r12, r28
     b14:	f5 e7       	ldi	r31, 0x75	; 117
     b16:	cf 1a       	sub	r12, r31
     b18:	fd ef       	ldi	r31, 0xFD	; 253
     b1a:	df 0a       	sbc	r13, r31
     b1c:	cb 50       	subi	r28, 0x0B	; 11
     b1e:	de 4f       	sbci	r29, 0xFE	; 254
     b20:	d9 82       	std	Y+1, r13	; 0x01
     b22:	c8 82       	st	Y, r12
     b24:	c5 5f       	subi	r28, 0xF5	; 245
     b26:	d1 40       	sbci	r29, 0x01	; 1
     b28:	f6 01       	movw	r30, r12
     b2a:	13 82       	std	Z+3, r1	; 0x03
     b2c:	12 82       	std	Z+2, r1	; 0x02
	if111.value = &faar.value; if112.value = &straight.value; if113.value = &low.value; then11.value = &average.value;
     b2e:	fa 01       	movw	r30, r20
     b30:	31 83       	std	Z+1, r19	; 0x01
     b32:	20 83       	st	Z, r18
     b34:	fc 01       	movw	r30, r24
     b36:	71 83       	std	Z+1, r23	; 0x01
     b38:	60 83       	st	Z, r22
     b3a:	ad 92       	st	X+, r10
     b3c:	bc 92       	st	X, r11
     b3e:	d6 01       	movw	r26, r12
     b40:	11 96       	adiw	r26, 0x01	; 1
     b42:	3c 92       	st	X, r3
     b44:	2e 92       	st	-X, r2
	
	// if dist is faar and steering is straight and currentEsc is medium then speed is fast
	struct rule_element_type if121, if122, if123, then12;
	rule12.if_side = &if121; if121.next = &if122; if122.next = &if123; if123.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     b46:	40 5f       	subi	r20, 0xF0	; 240
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	c7 50       	subi	r28, 0x07	; 7
     b4c:	de 4f       	sbci	r29, 0xFE	; 254
     b4e:	59 83       	std	Y+1, r21	; 0x01
     b50:	48 83       	st	Y, r20
     b52:	c9 5f       	subi	r28, 0xF9	; 249
     b54:	d1 40       	sbci	r29, 0x01	; 1
     b56:	40 96       	adiw	r24, 0x10	; 16
     b58:	fa 01       	movw	r30, r20
     b5a:	93 83       	std	Z+3, r25	; 0x03
     b5c:	82 83       	std	Z+2, r24	; 0x02
     b5e:	1c 96       	adiw	r26, 0x0c	; 12
     b60:	fc 01       	movw	r30, r24
     b62:	b3 83       	std	Z+3, r27	; 0x03
     b64:	a2 83       	std	Z+2, r26	; 0x02
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	1c 92       	st	X, r1
     b6a:	1e 92       	st	-X, r1
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	6e 01       	movw	r12, r28
     b70:	f5 e6       	ldi	r31, 0x65	; 101
     b72:	cf 1a       	sub	r12, r31
     b74:	fd ef       	ldi	r31, 0xFD	; 253
     b76:	df 0a       	sbc	r13, r31
     b78:	c5 50       	subi	r28, 0x05	; 5
     b7a:	de 4f       	sbci	r29, 0xFE	; 254
     b7c:	d9 82       	std	Y+1, r13	; 0x01
     b7e:	c8 82       	st	Y, r12
     b80:	cb 5f       	subi	r28, 0xFB	; 251
     b82:	d1 40       	sbci	r29, 0x01	; 1
     b84:	f6 01       	movw	r30, r12
     b86:	13 82       	std	Z+3, r1	; 0x03
     b88:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &faar.value; if122.value = &straight.value; if123.value = &medium.value; then12.value = &fast.value;
     b8a:	fa 01       	movw	r30, r20
     b8c:	31 83       	std	Z+1, r19	; 0x01
     b8e:	20 83       	st	Z, r18
     b90:	fc 01       	movw	r30, r24
     b92:	71 83       	std	Z+1, r23	; 0x01
     b94:	60 83       	st	Z, r22
     b96:	0d 93       	st	X+, r16
     b98:	1c 93       	st	X, r17
     b9a:	81 ea       	ldi	r24, 0xA1	; 161
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	8c 0f       	add	r24, r28
     ba0:	9d 1f       	adc	r25, r29
     ba2:	0a 96       	adiw	r24, 0x0a	; 10
     ba4:	d6 01       	movw	r26, r12
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	9c 93       	st	X, r25
     baa:	8e 93       	st	-X, r24
	
	// if dist is faar and steering is straight and currentEsc is high then speed is fast
	struct rule_element_type if131, if132, if133, then13;
	rule13.if_side = &if131; if131.next = &if132; if132.next = &if133; if133.next = NULL; rule13.then_side = &then13; then13.next = NULL;
     bac:	0e 59       	subi	r16, 0x9E	; 158
     bae:	1e 4f       	sbci	r17, 0xFE	; 254
     bb0:	c1 50       	subi	r28, 0x01	; 1
     bb2:	de 4f       	sbci	r29, 0xFE	; 254
     bb4:	19 83       	std	Y+1, r17	; 0x01
     bb6:	08 83       	st	Y, r16
     bb8:	cf 5f       	subi	r28, 0xFF	; 255
     bba:	d1 40       	sbci	r29, 0x01	; 1
     bbc:	4c 5e       	subi	r20, 0xEC	; 236
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	f8 01       	movw	r30, r16
     bc2:	53 83       	std	Z+3, r21	; 0x03
     bc4:	42 83       	std	Z+2, r20	; 0x02
     bc6:	1c 96       	adiw	r26, 0x0c	; 12
     bc8:	fa 01       	movw	r30, r20
     bca:	b3 83       	std	Z+3, r27	; 0x03
     bcc:	a2 83       	std	Z+2, r26	; 0x02
     bce:	13 96       	adiw	r26, 0x03	; 3
     bd0:	1c 92       	st	X, r1
     bd2:	1e 92       	st	-X, r1
     bd4:	12 97       	sbiw	r26, 0x02	; 2
     bd6:	6e 01       	movw	r12, r28
     bd8:	f5 e5       	ldi	r31, 0x55	; 85
     bda:	cf 1a       	sub	r12, r31
     bdc:	fd ef       	ldi	r31, 0xFD	; 253
     bde:	df 0a       	sbc	r13, r31
     be0:	cf 5f       	subi	r28, 0xFF	; 255
     be2:	dd 4f       	sbci	r29, 0xFD	; 253
     be4:	d9 82       	std	Y+1, r13	; 0x01
     be6:	c8 82       	st	Y, r12
     be8:	c1 50       	subi	r28, 0x01	; 1
     bea:	d2 40       	sbci	r29, 0x02	; 2
     bec:	f6 01       	movw	r30, r12
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	12 82       	std	Z+2, r1	; 0x02
	if131.value = &faar.value; if132.value = &straight.value; if133.value = &high.value; then13.value = &fast.value;
     bf2:	f8 01       	movw	r30, r16
     bf4:	31 83       	std	Z+1, r19	; 0x01
     bf6:	20 83       	st	Z, r18
     bf8:	fa 01       	movw	r30, r20
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	60 83       	st	Z, r22
     bfe:	49 e4       	ldi	r20, 0x49	; 73
     c00:	51 e0       	ldi	r21, 0x01	; 1
     c02:	4c 0f       	add	r20, r28
     c04:	5d 1f       	adc	r21, r29
     c06:	46 5f       	subi	r20, 0xF6	; 246
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	4d 93       	st	X+, r20
     c0c:	5c 93       	st	X, r21
     c0e:	d6 01       	movw	r26, r12
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	9c 93       	st	X, r25
     c14:	8e 93       	st	-X, r24

	// if dist is faar and steering is straight then speed is fast
	struct rule_element_type if141, if142, then14;
	rule14.if_side = &if141; if141.next = &if142; if142.next = NULL; rule14.then_side = &then14; then14.next = NULL;
     c16:	44 5a       	subi	r20, 0xA4	; 164
     c18:	5e 4f       	sbci	r21, 0xFE	; 254
     c1a:	f7 01       	movw	r30, r14
     c1c:	51 83       	std	Z+1, r21	; 0x01
     c1e:	40 83       	st	Z, r20
     c20:	18 96       	adiw	r26, 0x08	; 8
     c22:	fa 01       	movw	r30, r20
     c24:	b3 83       	std	Z+3, r27	; 0x03
     c26:	a2 83       	std	Z+2, r26	; 0x02
     c28:	13 96       	adiw	r26, 0x03	; 3
     c2a:	1c 92       	st	X, r1
     c2c:	1e 92       	st	-X, r1
     c2e:	12 97       	sbiw	r26, 0x02	; 2
     c30:	08 5e       	subi	r16, 0xE8	; 232
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	f7 01       	movw	r30, r14
     c36:	13 83       	std	Z+3, r17	; 0x03
     c38:	02 83       	std	Z+2, r16	; 0x02
     c3a:	f8 01       	movw	r30, r16
     c3c:	13 82       	std	Z+3, r1	; 0x03
     c3e:	12 82       	std	Z+2, r1	; 0x02
	if141.value = &faar.value; if142.value = &straight.value; then14.value = &fast.value;
     c40:	fa 01       	movw	r30, r20
     c42:	31 83       	std	Z+1, r19	; 0x01
     c44:	20 83       	st	Z, r18
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	d8 01       	movw	r26, r16
     c4c:	8d 93       	st	X+, r24
     c4e:	9c 93       	st	X, r25


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     c50:	dc d3       	rcall	.+1976   	; 0x140a <fuzzification>
	rule_evaluation();
     c52:	02 d4       	rcall	.+2052   	; 0x1458 <rule_evaluation>
	defuzzification();
     c54:	47 d4       	rcall	.+2190   	; 0x14e4 <defuzzification>

	if (speed.value > MAXESC)
     c56:	8b ad       	ldd	r24, Y+59	; 0x3b
     c58:	9c ad       	ldd	r25, Y+60	; 0x3c
     c5a:	83 32       	cpi	r24, 0x23	; 35
     c5c:	bb e0       	ldi	r27, 0x0B	; 11
     c5e:	9b 07       	cpc	r25, r27
     c60:	2c f0       	brlt	.+10     	; 0xc6c <FLC_speed+0xb28>
	{
		setESC(MAXESC);
     c62:	82 e2       	ldi	r24, 0x22	; 34
     c64:	9b e0       	ldi	r25, 0x0B	; 11
     c66:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <setESC>
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <FLC_speed+0xb3e>
	}
	else if (speed.value < NEUTRAL)
     c6c:	8d 3c       	cpi	r24, 0xCD	; 205
     c6e:	ea e0       	ldi	r30, 0x0A	; 10
     c70:	9e 07       	cpc	r25, r30
     c72:	2c f4       	brge	.+10     	; 0xc7e <FLC_speed+0xb3a>
	{
		setESC(NEUTRAL);
     c74:	8d ec       	ldi	r24, 0xCD	; 205
     c76:	9a e0       	ldi	r25, 0x0A	; 10
     c78:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <setESC>
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <FLC_speed+0xb3e>
	}
	else
	{
		setESC(speed.value);
     c7e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <setESC>
	}
}
     c82:	c6 54       	subi	r28, 0x46	; 70
     c84:	dd 4f       	sbci	r29, 0xFD	; 253
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	7f 90       	pop	r7
     caa:	6f 90       	pop	r6
     cac:	5f 90       	pop	r5
     cae:	4f 90       	pop	r4
     cb0:	3f 90       	pop	r3
     cb2:	2f 90       	pop	r2
     cb4:	08 95       	ret

00000cb6 <doFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void doFuzzy(int c, int v)
{
     cb6:	2f 92       	push	r2
     cb8:	3f 92       	push	r3
     cba:	4f 92       	push	r4
     cbc:	5f 92       	push	r5
     cbe:	6f 92       	push	r6
     cc0:	7f 92       	push	r7
     cc2:	8f 92       	push	r8
     cc4:	9f 92       	push	r9
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	c4 5c       	subi	r28, 0xC4	; 196
     ce0:	d1 40       	sbci	r29, 0x01	; 1
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	2c 01       	movw	r4, r24
     cee:	6b 01       	movw	r12, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	e8 e8       	ldi	r30, 0x88	; 136
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	de 01       	movw	r26, r28
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	01 90       	ld	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	8a 95       	dec	r24
     d00:	e1 f7       	brne	.-8      	; 0xcfa <doFuzzy+0x44>
	
	struct mf_type rightSide;
	MATLAB_MF(&rightSide, "rightSide", 99, 100, 120, 135); // Min_value = 100
     d02:	3e 01       	movw	r6, r28
     d04:	21 e1       	ldi	r18, 0x11	; 17
     d06:	62 0e       	add	r6, r18
     d08:	71 1c       	adc	r7, r1
     d0a:	0f 2e       	mov	r0, r31
     d0c:	f7 e8       	ldi	r31, 0x87	; 135
     d0e:	ef 2e       	mov	r14, r31
     d10:	f1 2c       	mov	r15, r1
     d12:	f0 2d       	mov	r31, r0
     d14:	08 e7       	ldi	r16, 0x78	; 120
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	24 e6       	ldi	r18, 0x64	; 100
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	43 e6       	ldi	r20, 0x63	; 99
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	60 e9       	ldi	r22, 0x90	; 144
     d22:	71 e0       	ldi	r23, 0x01	; 1
     d24:	c3 01       	movw	r24, r6
     d26:	9c d4       	rcall	.+2360   	; 0x1660 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 125, 145, 155, 175);
     d28:	4e 01       	movw	r8, r28
     d2a:	47 e2       	ldi	r20, 0x27	; 39
     d2c:	84 0e       	add	r8, r20
     d2e:	91 1c       	adc	r9, r1
     d30:	0f 2e       	mov	r0, r31
     d32:	ff ea       	ldi	r31, 0xAF	; 175
     d34:	ef 2e       	mov	r14, r31
     d36:	f1 2c       	mov	r15, r1
     d38:	f0 2d       	mov	r31, r0
     d3a:	0b e9       	ldi	r16, 0x9B	; 155
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	21 e9       	ldi	r18, 0x91	; 145
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4d e7       	ldi	r20, 0x7D	; 125
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	6a e9       	ldi	r22, 0x9A	; 154
     d48:	71 e0       	ldi	r23, 0x01	; 1
     d4a:	c4 01       	movw	r24, r8
     d4c:	89 d4       	rcall	.+2322   	; 0x1660 <MATLAB_MF>
	struct mf_type leftSide;
	MATLAB_MF(&leftSide, "leftSide", 175, 186, 199, 200);  // Max_value = 199
     d4e:	5e 01       	movw	r10, r28
     d50:	5d e3       	ldi	r21, 0x3D	; 61
     d52:	a5 0e       	add	r10, r21
     d54:	b1 1c       	adc	r11, r1
     d56:	0f 2e       	mov	r0, r31
     d58:	f8 ec       	ldi	r31, 0xC8	; 200
     d5a:	ef 2e       	mov	r14, r31
     d5c:	f1 2c       	mov	r15, r1
     d5e:	f0 2d       	mov	r31, r0
     d60:	07 ec       	ldi	r16, 0xC7	; 199
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	2a eb       	ldi	r18, 0xBA	; 186
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4f ea       	ldi	r20, 0xAF	; 175
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	61 ea       	ldi	r22, 0xA1	; 161
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	c5 01       	movw	r24, r10
     d72:	76 d4       	rcall	.+2284   	; 0x1660 <MATLAB_MF>
	
	delta_C.membership_functions = &rightSide;
     d74:	7e 86       	std	Y+14, r7	; 0x0e
     d76:	6d 86       	std	Y+13, r6	; 0x0d
	rightSide.next = &centre;
     d78:	9e a2       	std	Y+38, r9	; 0x26
     d7a:	8d a2       	std	Y+37, r8	; 0x25
	centre.next = &leftSide;
     d7c:	bc ae       	std	Y+60, r11	; 0x3c
     d7e:	ab ae       	std	Y+59, r10	; 0x3b
	leftSide.next = NULL;
     d80:	63 96       	adiw	r28, 0x13	; 19
     d82:	1f ae       	std	Y+63, r1	; 0x3f
     d84:	1e ae       	std	Y+62, r1	; 0x3e
     d86:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
     d88:	84 e6       	ldi	r24, 0x64	; 100
     d8a:	48 16       	cp	r4, r24
     d8c:	51 04       	cpc	r5, r1
     d8e:	2c f4       	brge	.+10     	; 0xd9a <doFuzzy+0xe4>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
     d90:	84 e6       	ldi	r24, 0x64	; 100
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 87       	std	Y+12, r25	; 0x0c
     d96:	8b 87       	std	Y+11, r24	; 0x0b
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <doFuzzy+0xfa>
	}
	else if(c>199)			// if sensor value is bigger than delta_C's input set's upper limit
     d9a:	a8 ec       	ldi	r26, 0xC8	; 200
     d9c:	4a 16       	cp	r4, r26
     d9e:	51 04       	cpc	r5, r1
     da0:	2c f0       	brlt	.+10     	; 0xdac <doFuzzy+0xf6>
	{
		delta_C.value = 199;  // force input value to lowest point in delta_C's input set
     da2:	87 ec       	ldi	r24, 0xC7	; 199
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9c 87       	std	Y+12, r25	; 0x0c
     da8:	8b 87       	std	Y+11, r24	; 0x0b
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <doFuzzy+0xfa>
	}
	else
	{
		delta_C.value = c;
     dac:	5c 86       	std	Y+12, r5	; 0x0c
     dae:	4b 86       	std	Y+11, r4	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	ea ea       	ldi	r30, 0xAA	; 170
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	de 01       	movw	r26, r28
     db8:	ad 5a       	subi	r26, 0xAD	; 173
     dba:	bf 4f       	sbci	r27, 0xFF	; 255
     dbc:	01 90       	ld	r0, Z+
     dbe:	0d 92       	st	X+, r0
     dc0:	8a 95       	dec	r24
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <doFuzzy+0x106>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", 0, 1, 20, 35); // min V is 1
     dc4:	3e 01       	movw	r6, r28
     dc6:	b3 e6       	ldi	r27, 0x63	; 99
     dc8:	6b 0e       	add	r6, r27
     dca:	71 1c       	adc	r7, r1
     dcc:	0f 2e       	mov	r0, r31
     dce:	f3 e2       	ldi	r31, 0x23	; 35
     dd0:	ef 2e       	mov	r14, r31
     dd2:	f1 2c       	mov	r15, r1
     dd4:	f0 2d       	mov	r31, r0
     dd6:	04 e1       	ldi	r16, 0x14	; 20
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	62 eb       	ldi	r22, 0xB2	; 178
     de4:	71 e0       	ldi	r23, 0x01	; 1
     de6:	c3 01       	movw	r24, r6
     de8:	3b d4       	rcall	.+2166   	; 0x1660 <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 15, 35, 40, 55);
     dea:	4e 01       	movw	r8, r28
     dec:	e9 e7       	ldi	r30, 0x79	; 121
     dee:	8e 0e       	add	r8, r30
     df0:	91 1c       	adc	r9, r1
     df2:	0f 2e       	mov	r0, r31
     df4:	f7 e3       	ldi	r31, 0x37	; 55
     df6:	ef 2e       	mov	r14, r31
     df8:	f1 2c       	mov	r15, r1
     dfa:	f0 2d       	mov	r31, r0
     dfc:	08 e2       	ldi	r16, 0x28	; 40
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	23 e2       	ldi	r18, 0x23	; 35
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4f e0       	ldi	r20, 0x0F	; 15
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	6a eb       	ldi	r22, 0xBA	; 186
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	c4 01       	movw	r24, r8
     e0e:	28 d4       	rcall	.+2128   	; 0x1660 <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 35, 50, 74 , 75); // max V is 74
     e10:	5e 01       	movw	r10, r28
     e12:	ff e8       	ldi	r31, 0x8F	; 143
     e14:	af 0e       	add	r10, r31
     e16:	b1 1c       	adc	r11, r1
     e18:	0f 2e       	mov	r0, r31
     e1a:	fb e4       	ldi	r31, 0x4B	; 75
     e1c:	ef 2e       	mov	r14, r31
     e1e:	f1 2c       	mov	r15, r1
     e20:	f0 2d       	mov	r31, r0
     e22:	0a e4       	ldi	r16, 0x4A	; 74
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	22 e3       	ldi	r18, 0x32	; 50
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	43 e2       	ldi	r20, 0x23	; 35
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	61 ec       	ldi	r22, 0xC1	; 193
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	c5 01       	movw	r24, r10
     e34:	15 d4       	rcall	.+2090   	; 0x1660 <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     e36:	a1 96       	adiw	r28, 0x21	; 33
     e38:	7f ae       	std	Y+63, r7	; 0x3f
     e3a:	6e ae       	std	Y+62, r6	; 0x3e
     e3c:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     e3e:	d3 01       	movw	r26, r6
     e40:	55 96       	adiw	r26, 0x15	; 21
     e42:	9c 92       	st	X, r9
     e44:	8e 92       	st	-X, r8
     e46:	54 97       	sbiw	r26, 0x14	; 20
	inNyll.next = &inPlus;
     e48:	f4 01       	movw	r30, r8
     e4a:	b5 8a       	std	Z+21, r11	; 0x15
     e4c:	a4 8a       	std	Z+20, r10	; 0x14
	inPlus.next = NULL;
     e4e:	d5 01       	movw	r26, r10
     e50:	55 96       	adiw	r26, 0x15	; 21
     e52:	1c 92       	st	X, r1
     e54:	1e 92       	st	-X, r1
     e56:	54 97       	sbiw	r26, 0x14	; 20
	
	// set V's input value to V´s value
	if(v<1)				// if sensor value is smaller than error's input set lower limit
     e58:	1c 14       	cp	r1, r12
     e5a:	1d 04       	cpc	r1, r13
     e5c:	3c f0       	brlt	.+14     	; 0xe6c <doFuzzy+0x1b6>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	6f 96       	adiw	r28, 0x1f	; 31
     e64:	9f af       	std	Y+63, r25	; 0x3f
     e66:	8e af       	std	Y+62, r24	; 0x3e
     e68:	6f 97       	sbiw	r28, 0x1f	; 31
     e6a:	0f c0       	rjmp	.+30     	; 0xe8a <doFuzzy+0x1d4>
	}
	else if(v>74)			// if sensor value is bigger than error's input set's upper limit
     e6c:	bb e4       	ldi	r27, 0x4B	; 75
     e6e:	cb 16       	cp	r12, r27
     e70:	d1 04       	cpc	r13, r1
     e72:	3c f0       	brlt	.+14     	; 0xe82 <doFuzzy+0x1cc>
	{
		delta_V.value = 74;  // force input value to lowest point in error's input set
     e74:	8a e4       	ldi	r24, 0x4A	; 74
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	6f 96       	adiw	r28, 0x1f	; 31
     e7a:	9f af       	std	Y+63, r25	; 0x3f
     e7c:	8e af       	std	Y+62, r24	; 0x3e
     e7e:	6f 97       	sbiw	r28, 0x1f	; 31
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <doFuzzy+0x1d4>
	}
	else
	{
		delta_V.value = v;
     e82:	6f 96       	adiw	r28, 0x1f	; 31
     e84:	df ae       	std	Y+63, r13	; 0x3f
     e86:	ce ae       	std	Y+62, r12	; 0x3e
     e88:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     e8a:	1e 01       	movw	r2, r28
     e8c:	e5 ea       	ldi	r30, 0xA5	; 165
     e8e:	2e 0e       	add	r2, r30
     e90:	31 1c       	adc	r3, r1
     e92:	89 e0       	ldi	r24, 0x09	; 9
     e94:	ed e0       	ldi	r30, 0x0D	; 13
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	d1 01       	movw	r26, r2
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	8a 95       	dec	r24
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <doFuzzy+0x1e4>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2359, 2360, 2360, 2460);
     ea2:	2e 01       	movw	r4, r28
     ea4:	f5 eb       	ldi	r31, 0xB5	; 181
     ea6:	4f 0e       	add	r4, r31
     ea8:	51 1c       	adc	r5, r1
     eaa:	0f 2e       	mov	r0, r31
     eac:	fc e9       	ldi	r31, 0x9C	; 156
     eae:	ef 2e       	mov	r14, r31
     eb0:	f9 e0       	ldi	r31, 0x09	; 9
     eb2:	ff 2e       	mov	r15, r31
     eb4:	f0 2d       	mov	r31, r0
     eb6:	08 e3       	ldi	r16, 0x38	; 56
     eb8:	19 e0       	ldi	r17, 0x09	; 9
     eba:	28 e3       	ldi	r18, 0x38	; 56
     ebc:	39 e0       	ldi	r19, 0x09	; 9
     ebe:	47 e3       	ldi	r20, 0x37	; 55
     ec0:	59 e0       	ldi	r21, 0x09	; 9
     ec2:	68 ec       	ldi	r22, 0xC8	; 200
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	c2 01       	movw	r24, r4
     ec8:	cb d3       	rcall	.+1942   	; 0x1660 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2400, 2460, 2460, 2560);
     eca:	3e 01       	movw	r6, r28
     ecc:	2b ec       	ldi	r18, 0xCB	; 203
     ece:	62 0e       	add	r6, r18
     ed0:	71 1c       	adc	r7, r1
     ed2:	0f 2e       	mov	r0, r31
     ed4:	e1 2c       	mov	r14, r1
     ed6:	fa e0       	ldi	r31, 0x0A	; 10
     ed8:	ff 2e       	mov	r15, r31
     eda:	f0 2d       	mov	r31, r0
     edc:	0c e9       	ldi	r16, 0x9C	; 156
     ede:	19 e0       	ldi	r17, 0x09	; 9
     ee0:	2c e9       	ldi	r18, 0x9C	; 156
     ee2:	39 e0       	ldi	r19, 0x09	; 9
     ee4:	40 e6       	ldi	r20, 0x60	; 96
     ee6:	59 e0       	ldi	r21, 0x09	; 9
     ee8:	64 e2       	ldi	r22, 0x24	; 36
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	c3 01       	movw	r24, r6
     eee:	b8 d3       	rcall	.+1904   	; 0x1660 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2520, 2660, 2660, 2720);
     ef0:	6e 01       	movw	r12, r28
     ef2:	41 ee       	ldi	r20, 0xE1	; 225
     ef4:	c4 0e       	add	r12, r20
     ef6:	d1 1c       	adc	r13, r1
     ef8:	0f 2e       	mov	r0, r31
     efa:	f0 ea       	ldi	r31, 0xA0	; 160
     efc:	ef 2e       	mov	r14, r31
     efe:	fa e0       	ldi	r31, 0x0A	; 10
     f00:	ff 2e       	mov	r15, r31
     f02:	f0 2d       	mov	r31, r0
     f04:	04 e6       	ldi	r16, 0x64	; 100
     f06:	1a e0       	ldi	r17, 0x0A	; 10
     f08:	24 e6       	ldi	r18, 0x64	; 100
     f0a:	3a e0       	ldi	r19, 0x0A	; 10
     f0c:	48 ed       	ldi	r20, 0xD8	; 216
     f0e:	59 e0       	ldi	r21, 0x09	; 9
     f10:	69 e2       	ldi	r22, 0x29	; 41
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	c6 01       	movw	r24, r12
     f16:	a4 d3       	rcall	.+1864   	; 0x1660 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2700, 2800, 2800, 2900);
     f18:	4e 01       	movw	r8, r28
     f1a:	57 ef       	ldi	r21, 0xF7	; 247
     f1c:	85 0e       	add	r8, r21
     f1e:	91 1c       	adc	r9, r1
     f20:	0f 2e       	mov	r0, r31
     f22:	f4 e5       	ldi	r31, 0x54	; 84
     f24:	ef 2e       	mov	r14, r31
     f26:	fb e0       	ldi	r31, 0x0B	; 11
     f28:	ff 2e       	mov	r15, r31
     f2a:	f0 2d       	mov	r31, r0
     f2c:	00 ef       	ldi	r16, 0xF0	; 240
     f2e:	1a e0       	ldi	r17, 0x0A	; 10
     f30:	20 ef       	ldi	r18, 0xF0	; 240
     f32:	3a e0       	ldi	r19, 0x0A	; 10
     f34:	4c e8       	ldi	r20, 0x8C	; 140
     f36:	5a e0       	ldi	r21, 0x0A	; 10
     f38:	62 e3       	ldi	r22, 0x32	; 50
     f3a:	71 e0       	ldi	r23, 0x01	; 1
     f3c:	c4 01       	movw	r24, r8
     f3e:	90 d3       	rcall	.+1824   	; 0x1660 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2860, 2960, 2960, 2961);
     f40:	5e 01       	movw	r10, r28
     f42:	83 ef       	ldi	r24, 0xF3	; 243
     f44:	a8 1a       	sub	r10, r24
     f46:	8e ef       	ldi	r24, 0xFE	; 254
     f48:	b8 0a       	sbc	r11, r24
     f4a:	0f 2e       	mov	r0, r31
     f4c:	f1 e9       	ldi	r31, 0x91	; 145
     f4e:	ef 2e       	mov	r14, r31
     f50:	fb e0       	ldi	r31, 0x0B	; 11
     f52:	ff 2e       	mov	r15, r31
     f54:	f0 2d       	mov	r31, r0
     f56:	00 e9       	ldi	r16, 0x90	; 144
     f58:	1b e0       	ldi	r17, 0x0B	; 11
     f5a:	20 e9       	ldi	r18, 0x90	; 144
     f5c:	3b e0       	ldi	r19, 0x0B	; 11
     f5e:	4c e2       	ldi	r20, 0x2C	; 44
     f60:	5b e0       	ldi	r21, 0x0B	; 11
     f62:	62 ed       	ldi	r22, 0xD2	; 210
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	c5 01       	movw	r24, r10
     f68:	7b d3       	rcall	.+1782   	; 0x1660 <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     f6a:	d1 01       	movw	r26, r2
     f6c:	1d 96       	adiw	r26, 0x0d	; 13
     f6e:	bc 92       	st	X, r11
     f70:	ae 92       	st	-X, r10
     f72:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
     f74:	f5 01       	movw	r30, r10
     f76:	95 8a       	std	Z+21, r9	; 0x15
     f78:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &straight;
     f7a:	d4 01       	movw	r26, r8
     f7c:	55 96       	adiw	r26, 0x15	; 21
     f7e:	dc 92       	st	X, r13
     f80:	ce 92       	st	-X, r12
     f82:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
     f84:	f6 01       	movw	r30, r12
     f86:	75 8a       	std	Z+21, r7	; 0x15
     f88:	64 8a       	std	Z+20, r6	; 0x14
	left.next = &sharpLeft;
     f8a:	d3 01       	movw	r26, r6
     f8c:	55 96       	adiw	r26, 0x15	; 21
     f8e:	5c 92       	st	X, r5
     f90:	4e 92       	st	-X, r4
     f92:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
     f94:	f2 01       	movw	r30, r4
     f96:	15 8a       	std	Z+21, r1	; 0x15
     f98:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     f9a:	ce 01       	movw	r24, r28
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	90 93 19 03 	sts	0x0319, r25
     fa2:	80 93 18 03 	sts	0x0318, r24
	delta_C.next = &delta_V;
     fa6:	e2 56       	subi	r30, 0x62	; 98
     fa8:	f1 09       	sbc	r31, r1
     faa:	f8 8b       	std	Y+16, r31	; 0x10
     fac:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     fae:	17 86       	std	Z+15, r1	; 0x0f
     fb0:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     fb2:	30 92 17 03 	sts	0x0317, r3
     fb6:	20 92 16 03 	sts	0x0316, r2
	steering.next = NULL;
     fba:	d1 01       	movw	r26, r2
     fbc:	1f 96       	adiw	r26, 0x0f	; 15
     fbe:	1c 92       	st	X, r1
     fc0:	1e 92       	st	-X, r1
     fc2:	1e 97       	sbiw	r26, 0x0e	; 14
	
	
	
	//RULE 9 "if C is centre AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     fc4:	a2 58       	subi	r26, 0x82	; 130
     fc6:	bf 4f       	sbci	r27, 0xFF	; 255
     fc8:	73 01       	movw	r14, r6
     fca:	ea e0       	ldi	r30, 0x0A	; 10
     fcc:	ee 0e       	add	r14, r30
     fce:	f1 1c       	adc	r15, r1
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	fc 92       	st	X, r15
     fd4:	ee 92       	st	-X, r14
	then9.next = NULL;
     fd6:	13 96       	adiw	r26, 0x03	; 3
     fd8:	1c 92       	st	X, r1
     fda:	1e 92       	st	-X, r1
     fdc:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     fde:	9e 01       	movw	r18, r28
     fe0:	29 5d       	subi	r18, 0xD9	; 217
     fe2:	3e 4f       	sbci	r19, 0xFE	; 254
     fe4:	3e 01       	movw	r6, r28
     fe6:	f9 e9       	ldi	r31, 0x99	; 153
     fe8:	6f 0e       	add	r6, r31
     fea:	71 1c       	adc	r7, r1
     fec:	f9 01       	movw	r30, r18
     fee:	71 82       	std	Z+1, r7	; 0x01
     ff0:	60 82       	st	Z, r6
	if92.next = NULL;
     ff2:	13 82       	std	Z+3, r1	; 0x03
     ff4:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if91;
	if91.value = &centre.value;
     ff6:	86 5d       	subi	r24, 0xD6	; 214
     ff8:	9e 4f       	sbci	r25, 0xFE	; 254
     ffa:	8e 01       	movw	r16, r28
     ffc:	0f 5c       	subi	r16, 0xCF	; 207
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	fc 01       	movw	r30, r24
    1002:	11 83       	std	Z+1, r17	; 0x01
    1004:	00 83       	st	Z, r16
	if91.next = &if92;
    1006:	33 83       	std	Z+3, r19	; 0x03
    1008:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
    100a:	34 96       	adiw	r30, 0x04	; 4
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
	rule9.then_side = &then9;
    1010:	b3 83       	std	Z+3, r27	; 0x03
    1012:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = NULL;
    1014:	15 82       	std	Z+5, r1	; 0x05
    1016:	14 82       	std	Z+4, r1	; 0x04

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
    1018:	22 5f       	subi	r18, 0xF2	; 242
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	4a e0       	ldi	r20, 0x0A	; 10
    101e:	84 0e       	add	r8, r20
    1020:	91 1c       	adc	r9, r1
    1022:	d9 01       	movw	r26, r18
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	9c 92       	st	X, r9
    1028:	8e 92       	st	-X, r8
	then8.next = NULL;
    102a:	13 96       	adiw	r26, 0x03	; 3
    102c:	1c 92       	st	X, r1
    102e:	1e 92       	st	-X, r1
    1030:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if82;
	if82.value = &inPlus.value;
    1032:	be 01       	movw	r22, r28
    1034:	67 5c       	subi	r22, 0xC7	; 199
    1036:	7e 4f       	sbci	r23, 0xFE	; 254
    1038:	db 01       	movw	r26, r22
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	7c 92       	st	X, r7
    103e:	6e 92       	st	-X, r6
	if82.next = NULL;
    1040:	13 96       	adiw	r26, 0x03	; 3
    1042:	1c 92       	st	X, r1
    1044:	1e 92       	st	-X, r1
    1046:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if81;
	if81.value = &leftSide.value;
    1048:	ae 01       	movw	r20, r28
    104a:	43 5c       	subi	r20, 0xC3	; 195
    104c:	5e 4f       	sbci	r21, 0xFE	; 254
    104e:	84 5e       	subi	r24, 0xE4	; 228
    1050:	91 09       	sbc	r25, r1
    1052:	da 01       	movw	r26, r20
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	9c 93       	st	X, r25
    1058:	8e 93       	st	-X, r24
	if81.next = &if82;
    105a:	13 96       	adiw	r26, 0x03	; 3
    105c:	7c 93       	st	X, r23
    105e:	6e 93       	st	-X, r22
    1060:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule8;
	rule8.if_side = &if81;
    1062:	14 96       	adiw	r26, 0x04	; 4
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	5c 93       	st	X, r21
    1068:	4e 93       	st	-X, r20
	rule8.then_side = &then8;
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	3c 93       	st	X, r19
    106e:	2e 93       	st	-X, r18
    1070:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
    1072:	15 96       	adiw	r26, 0x05	; 5
    1074:	fc 93       	st	X, r31
    1076:	ee 93       	st	-X, r30
    1078:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
    107a:	46 5f       	subi	r20, 0xF6	; 246
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	ea e0       	ldi	r30, 0x0A	; 10
    1080:	ae 0e       	add	r10, r30
    1082:	b1 1c       	adc	r11, r1
    1084:	fa 01       	movw	r30, r20
    1086:	b1 82       	std	Z+1, r11	; 0x01
    1088:	a0 82       	st	Z, r10
	then7.next = NULL;
    108a:	13 82       	std	Z+3, r1	; 0x03
    108c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if72;
	if72.value = &inNyll.value;
    108e:	5e 01       	movw	r10, r28
    1090:	f5 eb       	ldi	r31, 0xB5	; 181
    1092:	af 1a       	sub	r10, r31
    1094:	fe ef       	ldi	r31, 0xFE	; 254
    1096:	bf 0a       	sbc	r11, r31
    1098:	22 5b       	subi	r18, 0xB2	; 178
    109a:	31 09       	sbc	r19, r1
    109c:	f5 01       	movw	r30, r10
    109e:	31 83       	std	Z+1, r19	; 0x01
    10a0:	20 83       	st	Z, r18
	if72.next = NULL;
    10a2:	13 82       	std	Z+3, r1	; 0x03
    10a4:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if71;
	if71.value = &leftSide.value;
    10a6:	6a 5e       	subi	r22, 0xEA	; 234
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	fb 01       	movw	r30, r22
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
	if71.next = &if72;
    10b0:	b3 82       	std	Z+3, r11	; 0x03
    10b2:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule7;
	rule7.if_side = &if71;
    10b4:	34 96       	adiw	r30, 0x04	; 4
    10b6:	71 83       	std	Z+1, r23	; 0x01
    10b8:	60 83       	st	Z, r22
	rule7.then_side = &then7;
    10ba:	53 83       	std	Z+3, r21	; 0x03
    10bc:	42 83       	std	Z+2, r20	; 0x02
	rule7.next = &rule8;
    10be:	b5 83       	std	Z+5, r27	; 0x05
    10c0:	a4 83       	std	Z+4, r26	; 0x04
	
	
	//RULE 6 "if C is positive AND V is minus then servo is straight"
	struct rule_element_type then6;
	then6.value = &straight.value;
    10c2:	4a e0       	ldi	r20, 0x0A	; 10
    10c4:	c4 0e       	add	r12, r20
    10c6:	d1 1c       	adc	r13, r1
    10c8:	c7 5a       	subi	r28, 0xA7	; 167
    10ca:	de 4f       	sbci	r29, 0xFE	; 254
    10cc:	d9 82       	std	Y+1, r13	; 0x01
    10ce:	c8 82       	st	Y, r12
    10d0:	c9 55       	subi	r28, 0x59	; 89
    10d2:	d1 40       	sbci	r29, 0x01	; 1
	then6.next = NULL;
    10d4:	c5 5a       	subi	r28, 0xA5	; 165
    10d6:	de 4f       	sbci	r29, 0xFE	; 254
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	18 82       	st	Y, r1
    10dc:	cb 55       	subi	r28, 0x5B	; 91
    10de:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if62;
	if62.value = &inMinus.value;
    10e0:	62 5f       	subi	r22, 0xF2	; 242
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	5e 01       	movw	r10, r28
    10e6:	5d e6       	ldi	r21, 0x6D	; 109
    10e8:	a5 0e       	add	r10, r21
    10ea:	b1 1c       	adc	r11, r1
    10ec:	db 01       	movw	r26, r22
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	bc 92       	st	X, r11
    10f2:	ae 92       	st	-X, r10
	if62.next = NULL;
    10f4:	13 96       	adiw	r26, 0x03	; 3
    10f6:	1c 92       	st	X, r1
    10f8:	1e 92       	st	-X, r1
    10fa:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &leftSide.value;
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 59       	subi	r20, 0x9F	; 159
    1100:	5e 4f       	sbci	r21, 0xFE	; 254
    1102:	da 01       	movw	r26, r20
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
	if61.next = &if62;
    110a:	13 96       	adiw	r26, 0x03	; 3
    110c:	7c 93       	st	X, r23
    110e:	6e 93       	st	-X, r22
    1110:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule6;
	rule6.if_side = &if61;
    1112:	82 5e       	subi	r24, 0xE2	; 226
    1114:	9e 4f       	sbci	r25, 0xFE	; 254
    1116:	dc 01       	movw	r26, r24
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	5c 93       	st	X, r21
    111c:	4e 93       	st	-X, r20
	rule6.then_side = &then6;
    111e:	49 e5       	ldi	r20, 0x59	; 89
    1120:	51 e0       	ldi	r21, 0x01	; 1
    1122:	4c 0f       	add	r20, r28
    1124:	5d 1f       	adc	r21, r29
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	5c 93       	st	X, r21
    112a:	4e 93       	st	-X, r20
    112c:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
    112e:	15 96       	adiw	r26, 0x05	; 5
    1130:	fc 93       	st	X, r31
    1132:	ee 93       	st	-X, r30
    1134:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
    1136:	16 96       	adiw	r26, 0x06	; 6
    1138:	5a e0       	ldi	r21, 0x0A	; 10
    113a:	45 0e       	add	r4, r21
    113c:	51 1c       	adc	r5, r1
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	5c 92       	st	X, r5
    1142:	4e 92       	st	-X, r4
	then5.next = NULL;
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	1c 92       	st	X, r1
    1148:	1e 92       	st	-X, r1
    114a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
    114c:	2e 01       	movw	r4, r28
    114e:	e1 e9       	ldi	r30, 0x91	; 145
    1150:	4e 1a       	sub	r4, r30
    1152:	ee ef       	ldi	r30, 0xFE	; 254
    1154:	5e 0a       	sbc	r5, r30
    1156:	f2 01       	movw	r30, r4
    1158:	31 83       	std	Z+1, r19	; 0x01
    115a:	20 83       	st	Z, r18
	if52.next = NULL;
    115c:	13 82       	std	Z+3, r1	; 0x03
    115e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &rightSide.value;
    1160:	6a 5e       	subi	r22, 0xEA	; 234
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	ae 01       	movw	r20, r28
    1166:	45 5e       	subi	r20, 0xE5	; 229
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	fb 01       	movw	r30, r22
    116c:	51 83       	std	Z+1, r21	; 0x01
    116e:	40 83       	st	Z, r20
	if51.next = &if52;
    1170:	53 82       	std	Z+3, r5	; 0x03
    1172:	42 82       	std	Z+2, r4	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
    1174:	34 96       	adiw	r30, 0x04	; 4
    1176:	71 83       	std	Z+1, r23	; 0x01
    1178:	60 83       	st	Z, r22
	rule5.then_side = &then5;
    117a:	b3 83       	std	Z+3, r27	; 0x03
    117c:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
    117e:	95 83       	std	Z+5, r25	; 0x05
    1180:	84 83       	std	Z+4, r24	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
    1182:	66 5f       	subi	r22, 0xF6	; 246
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	db 01       	movw	r26, r22
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	dc 92       	st	X, r13
    118c:	ce 92       	st	-X, r12
	then4.next = NULL;
    118e:	13 96       	adiw	r26, 0x03	; 3
    1190:	1c 92       	st	X, r1
    1192:	1e 92       	st	-X, r1
    1194:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
    1196:	4c 96       	adiw	r24, 0x1c	; 28
    1198:	dc 01       	movw	r26, r24
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	3c 93       	st	X, r19
    119e:	2e 93       	st	-X, r18
	if42.next = NULL;
    11a0:	13 96       	adiw	r26, 0x03	; 3
    11a2:	1c 92       	st	X, r1
    11a4:	1e 92       	st	-X, r1
    11a6:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &centre.value;
    11a8:	2e 5f       	subi	r18, 0xFE	; 254
    11aa:	3e 4f       	sbci	r19, 0xFE	; 254
    11ac:	d9 01       	movw	r26, r18
    11ae:	11 96       	adiw	r26, 0x01	; 1
    11b0:	1c 93       	st	X, r17
    11b2:	0e 93       	st	-X, r16
	if41.next = &if42;
    11b4:	13 96       	adiw	r26, 0x03	; 3
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
    11bc:	08 96       	adiw	r24, 0x08	; 8
    11be:	dc 01       	movw	r26, r24
    11c0:	11 96       	adiw	r26, 0x01	; 1
    11c2:	3c 93       	st	X, r19
    11c4:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
    11c6:	13 96       	adiw	r26, 0x03	; 3
    11c8:	7c 93       	st	X, r23
    11ca:	6e 93       	st	-X, r22
    11cc:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
    11ce:	15 96       	adiw	r26, 0x05	; 5
    11d0:	fc 93       	st	X, r31
    11d2:	ee 93       	st	-X, r30
    11d4:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &straight.value;
    11d6:	6e 5e       	subi	r22, 0xEE	; 238
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	fb 01       	movw	r30, r22
    11dc:	d1 82       	std	Z+1, r13	; 0x01
    11de:	c0 82       	st	Z, r12
	then3.next = NULL;
    11e0:	13 82       	std	Z+3, r1	; 0x03
    11e2:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inPlus.value;
    11e4:	1a 96       	adiw	r26, 0x0a	; 10
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	7c 92       	st	X, r7
    11ea:	6e 92       	st	-X, r6
	if32.next = NULL;
    11ec:	13 96       	adiw	r26, 0x03	; 3
    11ee:	1c 92       	st	X, r1
    11f0:	1e 92       	st	-X, r1
    11f2:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &rightSide.value;
    11f4:	2e 5e       	subi	r18, 0xEE	; 238
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	f9 01       	movw	r30, r18
    11fa:	51 83       	std	Z+1, r21	; 0x01
    11fc:	40 83       	st	Z, r20
	if31.next = &if32;
    11fe:	b3 83       	std	Z+3, r27	; 0x03
    1200:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
    1202:	18 96       	adiw	r26, 0x08	; 8
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	3c 93       	st	X, r19
    1208:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
    120a:	13 96       	adiw	r26, 0x03	; 3
    120c:	7c 93       	st	X, r23
    120e:	6e 93       	st	-X, r22
    1210:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
    1212:	15 96       	adiw	r26, 0x05	; 5
    1214:	9c 93       	st	X, r25
    1216:	8e 93       	st	-X, r24
    1218:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
    121a:	6e 5e       	subi	r22, 0xEE	; 238
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	fb 01       	movw	r30, r22
    1220:	f1 82       	std	Z+1, r15	; 0x01
    1222:	e0 82       	st	Z, r14
	then2.next = NULL;
    1224:	13 82       	std	Z+3, r1	; 0x03
    1226:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
    1228:	4c 96       	adiw	r24, 0x1c	; 28
    122a:	fc 01       	movw	r30, r24
    122c:	b1 82       	std	Z+1, r11	; 0x01
    122e:	a0 82       	st	Z, r10
	if22.next = NULL;
    1230:	13 82       	std	Z+3, r1	; 0x03
    1232:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &rightSide.value;
    1234:	2e 5e       	subi	r18, 0xEE	; 238
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	f9 01       	movw	r30, r18
    123a:	51 83       	std	Z+1, r21	; 0x01
    123c:	40 83       	st	Z, r20
	if21.next = &if22;
    123e:	93 83       	std	Z+3, r25	; 0x03
    1240:	82 83       	std	Z+2, r24	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
    1242:	08 96       	adiw	r24, 0x08	; 8
    1244:	fc 01       	movw	r30, r24
    1246:	31 83       	std	Z+1, r19	; 0x01
    1248:	20 83       	st	Z, r18
	rule2.then_side = &then2;
    124a:	73 83       	std	Z+3, r23	; 0x03
    124c:	62 83       	std	Z+2, r22	; 0x02
	rule2.next = &rule3;
    124e:	b5 83       	std	Z+5, r27	; 0x05
    1250:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
    1252:	58 96       	adiw	r26, 0x18	; 24
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	9c 92       	st	X, r9
    1258:	8e 92       	st	-X, r8
	then1.next = NULL;
    125a:	13 96       	adiw	r26, 0x03	; 3
    125c:	1c 92       	st	X, r1
    125e:	1e 92       	st	-X, r1
    1260:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &inMinus.value;
    1262:	44 56       	subi	r20, 0x64	; 100
    1264:	5e 4f       	sbci	r21, 0xFE	; 254
    1266:	fa 01       	movw	r30, r20
    1268:	b1 82       	std	Z+1, r11	; 0x01
    126a:	a0 82       	st	Z, r10
	if12.next = NULL;
    126c:	13 82       	std	Z+3, r1	; 0x03
    126e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &centre.value;
    1270:	2e 5e       	subi	r18, 0xEE	; 238
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	f9 01       	movw	r30, r18
    1276:	11 83       	std	Z+1, r17	; 0x01
    1278:	00 83       	st	Z, r16
	if11.next = &if12;
    127a:	53 83       	std	Z+3, r21	; 0x03
    127c:	42 83       	std	Z+2, r20	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
    127e:	34 96       	adiw	r30, 0x04	; 4
    1280:	31 83       	std	Z+1, r19	; 0x01
    1282:	20 83       	st	Z, r18
	rule1.then_side = &then1;
    1284:	b3 83       	std	Z+3, r27	; 0x03
    1286:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
    1288:	95 83       	std	Z+5, r25	; 0x05
    128a:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
    128c:	f0 93 1b 03 	sts	0x031B, r31
    1290:	e0 93 1a 03 	sts	0x031A, r30
	
	
	// the methods performing the FLC
	fuzzification();
    1294:	ba d0       	rcall	.+372    	; 0x140a <fuzzification>
	rule_evaluation();
    1296:	e0 d0       	rcall	.+448    	; 0x1458 <rule_evaluation>
	defuzzification();
    1298:	25 d1       	rcall	.+586    	; 0x14e4 <defuzzification>
	if (steering.value < MAXLEFT)
    129a:	d1 01       	movw	r26, r2
    129c:	1a 96       	adiw	r26, 0x0a	; 10
    129e:	8d 91       	ld	r24, X+
    12a0:	9c 91       	ld	r25, X
    12a2:	1b 97       	sbiw	r26, 0x0b	; 11
    12a4:	86 3e       	cpi	r24, 0xE6	; 230
    12a6:	b7 e0       	ldi	r27, 0x07	; 7
    12a8:	9b 07       	cpc	r25, r27
    12aa:	24 f4       	brge	.+8      	; 0x12b4 <doFuzzy+0x5fe>
	{
		setServo(MAXLEFT);
    12ac:	86 ee       	ldi	r24, 0xE6	; 230
    12ae:	97 e0       	ldi	r25, 0x07	; 7
    12b0:	fe d5       	rcall	.+3068   	; 0x1eae <setServo>
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <doFuzzy+0x610>
	}
	else if (steering.value >MAXRIGHT)
    12b4:	85 3e       	cpi	r24, 0xE5	; 229
    12b6:	ec e0       	ldi	r30, 0x0C	; 12
    12b8:	9e 07       	cpc	r25, r30
    12ba:	24 f0       	brlt	.+8      	; 0x12c4 <doFuzzy+0x60e>
	{
		setServo(MAXRIGHT);
    12bc:	84 ee       	ldi	r24, 0xE4	; 228
    12be:	9c e0       	ldi	r25, 0x0C	; 12
    12c0:	f6 d5       	rcall	.+3052   	; 0x1eae <setServo>
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <doFuzzy+0x610>
	}
	else
	{
		setServo(steering.value);
    12c4:	f4 d5       	rcall	.+3048   	; 0x1eae <setServo>
	}
}
    12c6:	cc 53       	subi	r28, 0x3C	; 60
    12c8:	de 4f       	sbci	r29, 0xFE	; 254
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	bf 90       	pop	r11
    12e6:	af 90       	pop	r10
    12e8:	9f 90       	pop	r9
    12ea:	8f 90       	pop	r8
    12ec:	7f 90       	pop	r7
    12ee:	6f 90       	pop	r6
    12f0:	5f 90       	pop	r5
    12f2:	4f 90       	pop	r4
    12f4:	3f 90       	pop	r3
    12f6:	2f 90       	pop	r2
    12f8:	08 95       	ret

000012fa <FLC_steering>:
int FLC_steering(int c, int v)
{
    
    
    
	if ((c == 1) & (v == 81))        // right curvature, turn right
    12fa:	31 e0       	ldi	r19, 0x01	; 1
    12fc:	61 35       	cpi	r22, 0x51	; 81
    12fe:	71 05       	cpc	r23, r1
    1300:	09 f0       	breq	.+2      	; 0x1304 <FLC_steering+0xa>
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	09 f0       	breq	.+2      	; 0x130e <FLC_steering+0x14>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	22 23       	and	r18, r18
    1310:	31 f0       	breq	.+12     	; 0x131e <FLC_steering+0x24>
    1312:	33 23       	and	r19, r19
    1314:	21 f0       	breq	.+8      	; 0x131e <FLC_steering+0x24>
	{
		setServo(MAXRIGHT);
    1316:	84 ee       	ldi	r24, 0xE4	; 228
    1318:	9c e0       	ldi	r25, 0x0C	; 12
    131a:	c9 d5       	rcall	.+2962   	; 0x1eae <setServo>
    131c:	0e c0       	rjmp	.+28     	; 0x133a <FLC_steering+0x40>
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	91 05       	cpc	r25, r1
    1324:	09 f0       	breq	.+2      	; 0x1328 <FLC_steering+0x2e>
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	22 23       	and	r18, r18
    132a:	31 f0       	breq	.+12     	; 0x1338 <FLC_steering+0x3e>
    132c:	33 23       	and	r19, r19
    132e:	21 f0       	breq	.+8      	; 0x1338 <FLC_steering+0x3e>
	{
		setServo(MAXLEFT);
    1330:	86 ee       	ldi	r24, 0xE6	; 230
    1332:	97 e0       	ldi	r25, 0x07	; 7
    1334:	bc d5       	rcall	.+2936   	; 0x1eae <setServo>
    1336:	01 c0       	rjmp	.+2      	; 0x133a <FLC_steering+0x40>
	}
	else                                   // straight road, do fuzzy
	{
		doFuzzy(c,v);
    1338:	be dc       	rcall	.-1668   	; 0xcb6 <doFuzzy>
	}
	
	
	return 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	08 95       	ret

00001340 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1340:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1342:	84 85       	ldd	r24, Z+12	; 0x0c
    1344:	95 85       	ldd	r25, Z+13	; 0x0d
    1346:	9b 01       	movw	r18, r22
    1348:	28 1b       	sub	r18, r24
    134a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    134c:	86 85       	ldd	r24, Z+14	; 0x0e
    134e:	97 85       	ldd	r25, Z+15	; 0x0f
    1350:	86 1b       	sub	r24, r22
    1352:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	f4 f4       	brge	.+60     	; 0x1396 <compute_degree_of_membership+0x56>
    135a:	18 16       	cp	r1, r24
    135c:	19 06       	cpc	r1, r25
    135e:	f4 f4       	brge	.+60     	; 0x139c <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1360:	60 89       	ldd	r22, Z+16	; 0x10
    1362:	71 89       	ldd	r23, Z+17	; 0x11
    1364:	a2 89       	ldd	r26, Z+18	; 0x12
    1366:	b3 89       	ldd	r27, Z+19	; 0x13
    1368:	8a 9f       	mul	r24, r26
    136a:	a0 01       	movw	r20, r0
    136c:	8b 9f       	mul	r24, r27
    136e:	50 0d       	add	r21, r0
    1370:	9a 9f       	mul	r25, r26
    1372:	50 0d       	add	r21, r0
    1374:	11 24       	eor	r1, r1
    1376:	26 9f       	mul	r18, r22
    1378:	c0 01       	movw	r24, r0
    137a:	27 9f       	mul	r18, r23
    137c:	90 0d       	add	r25, r0
    137e:	36 9f       	mul	r19, r22
    1380:	90 0d       	add	r25, r0
    1382:	11 24       	eor	r1, r1
    1384:	48 17       	cp	r20, r24
    1386:	59 07       	cpc	r21, r25
    1388:	0c f4       	brge	.+2      	; 0x138c <compute_degree_of_membership+0x4c>
    138a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    138c:	8f 3f       	cpi	r24, 0xFF	; 255
    138e:	91 05       	cpc	r25, r1
    1390:	09 f0       	breq	.+2      	; 0x1394 <compute_degree_of_membership+0x54>
    1392:	3c f4       	brge	.+14     	; 0x13a2 <compute_degree_of_membership+0x62>
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	05 c0       	rjmp	.+10     	; 0x13a6 <compute_degree_of_membership+0x66>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    13a6:	93 87       	std	Z+11, r25	; 0x0b
    13a8:	82 87       	std	Z+10, r24	; 0x0a
    13aa:	08 95       	ret

000013ac <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    13b6:	c6 85       	ldd	r28, Z+14	; 0x0e
    13b8:	d7 85       	ldd	r29, Z+15	; 0x0f
    13ba:	84 85       	ldd	r24, Z+12	; 0x0c
    13bc:	95 85       	ldd	r25, Z+13	; 0x0d
    13be:	c8 1b       	sub	r28, r24
    13c0:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    13c2:	22 85       	ldd	r18, Z+10	; 0x0a
    13c4:	33 85       	ldd	r19, Z+11	; 0x0b
    13c6:	60 89       	ldd	r22, Z+16	; 0x10
    13c8:	71 89       	ldd	r23, Z+17	; 0x11
    13ca:	c9 01       	movw	r24, r18
    13cc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    13d0:	8e 01       	movw	r16, r28
    13d2:	06 1b       	sub	r16, r22
    13d4:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    13d6:	62 89       	ldd	r22, Z+18	; 0x12
    13d8:	73 89       	ldd	r23, Z+19	; 0x13
    13da:	c9 01       	movw	r24, r18
    13dc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
    top = base - run_1 - run_2;
    13e0:	06 1b       	sub	r16, r22
    13e2:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    13e4:	c0 0f       	add	r28, r16
    13e6:	d1 1f       	adc	r29, r17
    13e8:	2c 9f       	mul	r18, r28
    13ea:	c0 01       	movw	r24, r0
    13ec:	2d 9f       	mul	r18, r29
    13ee:	90 0d       	add	r25, r0
    13f0:	3c 9f       	mul	r19, r28
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	99 23       	and	r25, r25
    13f8:	0c f4       	brge	.+2      	; 0x13fc <compute_area_of_trapezoid+0x50>
    13fa:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    13fc:	95 95       	asr	r25
    13fe:	87 95       	ror	r24
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	08 95       	ret

0000140a <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1412:	00 91 18 03 	lds	r16, 0x0318
    1416:	10 91 19 03 	lds	r17, 0x0319
    141a:	01 15       	cp	r16, r1
    141c:	11 05       	cpc	r17, r1
    141e:	b9 f0       	breq	.+46     	; 0x144e <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1420:	f8 01       	movw	r30, r16
    1422:	c4 85       	ldd	r28, Z+12	; 0x0c
    1424:	d5 85       	ldd	r29, Z+13	; 0x0d
    1426:	20 97       	sbiw	r28, 0x00	; 0
    1428:	61 f0       	breq	.+24     	; 0x1442 <fuzzification+0x38>
            if (mf!=NULL) {
    142a:	20 97       	sbiw	r28, 0x00	; 0
    142c:	29 f0       	breq	.+10     	; 0x1438 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    142e:	f8 01       	movw	r30, r16
    1430:	62 85       	ldd	r22, Z+10	; 0x0a
    1432:	73 85       	ldd	r23, Z+11	; 0x0b
    1434:	ce 01       	movw	r24, r28
    1436:	84 df       	rcall	.-248    	; 0x1340 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1438:	0c 88       	ldd	r0, Y+20	; 0x14
    143a:	dd 89       	ldd	r29, Y+21	; 0x15
    143c:	c0 2d       	mov	r28, r0
    143e:	20 97       	sbiw	r28, 0x00	; 0
    1440:	a1 f7       	brne	.-24     	; 0x142a <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1442:	f8 01       	movw	r30, r16
    1444:	06 85       	ldd	r16, Z+14	; 0x0e
    1446:	17 85       	ldd	r17, Z+15	; 0x0f
    1448:	01 15       	cp	r16, r1
    144a:	11 05       	cpc	r17, r1
    144c:	49 f7       	brne	.-46     	; 0x1420 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    1460:	c0 91 1a 03 	lds	r28, 0x031A
    1464:	d0 91 1b 03 	lds	r29, 0x031B
    1468:	20 97       	sbiw	r28, 0x00	; 0
    146a:	b9 f1       	breq	.+110    	; 0x14da <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    146c:	00 e0       	ldi	r16, 0x00	; 0
    146e:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1470:	e8 81       	ld	r30, Y
    1472:	f9 81       	ldd	r31, Y+1	; 0x01
    1474:	30 97       	sbiw	r30, 0x00	; 0
    1476:	81 f0       	breq	.+32     	; 0x1498 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1478:	20 2f       	mov	r18, r16
    147a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    147c:	a0 81       	ld	r26, Z
    147e:	b1 81       	ldd	r27, Z+1	; 0x01
    1480:	8d 91       	ld	r24, X+
    1482:	9c 91       	ld	r25, X
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	0c f4       	brge	.+2      	; 0x148c <rule_evaluation+0x34>
    148a:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    148c:	02 80       	ldd	r0, Z+2	; 0x02
    148e:	f3 81       	ldd	r31, Z+3	; 0x03
    1490:	e0 2d       	mov	r30, r0
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	99 f7       	brne	.-26     	; 0x147c <rule_evaluation+0x24>
    1496:	02 c0       	rjmp	.+4      	; 0x149c <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1498:	20 2f       	mov	r18, r16
    149a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    149c:	ea 81       	ldd	r30, Y+2	; 0x02
    149e:	fb 81       	ldd	r31, Y+3	; 0x03
    14a0:	30 97       	sbiw	r30, 0x00	; 0
    14a2:	b1 f0       	breq	.+44     	; 0x14d0 <rule_evaluation+0x78>
    14a4:	72 2f       	mov	r23, r18
    14a6:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    14a8:	a0 81       	ld	r26, Z
    14aa:	b1 81       	ldd	r27, Z+1	; 0x01
    14ac:	8d 91       	ld	r24, X+
    14ae:	9c 91       	ld	r25, X
    14b0:	11 97       	sbiw	r26, 0x01	; 1
    14b2:	57 2f       	mov	r21, r23
    14b4:	46 2f       	mov	r20, r22
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	14 f4       	brge	.+4      	; 0x14c0 <rule_evaluation+0x68>
    14bc:	58 2f       	mov	r21, r24
    14be:	49 2f       	mov	r20, r25
    14c0:	5c 93       	st	X, r21
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    14c6:	02 80       	ldd	r0, Z+2	; 0x02
    14c8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ca:	e0 2d       	mov	r30, r0
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	61 f7       	brne	.-40     	; 0x14a8 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    14d0:	0c 80       	ldd	r0, Y+4	; 0x04
    14d2:	dd 81       	ldd	r29, Y+5	; 0x05
    14d4:	c0 2d       	mov	r28, r0
    14d6:	20 97       	sbiw	r28, 0x00	; 0
    14d8:	59 f6       	brne	.-106    	; 0x1470 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	08 95       	ret

000014e4 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    14e4:	2f 92       	push	r2
    14e6:	3f 92       	push	r3
    14e8:	4f 92       	push	r4
    14ea:	5f 92       	push	r5
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <defuzzification+0x26>
    150a:	00 d0       	rcall	.+0      	; 0x150c <defuzzification+0x28>
    150c:	00 d0       	rcall	.+0      	; 0x150e <defuzzification+0x2a>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1512:	80 91 16 03 	lds	r24, 0x0316
    1516:	90 91 17 03 	lds	r25, 0x0317
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	89 2b       	or	r24, r25
    1520:	09 f4       	brne	.+2      	; 0x1524 <defuzzification+0x40>
    1522:	85 c0       	rjmp	.+266    	; 0x162e <defuzzification+0x14a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	04 84       	ldd	r0, Z+12	; 0x0c
    152a:	f5 85       	ldd	r31, Z+13	; 0x0d
    152c:	e0 2d       	mov	r30, r0
    152e:	fe 83       	std	Y+6, r31	; 0x06
    1530:	ed 83       	std	Y+5, r30	; 0x05
    1532:	ef 2b       	or	r30, r31
    1534:	09 f4       	brne	.+2      	; 0x1538 <defuzzification+0x54>
    1536:	67 c0       	rjmp	.+206    	; 0x1606 <defuzzification+0x122>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1538:	51 2c       	mov	r5, r1
    153a:	61 2c       	mov	r6, r1
    153c:	71 2c       	mov	r7, r1
    153e:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    1540:	31 2c       	mov	r3, r1
    1542:	21 2c       	mov	r2, r1
    1544:	19 82       	std	Y+1, r1	; 0x01
    1546:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	2f df       	rcall	.-418    	; 0x13ac <compute_area_of_trapezoid>
    154e:	bc 01       	movw	r22, r24
    1550:	88 27       	eor	r24, r24
    1552:	77 fd       	sbrc	r23, 7
    1554:	80 95       	com	r24
    1556:	98 2f       	mov	r25, r24
    1558:	d0 d7       	rcall	.+4000   	; 0x24fa <__floatsisf>
    155a:	6b 01       	movw	r12, r22
    155c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    155e:	ed 81       	ldd	r30, Y+5	; 0x05
    1560:	fe 81       	ldd	r31, Y+6	; 0x06
    1562:	04 85       	ldd	r16, Z+12	; 0x0c
    1564:	15 85       	ldd	r17, Z+13	; 0x0d
    1566:	b8 01       	movw	r22, r16
    1568:	88 27       	eor	r24, r24
    156a:	77 fd       	sbrc	r23, 7
    156c:	80 95       	com	r24
    156e:	98 2f       	mov	r25, r24
    1570:	c4 d7       	rcall	.+3976   	; 0x24fa <__floatsisf>
    1572:	4b 01       	movw	r8, r22
    1574:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1576:	ed 81       	ldd	r30, Y+5	; 0x05
    1578:	fe 81       	ldd	r31, Y+6	; 0x06
    157a:	86 85       	ldd	r24, Z+14	; 0x0e
    157c:	97 85       	ldd	r25, Z+15	; 0x0f
    157e:	80 1b       	sub	r24, r16
    1580:	91 0b       	sbc	r25, r17
    1582:	bc 01       	movw	r22, r24
    1584:	12 f4       	brpl	.+4      	; 0x158a <defuzzification+0xa6>
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	75 95       	asr	r23
    158c:	67 95       	ror	r22
            centroid = centroid + intermed;
    158e:	88 27       	eor	r24, r24
    1590:	77 fd       	sbrc	r23, 7
    1592:	80 95       	com	r24
    1594:	98 2f       	mov	r25, r24
    1596:	b1 d7       	rcall	.+3938   	; 0x24fa <__floatsisf>
    1598:	a5 01       	movw	r20, r10
    159a:	94 01       	movw	r18, r8
    159c:	af d6       	rcall	.+3422   	; 0x22fc <__addsf3>
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 09 13 	call	0x2612	; 0x2612 <__mulsf3>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	63 2d       	mov	r22, r3
    15b0:	72 2d       	mov	r23, r2
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	a2 d6       	rcall	.+3396   	; 0x22fc <__addsf3>
    15b8:	36 2e       	mov	r3, r22
    15ba:	27 2e       	mov	r2, r23
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    15c0:	a7 01       	movw	r20, r14
    15c2:	96 01       	movw	r18, r12
    15c4:	65 2d       	mov	r22, r5
    15c6:	76 2d       	mov	r23, r6
    15c8:	87 2d       	mov	r24, r7
    15ca:	94 2d       	mov	r25, r4
    15cc:	97 d6       	rcall	.+3374   	; 0x22fc <__addsf3>
    15ce:	56 2e       	mov	r5, r22
    15d0:	67 2e       	mov	r6, r23
    15d2:	78 2e       	mov	r7, r24
    15d4:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    15d6:	ed 81       	ldd	r30, Y+5	; 0x05
    15d8:	fe 81       	ldd	r31, Y+6	; 0x06
    15da:	04 88       	ldd	r0, Z+20	; 0x14
    15dc:	f5 89       	ldd	r31, Z+21	; 0x15
    15de:	e0 2d       	mov	r30, r0
    15e0:	fe 83       	std	Y+6, r31	; 0x06
    15e2:	ed 83       	std	Y+5, r30	; 0x05
    15e4:	ef 2b       	or	r30, r31
    15e6:	09 f0       	breq	.+2      	; 0x15ea <defuzzification+0x106>
    15e8:	af cf       	rjmp	.-162    	; 0x1548 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    15ea:	26 2f       	mov	r18, r22
    15ec:	37 2f       	mov	r19, r23
    15ee:	48 2f       	mov	r20, r24
    15f0:	59 2f       	mov	r21, r25
    15f2:	63 2d       	mov	r22, r3
    15f4:	72 2d       	mov	r23, r2
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	e4 d6       	rcall	.+3528   	; 0x23c4 <__divsf3>
    15fc:	26 2f       	mov	r18, r22
    15fe:	37 2f       	mov	r19, r23
    1600:	48 2f       	mov	r20, r24
    1602:	59 2f       	mov	r21, r25
    1604:	04 c0       	rjmp	.+8      	; 0x160e <defuzzification+0x12a>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    160e:	62 2f       	mov	r22, r18
    1610:	73 2f       	mov	r23, r19
    1612:	84 2f       	mov	r24, r20
    1614:	95 2f       	mov	r25, r21
    1616:	3e d7       	rcall	.+3708   	; 0x2494 <__fixsfsi>
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	73 87       	std	Z+11, r23	; 0x0b
    161e:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1620:	86 85       	ldd	r24, Z+14	; 0x0e
    1622:	97 85       	ldd	r25, Z+15	; 0x0f
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	89 2b       	or	r24, r25
    162a:	09 f0       	breq	.+2      	; 0x162e <defuzzification+0x14a>
    162c:	7b cf       	rjmp	.-266    	; 0x1524 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    162e:	26 96       	adiw	r28, 0x06	; 6
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	3f 90       	pop	r3
    165c:	2f 90       	pop	r2
    165e:	08 95       	ret

00001660 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	ec 01       	movw	r28, r24
    1676:	6a 01       	movw	r12, r20
    1678:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    167a:	0e 94 b2 13 	call	0x2764	; 0x2764 <strcpy>
    newMf->value = 0;
    167e:	1b 86       	std	Y+11, r1	; 0x0b
    1680:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    1682:	dd 86       	std	Y+13, r13	; 0x0d
    1684:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    1686:	ff 86       	std	Y+15, r15	; 0x0f
    1688:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    168a:	b5 01       	movw	r22, r10
    168c:	6c 19       	sub	r22, r12
    168e:	7d 09       	sbc	r23, r13
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	31 e0       	ldi	r19, 0x01	; 1
    1694:	c9 01       	movw	r24, r18
    1696:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
    169a:	79 8b       	std	Y+17, r23	; 0x11
    169c:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    169e:	b7 01       	movw	r22, r14
    16a0:	60 1b       	sub	r22, r16
    16a2:	71 0b       	sbc	r23, r17
    16a4:	c9 01       	movw	r24, r18
    16a6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
    16aa:	7b 8b       	std	Y+19, r23	; 0x13
    16ac:	6a 8b       	std	Y+18, r22	; 0x12
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	08 95       	ret

000016c4 <rightTurn>:
void leftTurn(int gyro);



void rightTurn(int gyro)
{
    16c4:	2f 92       	push	r2
    16c6:	3f 92       	push	r3
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ce 5c       	subi	r28, 0xCE	; 206
    16ee:	d1 09       	sbc	r29, r1
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type turn; strcpy(turn.name, "turn");
    16fa:	85 e0       	ldi	r24, 0x05	; 5
    16fc:	ed ed       	ldi	r30, 0xDD	; 221
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	9e 01       	movw	r18, r28
    1702:	2f 5f       	subi	r18, 0xFF	; 255
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	19 01       	movw	r2, r18
    1708:	d9 01       	movw	r26, r18
    170a:	01 90       	ld	r0, Z+
    170c:	0d 92       	st	X+, r0
    170e:	8a 95       	dec	r24
    1710:	e1 f7       	brne	.-8      	; 0x170a <rightTurn+0x46>
	
	// Set MFs
	struct mf_type start;
	MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    1712:	5e 01       	movw	r10, r28
    1714:	31 e1       	ldi	r19, 0x11	; 17
    1716:	a3 0e       	add	r10, r19
    1718:	b1 1c       	adc	r11, r1
    171a:	0f 2e       	mov	r0, r31
    171c:	fd e2       	ldi	r31, 0x2D	; 45
    171e:	ef 2e       	mov	r14, r31
    1720:	f1 2c       	mov	r15, r1
    1722:	f0 2d       	mov	r31, r0
    1724:	00 e0       	ldi	r16, 0x00	; 0
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4f ef       	ldi	r20, 0xFF	; 255
    172e:	5f ef       	ldi	r21, 0xFF	; 255
    1730:	62 ee       	ldi	r22, 0xE2	; 226
    1732:	71 e0       	ldi	r23, 0x01	; 1
    1734:	c5 01       	movw	r24, r10
    1736:	94 df       	rcall	.-216    	; 0x1660 <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1738:	6e 01       	movw	r12, r28
    173a:	87 e2       	ldi	r24, 0x27	; 39
    173c:	c8 0e       	add	r12, r24
    173e:	d1 1c       	adc	r13, r1
    1740:	0f 2e       	mov	r0, r31
    1742:	fc e3       	ldi	r31, 0x3C	; 60
    1744:	ef 2e       	mov	r14, r31
    1746:	f1 2c       	mov	r15, r1
    1748:	f0 2d       	mov	r31, r0
    174a:	0d e2       	ldi	r16, 0x2D	; 45
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	2d e2       	ldi	r18, 0x2D	; 45
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4e e1       	ldi	r20, 0x1E	; 30
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	68 ee       	ldi	r22, 0xE8	; 232
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	c6 01       	movw	r24, r12
    175c:	81 df       	rcall	.-254    	; 0x1660 <MATLAB_MF>
	struct mf_type end;
	MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    175e:	2e 01       	movw	r4, r28
    1760:	ed e3       	ldi	r30, 0x3D	; 61
    1762:	4e 0e       	add	r4, r30
    1764:	51 1c       	adc	r5, r1
    1766:	0f 2e       	mov	r0, r31
    1768:	fe e7       	ldi	r31, 0x7E	; 126
    176a:	ef 2e       	mov	r14, r31
    176c:	f1 2c       	mov	r15, r1
    176e:	f0 2d       	mov	r31, r0
    1770:	0d e7       	ldi	r16, 0x7D	; 125
    1772:	10 e0       	ldi	r17, 0x00	; 0
    1774:	2d e2       	ldi	r18, 0x2D	; 45
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4d e2       	ldi	r20, 0x2D	; 45
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	6f ee       	ldi	r22, 0xEF	; 239
    177e:	71 e0       	ldi	r23, 0x01	; 1
    1780:	c2 01       	movw	r24, r4
    1782:	6e df       	rcall	.-292    	; 0x1660 <MATLAB_MF>

	// Linked list for MFs
	turn.membership_functions = &start;
    1784:	be 86       	std	Y+14, r11	; 0x0e
    1786:	ad 86       	std	Y+13, r10	; 0x0d
	start.next = &middle;
    1788:	de a2       	std	Y+38, r13	; 0x26
    178a:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &end;
    178c:	5c ae       	std	Y+60, r5	; 0x3c
    178e:	4b ae       	std	Y+59, r4	; 0x3b
	end.next = NULL;
    1790:	63 96       	adiw	r28, 0x13	; 19
    1792:	1f ae       	std	Y+63, r1	; 0x3f
    1794:	1e ae       	std	Y+62, r1	; 0x3e
    1796:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    1798:	6e 01       	movw	r12, r28
    179a:	f3 e5       	ldi	r31, 0x53	; 83
    179c:	cf 0e       	add	r12, r31
    179e:	d1 1c       	adc	r13, r1
    17a0:	86 e0       	ldi	r24, 0x06	; 6
    17a2:	e3 ef       	ldi	r30, 0xF3	; 243
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	d6 01       	movw	r26, r12
    17a8:	01 90       	ld	r0, Z+
    17aa:	0d 92       	st	X+, r0
    17ac:	8a 95       	dec	r24
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <rightTurn+0xe4>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2739, 2740, 2740, 2815);
    17b0:	5e 01       	movw	r10, r28
    17b2:	23 e6       	ldi	r18, 0x63	; 99
    17b4:	a2 0e       	add	r10, r18
    17b6:	b1 1c       	adc	r11, r1
    17b8:	0f 2e       	mov	r0, r31
    17ba:	ee 24       	eor	r14, r14
    17bc:	ea 94       	dec	r14
    17be:	fa e0       	ldi	r31, 0x0A	; 10
    17c0:	ff 2e       	mov	r15, r31
    17c2:	f0 2d       	mov	r31, r0
    17c4:	04 eb       	ldi	r16, 0xB4	; 180
    17c6:	1a e0       	ldi	r17, 0x0A	; 10
    17c8:	24 eb       	ldi	r18, 0xB4	; 180
    17ca:	3a e0       	ldi	r19, 0x0A	; 10
    17cc:	43 eb       	ldi	r20, 0xB3	; 179
    17ce:	5a e0       	ldi	r21, 0x0A	; 10
    17d0:	69 e2       	ldi	r22, 0x29	; 41
    17d2:	71 e0       	ldi	r23, 0x01	; 1
    17d4:	c5 01       	movw	r24, r10
    17d6:	44 df       	rcall	.-376    	; 0x1660 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2804, 2820, 2820, 2836);
    17d8:	4e 01       	movw	r8, r28
    17da:	39 e7       	ldi	r19, 0x79	; 121
    17dc:	83 0e       	add	r8, r19
    17de:	91 1c       	adc	r9, r1
    17e0:	0f 2e       	mov	r0, r31
    17e2:	f4 e1       	ldi	r31, 0x14	; 20
    17e4:	ef 2e       	mov	r14, r31
    17e6:	fb e0       	ldi	r31, 0x0B	; 11
    17e8:	ff 2e       	mov	r15, r31
    17ea:	f0 2d       	mov	r31, r0
    17ec:	04 e0       	ldi	r16, 0x04	; 4
    17ee:	1b e0       	ldi	r17, 0x0B	; 11
    17f0:	24 e0       	ldi	r18, 0x04	; 4
    17f2:	3b e0       	ldi	r19, 0x0B	; 11
    17f4:	44 ef       	ldi	r20, 0xF4	; 244
    17f6:	5a e0       	ldi	r21, 0x0A	; 10
    17f8:	62 e3       	ldi	r22, 0x32	; 50
    17fa:	71 e0       	ldi	r23, 0x01	; 1
    17fc:	c4 01       	movw	r24, r8
    17fe:	30 df       	rcall	.-416    	; 0x1660 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", MAXRIGHT-1, MAXRIGHT, MAXRIGHT, MAXRIGHT+1);
    1800:	3e 01       	movw	r6, r28
    1802:	8f e8       	ldi	r24, 0x8F	; 143
    1804:	68 0e       	add	r6, r24
    1806:	71 1c       	adc	r7, r1
    1808:	0f 2e       	mov	r0, r31
    180a:	f5 ee       	ldi	r31, 0xE5	; 229
    180c:	ef 2e       	mov	r14, r31
    180e:	fc e0       	ldi	r31, 0x0C	; 12
    1810:	ff 2e       	mov	r15, r31
    1812:	f0 2d       	mov	r31, r0
    1814:	04 ee       	ldi	r16, 0xE4	; 228
    1816:	1c e0       	ldi	r17, 0x0C	; 12
    1818:	24 ee       	ldi	r18, 0xE4	; 228
    181a:	3c e0       	ldi	r19, 0x0C	; 12
    181c:	43 ee       	ldi	r20, 0xE3	; 227
    181e:	5c e0       	ldi	r21, 0x0C	; 12
    1820:	62 ed       	ldi	r22, 0xD2	; 210
    1822:	71 e0       	ldi	r23, 0x01	; 1
    1824:	c3 01       	movw	r24, r6
    1826:	1c df       	rcall	.-456    	; 0x1660 <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    1828:	f6 01       	movw	r30, r12
    182a:	b5 86       	std	Z+13, r11	; 0x0d
    182c:	a4 86       	std	Z+12, r10	; 0x0c
	straight.next = &right;
    182e:	f5 01       	movw	r30, r10
    1830:	95 8a       	std	Z+21, r9	; 0x15
    1832:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &sharpRight;
    1834:	f4 01       	movw	r30, r8
    1836:	75 8a       	std	Z+21, r7	; 0x15
    1838:	64 8a       	std	Z+20, r6	; 0x14
	sharpRight.next = NULL;
    183a:	f3 01       	movw	r30, r6
    183c:	15 8a       	std	Z+21, r1	; 0x15
    183e:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &turn;
    1840:	30 92 19 03 	sts	0x0319, r3
    1844:	20 92 18 03 	sts	0x0318, r2
	turn.next = NULL;
    1848:	18 8a       	std	Y+16, r1	; 0x10
    184a:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    184c:	d0 92 17 03 	sts	0x0317, r13
    1850:	c0 92 16 03 	sts	0x0316, r12
	servo.next = NULL;
    1854:	f6 01       	movw	r30, r12
    1856:	17 86       	std	Z+15, r1	; 0x0f
    1858:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    185a:	ce 01       	movw	r24, r28
    185c:	8b 55       	subi	r24, 0x5B	; 91
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	90 93 1b 03 	sts	0x031B, r25
    1864:	80 93 1a 03 	sts	0x031A, r24
	struct rule_type rule2; rule1.next = &rule2;
    1868:	de 01       	movw	r26, r28
    186a:	a5 55       	subi	r26, 0x55	; 85
    186c:	bf 4f       	sbci	r27, 0xFF	; 255
    186e:	fc 01       	movw	r30, r24
    1870:	b5 83       	std	Z+5, r27	; 0x05
    1872:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1874:	be 01       	movw	r22, r28
    1876:	6f 54       	subi	r22, 0x4F	; 79
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	15 96       	adiw	r26, 0x05	; 5
    187c:	7c 93       	st	X, r23
    187e:	6e 93       	st	-X, r22
    1880:	14 97       	sbiw	r26, 0x04	; 4
    1882:	fb 01       	movw	r30, r22
    1884:	15 82       	std	Z+5, r1	; 0x05
    1886:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1888:	ae 01       	movw	r20, r28
    188a:	49 54       	subi	r20, 0x49	; 73
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	fc 01       	movw	r30, r24
    1890:	51 83       	std	Z+1, r21	; 0x01
    1892:	40 83       	st	Z, r20
    1894:	fa 01       	movw	r30, r20
    1896:	13 82       	std	Z+3, r1	; 0x03
    1898:	12 82       	std	Z+2, r1	; 0x02
    189a:	9e 01       	movw	r18, r28
    189c:	25 54       	subi	r18, 0x45	; 69
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	fc 01       	movw	r30, r24
    18a2:	33 83       	std	Z+3, r19	; 0x03
    18a4:	22 83       	std	Z+2, r18	; 0x02
    18a6:	f9 01       	movw	r30, r18
    18a8:	13 82       	std	Z+3, r1	; 0x03
    18aa:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &start.value; then1.value = &sharpRight.value;
    18ac:	8a 58       	subi	r24, 0x8A	; 138
    18ae:	91 09       	sbc	r25, r1
    18b0:	fa 01       	movw	r30, r20
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
    18b6:	fa e0       	ldi	r31, 0x0A	; 10
    18b8:	6f 0e       	add	r6, r31
    18ba:	71 1c       	adc	r7, r1
    18bc:	f9 01       	movw	r30, r18
    18be:	71 82       	std	Z+1, r7	; 0x01
    18c0:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    18c2:	2c 5f       	subi	r18, 0xFC	; 252
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	11 96       	adiw	r26, 0x01	; 1
    18c8:	3c 93       	st	X, r19
    18ca:	2e 93       	st	-X, r18
    18cc:	f9 01       	movw	r30, r18
    18ce:	13 82       	std	Z+3, r1	; 0x03
    18d0:	12 82       	std	Z+2, r1	; 0x02
    18d2:	88 55       	subi	r24, 0x58	; 88
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	13 96       	adiw	r26, 0x03	; 3
    18d8:	9c 93       	st	X, r25
    18da:	8e 93       	st	-X, r24
    18dc:	12 97       	sbiw	r26, 0x02	; 2
    18de:	fc 01       	movw	r30, r24
    18e0:	13 82       	std	Z+3, r1	; 0x03
    18e2:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &middle.value; then2.value = &right.value;
    18e4:	46 58       	subi	r20, 0x86	; 134
    18e6:	51 09       	sbc	r21, r1
    18e8:	f9 01       	movw	r30, r18
    18ea:	51 83       	std	Z+1, r21	; 0x01
    18ec:	40 83       	st	Z, r20
    18ee:	fa e0       	ldi	r31, 0x0A	; 10
    18f0:	8f 0e       	add	r8, r31
    18f2:	91 1c       	adc	r9, r1
    18f4:	fc 01       	movw	r30, r24
    18f6:	91 82       	std	Z+1, r9	; 0x01
    18f8:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    18fa:	04 96       	adiw	r24, 0x04	; 4
    18fc:	fb 01       	movw	r30, r22
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	fc 01       	movw	r30, r24
    1904:	13 82       	std	Z+3, r1	; 0x03
    1906:	12 82       	std	Z+2, r1	; 0x02
    1908:	90 96       	adiw	r26, 0x20	; 32
    190a:	fb 01       	movw	r30, r22
    190c:	b3 83       	std	Z+3, r27	; 0x03
    190e:	a2 83       	std	Z+2, r26	; 0x02
    1910:	13 96       	adiw	r26, 0x03	; 3
    1912:	1c 92       	st	X, r1
    1914:	1e 92       	st	-X, r1
    1916:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &end.value; then3.value = &straight.value;
    1918:	fa e0       	ldi	r31, 0x0A	; 10
    191a:	4f 0e       	add	r4, r31
    191c:	51 1c       	adc	r5, r1
    191e:	fc 01       	movw	r30, r24
    1920:	51 82       	std	Z+1, r5	; 0x01
    1922:	40 82       	st	Z, r4
    1924:	fa e0       	ldi	r31, 0x0A	; 10
    1926:	af 0e       	add	r10, r31
    1928:	b1 1c       	adc	r11, r1
    192a:	ad 92       	st	X+, r10
    192c:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    192e:	6d dd       	rcall	.-1318   	; 0x140a <fuzzification>
	rule_evaluation();
    1930:	93 dd       	rcall	.-1242   	; 0x1458 <rule_evaluation>
	defuzzification();
    1932:	d8 dd       	rcall	.-1104   	; 0x14e4 <defuzzification>
	if (servo.value > MAXLEFT)
    1934:	f6 01       	movw	r30, r12
    1936:	82 85       	ldd	r24, Z+10	; 0x0a
    1938:	93 85       	ldd	r25, Z+11	; 0x0b
    193a:	87 3e       	cpi	r24, 0xE7	; 231
    193c:	f7 e0       	ldi	r31, 0x07	; 7
    193e:	9f 07       	cpc	r25, r31
    1940:	24 f0       	brlt	.+8      	; 0x194a <rightTurn+0x286>
	{
		setServo(MAXLEFT);
    1942:	86 ee       	ldi	r24, 0xE6	; 230
    1944:	97 e0       	ldi	r25, 0x07	; 7
    1946:	b3 d2       	rcall	.+1382   	; 0x1eae <setServo>
    1948:	09 c0       	rjmp	.+18     	; 0x195c <rightTurn+0x298>
	}
	else if (servo.value < MAXRIGHT)
    194a:	84 3e       	cpi	r24, 0xE4	; 228
    194c:	2c e0       	ldi	r18, 0x0C	; 12
    194e:	92 07       	cpc	r25, r18
    1950:	24 f4       	brge	.+8      	; 0x195a <rightTurn+0x296>
	{
		setServo(MAXRIGHT);
    1952:	84 ee       	ldi	r24, 0xE4	; 228
    1954:	9c e0       	ldi	r25, 0x0C	; 12
    1956:	ab d2       	rcall	.+1366   	; 0x1eae <setServo>
    1958:	01 c0       	rjmp	.+2      	; 0x195c <rightTurn+0x298>
	}
	else
	{
		setServo(servo.value);
    195a:	a9 d2       	rcall	.+1362   	; 0x1eae <setServo>
	}
}
    195c:	c2 53       	subi	r28, 0x32	; 50
    195e:	df 4f       	sbci	r29, 0xFF	; 255
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	9f 90       	pop	r9
    1980:	8f 90       	pop	r8
    1982:	7f 90       	pop	r7
    1984:	6f 90       	pop	r6
    1986:	5f 90       	pop	r5
    1988:	4f 90       	pop	r4
    198a:	3f 90       	pop	r3
    198c:	2f 90       	pop	r2
    198e:	08 95       	ret

00001990 <leftTurn>:

/*
 * This function deals with left turns
 */
void leftTurn(int gyro)
{
    1990:	2f 92       	push	r2
    1992:	3f 92       	push	r3
    1994:	4f 92       	push	r4
    1996:	5f 92       	push	r5
    1998:	6f 92       	push	r6
    199a:	7f 92       	push	r7
    199c:	8f 92       	push	r8
    199e:	9f 92       	push	r9
    19a0:	af 92       	push	r10
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	ce 5c       	subi	r28, 0xCE	; 206
    19ba:	d1 09       	sbc	r29, r1
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    
    // DECLARATION OF GYRO INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type turn; strcpy(turn.name, "turn");
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	ed ed       	ldi	r30, 0xDD	; 221
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	9e 01       	movw	r18, r28
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	19 01       	movw	r2, r18
    19d4:	d9 01       	movw	r26, r18
    19d6:	01 90       	ld	r0, Z+
    19d8:	0d 92       	st	X+, r0
    19da:	8a 95       	dec	r24
    19dc:	e1 f7       	brne	.-8      	; 0x19d6 <leftTurn+0x46>
    
    // Set MFs
    struct mf_type start;
    MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    19de:	5e 01       	movw	r10, r28
    19e0:	31 e1       	ldi	r19, 0x11	; 17
    19e2:	a3 0e       	add	r10, r19
    19e4:	b1 1c       	adc	r11, r1
    19e6:	0f 2e       	mov	r0, r31
    19e8:	fd e2       	ldi	r31, 0x2D	; 45
    19ea:	ef 2e       	mov	r14, r31
    19ec:	f1 2c       	mov	r15, r1
    19ee:	f0 2d       	mov	r31, r0
    19f0:	00 e0       	ldi	r16, 0x00	; 0
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4f ef       	ldi	r20, 0xFF	; 255
    19fa:	5f ef       	ldi	r21, 0xFF	; 255
    19fc:	62 ee       	ldi	r22, 0xE2	; 226
    19fe:	71 e0       	ldi	r23, 0x01	; 1
    1a00:	c5 01       	movw	r24, r10
    1a02:	2e de       	rcall	.-932    	; 0x1660 <MATLAB_MF>
    struct mf_type middle;
    MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1a04:	6e 01       	movw	r12, r28
    1a06:	87 e2       	ldi	r24, 0x27	; 39
    1a08:	c8 0e       	add	r12, r24
    1a0a:	d1 1c       	adc	r13, r1
    1a0c:	0f 2e       	mov	r0, r31
    1a0e:	fc e3       	ldi	r31, 0x3C	; 60
    1a10:	ef 2e       	mov	r14, r31
    1a12:	f1 2c       	mov	r15, r1
    1a14:	f0 2d       	mov	r31, r0
    1a16:	0d e2       	ldi	r16, 0x2D	; 45
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	2d e2       	ldi	r18, 0x2D	; 45
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4e e1       	ldi	r20, 0x1E	; 30
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	68 ee       	ldi	r22, 0xE8	; 232
    1a24:	71 e0       	ldi	r23, 0x01	; 1
    1a26:	c6 01       	movw	r24, r12
    1a28:	1b de       	rcall	.-970    	; 0x1660 <MATLAB_MF>
    struct mf_type end;
    MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    1a2a:	2e 01       	movw	r4, r28
    1a2c:	ed e3       	ldi	r30, 0x3D	; 61
    1a2e:	4e 0e       	add	r4, r30
    1a30:	51 1c       	adc	r5, r1
    1a32:	0f 2e       	mov	r0, r31
    1a34:	fe e7       	ldi	r31, 0x7E	; 126
    1a36:	ef 2e       	mov	r14, r31
    1a38:	f1 2c       	mov	r15, r1
    1a3a:	f0 2d       	mov	r31, r0
    1a3c:	0d e7       	ldi	r16, 0x7D	; 125
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	2d e2       	ldi	r18, 0x2D	; 45
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4d e2       	ldi	r20, 0x2D	; 45
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	6f ee       	ldi	r22, 0xEF	; 239
    1a4a:	71 e0       	ldi	r23, 0x01	; 1
    1a4c:	c2 01       	movw	r24, r4
    1a4e:	08 de       	rcall	.-1008   	; 0x1660 <MATLAB_MF>

    // Linked list for MFs
    turn.membership_functions = &start;
    1a50:	be 86       	std	Y+14, r11	; 0x0e
    1a52:	ad 86       	std	Y+13, r10	; 0x0d
    start.next = &middle;
    1a54:	de a2       	std	Y+38, r13	; 0x26
    1a56:	cd a2       	std	Y+37, r12	; 0x25
    middle.next = &end;
    1a58:	5c ae       	std	Y+60, r5	; 0x3c
    1a5a:	4b ae       	std	Y+59, r4	; 0x3b
    end.next = NULL;
    1a5c:	63 96       	adiw	r28, 0x13	; 19
    1a5e:	1f ae       	std	Y+63, r1	; 0x3f
    1a60:	1e ae       	std	Y+62, r1	; 0x3e
    1a62:	63 97       	sbiw	r28, 0x13	; 19
    
    
    // DECLARATION OF SERVO OUTPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type servo; strcpy(servo.name, "servo");
    1a64:	6e 01       	movw	r12, r28
    1a66:	f3 e5       	ldi	r31, 0x53	; 83
    1a68:	cf 0e       	add	r12, r31
    1a6a:	d1 1c       	adc	r13, r1
    1a6c:	86 e0       	ldi	r24, 0x06	; 6
    1a6e:	e3 ef       	ldi	r30, 0xF3	; 243
    1a70:	f1 e0       	ldi	r31, 0x01	; 1
    1a72:	d6 01       	movw	r26, r12
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	8a 95       	dec	r24
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <leftTurn+0xe4>
    
    // Set MFs
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2460, 2560, 2560, 2660);
    1a7c:	5e 01       	movw	r10, r28
    1a7e:	23 e6       	ldi	r18, 0x63	; 99
    1a80:	a2 0e       	add	r10, r18
    1a82:	b1 1c       	adc	r11, r1
    1a84:	0f 2e       	mov	r0, r31
    1a86:	f4 e6       	ldi	r31, 0x64	; 100
    1a88:	ef 2e       	mov	r14, r31
    1a8a:	fa e0       	ldi	r31, 0x0A	; 10
    1a8c:	ff 2e       	mov	r15, r31
    1a8e:	f0 2d       	mov	r31, r0
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	1a e0       	ldi	r17, 0x0A	; 10
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3a e0       	ldi	r19, 0x0A	; 10
    1a98:	4c e9       	ldi	r20, 0x9C	; 156
    1a9a:	59 e0       	ldi	r21, 0x09	; 9
    1a9c:	69 e2       	ldi	r22, 0x29	; 41
    1a9e:	71 e0       	ldi	r23, 0x01	; 1
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	de dd       	rcall	.-1092   	; 0x1660 <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2240, 2240, 2400, 2560);
    1aa4:	4e 01       	movw	r8, r28
    1aa6:	39 e7       	ldi	r19, 0x79	; 121
    1aa8:	83 0e       	add	r8, r19
    1aaa:	91 1c       	adc	r9, r1
    1aac:	0f 2e       	mov	r0, r31
    1aae:	e1 2c       	mov	r14, r1
    1ab0:	fa e0       	ldi	r31, 0x0A	; 10
    1ab2:	ff 2e       	mov	r15, r31
    1ab4:	f0 2d       	mov	r31, r0
    1ab6:	00 e6       	ldi	r16, 0x60	; 96
    1ab8:	19 e0       	ldi	r17, 0x09	; 9
    1aba:	20 ec       	ldi	r18, 0xC0	; 192
    1abc:	38 e0       	ldi	r19, 0x08	; 8
    1abe:	40 ec       	ldi	r20, 0xC0	; 192
    1ac0:	58 e0       	ldi	r21, 0x08	; 8
    1ac2:	64 e2       	ldi	r22, 0x24	; 36
    1ac4:	71 e0       	ldi	r23, 0x01	; 1
    1ac6:	c4 01       	movw	r24, r8
    1ac8:	cb dd       	rcall	.-1130   	; 0x1660 <MATLAB_MF>
    struct mf_type sharpLeft;
    MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT-1, MAXLEFT, MAXLEFT, MAXLEFT+1);
    1aca:	3e 01       	movw	r6, r28
    1acc:	8f e8       	ldi	r24, 0x8F	; 143
    1ace:	68 0e       	add	r6, r24
    1ad0:	71 1c       	adc	r7, r1
    1ad2:	0f 2e       	mov	r0, r31
    1ad4:	f7 ee       	ldi	r31, 0xE7	; 231
    1ad6:	ef 2e       	mov	r14, r31
    1ad8:	f7 e0       	ldi	r31, 0x07	; 7
    1ada:	ff 2e       	mov	r15, r31
    1adc:	f0 2d       	mov	r31, r0
    1ade:	06 ee       	ldi	r16, 0xE6	; 230
    1ae0:	17 e0       	ldi	r17, 0x07	; 7
    1ae2:	26 ee       	ldi	r18, 0xE6	; 230
    1ae4:	37 e0       	ldi	r19, 0x07	; 7
    1ae6:	45 ee       	ldi	r20, 0xE5	; 229
    1ae8:	57 e0       	ldi	r21, 0x07	; 7
    1aea:	68 ec       	ldi	r22, 0xC8	; 200
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	c3 01       	movw	r24, r6
    1af0:	b7 dd       	rcall	.-1170   	; 0x1660 <MATLAB_MF>

    // Linked list for MFs
    servo.membership_functions = &straight;
    1af2:	f6 01       	movw	r30, r12
    1af4:	b5 86       	std	Z+13, r11	; 0x0d
    1af6:	a4 86       	std	Z+12, r10	; 0x0c
    straight.next = &left;
    1af8:	f5 01       	movw	r30, r10
    1afa:	95 8a       	std	Z+21, r9	; 0x15
    1afc:	84 8a       	std	Z+20, r8	; 0x14
    left.next = &sharpLeft;
    1afe:	f4 01       	movw	r30, r8
    1b00:	75 8a       	std	Z+21, r7	; 0x15
    1b02:	64 8a       	std	Z+20, r6	; 0x14
    sharpLeft.next = NULL;
    1b04:	f3 01       	movw	r30, r6
    1b06:	15 8a       	std	Z+21, r1	; 0x15
    1b08:	14 8a       	std	Z+20, r1	; 0x14
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &turn;
    1b0a:	30 92 19 03 	sts	0x0319, r3
    1b0e:	20 92 18 03 	sts	0x0318, r2
    turn.next = NULL;
    1b12:	18 8a       	std	Y+16, r1	; 0x10
    1b14:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
    1b16:	d0 92 17 03 	sts	0x0317, r13
    1b1a:	c0 92 16 03 	sts	0x0316, r12
    servo.next = NULL;
    1b1e:	f6 01       	movw	r30, r12
    1b20:	17 86       	std	Z+15, r1	; 0x0f
    1b22:	16 86       	std	Z+14, r1	; 0x0e
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
    1b24:	ce 01       	movw	r24, r28
    1b26:	8b 55       	subi	r24, 0x5B	; 91
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	90 93 1b 03 	sts	0x031B, r25
    1b2e:	80 93 1a 03 	sts	0x031A, r24
    struct rule_type rule2; rule1.next = &rule2;
    1b32:	de 01       	movw	r26, r28
    1b34:	a5 55       	subi	r26, 0x55	; 85
    1b36:	bf 4f       	sbci	r27, 0xFF	; 255
    1b38:	fc 01       	movw	r30, r24
    1b3a:	b5 83       	std	Z+5, r27	; 0x05
    1b3c:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1b3e:	be 01       	movw	r22, r28
    1b40:	6f 54       	subi	r22, 0x4F	; 79
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	15 96       	adiw	r26, 0x05	; 5
    1b46:	7c 93       	st	X, r23
    1b48:	6e 93       	st	-X, r22
    1b4a:	14 97       	sbiw	r26, 0x04	; 4
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	15 82       	std	Z+5, r1	; 0x05
    1b50:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if gyro is start then servo is noSpeed
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1b52:	ae 01       	movw	r20, r28
    1b54:	49 54       	subi	r20, 0x49	; 73
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	fc 01       	movw	r30, r24
    1b5a:	51 83       	std	Z+1, r21	; 0x01
    1b5c:	40 83       	st	Z, r20
    1b5e:	fa 01       	movw	r30, r20
    1b60:	13 82       	std	Z+3, r1	; 0x03
    1b62:	12 82       	std	Z+2, r1	; 0x02
    1b64:	9e 01       	movw	r18, r28
    1b66:	25 54       	subi	r18, 0x45	; 69
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	33 83       	std	Z+3, r19	; 0x03
    1b6e:	22 83       	std	Z+2, r18	; 0x02
    1b70:	f9 01       	movw	r30, r18
    1b72:	13 82       	std	Z+3, r1	; 0x03
    1b74:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &start.value; then1.value = &sharpLeft.value;
    1b76:	8a 58       	subi	r24, 0x8A	; 138
    1b78:	91 09       	sbc	r25, r1
    1b7a:	fa 01       	movw	r30, r20
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	fa e0       	ldi	r31, 0x0A	; 10
    1b82:	6f 0e       	add	r6, r31
    1b84:	71 1c       	adc	r7, r1
    1b86:	f9 01       	movw	r30, r18
    1b88:	71 82       	std	Z+1, r7	; 0x01
    1b8a:	60 82       	st	Z, r6
    
    // if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1b8c:	2c 5f       	subi	r18, 0xFC	; 252
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	3c 93       	st	X, r19
    1b94:	2e 93       	st	-X, r18
    1b96:	f9 01       	movw	r30, r18
    1b98:	13 82       	std	Z+3, r1	; 0x03
    1b9a:	12 82       	std	Z+2, r1	; 0x02
    1b9c:	88 55       	subi	r24, 0x58	; 88
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	13 96       	adiw	r26, 0x03	; 3
    1ba2:	9c 93       	st	X, r25
    1ba4:	8e 93       	st	-X, r24
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	fc 01       	movw	r30, r24
    1baa:	13 82       	std	Z+3, r1	; 0x03
    1bac:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &middle.value; then2.value = &left.value;
    1bae:	46 58       	subi	r20, 0x86	; 134
    1bb0:	51 09       	sbc	r21, r1
    1bb2:	f9 01       	movw	r30, r18
    1bb4:	51 83       	std	Z+1, r21	; 0x01
    1bb6:	40 83       	st	Z, r20
    1bb8:	fa e0       	ldi	r31, 0x0A	; 10
    1bba:	8f 0e       	add	r8, r31
    1bbc:	91 1c       	adc	r9, r1
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	91 82       	std	Z+1, r9	; 0x01
    1bc2:	80 82       	st	Z, r8
    
    // if speed is medium and distance is oneM then speed is cruise
    struct rule_element_type if31, then3;
    rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1bc4:	04 96       	adiw	r24, 0x04	; 4
    1bc6:	fb 01       	movw	r30, r22
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	fc 01       	movw	r30, r24
    1bce:	13 82       	std	Z+3, r1	; 0x03
    1bd0:	12 82       	std	Z+2, r1	; 0x02
    1bd2:	90 96       	adiw	r26, 0x20	; 32
    1bd4:	fb 01       	movw	r30, r22
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
    1bd8:	a2 83       	std	Z+2, r26	; 0x02
    1bda:	13 96       	adiw	r26, 0x03	; 3
    1bdc:	1c 92       	st	X, r1
    1bde:	1e 92       	st	-X, r1
    1be0:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &end.value; then3.value = &straight.value;
    1be2:	fa e0       	ldi	r31, 0x0A	; 10
    1be4:	4f 0e       	add	r4, r31
    1be6:	51 1c       	adc	r5, r1
    1be8:	fc 01       	movw	r30, r24
    1bea:	51 82       	std	Z+1, r5	; 0x01
    1bec:	40 82       	st	Z, r4
    1bee:	fa e0       	ldi	r31, 0x0A	; 10
    1bf0:	af 0e       	add	r10, r31
    1bf2:	b1 1c       	adc	r11, r1
    1bf4:	ad 92       	st	X+, r10
    1bf6:	bc 92       	st	X, r11
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
    1bf8:	08 dc       	rcall	.-2032   	; 0x140a <fuzzification>
    rule_evaluation();
    1bfa:	2e dc       	rcall	.-1956   	; 0x1458 <rule_evaluation>
    defuzzification();
    1bfc:	73 dc       	rcall	.-1818   	; 0x14e4 <defuzzification>
    if (servo.value > MAXLEFT)
    1bfe:	f6 01       	movw	r30, r12
    1c00:	82 85       	ldd	r24, Z+10	; 0x0a
    1c02:	93 85       	ldd	r25, Z+11	; 0x0b
    1c04:	87 3e       	cpi	r24, 0xE7	; 231
    1c06:	f7 e0       	ldi	r31, 0x07	; 7
    1c08:	9f 07       	cpc	r25, r31
    1c0a:	24 f0       	brlt	.+8      	; 0x1c14 <leftTurn+0x284>
    {
	    setServo(MAXLEFT);
    1c0c:	86 ee       	ldi	r24, 0xE6	; 230
    1c0e:	97 e0       	ldi	r25, 0x07	; 7
    1c10:	4e d1       	rcall	.+668    	; 0x1eae <setServo>
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <leftTurn+0x296>
    }
    else if (servo.value < MAXRIGHT)
    1c14:	84 3e       	cpi	r24, 0xE4	; 228
    1c16:	2c e0       	ldi	r18, 0x0C	; 12
    1c18:	92 07       	cpc	r25, r18
    1c1a:	24 f4       	brge	.+8      	; 0x1c24 <leftTurn+0x294>
    {
	    setServo(MAXRIGHT);
    1c1c:	84 ee       	ldi	r24, 0xE4	; 228
    1c1e:	9c e0       	ldi	r25, 0x0C	; 12
    1c20:	46 d1       	rcall	.+652    	; 0x1eae <setServo>
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <leftTurn+0x296>
    }
    else
    {
	    setServo(servo.value);
    1c24:	44 d1       	rcall	.+648    	; 0x1eae <setServo>
    }
    
}
    1c26:	c2 53       	subi	r28, 0x32	; 50
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	bf 90       	pop	r11
    1c46:	af 90       	pop	r10
    1c48:	9f 90       	pop	r9
    1c4a:	8f 90       	pop	r8
    1c4c:	7f 90       	pop	r7
    1c4e:	6f 90       	pop	r6
    1c50:	5f 90       	pop	r5
    1c52:	4f 90       	pop	r4
    1c54:	3f 90       	pop	r3
    1c56:	2f 90       	pop	r2
    1c58:	08 95       	ret

00001c5a <intersection>:


void intersection(int type, int gyro, int c, int v)
{
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	8a 01       	movw	r16, r20
    1c68:	79 01       	movw	r14, r18
    1c6a:	fb 01       	movw	r30, r22
    1c6c:	ff 23       	and	r31, r31
    1c6e:	24 f4       	brge	.+8      	; 0x1c78 <intersection+0x1e>
    1c70:	ee 27       	eor	r30, r30
    1c72:	ff 27       	eor	r31, r31
    1c74:	e6 1b       	sub	r30, r22
    1c76:	f7 0b       	sbc	r31, r23
    1c78:	ef 01       	movw	r28, r30
    1c7a:	ee 37       	cpi	r30, 0x7E	; 126
    1c7c:	f1 05       	cpc	r31, r1
    1c7e:	14 f0       	brlt	.+4      	; 0x1c84 <intersection+0x2a>
    1c80:	cd e7       	ldi	r28, 0x7D	; 125
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
    1c84:	82 37       	cpi	r24, 0x72	; 114
    1c86:	91 05       	cpc	r25, r1
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <intersection+0x36>
    {
		rightTurn(gyro);
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	1b dd       	rcall	.-1482   	; 0x16c4 <rightTurn>
    1c8e:	13 c0       	rjmp	.+38     	; 0x1cb6 <intersection+0x5c>
    }
	else if (type == 'l')
    1c90:	8c 36       	cpi	r24, 0x6C	; 108
    1c92:	91 05       	cpc	r25, r1
    1c94:	81 f4       	brne	.+32     	; 0x1cb6 <intersection+0x5c>
	{
		if (checkCount(500) == 0) // if count less than 500 ms then, keep straight
    1c96:	84 ef       	ldi	r24, 0xF4	; 244
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	0e 94 76 00 	call	0xec	; 0xec <checkCount>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	21 f4       	brne	.+8      	; 0x1caa <intersection+0x50>
		{
			FLC_steering(c,v);
    1ca2:	b7 01       	movw	r22, r14
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	29 db       	rcall	.-2478   	; 0x12fa <FLC_steering>
    1ca8:	06 c0       	rjmp	.+12     	; 0x1cb6 <intersection+0x5c>
		}
		else
		{
		count(0);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 66 00 	call	0xcc	; 0xcc <count>
		leftTurn(gyro);	
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	6d de       	rcall	.-806    	; 0x1990 <leftTurn>
		}
	}
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	08 95       	ret

00001cc4 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	0b b6       	in	r0, 0x3b	; 59
    1cd0:	0f 92       	push	r0
    1cd2:	8f 93       	push	r24
    1cd4:	9f 93       	push	r25
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
    1cda:	80 91 ce 00 	lds	r24, 0x00CE
    1cde:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce0:	29 f4       	brne	.+10     	; 0x1cec <__vector_28+0x28>
    1ce2:	10 92 fb 01 	sts	0x01FB, r1
    1ce6:	10 92 fa 01 	sts	0x01FA, r1
    1cea:	10 c0       	rjmp	.+32     	; 0x1d0c <__vector_28+0x48>
    1cec:	e0 91 fa 01 	lds	r30, 0x01FA
    1cf0:	f0 91 fb 01 	lds	r31, 0x01FB
    1cf4:	e4 5e       	subi	r30, 0xE4	; 228
    1cf6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf8:	80 83       	st	Z, r24
    1cfa:	80 91 fa 01 	lds	r24, 0x01FA
    1cfe:	90 91 fb 01 	lds	r25, 0x01FB
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	90 93 fb 01 	sts	0x01FB, r25
    1d08:	80 93 fa 01 	sts	0x01FA, r24
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	9f 91       	pop	r25
    1d12:	8f 91       	pop	r24
    1d14:	0f 90       	pop	r0
    1d16:	0b be       	out	0x3b, r0	; 59
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <carInit>:
    1d22:	9b d0       	rcall	.+310    	; 0x1e5a <pwmInit>
    1d24:	95 d1       	rcall	.+810    	; 0x2050 <spi_slave_init>
    1d26:	8d ec       	ldi	r24, 0xCD	; 205
    1d28:	9a e0       	ldi	r25, 0x0A	; 10
    1d2a:	90 93 89 00 	sts	0x0089, r25
    1d2e:	80 93 88 00 	sts	0x0088, r24
    1d32:	84 e6       	ldi	r24, 0x64	; 100
    1d34:	9a e0       	ldi	r25, 0x0A	; 10
    1d36:	90 93 8b 00 	sts	0x008B, r25
    1d3a:	80 93 8a 00 	sts	0x008A, r24
    1d3e:	08 95       	ret

00001d40 <main>:




int main (void)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	2b 97       	sbiw	r28, 0x0b	; 11
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61





	carInit();
    1d54:	e6 df       	rcall	.-52     	; 0x1d22 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d56:	2f ef       	ldi	r18, 0xFF	; 255
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	90 ee       	ldi	r25, 0xE0	; 224
    1d5c:	21 50       	subi	r18, 0x01	; 1
    1d5e:	80 40       	sbci	r24, 0x00	; 0
    1d60:	90 40       	sbci	r25, 0x00	; 0
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <main+0x1c>
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <main+0x26>
    1d66:	00 00       	nop
	//USART1_init(baud_setting);
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    1d6c:	78 94       	sei
					setServo(STRAIGHT);
				//}
			}
			else if (control_mode == 1)
			{
				FLC_speed(OCR1B, sF, OCR1A);
    1d6e:	08 e8       	ldi	r16, 0x88	; 136
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	0f 2e       	mov	r0, r31
    1d74:	fa e8       	ldi	r31, 0x8A	; 138
    1d76:	6f 2e       	mov	r6, r31
    1d78:	71 2c       	mov	r7, r1
    1d7a:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    1d7c:	c9 d1       	rcall	.+914    	; 0x2110 <is_package_recieved>
    1d7e:	88 23       	and	r24, r24
    1d80:	e9 f3       	breq	.-6      	; 0x1d7c <main+0x3c>
			

			//Reading Information
			prev_control_mode = control_mode;
    1d82:	4b 84       	ldd	r4, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    1d84:	be 01       	movw	r22, r28
    1d86:	6f 5f       	subi	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	0b 96       	adiw	r24, 0x0b	; 11
    1d8e:	ca d1       	rcall	.+916    	; 0x2124 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1d90:	ab 80       	ldd	r10, Y+3	; 0x03
    1d92:	b1 2c       	mov	r11, r1
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    1d94:	e9 80       	ldd	r14, Y+1	; 0x01
    1d96:	f1 2c       	mov	r15, r1
			int v = (int) sensor_info.angular_diff;
    1d98:	ca 80       	ldd	r12, Y+2	; 0x02
    1d9a:	d1 2c       	mov	r13, r1
			int gyro_angle = (int) sensor_info.angle - 125;
    1d9c:	58 84       	ldd	r5, Y+8	; 0x08
			int intersection_type = (int) sensor_info.next_turn_decision;
    1d9e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1da0:	91 2c       	mov	r9, r1
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    1da2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da4:	84 30       	cpi	r24, 0x04	; 4
    1da6:	51 f4       	brne	.+20     	; 0x1dbc <main+0x7c>
    1da8:	41 10       	cpse	r4, r1
    1daa:	16 c0       	rjmp	.+44     	; 0x1dd8 <main+0x98>
				count(1);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 66 00 	call	0xcc	; 0xcc <count>
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			
			}
			if (control_mode == 1 && control_mode != prev_control_mode && intersection_type == 'l') // if left turn is initiated
    1db4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	79 f4       	brne	.+30     	; 0x1dd8 <main+0x98>
    1dba:	06 c0       	rjmp	.+12     	; 0x1dc8 <main+0x88>
    1dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	59 f4       	brne	.+22     	; 0x1dd8 <main+0x98>
    1dc2:	e1 e0       	ldi	r30, 0x01	; 1
    1dc4:	4e 16       	cp	r4, r30
    1dc6:	41 f0       	breq	.+16     	; 0x1dd8 <main+0x98>
    1dc8:	fc e6       	ldi	r31, 0x6C	; 108
    1dca:	8f 16       	cp	r8, r31
    1dcc:	91 04       	cpc	r9, r1
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <main+0x98>
			{
				count(1);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			}
			
			
			
			
			cli();
    1dd8:	f8 94       	cli
			
			if (control_mode == 0)
    1dda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ddc:	81 11       	cpse	r24, r1
    1dde:	0d c0       	rjmp	.+26     	; 0x1dfa <main+0xba>
			{
				FLC_steering(c,v);
    1de0:	b6 01       	movw	r22, r12
    1de2:	c7 01       	movw	r24, r14
    1de4:	8a da       	rcall	.-2796   	; 0x12fa <FLC_steering>
				FLC_speed(OCR1B, sF, OCR1A);
    1de6:	f8 01       	movw	r30, r16
    1de8:	40 81       	ld	r20, Z
    1dea:	51 81       	ldd	r21, Z+1	; 0x01
    1dec:	f3 01       	movw	r30, r6
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	b5 01       	movw	r22, r10
    1df4:	0e 94 a2 00 	call	0x144	; 0x144 <FLC_speed>
    1df8:	20 c0       	rjmp	.+64     	; 0x1e3a <main+0xfa>
			}
			else if (control_mode == 4)
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	59 f4       	brne	.+22     	; 0x1e14 <main+0xd4>
					//setESC(2835);
					//stop(k_value_stop_line);
				//}
				//else
				//{
					count(0);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 66 00 	call	0xcc	; 0xcc <count>
					setESC(NEUTRAL);
    1e06:	8d ec       	ldi	r24, 0xCD	; 205
    1e08:	9a e0       	ldi	r25, 0x0A	; 10
    1e0a:	36 d0       	rcall	.+108    	; 0x1e78 <setESC>
					setServo(STRAIGHT);
    1e0c:	84 e6       	ldi	r24, 0x64	; 100
    1e0e:	9a e0       	ldi	r25, 0x0A	; 10
    1e10:	4e d0       	rcall	.+156    	; 0x1eae <setServo>
    1e12:	13 c0       	rjmp	.+38     	; 0x1e3a <main+0xfa>
				//}
			}
			else if (control_mode == 1)
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	89 f4       	brne	.+34     	; 0x1e3a <main+0xfa>
			{
				FLC_speed(OCR1B, sF, OCR1A);
    1e18:	f8 01       	movw	r30, r16
    1e1a:	40 81       	ld	r20, Z
    1e1c:	51 81       	ldd	r21, Z+1	; 0x01
    1e1e:	f3 01       	movw	r30, r6
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	b5 01       	movw	r22, r10
    1e26:	0e 94 a2 00 	call	0x144	; 0x144 <FLC_speed>
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro_angle = (int) sensor_info.angle - 125;
    1e2a:	85 2d       	mov	r24, r5
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
				//}
			}
			else if (control_mode == 1)
			{
				FLC_speed(OCR1B, sF, OCR1A);
				intersection(gyro_angle, intersection_type, c, v);
    1e2e:	96 01       	movw	r18, r12
    1e30:	a7 01       	movw	r20, r14
    1e32:	b4 01       	movw	r22, r8
    1e34:	8d 57       	subi	r24, 0x7D	; 125
    1e36:	91 09       	sbc	r25, r1
    1e38:	10 df       	rcall	.-480    	; 0x1c5a <intersection>
			}
			
			sei();
    1e3a:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	c0 80       	ld	r12, Z
    1e40:	d1 80       	ldd	r13, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1e42:	f3 01       	movw	r30, r6
    1e44:	e0 80       	ld	r14, Z
    1e46:	f1 80       	ldd	r15, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0b d1       	rcall	.+534    	; 0x2062 <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1e4c:	8c 2d       	mov	r24, r12
    1e4e:	09 d1       	rcall	.+530    	; 0x2062 <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	07 d1       	rcall	.+526    	; 0x2062 <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    1e54:	8e 2d       	mov	r24, r14
    1e56:	05 d1       	rcall	.+522    	; 0x2062 <spi_send_byte>
    1e58:	91 cf       	rjmp	.-222    	; 0x1d7c <main+0x3c>

00001e5a <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1e5a:	80 e3       	ldi	r24, 0x30	; 48
    1e5c:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1e5e:	82 ea       	ldi	r24, 0xA2	; 162
    1e60:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	9f e8       	ldi	r25, 0x8F	; 143
    1e68:	90 93 87 00 	sts	0x0087, r25
    1e6c:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1e70:	8a e1       	ldi	r24, 0x1A	; 26
    1e72:	80 93 81 00 	sts	0x0081, r24
    1e76:	08 95       	ret

00001e78 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1e78:	80 36       	cpi	r24, 0x60	; 96
    1e7a:	2a e0       	ldi	r18, 0x0A	; 10
    1e7c:	92 07       	cpc	r25, r18
    1e7e:	3c f4       	brge	.+14     	; 0x1e8e <setESC+0x16>
	{
		OCR1A = MINESC;
    1e80:	8f e5       	ldi	r24, 0x5F	; 95
    1e82:	9a e0       	ldi	r25, 0x0A	; 10
    1e84:	90 93 89 00 	sts	0x0089, r25
    1e88:	80 93 88 00 	sts	0x0088, r24
    1e8c:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1e8e:	82 32       	cpi	r24, 0x22	; 34
    1e90:	2b e0       	ldi	r18, 0x0B	; 11
    1e92:	92 07       	cpc	r25, r18
    1e94:	3c f0       	brlt	.+14     	; 0x1ea4 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1e96:	82 e2       	ldi	r24, 0x22	; 34
    1e98:	9b e0       	ldi	r25, 0x0B	; 11
    1e9a:	90 93 89 00 	sts	0x0089, r25
    1e9e:	80 93 88 00 	sts	0x0088, r24
    1ea2:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1ea4:	90 93 89 00 	sts	0x0089, r25
    1ea8:	80 93 88 00 	sts	0x0088, r24
    1eac:	08 95       	ret

00001eae <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1eae:	84 3e       	cpi	r24, 0xE4	; 228
    1eb0:	2c e0       	ldi	r18, 0x0C	; 12
    1eb2:	92 07       	cpc	r25, r18
    1eb4:	3c f0       	brlt	.+14     	; 0x1ec4 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1eb6:	84 ee       	ldi	r24, 0xE4	; 228
    1eb8:	9c e0       	ldi	r25, 0x0C	; 12
    1eba:	90 93 8b 00 	sts	0x008B, r25
    1ebe:	80 93 8a 00 	sts	0x008A, r24
    1ec2:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1ec4:	87 3e       	cpi	r24, 0xE7	; 231
    1ec6:	27 e0       	ldi	r18, 0x07	; 7
    1ec8:	92 07       	cpc	r25, r18
    1eca:	3c f4       	brge	.+14     	; 0x1eda <setServo+0x2c>

		OCR1B = MAXLEFT;
    1ecc:	86 ee       	ldi	r24, 0xE6	; 230
    1ece:	97 e0       	ldi	r25, 0x07	; 7
    1ed0:	90 93 8b 00 	sts	0x008B, r25
    1ed4:	80 93 8a 00 	sts	0x008A, r24
    1ed8:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    1eda:	ea e8       	ldi	r30, 0x8A	; 138
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	40 91 00 01 	lds	r20, 0x0100
    1ee6:	50 91 01 01 	lds	r21, 0x0101
    1eea:	84 9f       	mul	r24, r20
    1eec:	90 01       	movw	r18, r0
    1eee:	85 9f       	mul	r24, r21
    1ef0:	30 0d       	add	r19, r0
    1ef2:	94 9f       	mul	r25, r20
    1ef4:	30 0d       	add	r19, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	40 91 02 01 	lds	r20, 0x0102
    1efc:	50 91 03 01 	lds	r21, 0x0103
    1f00:	64 9f       	mul	r22, r20
    1f02:	c0 01       	movw	r24, r0
    1f04:	65 9f       	mul	r22, r21
    1f06:	90 0d       	add	r25, r0
    1f08:	74 9f       	mul	r23, r20
    1f0a:	90 0d       	add	r25, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	82 0f       	add	r24, r18
    1f10:	93 1f       	adc	r25, r19
    1f12:	6a e0       	ldi	r22, 0x0A	; 10
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	e0 d3       	rcall	.+1984   	; 0x26d8 <__divmodhi4>
    1f18:	71 83       	std	Z+1, r23	; 0x01
    1f1a:	60 83       	st	Z, r22
    1f1c:	08 95       	ret

00001f1e <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1f1e:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1f20:	20 91 88 02 	lds	r18, 0x0288
    1f24:	30 91 89 02 	lds	r19, 0x0289
    1f28:	21 15       	cp	r18, r1
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	a9 f0       	breq	.+42     	; 0x1f58 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1f2e:	e4 e8       	ldi	r30, 0x84	; 132
    1f30:	f2 e0       	ldi	r31, 0x02	; 2
    1f32:	40 81       	ld	r20, Z
    1f34:	51 81       	ldd	r21, Z+1	; 0x01
    1f36:	da 01       	movw	r26, r20
    1f38:	ac 5b       	subi	r26, 0xBC	; 188
    1f3a:	bd 4f       	sbci	r27, 0xFD	; 253
    1f3c:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1f3e:	4f 5f       	subi	r20, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	51 83       	std	Z+1, r21	; 0x01
    1f44:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1f46:	21 50       	subi	r18, 0x01	; 1
    1f48:	31 09       	sbc	r19, r1
    1f4a:	30 93 89 02 	sts	0x0289, r19
    1f4e:	20 93 88 02 	sts	0x0288, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1f52:	23 2b       	or	r18, r19
    1f54:	21 f4       	brne	.+8      	; 0x1f5e <spi_get_byte+0x40>
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1f58:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1f5a:	10 92 fc 01 	sts	0x01FC, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1f5e:	20 91 84 02 	lds	r18, 0x0284
    1f62:	30 91 85 02 	lds	r19, 0x0285
    1f66:	20 34       	cpi	r18, 0x40	; 64
    1f68:	31 05       	cpc	r19, r1
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1f6c:	10 92 85 02 	sts	0x0285, r1
    1f70:	10 92 84 02 	sts	0x0284, r1
	}
	

	sei();
    1f74:	78 94       	sei
	
	return value;
	
		
}
    1f76:	08 95       	ret

00001f78 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	0b b6       	in	r0, 0x3b	; 59
    1f84:	0f 92       	push	r0
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	8f 93       	push	r24
    1f8c:	9f 93       	push	r25
    1f8e:	af 93       	push	r26
    1f90:	bf 93       	push	r27
    1f92:	ef 93       	push	r30
    1f94:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1f96:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1f98:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1f9a:	2d 3f       	cpi	r18, 0xFD	; 253
    1f9c:	a9 f0       	breq	.+42     	; 0x1fc8 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1f9e:	e6 e8       	ldi	r30, 0x86	; 134
    1fa0:	f2 e0       	ldi	r31, 0x02	; 2
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	ac 5b       	subi	r26, 0xBC	; 188
    1faa:	bd 4f       	sbci	r27, 0xFD	; 253
    1fac:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1fb4:	e8 e8       	ldi	r30, 0x88	; 136
    1fb6:	f2 e0       	ldi	r31, 0x02	; 2
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	80 93 fc 01 	sts	0x01FC, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1fc8:	80 91 86 02 	lds	r24, 0x0286
    1fcc:	90 91 87 02 	lds	r25, 0x0287
    1fd0:	80 34       	cpi	r24, 0x40	; 64
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1fd6:	10 92 87 02 	sts	0x0287, r1
    1fda:	10 92 86 02 	sts	0x0286, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1fde:	80 91 42 02 	lds	r24, 0x0242
    1fe2:	90 91 43 02 	lds	r25, 0x0243
    1fe6:	89 2b       	or	r24, r25
    1fe8:	01 f1       	breq	.+64     	; 0x202a <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1fea:	e0 91 3e 02 	lds	r30, 0x023E
    1fee:	f0 91 3f 02 	lds	r31, 0x023F
    1ff2:	e2 50       	subi	r30, 0x02	; 2
    1ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1ffa:	ee e3       	ldi	r30, 0x3E	; 62
    1ffc:	f2 e0       	ldi	r31, 0x02	; 2
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    2008:	e2 e4       	ldi	r30, 0x42	; 66
    200a:	f2 e0       	ldi	r31, 0x02	; 2
    200c:	20 81       	ld	r18, Z
    200e:	31 81       	ldd	r19, Z+1	; 0x01
    2010:	21 50       	subi	r18, 0x01	; 1
    2012:	31 09       	sbc	r19, r1
    2014:	31 83       	std	Z+1, r19	; 0x01
    2016:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    2018:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    201a:	80 34       	cpi	r24, 0x40	; 64
    201c:	91 05       	cpc	r25, r1
    201e:	49 f4       	brne	.+18     	; 0x2032 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    2020:	10 92 3f 02 	sts	0x023F, r1
    2024:	10 92 3e 02 	sts	0x023E, r1
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    202a:	8d ef       	ldi	r24, 0xFD	; 253
    202c:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    202e:	10 92 fd 01 	sts	0x01FD, r1
		
	} 	
	

}
    2032:	ff 91       	pop	r31
    2034:	ef 91       	pop	r30
    2036:	bf 91       	pop	r27
    2038:	af 91       	pop	r26
    203a:	9f 91       	pop	r25
    203c:	8f 91       	pop	r24
    203e:	3f 91       	pop	r19
    2040:	2f 91       	pop	r18
    2042:	0f 90       	pop	r0
    2044:	0b be       	out	0x3b, r0	; 59
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    2050:	80 e4       	ldi	r24, 0x40	; 64
    2052:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    2054:	80 ec       	ldi	r24, 0xC0	; 192
    2056:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    2058:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    205a:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    205c:	8d ef       	ldi	r24, 0xFD	; 253
    205e:	8e bd       	out	0x2e, r24	; 46
    2060:	08 95       	ret

00002062 <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    2062:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    2064:	20 91 42 02 	lds	r18, 0x0242
    2068:	30 91 43 02 	lds	r19, 0x0243
    206c:	20 34       	cpi	r18, 0x40	; 64
    206e:	31 05       	cpc	r19, r1
    2070:	90 f4       	brcc	.+36     	; 0x2096 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    2072:	e0 e4       	ldi	r30, 0x40	; 64
    2074:	f2 e0       	ldi	r31, 0x02	; 2
    2076:	40 81       	ld	r20, Z
    2078:	51 81       	ldd	r21, Z+1	; 0x01
    207a:	da 01       	movw	r26, r20
    207c:	a2 50       	subi	r26, 0x02	; 2
    207e:	be 4f       	sbci	r27, 0xFE	; 254
    2080:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    2082:	4f 5f       	subi	r20, 0xFF	; 255
    2084:	5f 4f       	sbci	r21, 0xFF	; 255
    2086:	51 83       	std	Z+1, r21	; 0x01
    2088:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    208a:	2f 5f       	subi	r18, 0xFF	; 255
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	30 93 43 02 	sts	0x0243, r19
    2092:	20 93 42 02 	sts	0x0242, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    2096:	80 91 40 02 	lds	r24, 0x0240
    209a:	90 91 41 02 	lds	r25, 0x0241
    209e:	80 34       	cpi	r24, 0x40	; 64
    20a0:	91 05       	cpc	r25, r1
    20a2:	21 f4       	brne	.+8      	; 0x20ac <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    20a4:	10 92 41 02 	sts	0x0241, r1
    20a8:	10 92 40 02 	sts	0x0240, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    20ac:	80 91 42 02 	lds	r24, 0x0242
    20b0:	90 91 43 02 	lds	r25, 0x0243
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f9 f4       	brne	.+62     	; 0x20f6 <spi_send_byte+0x94>
    20b8:	80 91 fd 01 	lds	r24, 0x01FD
    20bc:	81 11       	cpse	r24, r1
    20be:	1b c0       	rjmp	.+54     	; 0x20f6 <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    20c0:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    20c2:	e0 91 3e 02 	lds	r30, 0x023E
    20c6:	f0 91 3f 02 	lds	r31, 0x023F
    20ca:	e2 50       	subi	r30, 0x02	; 2
    20cc:	fe 4f       	sbci	r31, 0xFE	; 254
    20ce:	80 81       	ld	r24, Z
    20d0:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    20d2:	ee e3       	ldi	r30, 0x3E	; 62
    20d4:	f2 e0       	ldi	r31, 0x02	; 2
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    20e0:	e2 e4       	ldi	r30, 0x42	; 66
    20e2:	f2 e0       	ldi	r31, 0x02	; 2
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    20ee:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 fd 01 	sts	0x01FD, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    20f6:	80 91 3e 02 	lds	r24, 0x023E
    20fa:	90 91 3f 02 	lds	r25, 0x023F
    20fe:	80 34       	cpi	r24, 0x40	; 64
    2100:	91 05       	cpc	r25, r1
    2102:	21 f4       	brne	.+8      	; 0x210c <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    2104:	10 92 3f 02 	sts	0x023F, r1
    2108:	10 92 3e 02 	sts	0x023E, r1
	}
			
			

	sei();
    210c:	78 94       	sei
    210e:	08 95       	ret

00002110 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	20 91 88 02 	lds	r18, 0x0288
    2116:	30 91 89 02 	lds	r19, 0x0289
    211a:	2b 30       	cpi	r18, 0x0B	; 11
    211c:	31 05       	cpc	r19, r1
    211e:	08 f4       	brcc	.+2      	; 0x2122 <is_package_recieved+0x12>
    2120:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    2122:	08 95       	ret

00002124 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	8c 01       	movw	r16, r24
    212e:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    2130:	20 91 88 02 	lds	r18, 0x0288
    2134:	30 91 89 02 	lds	r19, 0x0289
    2138:	23 2b       	or	r18, r19
    213a:	69 f1       	breq	.+90     	; 0x2196 <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    213c:	e0 91 84 02 	lds	r30, 0x0284
    2140:	f0 91 85 02 	lds	r31, 0x0285
    2144:	ec 5b       	subi	r30, 0xBC	; 188
    2146:	fd 4f       	sbci	r31, 0xFD	; 253
    2148:	80 81       	ld	r24, Z
    214a:	8f 3f       	cpi	r24, 0xFF	; 255
    214c:	e1 f4       	brne	.+56     	; 0x2186 <read_sensor_info+0x62>
    214e:	e0 df       	rcall	.-64     	; 0x2110 <is_package_recieved>
    2150:	88 23       	and	r24, r24
    2152:	11 f1       	breq	.+68     	; 0x2198 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    2154:	e4 de       	rcall	.-568    	; 0x1f1e <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    2156:	e3 de       	rcall	.-570    	; 0x1f1e <spi_get_byte>
    2158:	f8 01       	movw	r30, r16
    215a:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    215c:	e0 de       	rcall	.-576    	; 0x1f1e <spi_get_byte>
    215e:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    2160:	de de       	rcall	.-580    	; 0x1f1e <spi_get_byte>
    2162:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    2164:	dc de       	rcall	.-584    	; 0x1f1e <spi_get_byte>
    2166:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    2168:	da de       	rcall	.-588    	; 0x1f1e <spi_get_byte>
    216a:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    216c:	d8 de       	rcall	.-592    	; 0x1f1e <spi_get_byte>
    216e:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    2170:	d6 de       	rcall	.-596    	; 0x1f1e <spi_get_byte>
    2172:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    2174:	8f e8       	ldi	r24, 0x8F	; 143
    2176:	9f e0       	ldi	r25, 0x0F	; 15
    2178:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    217a:	d1 de       	rcall	.-606    	; 0x1f1e <spi_get_byte>
    217c:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    217e:	cf de       	rcall	.-610    	; 0x1f1e <spi_get_byte>
    2180:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    2186:	c4 df       	rcall	.-120    	; 0x2110 <is_package_recieved>
    2188:	88 23       	and	r24, r24
    218a:	31 f0       	breq	.+12     	; 0x2198 <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    218c:	c8 de       	rcall	.-624    	; 0x1f1e <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    218e:	be 01       	movw	r22, r28
    2190:	c8 01       	movw	r24, r16
    2192:	c8 df       	rcall	.-112    	; 0x2124 <read_sensor_info>
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    2196:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	0b b6       	in	r0, 0x3b	; 59
    21ae:	0f 92       	push	r0
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	4f 93       	push	r20
    21b6:	8f 93       	push	r24
    21b8:	9f 93       	push	r25
    21ba:	af 93       	push	r26
    21bc:	bf 93       	push	r27
    21be:	ef 93       	push	r30
    21c0:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    21c2:	80 91 14 03 	lds	r24, 0x0314
    21c6:	90 91 15 03 	lds	r25, 0x0315
    21ca:	80 34       	cpi	r24, 0x40	; 64
    21cc:	91 05       	cpc	r25, r1
    21ce:	31 f4       	brne	.+12     	; 0x21dc <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	80 93 40 03 	sts	0x0340, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    21d6:	80 91 c6 00 	lds	r24, 0x00C6
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    21dc:	80 34       	cpi	r24, 0x40	; 64
    21de:	91 05       	cpc	r25, r1
    21e0:	e8 f4       	brcc	.+58     	; 0x221c <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    21e2:	e2 e1       	ldi	r30, 0x12	; 18
    21e4:	f3 e0       	ldi	r31, 0x03	; 3
    21e6:	20 81       	ld	r18, Z
    21e8:	31 81       	ldd	r19, Z+1	; 0x01
    21ea:	40 91 c6 00 	lds	r20, 0x00C6
    21ee:	d9 01       	movw	r26, r18
    21f0:	a0 53       	subi	r26, 0x30	; 48
    21f2:	bd 4f       	sbci	r27, 0xFD	; 253
    21f4:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    21f6:	2f 5f       	subi	r18, 0xFF	; 255
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	31 83       	std	Z+1, r19	; 0x01
    21fc:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	90 93 15 03 	sts	0x0315, r25
    2204:	80 93 14 03 	sts	0x0314, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    2208:	80 91 14 03 	lds	r24, 0x0314
    220c:	90 91 15 03 	lds	r25, 0x0315
    2210:	80 34       	cpi	r24, 0x40	; 64
    2212:	91 05       	cpc	r25, r1
    2214:	19 f4       	brne	.+6      	; 0x221c <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 3e 03 	sts	0x033E, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    221c:	80 91 12 03 	lds	r24, 0x0312
    2220:	90 91 13 03 	lds	r25, 0x0313
    2224:	80 34       	cpi	r24, 0x40	; 64
    2226:	91 05       	cpc	r25, r1
    2228:	21 f4       	brne	.+8      	; 0x2232 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    222a:	10 92 13 03 	sts	0x0313, r1
    222e:	10 92 12 03 	sts	0x0312, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 3d 03 	sts	0x033D, r24
}
    2238:	ff 91       	pop	r31
    223a:	ef 91       	pop	r30
    223c:	bf 91       	pop	r27
    223e:	af 91       	pop	r26
    2240:	9f 91       	pop	r25
    2242:	8f 91       	pop	r24
    2244:	4f 91       	pop	r20
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	0b be       	out	0x3b, r0	; 59
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	0f 90       	pop	r0
    2254:	1f 90       	pop	r1
    2256:	18 95       	reti

00002258 <__vector_22>:




ISR(USART0_TX_vect)
{
    2258:	1f 92       	push	r1
    225a:	0f 92       	push	r0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	0f 92       	push	r0
    2260:	11 24       	eor	r1, r1
    2262:	0b b6       	in	r0, 0x3b	; 59
    2264:	0f 92       	push	r0
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	ef 93       	push	r30
    226c:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    226e:	80 91 ce 02 	lds	r24, 0x02CE
    2272:	90 91 cf 02 	lds	r25, 0x02CF
    2276:	80 34       	cpi	r24, 0x40	; 64
    2278:	91 05       	cpc	r25, r1
    227a:	19 f4       	brne	.+6      	; 0x2282 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    227c:	10 92 3c 03 	sts	0x033C, r1
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    2282:	89 2b       	or	r24, r25
    2284:	b9 f0       	breq	.+46     	; 0x22b4 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    2286:	e0 91 ca 02 	lds	r30, 0x02CA
    228a:	f0 91 cb 02 	lds	r31, 0x02CB
    228e:	e6 57       	subi	r30, 0x76	; 118
    2290:	fd 4f       	sbci	r31, 0xFD	; 253
    2292:	80 81       	ld	r24, Z
    2294:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    2298:	ea ec       	ldi	r30, 0xCA	; 202
    229a:	f2 e0       	ldi	r31, 0x02	; 2
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    22a6:	ee ec       	ldi	r30, 0xCE	; 206
    22a8:	f2 e0       	ldi	r31, 0x02	; 2
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    22b4:	80 91 ca 02 	lds	r24, 0x02CA
    22b8:	90 91 cb 02 	lds	r25, 0x02CB
    22bc:	80 34       	cpi	r24, 0x40	; 64
    22be:	91 05       	cpc	r25, r1
    22c0:	21 f4       	brne	.+8      	; 0x22ca <__vector_22+0x72>
		tx_uart0.i_first = 0;
    22c2:	10 92 cb 02 	sts	0x02CB, r1
    22c6:	10 92 ca 02 	sts	0x02CA, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    22ca:	80 91 ce 02 	lds	r24, 0x02CE
    22ce:	90 91 cf 02 	lds	r25, 0x02CF
    22d2:	89 2b       	or	r24, r25
    22d4:	39 f4       	brne	.+14     	; 0x22e4 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    22d6:	10 92 3f 03 	sts	0x033F, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    22da:	e1 ec       	ldi	r30, 0xC1	; 193
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8f 7b       	andi	r24, 0xBF	; 191
    22e2:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	9f 91       	pop	r25
    22ea:	8f 91       	pop	r24
    22ec:	0f 90       	pop	r0
    22ee:	0b be       	out	0x3b, r0	; 59
    22f0:	0f 90       	pop	r0
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	0f 90       	pop	r0
    22f6:	1f 90       	pop	r1
    22f8:	18 95       	reti

000022fa <__subsf3>:
    22fa:	50 58       	subi	r21, 0x80	; 128

000022fc <__addsf3>:
    22fc:	bb 27       	eor	r27, r27
    22fe:	aa 27       	eor	r26, r26
    2300:	0e d0       	rcall	.+28     	; 0x231e <__addsf3x>
    2302:	4d c1       	rjmp	.+666    	; 0x259e <__fp_round>
    2304:	3e d1       	rcall	.+636    	; 0x2582 <__fp_pscA>
    2306:	30 f0       	brcs	.+12     	; 0x2314 <__addsf3+0x18>
    2308:	43 d1       	rcall	.+646    	; 0x2590 <__fp_pscB>
    230a:	20 f0       	brcs	.+8      	; 0x2314 <__addsf3+0x18>
    230c:	31 f4       	brne	.+12     	; 0x231a <__addsf3+0x1e>
    230e:	9f 3f       	cpi	r25, 0xFF	; 255
    2310:	11 f4       	brne	.+4      	; 0x2316 <__addsf3+0x1a>
    2312:	1e f4       	brtc	.+6      	; 0x231a <__addsf3+0x1e>
    2314:	33 c1       	rjmp	.+614    	; 0x257c <__fp_nan>
    2316:	0e f4       	brtc	.+2      	; 0x231a <__addsf3+0x1e>
    2318:	e0 95       	com	r30
    231a:	e7 fb       	bst	r30, 7
    231c:	29 c1       	rjmp	.+594    	; 0x2570 <__fp_inf>

0000231e <__addsf3x>:
    231e:	e9 2f       	mov	r30, r25
    2320:	4f d1       	rcall	.+670    	; 0x25c0 <__fp_split3>
    2322:	80 f3       	brcs	.-32     	; 0x2304 <__addsf3+0x8>
    2324:	ba 17       	cp	r27, r26
    2326:	62 07       	cpc	r22, r18
    2328:	73 07       	cpc	r23, r19
    232a:	84 07       	cpc	r24, r20
    232c:	95 07       	cpc	r25, r21
    232e:	18 f0       	brcs	.+6      	; 0x2336 <__addsf3x+0x18>
    2330:	71 f4       	brne	.+28     	; 0x234e <__addsf3x+0x30>
    2332:	9e f5       	brtc	.+102    	; 0x239a <__addsf3x+0x7c>
    2334:	67 c1       	rjmp	.+718    	; 0x2604 <__fp_zero>
    2336:	0e f4       	brtc	.+2      	; 0x233a <__addsf3x+0x1c>
    2338:	e0 95       	com	r30
    233a:	0b 2e       	mov	r0, r27
    233c:	ba 2f       	mov	r27, r26
    233e:	a0 2d       	mov	r26, r0
    2340:	0b 01       	movw	r0, r22
    2342:	b9 01       	movw	r22, r18
    2344:	90 01       	movw	r18, r0
    2346:	0c 01       	movw	r0, r24
    2348:	ca 01       	movw	r24, r20
    234a:	a0 01       	movw	r20, r0
    234c:	11 24       	eor	r1, r1
    234e:	ff 27       	eor	r31, r31
    2350:	59 1b       	sub	r21, r25
    2352:	99 f0       	breq	.+38     	; 0x237a <__addsf3x+0x5c>
    2354:	59 3f       	cpi	r21, 0xF9	; 249
    2356:	50 f4       	brcc	.+20     	; 0x236c <__addsf3x+0x4e>
    2358:	50 3e       	cpi	r21, 0xE0	; 224
    235a:	68 f1       	brcs	.+90     	; 0x23b6 <__addsf3x+0x98>
    235c:	1a 16       	cp	r1, r26
    235e:	f0 40       	sbci	r31, 0x00	; 0
    2360:	a2 2f       	mov	r26, r18
    2362:	23 2f       	mov	r18, r19
    2364:	34 2f       	mov	r19, r20
    2366:	44 27       	eor	r20, r20
    2368:	58 5f       	subi	r21, 0xF8	; 248
    236a:	f3 cf       	rjmp	.-26     	; 0x2352 <__addsf3x+0x34>
    236c:	46 95       	lsr	r20
    236e:	37 95       	ror	r19
    2370:	27 95       	ror	r18
    2372:	a7 95       	ror	r26
    2374:	f0 40       	sbci	r31, 0x00	; 0
    2376:	53 95       	inc	r21
    2378:	c9 f7       	brne	.-14     	; 0x236c <__addsf3x+0x4e>
    237a:	7e f4       	brtc	.+30     	; 0x239a <__addsf3x+0x7c>
    237c:	1f 16       	cp	r1, r31
    237e:	ba 0b       	sbc	r27, r26
    2380:	62 0b       	sbc	r22, r18
    2382:	73 0b       	sbc	r23, r19
    2384:	84 0b       	sbc	r24, r20
    2386:	ba f0       	brmi	.+46     	; 0x23b6 <__addsf3x+0x98>
    2388:	91 50       	subi	r25, 0x01	; 1
    238a:	a1 f0       	breq	.+40     	; 0x23b4 <__addsf3x+0x96>
    238c:	ff 0f       	add	r31, r31
    238e:	bb 1f       	adc	r27, r27
    2390:	66 1f       	adc	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	c2 f7       	brpl	.-16     	; 0x2388 <__addsf3x+0x6a>
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <__addsf3x+0x98>
    239a:	ba 0f       	add	r27, r26
    239c:	62 1f       	adc	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	48 f4       	brcc	.+18     	; 0x23b6 <__addsf3x+0x98>
    23a4:	87 95       	ror	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b7 95       	ror	r27
    23ac:	f7 95       	ror	r31
    23ae:	9e 3f       	cpi	r25, 0xFE	; 254
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__addsf3x+0x96>
    23b2:	b3 cf       	rjmp	.-154    	; 0x231a <__addsf3+0x1e>
    23b4:	93 95       	inc	r25
    23b6:	88 0f       	add	r24, r24
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__addsf3x+0x9e>
    23ba:	99 27       	eor	r25, r25
    23bc:	ee 0f       	add	r30, r30
    23be:	97 95       	ror	r25
    23c0:	87 95       	ror	r24
    23c2:	08 95       	ret

000023c4 <__divsf3>:
    23c4:	0c d0       	rcall	.+24     	; 0x23de <__divsf3x>
    23c6:	eb c0       	rjmp	.+470    	; 0x259e <__fp_round>
    23c8:	e3 d0       	rcall	.+454    	; 0x2590 <__fp_pscB>
    23ca:	40 f0       	brcs	.+16     	; 0x23dc <__divsf3+0x18>
    23cc:	da d0       	rcall	.+436    	; 0x2582 <__fp_pscA>
    23ce:	30 f0       	brcs	.+12     	; 0x23dc <__divsf3+0x18>
    23d0:	21 f4       	brne	.+8      	; 0x23da <__divsf3+0x16>
    23d2:	5f 3f       	cpi	r21, 0xFF	; 255
    23d4:	19 f0       	breq	.+6      	; 0x23dc <__divsf3+0x18>
    23d6:	cc c0       	rjmp	.+408    	; 0x2570 <__fp_inf>
    23d8:	51 11       	cpse	r21, r1
    23da:	15 c1       	rjmp	.+554    	; 0x2606 <__fp_szero>
    23dc:	cf c0       	rjmp	.+414    	; 0x257c <__fp_nan>

000023de <__divsf3x>:
    23de:	f0 d0       	rcall	.+480    	; 0x25c0 <__fp_split3>
    23e0:	98 f3       	brcs	.-26     	; 0x23c8 <__divsf3+0x4>

000023e2 <__divsf3_pse>:
    23e2:	99 23       	and	r25, r25
    23e4:	c9 f3       	breq	.-14     	; 0x23d8 <__divsf3+0x14>
    23e6:	55 23       	and	r21, r21
    23e8:	b1 f3       	breq	.-20     	; 0x23d6 <__divsf3+0x12>
    23ea:	95 1b       	sub	r25, r21
    23ec:	55 0b       	sbc	r21, r21
    23ee:	bb 27       	eor	r27, r27
    23f0:	aa 27       	eor	r26, r26
    23f2:	62 17       	cp	r22, r18
    23f4:	73 07       	cpc	r23, r19
    23f6:	84 07       	cpc	r24, r20
    23f8:	38 f0       	brcs	.+14     	; 0x2408 <__divsf3_pse+0x26>
    23fa:	9f 5f       	subi	r25, 0xFF	; 255
    23fc:	5f 4f       	sbci	r21, 0xFF	; 255
    23fe:	22 0f       	add	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	44 1f       	adc	r20, r20
    2404:	aa 1f       	adc	r26, r26
    2406:	a9 f3       	breq	.-22     	; 0x23f2 <__divsf3_pse+0x10>
    2408:	33 d0       	rcall	.+102    	; 0x2470 <__divsf3_pse+0x8e>
    240a:	0e 2e       	mov	r0, r30
    240c:	3a f0       	brmi	.+14     	; 0x241c <__divsf3_pse+0x3a>
    240e:	e0 e8       	ldi	r30, 0x80	; 128
    2410:	30 d0       	rcall	.+96     	; 0x2472 <__divsf3_pse+0x90>
    2412:	91 50       	subi	r25, 0x01	; 1
    2414:	50 40       	sbci	r21, 0x00	; 0
    2416:	e6 95       	lsr	r30
    2418:	00 1c       	adc	r0, r0
    241a:	ca f7       	brpl	.-14     	; 0x240e <__divsf3_pse+0x2c>
    241c:	29 d0       	rcall	.+82     	; 0x2470 <__divsf3_pse+0x8e>
    241e:	fe 2f       	mov	r31, r30
    2420:	27 d0       	rcall	.+78     	; 0x2470 <__divsf3_pse+0x8e>
    2422:	66 0f       	add	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	88 1f       	adc	r24, r24
    2428:	bb 1f       	adc	r27, r27
    242a:	26 17       	cp	r18, r22
    242c:	37 07       	cpc	r19, r23
    242e:	48 07       	cpc	r20, r24
    2430:	ab 07       	cpc	r26, r27
    2432:	b0 e8       	ldi	r27, 0x80	; 128
    2434:	09 f0       	breq	.+2      	; 0x2438 <__divsf3_pse+0x56>
    2436:	bb 0b       	sbc	r27, r27
    2438:	80 2d       	mov	r24, r0
    243a:	bf 01       	movw	r22, r30
    243c:	ff 27       	eor	r31, r31
    243e:	93 58       	subi	r25, 0x83	; 131
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	2a f0       	brmi	.+10     	; 0x244e <__divsf3_pse+0x6c>
    2444:	9e 3f       	cpi	r25, 0xFE	; 254
    2446:	51 05       	cpc	r21, r1
    2448:	68 f0       	brcs	.+26     	; 0x2464 <__divsf3_pse+0x82>
    244a:	92 c0       	rjmp	.+292    	; 0x2570 <__fp_inf>
    244c:	dc c0       	rjmp	.+440    	; 0x2606 <__fp_szero>
    244e:	5f 3f       	cpi	r21, 0xFF	; 255
    2450:	ec f3       	brlt	.-6      	; 0x244c <__divsf3_pse+0x6a>
    2452:	98 3e       	cpi	r25, 0xE8	; 232
    2454:	dc f3       	brlt	.-10     	; 0x244c <__divsf3_pse+0x6a>
    2456:	86 95       	lsr	r24
    2458:	77 95       	ror	r23
    245a:	67 95       	ror	r22
    245c:	b7 95       	ror	r27
    245e:	f7 95       	ror	r31
    2460:	9f 5f       	subi	r25, 0xFF	; 255
    2462:	c9 f7       	brne	.-14     	; 0x2456 <__divsf3_pse+0x74>
    2464:	88 0f       	add	r24, r24
    2466:	91 1d       	adc	r25, r1
    2468:	96 95       	lsr	r25
    246a:	87 95       	ror	r24
    246c:	97 f9       	bld	r25, 7
    246e:	08 95       	ret
    2470:	e1 e0       	ldi	r30, 0x01	; 1
    2472:	66 0f       	add	r22, r22
    2474:	77 1f       	adc	r23, r23
    2476:	88 1f       	adc	r24, r24
    2478:	bb 1f       	adc	r27, r27
    247a:	62 17       	cp	r22, r18
    247c:	73 07       	cpc	r23, r19
    247e:	84 07       	cpc	r24, r20
    2480:	ba 07       	cpc	r27, r26
    2482:	20 f0       	brcs	.+8      	; 0x248c <__divsf3_pse+0xaa>
    2484:	62 1b       	sub	r22, r18
    2486:	73 0b       	sbc	r23, r19
    2488:	84 0b       	sbc	r24, r20
    248a:	ba 0b       	sbc	r27, r26
    248c:	ee 1f       	adc	r30, r30
    248e:	88 f7       	brcc	.-30     	; 0x2472 <__divsf3_pse+0x90>
    2490:	e0 95       	com	r30
    2492:	08 95       	ret

00002494 <__fixsfsi>:
    2494:	04 d0       	rcall	.+8      	; 0x249e <__fixunssfsi>
    2496:	68 94       	set
    2498:	b1 11       	cpse	r27, r1
    249a:	b5 c0       	rjmp	.+362    	; 0x2606 <__fp_szero>
    249c:	08 95       	ret

0000249e <__fixunssfsi>:
    249e:	98 d0       	rcall	.+304    	; 0x25d0 <__fp_splitA>
    24a0:	88 f0       	brcs	.+34     	; 0x24c4 <__fixunssfsi+0x26>
    24a2:	9f 57       	subi	r25, 0x7F	; 127
    24a4:	90 f0       	brcs	.+36     	; 0x24ca <__fixunssfsi+0x2c>
    24a6:	b9 2f       	mov	r27, r25
    24a8:	99 27       	eor	r25, r25
    24aa:	b7 51       	subi	r27, 0x17	; 23
    24ac:	a0 f0       	brcs	.+40     	; 0x24d6 <__fixunssfsi+0x38>
    24ae:	d1 f0       	breq	.+52     	; 0x24e4 <__fixunssfsi+0x46>
    24b0:	66 0f       	add	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	88 1f       	adc	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	1a f0       	brmi	.+6      	; 0x24c0 <__fixunssfsi+0x22>
    24ba:	ba 95       	dec	r27
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <__fixunssfsi+0x12>
    24be:	12 c0       	rjmp	.+36     	; 0x24e4 <__fixunssfsi+0x46>
    24c0:	b1 30       	cpi	r27, 0x01	; 1
    24c2:	81 f0       	breq	.+32     	; 0x24e4 <__fixunssfsi+0x46>
    24c4:	9f d0       	rcall	.+318    	; 0x2604 <__fp_zero>
    24c6:	b1 e0       	ldi	r27, 0x01	; 1
    24c8:	08 95       	ret
    24ca:	9c c0       	rjmp	.+312    	; 0x2604 <__fp_zero>
    24cc:	67 2f       	mov	r22, r23
    24ce:	78 2f       	mov	r23, r24
    24d0:	88 27       	eor	r24, r24
    24d2:	b8 5f       	subi	r27, 0xF8	; 248
    24d4:	39 f0       	breq	.+14     	; 0x24e4 <__fixunssfsi+0x46>
    24d6:	b9 3f       	cpi	r27, 0xF9	; 249
    24d8:	cc f3       	brlt	.-14     	; 0x24cc <__fixunssfsi+0x2e>
    24da:	86 95       	lsr	r24
    24dc:	77 95       	ror	r23
    24de:	67 95       	ror	r22
    24e0:	b3 95       	inc	r27
    24e2:	d9 f7       	brne	.-10     	; 0x24da <__fixunssfsi+0x3c>
    24e4:	3e f4       	brtc	.+14     	; 0x24f4 <__fixunssfsi+0x56>
    24e6:	90 95       	com	r25
    24e8:	80 95       	com	r24
    24ea:	70 95       	com	r23
    24ec:	61 95       	neg	r22
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	8f 4f       	sbci	r24, 0xFF	; 255
    24f2:	9f 4f       	sbci	r25, 0xFF	; 255
    24f4:	08 95       	ret

000024f6 <__floatunsisf>:
    24f6:	e8 94       	clt
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <__floatsisf+0x12>

000024fa <__floatsisf>:
    24fa:	97 fb       	bst	r25, 7
    24fc:	3e f4       	brtc	.+14     	; 0x250c <__floatsisf+0x12>
    24fe:	90 95       	com	r25
    2500:	80 95       	com	r24
    2502:	70 95       	com	r23
    2504:	61 95       	neg	r22
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	8f 4f       	sbci	r24, 0xFF	; 255
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	99 23       	and	r25, r25
    250e:	a9 f0       	breq	.+42     	; 0x253a <__floatsisf+0x40>
    2510:	f9 2f       	mov	r31, r25
    2512:	96 e9       	ldi	r25, 0x96	; 150
    2514:	bb 27       	eor	r27, r27
    2516:	93 95       	inc	r25
    2518:	f6 95       	lsr	r31
    251a:	87 95       	ror	r24
    251c:	77 95       	ror	r23
    251e:	67 95       	ror	r22
    2520:	b7 95       	ror	r27
    2522:	f1 11       	cpse	r31, r1
    2524:	f8 cf       	rjmp	.-16     	; 0x2516 <__floatsisf+0x1c>
    2526:	fa f4       	brpl	.+62     	; 0x2566 <__floatsisf+0x6c>
    2528:	bb 0f       	add	r27, r27
    252a:	11 f4       	brne	.+4      	; 0x2530 <__floatsisf+0x36>
    252c:	60 ff       	sbrs	r22, 0
    252e:	1b c0       	rjmp	.+54     	; 0x2566 <__floatsisf+0x6c>
    2530:	6f 5f       	subi	r22, 0xFF	; 255
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	8f 4f       	sbci	r24, 0xFF	; 255
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	16 c0       	rjmp	.+44     	; 0x2566 <__floatsisf+0x6c>
    253a:	88 23       	and	r24, r24
    253c:	11 f0       	breq	.+4      	; 0x2542 <__floatsisf+0x48>
    253e:	96 e9       	ldi	r25, 0x96	; 150
    2540:	11 c0       	rjmp	.+34     	; 0x2564 <__floatsisf+0x6a>
    2542:	77 23       	and	r23, r23
    2544:	21 f0       	breq	.+8      	; 0x254e <__floatsisf+0x54>
    2546:	9e e8       	ldi	r25, 0x8E	; 142
    2548:	87 2f       	mov	r24, r23
    254a:	76 2f       	mov	r23, r22
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <__floatsisf+0x5e>
    254e:	66 23       	and	r22, r22
    2550:	71 f0       	breq	.+28     	; 0x256e <__floatsisf+0x74>
    2552:	96 e8       	ldi	r25, 0x86	; 134
    2554:	86 2f       	mov	r24, r22
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	2a f0       	brmi	.+10     	; 0x2566 <__floatsisf+0x6c>
    255c:	9a 95       	dec	r25
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	da f7       	brpl	.-10     	; 0x255c <__floatsisf+0x62>
    2566:	88 0f       	add	r24, r24
    2568:	96 95       	lsr	r25
    256a:	87 95       	ror	r24
    256c:	97 f9       	bld	r25, 7
    256e:	08 95       	ret

00002570 <__fp_inf>:
    2570:	97 f9       	bld	r25, 7
    2572:	9f 67       	ori	r25, 0x7F	; 127
    2574:	80 e8       	ldi	r24, 0x80	; 128
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	08 95       	ret

0000257c <__fp_nan>:
    257c:	9f ef       	ldi	r25, 0xFF	; 255
    257e:	80 ec       	ldi	r24, 0xC0	; 192
    2580:	08 95       	ret

00002582 <__fp_pscA>:
    2582:	00 24       	eor	r0, r0
    2584:	0a 94       	dec	r0
    2586:	16 16       	cp	r1, r22
    2588:	17 06       	cpc	r1, r23
    258a:	18 06       	cpc	r1, r24
    258c:	09 06       	cpc	r0, r25
    258e:	08 95       	ret

00002590 <__fp_pscB>:
    2590:	00 24       	eor	r0, r0
    2592:	0a 94       	dec	r0
    2594:	12 16       	cp	r1, r18
    2596:	13 06       	cpc	r1, r19
    2598:	14 06       	cpc	r1, r20
    259a:	05 06       	cpc	r0, r21
    259c:	08 95       	ret

0000259e <__fp_round>:
    259e:	09 2e       	mov	r0, r25
    25a0:	03 94       	inc	r0
    25a2:	00 0c       	add	r0, r0
    25a4:	11 f4       	brne	.+4      	; 0x25aa <__fp_round+0xc>
    25a6:	88 23       	and	r24, r24
    25a8:	52 f0       	brmi	.+20     	; 0x25be <__fp_round+0x20>
    25aa:	bb 0f       	add	r27, r27
    25ac:	40 f4       	brcc	.+16     	; 0x25be <__fp_round+0x20>
    25ae:	bf 2b       	or	r27, r31
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <__fp_round+0x18>
    25b2:	60 ff       	sbrs	r22, 0
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__fp_round+0x20>
    25b6:	6f 5f       	subi	r22, 0xFF	; 255
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	8f 4f       	sbci	r24, 0xFF	; 255
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	08 95       	ret

000025c0 <__fp_split3>:
    25c0:	57 fd       	sbrc	r21, 7
    25c2:	90 58       	subi	r25, 0x80	; 128
    25c4:	44 0f       	add	r20, r20
    25c6:	55 1f       	adc	r21, r21
    25c8:	59 f0       	breq	.+22     	; 0x25e0 <__fp_splitA+0x10>
    25ca:	5f 3f       	cpi	r21, 0xFF	; 255
    25cc:	71 f0       	breq	.+28     	; 0x25ea <__fp_splitA+0x1a>
    25ce:	47 95       	ror	r20

000025d0 <__fp_splitA>:
    25d0:	88 0f       	add	r24, r24
    25d2:	97 fb       	bst	r25, 7
    25d4:	99 1f       	adc	r25, r25
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <__fp_splitA+0x20>
    25d8:	9f 3f       	cpi	r25, 0xFF	; 255
    25da:	79 f0       	breq	.+30     	; 0x25fa <__fp_splitA+0x2a>
    25dc:	87 95       	ror	r24
    25de:	08 95       	ret
    25e0:	12 16       	cp	r1, r18
    25e2:	13 06       	cpc	r1, r19
    25e4:	14 06       	cpc	r1, r20
    25e6:	55 1f       	adc	r21, r21
    25e8:	f2 cf       	rjmp	.-28     	; 0x25ce <__fp_split3+0xe>
    25ea:	46 95       	lsr	r20
    25ec:	f1 df       	rcall	.-30     	; 0x25d0 <__fp_splitA>
    25ee:	08 c0       	rjmp	.+16     	; 0x2600 <__fp_splitA+0x30>
    25f0:	16 16       	cp	r1, r22
    25f2:	17 06       	cpc	r1, r23
    25f4:	18 06       	cpc	r1, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	f1 cf       	rjmp	.-30     	; 0x25dc <__fp_splitA+0xc>
    25fa:	86 95       	lsr	r24
    25fc:	71 05       	cpc	r23, r1
    25fe:	61 05       	cpc	r22, r1
    2600:	08 94       	sec
    2602:	08 95       	ret

00002604 <__fp_zero>:
    2604:	e8 94       	clt

00002606 <__fp_szero>:
    2606:	bb 27       	eor	r27, r27
    2608:	66 27       	eor	r22, r22
    260a:	77 27       	eor	r23, r23
    260c:	cb 01       	movw	r24, r22
    260e:	97 f9       	bld	r25, 7
    2610:	08 95       	ret

00002612 <__mulsf3>:
    2612:	0b d0       	rcall	.+22     	; 0x262a <__mulsf3x>
    2614:	c4 cf       	rjmp	.-120    	; 0x259e <__fp_round>
    2616:	b5 df       	rcall	.-150    	; 0x2582 <__fp_pscA>
    2618:	28 f0       	brcs	.+10     	; 0x2624 <__mulsf3+0x12>
    261a:	ba df       	rcall	.-140    	; 0x2590 <__fp_pscB>
    261c:	18 f0       	brcs	.+6      	; 0x2624 <__mulsf3+0x12>
    261e:	95 23       	and	r25, r21
    2620:	09 f0       	breq	.+2      	; 0x2624 <__mulsf3+0x12>
    2622:	a6 cf       	rjmp	.-180    	; 0x2570 <__fp_inf>
    2624:	ab cf       	rjmp	.-170    	; 0x257c <__fp_nan>
    2626:	11 24       	eor	r1, r1
    2628:	ee cf       	rjmp	.-36     	; 0x2606 <__fp_szero>

0000262a <__mulsf3x>:
    262a:	ca df       	rcall	.-108    	; 0x25c0 <__fp_split3>
    262c:	a0 f3       	brcs	.-24     	; 0x2616 <__mulsf3+0x4>

0000262e <__mulsf3_pse>:
    262e:	95 9f       	mul	r25, r21
    2630:	d1 f3       	breq	.-12     	; 0x2626 <__mulsf3+0x14>
    2632:	95 0f       	add	r25, r21
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	55 1f       	adc	r21, r21
    2638:	62 9f       	mul	r22, r18
    263a:	f0 01       	movw	r30, r0
    263c:	72 9f       	mul	r23, r18
    263e:	bb 27       	eor	r27, r27
    2640:	f0 0d       	add	r31, r0
    2642:	b1 1d       	adc	r27, r1
    2644:	63 9f       	mul	r22, r19
    2646:	aa 27       	eor	r26, r26
    2648:	f0 0d       	add	r31, r0
    264a:	b1 1d       	adc	r27, r1
    264c:	aa 1f       	adc	r26, r26
    264e:	64 9f       	mul	r22, r20
    2650:	66 27       	eor	r22, r22
    2652:	b0 0d       	add	r27, r0
    2654:	a1 1d       	adc	r26, r1
    2656:	66 1f       	adc	r22, r22
    2658:	82 9f       	mul	r24, r18
    265a:	22 27       	eor	r18, r18
    265c:	b0 0d       	add	r27, r0
    265e:	a1 1d       	adc	r26, r1
    2660:	62 1f       	adc	r22, r18
    2662:	73 9f       	mul	r23, r19
    2664:	b0 0d       	add	r27, r0
    2666:	a1 1d       	adc	r26, r1
    2668:	62 1f       	adc	r22, r18
    266a:	83 9f       	mul	r24, r19
    266c:	a0 0d       	add	r26, r0
    266e:	61 1d       	adc	r22, r1
    2670:	22 1f       	adc	r18, r18
    2672:	74 9f       	mul	r23, r20
    2674:	33 27       	eor	r19, r19
    2676:	a0 0d       	add	r26, r0
    2678:	61 1d       	adc	r22, r1
    267a:	23 1f       	adc	r18, r19
    267c:	84 9f       	mul	r24, r20
    267e:	60 0d       	add	r22, r0
    2680:	21 1d       	adc	r18, r1
    2682:	82 2f       	mov	r24, r18
    2684:	76 2f       	mov	r23, r22
    2686:	6a 2f       	mov	r22, r26
    2688:	11 24       	eor	r1, r1
    268a:	9f 57       	subi	r25, 0x7F	; 127
    268c:	50 40       	sbci	r21, 0x00	; 0
    268e:	8a f0       	brmi	.+34     	; 0x26b2 <__mulsf3_pse+0x84>
    2690:	e1 f0       	breq	.+56     	; 0x26ca <__mulsf3_pse+0x9c>
    2692:	88 23       	and	r24, r24
    2694:	4a f0       	brmi	.+18     	; 0x26a8 <__mulsf3_pse+0x7a>
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	bb 1f       	adc	r27, r27
    269c:	66 1f       	adc	r22, r22
    269e:	77 1f       	adc	r23, r23
    26a0:	88 1f       	adc	r24, r24
    26a2:	91 50       	subi	r25, 0x01	; 1
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	a9 f7       	brne	.-22     	; 0x2692 <__mulsf3_pse+0x64>
    26a8:	9e 3f       	cpi	r25, 0xFE	; 254
    26aa:	51 05       	cpc	r21, r1
    26ac:	70 f0       	brcs	.+28     	; 0x26ca <__mulsf3_pse+0x9c>
    26ae:	60 cf       	rjmp	.-320    	; 0x2570 <__fp_inf>
    26b0:	aa cf       	rjmp	.-172    	; 0x2606 <__fp_szero>
    26b2:	5f 3f       	cpi	r21, 0xFF	; 255
    26b4:	ec f3       	brlt	.-6      	; 0x26b0 <__mulsf3_pse+0x82>
    26b6:	98 3e       	cpi	r25, 0xE8	; 232
    26b8:	dc f3       	brlt	.-10     	; 0x26b0 <__mulsf3_pse+0x82>
    26ba:	86 95       	lsr	r24
    26bc:	77 95       	ror	r23
    26be:	67 95       	ror	r22
    26c0:	b7 95       	ror	r27
    26c2:	f7 95       	ror	r31
    26c4:	e7 95       	ror	r30
    26c6:	9f 5f       	subi	r25, 0xFF	; 255
    26c8:	c1 f7       	brne	.-16     	; 0x26ba <__mulsf3_pse+0x8c>
    26ca:	fe 2b       	or	r31, r30
    26cc:	88 0f       	add	r24, r24
    26ce:	91 1d       	adc	r25, r1
    26d0:	96 95       	lsr	r25
    26d2:	87 95       	ror	r24
    26d4:	97 f9       	bld	r25, 7
    26d6:	08 95       	ret

000026d8 <__divmodhi4>:
    26d8:	97 fb       	bst	r25, 7
    26da:	07 2e       	mov	r0, r23
    26dc:	16 f4       	brtc	.+4      	; 0x26e2 <__divmodhi4+0xa>
    26de:	00 94       	com	r0
    26e0:	06 d0       	rcall	.+12     	; 0x26ee <__divmodhi4_neg1>
    26e2:	77 fd       	sbrc	r23, 7
    26e4:	08 d0       	rcall	.+16     	; 0x26f6 <__divmodhi4_neg2>
    26e6:	11 d0       	rcall	.+34     	; 0x270a <__udivmodhi4>
    26e8:	07 fc       	sbrc	r0, 7
    26ea:	05 d0       	rcall	.+10     	; 0x26f6 <__divmodhi4_neg2>
    26ec:	3e f4       	brtc	.+14     	; 0x26fc <__divmodhi4_exit>

000026ee <__divmodhi4_neg1>:
    26ee:	90 95       	com	r25
    26f0:	81 95       	neg	r24
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	08 95       	ret

000026f6 <__divmodhi4_neg2>:
    26f6:	70 95       	com	r23
    26f8:	61 95       	neg	r22
    26fa:	7f 4f       	sbci	r23, 0xFF	; 255

000026fc <__divmodhi4_exit>:
    26fc:	08 95       	ret

000026fe <__mulshisi3>:
    26fe:	b7 ff       	sbrs	r27, 7
    2700:	18 c0       	rjmp	.+48     	; 0x2732 <__muluhisi3>

00002702 <__mulohisi3>:
    2702:	17 d0       	rcall	.+46     	; 0x2732 <__muluhisi3>
    2704:	82 1b       	sub	r24, r18
    2706:	93 0b       	sbc	r25, r19
    2708:	08 95       	ret

0000270a <__udivmodhi4>:
    270a:	aa 1b       	sub	r26, r26
    270c:	bb 1b       	sub	r27, r27
    270e:	51 e1       	ldi	r21, 0x11	; 17
    2710:	07 c0       	rjmp	.+14     	; 0x2720 <__udivmodhi4_ep>

00002712 <__udivmodhi4_loop>:
    2712:	aa 1f       	adc	r26, r26
    2714:	bb 1f       	adc	r27, r27
    2716:	a6 17       	cp	r26, r22
    2718:	b7 07       	cpc	r27, r23
    271a:	10 f0       	brcs	.+4      	; 0x2720 <__udivmodhi4_ep>
    271c:	a6 1b       	sub	r26, r22
    271e:	b7 0b       	sbc	r27, r23

00002720 <__udivmodhi4_ep>:
    2720:	88 1f       	adc	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	5a 95       	dec	r21
    2726:	a9 f7       	brne	.-22     	; 0x2712 <__udivmodhi4_loop>
    2728:	80 95       	com	r24
    272a:	90 95       	com	r25
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	08 95       	ret

00002732 <__muluhisi3>:
    2732:	09 d0       	rcall	.+18     	; 0x2746 <__umulhisi3>
    2734:	a5 9f       	mul	r26, r21
    2736:	90 0d       	add	r25, r0
    2738:	b4 9f       	mul	r27, r20
    273a:	90 0d       	add	r25, r0
    273c:	a4 9f       	mul	r26, r20
    273e:	80 0d       	add	r24, r0
    2740:	91 1d       	adc	r25, r1
    2742:	11 24       	eor	r1, r1
    2744:	08 95       	ret

00002746 <__umulhisi3>:
    2746:	a2 9f       	mul	r26, r18
    2748:	b0 01       	movw	r22, r0
    274a:	b3 9f       	mul	r27, r19
    274c:	c0 01       	movw	r24, r0
    274e:	a3 9f       	mul	r26, r19
    2750:	70 0d       	add	r23, r0
    2752:	81 1d       	adc	r24, r1
    2754:	11 24       	eor	r1, r1
    2756:	91 1d       	adc	r25, r1
    2758:	b2 9f       	mul	r27, r18
    275a:	70 0d       	add	r23, r0
    275c:	81 1d       	adc	r24, r1
    275e:	11 24       	eor	r1, r1
    2760:	91 1d       	adc	r25, r1
    2762:	08 95       	ret

00002764 <strcpy>:
    2764:	fb 01       	movw	r30, r22
    2766:	dc 01       	movw	r26, r24
    2768:	01 90       	ld	r0, Z+
    276a:	0d 92       	st	X+, r0
    276c:	00 20       	and	r0, r0
    276e:	e1 f7       	brne	.-8      	; 0x2768 <strcpy+0x4>
    2770:	08 95       	ret

00002772 <_exit>:
    2772:	f8 94       	cli

00002774 <__stop_program>:
    2774:	ff cf       	rjmp	.-2      	; 0x2774 <__stop_program>
