
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  0000201e  000020b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000201e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001fe  008001fe  000021b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020b7  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a6  00000000  00000000  00004407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000206c  00000000  00000000  00004cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a8  00000000  00000000  00006d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010b84  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000122e  00000000  00000000  00017d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00018f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000388b  00000000  00000000  000190b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e1       	ldi	r30, 0x1E	; 30
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3f       	cpi	r26, 0xFE	; 254
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae ef       	ldi	r26, 0xFE	; 254
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3c       	cpi	r26, 0xC3	; 195
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 df 0c 	call	0x19be	; 0x19be <main>
      c6:	0c 94 0d 10 	jmp	0x201a	; 0x201a <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
* Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
* Output: speed, (PWM counter)
*/
void FLC_steering(int c, int s, int v)

{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c8 59       	subi	r28, 0x98	; 152
      f6:	d2 40       	sbci	r29, 0x02	; 2
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
	struct io_type delta_C;
	struct io_type steering;
	struct io_type delta_V;
	
	// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     102:	99 23       	and	r25, r25
     104:	1c f4       	brge	.+6      	; 0x10c <FLC_steering+0x40>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     106:	1c 86       	std	Y+12, r1	; 0x0c
     108:	1b 86       	std	Y+11, r1	; 0x0b
     10a:	0a c0       	rjmp	.+20     	; 0x120 <FLC_steering+0x54>
	}
	else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     10c:	8e 3c       	cpi	r24, 0xCE	; 206
     10e:	91 05       	cpc	r25, r1
     110:	2c f0       	brlt	.+10     	; 0x11c <FLC_steering+0x50>
	{
		delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     112:	8d ec       	ldi	r24, 0xCD	; 205
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9c 87       	std	Y+12, r25	; 0x0c
     118:	8b 87       	std	Y+11, r24	; 0x0b
     11a:	02 c0       	rjmp	.+4      	; 0x120 <FLC_steering+0x54>
	}
	else
	{
		delta_C.value = c;
     11c:	9c 87       	std	Y+12, r25	; 0x0c
     11e:	8b 87       	std	Y+11, r24	; 0x0b
	}
	// set iAng's input value to measAng value
	if(s<2260)				// if sensor value is smaller than error's input set lower limit
     120:	64 3d       	cpi	r22, 0xD4	; 212
     122:	08 e0       	ldi	r16, 0x08	; 8
     124:	70 07       	cpc	r23, r16
     126:	2c f4       	brge	.+10     	; 0x132 <FLC_steering+0x66>
	{
		steering.value = 2260;  // force input value to lowest point in delta_C's input set
     128:	84 ed       	ldi	r24, 0xD4	; 212
     12a:	98 e0       	ldi	r25, 0x08	; 8
     12c:	9c 8f       	std	Y+28, r25	; 0x1c
     12e:	8b 8f       	std	Y+27, r24	; 0x1b
     130:	0b c0       	rjmp	.+22     	; 0x148 <FLC_steering+0x7c>
	}
	else if(s>3060)			// if sensor value is bigger than error's input set's upper limit
     132:	65 3f       	cpi	r22, 0xF5	; 245
     134:	1b e0       	ldi	r17, 0x0B	; 11
     136:	71 07       	cpc	r23, r17
     138:	2c f0       	brlt	.+10     	; 0x144 <FLC_steering+0x78>
	{
		steering.value = 3060;  // force input value to lowest point in error's input set
     13a:	84 ef       	ldi	r24, 0xF4	; 244
     13c:	9b e0       	ldi	r25, 0x0B	; 11
     13e:	9c 8f       	std	Y+28, r25	; 0x1c
     140:	8b 8f       	std	Y+27, r24	; 0x1b
     142:	02 c0       	rjmp	.+4      	; 0x148 <FLC_steering+0x7c>
	}
	else
	{
		steering.value = s;
     144:	7c 8f       	std	Y+28, r23	; 0x1c
     146:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// set V's input value to VÂ´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
     148:	55 23       	and	r21, r21
     14a:	1c f4       	brge	.+6      	; 0x152 <FLC_steering+0x86>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     14c:	1c a6       	std	Y+44, r1	; 0x2c
     14e:	1b a6       	std	Y+43, r1	; 0x2b
     150:	0a c0       	rjmp	.+20     	; 0x166 <FLC_steering+0x9a>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     152:	41 35       	cpi	r20, 0x51	; 81
     154:	51 05       	cpc	r21, r1
     156:	2c f0       	brlt	.+10     	; 0x162 <FLC_steering+0x96>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
     158:	80 e5       	ldi	r24, 0x50	; 80
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	9c a7       	std	Y+44, r25	; 0x2c
     15e:	8b a7       	std	Y+43, r24	; 0x2b
     160:	02 c0       	rjmp	.+4      	; 0x166 <FLC_steering+0x9a>
	}
	else
	{
		delta_V.value = v;
     162:	5c a7       	std	Y+44, r21	; 0x2c
     164:	4b a7       	std	Y+43, r20	; 0x2b
	}
	
	
	// DECLARATION OF C INPUT INPUT 1
	//struct io_type delta_C;
	strcpy(delta_C.name, "delta_C");
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	e0 e0       	ldi	r30, 0x00	; 0
     16a:	f1 e0       	ldi	r31, 0x01	; 1
     16c:	de 01       	movw	r26, r28
     16e:	11 96       	adiw	r26, 0x01	; 1
     170:	01 90       	ld	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	8a 95       	dec	r24
     176:	e1 f7       	brne	.-8      	; 0x170 <FLC_steering+0xa4>
	//MFs
	struct mf_type negative;
	strcpy(negative.name, "negative");
     178:	9e 01       	movw	r18, r28
     17a:	2f 5c       	subi	r18, 0xCF	; 207
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	89 e0       	ldi	r24, 0x09	; 9
     180:	e8 e0       	ldi	r30, 0x08	; 8
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	d9 01       	movw	r26, r18
     186:	01 90       	ld	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	8a 95       	dec	r24
     18c:	e1 f7       	brne	.-8      	; 0x186 <FLC_steering+0xba>
	negative.value = 0;
     18e:	1c ae       	std	Y+60, r1	; 0x3c
     190:	1b ae       	std	Y+59, r1	; 0x3b
	negative.point1 = 44;
     192:	8c e2       	ldi	r24, 0x2C	; 44
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	9e af       	std	Y+62, r25	; 0x3e
     198:	8d af       	std	Y+61, r24	; 0x3d
	negative.point2= 110;
     19a:	8e e6       	ldi	r24, 0x6E	; 110
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	21 96       	adiw	r28, 0x01	; 1
     1a0:	9f af       	std	Y+63, r25	; 0x3f
     1a2:	8e af       	std	Y+62, r24	; 0x3e
     1a4:	21 97       	sbiw	r28, 0x01	; 1
	negative.slope1 = 100;
     1a6:	44 e6       	ldi	r20, 0x64	; 100
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	23 96       	adiw	r28, 0x03	; 3
     1ac:	5f af       	std	Y+63, r21	; 0x3f
     1ae:	4e af       	std	Y+62, r20	; 0x3e
     1b0:	23 97       	sbiw	r28, 0x03	; 3
	negative.slope2 = 2;
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	25 96       	adiw	r28, 0x05	; 5
     1b8:	9f af       	std	Y+63, r25	; 0x3f
     1ba:	8e af       	std	Y+62, r24	; 0x3e
     1bc:	25 97       	sbiw	r28, 0x05	; 5
	struct mf_type zer;
	strcpy(zer.name, "zer");
     1be:	4a e7       	ldi	r20, 0x7A	; 122
     1c0:	55 e6       	ldi	r21, 0x65	; 101
     1c2:	62 e7       	ldi	r22, 0x72	; 114
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	2b 96       	adiw	r28, 0x0b	; 11
     1c8:	4c af       	std	Y+60, r20	; 0x3c
     1ca:	5d af       	std	Y+61, r21	; 0x3d
     1cc:	6e af       	std	Y+62, r22	; 0x3e
     1ce:	7f af       	std	Y+63, r23	; 0x3f
     1d0:	2b 97       	sbiw	r28, 0x0b	; 11
	zer.value = 0;
     1d2:	63 96       	adiw	r28, 0x13	; 19
     1d4:	1f ae       	std	Y+63, r1	; 0x3f
     1d6:	1e ae       	std	Y+62, r1	; 0x3e
     1d8:	63 97       	sbiw	r28, 0x13	; 19
	zer.point1 = 75;
     1da:	4b e4       	ldi	r20, 0x4B	; 75
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	65 96       	adiw	r28, 0x15	; 21
     1e0:	5f af       	std	Y+63, r21	; 0x3f
     1e2:	4e af       	std	Y+62, r20	; 0x3e
     1e4:	65 97       	sbiw	r28, 0x15	; 21
	zer.point2= 175;
     1e6:	4f ea       	ldi	r20, 0xAF	; 175
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	67 96       	adiw	r28, 0x17	; 23
     1ec:	5f af       	std	Y+63, r21	; 0x3f
     1ee:	4e af       	std	Y+62, r20	; 0x3e
     1f0:	67 97       	sbiw	r28, 0x17	; 23
	zer.slope1 = 2;
     1f2:	69 96       	adiw	r28, 0x19	; 25
     1f4:	9f af       	std	Y+63, r25	; 0x3f
     1f6:	8e af       	std	Y+62, r24	; 0x3e
     1f8:	69 97       	sbiw	r28, 0x19	; 25
	zer.slope2 = 2;
     1fa:	6b 96       	adiw	r28, 0x1b	; 27
     1fc:	9f af       	std	Y+63, r25	; 0x3f
     1fe:	8e af       	std	Y+62, r24	; 0x3e
     200:	6b 97       	sbiw	r28, 0x1b	; 27
	struct mf_type positive;
	strcpy(positive.name, "positive");
     202:	49 e0       	ldi	r20, 0x09	; 9
     204:	e1 e1       	ldi	r30, 0x11	; 17
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	de 01       	movw	r26, r28
     20a:	a3 5a       	subi	r26, 0xA3	; 163
     20c:	bf 4f       	sbci	r27, 0xFF	; 255
     20e:	01 90       	ld	r0, Z+
     210:	0d 92       	st	X+, r0
     212:	4a 95       	dec	r20
     214:	e1 f7       	brne	.-8      	; 0x20e <FLC_steering+0x142>
	positive.value = 0;
     216:	a9 96       	adiw	r28, 0x29	; 41
     218:	1f ae       	std	Y+63, r1	; 0x3f
     21a:	1e ae       	std	Y+62, r1	; 0x3e
     21c:	a9 97       	sbiw	r28, 0x29	; 41
	positive.point1 = 140;
     21e:	4c e8       	ldi	r20, 0x8C	; 140
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	ab 96       	adiw	r28, 0x2b	; 43
     224:	5f af       	std	Y+63, r21	; 0x3f
     226:	4e af       	std	Y+62, r20	; 0x3e
     228:	ab 97       	sbiw	r28, 0x2b	; 43
	positive.point2= 206;
     22a:	4e ec       	ldi	r20, 0xCE	; 206
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	ad 96       	adiw	r28, 0x2d	; 45
     230:	5f af       	std	Y+63, r21	; 0x3f
     232:	4e af       	std	Y+62, r20	; 0x3e
     234:	ad 97       	sbiw	r28, 0x2d	; 45
	positive.slope1 = 2;
     236:	af 96       	adiw	r28, 0x2f	; 47
     238:	9f af       	std	Y+63, r25	; 0x3f
     23a:	8e af       	std	Y+62, r24	; 0x3e
     23c:	af 97       	sbiw	r28, 0x2f	; 47
	positive.slope2 = 100;
     23e:	64 e6       	ldi	r22, 0x64	; 100
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	e1 96       	adiw	r28, 0x31	; 49
     244:	7f af       	std	Y+63, r23	; 0x3f
     246:	6e af       	std	Y+62, r22	; 0x3e
     248:	e1 97       	sbiw	r28, 0x31	; 49

	delta_C.membership_functions = &negative;
     24a:	3e 87       	std	Y+14, r19	; 0x0e
     24c:	2d 87       	std	Y+13, r18	; 0x0d
	negative.next = &zer;
     24e:	87 e4       	ldi	r24, 0x47	; 71
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	8c 0f       	add	r24, r28
     254:	9d 1f       	adc	r25, r29
     256:	27 96       	adiw	r28, 0x07	; 7
     258:	9f af       	std	Y+63, r25	; 0x3f
     25a:	8e af       	std	Y+62, r24	; 0x3e
     25c:	27 97       	sbiw	r28, 0x07	; 7
	zer.next = &positive;
     25e:	ad e5       	ldi	r26, 0x5D	; 93
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	ac 0f       	add	r26, r28
     264:	bd 1f       	adc	r27, r29
     266:	6d 96       	adiw	r28, 0x1d	; 29
     268:	bf af       	std	Y+63, r27	; 0x3f
     26a:	ae af       	std	Y+62, r26	; 0x3e
     26c:	6d 97       	sbiw	r28, 0x1d	; 29
	positive.next = NULL;
     26e:	e3 96       	adiw	r28, 0x33	; 51
     270:	1f ae       	std	Y+63, r1	; 0x3f
     272:	1e ae       	std	Y+62, r1	; 0x3e
     274:	e3 97       	sbiw	r28, 0x33	; 51
	
	// DECLARATION OF STEERING INPUT (2)
	
	strcpy(steering.name, "steering");
     276:	89 e0       	ldi	r24, 0x09	; 9
     278:	ea e1       	ldi	r30, 0x1A	; 26
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	ac 54       	subi	r26, 0x4C	; 76
     27e:	b1 09       	sbc	r27, r1
     280:	01 90       	ld	r0, Z+
     282:	0d 92       	st	X+, r0
     284:	8a 95       	dec	r24
     286:	e1 f7       	brne	.-8      	; 0x280 <FLC_steering+0x1b4>
	
	//MFs
	struct mf_type inShRight;
	strcpy(inShRight.name, "inShRight");
     288:	8a e0       	ldi	r24, 0x0A	; 10
     28a:	e5 e9       	ldi	r30, 0x95	; 149
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	de 01       	movw	r26, r28
     290:	ad 58       	subi	r26, 0x8D	; 141
     292:	bf 4f       	sbci	r27, 0xFF	; 255
     294:	01 90       	ld	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	8a 95       	dec	r24
     29a:	e1 f7       	brne	.-8      	; 0x294 <FLC_steering+0x1c8>
	inShRight.value = 0;
     29c:	ef 96       	adiw	r28, 0x3f	; 63
     29e:	1f ae       	std	Y+63, r1	; 0x3f
     2a0:	1e ae       	std	Y+62, r1	; 0x3e
     2a2:	ef 97       	sbiw	r28, 0x3f	; 63
	inShRight.point1 = 2259;
     2a4:	e3 ed       	ldi	r30, 0xD3	; 211
     2a6:	f8 e0       	ldi	r31, 0x08	; 8
     2a8:	c1 58       	subi	r28, 0x81	; 129
     2aa:	df 4f       	sbci	r29, 0xFF	; 255
     2ac:	f9 83       	std	Y+1, r31	; 0x01
     2ae:	e8 83       	st	Y, r30
     2b0:	cf 57       	subi	r28, 0x7F	; 127
     2b2:	d0 40       	sbci	r29, 0x00	; 0
	inShRight.point2= 2400;
     2b4:	0f 2e       	mov	r0, r31
     2b6:	f0 e6       	ldi	r31, 0x60	; 96
     2b8:	4f 2e       	mov	r4, r31
     2ba:	f9 e0       	ldi	r31, 0x09	; 9
     2bc:	5f 2e       	mov	r5, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	cf 57       	subi	r28, 0x7F	; 127
     2c2:	df 4f       	sbci	r29, 0xFF	; 255
     2c4:	59 82       	std	Y+1, r5	; 0x01
     2c6:	48 82       	st	Y, r4
     2c8:	c1 58       	subi	r28, 0x81	; 129
     2ca:	d0 40       	sbci	r29, 0x00	; 0
	inShRight.slope1 = 100;
     2cc:	cd 57       	subi	r28, 0x7D	; 125
     2ce:	df 4f       	sbci	r29, 0xFF	; 255
     2d0:	79 83       	std	Y+1, r23	; 0x01
     2d2:	68 83       	st	Y, r22
     2d4:	c3 58       	subi	r28, 0x83	; 131
     2d6:	d0 40       	sbci	r29, 0x00	; 0
	inShRight.slope2 = 1;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	cb 57       	subi	r28, 0x7B	; 123
     2de:	df 4f       	sbci	r29, 0xFF	; 255
     2e0:	99 83       	std	Y+1, r25	; 0x01
     2e2:	88 83       	st	Y, r24
     2e4:	c5 58       	subi	r28, 0x85	; 133
     2e6:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type inRight;
	strcpy(inRight.name, "inRight");
     2e8:	4e 01       	movw	r8, r28
     2ea:	f9 e8       	ldi	r31, 0x89	; 137
     2ec:	8f 0e       	add	r8, r31
     2ee:	91 1c       	adc	r9, r1
     2f0:	28 e0       	ldi	r18, 0x08	; 8
     2f2:	e3 e2       	ldi	r30, 0x23	; 35
     2f4:	f1 e0       	ldi	r31, 0x01	; 1
     2f6:	d4 01       	movw	r26, r8
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	2a 95       	dec	r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <FLC_steering+0x22c>
	inRight.value = 0;
     300:	d4 01       	movw	r26, r8
     302:	1b 96       	adiw	r26, 0x0b	; 11
     304:	1c 92       	st	X, r1
     306:	1e 92       	st	-X, r1
     308:	1a 97       	sbiw	r26, 0x0a	; 10
	inRight.point1 = 2300;
     30a:	2c ef       	ldi	r18, 0xFC	; 252
     30c:	38 e0       	ldi	r19, 0x08	; 8
     30e:	1d 96       	adiw	r26, 0x0d	; 13
     310:	3c 93       	st	X, r19
     312:	2e 93       	st	-X, r18
     314:	1c 97       	sbiw	r26, 0x0c	; 12
	inRight.point2= 2580;
     316:	24 e1       	ldi	r18, 0x14	; 20
     318:	3a e0       	ldi	r19, 0x0A	; 10
     31a:	1f 96       	adiw	r26, 0x0f	; 15
     31c:	3c 93       	st	X, r19
     31e:	2e 93       	st	-X, r18
     320:	1e 97       	sbiw	r26, 0x0e	; 14
	inRight.slope1 = 1;
     322:	51 96       	adiw	r26, 0x11	; 17
     324:	9c 93       	st	X, r25
     326:	8e 93       	st	-X, r24
     328:	50 97       	sbiw	r26, 0x10	; 16
	inRight.slope2 = 1;
     32a:	53 96       	adiw	r26, 0x13	; 19
     32c:	9c 93       	st	X, r25
     32e:	8e 93       	st	-X, r24
     330:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inStraight;
	strcpy(inStraight.name, "inStraight");
     332:	2b e0       	ldi	r18, 0x0B	; 11
     334:	eb e2       	ldi	r30, 0x2B	; 43
     336:	f1 e0       	ldi	r31, 0x01	; 1
     338:	56 96       	adiw	r26, 0x16	; 22
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	2a 95       	dec	r18
     340:	e1 f7       	brne	.-8      	; 0x33a <FLC_steering+0x26e>
	inStraight.value = 0;
     342:	c7 55       	subi	r28, 0x57	; 87
     344:	df 4f       	sbci	r29, 0xFF	; 255
     346:	19 82       	std	Y+1, r1	; 0x01
     348:	18 82       	st	Y, r1
     34a:	c9 5a       	subi	r28, 0xA9	; 169
     34c:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.point1 = 2480;
     34e:	e0 eb       	ldi	r30, 0xB0	; 176
     350:	f9 e0       	ldi	r31, 0x09	; 9
     352:	c5 55       	subi	r28, 0x55	; 85
     354:	df 4f       	sbci	r29, 0xFF	; 255
     356:	f9 83       	std	Y+1, r31	; 0x01
     358:	e8 83       	st	Y, r30
     35a:	cb 5a       	subi	r28, 0xAB	; 171
     35c:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.point2= 2840;
     35e:	08 e1       	ldi	r16, 0x18	; 24
     360:	1b e0       	ldi	r17, 0x0B	; 11
     362:	c3 55       	subi	r28, 0x53	; 83
     364:	df 4f       	sbci	r29, 0xFF	; 255
     366:	19 83       	std	Y+1, r17	; 0x01
     368:	08 83       	st	Y, r16
     36a:	cd 5a       	subi	r28, 0xAD	; 173
     36c:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.slope1 = 1;
     36e:	c1 55       	subi	r28, 0x51	; 81
     370:	df 4f       	sbci	r29, 0xFF	; 255
     372:	99 83       	std	Y+1, r25	; 0x01
     374:	88 83       	st	Y, r24
     376:	cf 5a       	subi	r28, 0xAF	; 175
     378:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.slope2 = 1;
     37a:	cf 54       	subi	r28, 0x4F	; 79
     37c:	df 4f       	sbci	r29, 0xFF	; 255
     37e:	99 83       	std	Y+1, r25	; 0x01
     380:	88 83       	st	Y, r24
     382:	c1 5b       	subi	r28, 0xB1	; 177
     384:	d0 40       	sbci	r29, 0x00	; 0

	struct mf_type inLeft;
	strcpy(inLeft.name, "inLeft");
     386:	27 e0       	ldi	r18, 0x07	; 7
     388:	e6 e3       	ldi	r30, 0x36	; 54
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	de 01       	movw	r26, r28
     38e:	ab 54       	subi	r26, 0x4B	; 75
     390:	bf 4f       	sbci	r27, 0xFF	; 255
     392:	01 90       	ld	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	2a 95       	dec	r18
     398:	e1 f7       	brne	.-8      	; 0x392 <FLC_steering+0x2c6>
	inLeft.value = 0;
     39a:	c1 54       	subi	r28, 0x41	; 65
     39c:	df 4f       	sbci	r29, 0xFF	; 255
     39e:	19 82       	std	Y+1, r1	; 0x01
     3a0:	18 82       	st	Y, r1
     3a2:	cf 5b       	subi	r28, 0xBF	; 191
     3a4:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.point1 = 2740;
     3a6:	24 eb       	ldi	r18, 0xB4	; 180
     3a8:	3a e0       	ldi	r19, 0x0A	; 10
     3aa:	cf 53       	subi	r28, 0x3F	; 63
     3ac:	df 4f       	sbci	r29, 0xFF	; 255
     3ae:	39 83       	std	Y+1, r19	; 0x01
     3b0:	28 83       	st	Y, r18
     3b2:	c1 5c       	subi	r28, 0xC1	; 193
     3b4:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.point2= 3020;
     3b6:	2c ec       	ldi	r18, 0xCC	; 204
     3b8:	3b e0       	ldi	r19, 0x0B	; 11
     3ba:	cd 53       	subi	r28, 0x3D	; 61
     3bc:	df 4f       	sbci	r29, 0xFF	; 255
     3be:	39 83       	std	Y+1, r19	; 0x01
     3c0:	28 83       	st	Y, r18
     3c2:	c3 5c       	subi	r28, 0xC3	; 195
     3c4:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.slope1 = 1;
     3c6:	cb 53       	subi	r28, 0x3B	; 59
     3c8:	df 4f       	sbci	r29, 0xFF	; 255
     3ca:	99 83       	std	Y+1, r25	; 0x01
     3cc:	88 83       	st	Y, r24
     3ce:	c5 5c       	subi	r28, 0xC5	; 197
     3d0:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.slope2 = 1;
     3d2:	c9 53       	subi	r28, 0x39	; 57
     3d4:	df 4f       	sbci	r29, 0xFF	; 255
     3d6:	99 83       	std	Y+1, r25	; 0x01
     3d8:	88 83       	st	Y, r24
     3da:	c7 5c       	subi	r28, 0xC7	; 199
     3dc:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type inShLeft;
	strcpy(inShLeft.name, "inShLeft");
     3de:	9e 01       	movw	r18, r28
     3e0:	25 53       	subi	r18, 0x35	; 53
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	49 e0       	ldi	r20, 0x09	; 9
     3e6:	ed e3       	ldi	r30, 0x3D	; 61
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	d9 01       	movw	r26, r18
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	4a 95       	dec	r20
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <FLC_steering+0x320>
	inShLeft.value = 0;
     3f4:	d9 01       	movw	r26, r18
     3f6:	1b 96       	adiw	r26, 0x0b	; 11
     3f8:	1c 92       	st	X, r1
     3fa:	1e 92       	st	-X, r1
     3fc:	1a 97       	sbiw	r26, 0x0a	; 10
	inShLeft.point1 = 2920;
     3fe:	0f 2e       	mov	r0, r31
     400:	f8 e6       	ldi	r31, 0x68	; 104
     402:	af 2e       	mov	r10, r31
     404:	fb e0       	ldi	r31, 0x0B	; 11
     406:	bf 2e       	mov	r11, r31
     408:	f0 2d       	mov	r31, r0
     40a:	1d 96       	adiw	r26, 0x0d	; 13
     40c:	bc 92       	st	X, r11
     40e:	ae 92       	st	-X, r10
     410:	1c 97       	sbiw	r26, 0x0c	; 12
	inShLeft.point2= 3061;
     412:	65 ef       	ldi	r22, 0xF5	; 245
     414:	7b e0       	ldi	r23, 0x0B	; 11
     416:	1f 96       	adiw	r26, 0x0f	; 15
     418:	7c 93       	st	X, r23
     41a:	6e 93       	st	-X, r22
     41c:	1e 97       	sbiw	r26, 0x0e	; 14
	inShLeft.slope1 = 1;
     41e:	51 96       	adiw	r26, 0x11	; 17
     420:	9c 93       	st	X, r25
     422:	8e 93       	st	-X, r24
     424:	50 97       	sbiw	r26, 0x10	; 16
	inShLeft.slope2 = 100;
     426:	e4 e6       	ldi	r30, 0x64	; 100
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	53 96       	adiw	r26, 0x13	; 19
     42c:	fc 93       	st	X, r31
     42e:	ee 93       	st	-X, r30
     430:	52 97       	sbiw	r26, 0x12	; 18

	steering.membership_functions = &inShRight;
     432:	43 e7       	ldi	r20, 0x73	; 115
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	4c 0f       	add	r20, r28
     438:	5d 1f       	adc	r21, r29
     43a:	5e 8f       	std	Y+30, r21	; 0x1e
     43c:	4d 8f       	std	Y+29, r20	; 0x1d
	inShRight.next = &inRight;
     43e:	c9 57       	subi	r28, 0x79	; 121
     440:	df 4f       	sbci	r29, 0xFF	; 255
     442:	99 82       	std	Y+1, r9	; 0x01
     444:	88 82       	st	Y, r8
     446:	c7 58       	subi	r28, 0x87	; 135
     448:	d0 40       	sbci	r29, 0x00	; 0
	inRight.next = &inStraight;
     44a:	ef e9       	ldi	r30, 0x9F	; 159
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ec 0f       	add	r30, r28
     450:	fd 1f       	adc	r31, r29
     452:	d4 01       	movw	r26, r8
     454:	55 96       	adiw	r26, 0x15	; 21
     456:	fc 93       	st	X, r31
     458:	ee 93       	st	-X, r30
     45a:	54 97       	sbiw	r26, 0x14	; 20
	inStraight.next = &inLeft;
     45c:	45 eb       	ldi	r20, 0xB5	; 181
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	4c 0f       	add	r20, r28
     462:	5d 1f       	adc	r21, r29
     464:	cd 54       	subi	r28, 0x4D	; 77
     466:	df 4f       	sbci	r29, 0xFF	; 255
     468:	59 83       	std	Y+1, r21	; 0x01
     46a:	48 83       	st	Y, r20
     46c:	c3 5b       	subi	r28, 0xB3	; 179
     46e:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.next = &inShLeft;
     470:	c7 53       	subi	r28, 0x37	; 55
     472:	df 4f       	sbci	r29, 0xFF	; 255
     474:	39 83       	std	Y+1, r19	; 0x01
     476:	28 83       	st	Y, r18
     478:	c9 5c       	subi	r28, 0xC9	; 201
     47a:	d0 40       	sbci	r29, 0x00	; 0
	inShLeft.next = NULL;
     47c:	d9 01       	movw	r26, r18
     47e:	55 96       	adiw	r26, 0x15	; 21
     480:	1c 92       	st	X, r1
     482:	1e 92       	st	-X, r1
     484:	54 97       	sbiw	r26, 0x14	; 20
	
	
	// DECLARATION OF V INPUT (3)
	
	strcpy(delta_V.name, "delta_V");
     486:	28 e0       	ldi	r18, 0x08	; 8
     488:	e6 e4       	ldi	r30, 0x46	; 70
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	aa 5a       	subi	r26, 0xAA	; 170
     48e:	b1 09       	sbc	r27, r1
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	2a 95       	dec	r18
     496:	e1 f7       	brne	.-8      	; 0x490 <FLC_steering+0x3c4>

	//MFs
	struct mf_type small;
	strcpy(small.name, "small");
     498:	1e 01       	movw	r2, r28
     49a:	b1 ee       	ldi	r27, 0xE1	; 225
     49c:	2b 0e       	add	r2, r27
     49e:	31 1c       	adc	r3, r1
     4a0:	26 e0       	ldi	r18, 0x06	; 6
     4a2:	ee e4       	ldi	r30, 0x4E	; 78
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	d1 01       	movw	r26, r2
     4a8:	01 90       	ld	r0, Z+
     4aa:	0d 92       	st	X+, r0
     4ac:	2a 95       	dec	r18
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <FLC_steering+0x3dc>
	small.value = 0;
     4b0:	f1 01       	movw	r30, r2
     4b2:	13 86       	std	Z+11, r1	; 0x0b
     4b4:	12 86       	std	Z+10, r1	; 0x0a
	small.point1 = -1;
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	35 87       	std	Z+13, r19	; 0x0d
     4bc:	24 87       	std	Z+12, r18	; 0x0c
	small.point2= 30;
     4be:	2e e1       	ldi	r18, 0x1E	; 30
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	37 87       	std	Z+15, r19	; 0x0f
     4c4:	26 87       	std	Z+14, r18	; 0x0e
	small.slope1 = 100;
     4c6:	24 e6       	ldi	r18, 0x64	; 100
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	31 8b       	std	Z+17, r19	; 0x11
     4cc:	20 8b       	std	Z+16, r18	; 0x10
	small.slope2 = 5;
     4ce:	25 e0       	ldi	r18, 0x05	; 5
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	33 8b       	std	Z+19, r19	; 0x13
     4d4:	22 8b       	std	Z+18, r18	; 0x12
	struct mf_type medium;
	strcpy(medium.name, "medium");
     4d6:	3e 01       	movw	r6, r28
     4d8:	47 ef       	ldi	r20, 0xF7	; 247
     4da:	64 0e       	add	r6, r20
     4dc:	71 1c       	adc	r7, r1
     4de:	47 e0       	ldi	r20, 0x07	; 7
     4e0:	e4 e5       	ldi	r30, 0x54	; 84
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	d3 01       	movw	r26, r6
     4e6:	01 90       	ld	r0, Z+
     4e8:	0d 92       	st	X+, r0
     4ea:	4a 95       	dec	r20
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <FLC_steering+0x41a>
	medium.value = 0;
     4ee:	d3 01       	movw	r26, r6
     4f0:	1b 96       	adiw	r26, 0x0b	; 11
     4f2:	1c 92       	st	X, r1
     4f4:	1e 92       	st	-X, r1
     4f6:	1a 97       	sbiw	r26, 0x0a	; 10
	medium.point1 = 20;
     4f8:	44 e1       	ldi	r20, 0x14	; 20
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	1d 96       	adiw	r26, 0x0d	; 13
     4fe:	5c 93       	st	X, r21
     500:	4e 93       	st	-X, r20
     502:	1c 97       	sbiw	r26, 0x0c	; 12
	medium.point2= 60;
     504:	4c e3       	ldi	r20, 0x3C	; 60
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	1f 96       	adiw	r26, 0x0f	; 15
     50a:	5c 93       	st	X, r21
     50c:	4e 93       	st	-X, r20
     50e:	1e 97       	sbiw	r26, 0x0e	; 14
	medium.slope1 = 5;
     510:	51 96       	adiw	r26, 0x11	; 17
     512:	3c 93       	st	X, r19
     514:	2e 93       	st	-X, r18
     516:	50 97       	sbiw	r26, 0x10	; 16
	medium.slope2 = 5;
     518:	53 96       	adiw	r26, 0x13	; 19
     51a:	3c 93       	st	X, r19
     51c:	2e 93       	st	-X, r18
     51e:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type high;
	strcpy(high.name, "high");
     520:	7e 01       	movw	r14, r28
     522:	b3 ef       	ldi	r27, 0xF3	; 243
     524:	eb 1a       	sub	r14, r27
     526:	be ef       	ldi	r27, 0xFE	; 254
     528:	fb 0a       	sbc	r15, r27
     52a:	45 e0       	ldi	r20, 0x05	; 5
     52c:	eb e5       	ldi	r30, 0x5B	; 91
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	d7 01       	movw	r26, r14
     532:	01 90       	ld	r0, Z+
     534:	0d 92       	st	X+, r0
     536:	4a 95       	dec	r20
     538:	e1 f7       	brne	.-8      	; 0x532 <FLC_steering+0x466>
	high.value = 0;
     53a:	f7 01       	movw	r30, r14
     53c:	13 86       	std	Z+11, r1	; 0x0b
     53e:	12 86       	std	Z+10, r1	; 0x0a
	high.point1 = 50;
     540:	42 e3       	ldi	r20, 0x32	; 50
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	55 87       	std	Z+13, r21	; 0x0d
     546:	44 87       	std	Z+12, r20	; 0x0c
	high.point2= 81;
     548:	41 e5       	ldi	r20, 0x51	; 81
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	57 87       	std	Z+15, r21	; 0x0f
     54e:	46 87       	std	Z+14, r20	; 0x0e
	high.slope1 = 5;
     550:	31 8b       	std	Z+17, r19	; 0x11
     552:	20 8b       	std	Z+16, r18	; 0x10
	high.slope2 = 100;
     554:	24 e6       	ldi	r18, 0x64	; 100
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	33 8b       	std	Z+19, r19	; 0x13
     55a:	22 8b       	std	Z+18, r18	; 0x12

	delta_V.membership_functions = &small;
     55c:	3e a6       	std	Y+46, r3	; 0x2e
     55e:	2d a6       	std	Y+45, r2	; 0x2d
	small.next = &medium;
     560:	d1 01       	movw	r26, r2
     562:	55 96       	adiw	r26, 0x15	; 21
     564:	7c 92       	st	X, r7
     566:	6e 92       	st	-X, r6
     568:	54 97       	sbiw	r26, 0x14	; 20
	medium.next = &high;
     56a:	f3 01       	movw	r30, r6
     56c:	f5 8a       	std	Z+21, r15	; 0x15
     56e:	e4 8a       	std	Z+20, r14	; 0x14
	high.next = NULL;
     570:	d7 01       	movw	r26, r14
     572:	55 96       	adiw	r26, 0x15	; 21
     574:	1c 92       	st	X, r1
     576:	1e 92       	st	-X, r1
     578:	54 97       	sbiw	r26, 0x14	; 20
	
	// DECLARATION OF STEERING SERVO OUTPUT

	struct io_type servo;
	strcpy(servo.name, "servo");
     57a:	26 e0       	ldi	r18, 0x06	; 6
     57c:	e0 e6       	ldi	r30, 0x60	; 96
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	56 96       	adiw	r26, 0x16	; 22
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	2a 95       	dec	r18
     588:	e1 f7       	brne	.-8      	; 0x582 <FLC_steering+0x4b6>

	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     58a:	ae 01       	movw	r20, r28
     58c:	4d 5c       	subi	r20, 0xCD	; 205
     58e:	5e 4f       	sbci	r21, 0xFE	; 254
     590:	28 e0       	ldi	r18, 0x08	; 8
     592:	e6 e6       	ldi	r30, 0x66	; 102
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	da 01       	movw	r26, r20
     598:	01 90       	ld	r0, Z+
     59a:	0d 92       	st	X+, r0
     59c:	2a 95       	dec	r18
     59e:	e1 f7       	brne	.-8      	; 0x598 <FLC_steering+0x4cc>
	oShLeft.value = 0;
     5a0:	fa 01       	movw	r30, r20
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
	oShLeft.point1 = 2950;
     5a6:	26 e8       	ldi	r18, 0x86	; 134
     5a8:	3b e0       	ldi	r19, 0x0B	; 11
     5aa:	35 87       	std	Z+13, r19	; 0x0d
     5ac:	24 87       	std	Z+12, r18	; 0x0c
	oShLeft.point2 = 3061;
     5ae:	77 87       	std	Z+15, r23	; 0x0f
     5b0:	66 87       	std	Z+14, r22	; 0x0e
	oShLeft.slope1 = 1;
     5b2:	91 8b       	std	Z+17, r25	; 0x11
     5b4:	80 8b       	std	Z+16, r24	; 0x10
	oShLeft.slope2 = 100;
     5b6:	24 e6       	ldi	r18, 0x64	; 100
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	33 8b       	std	Z+19, r19	; 0x13
     5bc:	22 8b       	std	Z+18, r18	; 0x12
	oShLeft.next = NULL;
     5be:	15 8a       	std	Z+21, r1	; 0x15
     5c0:	14 8a       	std	Z+20, r1	; 0x14
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     5c2:	9e 01       	movw	r18, r28
     5c4:	27 5b       	subi	r18, 0xB7	; 183
     5c6:	3e 4f       	sbci	r19, 0xFE	; 254
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	ee e6       	ldi	r30, 0x6E	; 110
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	d9 01       	movw	r26, r18
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	6a 95       	dec	r22
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <FLC_steering+0x504>
	oLeft.value = 0;
     5d8:	d9 01       	movw	r26, r18
     5da:	1b 96       	adiw	r26, 0x0b	; 11
     5dc:	1c 92       	st	X, r1
     5de:	1e 92       	st	-X, r1
     5e0:	1a 97       	sbiw	r26, 0x0a	; 10
	oLeft.point1 = 2840;
     5e2:	1d 96       	adiw	r26, 0x0d	; 13
     5e4:	1c 93       	st	X, r17
     5e6:	0e 93       	st	-X, r16
     5e8:	1c 97       	sbiw	r26, 0x0c	; 12
	oLeft.point2 = 3050;
     5ea:	6a ee       	ldi	r22, 0xEA	; 234
     5ec:	7b e0       	ldi	r23, 0x0B	; 11
     5ee:	1f 96       	adiw	r26, 0x0f	; 15
     5f0:	7c 93       	st	X, r23
     5f2:	6e 93       	st	-X, r22
     5f4:	1e 97       	sbiw	r26, 0x0e	; 14
	oLeft.slope1 = 1;
     5f6:	51 96       	adiw	r26, 0x11	; 17
     5f8:	9c 93       	st	X, r25
     5fa:	8e 93       	st	-X, r24
     5fc:	50 97       	sbiw	r26, 0x10	; 16
	oLeft.slope2 = 1;
     5fe:	53 96       	adiw	r26, 0x13	; 19
     600:	9c 93       	st	X, r25
     602:	8e 93       	st	-X, r24
     604:	52 97       	sbiw	r26, 0x12	; 18
	oLeft.next = &oShLeft;
     606:	55 96       	adiw	r26, 0x15	; 21
     608:	5c 93       	st	X, r21
     60a:	4e 93       	st	-X, r20
     60c:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     60e:	6e 01       	movw	r12, r28
     610:	b1 ea       	ldi	r27, 0xA1	; 161
     612:	cb 1a       	sub	r12, r27
     614:	be ef       	ldi	r27, 0xFE	; 254
     616:	db 0a       	sbc	r13, r27
     618:	68 e0       	ldi	r22, 0x08	; 8
     61a:	e4 e7       	ldi	r30, 0x74	; 116
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	d6 01       	movw	r26, r12
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	6a 95       	dec	r22
     626:	e1 f7       	brne	.-8      	; 0x620 <FLC_steering+0x554>
	oSlLeft.value = 0;
     628:	f6 01       	movw	r30, r12
     62a:	13 86       	std	Z+11, r1	; 0x0b
     62c:	12 86       	std	Z+10, r1	; 0x0a
	oSlLeft.point1 = 2670;
     62e:	6e e6       	ldi	r22, 0x6E	; 110
     630:	7a e0       	ldi	r23, 0x0A	; 10
     632:	75 87       	std	Z+13, r23	; 0x0d
     634:	64 87       	std	Z+12, r22	; 0x0c
	oSlLeft.point2 = 2920;
     636:	b7 86       	std	Z+15, r11	; 0x0f
     638:	a6 86       	std	Z+14, r10	; 0x0e
	oSlLeft.slope1 = 1;
     63a:	91 8b       	std	Z+17, r25	; 0x11
     63c:	80 8b       	std	Z+16, r24	; 0x10
	oSlLeft.slope2 = 1;
     63e:	93 8b       	std	Z+19, r25	; 0x13
     640:	82 8b       	std	Z+18, r24	; 0x12
	oSlLeft.next = &oLeft;
     642:	35 8b       	std	Z+21, r19	; 0x15
     644:	24 8b       	std	Z+20, r18	; 0x14
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     646:	24 5d       	subi	r18, 0xD4	; 212
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	6a e0       	ldi	r22, 0x0A	; 10
     64c:	ef e9       	ldi	r30, 0x9F	; 159
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	d9 01       	movw	r26, r18
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	6a 95       	dec	r22
     658:	e1 f7       	brne	.-8      	; 0x652 <FLC_steering+0x586>
	oStraight.value = 0;
     65a:	d9 01       	movw	r26, r18
     65c:	1b 96       	adiw	r26, 0x0b	; 11
     65e:	1c 92       	st	X, r1
     660:	1e 92       	st	-X, r1
     662:	1a 97       	sbiw	r26, 0x0a	; 10
	oStraight.point1 = 2540;
     664:	6c ee       	ldi	r22, 0xEC	; 236
     666:	79 e0       	ldi	r23, 0x09	; 9
     668:	1d 96       	adiw	r26, 0x0d	; 13
     66a:	7c 93       	st	X, r23
     66c:	6e 93       	st	-X, r22
     66e:	1c 97       	sbiw	r26, 0x0c	; 12
	oStraight.point2 = 2780;
     670:	6c ed       	ldi	r22, 0xDC	; 220
     672:	7a e0       	ldi	r23, 0x0A	; 10
     674:	1f 96       	adiw	r26, 0x0f	; 15
     676:	7c 93       	st	X, r23
     678:	6e 93       	st	-X, r22
     67a:	1e 97       	sbiw	r26, 0x0e	; 14
	oStraight.slope1 = 1;
     67c:	51 96       	adiw	r26, 0x11	; 17
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	50 97       	sbiw	r26, 0x10	; 16
	oStraight.slope2 = 1;
     684:	53 96       	adiw	r26, 0x13	; 19
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	52 97       	sbiw	r26, 0x12	; 18
	oStraight.next = &oSlLeft;
     68c:	55 96       	adiw	r26, 0x15	; 21
     68e:	dc 92       	st	X, r13
     690:	ce 92       	st	-X, r12
     692:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     694:	8e 01       	movw	r16, r28
     696:	05 57       	subi	r16, 0x75	; 117
     698:	1e 4f       	sbci	r17, 0xFE	; 254
     69a:	69 e0       	ldi	r22, 0x09	; 9
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	d8 01       	movw	r26, r16
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	6a 95       	dec	r22
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <FLC_steering+0x5d6>
	oSlRight.value = 0;
     6aa:	f8 01       	movw	r30, r16
     6ac:	13 86       	std	Z+11, r1	; 0x0b
     6ae:	12 86       	std	Z+10, r1	; 0x0a
	oSlRight.point1 = 2400;
     6b0:	55 86       	std	Z+13, r5	; 0x0d
     6b2:	44 86       	std	Z+12, r4	; 0x0c
	oSlRight.point2 = 2650;
     6b4:	6a e5       	ldi	r22, 0x5A	; 90
     6b6:	7a e0       	ldi	r23, 0x0A	; 10
     6b8:	77 87       	std	Z+15, r23	; 0x0f
     6ba:	66 87       	std	Z+14, r22	; 0x0e
	oSlRight.slope1 = 1;
     6bc:	91 8b       	std	Z+17, r25	; 0x11
     6be:	80 8b       	std	Z+16, r24	; 0x10
	oSlRight.slope2 = 1;
     6c0:	93 8b       	std	Z+19, r25	; 0x13
     6c2:	82 8b       	std	Z+18, r24	; 0x12
	oSlRight.next = &oStraight;
     6c4:	35 8b       	std	Z+21, r19	; 0x15
     6c6:	24 8b       	std	Z+20, r18	; 0x14
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     6c8:	5e 01       	movw	r10, r28
     6ca:	ff e5       	ldi	r31, 0x5F	; 95
     6cc:	af 1a       	sub	r10, r31
     6ce:	fe ef       	ldi	r31, 0xFE	; 254
     6d0:	bf 0a       	sbc	r11, r31
     6d2:	67 e0       	ldi	r22, 0x07	; 7
     6d4:	e5 e8       	ldi	r30, 0x85	; 133
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	d5 01       	movw	r26, r10
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	6a 95       	dec	r22
     6e0:	e1 f7       	brne	.-8      	; 0x6da <FLC_steering+0x60e>
	oRight.value = 0;
     6e2:	d5 01       	movw	r26, r10
     6e4:	1b 96       	adiw	r26, 0x0b	; 11
     6e6:	1c 92       	st	X, r1
     6e8:	1e 92       	st	-X, r1
     6ea:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     6ec:	6e ed       	ldi	r22, 0xDE	; 222
     6ee:	78 e0       	ldi	r23, 0x08	; 8
     6f0:	1d 96       	adiw	r26, 0x0d	; 13
     6f2:	7c 93       	st	X, r23
     6f4:	6e 93       	st	-X, r22
     6f6:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     6f8:	e0 eb       	ldi	r30, 0xB0	; 176
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	1f 96       	adiw	r26, 0x0f	; 15
     6fe:	fc 93       	st	X, r31
     700:	ee 93       	st	-X, r30
     702:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     704:	51 96       	adiw	r26, 0x11	; 17
     706:	9c 93       	st	X, r25
     708:	8e 93       	st	-X, r24
     70a:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     70c:	53 96       	adiw	r26, 0x13	; 19
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     714:	55 96       	adiw	r26, 0x15	; 21
     716:	1c 93       	st	X, r17
     718:	0e 93       	st	-X, r16
     71a:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     71c:	be 01       	movw	r22, r28
     71e:	69 54       	subi	r22, 0x49	; 73
     720:	7e 4f       	sbci	r23, 0xFE	; 254
     722:	0f 2e       	mov	r0, r31
     724:	f9 e0       	ldi	r31, 0x09	; 9
     726:	4f 2e       	mov	r4, r31
     728:	f0 2d       	mov	r31, r0
     72a:	ec e8       	ldi	r30, 0x8C	; 140
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	db 01       	movw	r26, r22
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	4a 94       	dec	r4
     736:	e1 f7       	brne	.-8      	; 0x730 <FLC_steering+0x664>
	oShright.value = 0;
     738:	db 01       	movw	r26, r22
     73a:	1b 96       	adiw	r26, 0x0b	; 11
     73c:	1c 92       	st	X, r1
     73e:	1e 92       	st	-X, r1
     740:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     742:	e3 ed       	ldi	r30, 0xD3	; 211
     744:	f8 e0       	ldi	r31, 0x08	; 8
     746:	1d 96       	adiw	r26, 0x0d	; 13
     748:	fc 93       	st	X, r31
     74a:	ee 93       	st	-X, r30
     74c:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     74e:	e2 e4       	ldi	r30, 0x42	; 66
     750:	f9 e0       	ldi	r31, 0x09	; 9
     752:	1f 96       	adiw	r26, 0x0f	; 15
     754:	fc 93       	st	X, r31
     756:	ee 93       	st	-X, r30
     758:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     75a:	e4 e6       	ldi	r30, 0x64	; 100
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	51 96       	adiw	r26, 0x11	; 17
     760:	fc 93       	st	X, r31
     762:	ee 93       	st	-X, r30
     764:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     766:	53 96       	adiw	r26, 0x13	; 19
     768:	9c 93       	st	X, r25
     76a:	8e 93       	st	-X, r24
     76c:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     76e:	55 96       	adiw	r26, 0x15	; 21
     770:	bc 92       	st	X, r11
     772:	ae 92       	st	-X, r10
     774:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     776:	c1 5d       	subi	r28, 0xD1	; 209
     778:	de 4f       	sbci	r29, 0xFE	; 254
     77a:	79 83       	std	Y+1, r23	; 0x01
     77c:	68 83       	st	Y, r22
     77e:	cf 52       	subi	r28, 0x2F	; 47
     780:	d1 40       	sbci	r29, 0x01	; 1
	servo.next = NULL;
     782:	cf 5c       	subi	r28, 0xCF	; 207
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	19 82       	std	Y+1, r1	; 0x01
     788:	18 82       	st	Y, r1
     78a:	c1 53       	subi	r28, 0x31	; 49
     78c:	d1 40       	sbci	r29, 0x01	; 1
	*
	*/
	
	//RULE 9 "if C is zero AND steering is right AND V is high then servo is slightLeft"
	struct rule_element_type then9;
	then9.value = &oSlLeft.value;
     78e:	5e 01       	movw	r10, r28
     790:	f3 e3       	ldi	r31, 0x33	; 51
     792:	af 1a       	sub	r10, r31
     794:	fe ef       	ldi	r31, 0xFE	; 254
     796:	bf 0a       	sbc	r11, r31
     798:	c6 01       	movw	r24, r12
     79a:	0a 96       	adiw	r24, 0x0a	; 10
     79c:	cd 56       	subi	r28, 0x6D	; 109
     79e:	dd 4f       	sbci	r29, 0xFD	; 253
     7a0:	99 83       	std	Y+1, r25	; 0x01
     7a2:	88 83       	st	Y, r24
     7a4:	c3 59       	subi	r28, 0x93	; 147
     7a6:	d2 40       	sbci	r29, 0x02	; 2
     7a8:	d5 01       	movw	r26, r10
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	9c 93       	st	X, r25
     7ae:	8e 93       	st	-X, r24
	then9.next = NULL;
     7b0:	13 96       	adiw	r26, 0x03	; 3
     7b2:	1c 92       	st	X, r1
     7b4:	1e 92       	st	-X, r1
     7b6:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if93;
	if93.value = &high.value;
     7b8:	88 59       	subi	r24, 0x98	; 152
     7ba:	9f 4f       	sbci	r25, 0xFF	; 255
     7bc:	ba e0       	ldi	r27, 0x0A	; 10
     7be:	eb 0e       	add	r14, r27
     7c0:	f1 1c       	adc	r15, r1
     7c2:	fc 01       	movw	r30, r24
     7c4:	f1 82       	std	Z+1, r15	; 0x01
     7c6:	e0 82       	st	Z, r14
	if93.next = NULL;
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if92;
	if92.value = &inRight.value;
     7cc:	de 01       	movw	r26, r28
     7ce:	ab 52       	subi	r26, 0x2B	; 43
     7d0:	be 4f       	sbci	r27, 0xFE	; 254
     7d2:	fa e0       	ldi	r31, 0x0A	; 10
     7d4:	8f 0e       	add	r8, r31
     7d6:	91 1c       	adc	r9, r1
     7d8:	11 96       	adiw	r26, 0x01	; 1
     7da:	9c 92       	st	X, r9
     7dc:	8e 92       	st	-X, r8
	if92.next = &if93;
     7de:	13 96       	adiw	r26, 0x03	; 3
     7e0:	9c 93       	st	X, r25
     7e2:	8e 93       	st	-X, r24
     7e4:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if91;
	if91.value = &zer.value;
     7e6:	08 96       	adiw	r24, 0x08	; 8
     7e8:	0f 2e       	mov	r0, r31
     7ea:	f7 e4       	ldi	r31, 0x47	; 71
     7ec:	4f 2e       	mov	r4, r31
     7ee:	51 2c       	mov	r5, r1
     7f0:	f0 2d       	mov	r31, r0
     7f2:	4c 0e       	add	r4, r28
     7f4:	5d 1e       	adc	r5, r29
     7f6:	ea e0       	ldi	r30, 0x0A	; 10
     7f8:	4e 0e       	add	r4, r30
     7fa:	51 1c       	adc	r5, r1
     7fc:	fc 01       	movw	r30, r24
     7fe:	51 82       	std	Z+1, r5	; 0x01
     800:	40 82       	st	Z, r4
	if91.next = &if92;
     802:	b3 83       	std	Z+3, r27	; 0x03
     804:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     806:	18 96       	adiw	r26, 0x08	; 8
     808:	11 96       	adiw	r26, 0x01	; 1
     80a:	9c 93       	st	X, r25
     80c:	8e 93       	st	-X, r24
	rule9.then_side = &then9;
     80e:	13 96       	adiw	r26, 0x03	; 3
     810:	bc 92       	st	X, r11
     812:	ae 92       	st	-X, r10
     814:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = NULL;
     816:	15 96       	adiw	r26, 0x05	; 5
     818:	1c 92       	st	X, r1
     81a:	1e 92       	st	-X, r1
     81c:	14 97       	sbiw	r26, 0x04	; 4

	
	//RULE 8 "if C is positive AND steering is straight AND V is high then servo is slightRight"
	struct rule_element_type then8;
	then8.value = &oSlRight.value;
     81e:	6e 01       	movw	r12, r28
     820:	fd e1       	ldi	r31, 0x1D	; 29
     822:	cf 1a       	sub	r12, r31
     824:	fe ef       	ldi	r31, 0xFE	; 254
     826:	df 0a       	sbc	r13, r31
     828:	84 54       	subi	r24, 0x44	; 68
     82a:	91 09       	sbc	r25, r1
     82c:	cb 56       	subi	r28, 0x6B	; 107
     82e:	dd 4f       	sbci	r29, 0xFD	; 253
     830:	99 83       	std	Y+1, r25	; 0x01
     832:	88 83       	st	Y, r24
     834:	c5 59       	subi	r28, 0x95	; 149
     836:	d2 40       	sbci	r29, 0x02	; 2
     838:	f6 01       	movw	r30, r12
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	80 83       	st	Z, r24
	then8.next = NULL;
     83e:	13 82       	std	Z+3, r1	; 0x03
     840:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if83;
	if83.value = &high.value;
     842:	04 5a       	subi	r16, 0xA4	; 164
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	f8 01       	movw	r30, r16
     848:	f1 82       	std	Z+1, r15	; 0x01
     84a:	e0 82       	st	Z, r14
	if83.next = NULL;
     84c:	13 82       	std	Z+3, r1	; 0x03
     84e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &inStraight.value;
     850:	0f 2e       	mov	r0, r31
     852:	ff e9       	ldi	r31, 0x9F	; 159
     854:	af 2e       	mov	r10, r31
     856:	b1 2c       	mov	r11, r1
     858:	f0 2d       	mov	r31, r0
     85a:	ac 0e       	add	r10, r28
     85c:	bd 1e       	adc	r11, r29
     85e:	fa e0       	ldi	r31, 0x0A	; 10
     860:	af 0e       	add	r10, r31
     862:	b1 1c       	adc	r11, r1
     864:	c5 51       	subi	r28, 0x15	; 21
     866:	de 4f       	sbci	r29, 0xFE	; 254
     868:	b9 82       	std	Y+1, r11	; 0x01
     86a:	a8 82       	st	Y, r10
     86c:	cb 5e       	subi	r28, 0xEB	; 235
     86e:	d1 40       	sbci	r29, 0x01	; 1
	if82.next = &if83;
     870:	c3 51       	subi	r28, 0x13	; 19
     872:	de 4f       	sbci	r29, 0xFE	; 254
     874:	19 83       	std	Y+1, r17	; 0x01
     876:	08 83       	st	Y, r16
     878:	cd 5e       	subi	r28, 0xED	; 237
     87a:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if81;
	if81.value = &positive.value;
     87c:	7e 01       	movw	r14, r28
     87e:	01 e1       	ldi	r16, 0x11	; 17
     880:	e0 1a       	sub	r14, r16
     882:	0e ef       	ldi	r16, 0xFE	; 254
     884:	f0 0a       	sbc	r15, r16
     886:	8d e5       	ldi	r24, 0x5D	; 93
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	8c 0f       	add	r24, r28
     88c:	9d 1f       	adc	r25, r29
     88e:	0a 96       	adiw	r24, 0x0a	; 10
     890:	c9 56       	subi	r28, 0x69	; 105
     892:	dd 4f       	sbci	r29, 0xFD	; 253
     894:	99 83       	std	Y+1, r25	; 0x01
     896:	88 83       	st	Y, r24
     898:	c7 59       	subi	r28, 0x97	; 151
     89a:	d2 40       	sbci	r29, 0x02	; 2
     89c:	f7 01       	movw	r30, r14
     89e:	91 83       	std	Z+1, r25	; 0x01
     8a0:	80 83       	st	Z, r24
	if81.next = &if82;
     8a2:	0b ee       	ldi	r16, 0xEB	; 235
     8a4:	11 e0       	ldi	r17, 0x01	; 1
     8a6:	0c 0f       	add	r16, r28
     8a8:	1d 1f       	adc	r17, r29
     8aa:	13 83       	std	Z+3, r17	; 0x03
     8ac:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
     8ae:	34 96       	adiw	r30, 0x04	; 4
     8b0:	f1 82       	std	Z+1, r15	; 0x01
     8b2:	e0 82       	st	Z, r14
	rule8.then_side = &then8;
     8b4:	d3 82       	std	Z+3, r13	; 0x03
     8b6:	c2 82       	std	Z+2, r12	; 0x02
	rule8.next = &rule9;
     8b8:	b5 83       	std	Z+5, r27	; 0x05
     8ba:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if C is positive AND steering is left AND V is medium then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &oShright.value;
     8bc:	66 5f       	subi	r22, 0xF6	; 246
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	c7 50       	subi	r28, 0x07	; 7
     8c2:	de 4f       	sbci	r29, 0xFE	; 254
     8c4:	79 83       	std	Y+1, r23	; 0x01
     8c6:	68 83       	st	Y, r22
     8c8:	c9 5f       	subi	r28, 0xF9	; 249
     8ca:	d1 40       	sbci	r29, 0x01	; 1
	then7.next = NULL;
     8cc:	c5 50       	subi	r28, 0x05	; 5
     8ce:	de 4f       	sbci	r29, 0xFE	; 254
     8d0:	19 82       	std	Y+1, r1	; 0x01
     8d2:	18 82       	st	Y, r1
     8d4:	cb 5f       	subi	r28, 0xFB	; 251
     8d6:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if73;
	if73.value = &medium.value;
     8d8:	8a 56       	subi	r24, 0x6A	; 106
     8da:	9e 4f       	sbci	r25, 0xFE	; 254
     8dc:	1a e0       	ldi	r17, 0x0A	; 10
     8de:	61 0e       	add	r6, r17
     8e0:	71 1c       	adc	r7, r1
     8e2:	dc 01       	movw	r26, r24
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	7c 92       	st	X, r7
     8e8:	6e 92       	st	-X, r6
	if73.next = NULL;
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	1c 92       	st	X, r1
     8ee:	1e 92       	st	-X, r1
     8f0:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &inLeft.value;
     8f2:	7e 01       	movw	r14, r28
     8f4:	bf ef       	ldi	r27, 0xFF	; 255
     8f6:	eb 1a       	sub	r14, r27
     8f8:	bd ef       	ldi	r27, 0xFD	; 253
     8fa:	fb 0a       	sbc	r15, r27
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f5 eb       	ldi	r31, 0xB5	; 181
     900:	cf 2e       	mov	r12, r31
     902:	d1 2c       	mov	r13, r1
     904:	f0 2d       	mov	r31, r0
     906:	cc 0e       	add	r12, r28
     908:	dd 1e       	adc	r13, r29
     90a:	0a e0       	ldi	r16, 0x0A	; 10
     90c:	c0 0e       	add	r12, r16
     90e:	d1 1c       	adc	r13, r1
     910:	d7 01       	movw	r26, r14
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	dc 92       	st	X, r13
     916:	ce 92       	st	-X, r12
	if72.next = &if73;
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	9c 93       	st	X, r25
     91c:	8e 93       	st	-X, r24
     91e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &positive.value;
     920:	08 96       	adiw	r24, 0x08	; 8
     922:	c9 56       	subi	r28, 0x69	; 105
     924:	dd 4f       	sbci	r29, 0xFD	; 253
     926:	08 81       	ld	r16, Y
     928:	19 81       	ldd	r17, Y+1	; 0x01
     92a:	c7 59       	subi	r28, 0x97	; 151
     92c:	d2 40       	sbci	r29, 0x02	; 2
     92e:	dc 01       	movw	r26, r24
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	1c 93       	st	X, r17
     934:	0e 93       	st	-X, r16
	if71.next = &if72;
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	fc 92       	st	X, r15
     93a:	ee 92       	st	-X, r14
     93c:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
     93e:	8e 01       	movw	r16, r28
     940:	07 5f       	subi	r16, 0xF7	; 247
     942:	1d 4f       	sbci	r17, 0xFD	; 253
     944:	d8 01       	movw	r26, r16
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	9c 93       	st	X, r25
     94a:	8e 93       	st	-X, r24
	rule7.then_side = &then7;
     94c:	89 ef       	ldi	r24, 0xF9	; 249
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	8c 0f       	add	r24, r28
     952:	9d 1f       	adc	r25, r29
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	9c 93       	st	X, r25
     958:	8e 93       	st	-X, r24
     95a:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
     95c:	15 96       	adiw	r26, 0x05	; 5
     95e:	fc 93       	st	X, r31
     960:	ee 93       	st	-X, r30
     962:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 6 "if C is zero AND steering is left AND V is medium then servo is sharpRight"
	struct rule_element_type then6;
	then6.value = &oShright.value;
     964:	7e 01       	movw	r14, r28
     966:	91 ef       	ldi	r25, 0xF1	; 241
     968:	e9 1a       	sub	r14, r25
     96a:	9d ef       	ldi	r25, 0xFD	; 253
     96c:	f9 0a       	sbc	r15, r25
     96e:	d7 01       	movw	r26, r14
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	7c 93       	st	X, r23
     974:	6e 93       	st	-X, r22
	then6.next = NULL;
     976:	13 96       	adiw	r26, 0x03	; 3
     978:	1c 92       	st	X, r1
     97a:	1e 92       	st	-X, r1
     97c:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if63;
	if63.value = &medium.value;
     97e:	4a 96       	adiw	r24, 0x1a	; 26
     980:	fc 01       	movw	r30, r24
     982:	71 82       	std	Z+1, r7	; 0x01
     984:	60 82       	st	Z, r6
	if63.next = NULL;
     986:	13 82       	std	Z+3, r1	; 0x03
     988:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if62;
	if62.value = &inLeft.value;
     98a:	18 96       	adiw	r26, 0x08	; 8
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	dc 92       	st	X, r13
     990:	ce 92       	st	-X, r12
	if62.next = &if63;
     992:	13 96       	adiw	r26, 0x03	; 3
     994:	9c 93       	st	X, r25
     996:	8e 93       	st	-X, r24
     998:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &zer.value;
     99a:	08 96       	adiw	r24, 0x08	; 8
     99c:	fc 01       	movw	r30, r24
     99e:	51 82       	std	Z+1, r5	; 0x01
     9a0:	40 82       	st	Z, r4
	if61.next = &if62;
     9a2:	b3 83       	std	Z+3, r27	; 0x03
     9a4:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule6;
	rule6.if_side = &if61;
     9a6:	18 96       	adiw	r26, 0x08	; 8
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	9c 93       	st	X, r25
     9ac:	8e 93       	st	-X, r24
	rule6.then_side = &then6;
     9ae:	13 96       	adiw	r26, 0x03	; 3
     9b0:	fc 92       	st	X, r15
     9b2:	ee 92       	st	-X, r14
     9b4:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     9b6:	15 96       	adiw	r26, 0x05	; 5
     9b8:	1c 93       	st	X, r17
     9ba:	0e 93       	st	-X, r16
     9bc:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 5 "if C is negative AND steering is right AND V is medium then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &oShLeft.value;
     9be:	6c 59       	subi	r22, 0x9C	; 156
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	46 5f       	subi	r20, 0xF6	; 246
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	fb 01       	movw	r30, r22
     9c8:	51 83       	std	Z+1, r21	; 0x01
     9ca:	40 83       	st	Z, r20
	then5.next = NULL;
     9cc:	13 82       	std	Z+3, r1	; 0x03
     9ce:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if53;
	if53.value = &medium.value;
     9d0:	0e 96       	adiw	r24, 0x0e	; 14
     9d2:	fc 01       	movw	r30, r24
     9d4:	71 82       	std	Z+1, r7	; 0x01
     9d6:	60 82       	st	Z, r6
	if53.next = NULL;
     9d8:	13 82       	std	Z+3, r1	; 0x03
     9da:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if52;
	if52.value = &inRight.value;
     9dc:	7e 01       	movw	r14, r28
     9de:	f3 ed       	ldi	r31, 0xD3	; 211
     9e0:	ef 1a       	sub	r14, r31
     9e2:	fd ef       	ldi	r31, 0xFD	; 253
     9e4:	ff 0a       	sbc	r15, r31
     9e6:	f7 01       	movw	r30, r14
     9e8:	91 82       	std	Z+1, r9	; 0x01
     9ea:	80 82       	st	Z, r8
	if52.next = &if53;
     9ec:	93 83       	std	Z+3, r25	; 0x03
     9ee:	82 83       	std	Z+2, r24	; 0x02

	struct rule_element_type if51;
	if51.value = &negative.value;
     9f0:	08 5d       	subi	r16, 0xD8	; 216
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	8e 5e       	subi	r24, 0xEE	; 238
     9f6:	91 40       	sbci	r25, 0x01	; 1
     9f8:	f8 01       	movw	r30, r16
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
	if51.next = &if52;
     9fe:	f3 82       	std	Z+3, r15	; 0x03
     a00:	e2 82       	std	Z+2, r14	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     a02:	34 96       	adiw	r30, 0x04	; 4
     a04:	11 83       	std	Z+1, r17	; 0x01
     a06:	00 83       	st	Z, r16
	rule5.then_side = &then5;
     a08:	73 83       	std	Z+3, r23	; 0x03
     a0a:	62 83       	std	Z+2, r22	; 0x02
	rule5.next = &rule6;
     a0c:	b5 83       	std	Z+5, r27	; 0x05
     a0e:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 4 "if C is zero AND steering is straight AND V is medium then servo is Straight"
	struct rule_element_type then4;
	then4.value = &oStraight.value;
     a10:	6a 5e       	subi	r22, 0xEA	; 234
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	26 5f       	subi	r18, 0xF6	; 246
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	db 01       	movw	r26, r22
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	3c 93       	st	X, r19
     a1e:	2e 93       	st	-X, r18
	then4.next = NULL;
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	1c 92       	st	X, r1
     a24:	1e 92       	st	-X, r1
     a26:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if43;
	if43.value = &medium.value;
     a28:	20 54       	subi	r18, 0x40	; 64
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	d9 01       	movw	r26, r18
     a2e:	11 96       	adiw	r26, 0x01	; 1
     a30:	7c 92       	st	X, r7
     a32:	6e 92       	st	-X, r6
	if43.next = NULL;
     a34:	13 96       	adiw	r26, 0x03	; 3
     a36:	1c 92       	st	X, r1
     a38:	1e 92       	st	-X, r1
     a3a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inStraight.value;
     a3c:	0e 5e       	subi	r16, 0xEE	; 238
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	d8 01       	movw	r26, r16
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	bc 92       	st	X, r11
     a46:	ae 92       	st	-X, r10
	if42.next = &if43;
     a48:	13 96       	adiw	r26, 0x03	; 3
     a4a:	3c 93       	st	X, r19
     a4c:	2e 93       	st	-X, r18
     a4e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &zer.value;
     a50:	28 5f       	subi	r18, 0xF8	; 248
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	d9 01       	movw	r26, r18
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	5c 92       	st	X, r5
     a5a:	4e 92       	st	-X, r4
	if41.next = &if42;
     a5c:	13 96       	adiw	r26, 0x03	; 3
     a5e:	1c 93       	st	X, r17
     a60:	0e 93       	st	-X, r16
     a62:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     a64:	14 96       	adiw	r26, 0x04	; 4
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	3c 93       	st	X, r19
     a6a:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	7c 93       	st	X, r23
     a70:	6e 93       	st	-X, r22
     a72:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     a74:	15 96       	adiw	r26, 0x05	; 5
     a76:	fc 93       	st	X, r31
     a78:	ee 93       	st	-X, r30
     a7a:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 3 "if C is negative AND steering is SharpRight AND V is medium then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &oShLeft.value;
     a7c:	02 5f       	subi	r16, 0xF2	; 242
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	f8 01       	movw	r30, r16
     a82:	51 83       	std	Z+1, r21	; 0x01
     a84:	40 83       	st	Z, r20
	then3.next = NULL;
     a86:	13 82       	std	Z+3, r1	; 0x03
     a88:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if33;
	if33.value = &medium.value;
     a8a:	48 5e       	subi	r20, 0xE8	; 232
     a8c:	5e 4f       	sbci	r21, 0xFE	; 254
     a8e:	fa 01       	movw	r30, r20
     a90:	71 82       	std	Z+1, r7	; 0x01
     a92:	60 82       	st	Z, r6
	if33.next = NULL;
     a94:	13 82       	std	Z+3, r1	; 0x03
     a96:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inShRight.value;
     a98:	2e 5e       	subi	r18, 0xEE	; 238
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	63 e7       	ldi	r22, 0x73	; 115
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	6c 0f       	add	r22, r28
     aa2:	7d 1f       	adc	r23, r29
     aa4:	66 5f       	subi	r22, 0xF6	; 246
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	f9 01       	movw	r30, r18
     aaa:	71 83       	std	Z+1, r23	; 0x01
     aac:	60 83       	st	Z, r22
	if32.next = &if33;
     aae:	53 83       	std	Z+3, r21	; 0x03
     ab0:	42 83       	std	Z+2, r20	; 0x02
	
	struct rule_element_type if31;
	if31.value = &negative.value;
     ab2:	48 5f       	subi	r20, 0xF8	; 248
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	fa 01       	movw	r30, r20
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	80 83       	st	Z, r24
	if31.next = &if32;
     abc:	33 83       	std	Z+3, r19	; 0x03
     abe:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     ac0:	28 5f       	subi	r18, 0xF8	; 248
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	f9 01       	movw	r30, r18
     ac6:	51 83       	std	Z+1, r21	; 0x01
     ac8:	40 83       	st	Z, r20
	rule3.then_side = &then3;
     aca:	13 83       	std	Z+3, r17	; 0x03
     acc:	02 83       	std	Z+2, r16	; 0x02
	rule3.next = &rule4;
     ace:	b5 83       	std	Z+5, r27	; 0x05
     ad0:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 2 "if C is negative AND steering is straight AND V is small then servo is SlightLeft"
	struct rule_element_type then2;
	then2.value = &oSlLeft.value;
     ad2:	0a 5e       	subi	r16, 0xEA	; 234
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	cd 56       	subi	r28, 0x6D	; 109
     ad8:	dd 4f       	sbci	r29, 0xFD	; 253
     ada:	e8 81       	ld	r30, Y
     adc:	f9 81       	ldd	r31, Y+1	; 0x01
     ade:	c3 59       	subi	r28, 0x93	; 147
     ae0:	d2 40       	sbci	r29, 0x02	; 2
     ae2:	d8 01       	movw	r26, r16
     ae4:	11 96       	adiw	r26, 0x01	; 1
     ae6:	fc 93       	st	X, r31
     ae8:	ee 93       	st	-X, r30
	then2.next = NULL;
     aea:	13 96       	adiw	r26, 0x03	; 3
     aec:	1c 92       	st	X, r1
     aee:	1e 92       	st	-X, r1
     af0:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if23;
	if23.value = &small.value;
     af2:	42 5f       	subi	r20, 0xF2	; 242
     af4:	5f 4f       	sbci	r21, 0xFF	; 255
     af6:	62 59       	subi	r22, 0x92	; 146
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	da 01       	movw	r26, r20
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	7c 93       	st	X, r23
     b00:	6e 93       	st	-X, r22
	if23.next = NULL;
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	1c 92       	st	X, r1
     b06:	1e 92       	st	-X, r1
     b08:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if22;
	if22.value = &inStraight.value;
     b0a:	14 96       	adiw	r26, 0x04	; 4
     b0c:	11 96       	adiw	r26, 0x01	; 1
     b0e:	bc 92       	st	X, r11
     b10:	ae 92       	st	-X, r10
	if22.next = &if23;
     b12:	13 96       	adiw	r26, 0x03	; 3
     b14:	5c 93       	st	X, r21
     b16:	4e 93       	st	-X, r20
     b18:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if21;
	if21.value = &negative.value;
     b1a:	48 5f       	subi	r20, 0xF8	; 248
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	fa 01       	movw	r30, r20
     b20:	91 83       	std	Z+1, r25	; 0x01
     b22:	80 83       	st	Z, r24
	if21.next = &if22;
     b24:	b3 83       	std	Z+3, r27	; 0x03
     b26:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     b28:	18 96       	adiw	r26, 0x08	; 8
     b2a:	11 96       	adiw	r26, 0x01	; 1
     b2c:	5c 93       	st	X, r21
     b2e:	4e 93       	st	-X, r20
	rule2.then_side = &then2;
     b30:	13 96       	adiw	r26, 0x03	; 3
     b32:	1c 93       	st	X, r17
     b34:	0e 93       	st	-X, r16
     b36:	12 97       	sbiw	r26, 0x02	; 2
	rule2.next = &rule3;
     b38:	15 96       	adiw	r26, 0x05	; 5
     b3a:	3c 93       	st	X, r19
     b3c:	2e 93       	st	-X, r18
     b3e:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 1 "if C is zero AND steering is left AND V is small then servo is SlightRight"
	struct rule_element_type then1;
	then1.value = &oSlRight.value;
     b40:	46 5f       	subi	r20, 0xF6	; 246
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	cb 56       	subi	r28, 0x6B	; 107
     b46:	dd 4f       	sbci	r29, 0xFD	; 253
     b48:	08 81       	ld	r16, Y
     b4a:	19 81       	ldd	r17, Y+1	; 0x01
     b4c:	c5 59       	subi	r28, 0x95	; 149
     b4e:	d2 40       	sbci	r29, 0x02	; 2
     b50:	fa 01       	movw	r30, r20
     b52:	11 83       	std	Z+1, r17	; 0x01
     b54:	00 83       	st	Z, r16
	then1.next = NULL;
     b56:	13 82       	std	Z+3, r1	; 0x03
     b58:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if13;
	if13.value = &small.value;
     b5a:	8a 5b       	subi	r24, 0xBA	; 186
     b5c:	9d 4f       	sbci	r25, 0xFD	; 253
     b5e:	fc 01       	movw	r30, r24
     b60:	71 83       	std	Z+1, r23	; 0x01
     b62:	60 83       	st	Z, r22
	if13.next = NULL;
     b64:	13 82       	std	Z+3, r1	; 0x03
     b66:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if12;
	if12.value = &inLeft.value;
     b68:	2c 5d       	subi	r18, 0xDC	; 220
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	f9 01       	movw	r30, r18
     b6e:	d1 82       	std	Z+1, r13	; 0x01
     b70:	c0 82       	st	Z, r12
	if12.next = &if13;
     b72:	93 83       	std	Z+3, r25	; 0x03
     b74:	82 83       	std	Z+2, r24	; 0x02

	struct rule_element_type if11;
	if11.value = &zer.value;
     b76:	08 96       	adiw	r24, 0x08	; 8
     b78:	fc 01       	movw	r30, r24
     b7a:	51 82       	std	Z+1, r5	; 0x01
     b7c:	40 82       	st	Z, r4
	if11.next = &if12;
     b7e:	33 83       	std	Z+3, r19	; 0x03
     b80:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     b82:	28 5f       	subi	r18, 0xF8	; 248
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	f9 01       	movw	r30, r18
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
	rule1.then_side = &then1;
     b8c:	53 83       	std	Z+3, r21	; 0x03
     b8e:	42 83       	std	Z+2, r20	; 0x02
	rule1.next = &rule2;
     b90:	b5 83       	std	Z+5, r27	; 0x05
     b92:	a4 83       	std	Z+4, r26	; 0x04

	// Connecting INPUTS
	delta_C.next = &steering;
     b94:	01 e1       	ldi	r16, 0x11	; 17
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	0c 0f       	add	r16, r28
     b9a:	1d 1f       	adc	r17, r29
     b9c:	18 8b       	std	Y+16, r17	; 0x10
     b9e:	0f 87       	std	Y+15, r16	; 0x0f
	steering.next = &delta_V;
     ba0:	41 e2       	ldi	r20, 0x21	; 33
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	4c 0f       	add	r20, r28
     ba6:	5d 1f       	adc	r21, r29
     ba8:	58 a3       	std	Y+32, r21	; 0x20
     baa:	4f 8f       	std	Y+31, r20	; 0x1f
	delta_V.next = NULL;
     bac:	18 aa       	std	Y+48, r1	; 0x30
     bae:	1f a6       	std	Y+47, r1	; 0x2f
	
	// pointers to top of lists
	Rule_Base = &rule1;
     bb0:	30 93 92 02 	sts	0x0292, r19
     bb4:	20 93 91 02 	sts	0x0291, r18
	System_Inputs = &delta_C;
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	6c 0f       	add	r22, r28
     bbe:	7d 1f       	adc	r23, r29
     bc0:	70 93 90 02 	sts	0x0290, r23
     bc4:	60 93 8f 02 	sts	0x028F, r22
	System_Outputs = &servo;
     bc8:	83 e2       	ldi	r24, 0x23	; 35
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	8c 0f       	add	r24, r28
     bce:	9d 1f       	adc	r25, r29
     bd0:	90 93 8e 02 	sts	0x028E, r25
     bd4:	80 93 8d 02 	sts	0x028D, r24
	
	// the methods performing the FLC
	fuzzification();
     bd8:	3d d5       	rcall	.+2682   	; 0x1654 <fuzzification>
	rule_evaluation();
     bda:	63 d5       	rcall	.+2758   	; 0x16a2 <rule_evaluation>
	defuzzification();
     bdc:	a8 d5       	rcall	.+2896   	; 0x172e <defuzzification>
	setServo(servo.value);
     bde:	c3 5d       	subi	r28, 0xD3	; 211
     be0:	de 4f       	sbci	r29, 0xFE	; 254
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	cd 52       	subi	r28, 0x2D	; 45
     be8:	d1 40       	sbci	r29, 0x01	; 1
     bea:	3a d7       	rcall	.+3700   	; 0x1a60 <setServo>
}
     bec:	c8 56       	subi	r28, 0x68	; 104
     bee:	dd 4f       	sbci	r29, 0xFD	; 253
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	6f 90       	pop	r6
     c16:	5f 90       	pop	r5
     c18:	4f 90       	pop	r4
     c1a:	3f 90       	pop	r3
     c1c:	2f 90       	pop	r2
     c1e:	08 95       	ret

00000c20 <FLC_road>:
 *
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_road(int currentOCR1A, int midSonicRange)
{
     c20:	2f 92       	push	r2
     c22:	3f 92       	push	r3
     c24:	4f 92       	push	r4
     c26:	5f 92       	push	r5
     c28:	6f 92       	push	r6
     c2a:	7f 92       	push	r7
     c2c:	8f 92       	push	r8
     c2e:	9f 92       	push	r9
     c30:	af 92       	push	r10
     c32:	bf 92       	push	r11
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	c4 52       	subi	r28, 0x24	; 36
     c4a:	d2 40       	sbci	r29, 0x02	; 2
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
    
    
    ////// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
   	struct io_type distance; strcpy(distance.name, "distance");
     c56:	29 e0       	ldi	r18, 0x09	; 9
     c58:	e9 ea       	ldi	r30, 0xA9	; 169
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	de 01       	movw	r26, r28
     c5e:	11 96       	adiw	r26, 0x01	; 1
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	2a 95       	dec	r18
     c66:	e1 f7       	brne	.-8      	; 0xc60 <FLC_road+0x40>
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     c68:	6e 01       	movw	r12, r28
     c6a:	21 e1       	ldi	r18, 0x11	; 17
     c6c:	c2 0e       	add	r12, r18
     c6e:	d1 1c       	adc	r13, r1
     c70:	29 e0       	ldi	r18, 0x09	; 9
     c72:	e2 eb       	ldi	r30, 0xB2	; 178
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	d6 01       	movw	r26, r12
     c78:	01 90       	ld	r0, Z+
     c7a:	0d 92       	st	X+, r0
     c7c:	2a 95       	dec	r18
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <FLC_road+0x58>
    newMf->value = 0;
     c80:	1c 8e       	std	Y+28, r1	; 0x1c
     c82:	1b 8e       	std	Y+27, r1	; 0x1b
    newMf->point1 = p1;
     c84:	2f ef       	ldi	r18, 0xFF	; 255
     c86:	3f ef       	ldi	r19, 0xFF	; 255
     c88:	3e 8f       	std	Y+30, r19	; 0x1e
     c8a:	2d 8f       	std	Y+29, r18	; 0x1d
    newMf->point2 = p4;
     c8c:	2e e3       	ldi	r18, 0x3E	; 62
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	38 a3       	std	Y+32, r19	; 0x20
     c92:	2f 8f       	std	Y+31, r18	; 0x1f
    newMf->slope1 = (int)100/(p2-p1);
     c94:	0f 2e       	mov	r0, r31
     c96:	f4 e6       	ldi	r31, 0x64	; 100
     c98:	8f 2e       	mov	r8, r31
     c9a:	91 2c       	mov	r9, r1
     c9c:	f0 2d       	mov	r31, r0
     c9e:	9a a2       	std	Y+34, r9	; 0x22
     ca0:	89 a2       	std	Y+33, r8	; 0x21
    newMf->slope2 = (int)100/(p4-p3);
     ca2:	42 e0       	ldi	r20, 0x02	; 2
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	5c a3       	std	Y+36, r21	; 0x24
     ca8:	4b a3       	std	Y+35, r20	; 0x23
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     caa:	7e 01       	movw	r14, r28
     cac:	37 e2       	ldi	r19, 0x27	; 39
     cae:	e3 0e       	add	r14, r19
     cb0:	f1 1c       	adc	r15, r1
     cb2:	25 e0       	ldi	r18, 0x05	; 5
     cb4:	eb eb       	ldi	r30, 0xBB	; 187
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	d7 01       	movw	r26, r14
     cba:	01 90       	ld	r0, Z+
     cbc:	0d 92       	st	X+, r0
     cbe:	2a 95       	dec	r18
     cc0:	e1 f7       	brne	.-8      	; 0xcba <FLC_road+0x9a>
    newMf->value = 0;
     cc2:	1a aa       	std	Y+50, r1	; 0x32
     cc4:	19 aa       	std	Y+49, r1	; 0x31
    newMf->point1 = p1;
     cc6:	26 e1       	ldi	r18, 0x16	; 22
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3c ab       	std	Y+52, r19	; 0x34
     ccc:	2b ab       	std	Y+51, r18	; 0x33
    newMf->point2 = p4;
     cce:	0f 2e       	mov	r0, r31
     cd0:	f6 e9       	ldi	r31, 0x96	; 150
     cd2:	af 2e       	mov	r10, r31
     cd4:	b1 2c       	mov	r11, r1
     cd6:	f0 2d       	mov	r31, r0
     cd8:	be aa       	std	Y+54, r11	; 0x36
     cda:	ad aa       	std	Y+53, r10	; 0x35
    newMf->slope1 = (int)100/(p2-p1);
     cdc:	58 af       	std	Y+56, r21	; 0x38
     cde:	4f ab       	std	Y+55, r20	; 0x37
    newMf->slope2 = (int)100/(p4-p3);
     ce0:	5a af       	std	Y+58, r21	; 0x3a
     ce2:	49 af       	std	Y+57, r20	; 0x39
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     ce4:	8e 01       	movw	r16, r28
     ce6:	03 5c       	subi	r16, 0xC3	; 195
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	25 e0       	ldi	r18, 0x05	; 5
     cec:	e0 ec       	ldi	r30, 0xC0	; 192
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	d8 01       	movw	r26, r16
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	2a 95       	dec	r18
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <FLC_road+0xd2>
    newMf->value = 0;
     cfa:	29 96       	adiw	r28, 0x09	; 9
     cfc:	1f ae       	std	Y+63, r1	; 0x3f
     cfe:	1e ae       	std	Y+62, r1	; 0x3e
     d00:	29 97       	sbiw	r28, 0x09	; 9
    newMf->point1 = p1;
     d02:	2e e6       	ldi	r18, 0x6E	; 110
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	2b 96       	adiw	r28, 0x0b	; 11
     d08:	3f af       	std	Y+63, r19	; 0x3f
     d0a:	2e af       	std	Y+62, r18	; 0x3e
     d0c:	2b 97       	sbiw	r28, 0x0b	; 11
    newMf->point2 = p4;
     d0e:	2e ed       	ldi	r18, 0xDE	; 222
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	2d 96       	adiw	r28, 0x0d	; 13
     d14:	3f af       	std	Y+63, r19	; 0x3f
     d16:	2e af       	std	Y+62, r18	; 0x3e
     d18:	2d 97       	sbiw	r28, 0x0d	; 13
    newMf->slope1 = (int)100/(p2-p1);
     d1a:	2f 96       	adiw	r28, 0x0f	; 15
     d1c:	5f af       	std	Y+63, r21	; 0x3f
     d1e:	4e af       	std	Y+62, r20	; 0x3e
     d20:	2f 97       	sbiw	r28, 0x0f	; 15
    newMf->slope2 = (int)100/(p4-p3);
     d22:	61 96       	adiw	r28, 0x11	; 17
     d24:	5f af       	std	Y+63, r21	; 0x3f
     d26:	4e af       	std	Y+62, r20	; 0x3e
     d28:	61 97       	sbiw	r28, 0x11	; 17
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     d2a:	9e 01       	movw	r18, r28
     d2c:	2d 5a       	subi	r18, 0xAD	; 173
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	0f 2e       	mov	r0, r31
     d32:	f7 e0       	ldi	r31, 0x07	; 7
     d34:	7f 2e       	mov	r7, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	e5 ec       	ldi	r30, 0xC5	; 197
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	d9 01       	movw	r26, r18
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	7a 94       	dec	r7
     d44:	e1 f7       	brne	.-8      	; 0xd3e <FLC_road+0x11e>
    newMf->value = 0;
     d46:	d9 01       	movw	r26, r18
     d48:	1b 96       	adiw	r26, 0x0b	; 11
     d4a:	1c 92       	st	X, r1
     d4c:	1e 92       	st	-X, r1
     d4e:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     d50:	1d 96       	adiw	r26, 0x0d	; 13
     d52:	bc 92       	st	X, r11
     d54:	ae 92       	st	-X, r10
     d56:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     d58:	ed e2       	ldi	r30, 0x2D	; 45
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	1f 96       	adiw	r26, 0x0f	; 15
     d5e:	fc 93       	st	X, r31
     d60:	ee 93       	st	-X, r30
     d62:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     d64:	51 96       	adiw	r26, 0x11	; 17
     d66:	5c 93       	st	X, r21
     d68:	4e 93       	st	-X, r20
     d6a:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     d6c:	53 96       	adiw	r26, 0x13	; 19
     d6e:	9c 92       	st	X, r9
     d70:	8e 92       	st	-X, r8
     d72:	52 97       	sbiw	r26, 0x12	; 18
    set_newMf(&twoM, "twoM", 110, 160, 172, 222);
    struct mf_type threeM;
    set_newMf(&threeM, "threeM", 150, 200, 300, 301);
    
    // Linked list for MFs
    distance.membership_functions = &stopDist;
     d74:	de 86       	std	Y+14, r13	; 0x0e
     d76:	cd 86       	std	Y+13, r12	; 0x0d
    stopDist.next = &oneM;
     d78:	fe a2       	std	Y+38, r15	; 0x26
     d7a:	ed a2       	std	Y+37, r14	; 0x25
    oneM.next = &twoM;
     d7c:	1c af       	std	Y+60, r17	; 0x3c
     d7e:	0b af       	std	Y+59, r16	; 0x3b
    twoM.next = &threeM;
     d80:	63 96       	adiw	r28, 0x13	; 19
     d82:	3f af       	std	Y+63, r19	; 0x3f
     d84:	2e af       	std	Y+62, r18	; 0x3e
     d86:	63 97       	sbiw	r28, 0x13	; 19
    threeM.next = NULL;
     d88:	55 96       	adiw	r26, 0x15	; 21
     d8a:	1c 92       	st	X, r1
     d8c:	1e 92       	st	-X, r1
     d8e:	54 97       	sbiw	r26, 0x14	; 20
    
    // Variable assigned its reference value
    if(midSonicRange < MIN_DISTANCE)
     d90:	77 23       	and	r23, r23
     d92:	1c f4       	brge	.+6      	; 0xd9a <FLC_road+0x17a>
    {
        distance.value = MIN_DISTANCE;
     d94:	1c 86       	std	Y+12, r1	; 0x0c
     d96:	1b 86       	std	Y+11, r1	; 0x0b
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <FLC_road+0x190>
    }
    else if (midSonicRange > MAX_DISTANCE)
     d9a:	6d 32       	cpi	r22, 0x2D	; 45
     d9c:	b1 e0       	ldi	r27, 0x01	; 1
     d9e:	7b 07       	cpc	r23, r27
     da0:	2c f0       	brlt	.+10     	; 0xdac <FLC_road+0x18c>
    {
        distance.value = MAX_DISTANCE;
     da2:	2c e2       	ldi	r18, 0x2C	; 44
     da4:	31 e0       	ldi	r19, 0x01	; 1
     da6:	3c 87       	std	Y+12, r19	; 0x0c
     da8:	2b 87       	std	Y+11, r18	; 0x0b
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <FLC_road+0x190>
    }
    else
    {
        distance.value = midSonicRange;
     dac:	7c 87       	std	Y+12, r23	; 0x0c
     dae:	6b 87       	std	Y+11, r22	; 0x0b
    }
    
    
    ////// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
    struct io_type speed; strcpy(speed.name, "speed");
     db0:	26 e0       	ldi	r18, 0x06	; 6
     db2:	ec ec       	ldi	r30, 0xCC	; 204
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	de 01       	movw	r26, r28
     db8:	a7 59       	subi	r26, 0x97	; 151
     dba:	bf 4f       	sbci	r27, 0xFF	; 255
     dbc:	01 90       	ld	r0, Z+
     dbe:	0d 92       	st	X+, r0
     dc0:	2a 95       	dec	r18
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <FLC_road+0x19c>
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     dc4:	7e 01       	movw	r14, r28
     dc6:	e9 e7       	ldi	r30, 0x79	; 121
     dc8:	ee 0e       	add	r14, r30
     dca:	f1 1c       	adc	r15, r1
     dcc:	26 e0       	ldi	r18, 0x06	; 6
     dce:	e2 ed       	ldi	r30, 0xD2	; 210
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	d7 01       	movw	r26, r14
     dd4:	01 90       	ld	r0, Z+
     dd6:	0d 92       	st	X+, r0
     dd8:	2a 95       	dec	r18
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <FLC_road+0x1b4>
    newMf->value = 0;
     ddc:	d7 01       	movw	r26, r14
     dde:	1b 96       	adiw	r26, 0x0b	; 11
     de0:	1c 92       	st	X, r1
     de2:	1e 92       	st	-X, r1
     de4:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     de6:	2d eb       	ldi	r18, 0xBD	; 189
     de8:	3a e0       	ldi	r19, 0x0A	; 10
     dea:	1d 96       	adiw	r26, 0x0d	; 13
     dec:	3c 93       	st	X, r19
     dee:	2e 93       	st	-X, r18
     df0:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     df2:	22 ed       	ldi	r18, 0xD2	; 210
     df4:	3a e0       	ldi	r19, 0x0A	; 10
     df6:	1f 96       	adiw	r26, 0x0f	; 15
     df8:	3c 93       	st	X, r19
     dfa:	2e 93       	st	-X, r18
     dfc:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     dfe:	0f 2e       	mov	r0, r31
     e00:	f4 e6       	ldi	r31, 0x64	; 100
     e02:	cf 2e       	mov	r12, r31
     e04:	d1 2c       	mov	r13, r1
     e06:	f0 2d       	mov	r31, r0
     e08:	51 96       	adiw	r26, 0x11	; 17
     e0a:	dc 92       	st	X, r13
     e0c:	ce 92       	st	-X, r12
     e0e:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     e10:	24 e1       	ldi	r18, 0x14	; 20
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	53 96       	adiw	r26, 0x13	; 19
     e16:	3c 93       	st	X, r19
     e18:	2e 93       	st	-X, r18
     e1a:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     e1c:	8e 01       	movw	r16, r28
     e1e:	01 57       	subi	r16, 0x71	; 113
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	4c e6       	ldi	r20, 0x6C	; 108
     e24:	5f e6       	ldi	r21, 0x6F	; 111
     e26:	67 e7       	ldi	r22, 0x77	; 119
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	f8 01       	movw	r30, r16
     e2c:	40 83       	st	Z, r20
     e2e:	51 83       	std	Z+1, r21	; 0x01
     e30:	62 83       	std	Z+2, r22	; 0x02
     e32:	73 83       	std	Z+3, r23	; 0x03
    newMf->value = 0;
     e34:	13 86       	std	Z+11, r1	; 0x0b
     e36:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     e38:	2d ec       	ldi	r18, 0xCD	; 205
     e3a:	3a e0       	ldi	r19, 0x0A	; 10
     e3c:	35 87       	std	Z+13, r19	; 0x0d
     e3e:	24 87       	std	Z+12, r18	; 0x0c
    newMf->point2 = p4;
     e40:	23 e1       	ldi	r18, 0x13	; 19
     e42:	3b e0       	ldi	r19, 0x0B	; 11
     e44:	37 87       	std	Z+15, r19	; 0x0f
     e46:	26 87       	std	Z+14, r18	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     e48:	24 e0       	ldi	r18, 0x04	; 4
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	31 8b       	std	Z+17, r19	; 0x11
     e4e:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
     e50:	33 8b       	std	Z+19, r19	; 0x13
     e52:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     e54:	be 01       	movw	r22, r28
     e56:	6b 55       	subi	r22, 0x5B	; 91
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	49 e0       	ldi	r20, 0x09	; 9
     e5c:	e8 ed       	ldi	r30, 0xD8	; 216
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	db 01       	movw	r26, r22
     e62:	01 90       	ld	r0, Z+
     e64:	0d 92       	st	X+, r0
     e66:	4a 95       	dec	r20
     e68:	e1 f7       	brne	.-8      	; 0xe62 <FLC_road+0x242>
    newMf->value = 0;
     e6a:	db 01       	movw	r26, r22
     e6c:	1b 96       	adiw	r26, 0x0b	; 11
     e6e:	1c 92       	st	X, r1
     e70:	1e 92       	st	-X, r1
     e72:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     e74:	40 ef       	ldi	r20, 0xF0	; 240
     e76:	5a e0       	ldi	r21, 0x0A	; 10
     e78:	1d 96       	adiw	r26, 0x0d	; 13
     e7a:	5c 93       	st	X, r21
     e7c:	4e 93       	st	-X, r20
     e7e:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     e80:	40 e4       	ldi	r20, 0x40	; 64
     e82:	5b e0       	ldi	r21, 0x0B	; 11
     e84:	1f 96       	adiw	r26, 0x0f	; 15
     e86:	5c 93       	st	X, r21
     e88:	4e 93       	st	-X, r20
     e8a:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     e8c:	51 96       	adiw	r26, 0x11	; 17
     e8e:	3c 93       	st	X, r19
     e90:	2e 93       	st	-X, r18
     e92:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     e94:	53 96       	adiw	r26, 0x13	; 19
     e96:	3c 93       	st	X, r19
     e98:	2e 93       	st	-X, r18
     e9a:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     e9c:	ae 01       	movw	r20, r28
     e9e:	45 54       	subi	r20, 0x45	; 69
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	27 e0       	ldi	r18, 0x07	; 7
     ea4:	e4 e5       	ldi	r30, 0x54	; 84
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	da 01       	movw	r26, r20
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	2a 95       	dec	r18
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <FLC_road+0x28a>
    newMf->value = 0;
     eb2:	fa 01       	movw	r30, r20
     eb4:	13 86       	std	Z+11, r1	; 0x0b
     eb6:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     eb8:	2d e1       	ldi	r18, 0x1D	; 29
     eba:	3b e0       	ldi	r19, 0x0B	; 11
     ebc:	35 87       	std	Z+13, r19	; 0x0d
     ebe:	24 87       	std	Z+12, r18	; 0x0c
    newMf->point2 = p4;
     ec0:	2d e6       	ldi	r18, 0x6D	; 109
     ec2:	3b e0       	ldi	r19, 0x0B	; 11
     ec4:	37 87       	std	Z+15, r19	; 0x0f
     ec6:	26 87       	std	Z+14, r18	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     ec8:	23 e0       	ldi	r18, 0x03	; 3
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	31 8b       	std	Z+17, r19	; 0x11
     ece:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
     ed0:	33 8b       	std	Z+19, r19	; 0x13
     ed2:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     ed4:	9e 01       	movw	r18, r28
     ed6:	2f 52       	subi	r18, 0x2F	; 47
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	0f 2e       	mov	r0, r31
     edc:	f5 e0       	ldi	r31, 0x05	; 5
     ede:	bf 2e       	mov	r11, r31
     ee0:	f0 2d       	mov	r31, r0
     ee2:	eb e5       	ldi	r30, 0x5B	; 91
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	d9 01       	movw	r26, r18
     ee8:	01 90       	ld	r0, Z+
     eea:	0d 92       	st	X+, r0
     eec:	ba 94       	dec	r11
     eee:	e1 f7       	brne	.-8      	; 0xee8 <FLC_road+0x2c8>
    newMf->value = 0;
     ef0:	d9 01       	movw	r26, r18
     ef2:	1b 96       	adiw	r26, 0x0b	; 11
     ef4:	1c 92       	st	X, r1
     ef6:	1e 92       	st	-X, r1
     ef8:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     efa:	ea e4       	ldi	r30, 0x4A	; 74
     efc:	fb e0       	ldi	r31, 0x0B	; 11
     efe:	1d 96       	adiw	r26, 0x0d	; 13
     f00:	fc 93       	st	X, r31
     f02:	ee 93       	st	-X, r30
     f04:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     f06:	e3 e7       	ldi	r30, 0x73	; 115
     f08:	fb e0       	ldi	r31, 0x0B	; 11
     f0a:	1f 96       	adiw	r26, 0x0f	; 15
     f0c:	fc 93       	st	X, r31
     f0e:	ee 93       	st	-X, r30
     f10:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     f12:	ea e0       	ldi	r30, 0x0A	; 10
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	51 96       	adiw	r26, 0x11	; 17
     f18:	fc 93       	st	X, r31
     f1a:	ee 93       	st	-X, r30
     f1c:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     f1e:	53 96       	adiw	r26, 0x13	; 19
     f20:	dc 92       	st	X, r13
     f22:	ce 92       	st	-X, r12
     f24:	52 97       	sbiw	r26, 0x12	; 18
    set_newMf(&medium, "medium", 2845, 2878, 2892, 2925);
    struct mf_type high;
    set_newMf(&high, "high", 2890, 2900, 2930, 2931);
    
    // Linked list for MFs
    speed.membership_functions = &still;
     f26:	e7 96       	adiw	r28, 0x37	; 55
     f28:	ff ae       	std	Y+63, r15	; 0x3f
     f2a:	ee ae       	std	Y+62, r14	; 0x3e
     f2c:	e7 97       	sbiw	r28, 0x37	; 55
    still.next = &low;
     f2e:	f7 01       	movw	r30, r14
     f30:	15 8b       	std	Z+21, r17	; 0x15
     f32:	04 8b       	std	Z+20, r16	; 0x14
    low.next = &cruising;
     f34:	d8 01       	movw	r26, r16
     f36:	55 96       	adiw	r26, 0x15	; 21
     f38:	7c 93       	st	X, r23
     f3a:	6e 93       	st	-X, r22
     f3c:	54 97       	sbiw	r26, 0x14	; 20
    cruising.next = &medium;
     f3e:	fb 01       	movw	r30, r22
     f40:	55 8b       	std	Z+21, r21	; 0x15
     f42:	44 8b       	std	Z+20, r20	; 0x14
    medium.next = &high;
     f44:	da 01       	movw	r26, r20
     f46:	55 96       	adiw	r26, 0x15	; 21
     f48:	3c 93       	st	X, r19
     f4a:	2e 93       	st	-X, r18
     f4c:	54 97       	sbiw	r26, 0x14	; 20
    high.next = NULL;
     f4e:	f9 01       	movw	r30, r18
     f50:	15 8a       	std	Z+21, r1	; 0x15
     f52:	14 8a       	std	Z+20, r1	; 0x14
    
    // Variable assigned it's reference value
    if (currentOCR1A<MIN_SPEED) {
     f54:	8e 3b       	cpi	r24, 0xBE	; 190
     f56:	fa e0       	ldi	r31, 0x0A	; 10
     f58:	9f 07       	cpc	r25, r31
     f5a:	3c f4       	brge	.+14     	; 0xf6a <FLC_road+0x34a>
        speed.value = MIN_SPEED;
     f5c:	8e eb       	ldi	r24, 0xBE	; 190
     f5e:	9a e0       	ldi	r25, 0x0A	; 10
     f60:	e5 96       	adiw	r28, 0x35	; 53
     f62:	9f af       	std	Y+63, r25	; 0x3f
     f64:	8e af       	std	Y+62, r24	; 0x3e
     f66:	e5 97       	sbiw	r28, 0x35	; 53
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <FLC_road+0x368>
    }
    else if (currentOCR1A>MAX_SPEED)
     f6a:	83 37       	cpi	r24, 0x73	; 115
     f6c:	2b e0       	ldi	r18, 0x0B	; 11
     f6e:	92 07       	cpc	r25, r18
     f70:	3c f0       	brlt	.+14     	; 0xf80 <FLC_road+0x360>
    {
        speed.value = MAX_SPEED;
     f72:	82 e7       	ldi	r24, 0x72	; 114
     f74:	9b e0       	ldi	r25, 0x0B	; 11
     f76:	e5 96       	adiw	r28, 0x35	; 53
     f78:	9f af       	std	Y+63, r25	; 0x3f
     f7a:	8e af       	std	Y+62, r24	; 0x3e
     f7c:	e5 97       	sbiw	r28, 0x35	; 53
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <FLC_road+0x368>
    }
    else
    {
        speed.value = currentOCR1A;
     f80:	e5 96       	adiw	r28, 0x35	; 53
     f82:	9f af       	std	Y+63, r25	; 0x3f
     f84:	8e af       	std	Y+62, r24	; 0x3e
     f86:	e5 97       	sbiw	r28, 0x35	; 53
    }
    
    
    ////// DECLARATION OF PWM OUTPUT VARIABLE ///////////////////////////////////
   	struct io_type pwm; strcpy(pwm.name, "pwm");
     f88:	3e 01       	movw	r6, r28
     f8a:	37 ee       	ldi	r19, 0xE7	; 231
     f8c:	63 0e       	add	r6, r19
     f8e:	71 1c       	adc	r7, r1
     f90:	80 e7       	ldi	r24, 0x70	; 112
     f92:	97 e7       	ldi	r25, 0x77	; 119
     f94:	ad e6       	ldi	r26, 0x6D	; 109
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	f3 01       	movw	r30, r6
     f9a:	80 83       	st	Z, r24
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	a2 83       	std	Z+2, r26	; 0x02
     fa0:	b3 83       	std	Z+3, r27	; 0x03
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     fa2:	ce 01       	movw	r24, r28
     fa4:	89 50       	subi	r24, 0x09	; 9
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	29 e0       	ldi	r18, 0x09	; 9
     faa:	e1 ee       	ldi	r30, 0xE1	; 225
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	dc 01       	movw	r26, r24
     fb0:	01 90       	ld	r0, Z+
     fb2:	0d 92       	st	X+, r0
     fb4:	2a 95       	dec	r18
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <FLC_road+0x390>
    newMf->value = 0;
     fb8:	dc 01       	movw	r26, r24
     fba:	1b 96       	adiw	r26, 0x0b	; 11
     fbc:	1c 92       	st	X, r1
     fbe:	1e 92       	st	-X, r1
     fc0:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     fc2:	2d eb       	ldi	r18, 0xBD	; 189
     fc4:	3a e0       	ldi	r19, 0x0A	; 10
     fc6:	1d 96       	adiw	r26, 0x0d	; 13
     fc8:	3c 93       	st	X, r19
     fca:	2e 93       	st	-X, r18
     fcc:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     fce:	26 ee       	ldi	r18, 0xE6	; 230
     fd0:	3a e0       	ldi	r19, 0x0A	; 10
     fd2:	1f 96       	adiw	r26, 0x0f	; 15
     fd4:	3c 93       	st	X, r19
     fd6:	2e 93       	st	-X, r18
     fd8:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     fda:	24 e6       	ldi	r18, 0x64	; 100
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	51 96       	adiw	r26, 0x11	; 17
     fe0:	3c 93       	st	X, r19
     fe2:	2e 93       	st	-X, r18
     fe4:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     fe6:	24 e0       	ldi	r18, 0x04	; 4
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	53 96       	adiw	r26, 0x13	; 19
     fec:	3c 93       	st	X, r19
     fee:	2e 93       	st	-X, r18
     ff0:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     ff2:	4e 01       	movw	r8, r28
     ff4:	b3 ef       	ldi	r27, 0xF3	; 243
     ff6:	8b 1a       	sub	r8, r27
     ff8:	be ef       	ldi	r27, 0xFE	; 254
     ffa:	9b 0a       	sbc	r9, r27
     ffc:	45 e0       	ldi	r20, 0x05	; 5
     ffe:	ea ee       	ldi	r30, 0xEA	; 234
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	d4 01       	movw	r26, r8
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	4a 95       	dec	r20
    100a:	e1 f7       	brne	.-8      	; 0x1004 <FLC_road+0x3e4>
    newMf->value = 0;
    100c:	f4 01       	movw	r30, r8
    100e:	13 86       	std	Z+11, r1	; 0x0b
    1010:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
    1012:	4d ec       	ldi	r20, 0xCD	; 205
    1014:	5a e0       	ldi	r21, 0x0A	; 10
    1016:	55 87       	std	Z+13, r21	; 0x0d
    1018:	44 87       	std	Z+12, r20	; 0x0c
    newMf->point2 = p4;
    101a:	44 e1       	ldi	r20, 0x14	; 20
    101c:	5b e0       	ldi	r21, 0x0B	; 11
    101e:	57 87       	std	Z+15, r21	; 0x0f
    1020:	46 87       	std	Z+14, r20	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
    1022:	31 8b       	std	Z+17, r19	; 0x11
    1024:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
    1026:	33 8b       	std	Z+19, r19	; 0x13
    1028:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
    102a:	8e 01       	movw	r16, r28
    102c:	0d 5d       	subi	r16, 0xDD	; 221
    102e:	1e 4f       	sbci	r17, 0xFE	; 254
    1030:	27 e0       	ldi	r18, 0x07	; 7
    1032:	ef ee       	ldi	r30, 0xEF	; 239
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	d8 01       	movw	r26, r16
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	2a 95       	dec	r18
    103e:	e1 f7       	brne	.-8      	; 0x1038 <FLC_road+0x418>
    newMf->value = 0;
    1040:	d8 01       	movw	r26, r16
    1042:	1b 96       	adiw	r26, 0x0b	; 11
    1044:	1c 92       	st	X, r1
    1046:	1e 92       	st	-X, r1
    1048:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
    104a:	20 ef       	ldi	r18, 0xF0	; 240
    104c:	3a e0       	ldi	r19, 0x0A	; 10
    104e:	1d 96       	adiw	r26, 0x0d	; 13
    1050:	3c 93       	st	X, r19
    1052:	2e 93       	st	-X, r18
    1054:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
    1056:	20 e4       	ldi	r18, 0x40	; 64
    1058:	3b e0       	ldi	r19, 0x0B	; 11
    105a:	1f 96       	adiw	r26, 0x0f	; 15
    105c:	3c 93       	st	X, r19
    105e:	2e 93       	st	-X, r18
    1060:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
    1062:	23 e0       	ldi	r18, 0x03	; 3
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	51 96       	adiw	r26, 0x11	; 17
    1068:	3c 93       	st	X, r19
    106a:	2e 93       	st	-X, r18
    106c:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
    106e:	53 96       	adiw	r26, 0x13	; 19
    1070:	3c 93       	st	X, r19
    1072:	2e 93       	st	-X, r18
    1074:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
    1076:	9e 01       	movw	r18, r28
    1078:	27 5c       	subi	r18, 0xC7	; 199
    107a:	3e 4f       	sbci	r19, 0xFE	; 254
    107c:	48 e0       	ldi	r20, 0x08	; 8
    107e:	e6 ef       	ldi	r30, 0xF6	; 246
    1080:	f1 e0       	ldi	r31, 0x01	; 1
    1082:	d9 01       	movw	r26, r18
    1084:	01 90       	ld	r0, Z+
    1086:	0d 92       	st	X+, r0
    1088:	4a 95       	dec	r20
    108a:	e1 f7       	brne	.-8      	; 0x1084 <FLC_road+0x464>
    newMf->value = 0;
    108c:	f9 01       	movw	r30, r18
    108e:	13 86       	std	Z+11, r1	; 0x0b
    1090:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
    1092:	4c e1       	ldi	r20, 0x1C	; 28
    1094:	5b e0       	ldi	r21, 0x0B	; 11
    1096:	55 87       	std	Z+13, r21	; 0x0d
    1098:	44 87       	std	Z+12, r20	; 0x0c
    newMf->point2 = p4;
    109a:	4e e6       	ldi	r20, 0x6E	; 110
    109c:	5b e0       	ldi	r21, 0x0B	; 11
    109e:	57 87       	std	Z+15, r21	; 0x0f
    10a0:	46 87       	std	Z+14, r20	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
    10a2:	e2 e0       	ldi	r30, 0x02	; 2
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	d9 01       	movw	r26, r18
    10a8:	51 96       	adiw	r26, 0x11	; 17
    10aa:	fc 93       	st	X, r31
    10ac:	ee 93       	st	-X, r30
    10ae:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
    10b0:	53 96       	adiw	r26, 0x13	; 19
    10b2:	fc 93       	st	X, r31
    10b4:	ee 93       	st	-X, r30
    10b6:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
    10b8:	4d e6       	ldi	r20, 0x6D	; 109
    10ba:	51 e6       	ldi	r21, 0x61	; 97
    10bc:	68 e7       	ldi	r22, 0x78	; 120
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	c1 5b       	subi	r28, 0xB1	; 177
    10c2:	de 4f       	sbci	r29, 0xFE	; 254
    10c4:	48 83       	st	Y, r20
    10c6:	59 83       	std	Y+1, r21	; 0x01
    10c8:	6a 83       	std	Y+2, r22	; 0x02
    10ca:	7b 83       	std	Y+3, r23	; 0x03
    10cc:	cf 54       	subi	r28, 0x4F	; 79
    10ce:	d1 40       	sbci	r29, 0x01	; 1
    newMf->value = 0;
    10d0:	c7 5a       	subi	r28, 0xA7	; 167
    10d2:	de 4f       	sbci	r29, 0xFE	; 254
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	18 82       	st	Y, r1
    10d8:	c9 55       	subi	r28, 0x59	; 89
    10da:	d1 40       	sbci	r29, 0x01	; 1
    newMf->point1 = p1;
    10dc:	4a e4       	ldi	r20, 0x4A	; 74
    10de:	5b e0       	ldi	r21, 0x0B	; 11
    10e0:	c5 5a       	subi	r28, 0xA5	; 165
    10e2:	de 4f       	sbci	r29, 0xFE	; 254
    10e4:	59 83       	std	Y+1, r21	; 0x01
    10e6:	48 83       	st	Y, r20
    10e8:	cb 55       	subi	r28, 0x5B	; 91
    10ea:	d1 40       	sbci	r29, 0x01	; 1
    newMf->point2 = p4;
    10ec:	4a e9       	ldi	r20, 0x9A	; 154
    10ee:	5b e0       	ldi	r21, 0x0B	; 11
    10f0:	c3 5a       	subi	r28, 0xA3	; 163
    10f2:	de 4f       	sbci	r29, 0xFE	; 254
    10f4:	59 83       	std	Y+1, r21	; 0x01
    10f6:	48 83       	st	Y, r20
    10f8:	cd 55       	subi	r28, 0x5D	; 93
    10fa:	d1 40       	sbci	r29, 0x01	; 1
    newMf->slope1 = (int)100/(p2-p1);
    10fc:	c1 5a       	subi	r28, 0xA1	; 161
    10fe:	de 4f       	sbci	r29, 0xFE	; 254
    1100:	f9 83       	std	Y+1, r31	; 0x01
    1102:	e8 83       	st	Y, r30
    1104:	cf 55       	subi	r28, 0x5F	; 95
    1106:	d1 40       	sbci	r29, 0x01	; 1
    newMf->slope2 = (int)100/(p4-p3);
    1108:	cf 59       	subi	r28, 0x9F	; 159
    110a:	de 4f       	sbci	r29, 0xFE	; 254
    110c:	f9 83       	std	Y+1, r31	; 0x01
    110e:	e8 83       	st	Y, r30
    1110:	c1 56       	subi	r28, 0x61	; 97
    1112:	d1 40       	sbci	r29, 0x01	; 1
    set_newMf(&medHigh, "medHigh", 2844, 2880, 2890, 2926);
    struct mf_type max;
    set_newMf(&max, "max", 2890, 2926, 2934, 2970);
    
    // Linked list for MFs
    pwm.membership_functions = &noSpeed;
    1114:	f3 01       	movw	r30, r6
    1116:	95 87       	std	Z+13, r25	; 0x0d
    1118:	84 87       	std	Z+12, r24	; 0x0c
    noSpeed.next = &slow;
    111a:	dc 01       	movw	r26, r24
    111c:	55 96       	adiw	r26, 0x15	; 21
    111e:	9c 92       	st	X, r9
    1120:	8e 92       	st	-X, r8
    1122:	54 97       	sbiw	r26, 0x14	; 20
    slow.next = &cruise;
    1124:	f4 01       	movw	r30, r8
    1126:	15 8b       	std	Z+21, r17	; 0x15
    1128:	04 8b       	std	Z+20, r16	; 0x14
    cruise.next = &medHigh;
    112a:	d8 01       	movw	r26, r16
    112c:	55 96       	adiw	r26, 0x15	; 21
    112e:	3c 93       	st	X, r19
    1130:	2e 93       	st	-X, r18
    1132:	54 97       	sbiw	r26, 0x14	; 20
    medHigh.next = &high;
    1134:	2e 01       	movw	r4, r28
    1136:	b1 ed       	ldi	r27, 0xD1	; 209
    1138:	4b 0e       	add	r4, r27
    113a:	51 1c       	adc	r5, r1
    113c:	f9 01       	movw	r30, r18
    113e:	55 8a       	std	Z+21, r5	; 0x15
    1140:	44 8a       	std	Z+20, r4	; 0x14
    
    
    
    ////// SETTING I/O LINKED LISTS ///////////////////////////////////
    
    System_Inputs = &distance;
    1142:	ae 01       	movw	r20, r28
    1144:	4f 5f       	subi	r20, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	50 93 90 02 	sts	0x0290, r21
    114c:	40 93 8f 02 	sts	0x028F, r20
    distance.next = &speed;
    1150:	e0 5d       	subi	r30, 0xD0	; 208
    1152:	f1 09       	sbc	r31, r1
    1154:	f8 8b       	std	Y+16, r31	; 0x10
    1156:	ef 87       	std	Y+15, r30	; 0x0f
    speed.next = NULL;
    1158:	17 86       	std	Z+15, r1	; 0x0f
    115a:	16 86       	std	Z+14, r1	; 0x0e
    
    System_Outputs = &pwm;
    115c:	70 92 8e 02 	sts	0x028E, r7
    1160:	60 92 8d 02 	sts	0x028D, r6
    pwm.next = NULL;
    1164:	d3 01       	movw	r26, r6
    1166:	1f 96       	adiw	r26, 0x0f	; 15
    1168:	1c 92       	st	X, r1
    116a:	1e 92       	st	-X, r1
    116c:	1e 97       	sbiw	r26, 0x0e	; 14
     *
     */
    
    /* rule # 11: if still and oneMeter then slow */
    struct rule_element_type then11;
    then11.value = &slow.value;
    116e:	a2 58       	subi	r26, 0x82	; 130
    1170:	bf 4f       	sbci	r27, 0xFF	; 255
    1172:	ea e0       	ldi	r30, 0x0A	; 10
    1174:	8e 0e       	add	r8, r30
    1176:	91 1c       	adc	r9, r1
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	9c 92       	st	X, r9
    117c:	8e 92       	st	-X, r8
    then11.next = NULL;
    117e:	13 96       	adiw	r26, 0x03	; 3
    1180:	1c 92       	st	X, r1
    1182:	1e 92       	st	-X, r1
    1184:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if112;
    if112.value = &oneM.value;
    1186:	6e 01       	movw	r12, r28
    1188:	f7 e9       	ldi	r31, 0x97	; 151
    118a:	cf 1a       	sub	r12, r31
    118c:	fe ef       	ldi	r31, 0xFE	; 254
    118e:	df 0a       	sbc	r13, r31
    1190:	40 5d       	subi	r20, 0xD0	; 208
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	f6 01       	movw	r30, r12
    1196:	51 83       	std	Z+1, r21	; 0x01
    1198:	40 83       	st	Z, r20
    if112.next = NULL;
    119a:	13 82       	std	Z+3, r1	; 0x03
    119c:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if111;
    if111.value = &still.value;
    119e:	5e 01       	movw	r10, r28
    11a0:	f3 e9       	ldi	r31, 0x93	; 147
    11a2:	af 1a       	sub	r10, r31
    11a4:	fe ef       	ldi	r31, 0xFE	; 254
    11a6:	bf 0a       	sbc	r11, r31
    11a8:	7e 01       	movw	r14, r28
    11aa:	63 e8       	ldi	r22, 0x83	; 131
    11ac:	e6 0e       	add	r14, r22
    11ae:	f1 1c       	adc	r15, r1
    11b0:	f5 01       	movw	r30, r10
    11b2:	f1 82       	std	Z+1, r15	; 0x01
    11b4:	e0 82       	st	Z, r14
    if111.next = &if112;
    11b6:	d3 82       	std	Z+3, r13	; 0x03
    11b8:	c2 82       	std	Z+2, r12	; 0x02
    
    struct rule_type rule11;
    rule11.if_side = &if111;
    11ba:	34 96       	adiw	r30, 0x04	; 4
    11bc:	b1 82       	std	Z+1, r11	; 0x01
    11be:	a0 82       	st	Z, r10
    rule11.then_side = &then11;
    11c0:	b3 83       	std	Z+3, r27	; 0x03
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    rule11.next = NULL;
    11c4:	15 82       	std	Z+5, r1	; 0x05
    11c6:	14 82       	std	Z+4, r1	; 0x04
    
    
    /* rule # 10: if low and twoM then cruise */
    struct rule_element_type then10;
    then10.value = &cruise.value;
    11c8:	7e 01       	movw	r14, r28
    11ca:	69 e8       	ldi	r22, 0x89	; 137
    11cc:	e6 1a       	sub	r14, r22
    11ce:	6e ef       	ldi	r22, 0xFE	; 254
    11d0:	f6 0a       	sbc	r15, r22
    11d2:	06 5f       	subi	r16, 0xF6	; 246
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	d7 01       	movw	r26, r14
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	1c 93       	st	X, r17
    11dc:	0e 93       	st	-X, r16
    then10.next = NULL;
    11de:	13 96       	adiw	r26, 0x03	; 3
    11e0:	1c 92       	st	X, r1
    11e2:	1e 92       	st	-X, r1
    11e4:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if102;
    if102.value = &twoM.value;
    11e6:	1e 01       	movw	r2, r28
    11e8:	b5 e8       	ldi	r27, 0x85	; 133
    11ea:	2b 1a       	sub	r2, r27
    11ec:	be ef       	ldi	r27, 0xFE	; 254
    11ee:	3b 0a       	sbc	r3, r27
    11f0:	be 01       	movw	r22, r28
    11f2:	69 5b       	subi	r22, 0xB9	; 185
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	d1 01       	movw	r26, r2
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	7c 93       	st	X, r23
    11fc:	6e 93       	st	-X, r22
    if102.next = NULL;
    11fe:	13 96       	adiw	r26, 0x03	; 3
    1200:	1c 92       	st	X, r1
    1202:	1e 92       	st	-X, r1
    1204:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if101;
    if101.value = &low.value;
    1206:	6e 01       	movw	r12, r28
    1208:	b1 e8       	ldi	r27, 0x81	; 129
    120a:	cb 1a       	sub	r12, r27
    120c:	be ef       	ldi	r27, 0xFE	; 254
    120e:	db 0a       	sbc	r13, r27
    1210:	5e 01       	movw	r10, r28
    1212:	a9 e9       	ldi	r26, 0x99	; 153
    1214:	aa 0e       	add	r10, r26
    1216:	b1 1c       	adc	r11, r1
    1218:	d6 01       	movw	r26, r12
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	bc 92       	st	X, r11
    121e:	ae 92       	st	-X, r10
    if101.next = &if102;
    1220:	13 96       	adiw	r26, 0x03	; 3
    1222:	3c 92       	st	X, r3
    1224:	2e 92       	st	-X, r2
    1226:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule10;
    rule10.if_side = &if101;
    1228:	14 96       	adiw	r26, 0x04	; 4
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	dc 92       	st	X, r13
    122e:	ce 92       	st	-X, r12
    rule10.then_side = &then10;
    1230:	13 96       	adiw	r26, 0x03	; 3
    1232:	fc 92       	st	X, r15
    1234:	ee 92       	st	-X, r14
    1236:	12 97       	sbiw	r26, 0x02	; 2
    rule10.next = &rule11;
    1238:	15 96       	adiw	r26, 0x05	; 5
    123a:	fc 93       	st	X, r31
    123c:	ee 93       	st	-X, r30
    123e:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 9: if threeM then max */
    struct rule_element_type then9;
    then9.value = &max.value;
    1240:	7e 01       	movw	r14, r28
    1242:	e7 e7       	ldi	r30, 0x77	; 119
    1244:	ee 1a       	sub	r14, r30
    1246:	ee ef       	ldi	r30, 0xFE	; 254
    1248:	fe 0a       	sbc	r15, r30
    124a:	0f 2e       	mov	r0, r31
    124c:	ff e4       	ldi	r31, 0x4F	; 79
    124e:	cf 2e       	mov	r12, r31
    1250:	dd 24       	eor	r13, r13
    1252:	d3 94       	inc	r13
    1254:	f0 2d       	mov	r31, r0
    1256:	cc 0e       	add	r12, r28
    1258:	dd 1e       	adc	r13, r29
    125a:	fa e0       	ldi	r31, 0x0A	; 10
    125c:	cf 0e       	add	r12, r31
    125e:	d1 1c       	adc	r13, r1
    1260:	f7 01       	movw	r30, r14
    1262:	d1 82       	std	Z+1, r13	; 0x01
    1264:	c0 82       	st	Z, r12
    then9.next = NULL;
    1266:	13 82       	std	Z+3, r1	; 0x03
    1268:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if91;
    if91.value = &threeM.value;
    126a:	6e 01       	movw	r12, r28
    126c:	f3 e7       	ldi	r31, 0x73	; 115
    126e:	cf 1a       	sub	r12, r31
    1270:	fe ef       	ldi	r31, 0xFE	; 254
    1272:	df 0a       	sbc	r13, r31
    1274:	1e 01       	movw	r2, r28
    1276:	ed e5       	ldi	r30, 0x5D	; 93
    1278:	2e 0e       	add	r2, r30
    127a:	31 1c       	adc	r3, r1
    127c:	f6 01       	movw	r30, r12
    127e:	31 82       	std	Z+1, r3	; 0x01
    1280:	20 82       	st	Z, r2
    if91.next = NULL;
    1282:	13 82       	std	Z+3, r1	; 0x03
    1284:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule9;
    rule9.if_side = &if91;
    1286:	34 96       	adiw	r30, 0x04	; 4
    1288:	d1 82       	std	Z+1, r13	; 0x01
    128a:	c0 82       	st	Z, r12
    rule9.then_side = &then9;
    128c:	f3 82       	std	Z+3, r15	; 0x03
    128e:	e2 82       	std	Z+2, r14	; 0x02
    rule9.next = &rule10;
    1290:	b5 83       	std	Z+5, r27	; 0x05
    1292:	a4 83       	std	Z+4, r26	; 0x04
    
    /* rule # 8: if high and twoM then medHigh */
    struct rule_element_type then8;
    then8.value = &medHigh.value;
    1294:	7e 01       	movw	r14, r28
    1296:	a9 e6       	ldi	r26, 0x69	; 105
    1298:	ea 1a       	sub	r14, r26
    129a:	ae ef       	ldi	r26, 0xFE	; 254
    129c:	fa 0a       	sbc	r15, r26
    129e:	a0 54       	subi	r26, 0x40	; 64
    12a0:	b1 09       	sbc	r27, r1
    12a2:	cd 5d       	subi	r28, 0xDD	; 221
    12a4:	dd 4f       	sbci	r29, 0xFD	; 253
    12a6:	b9 83       	std	Y+1, r27	; 0x01
    12a8:	a8 83       	st	Y, r26
    12aa:	c3 52       	subi	r28, 0x23	; 35
    12ac:	d2 40       	sbci	r29, 0x02	; 2
    12ae:	9d 01       	movw	r18, r26
    12b0:	d7 01       	movw	r26, r14
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	3c 93       	st	X, r19
    12b6:	2e 93       	st	-X, r18
    then8.next = NULL;
    12b8:	13 96       	adiw	r26, 0x03	; 3
    12ba:	1c 92       	st	X, r1
    12bc:	1e 92       	st	-X, r1
    12be:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if82;
    if82.value = &twoM.value;
    12c0:	1e 01       	movw	r2, r28
    12c2:	35 e6       	ldi	r19, 0x65	; 101
    12c4:	23 1a       	sub	r2, r19
    12c6:	3e ef       	ldi	r19, 0xFE	; 254
    12c8:	33 0a       	sbc	r3, r19
    12ca:	d1 01       	movw	r26, r2
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	7c 93       	st	X, r23
    12d0:	6e 93       	st	-X, r22
    if82.next = NULL;
    12d2:	13 96       	adiw	r26, 0x03	; 3
    12d4:	1c 92       	st	X, r1
    12d6:	1e 92       	st	-X, r1
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if81;
    if81.value = &high.value;
    12da:	6e 01       	movw	r12, r28
    12dc:	b1 e6       	ldi	r27, 0x61	; 97
    12de:	cb 1a       	sub	r12, r27
    12e0:	be ef       	ldi	r27, 0xFE	; 254
    12e2:	db 0a       	sbc	r13, r27
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	42 0e       	add	r4, r18
    12e8:	51 1c       	adc	r5, r1
    12ea:	d6 01       	movw	r26, r12
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	5c 92       	st	X, r5
    12f0:	4e 92       	st	-X, r4
    if81.next = &if82;
    12f2:	13 96       	adiw	r26, 0x03	; 3
    12f4:	3c 92       	st	X, r3
    12f6:	2e 92       	st	-X, r2
    12f8:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule8;
    rule8.if_side = &if81;
    12fa:	14 96       	adiw	r26, 0x04	; 4
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	dc 92       	st	X, r13
    1300:	ce 92       	st	-X, r12
    rule8.then_side = &then8;
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	fc 92       	st	X, r15
    1306:	ee 92       	st	-X, r14
    1308:	12 97       	sbiw	r26, 0x02	; 2
    rule8.next = &rule9;
    130a:	15 96       	adiw	r26, 0x05	; 5
    130c:	fc 93       	st	X, r31
    130e:	ee 93       	st	-X, r30
    1310:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 7: if cruising and twoM then medHigh */
    struct rule_element_type then7;
    then7.value = &medHigh.value;
    1312:	7e 01       	movw	r14, r28
    1314:	e7 e5       	ldi	r30, 0x57	; 87
    1316:	ee 1a       	sub	r14, r30
    1318:	ee ef       	ldi	r30, 0xFE	; 254
    131a:	fe 0a       	sbc	r15, r30
    131c:	cd 5d       	subi	r28, 0xDD	; 221
    131e:	dd 4f       	sbci	r29, 0xFD	; 253
    1320:	28 81       	ld	r18, Y
    1322:	39 81       	ldd	r19, Y+1	; 0x01
    1324:	c3 52       	subi	r28, 0x23	; 35
    1326:	d2 40       	sbci	r29, 0x02	; 2
    1328:	f7 01       	movw	r30, r14
    132a:	31 83       	std	Z+1, r19	; 0x01
    132c:	20 83       	st	Z, r18
    then7.next = NULL;
    132e:	13 82       	std	Z+3, r1	; 0x03
    1330:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if72;
    if72.value = &twoM.value;
    1332:	c3 55       	subi	r28, 0x53	; 83
    1334:	de 4f       	sbci	r29, 0xFE	; 254
    1336:	79 83       	std	Y+1, r23	; 0x01
    1338:	68 83       	st	Y, r22
    133a:	cd 5a       	subi	r28, 0xAD	; 173
    133c:	d1 40       	sbci	r29, 0x01	; 1
    if72.next = NULL;
    133e:	c1 55       	subi	r28, 0x51	; 81
    1340:	de 4f       	sbci	r29, 0xFE	; 254
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	18 82       	st	Y, r1
    1346:	cf 5a       	subi	r28, 0xAF	; 175
    1348:	d1 40       	sbci	r29, 0x01	; 1
    
    struct rule_element_type if71;
    if71.value = &cruising.value;
    134a:	6e 01       	movw	r12, r28
    134c:	3f e4       	ldi	r19, 0x4F	; 79
    134e:	c3 1a       	sub	r12, r19
    1350:	3e ef       	ldi	r19, 0xFE	; 254
    1352:	d3 0a       	sbc	r13, r19
    1354:	1e 01       	movw	r2, r28
    1356:	ef ea       	ldi	r30, 0xAF	; 175
    1358:	2e 0e       	add	r2, r30
    135a:	31 1c       	adc	r3, r1
    135c:	f6 01       	movw	r30, r12
    135e:	31 82       	std	Z+1, r3	; 0x01
    1360:	20 82       	st	Z, r2
    if71.next = &if72;
    1362:	2d ea       	ldi	r18, 0xAD	; 173
    1364:	31 e0       	ldi	r19, 0x01	; 1
    1366:	2c 0f       	add	r18, r28
    1368:	3d 1f       	adc	r19, r29
    136a:	33 83       	std	Z+3, r19	; 0x03
    136c:	22 83       	std	Z+2, r18	; 0x02
    
    struct rule_type rule7;
    rule7.if_side = &if71;
    136e:	34 96       	adiw	r30, 0x04	; 4
    1370:	d1 82       	std	Z+1, r13	; 0x01
    1372:	c0 82       	st	Z, r12
    rule7.then_side = &then7;
    1374:	f3 82       	std	Z+3, r15	; 0x03
    1376:	e2 82       	std	Z+2, r14	; 0x02
    rule7.next = &rule8;
    1378:	b5 83       	std	Z+5, r27	; 0x05
    137a:	a4 83       	std	Z+4, r26	; 0x04
    
    
    /* rule # 6: if low and twoM then cruise */
    struct rule_element_type then6;
    then6.value = &cruise.value;
    137c:	6e 01       	movw	r12, r28
    137e:	35 e4       	ldi	r19, 0x45	; 69
    1380:	c3 1a       	sub	r12, r19
    1382:	3e ef       	ldi	r19, 0xFE	; 254
    1384:	d3 0a       	sbc	r13, r19
    1386:	d6 01       	movw	r26, r12
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	1c 93       	st	X, r17
    138c:	0e 93       	st	-X, r16
    then6.next = NULL;
    138e:	13 96       	adiw	r26, 0x03	; 3
    1390:	1c 92       	st	X, r1
    1392:	1e 92       	st	-X, r1
    1394:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if62;
    if62.value = &twoM.value;
    1396:	7e 01       	movw	r14, r28
    1398:	b1 e4       	ldi	r27, 0x41	; 65
    139a:	eb 1a       	sub	r14, r27
    139c:	be ef       	ldi	r27, 0xFE	; 254
    139e:	fb 0a       	sbc	r15, r27
    13a0:	d7 01       	movw	r26, r14
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	7c 93       	st	X, r23
    13a6:	6e 93       	st	-X, r22
    if62.next = NULL;
    13a8:	13 96       	adiw	r26, 0x03	; 3
    13aa:	1c 92       	st	X, r1
    13ac:	1e 92       	st	-X, r1
    13ae:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if61;
    if61.value = &low.value;
    13b0:	64 58       	subi	r22, 0x84	; 132
    13b2:	7e 4f       	sbci	r23, 0xFE	; 254
    13b4:	db 01       	movw	r26, r22
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	bc 92       	st	X, r11
    13ba:	ae 92       	st	-X, r10
    if61.next = &if62;
    13bc:	13 96       	adiw	r26, 0x03	; 3
    13be:	fc 92       	st	X, r15
    13c0:	ee 92       	st	-X, r14
    13c2:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule6;
    rule6.if_side = &if61;
    13c4:	7e 01       	movw	r14, r28
    13c6:	b9 e3       	ldi	r27, 0x39	; 57
    13c8:	eb 1a       	sub	r14, r27
    13ca:	be ef       	ldi	r27, 0xFE	; 254
    13cc:	fb 0a       	sbc	r15, r27
    13ce:	d7 01       	movw	r26, r14
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	7c 93       	st	X, r23
    13d4:	6e 93       	st	-X, r22
    rule6.then_side = &then6;
    13d6:	13 96       	adiw	r26, 0x03	; 3
    13d8:	dc 92       	st	X, r13
    13da:	ce 92       	st	-X, r12
    13dc:	12 97       	sbiw	r26, 0x02	; 2
    rule6.next = &rule7;
    13de:	15 96       	adiw	r26, 0x05	; 5
    13e0:	fc 93       	st	X, r31
    13e2:	ee 93       	st	-X, r30
    13e4:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 5: if high and oneM then medHigh */
    struct rule_element_type then5;
    then5.value = &medHigh.value;
    13e6:	16 96       	adiw	r26, 0x06	; 6
    13e8:	cd 5d       	subi	r28, 0xDD	; 221
    13ea:	dd 4f       	sbci	r29, 0xFD	; 253
    13ec:	e8 81       	ld	r30, Y
    13ee:	f9 81       	ldd	r31, Y+1	; 0x01
    13f0:	c3 52       	subi	r28, 0x23	; 35
    13f2:	d2 40       	sbci	r29, 0x02	; 2
    13f4:	11 96       	adiw	r26, 0x01	; 1
    13f6:	fc 93       	st	X, r31
    13f8:	ee 93       	st	-X, r30
    then5.next = NULL;
    13fa:	13 96       	adiw	r26, 0x03	; 3
    13fc:	1c 92       	st	X, r1
    13fe:	1e 92       	st	-X, r1
    1400:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if52;
    if52.value = &oneM.value;
    1402:	62 5f       	subi	r22, 0xF2	; 242
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	fb 01       	movw	r30, r22
    1408:	51 83       	std	Z+1, r21	; 0x01
    140a:	40 83       	st	Z, r20
    if52.next = NULL;
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if51;
    if51.value = &high.value;
    1410:	28 5d       	subi	r18, 0xD8	; 216
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	f9 01       	movw	r30, r18
    1416:	51 82       	std	Z+1, r5	; 0x01
    1418:	40 82       	st	Z, r4
    if51.next = &if52;
    141a:	73 83       	std	Z+3, r23	; 0x03
    141c:	62 83       	std	Z+2, r22	; 0x02
    
    struct rule_type rule5;
    rule5.if_side = &if51;
    141e:	34 96       	adiw	r30, 0x04	; 4
    1420:	31 83       	std	Z+1, r19	; 0x01
    1422:	20 83       	st	Z, r18
    rule5.then_side = &then5;
    1424:	b3 83       	std	Z+3, r27	; 0x03
    1426:	a2 83       	std	Z+2, r26	; 0x02
    rule5.next = &rule6;
    1428:	f5 82       	std	Z+5, r15	; 0x05
    142a:	e4 82       	std	Z+4, r14	; 0x04
    
    /* rule # 4: if medium and oneM then cruise */
    struct rule_element_type then4;
    then4.value = &cruise.value;
    142c:	7e 01       	movw	r14, r28
    142e:	21 e2       	ldi	r18, 0x21	; 33
    1430:	e2 1a       	sub	r14, r18
    1432:	2e ef       	ldi	r18, 0xFE	; 254
    1434:	f2 0a       	sbc	r15, r18
    1436:	d7 01       	movw	r26, r14
    1438:	11 96       	adiw	r26, 0x01	; 1
    143a:	1c 93       	st	X, r17
    143c:	0e 93       	st	-X, r16
    then4.next = NULL;
    143e:	13 96       	adiw	r26, 0x03	; 3
    1440:	1c 92       	st	X, r1
    1442:	1e 92       	st	-X, r1
    1444:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &oneM.value;
    1446:	6e 5e       	subi	r22, 0xEE	; 238
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	db 01       	movw	r26, r22
    144c:	11 96       	adiw	r26, 0x01	; 1
    144e:	5c 93       	st	X, r21
    1450:	4e 93       	st	-X, r20
    if42.next = NULL;
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	1c 92       	st	X, r1
    1456:	1e 92       	st	-X, r1
    1458:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if41;
    if41.value = &medium.value;
    145a:	2e 5e       	subi	r18, 0xEE	; 238
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	08 56       	subi	r16, 0x68	; 104
    1460:	11 09       	sbc	r17, r1
    1462:	d9 01       	movw	r26, r18
    1464:	11 96       	adiw	r26, 0x01	; 1
    1466:	1c 93       	st	X, r17
    1468:	0e 93       	st	-X, r16
    if41.next = &if42;
    146a:	13 96       	adiw	r26, 0x03	; 3
    146c:	7c 93       	st	X, r23
    146e:	6e 93       	st	-X, r22
    1470:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule4;
    rule4.if_side = &if41;
    1472:	68 5f       	subi	r22, 0xF8	; 248
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	db 01       	movw	r26, r22
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	3c 93       	st	X, r19
    147c:	2e 93       	st	-X, r18
    rule4.then_side = &then4;
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	fc 92       	st	X, r15
    1482:	ee 92       	st	-X, r14
    1484:	12 97       	sbiw	r26, 0x02	; 2
    rule4.next = &rule5;
    1486:	15 96       	adiw	r26, 0x05	; 5
    1488:	fc 93       	st	X, r31
    148a:	ee 93       	st	-X, r30
    148c:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 3: if cruising and oneM then slow */
    struct rule_element_type then3;
    then3.value = &slow.value;
    148e:	04 5d       	subi	r16, 0xD4	; 212
    1490:	1e 4f       	sbci	r17, 0xFE	; 254
    1492:	f8 01       	movw	r30, r16
    1494:	91 82       	std	Z+1, r9	; 0x01
    1496:	80 82       	st	Z, r8
    then3.next = NULL;
    1498:	13 82       	std	Z+3, r1	; 0x03
    149a:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if32;
    if32.value = &oneM.value;
    149c:	22 5f       	subi	r18, 0xF2	; 242
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	d9 01       	movw	r26, r18
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	5c 93       	st	X, r21
    14a6:	4e 93       	st	-X, r20
    if32.next = NULL;
    14a8:	13 96       	adiw	r26, 0x03	; 3
    14aa:	1c 92       	st	X, r1
    14ac:	1e 92       	st	-X, r1
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if31;
    if31.value = &cruising.value;
    14b0:	14 96       	adiw	r26, 0x04	; 4
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	3c 92       	st	X, r3
    14b6:	2e 92       	st	-X, r2
    if31.next = &if32;
    14b8:	13 96       	adiw	r26, 0x03	; 3
    14ba:	3c 93       	st	X, r19
    14bc:	2e 93       	st	-X, r18
    14be:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule3;
    rule3.if_side = &if31;
    14c0:	28 5f       	subi	r18, 0xF8	; 248
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	f9 01       	movw	r30, r18
    14c6:	b1 83       	std	Z+1, r27	; 0x01
    14c8:	a0 83       	st	Z, r26
    rule3.then_side = &then3;
    14ca:	13 83       	std	Z+3, r17	; 0x03
    14cc:	02 83       	std	Z+2, r16	; 0x02
    rule3.next = &rule4;
    14ce:	75 83       	std	Z+5, r23	; 0x05
    14d0:	64 83       	std	Z+4, r22	; 0x04
    
    /* rule # 2: if low and oneM then slow */
    struct rule_element_type if22;
    if22.value = &oneM.value;
    14d2:	36 96       	adiw	r30, 0x06	; 6
    14d4:	51 83       	std	Z+1, r21	; 0x01
    14d6:	40 83       	st	Z, r20
    if22.next = NULL;
    14d8:	13 82       	std	Z+3, r1	; 0x03
    14da:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if21;
    if21.value = &low.value;
    14dc:	4a 52       	subi	r20, 0x2A	; 42
    14de:	5e 4f       	sbci	r21, 0xFE	; 254
    14e0:	da 01       	movw	r26, r20
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	bc 92       	st	X, r11
    14e6:	ae 92       	st	-X, r10
    if21.next = &if22;
    14e8:	13 96       	adiw	r26, 0x03	; 3
    14ea:	fc 93       	st	X, r31
    14ec:	ee 93       	st	-X, r30
    14ee:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type then2;
    then2.value = &slow.value;
    14f0:	38 96       	adiw	r30, 0x08	; 8
    14f2:	91 82       	std	Z+1, r9	; 0x01
    14f4:	80 82       	st	Z, r8
    then2.next = NULL;
    14f6:	13 82       	std	Z+3, r1	; 0x03
    14f8:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule2;
    rule2.if_side = &if21;
    14fa:	18 96       	adiw	r26, 0x08	; 8
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	5c 93       	st	X, r21
    1500:	4e 93       	st	-X, r20
    rule2.then_side = &then2;
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	fc 93       	st	X, r31
    1506:	ee 93       	st	-X, r30
    1508:	12 97       	sbiw	r26, 0x02	; 2
    rule2.next = &rule3;
    150a:	15 96       	adiw	r26, 0x05	; 5
    150c:	3c 93       	st	X, r19
    150e:	2e 93       	st	-X, r18
    1510:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 1: if stopDist then noSpeed */
    struct rule_element_type if11;
    if11.value = &stopDist.value;
    1512:	42 5f       	subi	r20, 0xF2	; 242
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	22 5e       	subi	r18, 0xE2	; 226
    1518:	31 40       	sbci	r19, 0x01	; 1
    151a:	fa 01       	movw	r30, r20
    151c:	31 83       	std	Z+1, r19	; 0x01
    151e:	20 83       	st	Z, r18
    if11.next = NULL;
    1520:	13 82       	std	Z+3, r1	; 0x03
    1522:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type then1;
    then1.value = &noSpeed.value;
    1524:	22 50       	subi	r18, 0x02	; 2
    1526:	3e 4f       	sbci	r19, 0xFE	; 254
    1528:	0a 96       	adiw	r24, 0x0a	; 10
    152a:	f9 01       	movw	r30, r18
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    then1.next = NULL;
    1530:	13 82       	std	Z+3, r1	; 0x03
    1532:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule1;		// first rule in rule base
    
    rule1.if_side = &if11;
    1534:	34 96       	adiw	r30, 0x04	; 4
    1536:	51 83       	std	Z+1, r21	; 0x01
    1538:	40 83       	st	Z, r20
    rule1.then_side = &then1;
    153a:	33 83       	std	Z+3, r19	; 0x03
    153c:	22 83       	std	Z+2, r18	; 0x02
    rule1.next = &rule2;
    153e:	b5 83       	std	Z+5, r27	; 0x05
    1540:	a4 83       	std	Z+4, r26	; 0x04
    
    // pointers to top of lists
    Rule_Base = &rule1;
    1542:	f0 93 92 02 	sts	0x0292, r31
    1546:	e0 93 91 02 	sts	0x0291, r30
    
    
    // the methods performing the FLC
    fuzzification();
    154a:	84 d0       	rcall	.+264    	; 0x1654 <fuzzification>
    rule_evaluation();
    154c:	aa d0       	rcall	.+340    	; 0x16a2 <rule_evaluation>
    defuzzification();
    154e:	ef d0       	rcall	.+478    	; 0x172e <defuzzification>
    setESC(pwm.value);
    1550:	d3 01       	movw	r26, r6
    1552:	1a 96       	adiw	r26, 0x0a	; 10
    1554:	8d 91       	ld	r24, X+
    1556:	9c 91       	ld	r25, X
    1558:	1b 97       	sbiw	r26, 0x0b	; 11
    155a:	67 d2       	rcall	.+1230   	; 0x1a2a <setESC>

}
    155c:	cc 5d       	subi	r28, 0xDC	; 220
    155e:	dd 4f       	sbci	r29, 0xFD	; 253
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	9f 90       	pop	r9
    1580:	8f 90       	pop	r8
    1582:	7f 90       	pop	r7
    1584:	6f 90       	pop	r6
    1586:	5f 90       	pop	r5
    1588:	4f 90       	pop	r4
    158a:	3f 90       	pop	r3
    158c:	2f 90       	pop	r2
    158e:	08 95       	ret

00001590 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1590:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1592:	84 85       	ldd	r24, Z+12	; 0x0c
    1594:	95 85       	ldd	r25, Z+13	; 0x0d
    1596:	9b 01       	movw	r18, r22
    1598:	28 1b       	sub	r18, r24
    159a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    159c:	86 85       	ldd	r24, Z+14	; 0x0e
    159e:	97 85       	ldd	r25, Z+15	; 0x0f
    15a0:	86 1b       	sub	r24, r22
    15a2:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    15a4:	12 16       	cp	r1, r18
    15a6:	13 06       	cpc	r1, r19
    15a8:	ec f4       	brge	.+58     	; 0x15e4 <compute_degree_of_membership+0x54>
    15aa:	18 16       	cp	r1, r24
    15ac:	19 06       	cpc	r1, r25
    15ae:	ec f4       	brge	.+58     	; 0x15ea <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    15b0:	60 89       	ldd	r22, Z+16	; 0x10
    15b2:	71 89       	ldd	r23, Z+17	; 0x11
    15b4:	a2 89       	ldd	r26, Z+18	; 0x12
    15b6:	b3 89       	ldd	r27, Z+19	; 0x13
    15b8:	8a 9f       	mul	r24, r26
    15ba:	a0 01       	movw	r20, r0
    15bc:	8b 9f       	mul	r24, r27
    15be:	50 0d       	add	r21, r0
    15c0:	9a 9f       	mul	r25, r26
    15c2:	50 0d       	add	r21, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	26 9f       	mul	r18, r22
    15c8:	c0 01       	movw	r24, r0
    15ca:	27 9f       	mul	r18, r23
    15cc:	90 0d       	add	r25, r0
    15ce:	36 9f       	mul	r19, r22
    15d0:	90 0d       	add	r25, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	48 17       	cp	r20, r24
    15d6:	59 07       	cpc	r21, r25
    15d8:	0c f4       	brge	.+2      	; 0x15dc <compute_degree_of_membership+0x4c>
    15da:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    15dc:	84 36       	cpi	r24, 0x64	; 100
    15de:	91 05       	cpc	r25, r1
    15e0:	3c f4       	brge	.+14     	; 0x15f0 <compute_degree_of_membership+0x60>
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <compute_degree_of_membership+0x64>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    15f0:	84 e6       	ldi	r24, 0x64	; 100
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    15f4:	93 87       	std	Z+11, r25	; 0x0b
    15f6:	82 87       	std	Z+10, r24	; 0x0a
    15f8:	08 95       	ret

000015fa <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    1604:	c6 85       	ldd	r28, Z+14	; 0x0e
    1606:	d7 85       	ldd	r29, Z+15	; 0x0f
    1608:	84 85       	ldd	r24, Z+12	; 0x0c
    160a:	95 85       	ldd	r25, Z+13	; 0x0d
    160c:	c8 1b       	sub	r28, r24
    160e:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    1610:	22 85       	ldd	r18, Z+10	; 0x0a
    1612:	33 85       	ldd	r19, Z+11	; 0x0b
    1614:	60 89       	ldd	r22, Z+16	; 0x10
    1616:	71 89       	ldd	r23, Z+17	; 0x11
    1618:	c9 01       	movw	r24, r18
    161a:	d8 d4       	rcall	.+2480   	; 0x1fcc <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    161c:	8e 01       	movw	r16, r28
    161e:	06 1b       	sub	r16, r22
    1620:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    1622:	62 89       	ldd	r22, Z+18	; 0x12
    1624:	73 89       	ldd	r23, Z+19	; 0x13
    1626:	c9 01       	movw	r24, r18
    1628:	d1 d4       	rcall	.+2466   	; 0x1fcc <__divmodhi4>
    top = base - run_1 - run_2;
    162a:	06 1b       	sub	r16, r22
    162c:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    162e:	c0 0f       	add	r28, r16
    1630:	d1 1f       	adc	r29, r17
    1632:	2c 9f       	mul	r18, r28
    1634:	c0 01       	movw	r24, r0
    1636:	2d 9f       	mul	r18, r29
    1638:	90 0d       	add	r25, r0
    163a:	3c 9f       	mul	r19, r28
    163c:	90 0d       	add	r25, r0
    163e:	11 24       	eor	r1, r1
    1640:	99 23       	and	r25, r25
    1642:	0c f4       	brge	.+2      	; 0x1646 <compute_area_of_trapezoid+0x4c>
    1644:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    1646:	95 95       	asr	r25
    1648:	87 95       	ror	r24
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    165c:	00 91 8f 02 	lds	r16, 0x028F
    1660:	10 91 90 02 	lds	r17, 0x0290
    1664:	01 15       	cp	r16, r1
    1666:	11 05       	cpc	r17, r1
    1668:	b9 f0       	breq	.+46     	; 0x1698 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    166a:	f8 01       	movw	r30, r16
    166c:	c4 85       	ldd	r28, Z+12	; 0x0c
    166e:	d5 85       	ldd	r29, Z+13	; 0x0d
    1670:	20 97       	sbiw	r28, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <fuzzification+0x38>
            if (mf!=NULL) {
    1674:	20 97       	sbiw	r28, 0x00	; 0
    1676:	29 f0       	breq	.+10     	; 0x1682 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    1678:	f8 01       	movw	r30, r16
    167a:	62 85       	ldd	r22, Z+10	; 0x0a
    167c:	73 85       	ldd	r23, Z+11	; 0x0b
    167e:	ce 01       	movw	r24, r28
    1680:	87 df       	rcall	.-242    	; 0x1590 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1682:	0c 88       	ldd	r0, Y+20	; 0x14
    1684:	dd 89       	ldd	r29, Y+21	; 0x15
    1686:	c0 2d       	mov	r28, r0
    1688:	20 97       	sbiw	r28, 0x00	; 0
    168a:	a1 f7       	brne	.-24     	; 0x1674 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    168c:	f8 01       	movw	r30, r16
    168e:	06 85       	ldd	r16, Z+14	; 0x0e
    1690:	17 85       	ldd	r17, Z+15	; 0x0f
    1692:	01 15       	cp	r16, r1
    1694:	11 05       	cpc	r17, r1
    1696:	49 f7       	brne	.-46     	; 0x166a <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    16aa:	c0 91 91 02 	lds	r28, 0x0291
    16ae:	d0 91 92 02 	lds	r29, 0x0292
    16b2:	20 97       	sbiw	r28, 0x00	; 0
    16b4:	b9 f1       	breq	.+110    	; 0x1724 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    16b6:	04 e6       	ldi	r16, 0x64	; 100
    16b8:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    16ba:	e8 81       	ld	r30, Y
    16bc:	f9 81       	ldd	r31, Y+1	; 0x01
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    16c2:	20 2f       	mov	r18, r16
    16c4:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    16c6:	a0 81       	ld	r26, Z
    16c8:	b1 81       	ldd	r27, Z+1	; 0x01
    16ca:	8d 91       	ld	r24, X+
    16cc:	9c 91       	ld	r25, X
    16ce:	82 17       	cp	r24, r18
    16d0:	93 07       	cpc	r25, r19
    16d2:	0c f4       	brge	.+2      	; 0x16d6 <rule_evaluation+0x34>
    16d4:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    16d6:	02 80       	ldd	r0, Z+2	; 0x02
    16d8:	f3 81       	ldd	r31, Z+3	; 0x03
    16da:	e0 2d       	mov	r30, r0
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	99 f7       	brne	.-26     	; 0x16c6 <rule_evaluation+0x24>
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    16e2:	20 2f       	mov	r18, r16
    16e4:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    16e6:	ea 81       	ldd	r30, Y+2	; 0x02
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	30 97       	sbiw	r30, 0x00	; 0
    16ec:	b1 f0       	breq	.+44     	; 0x171a <rule_evaluation+0x78>
    16ee:	72 2f       	mov	r23, r18
    16f0:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    16f2:	a0 81       	ld	r26, Z
    16f4:	b1 81       	ldd	r27, Z+1	; 0x01
    16f6:	8d 91       	ld	r24, X+
    16f8:	9c 91       	ld	r25, X
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	57 2f       	mov	r21, r23
    16fe:	46 2f       	mov	r20, r22
    1700:	28 17       	cp	r18, r24
    1702:	39 07       	cpc	r19, r25
    1704:	14 f4       	brge	.+4      	; 0x170a <rule_evaluation+0x68>
    1706:	58 2f       	mov	r21, r24
    1708:	49 2f       	mov	r20, r25
    170a:	5c 93       	st	X, r21
    170c:	11 96       	adiw	r26, 0x01	; 1
    170e:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1710:	02 80       	ldd	r0, Z+2	; 0x02
    1712:	f3 81       	ldd	r31, Z+3	; 0x03
    1714:	e0 2d       	mov	r30, r0
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	61 f7       	brne	.-40     	; 0x16f2 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    171a:	0c 80       	ldd	r0, Y+4	; 0x04
    171c:	dd 81       	ldd	r29, Y+5	; 0x05
    171e:	c0 2d       	mov	r28, r0
    1720:	20 97       	sbiw	r28, 0x00	; 0
    1722:	59 f6       	brne	.-106    	; 0x16ba <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    172e:	2f 92       	push	r2
    1730:	3f 92       	push	r3
    1732:	4f 92       	push	r4
    1734:	5f 92       	push	r5
    1736:	6f 92       	push	r6
    1738:	7f 92       	push	r7
    173a:	8f 92       	push	r8
    173c:	9f 92       	push	r9
    173e:	af 92       	push	r10
    1740:	bf 92       	push	r11
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	00 d0       	rcall	.+0      	; 0x1754 <defuzzification+0x26>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <defuzzification+0x28>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <defuzzification+0x2a>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    175c:	80 91 8d 02 	lds	r24, 0x028D
    1760:	90 91 8e 02 	lds	r25, 0x028E
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	89 2b       	or	r24, r25
    176a:	09 f4       	brne	.+2      	; 0x176e <defuzzification+0x40>
    176c:	84 c0       	rjmp	.+264    	; 0x1876 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    176e:	eb 81       	ldd	r30, Y+3	; 0x03
    1770:	fc 81       	ldd	r31, Y+4	; 0x04
    1772:	04 84       	ldd	r0, Z+12	; 0x0c
    1774:	f5 85       	ldd	r31, Z+13	; 0x0d
    1776:	e0 2d       	mov	r30, r0
    1778:	fe 83       	std	Y+6, r31	; 0x06
    177a:	ed 83       	std	Y+5, r30	; 0x05
    177c:	ef 2b       	or	r30, r31
    177e:	09 f4       	brne	.+2      	; 0x1782 <defuzzification+0x54>
    1780:	66 c0       	rjmp	.+204    	; 0x184e <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1782:	51 2c       	mov	r5, r1
    1784:	61 2c       	mov	r6, r1
    1786:	71 2c       	mov	r7, r1
    1788:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    178a:	31 2c       	mov	r3, r1
    178c:	21 2c       	mov	r2, r1
    178e:	19 82       	std	Y+1, r1	; 0x01
    1790:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	31 df       	rcall	.-414    	; 0x15fa <compute_area_of_trapezoid>
    1798:	bc 01       	movw	r22, r24
    179a:	88 27       	eor	r24, r24
    179c:	77 fd       	sbrc	r23, 7
    179e:	80 95       	com	r24
    17a0:	98 2f       	mov	r25, r24
    17a2:	25 d3       	rcall	.+1610   	; 0x1dee <__floatsisf>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    17a8:	ed 81       	ldd	r30, Y+5	; 0x05
    17aa:	fe 81       	ldd	r31, Y+6	; 0x06
    17ac:	04 85       	ldd	r16, Z+12	; 0x0c
    17ae:	15 85       	ldd	r17, Z+13	; 0x0d
    17b0:	b8 01       	movw	r22, r16
    17b2:	88 27       	eor	r24, r24
    17b4:	77 fd       	sbrc	r23, 7
    17b6:	80 95       	com	r24
    17b8:	98 2f       	mov	r25, r24
    17ba:	19 d3       	rcall	.+1586   	; 0x1dee <__floatsisf>
    17bc:	4b 01       	movw	r8, r22
    17be:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    17c0:	ed 81       	ldd	r30, Y+5	; 0x05
    17c2:	fe 81       	ldd	r31, Y+6	; 0x06
    17c4:	86 85       	ldd	r24, Z+14	; 0x0e
    17c6:	97 85       	ldd	r25, Z+15	; 0x0f
    17c8:	80 1b       	sub	r24, r16
    17ca:	91 0b       	sbc	r25, r17
    17cc:	bc 01       	movw	r22, r24
    17ce:	12 f4       	brpl	.+4      	; 0x17d4 <defuzzification+0xa6>
    17d0:	6f 5f       	subi	r22, 0xFF	; 255
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	75 95       	asr	r23
    17d6:	67 95       	ror	r22
            centroid = centroid + intermed;
    17d8:	88 27       	eor	r24, r24
    17da:	77 fd       	sbrc	r23, 7
    17dc:	80 95       	com	r24
    17de:	98 2f       	mov	r25, r24
    17e0:	06 d3       	rcall	.+1548   	; 0x1dee <__floatsisf>
    17e2:	a5 01       	movw	r20, r10
    17e4:	94 01       	movw	r18, r8
    17e6:	04 d2       	rcall	.+1032   	; 0x1bf0 <__addsf3>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    17ec:	c7 01       	movw	r24, r14
    17ee:	b6 01       	movw	r22, r12
    17f0:	8a d3       	rcall	.+1812   	; 0x1f06 <__mulsf3>
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	63 2d       	mov	r22, r3
    17f8:	72 2d       	mov	r23, r2
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	f8 d1       	rcall	.+1008   	; 0x1bf0 <__addsf3>
    1800:	36 2e       	mov	r3, r22
    1802:	27 2e       	mov	r2, r23
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1808:	a7 01       	movw	r20, r14
    180a:	96 01       	movw	r18, r12
    180c:	65 2d       	mov	r22, r5
    180e:	76 2d       	mov	r23, r6
    1810:	87 2d       	mov	r24, r7
    1812:	94 2d       	mov	r25, r4
    1814:	ed d1       	rcall	.+986    	; 0x1bf0 <__addsf3>
    1816:	56 2e       	mov	r5, r22
    1818:	67 2e       	mov	r6, r23
    181a:	78 2e       	mov	r7, r24
    181c:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    181e:	ed 81       	ldd	r30, Y+5	; 0x05
    1820:	fe 81       	ldd	r31, Y+6	; 0x06
    1822:	04 88       	ldd	r0, Z+20	; 0x14
    1824:	f5 89       	ldd	r31, Z+21	; 0x15
    1826:	e0 2d       	mov	r30, r0
    1828:	fe 83       	std	Y+6, r31	; 0x06
    182a:	ed 83       	std	Y+5, r30	; 0x05
    182c:	ef 2b       	or	r30, r31
    182e:	09 f0       	breq	.+2      	; 0x1832 <defuzzification+0x104>
    1830:	b0 cf       	rjmp	.-160    	; 0x1792 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    1832:	26 2f       	mov	r18, r22
    1834:	37 2f       	mov	r19, r23
    1836:	48 2f       	mov	r20, r24
    1838:	59 2f       	mov	r21, r25
    183a:	63 2d       	mov	r22, r3
    183c:	72 2d       	mov	r23, r2
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	3a d2       	rcall	.+1140   	; 0x1cb8 <__divsf3>
    1844:	26 2f       	mov	r18, r22
    1846:	37 2f       	mov	r19, r23
    1848:	48 2f       	mov	r20, r24
    184a:	59 2f       	mov	r21, r25
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    1856:	62 2f       	mov	r22, r18
    1858:	73 2f       	mov	r23, r19
    185a:	84 2f       	mov	r24, r20
    185c:	95 2f       	mov	r25, r21
    185e:	94 d2       	rcall	.+1320   	; 0x1d88 <__fixsfsi>
    1860:	eb 81       	ldd	r30, Y+3	; 0x03
    1862:	fc 81       	ldd	r31, Y+4	; 0x04
    1864:	73 87       	std	Z+11, r23	; 0x0b
    1866:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1868:	86 85       	ldd	r24, Z+14	; 0x0e
    186a:	97 85       	ldd	r25, Z+15	; 0x0f
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	89 2b       	or	r24, r25
    1872:	09 f0       	breq	.+2      	; 0x1876 <defuzzification+0x148>
    1874:	7c cf       	rjmp	.-264    	; 0x176e <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    1876:	26 96       	adiw	r28, 0x06	; 6
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	7f 90       	pop	r7
    189c:	6f 90       	pop	r6
    189e:	5f 90       	pop	r5
    18a0:	4f 90       	pop	r4
    18a2:	3f 90       	pop	r3
    18a4:	2f 90       	pop	r2
    18a6:	08 95       	ret

000018a8 <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	0f 92       	push	r0
    18b0:	11 24       	eor	r1, r1
    18b2:	0b b6       	in	r0, 0x3b	; 59
    18b4:	0f 92       	push	r0
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	80 91 ce 00 	lds	r24, 0x00CE
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <__vector_28+0x28>
    18c6:	10 92 b4 02 	sts	0x02B4, r1
    18ca:	10 92 b3 02 	sts	0x02B3, r1
    18ce:	10 c0       	rjmp	.+32     	; 0x18f0 <__vector_28+0x48>
    18d0:	e0 91 b3 02 	lds	r30, 0x02B3
    18d4:	f0 91 b4 02 	lds	r31, 0x02B4
    18d8:	ed 56       	subi	r30, 0x6D	; 109
    18da:	fd 4f       	sbci	r31, 0xFD	; 253
    18dc:	80 83       	st	Z, r24
    18de:	80 91 b3 02 	lds	r24, 0x02B3
    18e2:	90 91 b4 02 	lds	r25, 0x02B4
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	90 93 b4 02 	sts	0x02B4, r25
    18ec:	80 93 b3 02 	sts	0x02B3, r24
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	0f 90       	pop	r0
    18fa:	0b be       	out	0x3b, r0	; 59
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <SPI_slaveInit>:
    1906:	80 e4       	ldi	r24, 0x40	; 64
    1908:	84 b9       	out	0x04, r24	; 4
    190a:	80 ec       	ldi	r24, 0xC0	; 192
    190c:	8c bd       	out	0x2c, r24	; 44
    190e:	08 95       	ret

00001910 <carInit>:
    1910:	7d d0       	rcall	.+250    	; 0x1a0c <pwmInit>
    1912:	f9 df       	rcall	.-14     	; 0x1906 <SPI_slaveInit>
    1914:	8d ec       	ldi	r24, 0xCD	; 205
    1916:	9a e0       	ldi	r25, 0x0A	; 10
    1918:	88 d0       	rcall	.+272    	; 0x1a2a <setESC>
    191a:	84 e6       	ldi	r24, 0x64	; 100
    191c:	9a e0       	ldi	r25, 0x0A	; 10
    191e:	a0 c0       	rjmp	.+320    	; 0x1a60 <setServo>
    1920:	08 95       	ret

00001922 <USART1_init>:
    1922:	ec ec       	ldi	r30, 0xCC	; 204
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	11 82       	std	Z+1, r1	; 0x01
    1928:	10 82       	st	Z, r1
    192a:	20 e9       	ldi	r18, 0x90	; 144
    192c:	20 93 c9 00 	sts	0x00C9, r18
    1930:	2e e0       	ldi	r18, 0x0E	; 14
    1932:	20 93 ca 00 	sts	0x00CA, r18
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	08 95       	ret

0000193c <Sens_info_read>:
    193c:	dc 01       	movw	r26, r24
    193e:	e9 ec       	ldi	r30, 0xC9	; 201
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 77       	andi	r24, 0x7F	; 127
    1946:	80 83       	st	Z, r24
    1948:	80 91 93 02 	lds	r24, 0x0293
    194c:	8c 93       	st	X, r24
    194e:	80 91 94 02 	lds	r24, 0x0294
    1952:	1e 96       	adiw	r26, 0x0e	; 14
    1954:	8c 93       	st	X, r24
    1956:	1e 97       	sbiw	r26, 0x0e	; 14
    1958:	80 91 95 02 	lds	r24, 0x0295
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	8c 93       	st	X, r24
    1960:	10 92 b4 02 	sts	0x02B4, r1
    1964:	10 92 b3 02 	sts	0x02B3, r1
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	80 83       	st	Z, r24
    196e:	08 95       	ret

00001970 <__vector_18>:
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	2f 93       	push	r18
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	80 91 fe 01 	lds	r24, 0x01FE
    1984:	90 91 ff 01 	lds	r25, 0x01FF
    1988:	8b 39       	cpi	r24, 0x9B	; 155
    198a:	26 e9       	ldi	r18, 0x96	; 150
    198c:	92 07       	cpc	r25, r18
    198e:	30 f4       	brcc	.+12     	; 0x199c <__vector_18+0x2c>
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	90 93 ff 01 	sts	0x01FF, r25
    1996:	80 93 fe 01 	sts	0x01FE, r24
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <__vector_18+0x3e>
    199c:	80 91 00 02 	lds	r24, 0x0200
    19a0:	81 60       	ori	r24, 0x01	; 1
    19a2:	80 93 00 02 	sts	0x0200, r24
    19a6:	10 92 ff 01 	sts	0x01FF, r1
    19aa:	10 92 fe 01 	sts	0x01FE, r1
    19ae:	9f 91       	pop	r25
    19b0:	8f 91       	pop	r24
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <main>:
	}

	/* main function
	*/
	int main (void)
	{
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	60 97       	sbiw	r28, 0x10	; 16
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
		FLC_road(2660, 160);
    19d2:	60 ea       	ldi	r22, 0xA0	; 160
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	84 e6       	ldi	r24, 0x64	; 100
    19d8:	9a e0       	ldi	r25, 0x0A	; 10
    19da:	22 d9       	rcall	.-3516   	; 0xc20 <FLC_road>
		carInit();
    19dc:	99 df       	rcall	.-206    	; 0x1910 <carInit>
		setESC(NEUTRAL+70);
    19de:	83 e1       	ldi	r24, 0x13	; 19
    19e0:	9b e0       	ldi	r25, 0x0B	; 11
    19e2:	23 d0       	rcall	.+70     	; 0x1a2a <setESC>
		sei();
    19e4:	78 94       	sei
		sens_info_ptr = &sensor_info;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    19e6:	87 e0       	ldi	r24, 0x07	; 7
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9b df       	rcall	.-202    	; 0x1922 <USART1_init>
		int v;
		int d;
		

		//Setting for Testing
		DDRA = 0xFF;
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	81 b9       	out	0x01, r24	; 1
		
		while (1) {
			
			// if (counter_UART1_reciever > 2) {
				
				Sens_info_read(sens_info_ptr);
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	a3 df       	rcall	.-186    	; 0x193c <Sens_info_read>
				
				c = (int) sensor_info.dist_right_line;
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
				
				cli();
    19f6:	f8 94       	cli
				
				FLC_steering(125, 2660, 40);
    19f8:	48 e2       	ldi	r20, 0x28	; 40
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	64 e6       	ldi	r22, 0x64	; 100
    19fe:	7a e0       	ldi	r23, 0x0A	; 10
    1a00:	8d e7       	ldi	r24, 0x7D	; 125
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
				//FLC_road(2830,300);
				sei();
    1a08:	78 94       	sei
    1a0a:	f2 cf       	rjmp	.-28     	; 0x19f0 <main+0x32>

00001a0c <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1a0c:	80 e3       	ldi	r24, 0x30	; 48
    1a0e:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1a10:	82 ea       	ldi	r24, 0xA2	; 162
    1a12:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	9f e8       	ldi	r25, 0x8F	; 143
    1a1a:	90 93 87 00 	sts	0x0087, r25
    1a1e:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1a22:	8a e1       	ldi	r24, 0x1A	; 26
    1a24:	80 93 81 00 	sts	0x0081, r24
    1a28:	08 95       	ret

00001a2a <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1a2a:	80 36       	cpi	r24, 0x60	; 96
    1a2c:	2a e0       	ldi	r18, 0x0A	; 10
    1a2e:	92 07       	cpc	r25, r18
    1a30:	3c f4       	brge	.+14     	; 0x1a40 <setESC+0x16>
	{
		OCR1A = MINESC;
    1a32:	8f e5       	ldi	r24, 0x5F	; 95
    1a34:	9a e0       	ldi	r25, 0x0A	; 10
    1a36:	90 93 89 00 	sts	0x0089, r25
    1a3a:	80 93 88 00 	sts	0x0088, r24
    1a3e:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1a40:	8b 33       	cpi	r24, 0x3B	; 59
    1a42:	2b e0       	ldi	r18, 0x0B	; 11
    1a44:	92 07       	cpc	r25, r18
    1a46:	3c f0       	brlt	.+14     	; 0x1a56 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1a48:	8b e3       	ldi	r24, 0x3B	; 59
    1a4a:	9b e0       	ldi	r25, 0x0B	; 11
    1a4c:	90 93 89 00 	sts	0x0089, r25
    1a50:	80 93 88 00 	sts	0x0088, r24
    1a54:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1a56:	90 93 89 00 	sts	0x0089, r25
    1a5a:	80 93 88 00 	sts	0x0088, r24
    1a5e:	08 95       	ret

00001a60 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    1a60:	87 3e       	cpi	r24, 0xE7	; 231
    1a62:	27 e0       	ldi	r18, 0x07	; 7
    1a64:	92 07       	cpc	r25, r18
    1a66:	3c f4       	brge	.+14     	; 0x1a76 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1a68:	86 ee       	ldi	r24, 0xE6	; 230
    1a6a:	97 e0       	ldi	r25, 0x07	; 7
    1a6c:	90 93 8b 00 	sts	0x008B, r25
    1a70:	80 93 8a 00 	sts	0x008A, r24
    1a74:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1a76:	8f 33       	cpi	r24, 0x3F	; 63
    1a78:	2c e0       	ldi	r18, 0x0C	; 12
    1a7a:	92 07       	cpc	r25, r18
    1a7c:	3c f0       	brlt	.+14     	; 0x1a8c <setServo+0x2c>

		OCR1B = MAXLEFT;
    1a7e:	8f e3       	ldi	r24, 0x3F	; 63
    1a80:	9c e0       	ldi	r25, 0x0C	; 12
    1a82:	90 93 8b 00 	sts	0x008B, r25
    1a86:	80 93 8a 00 	sts	0x008A, r24
    1a8a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    1a8c:	90 93 8b 00 	sts	0x008B, r25
    1a90:	80 93 8a 00 	sts	0x008A, r24
    1a94:	08 95       	ret

00001a96 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	0b b6       	in	r0, 0x3b	; 59
    1aa2:	0f 92       	push	r0
    1aa4:	2f 93       	push	r18
    1aa6:	3f 93       	push	r19
    1aa8:	4f 93       	push	r20
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1ab6:	80 91 8b 02 	lds	r24, 0x028B
    1aba:	90 91 8c 02 	lds	r25, 0x028C
    1abe:	80 34       	cpi	r24, 0x40	; 64
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	31 f4       	brne	.+12     	; 0x1ad0 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	80 93 c1 02 	sts	0x02C1, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1aca:	80 91 c6 00 	lds	r24, 0x00C6
    1ace:	16 c0       	rjmp	.+44     	; 0x1afc <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1ad0:	80 34       	cpi	r24, 0x40	; 64
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	e8 f4       	brcc	.+58     	; 0x1b10 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1ad6:	e9 e8       	ldi	r30, 0x89	; 137
    1ad8:	f2 e0       	ldi	r31, 0x02	; 2
    1ada:	20 81       	ld	r18, Z
    1adc:	31 81       	ldd	r19, Z+1	; 0x01
    1ade:	40 91 c6 00 	lds	r20, 0x00C6
    1ae2:	d9 01       	movw	r26, r18
    1ae4:	a9 5b       	subi	r26, 0xB9	; 185
    1ae6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ae8:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	31 83       	std	Z+1, r19	; 0x01
    1af0:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	90 93 8c 02 	sts	0x028C, r25
    1af8:	80 93 8b 02 	sts	0x028B, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1afc:	80 91 8b 02 	lds	r24, 0x028B
    1b00:	90 91 8c 02 	lds	r25, 0x028C
    1b04:	80 34       	cpi	r24, 0x40	; 64
    1b06:	91 05       	cpc	r25, r1
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 bf 02 	sts	0x02BF, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1b10:	80 91 89 02 	lds	r24, 0x0289
    1b14:	90 91 8a 02 	lds	r25, 0x028A
    1b18:	80 34       	cpi	r24, 0x40	; 64
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	21 f4       	brne	.+8      	; 0x1b26 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1b1e:	10 92 8a 02 	sts	0x028A, r1
    1b22:	10 92 89 02 	sts	0x0289, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 be 02 	sts	0x02BE, r24
}
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0b be       	out	0x3b, r0	; 59
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_22>:




ISR(USART0_TX_vect)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	0b b6       	in	r0, 0x3b	; 59
    1b58:	0f 92       	push	r0
    1b5a:	8f 93       	push	r24
    1b5c:	9f 93       	push	r25
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1b62:	80 91 45 02 	lds	r24, 0x0245
    1b66:	90 91 46 02 	lds	r25, 0x0246
    1b6a:	80 34       	cpi	r24, 0x40	; 64
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	19 f4       	brne	.+6      	; 0x1b76 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1b70:	10 92 bd 02 	sts	0x02BD, r1
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1b76:	89 2b       	or	r24, r25
    1b78:	b9 f0       	breq	.+46     	; 0x1ba8 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1b7a:	e0 91 41 02 	lds	r30, 0x0241
    1b7e:	f0 91 42 02 	lds	r31, 0x0242
    1b82:	ef 5f       	subi	r30, 0xFF	; 255
    1b84:	fd 4f       	sbci	r31, 0xFD	; 253
    1b86:	80 81       	ld	r24, Z
    1b88:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1b8c:	e1 e4       	ldi	r30, 0x41	; 65
    1b8e:	f2 e0       	ldi	r31, 0x02	; 2
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1b9a:	e5 e4       	ldi	r30, 0x45	; 69
    1b9c:	f2 e0       	ldi	r31, 0x02	; 2
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1ba8:	80 91 41 02 	lds	r24, 0x0241
    1bac:	90 91 42 02 	lds	r25, 0x0242
    1bb0:	80 34       	cpi	r24, 0x40	; 64
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1bb6:	10 92 42 02 	sts	0x0242, r1
    1bba:	10 92 41 02 	sts	0x0241, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1bbe:	80 91 45 02 	lds	r24, 0x0245
    1bc2:	90 91 46 02 	lds	r25, 0x0246
    1bc6:	89 2b       	or	r24, r25
    1bc8:	39 f4       	brne	.+14     	; 0x1bd8 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1bca:	10 92 c0 02 	sts	0x02C0, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1bce:	e1 ec       	ldi	r30, 0xC1	; 193
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 7b       	andi	r24, 0xBF	; 191
    1bd6:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1bd8:	ff 91       	pop	r31
    1bda:	ef 91       	pop	r30
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	0f 90       	pop	r0
    1be2:	0b be       	out	0x3b, r0	; 59
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <__subsf3>:
    1bee:	50 58       	subi	r21, 0x80	; 128

00001bf0 <__addsf3>:
    1bf0:	bb 27       	eor	r27, r27
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	0e d0       	rcall	.+28     	; 0x1c12 <__addsf3x>
    1bf6:	4d c1       	rjmp	.+666    	; 0x1e92 <__fp_round>
    1bf8:	3e d1       	rcall	.+636    	; 0x1e76 <__fp_pscA>
    1bfa:	30 f0       	brcs	.+12     	; 0x1c08 <__addsf3+0x18>
    1bfc:	43 d1       	rcall	.+646    	; 0x1e84 <__fp_pscB>
    1bfe:	20 f0       	brcs	.+8      	; 0x1c08 <__addsf3+0x18>
    1c00:	31 f4       	brne	.+12     	; 0x1c0e <__addsf3+0x1e>
    1c02:	9f 3f       	cpi	r25, 0xFF	; 255
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <__addsf3+0x1a>
    1c06:	1e f4       	brtc	.+6      	; 0x1c0e <__addsf3+0x1e>
    1c08:	33 c1       	rjmp	.+614    	; 0x1e70 <__fp_nan>
    1c0a:	0e f4       	brtc	.+2      	; 0x1c0e <__addsf3+0x1e>
    1c0c:	e0 95       	com	r30
    1c0e:	e7 fb       	bst	r30, 7
    1c10:	29 c1       	rjmp	.+594    	; 0x1e64 <__fp_inf>

00001c12 <__addsf3x>:
    1c12:	e9 2f       	mov	r30, r25
    1c14:	4f d1       	rcall	.+670    	; 0x1eb4 <__fp_split3>
    1c16:	80 f3       	brcs	.-32     	; 0x1bf8 <__addsf3+0x8>
    1c18:	ba 17       	cp	r27, r26
    1c1a:	62 07       	cpc	r22, r18
    1c1c:	73 07       	cpc	r23, r19
    1c1e:	84 07       	cpc	r24, r20
    1c20:	95 07       	cpc	r25, r21
    1c22:	18 f0       	brcs	.+6      	; 0x1c2a <__addsf3x+0x18>
    1c24:	71 f4       	brne	.+28     	; 0x1c42 <__addsf3x+0x30>
    1c26:	9e f5       	brtc	.+102    	; 0x1c8e <__addsf3x+0x7c>
    1c28:	67 c1       	rjmp	.+718    	; 0x1ef8 <__fp_zero>
    1c2a:	0e f4       	brtc	.+2      	; 0x1c2e <__addsf3x+0x1c>
    1c2c:	e0 95       	com	r30
    1c2e:	0b 2e       	mov	r0, r27
    1c30:	ba 2f       	mov	r27, r26
    1c32:	a0 2d       	mov	r26, r0
    1c34:	0b 01       	movw	r0, r22
    1c36:	b9 01       	movw	r22, r18
    1c38:	90 01       	movw	r18, r0
    1c3a:	0c 01       	movw	r0, r24
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	a0 01       	movw	r20, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	ff 27       	eor	r31, r31
    1c44:	59 1b       	sub	r21, r25
    1c46:	99 f0       	breq	.+38     	; 0x1c6e <__addsf3x+0x5c>
    1c48:	59 3f       	cpi	r21, 0xF9	; 249
    1c4a:	50 f4       	brcc	.+20     	; 0x1c60 <__addsf3x+0x4e>
    1c4c:	50 3e       	cpi	r21, 0xE0	; 224
    1c4e:	68 f1       	brcs	.+90     	; 0x1caa <__addsf3x+0x98>
    1c50:	1a 16       	cp	r1, r26
    1c52:	f0 40       	sbci	r31, 0x00	; 0
    1c54:	a2 2f       	mov	r26, r18
    1c56:	23 2f       	mov	r18, r19
    1c58:	34 2f       	mov	r19, r20
    1c5a:	44 27       	eor	r20, r20
    1c5c:	58 5f       	subi	r21, 0xF8	; 248
    1c5e:	f3 cf       	rjmp	.-26     	; 0x1c46 <__addsf3x+0x34>
    1c60:	46 95       	lsr	r20
    1c62:	37 95       	ror	r19
    1c64:	27 95       	ror	r18
    1c66:	a7 95       	ror	r26
    1c68:	f0 40       	sbci	r31, 0x00	; 0
    1c6a:	53 95       	inc	r21
    1c6c:	c9 f7       	brne	.-14     	; 0x1c60 <__addsf3x+0x4e>
    1c6e:	7e f4       	brtc	.+30     	; 0x1c8e <__addsf3x+0x7c>
    1c70:	1f 16       	cp	r1, r31
    1c72:	ba 0b       	sbc	r27, r26
    1c74:	62 0b       	sbc	r22, r18
    1c76:	73 0b       	sbc	r23, r19
    1c78:	84 0b       	sbc	r24, r20
    1c7a:	ba f0       	brmi	.+46     	; 0x1caa <__addsf3x+0x98>
    1c7c:	91 50       	subi	r25, 0x01	; 1
    1c7e:	a1 f0       	breq	.+40     	; 0x1ca8 <__addsf3x+0x96>
    1c80:	ff 0f       	add	r31, r31
    1c82:	bb 1f       	adc	r27, r27
    1c84:	66 1f       	adc	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	88 1f       	adc	r24, r24
    1c8a:	c2 f7       	brpl	.-16     	; 0x1c7c <__addsf3x+0x6a>
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <__addsf3x+0x98>
    1c8e:	ba 0f       	add	r27, r26
    1c90:	62 1f       	adc	r22, r18
    1c92:	73 1f       	adc	r23, r19
    1c94:	84 1f       	adc	r24, r20
    1c96:	48 f4       	brcc	.+18     	; 0x1caa <__addsf3x+0x98>
    1c98:	87 95       	ror	r24
    1c9a:	77 95       	ror	r23
    1c9c:	67 95       	ror	r22
    1c9e:	b7 95       	ror	r27
    1ca0:	f7 95       	ror	r31
    1ca2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <__addsf3x+0x96>
    1ca6:	b3 cf       	rjmp	.-154    	; 0x1c0e <__addsf3+0x1e>
    1ca8:	93 95       	inc	r25
    1caa:	88 0f       	add	r24, r24
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <__addsf3x+0x9e>
    1cae:	99 27       	eor	r25, r25
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	97 95       	ror	r25
    1cb4:	87 95       	ror	r24
    1cb6:	08 95       	ret

00001cb8 <__divsf3>:
    1cb8:	0c d0       	rcall	.+24     	; 0x1cd2 <__divsf3x>
    1cba:	eb c0       	rjmp	.+470    	; 0x1e92 <__fp_round>
    1cbc:	e3 d0       	rcall	.+454    	; 0x1e84 <__fp_pscB>
    1cbe:	40 f0       	brcs	.+16     	; 0x1cd0 <__divsf3+0x18>
    1cc0:	da d0       	rcall	.+436    	; 0x1e76 <__fp_pscA>
    1cc2:	30 f0       	brcs	.+12     	; 0x1cd0 <__divsf3+0x18>
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <__divsf3+0x16>
    1cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <__divsf3+0x18>
    1cca:	cc c0       	rjmp	.+408    	; 0x1e64 <__fp_inf>
    1ccc:	51 11       	cpse	r21, r1
    1cce:	15 c1       	rjmp	.+554    	; 0x1efa <__fp_szero>
    1cd0:	cf c0       	rjmp	.+414    	; 0x1e70 <__fp_nan>

00001cd2 <__divsf3x>:
    1cd2:	f0 d0       	rcall	.+480    	; 0x1eb4 <__fp_split3>
    1cd4:	98 f3       	brcs	.-26     	; 0x1cbc <__divsf3+0x4>

00001cd6 <__divsf3_pse>:
    1cd6:	99 23       	and	r25, r25
    1cd8:	c9 f3       	breq	.-14     	; 0x1ccc <__divsf3+0x14>
    1cda:	55 23       	and	r21, r21
    1cdc:	b1 f3       	breq	.-20     	; 0x1cca <__divsf3+0x12>
    1cde:	95 1b       	sub	r25, r21
    1ce0:	55 0b       	sbc	r21, r21
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	62 17       	cp	r22, r18
    1ce8:	73 07       	cpc	r23, r19
    1cea:	84 07       	cpc	r24, r20
    1cec:	38 f0       	brcs	.+14     	; 0x1cfc <__divsf3_pse+0x26>
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	aa 1f       	adc	r26, r26
    1cfa:	a9 f3       	breq	.-22     	; 0x1ce6 <__divsf3_pse+0x10>
    1cfc:	33 d0       	rcall	.+102    	; 0x1d64 <__divsf3_pse+0x8e>
    1cfe:	0e 2e       	mov	r0, r30
    1d00:	3a f0       	brmi	.+14     	; 0x1d10 <__divsf3_pse+0x3a>
    1d02:	e0 e8       	ldi	r30, 0x80	; 128
    1d04:	30 d0       	rcall	.+96     	; 0x1d66 <__divsf3_pse+0x90>
    1d06:	91 50       	subi	r25, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	e6 95       	lsr	r30
    1d0c:	00 1c       	adc	r0, r0
    1d0e:	ca f7       	brpl	.-14     	; 0x1d02 <__divsf3_pse+0x2c>
    1d10:	29 d0       	rcall	.+82     	; 0x1d64 <__divsf3_pse+0x8e>
    1d12:	fe 2f       	mov	r31, r30
    1d14:	27 d0       	rcall	.+78     	; 0x1d64 <__divsf3_pse+0x8e>
    1d16:	66 0f       	add	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	26 17       	cp	r18, r22
    1d20:	37 07       	cpc	r19, r23
    1d22:	48 07       	cpc	r20, r24
    1d24:	ab 07       	cpc	r26, r27
    1d26:	b0 e8       	ldi	r27, 0x80	; 128
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <__divsf3_pse+0x56>
    1d2a:	bb 0b       	sbc	r27, r27
    1d2c:	80 2d       	mov	r24, r0
    1d2e:	bf 01       	movw	r22, r30
    1d30:	ff 27       	eor	r31, r31
    1d32:	93 58       	subi	r25, 0x83	; 131
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	2a f0       	brmi	.+10     	; 0x1d42 <__divsf3_pse+0x6c>
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	68 f0       	brcs	.+26     	; 0x1d58 <__divsf3_pse+0x82>
    1d3e:	92 c0       	rjmp	.+292    	; 0x1e64 <__fp_inf>
    1d40:	dc c0       	rjmp	.+440    	; 0x1efa <__fp_szero>
    1d42:	5f 3f       	cpi	r21, 0xFF	; 255
    1d44:	ec f3       	brlt	.-6      	; 0x1d40 <__divsf3_pse+0x6a>
    1d46:	98 3e       	cpi	r25, 0xE8	; 232
    1d48:	dc f3       	brlt	.-10     	; 0x1d40 <__divsf3_pse+0x6a>
    1d4a:	86 95       	lsr	r24
    1d4c:	77 95       	ror	r23
    1d4e:	67 95       	ror	r22
    1d50:	b7 95       	ror	r27
    1d52:	f7 95       	ror	r31
    1d54:	9f 5f       	subi	r25, 0xFF	; 255
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <__divsf3_pse+0x74>
    1d58:	88 0f       	add	r24, r24
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	96 95       	lsr	r25
    1d5e:	87 95       	ror	r24
    1d60:	97 f9       	bld	r25, 7
    1d62:	08 95       	ret
    1d64:	e1 e0       	ldi	r30, 0x01	; 1
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	62 17       	cp	r22, r18
    1d70:	73 07       	cpc	r23, r19
    1d72:	84 07       	cpc	r24, r20
    1d74:	ba 07       	cpc	r27, r26
    1d76:	20 f0       	brcs	.+8      	; 0x1d80 <__divsf3_pse+0xaa>
    1d78:	62 1b       	sub	r22, r18
    1d7a:	73 0b       	sbc	r23, r19
    1d7c:	84 0b       	sbc	r24, r20
    1d7e:	ba 0b       	sbc	r27, r26
    1d80:	ee 1f       	adc	r30, r30
    1d82:	88 f7       	brcc	.-30     	; 0x1d66 <__divsf3_pse+0x90>
    1d84:	e0 95       	com	r30
    1d86:	08 95       	ret

00001d88 <__fixsfsi>:
    1d88:	04 d0       	rcall	.+8      	; 0x1d92 <__fixunssfsi>
    1d8a:	68 94       	set
    1d8c:	b1 11       	cpse	r27, r1
    1d8e:	b5 c0       	rjmp	.+362    	; 0x1efa <__fp_szero>
    1d90:	08 95       	ret

00001d92 <__fixunssfsi>:
    1d92:	98 d0       	rcall	.+304    	; 0x1ec4 <__fp_splitA>
    1d94:	88 f0       	brcs	.+34     	; 0x1db8 <__fixunssfsi+0x26>
    1d96:	9f 57       	subi	r25, 0x7F	; 127
    1d98:	90 f0       	brcs	.+36     	; 0x1dbe <__fixunssfsi+0x2c>
    1d9a:	b9 2f       	mov	r27, r25
    1d9c:	99 27       	eor	r25, r25
    1d9e:	b7 51       	subi	r27, 0x17	; 23
    1da0:	a0 f0       	brcs	.+40     	; 0x1dca <__fixunssfsi+0x38>
    1da2:	d1 f0       	breq	.+52     	; 0x1dd8 <__fixunssfsi+0x46>
    1da4:	66 0f       	add	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	1a f0       	brmi	.+6      	; 0x1db4 <__fixunssfsi+0x22>
    1dae:	ba 95       	dec	r27
    1db0:	c9 f7       	brne	.-14     	; 0x1da4 <__fixunssfsi+0x12>
    1db2:	12 c0       	rjmp	.+36     	; 0x1dd8 <__fixunssfsi+0x46>
    1db4:	b1 30       	cpi	r27, 0x01	; 1
    1db6:	81 f0       	breq	.+32     	; 0x1dd8 <__fixunssfsi+0x46>
    1db8:	9f d0       	rcall	.+318    	; 0x1ef8 <__fp_zero>
    1dba:	b1 e0       	ldi	r27, 0x01	; 1
    1dbc:	08 95       	ret
    1dbe:	9c c0       	rjmp	.+312    	; 0x1ef8 <__fp_zero>
    1dc0:	67 2f       	mov	r22, r23
    1dc2:	78 2f       	mov	r23, r24
    1dc4:	88 27       	eor	r24, r24
    1dc6:	b8 5f       	subi	r27, 0xF8	; 248
    1dc8:	39 f0       	breq	.+14     	; 0x1dd8 <__fixunssfsi+0x46>
    1dca:	b9 3f       	cpi	r27, 0xF9	; 249
    1dcc:	cc f3       	brlt	.-14     	; 0x1dc0 <__fixunssfsi+0x2e>
    1dce:	86 95       	lsr	r24
    1dd0:	77 95       	ror	r23
    1dd2:	67 95       	ror	r22
    1dd4:	b3 95       	inc	r27
    1dd6:	d9 f7       	brne	.-10     	; 0x1dce <__fixunssfsi+0x3c>
    1dd8:	3e f4       	brtc	.+14     	; 0x1de8 <__fixunssfsi+0x56>
    1dda:	90 95       	com	r25
    1ddc:	80 95       	com	r24
    1dde:	70 95       	com	r23
    1de0:	61 95       	neg	r22
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	8f 4f       	sbci	r24, 0xFF	; 255
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	08 95       	ret

00001dea <__floatunsisf>:
    1dea:	e8 94       	clt
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <__floatsisf+0x12>

00001dee <__floatsisf>:
    1dee:	97 fb       	bst	r25, 7
    1df0:	3e f4       	brtc	.+14     	; 0x1e00 <__floatsisf+0x12>
    1df2:	90 95       	com	r25
    1df4:	80 95       	com	r24
    1df6:	70 95       	com	r23
    1df8:	61 95       	neg	r22
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	99 23       	and	r25, r25
    1e02:	a9 f0       	breq	.+42     	; 0x1e2e <__floatsisf+0x40>
    1e04:	f9 2f       	mov	r31, r25
    1e06:	96 e9       	ldi	r25, 0x96	; 150
    1e08:	bb 27       	eor	r27, r27
    1e0a:	93 95       	inc	r25
    1e0c:	f6 95       	lsr	r31
    1e0e:	87 95       	ror	r24
    1e10:	77 95       	ror	r23
    1e12:	67 95       	ror	r22
    1e14:	b7 95       	ror	r27
    1e16:	f1 11       	cpse	r31, r1
    1e18:	f8 cf       	rjmp	.-16     	; 0x1e0a <__floatsisf+0x1c>
    1e1a:	fa f4       	brpl	.+62     	; 0x1e5a <__floatsisf+0x6c>
    1e1c:	bb 0f       	add	r27, r27
    1e1e:	11 f4       	brne	.+4      	; 0x1e24 <__floatsisf+0x36>
    1e20:	60 ff       	sbrs	r22, 0
    1e22:	1b c0       	rjmp	.+54     	; 0x1e5a <__floatsisf+0x6c>
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	16 c0       	rjmp	.+44     	; 0x1e5a <__floatsisf+0x6c>
    1e2e:	88 23       	and	r24, r24
    1e30:	11 f0       	breq	.+4      	; 0x1e36 <__floatsisf+0x48>
    1e32:	96 e9       	ldi	r25, 0x96	; 150
    1e34:	11 c0       	rjmp	.+34     	; 0x1e58 <__floatsisf+0x6a>
    1e36:	77 23       	and	r23, r23
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <__floatsisf+0x54>
    1e3a:	9e e8       	ldi	r25, 0x8E	; 142
    1e3c:	87 2f       	mov	r24, r23
    1e3e:	76 2f       	mov	r23, r22
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <__floatsisf+0x5e>
    1e42:	66 23       	and	r22, r22
    1e44:	71 f0       	breq	.+28     	; 0x1e62 <__floatsisf+0x74>
    1e46:	96 e8       	ldi	r25, 0x86	; 134
    1e48:	86 2f       	mov	r24, r22
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	2a f0       	brmi	.+10     	; 0x1e5a <__floatsisf+0x6c>
    1e50:	9a 95       	dec	r25
    1e52:	66 0f       	add	r22, r22
    1e54:	77 1f       	adc	r23, r23
    1e56:	88 1f       	adc	r24, r24
    1e58:	da f7       	brpl	.-10     	; 0x1e50 <__floatsisf+0x62>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	97 f9       	bld	r25, 7
    1e62:	08 95       	ret

00001e64 <__fp_inf>:
    1e64:	97 f9       	bld	r25, 7
    1e66:	9f 67       	ori	r25, 0x7F	; 127
    1e68:	80 e8       	ldi	r24, 0x80	; 128
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	08 95       	ret

00001e70 <__fp_nan>:
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	80 ec       	ldi	r24, 0xC0	; 192
    1e74:	08 95       	ret

00001e76 <__fp_pscA>:
    1e76:	00 24       	eor	r0, r0
    1e78:	0a 94       	dec	r0
    1e7a:	16 16       	cp	r1, r22
    1e7c:	17 06       	cpc	r1, r23
    1e7e:	18 06       	cpc	r1, r24
    1e80:	09 06       	cpc	r0, r25
    1e82:	08 95       	ret

00001e84 <__fp_pscB>:
    1e84:	00 24       	eor	r0, r0
    1e86:	0a 94       	dec	r0
    1e88:	12 16       	cp	r1, r18
    1e8a:	13 06       	cpc	r1, r19
    1e8c:	14 06       	cpc	r1, r20
    1e8e:	05 06       	cpc	r0, r21
    1e90:	08 95       	ret

00001e92 <__fp_round>:
    1e92:	09 2e       	mov	r0, r25
    1e94:	03 94       	inc	r0
    1e96:	00 0c       	add	r0, r0
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <__fp_round+0xc>
    1e9a:	88 23       	and	r24, r24
    1e9c:	52 f0       	brmi	.+20     	; 0x1eb2 <__fp_round+0x20>
    1e9e:	bb 0f       	add	r27, r27
    1ea0:	40 f4       	brcc	.+16     	; 0x1eb2 <__fp_round+0x20>
    1ea2:	bf 2b       	or	r27, r31
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <__fp_round+0x18>
    1ea6:	60 ff       	sbrs	r22, 0
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <__fp_round+0x20>
    1eaa:	6f 5f       	subi	r22, 0xFF	; 255
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	08 95       	ret

00001eb4 <__fp_split3>:
    1eb4:	57 fd       	sbrc	r21, 7
    1eb6:	90 58       	subi	r25, 0x80	; 128
    1eb8:	44 0f       	add	r20, r20
    1eba:	55 1f       	adc	r21, r21
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <__fp_splitA+0x10>
    1ebe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <__fp_splitA+0x1a>
    1ec2:	47 95       	ror	r20

00001ec4 <__fp_splitA>:
    1ec4:	88 0f       	add	r24, r24
    1ec6:	97 fb       	bst	r25, 7
    1ec8:	99 1f       	adc	r25, r25
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <__fp_splitA+0x20>
    1ecc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ece:	79 f0       	breq	.+30     	; 0x1eee <__fp_splitA+0x2a>
    1ed0:	87 95       	ror	r24
    1ed2:	08 95       	ret
    1ed4:	12 16       	cp	r1, r18
    1ed6:	13 06       	cpc	r1, r19
    1ed8:	14 06       	cpc	r1, r20
    1eda:	55 1f       	adc	r21, r21
    1edc:	f2 cf       	rjmp	.-28     	; 0x1ec2 <__fp_split3+0xe>
    1ede:	46 95       	lsr	r20
    1ee0:	f1 df       	rcall	.-30     	; 0x1ec4 <__fp_splitA>
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <__fp_splitA+0x30>
    1ee4:	16 16       	cp	r1, r22
    1ee6:	17 06       	cpc	r1, r23
    1ee8:	18 06       	cpc	r1, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	f1 cf       	rjmp	.-30     	; 0x1ed0 <__fp_splitA+0xc>
    1eee:	86 95       	lsr	r24
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	61 05       	cpc	r22, r1
    1ef4:	08 94       	sec
    1ef6:	08 95       	ret

00001ef8 <__fp_zero>:
    1ef8:	e8 94       	clt

00001efa <__fp_szero>:
    1efa:	bb 27       	eor	r27, r27
    1efc:	66 27       	eor	r22, r22
    1efe:	77 27       	eor	r23, r23
    1f00:	cb 01       	movw	r24, r22
    1f02:	97 f9       	bld	r25, 7
    1f04:	08 95       	ret

00001f06 <__mulsf3>:
    1f06:	0b d0       	rcall	.+22     	; 0x1f1e <__mulsf3x>
    1f08:	c4 cf       	rjmp	.-120    	; 0x1e92 <__fp_round>
    1f0a:	b5 df       	rcall	.-150    	; 0x1e76 <__fp_pscA>
    1f0c:	28 f0       	brcs	.+10     	; 0x1f18 <__mulsf3+0x12>
    1f0e:	ba df       	rcall	.-140    	; 0x1e84 <__fp_pscB>
    1f10:	18 f0       	brcs	.+6      	; 0x1f18 <__mulsf3+0x12>
    1f12:	95 23       	and	r25, r21
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <__mulsf3+0x12>
    1f16:	a6 cf       	rjmp	.-180    	; 0x1e64 <__fp_inf>
    1f18:	ab cf       	rjmp	.-170    	; 0x1e70 <__fp_nan>
    1f1a:	11 24       	eor	r1, r1
    1f1c:	ee cf       	rjmp	.-36     	; 0x1efa <__fp_szero>

00001f1e <__mulsf3x>:
    1f1e:	ca df       	rcall	.-108    	; 0x1eb4 <__fp_split3>
    1f20:	a0 f3       	brcs	.-24     	; 0x1f0a <__mulsf3+0x4>

00001f22 <__mulsf3_pse>:
    1f22:	95 9f       	mul	r25, r21
    1f24:	d1 f3       	breq	.-12     	; 0x1f1a <__mulsf3+0x14>
    1f26:	95 0f       	add	r25, r21
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	62 9f       	mul	r22, r18
    1f2e:	f0 01       	movw	r30, r0
    1f30:	72 9f       	mul	r23, r18
    1f32:	bb 27       	eor	r27, r27
    1f34:	f0 0d       	add	r31, r0
    1f36:	b1 1d       	adc	r27, r1
    1f38:	63 9f       	mul	r22, r19
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	f0 0d       	add	r31, r0
    1f3e:	b1 1d       	adc	r27, r1
    1f40:	aa 1f       	adc	r26, r26
    1f42:	64 9f       	mul	r22, r20
    1f44:	66 27       	eor	r22, r22
    1f46:	b0 0d       	add	r27, r0
    1f48:	a1 1d       	adc	r26, r1
    1f4a:	66 1f       	adc	r22, r22
    1f4c:	82 9f       	mul	r24, r18
    1f4e:	22 27       	eor	r18, r18
    1f50:	b0 0d       	add	r27, r0
    1f52:	a1 1d       	adc	r26, r1
    1f54:	62 1f       	adc	r22, r18
    1f56:	73 9f       	mul	r23, r19
    1f58:	b0 0d       	add	r27, r0
    1f5a:	a1 1d       	adc	r26, r1
    1f5c:	62 1f       	adc	r22, r18
    1f5e:	83 9f       	mul	r24, r19
    1f60:	a0 0d       	add	r26, r0
    1f62:	61 1d       	adc	r22, r1
    1f64:	22 1f       	adc	r18, r18
    1f66:	74 9f       	mul	r23, r20
    1f68:	33 27       	eor	r19, r19
    1f6a:	a0 0d       	add	r26, r0
    1f6c:	61 1d       	adc	r22, r1
    1f6e:	23 1f       	adc	r18, r19
    1f70:	84 9f       	mul	r24, r20
    1f72:	60 0d       	add	r22, r0
    1f74:	21 1d       	adc	r18, r1
    1f76:	82 2f       	mov	r24, r18
    1f78:	76 2f       	mov	r23, r22
    1f7a:	6a 2f       	mov	r22, r26
    1f7c:	11 24       	eor	r1, r1
    1f7e:	9f 57       	subi	r25, 0x7F	; 127
    1f80:	50 40       	sbci	r21, 0x00	; 0
    1f82:	8a f0       	brmi	.+34     	; 0x1fa6 <__mulsf3_pse+0x84>
    1f84:	e1 f0       	breq	.+56     	; 0x1fbe <__mulsf3_pse+0x9c>
    1f86:	88 23       	and	r24, r24
    1f88:	4a f0       	brmi	.+18     	; 0x1f9c <__mulsf3_pse+0x7a>
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	66 1f       	adc	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	91 50       	subi	r25, 0x01	; 1
    1f98:	50 40       	sbci	r21, 0x00	; 0
    1f9a:	a9 f7       	brne	.-22     	; 0x1f86 <__mulsf3_pse+0x64>
    1f9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	70 f0       	brcs	.+28     	; 0x1fbe <__mulsf3_pse+0x9c>
    1fa2:	60 cf       	rjmp	.-320    	; 0x1e64 <__fp_inf>
    1fa4:	aa cf       	rjmp	.-172    	; 0x1efa <__fp_szero>
    1fa6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa8:	ec f3       	brlt	.-6      	; 0x1fa4 <__mulsf3_pse+0x82>
    1faa:	98 3e       	cpi	r25, 0xE8	; 232
    1fac:	dc f3       	brlt	.-10     	; 0x1fa4 <__mulsf3_pse+0x82>
    1fae:	86 95       	lsr	r24
    1fb0:	77 95       	ror	r23
    1fb2:	67 95       	ror	r22
    1fb4:	b7 95       	ror	r27
    1fb6:	f7 95       	ror	r31
    1fb8:	e7 95       	ror	r30
    1fba:	9f 5f       	subi	r25, 0xFF	; 255
    1fbc:	c1 f7       	brne	.-16     	; 0x1fae <__mulsf3_pse+0x8c>
    1fbe:	fe 2b       	or	r31, r30
    1fc0:	88 0f       	add	r24, r24
    1fc2:	91 1d       	adc	r25, r1
    1fc4:	96 95       	lsr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	97 f9       	bld	r25, 7
    1fca:	08 95       	ret

00001fcc <__divmodhi4>:
    1fcc:	97 fb       	bst	r25, 7
    1fce:	07 2e       	mov	r0, r23
    1fd0:	16 f4       	brtc	.+4      	; 0x1fd6 <__divmodhi4+0xa>
    1fd2:	00 94       	com	r0
    1fd4:	06 d0       	rcall	.+12     	; 0x1fe2 <__divmodhi4_neg1>
    1fd6:	77 fd       	sbrc	r23, 7
    1fd8:	08 d0       	rcall	.+16     	; 0x1fea <__divmodhi4_neg2>
    1fda:	0b d0       	rcall	.+22     	; 0x1ff2 <__udivmodhi4>
    1fdc:	07 fc       	sbrc	r0, 7
    1fde:	05 d0       	rcall	.+10     	; 0x1fea <__divmodhi4_neg2>
    1fe0:	3e f4       	brtc	.+14     	; 0x1ff0 <__divmodhi4_exit>

00001fe2 <__divmodhi4_neg1>:
    1fe2:	90 95       	com	r25
    1fe4:	81 95       	neg	r24
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	08 95       	ret

00001fea <__divmodhi4_neg2>:
    1fea:	70 95       	com	r23
    1fec:	61 95       	neg	r22
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255

00001ff0 <__divmodhi4_exit>:
    1ff0:	08 95       	ret

00001ff2 <__udivmodhi4>:
    1ff2:	aa 1b       	sub	r26, r26
    1ff4:	bb 1b       	sub	r27, r27
    1ff6:	51 e1       	ldi	r21, 0x11	; 17
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <__udivmodhi4_ep>

00001ffa <__udivmodhi4_loop>:
    1ffa:	aa 1f       	adc	r26, r26
    1ffc:	bb 1f       	adc	r27, r27
    1ffe:	a6 17       	cp	r26, r22
    2000:	b7 07       	cpc	r27, r23
    2002:	10 f0       	brcs	.+4      	; 0x2008 <__udivmodhi4_ep>
    2004:	a6 1b       	sub	r26, r22
    2006:	b7 0b       	sbc	r27, r23

00002008 <__udivmodhi4_ep>:
    2008:	88 1f       	adc	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	5a 95       	dec	r21
    200e:	a9 f7       	brne	.-22     	; 0x1ffa <__udivmodhi4_loop>
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	08 95       	ret

0000201a <_exit>:
    201a:	f8 94       	cli

0000201c <__stop_program>:
    201c:	ff cf       	rjmp	.-2      	; 0x201c <__stop_program>
