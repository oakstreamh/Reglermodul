
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  000020f4  00002188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  008001fa  008001fa  00002282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d46  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b11  00000000  00000000  000051b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002289  00000000  00000000  00005cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  00007f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010c2b  00000000  00000000  0000849c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014cb  00000000  00000000  000190c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0001a592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000038e9  00000000  00000000  0001a712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__vector_19>
      50:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ef       	ldi	r30, 0xF4	; 244
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3f       	cpi	r26, 0xFA	; 250
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ef       	ldi	r26, 0xFA	; 250
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 34       	cpi	r26, 0x44	; 68
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 23 0a 	call	0x1446	; 0x1446 <main>
      c6:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <doFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void doFuzzy(int c, int v)
{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c4 5c       	subi	r28, 0xC4	; 196
      f6:	d1 40       	sbci	r29, 0x01	; 1
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	2c 01       	movw	r4, r24
     104:	6b 01       	movw	r12, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	e4 e0       	ldi	r30, 0x04	; 4
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	de 01       	movw	r26, r28
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	01 90       	ld	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	8a 95       	dec	r24
     116:	e1 f7       	brne	.-8      	; 0x110 <doFuzzy+0x44>
	
	struct mf_type rightSide;
	MATLAB_MF(&rightSide, "rightSide", 99, 100, 120, 135); // Min_value = 100
     118:	3e 01       	movw	r6, r28
     11a:	21 e1       	ldi	r18, 0x11	; 17
     11c:	62 0e       	add	r6, r18
     11e:	71 1c       	adc	r7, r1
     120:	0f 2e       	mov	r0, r31
     122:	f7 e8       	ldi	r31, 0x87	; 135
     124:	ef 2e       	mov	r14, r31
     126:	f1 2c       	mov	r15, r1
     128:	f0 2d       	mov	r31, r0
     12a:	08 e7       	ldi	r16, 0x78	; 120
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	24 e6       	ldi	r18, 0x64	; 100
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	43 e6       	ldi	r20, 0x63	; 99
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	6c e0       	ldi	r22, 0x0C	; 12
     138:	71 e0       	ldi	r23, 0x01	; 1
     13a:	c3 01       	movw	r24, r6
     13c:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 125, 145, 155, 175);
     140:	4e 01       	movw	r8, r28
     142:	47 e2       	ldi	r20, 0x27	; 39
     144:	84 0e       	add	r8, r20
     146:	91 1c       	adc	r9, r1
     148:	0f 2e       	mov	r0, r31
     14a:	ff ea       	ldi	r31, 0xAF	; 175
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 2c       	mov	r15, r1
     150:	f0 2d       	mov	r31, r0
     152:	0b e9       	ldi	r16, 0x9B	; 155
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	21 e9       	ldi	r18, 0x91	; 145
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	4d e7       	ldi	r20, 0x7D	; 125
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	66 e1       	ldi	r22, 0x16	; 22
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	c4 01       	movw	r24, r8
     164:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type leftSide;
	MATLAB_MF(&leftSide, "leftSide", 175, 186, 199, 200);  // Max_value = 199
     168:	5e 01       	movw	r10, r28
     16a:	5d e3       	ldi	r21, 0x3D	; 61
     16c:	a5 0e       	add	r10, r21
     16e:	b1 1c       	adc	r11, r1
     170:	0f 2e       	mov	r0, r31
     172:	f8 ec       	ldi	r31, 0xC8	; 200
     174:	ef 2e       	mov	r14, r31
     176:	f1 2c       	mov	r15, r1
     178:	f0 2d       	mov	r31, r0
     17a:	07 ec       	ldi	r16, 0xC7	; 199
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	2a eb       	ldi	r18, 0xBA	; 186
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4f ea       	ldi	r20, 0xAF	; 175
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	6d e1       	ldi	r22, 0x1D	; 29
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	c5 01       	movw	r24, r10
     18c:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	
	delta_C.membership_functions = &rightSide;
     190:	7e 86       	std	Y+14, r7	; 0x0e
     192:	6d 86       	std	Y+13, r6	; 0x0d
	rightSide.next = &centre;
     194:	9e a2       	std	Y+38, r9	; 0x26
     196:	8d a2       	std	Y+37, r8	; 0x25
	centre.next = &leftSide;
     198:	bc ae       	std	Y+60, r11	; 0x3c
     19a:	ab ae       	std	Y+59, r10	; 0x3b
	leftSide.next = NULL;
     19c:	63 96       	adiw	r28, 0x13	; 19
     19e:	1f ae       	std	Y+63, r1	; 0x3f
     1a0:	1e ae       	std	Y+62, r1	; 0x3e
     1a2:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
     1a4:	84 e6       	ldi	r24, 0x64	; 100
     1a6:	48 16       	cp	r4, r24
     1a8:	51 04       	cpc	r5, r1
     1aa:	2c f4       	brge	.+10     	; 0x1b6 <doFuzzy+0xea>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
     1ac:	84 e6       	ldi	r24, 0x64	; 100
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	9c 87       	std	Y+12, r25	; 0x0c
     1b2:	8b 87       	std	Y+11, r24	; 0x0b
     1b4:	0b c0       	rjmp	.+22     	; 0x1cc <doFuzzy+0x100>
	}
	else if(c>199)			// if sensor value is bigger than delta_C's input set's upper limit
     1b6:	a8 ec       	ldi	r26, 0xC8	; 200
     1b8:	4a 16       	cp	r4, r26
     1ba:	51 04       	cpc	r5, r1
     1bc:	2c f0       	brlt	.+10     	; 0x1c8 <doFuzzy+0xfc>
	{
		delta_C.value = 199;  // force input value to lowest point in delta_C's input set
     1be:	87 ec       	ldi	r24, 0xC7	; 199
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <doFuzzy+0x100>
	}
	else
	{
		delta_C.value = c;
     1c8:	5c 86       	std	Y+12, r5	; 0x0c
     1ca:	4b 86       	std	Y+11, r4	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	e6 e2       	ldi	r30, 0x26	; 38
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	de 01       	movw	r26, r28
     1d4:	ad 5a       	subi	r26, 0xAD	; 173
     1d6:	bf 4f       	sbci	r27, 0xFF	; 255
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <doFuzzy+0x10c>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", 0, 1, 20, 35); // min V is 1
     1e0:	3e 01       	movw	r6, r28
     1e2:	b3 e6       	ldi	r27, 0x63	; 99
     1e4:	6b 0e       	add	r6, r27
     1e6:	71 1c       	adc	r7, r1
     1e8:	0f 2e       	mov	r0, r31
     1ea:	f3 e2       	ldi	r31, 0x23	; 35
     1ec:	ef 2e       	mov	r14, r31
     1ee:	f1 2c       	mov	r15, r1
     1f0:	f0 2d       	mov	r31, r0
     1f2:	04 e1       	ldi	r16, 0x14	; 20
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	6e e2       	ldi	r22, 0x2E	; 46
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	c3 01       	movw	r24, r6
     204:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 15, 35, 40, 55);
     208:	4e 01       	movw	r8, r28
     20a:	e9 e7       	ldi	r30, 0x79	; 121
     20c:	8e 0e       	add	r8, r30
     20e:	91 1c       	adc	r9, r1
     210:	0f 2e       	mov	r0, r31
     212:	f7 e3       	ldi	r31, 0x37	; 55
     214:	ef 2e       	mov	r14, r31
     216:	f1 2c       	mov	r15, r1
     218:	f0 2d       	mov	r31, r0
     21a:	08 e2       	ldi	r16, 0x28	; 40
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	23 e2       	ldi	r18, 0x23	; 35
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	4f e0       	ldi	r20, 0x0F	; 15
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	66 e3       	ldi	r22, 0x36	; 54
     228:	71 e0       	ldi	r23, 0x01	; 1
     22a:	c4 01       	movw	r24, r8
     22c:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 35, 50, 74 , 75); // max V is 74
     230:	5e 01       	movw	r10, r28
     232:	ff e8       	ldi	r31, 0x8F	; 143
     234:	af 0e       	add	r10, r31
     236:	b1 1c       	adc	r11, r1
     238:	0f 2e       	mov	r0, r31
     23a:	fb e4       	ldi	r31, 0x4B	; 75
     23c:	ef 2e       	mov	r14, r31
     23e:	f1 2c       	mov	r15, r1
     240:	f0 2d       	mov	r31, r0
     242:	0a e4       	ldi	r16, 0x4A	; 74
     244:	10 e0       	ldi	r17, 0x00	; 0
     246:	22 e3       	ldi	r18, 0x32	; 50
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	43 e2       	ldi	r20, 0x23	; 35
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	6d e3       	ldi	r22, 0x3D	; 61
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	c5 01       	movw	r24, r10
     254:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     258:	a1 96       	adiw	r28, 0x21	; 33
     25a:	7f ae       	std	Y+63, r7	; 0x3f
     25c:	6e ae       	std	Y+62, r6	; 0x3e
     25e:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     260:	d3 01       	movw	r26, r6
     262:	55 96       	adiw	r26, 0x15	; 21
     264:	9c 92       	st	X, r9
     266:	8e 92       	st	-X, r8
     268:	54 97       	sbiw	r26, 0x14	; 20
	inNyll.next = &inPlus;
     26a:	f4 01       	movw	r30, r8
     26c:	b5 8a       	std	Z+21, r11	; 0x15
     26e:	a4 8a       	std	Z+20, r10	; 0x14
	inPlus.next = NULL;
     270:	d5 01       	movw	r26, r10
     272:	55 96       	adiw	r26, 0x15	; 21
     274:	1c 92       	st	X, r1
     276:	1e 92       	st	-X, r1
     278:	54 97       	sbiw	r26, 0x14	; 20
	
	// set V's input value to V´s value
	if(v<1)				// if sensor value is smaller than error's input set lower limit
     27a:	1c 14       	cp	r1, r12
     27c:	1d 04       	cpc	r1, r13
     27e:	3c f0       	brlt	.+14     	; 0x28e <doFuzzy+0x1c2>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	6f 96       	adiw	r28, 0x1f	; 31
     286:	9f af       	std	Y+63, r25	; 0x3f
     288:	8e af       	std	Y+62, r24	; 0x3e
     28a:	6f 97       	sbiw	r28, 0x1f	; 31
     28c:	0f c0       	rjmp	.+30     	; 0x2ac <doFuzzy+0x1e0>
	}
	else if(v>74)			// if sensor value is bigger than error's input set's upper limit
     28e:	bb e4       	ldi	r27, 0x4B	; 75
     290:	cb 16       	cp	r12, r27
     292:	d1 04       	cpc	r13, r1
     294:	3c f0       	brlt	.+14     	; 0x2a4 <doFuzzy+0x1d8>
	{
		delta_V.value = 74;  // force input value to lowest point in error's input set
     296:	8a e4       	ldi	r24, 0x4A	; 74
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	6f 96       	adiw	r28, 0x1f	; 31
     29c:	9f af       	std	Y+63, r25	; 0x3f
     29e:	8e af       	std	Y+62, r24	; 0x3e
     2a0:	6f 97       	sbiw	r28, 0x1f	; 31
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <doFuzzy+0x1e0>
	}
	else
	{
		delta_V.value = v;
     2a4:	6f 96       	adiw	r28, 0x1f	; 31
     2a6:	df ae       	std	Y+63, r13	; 0x3f
     2a8:	ce ae       	std	Y+62, r12	; 0x3e
     2aa:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     2ac:	1e 01       	movw	r2, r28
     2ae:	e5 ea       	ldi	r30, 0xA5	; 165
     2b0:	2e 0e       	add	r2, r30
     2b2:	31 1c       	adc	r3, r1
     2b4:	89 e0       	ldi	r24, 0x09	; 9
     2b6:	e4 e4       	ldi	r30, 0x44	; 68
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	d1 01       	movw	r26, r2
     2bc:	01 90       	ld	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	8a 95       	dec	r24
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <doFuzzy+0x1f0>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2359, 2360, 2360, 2460);
     2c4:	2e 01       	movw	r4, r28
     2c6:	f5 eb       	ldi	r31, 0xB5	; 181
     2c8:	4f 0e       	add	r4, r31
     2ca:	51 1c       	adc	r5, r1
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fc e9       	ldi	r31, 0x9C	; 156
     2d0:	ef 2e       	mov	r14, r31
     2d2:	f9 e0       	ldi	r31, 0x09	; 9
     2d4:	ff 2e       	mov	r15, r31
     2d6:	f0 2d       	mov	r31, r0
     2d8:	08 e3       	ldi	r16, 0x38	; 56
     2da:	19 e0       	ldi	r17, 0x09	; 9
     2dc:	28 e3       	ldi	r18, 0x38	; 56
     2de:	39 e0       	ldi	r19, 0x09	; 9
     2e0:	47 e3       	ldi	r20, 0x37	; 55
     2e2:	59 e0       	ldi	r21, 0x09	; 9
     2e4:	6d e4       	ldi	r22, 0x4D	; 77
     2e6:	71 e0       	ldi	r23, 0x01	; 1
     2e8:	c2 01       	movw	r24, r4
     2ea:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2400, 2460, 2460, 2560);
     2ee:	3e 01       	movw	r6, r28
     2f0:	2b ec       	ldi	r18, 0xCB	; 203
     2f2:	62 0e       	add	r6, r18
     2f4:	71 1c       	adc	r7, r1
     2f6:	0f 2e       	mov	r0, r31
     2f8:	e1 2c       	mov	r14, r1
     2fa:	fa e0       	ldi	r31, 0x0A	; 10
     2fc:	ff 2e       	mov	r15, r31
     2fe:	f0 2d       	mov	r31, r0
     300:	0c e9       	ldi	r16, 0x9C	; 156
     302:	19 e0       	ldi	r17, 0x09	; 9
     304:	2c e9       	ldi	r18, 0x9C	; 156
     306:	39 e0       	ldi	r19, 0x09	; 9
     308:	40 e6       	ldi	r20, 0x60	; 96
     30a:	59 e0       	ldi	r21, 0x09	; 9
     30c:	6f ee       	ldi	r22, 0xEF	; 239
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	c3 01       	movw	r24, r6
     312:	0e 94 8c 09 	call	0x1318	; 0x1318 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2520, 2660, 2660, 2720);
     316:	6e 01       	movw	r12, r28
     318:	41 ee       	ldi	r20, 0xE1	; 225
     31a:	c4 0e       	add	r12, r20
     31c:	d1 1c       	adc	r13, r1
     31e:	0f 2e       	mov	r0, r31
     320:	f0 ea       	ldi	r31, 0xA0	; 160
     322:	ef 2e       	mov	r14, r31
     324:	fa e0       	ldi	r31, 0x0A	; 10
     326:	ff 2e       	mov	r15, r31
     328:	f0 2d       	mov	r31, r0
     32a:	04 e6       	ldi	r16, 0x64	; 100
     32c:	1a e0       	ldi	r17, 0x0A	; 10
     32e:	24 e6       	ldi	r18, 0x64	; 100
     330:	3a e0       	ldi	r19, 0x0A	; 10
     332:	48 ed       	ldi	r20, 0xD8	; 216
     334:	59 e0       	ldi	r21, 0x09	; 9
     336:	67 e5       	ldi	r22, 0x57	; 87
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	c6 01       	movw	r24, r12
     33c:	ed d7       	rcall	.+4058   	; 0x1318 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2700, 2800, 2800, 2900);
     33e:	4e 01       	movw	r8, r28
     340:	57 ef       	ldi	r21, 0xF7	; 247
     342:	85 0e       	add	r8, r21
     344:	91 1c       	adc	r9, r1
     346:	0f 2e       	mov	r0, r31
     348:	f4 e5       	ldi	r31, 0x54	; 84
     34a:	ef 2e       	mov	r14, r31
     34c:	fb e0       	ldi	r31, 0x0B	; 11
     34e:	ff 2e       	mov	r15, r31
     350:	f0 2d       	mov	r31, r0
     352:	00 ef       	ldi	r16, 0xF0	; 240
     354:	1a e0       	ldi	r17, 0x0A	; 10
     356:	20 ef       	ldi	r18, 0xF0	; 240
     358:	3a e0       	ldi	r19, 0x0A	; 10
     35a:	4c e8       	ldi	r20, 0x8C	; 140
     35c:	5a e0       	ldi	r21, 0x0A	; 10
     35e:	6e ed       	ldi	r22, 0xDE	; 222
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	c4 01       	movw	r24, r8
     364:	d9 d7       	rcall	.+4018   	; 0x1318 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2860, 2960, 2960, 2961);
     366:	5e 01       	movw	r10, r28
     368:	83 ef       	ldi	r24, 0xF3	; 243
     36a:	a8 1a       	sub	r10, r24
     36c:	8e ef       	ldi	r24, 0xFE	; 254
     36e:	b8 0a       	sbc	r11, r24
     370:	0f 2e       	mov	r0, r31
     372:	f1 e9       	ldi	r31, 0x91	; 145
     374:	ef 2e       	mov	r14, r31
     376:	fb e0       	ldi	r31, 0x0B	; 11
     378:	ff 2e       	mov	r15, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	00 e9       	ldi	r16, 0x90	; 144
     37e:	1b e0       	ldi	r17, 0x0B	; 11
     380:	20 e9       	ldi	r18, 0x90	; 144
     382:	3b e0       	ldi	r19, 0x0B	; 11
     384:	4c e2       	ldi	r20, 0x2C	; 44
     386:	5b e0       	ldi	r21, 0x0B	; 11
     388:	60 e6       	ldi	r22, 0x60	; 96
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	c5 01       	movw	r24, r10
     38e:	c4 d7       	rcall	.+3976   	; 0x1318 <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     390:	d1 01       	movw	r26, r2
     392:	1d 96       	adiw	r26, 0x0d	; 13
     394:	bc 92       	st	X, r11
     396:	ae 92       	st	-X, r10
     398:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
     39a:	f5 01       	movw	r30, r10
     39c:	95 8a       	std	Z+21, r9	; 0x15
     39e:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &straight;
     3a0:	d4 01       	movw	r26, r8
     3a2:	55 96       	adiw	r26, 0x15	; 21
     3a4:	dc 92       	st	X, r13
     3a6:	ce 92       	st	-X, r12
     3a8:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
     3aa:	f6 01       	movw	r30, r12
     3ac:	75 8a       	std	Z+21, r7	; 0x15
     3ae:	64 8a       	std	Z+20, r6	; 0x14
	left.next = &sharpLeft;
     3b0:	d3 01       	movw	r26, r6
     3b2:	55 96       	adiw	r26, 0x15	; 21
     3b4:	5c 92       	st	X, r5
     3b6:	4e 92       	st	-X, r4
     3b8:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
     3ba:	f2 01       	movw	r30, r4
     3bc:	15 8a       	std	Z+21, r1	; 0x15
     3be:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	90 93 1b 03 	sts	0x031B, r25
     3c8:	80 93 1a 03 	sts	0x031A, r24
	delta_C.next = &delta_V;
     3cc:	e2 56       	subi	r30, 0x62	; 98
     3ce:	f1 09       	sbc	r31, r1
     3d0:	f8 8b       	std	Y+16, r31	; 0x10
     3d2:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     3d4:	17 86       	std	Z+15, r1	; 0x0f
     3d6:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     3d8:	30 92 19 03 	sts	0x0319, r3
     3dc:	20 92 18 03 	sts	0x0318, r2
	steering.next = NULL;
     3e0:	d1 01       	movw	r26, r2
     3e2:	1f 96       	adiw	r26, 0x0f	; 15
     3e4:	1c 92       	st	X, r1
     3e6:	1e 92       	st	-X, r1
     3e8:	1e 97       	sbiw	r26, 0x0e	; 14
	
	
	
	//RULE 9 "if C is centre AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     3ea:	a2 58       	subi	r26, 0x82	; 130
     3ec:	bf 4f       	sbci	r27, 0xFF	; 255
     3ee:	73 01       	movw	r14, r6
     3f0:	ea e0       	ldi	r30, 0x0A	; 10
     3f2:	ee 0e       	add	r14, r30
     3f4:	f1 1c       	adc	r15, r1
     3f6:	11 96       	adiw	r26, 0x01	; 1
     3f8:	fc 92       	st	X, r15
     3fa:	ee 92       	st	-X, r14
	then9.next = NULL;
     3fc:	13 96       	adiw	r26, 0x03	; 3
     3fe:	1c 92       	st	X, r1
     400:	1e 92       	st	-X, r1
     402:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     404:	9e 01       	movw	r18, r28
     406:	29 5d       	subi	r18, 0xD9	; 217
     408:	3e 4f       	sbci	r19, 0xFE	; 254
     40a:	3e 01       	movw	r6, r28
     40c:	f9 e9       	ldi	r31, 0x99	; 153
     40e:	6f 0e       	add	r6, r31
     410:	71 1c       	adc	r7, r1
     412:	f9 01       	movw	r30, r18
     414:	71 82       	std	Z+1, r7	; 0x01
     416:	60 82       	st	Z, r6
	if92.next = NULL;
     418:	13 82       	std	Z+3, r1	; 0x03
     41a:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if91;
	if91.value = &centre.value;
     41c:	86 5d       	subi	r24, 0xD6	; 214
     41e:	9e 4f       	sbci	r25, 0xFE	; 254
     420:	8e 01       	movw	r16, r28
     422:	0f 5c       	subi	r16, 0xCF	; 207
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	fc 01       	movw	r30, r24
     428:	11 83       	std	Z+1, r17	; 0x01
     42a:	00 83       	st	Z, r16
	if91.next = &if92;
     42c:	33 83       	std	Z+3, r19	; 0x03
     42e:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     430:	34 96       	adiw	r30, 0x04	; 4
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
	rule9.then_side = &then9;
     436:	b3 83       	std	Z+3, r27	; 0x03
     438:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = NULL;
     43a:	15 82       	std	Z+5, r1	; 0x05
     43c:	14 82       	std	Z+4, r1	; 0x04

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
     43e:	22 5f       	subi	r18, 0xF2	; 242
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	4a e0       	ldi	r20, 0x0A	; 10
     444:	84 0e       	add	r8, r20
     446:	91 1c       	adc	r9, r1
     448:	d9 01       	movw	r26, r18
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	9c 92       	st	X, r9
     44e:	8e 92       	st	-X, r8
	then8.next = NULL;
     450:	13 96       	adiw	r26, 0x03	; 3
     452:	1c 92       	st	X, r1
     454:	1e 92       	st	-X, r1
     456:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if82;
	if82.value = &inPlus.value;
     458:	be 01       	movw	r22, r28
     45a:	67 5c       	subi	r22, 0xC7	; 199
     45c:	7e 4f       	sbci	r23, 0xFE	; 254
     45e:	db 01       	movw	r26, r22
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	7c 92       	st	X, r7
     464:	6e 92       	st	-X, r6
	if82.next = NULL;
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	1c 92       	st	X, r1
     46a:	1e 92       	st	-X, r1
     46c:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if81;
	if81.value = &leftSide.value;
     46e:	ae 01       	movw	r20, r28
     470:	43 5c       	subi	r20, 0xC3	; 195
     472:	5e 4f       	sbci	r21, 0xFE	; 254
     474:	84 5e       	subi	r24, 0xE4	; 228
     476:	91 09       	sbc	r25, r1
     478:	da 01       	movw	r26, r20
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	9c 93       	st	X, r25
     47e:	8e 93       	st	-X, r24
	if81.next = &if82;
     480:	13 96       	adiw	r26, 0x03	; 3
     482:	7c 93       	st	X, r23
     484:	6e 93       	st	-X, r22
     486:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule8;
	rule8.if_side = &if81;
     488:	14 96       	adiw	r26, 0x04	; 4
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	5c 93       	st	X, r21
     48e:	4e 93       	st	-X, r20
	rule8.then_side = &then8;
     490:	13 96       	adiw	r26, 0x03	; 3
     492:	3c 93       	st	X, r19
     494:	2e 93       	st	-X, r18
     496:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     498:	15 96       	adiw	r26, 0x05	; 5
     49a:	fc 93       	st	X, r31
     49c:	ee 93       	st	-X, r30
     49e:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
     4a0:	46 5f       	subi	r20, 0xF6	; 246
     4a2:	5f 4f       	sbci	r21, 0xFF	; 255
     4a4:	ea e0       	ldi	r30, 0x0A	; 10
     4a6:	ae 0e       	add	r10, r30
     4a8:	b1 1c       	adc	r11, r1
     4aa:	fa 01       	movw	r30, r20
     4ac:	b1 82       	std	Z+1, r11	; 0x01
     4ae:	a0 82       	st	Z, r10
	then7.next = NULL;
     4b0:	13 82       	std	Z+3, r1	; 0x03
     4b2:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if72;
	if72.value = &inNyll.value;
     4b4:	5e 01       	movw	r10, r28
     4b6:	f5 eb       	ldi	r31, 0xB5	; 181
     4b8:	af 1a       	sub	r10, r31
     4ba:	fe ef       	ldi	r31, 0xFE	; 254
     4bc:	bf 0a       	sbc	r11, r31
     4be:	22 5b       	subi	r18, 0xB2	; 178
     4c0:	31 09       	sbc	r19, r1
     4c2:	f5 01       	movw	r30, r10
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
	if72.next = NULL;
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if71;
	if71.value = &leftSide.value;
     4cc:	6a 5e       	subi	r22, 0xEA	; 234
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	fb 01       	movw	r30, r22
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	80 83       	st	Z, r24
	if71.next = &if72;
     4d6:	b3 82       	std	Z+3, r11	; 0x03
     4d8:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule7;
	rule7.if_side = &if71;
     4da:	34 96       	adiw	r30, 0x04	; 4
     4dc:	71 83       	std	Z+1, r23	; 0x01
     4de:	60 83       	st	Z, r22
	rule7.then_side = &then7;
     4e0:	53 83       	std	Z+3, r21	; 0x03
     4e2:	42 83       	std	Z+2, r20	; 0x02
	rule7.next = &rule8;
     4e4:	b5 83       	std	Z+5, r27	; 0x05
     4e6:	a4 83       	std	Z+4, r26	; 0x04
	
	
	//RULE 6 "if C is positive AND V is minus then servo is straight"
	struct rule_element_type then6;
	then6.value = &straight.value;
     4e8:	4a e0       	ldi	r20, 0x0A	; 10
     4ea:	c4 0e       	add	r12, r20
     4ec:	d1 1c       	adc	r13, r1
     4ee:	c7 5a       	subi	r28, 0xA7	; 167
     4f0:	de 4f       	sbci	r29, 0xFE	; 254
     4f2:	d9 82       	std	Y+1, r13	; 0x01
     4f4:	c8 82       	st	Y, r12
     4f6:	c9 55       	subi	r28, 0x59	; 89
     4f8:	d1 40       	sbci	r29, 0x01	; 1
	then6.next = NULL;
     4fa:	c5 5a       	subi	r28, 0xA5	; 165
     4fc:	de 4f       	sbci	r29, 0xFE	; 254
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	18 82       	st	Y, r1
     502:	cb 55       	subi	r28, 0x5B	; 91
     504:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if62;
	if62.value = &inMinus.value;
     506:	62 5f       	subi	r22, 0xF2	; 242
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	5e 01       	movw	r10, r28
     50c:	5d e6       	ldi	r21, 0x6D	; 109
     50e:	a5 0e       	add	r10, r21
     510:	b1 1c       	adc	r11, r1
     512:	db 01       	movw	r26, r22
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	bc 92       	st	X, r11
     518:	ae 92       	st	-X, r10
	if62.next = NULL;
     51a:	13 96       	adiw	r26, 0x03	; 3
     51c:	1c 92       	st	X, r1
     51e:	1e 92       	st	-X, r1
     520:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &leftSide.value;
     522:	ae 01       	movw	r20, r28
     524:	4f 59       	subi	r20, 0x9F	; 159
     526:	5e 4f       	sbci	r21, 0xFE	; 254
     528:	da 01       	movw	r26, r20
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	9c 93       	st	X, r25
     52e:	8e 93       	st	-X, r24
	if61.next = &if62;
     530:	13 96       	adiw	r26, 0x03	; 3
     532:	7c 93       	st	X, r23
     534:	6e 93       	st	-X, r22
     536:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule6;
	rule6.if_side = &if61;
     538:	82 5e       	subi	r24, 0xE2	; 226
     53a:	9e 4f       	sbci	r25, 0xFE	; 254
     53c:	dc 01       	movw	r26, r24
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	5c 93       	st	X, r21
     542:	4e 93       	st	-X, r20
	rule6.then_side = &then6;
     544:	49 e5       	ldi	r20, 0x59	; 89
     546:	51 e0       	ldi	r21, 0x01	; 1
     548:	4c 0f       	add	r20, r28
     54a:	5d 1f       	adc	r21, r29
     54c:	13 96       	adiw	r26, 0x03	; 3
     54e:	5c 93       	st	X, r21
     550:	4e 93       	st	-X, r20
     552:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     554:	15 96       	adiw	r26, 0x05	; 5
     556:	fc 93       	st	X, r31
     558:	ee 93       	st	-X, r30
     55a:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
     55c:	16 96       	adiw	r26, 0x06	; 6
     55e:	5a e0       	ldi	r21, 0x0A	; 10
     560:	45 0e       	add	r4, r21
     562:	51 1c       	adc	r5, r1
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	5c 92       	st	X, r5
     568:	4e 92       	st	-X, r4
	then5.next = NULL;
     56a:	13 96       	adiw	r26, 0x03	; 3
     56c:	1c 92       	st	X, r1
     56e:	1e 92       	st	-X, r1
     570:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
     572:	2e 01       	movw	r4, r28
     574:	e1 e9       	ldi	r30, 0x91	; 145
     576:	4e 1a       	sub	r4, r30
     578:	ee ef       	ldi	r30, 0xFE	; 254
     57a:	5e 0a       	sbc	r5, r30
     57c:	f2 01       	movw	r30, r4
     57e:	31 83       	std	Z+1, r19	; 0x01
     580:	20 83       	st	Z, r18
	if52.next = NULL;
     582:	13 82       	std	Z+3, r1	; 0x03
     584:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &rightSide.value;
     586:	6a 5e       	subi	r22, 0xEA	; 234
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	ae 01       	movw	r20, r28
     58c:	45 5e       	subi	r20, 0xE5	; 229
     58e:	5f 4f       	sbci	r21, 0xFF	; 255
     590:	fb 01       	movw	r30, r22
     592:	51 83       	std	Z+1, r21	; 0x01
     594:	40 83       	st	Z, r20
	if51.next = &if52;
     596:	53 82       	std	Z+3, r5	; 0x03
     598:	42 82       	std	Z+2, r4	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     59a:	34 96       	adiw	r30, 0x04	; 4
     59c:	71 83       	std	Z+1, r23	; 0x01
     59e:	60 83       	st	Z, r22
	rule5.then_side = &then5;
     5a0:	b3 83       	std	Z+3, r27	; 0x03
     5a2:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     5a4:	95 83       	std	Z+5, r25	; 0x05
     5a6:	84 83       	std	Z+4, r24	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
     5a8:	66 5f       	subi	r22, 0xF6	; 246
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	db 01       	movw	r26, r22
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	dc 92       	st	X, r13
     5b2:	ce 92       	st	-X, r12
	then4.next = NULL;
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	1c 92       	st	X, r1
     5b8:	1e 92       	st	-X, r1
     5ba:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
     5bc:	4c 96       	adiw	r24, 0x1c	; 28
     5be:	dc 01       	movw	r26, r24
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	3c 93       	st	X, r19
     5c4:	2e 93       	st	-X, r18
	if42.next = NULL;
     5c6:	13 96       	adiw	r26, 0x03	; 3
     5c8:	1c 92       	st	X, r1
     5ca:	1e 92       	st	-X, r1
     5cc:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &centre.value;
     5ce:	2e 5f       	subi	r18, 0xFE	; 254
     5d0:	3e 4f       	sbci	r19, 0xFE	; 254
     5d2:	d9 01       	movw	r26, r18
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	1c 93       	st	X, r17
     5d8:	0e 93       	st	-X, r16
	if41.next = &if42;
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     5e2:	08 96       	adiw	r24, 0x08	; 8
     5e4:	dc 01       	movw	r26, r24
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	3c 93       	st	X, r19
     5ea:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	7c 93       	st	X, r23
     5f0:	6e 93       	st	-X, r22
     5f2:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     5f4:	15 96       	adiw	r26, 0x05	; 5
     5f6:	fc 93       	st	X, r31
     5f8:	ee 93       	st	-X, r30
     5fa:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &straight.value;
     5fc:	6e 5e       	subi	r22, 0xEE	; 238
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	fb 01       	movw	r30, r22
     602:	d1 82       	std	Z+1, r13	; 0x01
     604:	c0 82       	st	Z, r12
	then3.next = NULL;
     606:	13 82       	std	Z+3, r1	; 0x03
     608:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inPlus.value;
     60a:	1a 96       	adiw	r26, 0x0a	; 10
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	7c 92       	st	X, r7
     610:	6e 92       	st	-X, r6
	if32.next = NULL;
     612:	13 96       	adiw	r26, 0x03	; 3
     614:	1c 92       	st	X, r1
     616:	1e 92       	st	-X, r1
     618:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &rightSide.value;
     61a:	2e 5e       	subi	r18, 0xEE	; 238
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	f9 01       	movw	r30, r18
     620:	51 83       	std	Z+1, r21	; 0x01
     622:	40 83       	st	Z, r20
	if31.next = &if32;
     624:	b3 83       	std	Z+3, r27	; 0x03
     626:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     628:	18 96       	adiw	r26, 0x08	; 8
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	3c 93       	st	X, r19
     62e:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	7c 93       	st	X, r23
     634:	6e 93       	st	-X, r22
     636:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     638:	15 96       	adiw	r26, 0x05	; 5
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
     63e:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
     640:	6e 5e       	subi	r22, 0xEE	; 238
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	fb 01       	movw	r30, r22
     646:	f1 82       	std	Z+1, r15	; 0x01
     648:	e0 82       	st	Z, r14
	then2.next = NULL;
     64a:	13 82       	std	Z+3, r1	; 0x03
     64c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
     64e:	4c 96       	adiw	r24, 0x1c	; 28
     650:	fc 01       	movw	r30, r24
     652:	b1 82       	std	Z+1, r11	; 0x01
     654:	a0 82       	st	Z, r10
	if22.next = NULL;
     656:	13 82       	std	Z+3, r1	; 0x03
     658:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &rightSide.value;
     65a:	2e 5e       	subi	r18, 0xEE	; 238
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	f9 01       	movw	r30, r18
     660:	51 83       	std	Z+1, r21	; 0x01
     662:	40 83       	st	Z, r20
	if21.next = &if22;
     664:	93 83       	std	Z+3, r25	; 0x03
     666:	82 83       	std	Z+2, r24	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     668:	08 96       	adiw	r24, 0x08	; 8
     66a:	fc 01       	movw	r30, r24
     66c:	31 83       	std	Z+1, r19	; 0x01
     66e:	20 83       	st	Z, r18
	rule2.then_side = &then2;
     670:	73 83       	std	Z+3, r23	; 0x03
     672:	62 83       	std	Z+2, r22	; 0x02
	rule2.next = &rule3;
     674:	b5 83       	std	Z+5, r27	; 0x05
     676:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
     678:	58 96       	adiw	r26, 0x18	; 24
     67a:	11 96       	adiw	r26, 0x01	; 1
     67c:	9c 92       	st	X, r9
     67e:	8e 92       	st	-X, r8
	then1.next = NULL;
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	1c 92       	st	X, r1
     684:	1e 92       	st	-X, r1
     686:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &inMinus.value;
     688:	44 56       	subi	r20, 0x64	; 100
     68a:	5e 4f       	sbci	r21, 0xFE	; 254
     68c:	fa 01       	movw	r30, r20
     68e:	b1 82       	std	Z+1, r11	; 0x01
     690:	a0 82       	st	Z, r10
	if12.next = NULL;
     692:	13 82       	std	Z+3, r1	; 0x03
     694:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &centre.value;
     696:	2e 5e       	subi	r18, 0xEE	; 238
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	f9 01       	movw	r30, r18
     69c:	11 83       	std	Z+1, r17	; 0x01
     69e:	00 83       	st	Z, r16
	if11.next = &if12;
     6a0:	53 83       	std	Z+3, r21	; 0x03
     6a2:	42 83       	std	Z+2, r20	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     6a4:	34 96       	adiw	r30, 0x04	; 4
     6a6:	31 83       	std	Z+1, r19	; 0x01
     6a8:	20 83       	st	Z, r18
	rule1.then_side = &then1;
     6aa:	b3 83       	std	Z+3, r27	; 0x03
     6ac:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     6ae:	95 83       	std	Z+5, r25	; 0x05
     6b0:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
     6b2:	f0 93 1d 03 	sts	0x031D, r31
     6b6:	e0 93 1c 03 	sts	0x031C, r30
	
	
	// the methods performing the FLC
	fuzzification();
     6ba:	04 d5       	rcall	.+2568   	; 0x10c4 <fuzzification>
	rule_evaluation();
     6bc:	2a d5       	rcall	.+2644   	; 0x1112 <rule_evaluation>
	defuzzification();
     6be:	6f d5       	rcall	.+2782   	; 0x119e <defuzzification>
	if (steering.value < MAXLEFT)
     6c0:	d1 01       	movw	r26, r2
     6c2:	1a 96       	adiw	r26, 0x0a	; 10
     6c4:	8d 91       	ld	r24, X+
     6c6:	9c 91       	ld	r25, X
     6c8:	1b 97       	sbiw	r26, 0x0b	; 11
     6ca:	86 3e       	cpi	r24, 0xE6	; 230
     6cc:	b7 e0       	ldi	r27, 0x07	; 7
     6ce:	9b 07       	cpc	r25, r27
     6d0:	24 f4       	brge	.+8      	; 0x6da <doFuzzy+0x60e>
	{
		setServo(MAXLEFT);
     6d2:	86 ee       	ldi	r24, 0xE6	; 230
     6d4:	97 e0       	ldi	r25, 0x07	; 7
     6d6:	56 d7       	rcall	.+3756   	; 0x1584 <setServo>
     6d8:	09 c0       	rjmp	.+18     	; 0x6ec <doFuzzy+0x620>
	}
	else if (steering.value >MAXRIGHT)
     6da:	85 3e       	cpi	r24, 0xE5	; 229
     6dc:	ec e0       	ldi	r30, 0x0C	; 12
     6de:	9e 07       	cpc	r25, r30
     6e0:	24 f0       	brlt	.+8      	; 0x6ea <doFuzzy+0x61e>
	{
		setServo(MAXRIGHT);
     6e2:	84 ee       	ldi	r24, 0xE4	; 228
     6e4:	9c e0       	ldi	r25, 0x0C	; 12
     6e6:	4e d7       	rcall	.+3740   	; 0x1584 <setServo>
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <doFuzzy+0x620>
	}
	else
	{
		setServo(steering.value);
     6ea:	4c d7       	rcall	.+3736   	; 0x1584 <setServo>
	}
}
     6ec:	cc 53       	subi	r28, 0x3C	; 60
     6ee:	de 4f       	sbci	r29, 0xFE	; 254
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	9f 90       	pop	r9
     710:	8f 90       	pop	r8
     712:	7f 90       	pop	r7
     714:	6f 90       	pop	r6
     716:	5f 90       	pop	r5
     718:	4f 90       	pop	r4
     71a:	3f 90       	pop	r3
     71c:	2f 90       	pop	r2
     71e:	08 95       	ret

00000720 <FLC_steering>:
int FLC_steering(int c, int v)
{
    
    
    
	if ((c == 1) & (v == 81))        // right curvature, turn right
     720:	31 e0       	ldi	r19, 0x01	; 1
     722:	61 35       	cpi	r22, 0x51	; 81
     724:	71 05       	cpc	r23, r1
     726:	09 f0       	breq	.+2      	; 0x72a <FLC_steering+0xa>
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	91 05       	cpc	r25, r1
     730:	09 f0       	breq	.+2      	; 0x734 <FLC_steering+0x14>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	22 23       	and	r18, r18
     736:	31 f0       	breq	.+12     	; 0x744 <FLC_steering+0x24>
     738:	33 23       	and	r19, r19
     73a:	21 f0       	breq	.+8      	; 0x744 <FLC_steering+0x24>
	{
		setServo(MAXRIGHT);
     73c:	84 ee       	ldi	r24, 0xE4	; 228
     73e:	9c e0       	ldi	r25, 0x0C	; 12
     740:	21 d7       	rcall	.+3650   	; 0x1584 <setServo>
     742:	0e c0       	rjmp	.+28     	; 0x760 <FLC_steering+0x40>
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	91 05       	cpc	r25, r1
     74a:	09 f0       	breq	.+2      	; 0x74e <FLC_steering+0x2e>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	22 23       	and	r18, r18
     750:	31 f0       	breq	.+12     	; 0x75e <FLC_steering+0x3e>
     752:	33 23       	and	r19, r19
     754:	21 f0       	breq	.+8      	; 0x75e <FLC_steering+0x3e>
	{
		setServo(MAXLEFT);
     756:	86 ee       	ldi	r24, 0xE6	; 230
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	14 d7       	rcall	.+3624   	; 0x1584 <setServo>
     75c:	01 c0       	rjmp	.+2      	; 0x760 <FLC_steering+0x40>
	}
	else                                   // straight road, do fuzzy
	{
		doFuzzy(c,v);
     75e:	b6 dc       	rcall	.-1684   	; 0xcc <doFuzzy>
	}
	
	
	return 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	08 95       	ret

00000766 <FLC_obstacle>:

// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////

void FLC_obstacle(int currentOCR1A, int midSonicRange)
{
     766:	2f 92       	push	r2
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c4 53       	subi	r28, 0x34	; 52
     790:	d2 40       	sbci	r29, 0x02	; 2
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	
	
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type distance; strcpy(distance.name, "distance");
     79c:	29 e0       	ldi	r18, 0x09	; 9
     79e:	eb e6       	ldi	r30, 0x6B	; 107
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	de 01       	movw	r26, r28
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	01 90       	ld	r0, Z+
     7a8:	0d 92       	st	X+, r0
     7aa:	2a 95       	dec	r18
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <FLC_obstacle+0x40>
	struct io_type speed; strcpy(speed.name, "speed");
     7ae:	26 e0       	ldi	r18, 0x06	; 6
     7b0:	e4 e7       	ldi	r30, 0x74	; 116
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	de 01       	movw	r26, r28
     7b6:	51 96       	adiw	r26, 0x11	; 17
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	2a 95       	dec	r18
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <FLC_obstacle+0x52>
	
	// Variable assigned its reference value
	if (currentOCR1A<MIN_SPEED) {
     7c0:	84 3b       	cpi	r24, 0xB4	; 180
     7c2:	2a e0       	ldi	r18, 0x0A	; 10
     7c4:	92 07       	cpc	r25, r18
     7c6:	2c f4       	brge	.+10     	; 0x7d2 <FLC_obstacle+0x6c>
		speed.value = MIN_SPEED;
     7c8:	84 eb       	ldi	r24, 0xB4	; 180
     7ca:	9a e0       	ldi	r25, 0x0A	; 10
     7cc:	9c 8f       	std	Y+28, r25	; 0x1c
     7ce:	8b 8f       	std	Y+27, r24	; 0x1b
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <FLC_obstacle+0x82>
	}
	else if (currentOCR1A>MAX_SPEED)
     7d2:	85 35       	cpi	r24, 0x55	; 85
     7d4:	4b e0       	ldi	r20, 0x0B	; 11
     7d6:	94 07       	cpc	r25, r20
     7d8:	2c f0       	brlt	.+10     	; 0x7e4 <FLC_obstacle+0x7e>
	{
		speed.value = MAX_SPEED;
     7da:	84 e5       	ldi	r24, 0x54	; 84
     7dc:	9b e0       	ldi	r25, 0x0B	; 11
     7de:	9c 8f       	std	Y+28, r25	; 0x1c
     7e0:	8b 8f       	std	Y+27, r24	; 0x1b
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <FLC_obstacle+0x82>
	}
	else
	{
		speed.value = currentOCR1A;
     7e4:	9c 8f       	std	Y+28, r25	; 0x1c
     7e6:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	
	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     7e8:	77 23       	and	r23, r23
     7ea:	1c f4       	brge	.+6      	; 0x7f2 <FLC_obstacle+0x8c>
	{
		distance.value = MIN_DISTANCE;
     7ec:	1c 86       	std	Y+12, r1	; 0x0c
     7ee:	1b 86       	std	Y+11, r1	; 0x0b
     7f0:	0a c0       	rjmp	.+20     	; 0x806 <FLC_obstacle+0xa0>
	}
	else if (midSonicRange > MAX_DISTANCE)
     7f2:	6b 3f       	cpi	r22, 0xFB	; 251
     7f4:	71 05       	cpc	r23, r1
     7f6:	2c f0       	brlt	.+10     	; 0x802 <FLC_obstacle+0x9c>
	{
		distance.value = MAX_DISTANCE;
     7f8:	8a ef       	ldi	r24, 0xFA	; 250
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9c 87       	std	Y+12, r25	; 0x0c
     7fe:	8b 87       	std	Y+11, r24	; 0x0b
     800:	02 c0       	rjmp	.+4      	; 0x806 <FLC_obstacle+0xa0>
	}
	else
	{
		distance.value = midSonicRange;
     802:	7c 87       	std	Y+12, r23	; 0x0c
     804:	6b 87       	std	Y+11, r22	; 0x0b
	}
	
	
	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 20);
     806:	6e 01       	movw	r12, r28
     808:	51 e2       	ldi	r21, 0x21	; 33
     80a:	c5 0e       	add	r12, r21
     80c:	d1 1c       	adc	r13, r1
     80e:	0f 2e       	mov	r0, r31
     810:	f4 e1       	ldi	r31, 0x14	; 20
     812:	ef 2e       	mov	r14, r31
     814:	f1 2c       	mov	r15, r1
     816:	f0 2d       	mov	r31, r0
     818:	0c e0       	ldi	r16, 0x0C	; 12
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	4f ef       	ldi	r20, 0xFF	; 255
     822:	5f ef       	ldi	r21, 0xFF	; 255
     824:	6a e7       	ldi	r22, 0x7A	; 122
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	c6 01       	movw	r24, r12
     82a:	76 d5       	rcall	.+2796   	; 0x1318 <MATLAB_MF>
	struct mf_type oneM;
	MATLAB_MF(&oneM, "oneM", 18, 60, 60, 95);
     82c:	3e 01       	movw	r6, r28
     82e:	67 e3       	ldi	r22, 0x37	; 55
     830:	66 0e       	add	r6, r22
     832:	71 1c       	adc	r7, r1
     834:	0f 2e       	mov	r0, r31
     836:	ff e5       	ldi	r31, 0x5F	; 95
     838:	ef 2e       	mov	r14, r31
     83a:	f1 2c       	mov	r15, r1
     83c:	f0 2d       	mov	r31, r0
     83e:	0c e3       	ldi	r16, 0x3C	; 60
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	2c e3       	ldi	r18, 0x3C	; 60
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	42 e1       	ldi	r20, 0x12	; 18
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	63 e8       	ldi	r22, 0x83	; 131
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	c3 01       	movw	r24, r6
     850:	63 d5       	rcall	.+2758   	; 0x1318 <MATLAB_MF>
	struct mf_type twoM;
	MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     852:	0f 2e       	mov	r0, r31
     854:	ff ea       	ldi	r31, 0xAF	; 175
     856:	ef 2e       	mov	r14, r31
     858:	f1 2c       	mov	r15, r1
     85a:	f0 2d       	mov	r31, r0
     85c:	0d e7       	ldi	r16, 0x7D	; 125
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	2d e7       	ldi	r18, 0x7D	; 125
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	4b e4       	ldi	r20, 0x4B	; 75
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	68 e8       	ldi	r22, 0x88	; 136
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	ce 01       	movw	r24, r28
     86e:	83 5b       	subi	r24, 0xB3	; 179
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	52 d5       	rcall	.+2724   	; 0x1318 <MATLAB_MF>
	struct mf_type threeM;
	MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     874:	0f 2e       	mov	r0, r31
     876:	fb ef       	ldi	r31, 0xFB	; 251
     878:	ef 2e       	mov	r14, r31
     87a:	f1 2c       	mov	r15, r1
     87c:	f0 2d       	mov	r31, r0
     87e:	0a ef       	ldi	r16, 0xFA	; 250
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	2a ef       	ldi	r18, 0xFA	; 250
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	46 e9       	ldi	r20, 0x96	; 150
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	6d e8       	ldi	r22, 0x8D	; 141
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	ce 01       	movw	r24, r28
     890:	8d 59       	subi	r24, 0x9D	; 157
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	41 d5       	rcall	.+2690   	; 0x1318 <MATLAB_MF>
	
	// Linked list for MFs
	distance.membership_functions = &stopDist;
     896:	de 86       	std	Y+14, r13	; 0x0e
     898:	cd 86       	std	Y+13, r12	; 0x0d
	stopDist.next = &oneM;
     89a:	7e aa       	std	Y+54, r7	; 0x36
     89c:	6d aa       	std	Y+53, r6	; 0x35
	oneM.next = &twoM;
     89e:	8d e4       	ldi	r24, 0x4D	; 77
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	8c 0f       	add	r24, r28
     8a4:	9d 1f       	adc	r25, r29
     8a6:	2d 96       	adiw	r28, 0x0d	; 13
     8a8:	9f af       	std	Y+63, r25	; 0x3f
     8aa:	8e af       	std	Y+62, r24	; 0x3e
     8ac:	2d 97       	sbiw	r28, 0x0d	; 13
	twoM.next = &threeM;
     8ae:	a3 e6       	ldi	r26, 0x63	; 99
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	ac 0f       	add	r26, r28
     8b4:	bd 1f       	adc	r27, r29
     8b6:	a3 96       	adiw	r28, 0x23	; 35
     8b8:	bf af       	std	Y+63, r27	; 0x3f
     8ba:	ae af       	std	Y+62, r26	; 0x3e
     8bc:	a3 97       	sbiw	r28, 0x23	; 35
	threeM.next = NULL;
     8be:	e9 96       	adiw	r28, 0x39	; 57
     8c0:	1f ae       	std	Y+63, r1	; 0x3f
     8c2:	1e ae       	std	Y+62, r1	; 0x3e
     8c4:	e9 97       	sbiw	r28, 0x39	; 57
	//////////////////////////////////////////////////////////////////////////////
	

	// Set MFs
	struct mf_type still;
	MATLAB_MF(&still, "still", MIN_SPEED-1, 2740, 2740, 2815);
     8c6:	0f 2e       	mov	r0, r31
     8c8:	ee 24       	eor	r14, r14
     8ca:	ea 94       	dec	r14
     8cc:	fa e0       	ldi	r31, 0x0A	; 10
     8ce:	ff 2e       	mov	r15, r31
     8d0:	f0 2d       	mov	r31, r0
     8d2:	04 eb       	ldi	r16, 0xB4	; 180
     8d4:	1a e0       	ldi	r17, 0x0A	; 10
     8d6:	24 eb       	ldi	r18, 0xB4	; 180
     8d8:	3a e0       	ldi	r19, 0x0A	; 10
     8da:	43 eb       	ldi	r20, 0xB3	; 179
     8dc:	5a e0       	ldi	r21, 0x0A	; 10
     8de:	64 e9       	ldi	r22, 0x94	; 148
     8e0:	71 e0       	ldi	r23, 0x01	; 1
     8e2:	8c 96       	adiw	r24, 0x2c	; 44
     8e4:	19 d5       	rcall	.+2610   	; 0x1318 <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2804, 2820, 2820, 2836);
     8e6:	5e 01       	movw	r10, r28
     8e8:	bf e8       	ldi	r27, 0x8F	; 143
     8ea:	ab 0e       	add	r10, r27
     8ec:	b1 1c       	adc	r11, r1
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f4 e1       	ldi	r31, 0x14	; 20
     8f2:	ef 2e       	mov	r14, r31
     8f4:	fb e0       	ldi	r31, 0x0B	; 11
     8f6:	ff 2e       	mov	r15, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	04 e0       	ldi	r16, 0x04	; 4
     8fc:	1b e0       	ldi	r17, 0x0B	; 11
     8fe:	24 e0       	ldi	r18, 0x04	; 4
     900:	3b e0       	ldi	r19, 0x0B	; 11
     902:	44 ef       	ldi	r20, 0xF4	; 244
     904:	5a e0       	ldi	r21, 0x0A	; 10
     906:	68 eb       	ldi	r22, 0xB8	; 184
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	c5 01       	movw	r24, r10
     90c:	05 d5       	rcall	.+2570   	; 0x1318 <MATLAB_MF>
	struct mf_type cruising;
	MATLAB_MF(&cruising, "cruising", 2827, 2843, 2843, 2859);
     90e:	0f 2e       	mov	r0, r31
     910:	fb e2       	ldi	r31, 0x2B	; 43
     912:	ef 2e       	mov	r14, r31
     914:	fb e0       	ldi	r31, 0x0B	; 11
     916:	ff 2e       	mov	r15, r31
     918:	f0 2d       	mov	r31, r0
     91a:	0b e1       	ldi	r16, 0x1B	; 27
     91c:	1b e0       	ldi	r17, 0x0B	; 11
     91e:	2b e1       	ldi	r18, 0x1B	; 27
     920:	3b e0       	ldi	r19, 0x0B	; 11
     922:	4b e0       	ldi	r20, 0x0B	; 11
     924:	5b e0       	ldi	r21, 0x0B	; 11
     926:	6a e9       	ldi	r22, 0x9A	; 154
     928:	71 e0       	ldi	r23, 0x01	; 1
     92a:	ce 01       	movw	r24, r28
     92c:	8b 55       	subi	r24, 0x5B	; 91
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	f3 d4       	rcall	.+2534   	; 0x1318 <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2849, 2865, 2865, 2881);
     932:	2e 01       	movw	r4, r28
     934:	eb eb       	ldi	r30, 0xBB	; 187
     936:	4e 0e       	add	r4, r30
     938:	51 1c       	adc	r5, r1
     93a:	0f 2e       	mov	r0, r31
     93c:	f1 e4       	ldi	r31, 0x41	; 65
     93e:	ef 2e       	mov	r14, r31
     940:	fb e0       	ldi	r31, 0x0B	; 11
     942:	ff 2e       	mov	r15, r31
     944:	f0 2d       	mov	r31, r0
     946:	01 e3       	ldi	r16, 0x31	; 49
     948:	1b e0       	ldi	r17, 0x0B	; 11
     94a:	21 e3       	ldi	r18, 0x31	; 49
     94c:	3b e0       	ldi	r19, 0x0B	; 11
     94e:	41 e2       	ldi	r20, 0x21	; 33
     950:	5b e0       	ldi	r21, 0x0B	; 11
     952:	63 ea       	ldi	r22, 0xA3	; 163
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	c2 01       	movw	r24, r4
     958:	df d4       	rcall	.+2494   	; 0x1318 <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2870, 2900, 2900, MAX_SPEED+1);
     95a:	0f 2e       	mov	r0, r31
     95c:	f5 e5       	ldi	r31, 0x55	; 85
     95e:	ef 2e       	mov	r14, r31
     960:	fb e0       	ldi	r31, 0x0B	; 11
     962:	ff 2e       	mov	r15, r31
     964:	f0 2d       	mov	r31, r0
     966:	04 e5       	ldi	r16, 0x54	; 84
     968:	1b e0       	ldi	r17, 0x0B	; 11
     96a:	24 e5       	ldi	r18, 0x54	; 84
     96c:	3b e0       	ldi	r19, 0x0B	; 11
     96e:	46 e3       	ldi	r20, 0x36	; 54
     970:	5b e0       	ldi	r21, 0x0B	; 11
     972:	6a ea       	ldi	r22, 0xAA	; 170
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	ce 01       	movw	r24, r28
     978:	8f 52       	subi	r24, 0x2F	; 47
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	cd d4       	rcall	.+2458   	; 0x1318 <MATLAB_MF>
	
	// Linked list for MFs
	speed.membership_functions = &still;
     97e:	49 e7       	ldi	r20, 0x79	; 121
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	4c 0f       	add	r20, r28
     984:	5d 1f       	adc	r21, r29
     986:	5e 8f       	std	Y+30, r21	; 0x1e
     988:	4d 8f       	std	Y+29, r20	; 0x1d
	still.next = &low;
     98a:	c3 57       	subi	r28, 0x73	; 115
     98c:	df 4f       	sbci	r29, 0xFF	; 255
     98e:	b9 82       	std	Y+1, r11	; 0x01
     990:	a8 82       	st	Y, r10
     992:	cd 58       	subi	r28, 0x8D	; 141
     994:	d0 40       	sbci	r29, 0x00	; 0
	low.next = &cruising;
     996:	e5 ea       	ldi	r30, 0xA5	; 165
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	ec 0f       	add	r30, r28
     99c:	fd 1f       	adc	r31, r29
     99e:	d5 01       	movw	r26, r10
     9a0:	55 96       	adiw	r26, 0x15	; 21
     9a2:	fc 93       	st	X, r31
     9a4:	ee 93       	st	-X, r30
     9a6:	54 97       	sbiw	r26, 0x14	; 20
	cruising.next = &medium;
     9a8:	c7 54       	subi	r28, 0x47	; 71
     9aa:	df 4f       	sbci	r29, 0xFF	; 255
     9ac:	59 82       	std	Y+1, r5	; 0x01
     9ae:	48 82       	st	Y, r4
     9b0:	c9 5b       	subi	r28, 0xB9	; 185
     9b2:	d0 40       	sbci	r29, 0x00	; 0
	medium.next = &high;
     9b4:	e1 ed       	ldi	r30, 0xD1	; 209
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ec 0f       	add	r30, r28
     9ba:	fd 1f       	adc	r31, r29
     9bc:	d2 01       	movw	r26, r4
     9be:	55 96       	adiw	r26, 0x15	; 21
     9c0:	fc 93       	st	X, r31
     9c2:	ee 93       	st	-X, r30
     9c4:	54 97       	sbiw	r26, 0x14	; 20
	high.next = NULL;
     9c6:	cb 51       	subi	r28, 0x1B	; 27
     9c8:	df 4f       	sbci	r29, 0xFF	; 255
     9ca:	19 82       	std	Y+1, r1	; 0x01
     9cc:	18 82       	st	Y, r1
     9ce:	c5 5e       	subi	r28, 0xE5	; 229
     9d0:	d0 40       	sbci	r29, 0x00	; 0

	
	// DECLARATION OF PWM OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type pwm; strcpy(pwm.name, "pwm");
     9d2:	80 e7       	ldi	r24, 0x70	; 112
     9d4:	97 e7       	ldi	r25, 0x77	; 119
     9d6:	ad e6       	ldi	r26, 0x6D	; 109
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	c9 51       	subi	r28, 0x19	; 25
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	88 83       	st	Y, r24
     9e0:	99 83       	std	Y+1, r25	; 0x01
     9e2:	aa 83       	std	Y+2, r26	; 0x02
     9e4:	bb 83       	std	Y+3, r27	; 0x03
     9e6:	c7 5e       	subi	r28, 0xE7	; 231
     9e8:	d0 40       	sbci	r29, 0x00	; 0
	
	// Set MFs
	struct mf_type noSpeed;
	MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     9ea:	4e 01       	movw	r8, r28
     9ec:	f7 ef       	ldi	r31, 0xF7	; 247
     9ee:	8f 0e       	add	r8, r31
     9f0:	91 1c       	adc	r9, r1
     9f2:	0f 2e       	mov	r0, r31
     9f4:	ee 24       	eor	r14, r14
     9f6:	ea 94       	dec	r14
     9f8:	fa e0       	ldi	r31, 0x0A	; 10
     9fa:	ff 2e       	mov	r15, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	04 eb       	ldi	r16, 0xB4	; 180
     a00:	1a e0       	ldi	r17, 0x0A	; 10
     a02:	24 eb       	ldi	r18, 0xB4	; 180
     a04:	3a e0       	ldi	r19, 0x0A	; 10
     a06:	43 eb       	ldi	r20, 0xB3	; 179
     a08:	5a e0       	ldi	r21, 0x0A	; 10
     a0a:	6f ea       	ldi	r22, 0xAF	; 175
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	c4 01       	movw	r24, r8
     a10:	83 d4       	rcall	.+2310   	; 0x1318 <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2804, 2820, 2820, 2836);
     a12:	6e 01       	movw	r12, r28
     a14:	23 ef       	ldi	r18, 0xF3	; 243
     a16:	c2 1a       	sub	r12, r18
     a18:	2e ef       	ldi	r18, 0xFE	; 254
     a1a:	d2 0a       	sbc	r13, r18
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f4 e1       	ldi	r31, 0x14	; 20
     a20:	ef 2e       	mov	r14, r31
     a22:	fb e0       	ldi	r31, 0x0B	; 11
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 2d       	mov	r31, r0
     a28:	04 e0       	ldi	r16, 0x04	; 4
     a2a:	1b e0       	ldi	r17, 0x0B	; 11
     a2c:	24 e0       	ldi	r18, 0x04	; 4
     a2e:	3b e0       	ldi	r19, 0x0B	; 11
     a30:	44 ef       	ldi	r20, 0xF4	; 244
     a32:	5a e0       	ldi	r21, 0x0A	; 10
     a34:	67 eb       	ldi	r22, 0xB7	; 183
     a36:	71 e0       	ldi	r23, 0x01	; 1
     a38:	c6 01       	movw	r24, r12
     a3a:	6e d4       	rcall	.+2268   	; 0x1318 <MATLAB_MF>
	struct mf_type cruise;
	MATLAB_MF(&cruise, "cruise", 2827, 2843, 2843, 2859);
     a3c:	1e 01       	movw	r2, r28
     a3e:	4d ed       	ldi	r20, 0xDD	; 221
     a40:	24 1a       	sub	r2, r20
     a42:	4e ef       	ldi	r20, 0xFE	; 254
     a44:	34 0a       	sbc	r3, r20
     a46:	0f 2e       	mov	r0, r31
     a48:	fb e2       	ldi	r31, 0x2B	; 43
     a4a:	ef 2e       	mov	r14, r31
     a4c:	fb e0       	ldi	r31, 0x0B	; 11
     a4e:	ff 2e       	mov	r15, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	0b e1       	ldi	r16, 0x1B	; 27
     a54:	1b e0       	ldi	r17, 0x0B	; 11
     a56:	2b e1       	ldi	r18, 0x1B	; 27
     a58:	3b e0       	ldi	r19, 0x0B	; 11
     a5a:	4b e0       	ldi	r20, 0x0B	; 11
     a5c:	5b e0       	ldi	r21, 0x0B	; 11
     a5e:	6c eb       	ldi	r22, 0xBC	; 188
     a60:	71 e0       	ldi	r23, 0x01	; 1
     a62:	c1 01       	movw	r24, r2
     a64:	59 d4       	rcall	.+2226   	; 0x1318 <MATLAB_MF>
	struct mf_type medHigh;
	MATLAB_MF(&medHigh, "medHigh", 2849, 2865, 2865, 2881);
     a66:	0f 2e       	mov	r0, r31
     a68:	f1 e4       	ldi	r31, 0x41	; 65
     a6a:	ef 2e       	mov	r14, r31
     a6c:	fb e0       	ldi	r31, 0x0B	; 11
     a6e:	ff 2e       	mov	r15, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	01 e3       	ldi	r16, 0x31	; 49
     a74:	1b e0       	ldi	r17, 0x0B	; 11
     a76:	21 e3       	ldi	r18, 0x31	; 49
     a78:	3b e0       	ldi	r19, 0x0B	; 11
     a7a:	41 e2       	ldi	r20, 0x21	; 33
     a7c:	5b e0       	ldi	r21, 0x0B	; 11
     a7e:	63 ec       	ldi	r22, 0xC3	; 195
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	ce 01       	movw	r24, r28
     a84:	87 5c       	subi	r24, 0xC7	; 199
     a86:	9e 4f       	sbci	r25, 0xFE	; 254
     a88:	47 d4       	rcall	.+2190   	; 0x1318 <MATLAB_MF>
	struct mf_type max;
	MATLAB_MF(&max, "max", 2870, 2900, 2900, 2901);
     a8a:	0f 2e       	mov	r0, r31
     a8c:	f5 e5       	ldi	r31, 0x55	; 85
     a8e:	ef 2e       	mov	r14, r31
     a90:	fb e0       	ldi	r31, 0x0B	; 11
     a92:	ff 2e       	mov	r15, r31
     a94:	f0 2d       	mov	r31, r0
     a96:	04 e5       	ldi	r16, 0x54	; 84
     a98:	1b e0       	ldi	r17, 0x0B	; 11
     a9a:	24 e5       	ldi	r18, 0x54	; 84
     a9c:	3b e0       	ldi	r19, 0x0B	; 11
     a9e:	46 e3       	ldi	r20, 0x36	; 54
     aa0:	5b e0       	ldi	r21, 0x0B	; 11
     aa2:	6b ec       	ldi	r22, 0xCB	; 203
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	ce 01       	movw	r24, r28
     aa8:	81 5b       	subi	r24, 0xB1	; 177
     aaa:	9e 4f       	sbci	r25, 0xFE	; 254
     aac:	35 d4       	rcall	.+2154   	; 0x1318 <MATLAB_MF>
	
	// Linked list for MFs
	pwm.membership_functions = &noSpeed;
     aae:	cd 50       	subi	r28, 0x0D	; 13
     ab0:	df 4f       	sbci	r29, 0xFF	; 255
     ab2:	99 82       	std	Y+1, r9	; 0x01
     ab4:	88 82       	st	Y, r8
     ab6:	c3 5f       	subi	r28, 0xF3	; 243
     ab8:	d0 40       	sbci	r29, 0x00	; 0
	noSpeed.next = &slow;
     aba:	d4 01       	movw	r26, r8
     abc:	55 96       	adiw	r26, 0x15	; 21
     abe:	dc 92       	st	X, r13
     ac0:	ce 92       	st	-X, r12
     ac2:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &cruise;
     ac4:	f6 01       	movw	r30, r12
     ac6:	35 8a       	std	Z+21, r3	; 0x15
     ac8:	24 8a       	std	Z+20, r2	; 0x14
	cruise.next = &medHigh;
     aca:	e9 e3       	ldi	r30, 0x39	; 57
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	ec 0f       	add	r30, r28
     ad0:	fd 1f       	adc	r31, r29
     ad2:	d1 01       	movw	r26, r2
     ad4:	55 96       	adiw	r26, 0x15	; 21
     ad6:	fc 93       	st	X, r31
     ad8:	ee 93       	st	-X, r30
     ada:	54 97       	sbiw	r26, 0x14	; 20
	medHigh.next = &max;
     adc:	4f e4       	ldi	r20, 0x4F	; 79
     ade:	51 e0       	ldi	r21, 0x01	; 1
     ae0:	4c 0f       	add	r20, r28
     ae2:	5d 1f       	adc	r21, r29
     ae4:	c3 5b       	subi	r28, 0xB3	; 179
     ae6:	de 4f       	sbci	r29, 0xFE	; 254
     ae8:	59 83       	std	Y+1, r21	; 0x01
     aea:	48 83       	st	Y, r20
     aec:	cd 54       	subi	r28, 0x4D	; 77
     aee:	d1 40       	sbci	r29, 0x01	; 1
	max.next = NULL;
     af0:	cd 59       	subi	r28, 0x9D	; 157
     af2:	de 4f       	sbci	r29, 0xFE	; 254
     af4:	19 82       	std	Y+1, r1	; 0x01
     af6:	18 82       	st	Y, r1
     af8:	c3 56       	subi	r28, 0x63	; 99
     afa:	d1 40       	sbci	r29, 0x01	; 1
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &distance;
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	90 93 1b 03 	sts	0x031B, r25
     b04:	80 93 1a 03 	sts	0x031A, r24
	distance.next = &speed;
     b08:	40 96       	adiw	r24, 0x10	; 16
     b0a:	98 8b       	std	Y+16, r25	; 0x10
     b0c:	8f 87       	std	Y+15, r24	; 0x0f
	speed.next = NULL;
     b0e:	18 a2       	std	Y+32, r1	; 0x20
     b10:	1f 8e       	std	Y+31, r1	; 0x1f
	
	System_Outputs = &pwm;
     b12:	87 ee       	ldi	r24, 0xE7	; 231
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	8c 0f       	add	r24, r28
     b18:	9d 1f       	adc	r25, r29
     b1a:	90 93 19 03 	sts	0x0319, r25
     b1e:	80 93 18 03 	sts	0x0318, r24
	pwm.next = NULL;
     b22:	cb 50       	subi	r28, 0x0B	; 11
     b24:	df 4f       	sbci	r29, 0xFF	; 255
     b26:	19 82       	std	Y+1, r1	; 0x01
     b28:	18 82       	st	Y, r1
     b2a:	c5 5f       	subi	r28, 0xF5	; 245
     b2c:	d0 40       	sbci	r29, 0x00	; 0

	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
     b2e:	9e 01       	movw	r18, r28
     b30:	2b 59       	subi	r18, 0x9B	; 155
     b32:	3e 4f       	sbci	r19, 0xFE	; 254
     b34:	30 93 1d 03 	sts	0x031D, r19
     b38:	20 93 1c 03 	sts	0x031C, r18
	struct rule_type rule2; rule1.next = &rule2;
     b3c:	8c 57       	subi	r24, 0x7C	; 124
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	d9 01       	movw	r26, r18
     b42:	15 96       	adiw	r26, 0x05	; 5
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule3; rule2.next = &rule3;
     b4a:	1c 96       	adiw	r26, 0x0c	; 12
     b4c:	fc 01       	movw	r30, r24
     b4e:	b5 83       	std	Z+5, r27	; 0x05
     b50:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
     b52:	47 e7       	ldi	r20, 0x77	; 119
     b54:	51 e0       	ldi	r21, 0x01	; 1
     b56:	4c 0f       	add	r20, r28
     b58:	5d 1f       	adc	r21, r29
     b5a:	15 96       	adiw	r26, 0x05	; 5
     b5c:	5c 93       	st	X, r21
     b5e:	4e 93       	st	-X, r20
     b60:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule5; rule4.next = &rule5;
     b62:	8e 01       	movw	r16, r28
     b64:	03 58       	subi	r16, 0x83	; 131
     b66:	1e 4f       	sbci	r17, 0xFE	; 254
     b68:	c5 58       	subi	r28, 0x85	; 133
     b6a:	de 4f       	sbci	r29, 0xFE	; 254
     b6c:	19 83       	std	Y+1, r17	; 0x01
     b6e:	08 83       	st	Y, r16
     b70:	cb 57       	subi	r28, 0x7B	; 123
     b72:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule6; rule5.next = &rule6;
     b74:	7e 01       	movw	r14, r28
     b76:	5d e7       	ldi	r21, 0x7D	; 125
     b78:	e5 1a       	sub	r14, r21
     b7a:	5e ef       	ldi	r21, 0xFE	; 254
     b7c:	f5 0a       	sbc	r15, r21
     b7e:	f8 01       	movw	r30, r16
     b80:	f5 82       	std	Z+5, r15	; 0x05
     b82:	e4 82       	std	Z+4, r14	; 0x04
	struct rule_type rule7; rule6.next = &rule7;
     b84:	49 e8       	ldi	r20, 0x89	; 137
     b86:	51 e0       	ldi	r21, 0x01	; 1
     b88:	4c 0f       	add	r20, r28
     b8a:	5d 1f       	adc	r21, r29
     b8c:	f7 01       	movw	r30, r14
     b8e:	55 83       	std	Z+5, r21	; 0x05
     b90:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule8; rule7.next = &rule8;
     b92:	ef e8       	ldi	r30, 0x8F	; 143
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	ec 0f       	add	r30, r28
     b98:	fd 1f       	adc	r31, r29
     b9a:	c3 57       	subi	r28, 0x73	; 115
     b9c:	de 4f       	sbci	r29, 0xFE	; 254
     b9e:	f9 83       	std	Y+1, r31	; 0x01
     ba0:	e8 83       	st	Y, r30
     ba2:	cd 58       	subi	r28, 0x8D	; 141
     ba4:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule9; rule8.next = &rule9;
     ba6:	45 e9       	ldi	r20, 0x95	; 149
     ba8:	51 e0       	ldi	r21, 0x01	; 1
     baa:	4c 0f       	add	r20, r28
     bac:	5d 1f       	adc	r21, r29
     bae:	cd 56       	subi	r28, 0x6D	; 109
     bb0:	de 4f       	sbci	r29, 0xFE	; 254
     bb2:	59 83       	std	Y+1, r21	; 0x01
     bb4:	48 83       	st	Y, r20
     bb6:	c3 59       	subi	r28, 0x93	; 147
     bb8:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule10; rule9.next = &rule10;
     bba:	eb e9       	ldi	r30, 0x9B	; 155
     bbc:	f1 e0       	ldi	r31, 0x01	; 1
     bbe:	ec 0f       	add	r30, r28
     bc0:	fd 1f       	adc	r31, r29
     bc2:	c7 56       	subi	r28, 0x67	; 103
     bc4:	de 4f       	sbci	r29, 0xFE	; 254
     bc6:	f9 83       	std	Y+1, r31	; 0x01
     bc8:	e8 83       	st	Y, r30
     bca:	c9 59       	subi	r28, 0x99	; 153
     bcc:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule11; rule10.next = &rule11;
     bce:	41 ea       	ldi	r20, 0xA1	; 161
     bd0:	51 e0       	ldi	r21, 0x01	; 1
     bd2:	4c 0f       	add	r20, r28
     bd4:	5d 1f       	adc	r21, r29
     bd6:	c1 56       	subi	r28, 0x61	; 97
     bd8:	de 4f       	sbci	r29, 0xFE	; 254
     bda:	59 83       	std	Y+1, r21	; 0x01
     bdc:	48 83       	st	Y, r20
     bde:	cf 59       	subi	r28, 0x9F	; 159
     be0:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     be2:	e7 ea       	ldi	r30, 0xA7	; 167
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	cb 55       	subi	r28, 0x5B	; 91
     bec:	de 4f       	sbci	r29, 0xFE	; 254
     bee:	f9 83       	std	Y+1, r31	; 0x01
     bf0:	e8 83       	st	Y, r30
     bf2:	c5 5a       	subi	r28, 0xA5	; 165
     bf4:	d1 40       	sbci	r29, 0x01	; 1
     bf6:	c5 55       	subi	r28, 0x55	; 85
     bf8:	de 4f       	sbci	r29, 0xFE	; 254
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	18 82       	st	Y, r1
     bfe:	cb 5a       	subi	r28, 0xAB	; 171
     c00:	d1 40       	sbci	r29, 0x01	; 1
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if distance is stopDist then pwm is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c02:	be 01       	movw	r22, r28
     c04:	63 55       	subi	r22, 0x53	; 83
     c06:	7e 4f       	sbci	r23, 0xFE	; 254
     c08:	f9 01       	movw	r30, r18
     c0a:	71 83       	std	Z+1, r23	; 0x01
     c0c:	60 83       	st	Z, r22
     c0e:	fb 01       	movw	r30, r22
     c10:	13 82       	std	Z+3, r1	; 0x03
     c12:	12 82       	std	Z+2, r1	; 0x02
     c14:	40 5f       	subi	r20, 0xF0	; 240
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	f9 01       	movw	r30, r18
     c1a:	53 83       	std	Z+3, r21	; 0x03
     c1c:	42 83       	std	Z+2, r20	; 0x02
     c1e:	fa 01       	movw	r30, r20
     c20:	13 82       	std	Z+3, r1	; 0x03
     c22:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &noSpeed.value;
     c24:	2a 53       	subi	r18, 0x3A	; 58
     c26:	31 40       	sbci	r19, 0x01	; 1
     c28:	fb 01       	movw	r30, r22
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
     c2e:	fa e0       	ldi	r31, 0x0A	; 10
     c30:	8f 0e       	add	r8, r31
     c32:	91 1c       	adc	r9, r1
     c34:	fa 01       	movw	r30, r20
     c36:	91 82       	std	Z+1, r9	; 0x01
     c38:	80 82       	st	Z, r8
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, if22, then2;
	rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     c3a:	68 5f       	subi	r22, 0xF8	; 248
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	fc 01       	movw	r30, r24
     c40:	71 83       	std	Z+1, r23	; 0x01
     c42:	60 83       	st	Z, r22
     c44:	48 5f       	subi	r20, 0xF8	; 248
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	fb 01       	movw	r30, r22
     c4a:	53 83       	std	Z+3, r21	; 0x03
     c4c:	42 83       	std	Z+2, r20	; 0x02
     c4e:	fa 01       	movw	r30, r20
     c50:	13 82       	std	Z+3, r1	; 0x03
     c52:	12 82       	std	Z+2, r1	; 0x02
     c54:	2e 56       	subi	r18, 0x6E	; 110
     c56:	3e 4f       	sbci	r19, 0xFE	; 254
     c58:	fc 01       	movw	r30, r24
     c5a:	33 83       	std	Z+3, r19	; 0x03
     c5c:	22 83       	std	Z+2, r18	; 0x02
     c5e:	f9 01       	movw	r30, r18
     c60:	13 82       	std	Z+3, r1	; 0x03
     c62:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     c64:	fa e0       	ldi	r31, 0x0A	; 10
     c66:	af 0e       	add	r10, r31
     c68:	b1 1c       	adc	r11, r1
     c6a:	fb 01       	movw	r30, r22
     c6c:	b1 82       	std	Z+1, r11	; 0x01
     c6e:	a0 82       	st	Z, r10
     c70:	fa e0       	ldi	r31, 0x0A	; 10
     c72:	6f 0e       	add	r6, r31
     c74:	71 1c       	adc	r7, r1
     c76:	fa 01       	movw	r30, r20
     c78:	71 82       	std	Z+1, r7	; 0x01
     c7a:	60 82       	st	Z, r6
     c7c:	fa e0       	ldi	r31, 0x0A	; 10
     c7e:	cf 0e       	add	r12, r31
     c80:	d1 1c       	adc	r13, r1
     c82:	f9 01       	movw	r30, r18
     c84:	d1 82       	std	Z+1, r13	; 0x01
     c86:	c0 82       	st	Z, r12
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     c88:	48 5f       	subi	r20, 0xF8	; 248
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	11 96       	adiw	r26, 0x01	; 1
     c8e:	5c 93       	st	X, r21
     c90:	4e 93       	st	-X, r20
     c92:	28 5f       	subi	r18, 0xF8	; 248
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	fa 01       	movw	r30, r20
     c98:	33 83       	std	Z+3, r19	; 0x03
     c9a:	22 83       	std	Z+2, r18	; 0x02
     c9c:	f9 01       	movw	r30, r18
     c9e:	13 82       	std	Z+3, r1	; 0x03
     ca0:	12 82       	std	Z+2, r1	; 0x02
     ca2:	82 5a       	subi	r24, 0xA2	; 162
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	dc 01       	movw	r26, r24
     cb0:	13 96       	adiw	r26, 0x03	; 3
     cb2:	1c 92       	st	X, r1
     cb4:	1e 92       	st	-X, r1
     cb6:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     cb8:	ba e0       	ldi	r27, 0x0A	; 10
     cba:	4b 0e       	add	r4, r27
     cbc:	51 1c       	adc	r5, r1
     cbe:	fa 01       	movw	r30, r20
     cc0:	51 82       	std	Z+1, r5	; 0x01
     cc2:	40 82       	st	Z, r4
     cc4:	d9 01       	movw	r26, r18
     cc6:	6d 92       	st	X+, r6
     cc8:	7c 92       	st	X, r7
     cca:	ba e0       	ldi	r27, 0x0A	; 10
     ccc:	2b 0e       	add	r2, r27
     cce:	31 1c       	adc	r3, r1
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 82       	std	Z+1, r3	; 0x01
     cd4:	20 82       	st	Z, r2
	
	// if speed is high and distance is oneM then speed is cruise
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     cd6:	28 5f       	subi	r18, 0xF8	; 248
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	c9 58       	subi	r28, 0x89	; 137
     cdc:	de 4f       	sbci	r29, 0xFE	; 254
     cde:	39 83       	std	Y+1, r19	; 0x01
     ce0:	28 83       	st	Y, r18
     ce2:	c7 57       	subi	r28, 0x77	; 119
     ce4:	d1 40       	sbci	r29, 0x01	; 1
     ce6:	08 96       	adiw	r24, 0x08	; 8
     ce8:	d9 01       	movw	r26, r18
     cea:	13 96       	adiw	r26, 0x03	; 3
     cec:	9c 93       	st	X, r25
     cee:	8e 93       	st	-X, r24
     cf0:	12 97       	sbiw	r26, 0x02	; 2
     cf2:	fc 01       	movw	r30, r24
     cf4:	13 82       	std	Z+3, r1	; 0x03
     cf6:	12 82       	std	Z+2, r1	; 0x02
     cf8:	18 96       	adiw	r26, 0x08	; 8
     cfa:	c7 58       	subi	r28, 0x87	; 135
     cfc:	de 4f       	sbci	r29, 0xFE	; 254
     cfe:	b9 83       	std	Y+1, r27	; 0x01
     d00:	a8 83       	st	Y, r26
     d02:	c9 57       	subi	r28, 0x79	; 121
     d04:	d1 40       	sbci	r29, 0x01	; 1
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	1c 92       	st	X, r1
     d0a:	1e 92       	st	-X, r1
     d0c:	12 97       	sbiw	r26, 0x02	; 2
	if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d0e:	41 ed       	ldi	r20, 0xD1	; 209
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	4c 0f       	add	r20, r28
     d14:	5d 1f       	adc	r21, r29
     d16:	46 5f       	subi	r20, 0xF6	; 246
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	f9 01       	movw	r30, r18
     d1c:	51 83       	std	Z+1, r21	; 0x01
     d1e:	40 83       	st	Z, r20
     d20:	fc 01       	movw	r30, r24
     d22:	71 82       	std	Z+1, r7	; 0x01
     d24:	60 82       	st	Z, r6
     d26:	2d 92       	st	X+, r2
     d28:	3c 92       	st	X, r3
	
	// if speed is still and distance is oneM then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     d2a:	08 96       	adiw	r24, 0x08	; 8
     d2c:	d8 01       	movw	r26, r16
     d2e:	8d 93       	st	X+, r24
     d30:	9c 93       	st	X, r25
     d32:	68 5d       	subi	r22, 0xD8	; 216
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	fc 01       	movw	r30, r24
     d38:	73 83       	std	Z+3, r23	; 0x03
     d3a:	62 83       	std	Z+2, r22	; 0x02
     d3c:	db 01       	movw	r26, r22
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	1c 92       	st	X, r1
     d42:	1e 92       	st	-X, r1
     d44:	12 97       	sbiw	r26, 0x02	; 2
     d46:	38 96       	adiw	r30, 0x08	; 8
     d48:	d8 01       	movw	r26, r16
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	fc 93       	st	X, r31
     d4e:	ee 93       	st	-X, r30
     d50:	12 97       	sbiw	r26, 0x02	; 2
     d52:	13 82       	std	Z+3, r1	; 0x03
     d54:	12 82       	std	Z+2, r1	; 0x02
	if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     d56:	29 e7       	ldi	r18, 0x79	; 121
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	2c 0f       	add	r18, r28
     d5c:	3d 1f       	adc	r19, r29
     d5e:	26 5f       	subi	r18, 0xF6	; 246
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	dc 01       	movw	r26, r24
     d64:	2d 93       	st	X+, r18
     d66:	3c 93       	st	X, r19
     d68:	db 01       	movw	r26, r22
     d6a:	6d 92       	st	X+, r6
     d6c:	7c 92       	st	X, r7
     d6e:	d1 82       	std	Z+1, r13	; 0x01
     d70:	c0 82       	st	Z, r12
	
	// if speed is cruising and distance is oneM then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     d72:	0c 96       	adiw	r24, 0x0c	; 12
     d74:	f7 01       	movw	r30, r14
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	04 59       	subi	r16, 0x94	; 148
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	dc 01       	movw	r26, r24
     d80:	13 96       	adiw	r26, 0x03	; 3
     d82:	1c 93       	st	X, r17
     d84:	0e 93       	st	-X, r16
     d86:	12 97       	sbiw	r26, 0x02	; 2
     d88:	f8 01       	movw	r30, r16
     d8a:	13 82       	std	Z+3, r1	; 0x03
     d8c:	12 82       	std	Z+2, r1	; 0x02
     d8e:	34 96       	adiw	r30, 0x04	; 4
     d90:	d7 01       	movw	r26, r14
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	fc 93       	st	X, r31
     d96:	ee 93       	st	-X, r30
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	13 82       	std	Z+3, r1	; 0x03
     d9c:	12 82       	std	Z+2, r1	; 0x02
	if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     d9e:	65 ea       	ldi	r22, 0xA5	; 165
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	6c 0f       	add	r22, r28
     da4:	7d 1f       	adc	r23, r29
     da6:	66 5f       	subi	r22, 0xF6	; 246
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	dc 01       	movw	r26, r24
     dac:	6d 93       	st	X+, r22
     dae:	7c 93       	st	X, r23
     db0:	d8 01       	movw	r26, r16
     db2:	6d 92       	st	X+, r6
     db4:	7c 92       	st	X, r7
     db6:	d1 82       	std	Z+1, r13	; 0x01
     db8:	c0 82       	st	Z, r12
	
	// if speed is low and distance is twoM then speed is cruise
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     dba:	0c 96       	adiw	r24, 0x0c	; 12
     dbc:	c7 57       	subi	r28, 0x77	; 119
     dbe:	de 4f       	sbci	r29, 0xFE	; 254
     dc0:	99 83       	std	Y+1, r25	; 0x01
     dc2:	88 83       	st	Y, r24
     dc4:	c9 58       	subi	r28, 0x89	; 137
     dc6:	d1 40       	sbci	r29, 0x01	; 1
     dc8:	04 5f       	subi	r16, 0xF4	; 244
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	fc 01       	movw	r30, r24
     dce:	13 83       	std	Z+3, r17	; 0x03
     dd0:	02 83       	std	Z+2, r16	; 0x02
     dd2:	d8 01       	movw	r26, r16
     dd4:	13 96       	adiw	r26, 0x03	; 3
     dd6:	1c 92       	st	X, r1
     dd8:	1e 92       	st	-X, r1
     dda:	12 97       	sbiw	r26, 0x02	; 2
     ddc:	38 96       	adiw	r30, 0x08	; 8
     dde:	c5 57       	subi	r28, 0x75	; 117
     de0:	de 4f       	sbci	r29, 0xFE	; 254
     de2:	f9 83       	std	Y+1, r31	; 0x01
     de4:	e8 83       	st	Y, r30
     de6:	cb 58       	subi	r28, 0x8B	; 139
     de8:	d1 40       	sbci	r29, 0x01	; 1
     dea:	13 82       	std	Z+3, r1	; 0x03
     dec:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     dee:	dc 01       	movw	r26, r24
     df0:	ad 92       	st	X+, r10
     df2:	bc 92       	st	X, r11
     df4:	8d e4       	ldi	r24, 0x4D	; 77
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	8c 0f       	add	r24, r28
     dfa:	9d 1f       	adc	r25, r29
     dfc:	0a 96       	adiw	r24, 0x0a	; 10
     dfe:	d8 01       	movw	r26, r16
     e00:	8d 93       	st	X+, r24
     e02:	9c 93       	st	X, r25
     e04:	31 82       	std	Z+1, r3	; 0x01
     e06:	20 82       	st	Z, r2
	
	// if speed is medium and distance is twoM then speed is medHigh
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e08:	08 5f       	subi	r16, 0xF8	; 248
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	c1 57       	subi	r28, 0x71	; 113
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	19 83       	std	Y+1, r17	; 0x01
     e12:	08 83       	st	Y, r16
     e14:	cf 58       	subi	r28, 0x8F	; 143
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	7e 01       	movw	r14, r28
     e1a:	bf ef       	ldi	r27, 0xFF	; 255
     e1c:	eb 1a       	sub	r14, r27
     e1e:	bd ef       	ldi	r27, 0xFD	; 253
     e20:	fb 0a       	sbc	r15, r27
     e22:	f8 01       	movw	r30, r16
     e24:	f3 82       	std	Z+3, r15	; 0x03
     e26:	e2 82       	std	Z+2, r14	; 0x02
     e28:	d7 01       	movw	r26, r14
     e2a:	13 96       	adiw	r26, 0x03	; 3
     e2c:	1c 92       	st	X, r1
     e2e:	1e 92       	st	-X, r1
     e30:	12 97       	sbiw	r26, 0x02	; 2
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	cf 56       	subi	r28, 0x6F	; 111
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	b9 83       	std	Y+1, r27	; 0x01
     e3a:	a8 83       	st	Y, r26
     e3c:	c1 59       	subi	r28, 0x91	; 145
     e3e:	d1 40       	sbci	r29, 0x01	; 1
     e40:	13 96       	adiw	r26, 0x03	; 3
     e42:	1c 92       	st	X, r1
     e44:	1e 92       	st	-X, r1
     e46:	12 97       	sbiw	r26, 0x02	; 2
	if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     e48:	51 82       	std	Z+1, r5	; 0x01
     e4a:	40 82       	st	Z, r4
     e4c:	f7 01       	movw	r30, r14
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
     e52:	0f 2e       	mov	r0, r31
     e54:	f9 e3       	ldi	r31, 0x39	; 57
     e56:	cf 2e       	mov	r12, r31
     e58:	dd 24       	eor	r13, r13
     e5a:	d3 94       	inc	r13
     e5c:	f0 2d       	mov	r31, r0
     e5e:	cc 0e       	add	r12, r28
     e60:	dd 1e       	adc	r13, r29
     e62:	fa e0       	ldi	r31, 0x0A	; 10
     e64:	cf 0e       	add	r12, r31
     e66:	d1 1c       	adc	r13, r1
     e68:	cd 92       	st	X+, r12
     e6a:	dc 92       	st	X, r13
	
	// if speed is high and distance is twoM then speed is medHigh
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     e6c:	7e 01       	movw	r14, r28
     e6e:	a7 ef       	ldi	r26, 0xF7	; 247
     e70:	ea 1a       	sub	r14, r26
     e72:	ad ef       	ldi	r26, 0xFD	; 253
     e74:	fa 0a       	sbc	r15, r26
     e76:	cb 56       	subi	r28, 0x6B	; 107
     e78:	de 4f       	sbci	r29, 0xFE	; 254
     e7a:	f9 82       	std	Y+1, r15	; 0x01
     e7c:	e8 82       	st	Y, r14
     e7e:	c5 59       	subi	r28, 0x95	; 149
     e80:	d1 40       	sbci	r29, 0x01	; 1
     e82:	00 5f       	subi	r16, 0xF0	; 240
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	f7 01       	movw	r30, r14
     e88:	13 83       	std	Z+3, r17	; 0x03
     e8a:	02 83       	std	Z+2, r16	; 0x02
     e8c:	d8 01       	movw	r26, r16
     e8e:	13 96       	adiw	r26, 0x03	; 3
     e90:	1c 92       	st	X, r1
     e92:	1e 92       	st	-X, r1
     e94:	12 97       	sbiw	r26, 0x02	; 2
     e96:	14 96       	adiw	r26, 0x04	; 4
     e98:	c9 56       	subi	r28, 0x69	; 105
     e9a:	de 4f       	sbci	r29, 0xFE	; 254
     e9c:	b9 83       	std	Y+1, r27	; 0x01
     e9e:	a8 83       	st	Y, r26
     ea0:	c7 59       	subi	r28, 0x97	; 151
     ea2:	d1 40       	sbci	r29, 0x01	; 1
     ea4:	13 96       	adiw	r26, 0x03	; 3
     ea6:	1c 92       	st	X, r1
     ea8:	1e 92       	st	-X, r1
     eaa:	12 97       	sbiw	r26, 0x02	; 2
	if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     eac:	51 83       	std	Z+1, r21	; 0x01
     eae:	40 83       	st	Z, r20
     eb0:	f8 01       	movw	r30, r16
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	cd 92       	st	X+, r12
     eb8:	dc 92       	st	X, r13
	
	// if speed is still and distance is twoM then speed is cruise
	struct rule_element_type if101, if102, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     eba:	08 5f       	subi	r16, 0xF8	; 248
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	c5 56       	subi	r28, 0x65	; 101
     ec0:	de 4f       	sbci	r29, 0xFE	; 254
     ec2:	19 83       	std	Y+1, r17	; 0x01
     ec4:	08 83       	st	Y, r16
     ec6:	cb 59       	subi	r28, 0x9B	; 155
     ec8:	d1 40       	sbci	r29, 0x01	; 1
     eca:	42 5c       	subi	r20, 0xC2	; 194
     ecc:	5e 4f       	sbci	r21, 0xFE	; 254
     ece:	d8 01       	movw	r26, r16
     ed0:	13 96       	adiw	r26, 0x03	; 3
     ed2:	5c 93       	st	X, r21
     ed4:	4e 93       	st	-X, r20
     ed6:	12 97       	sbiw	r26, 0x02	; 2
     ed8:	fa 01       	movw	r30, r20
     eda:	13 82       	std	Z+3, r1	; 0x03
     edc:	12 82       	std	Z+2, r1	; 0x02
     ede:	18 96       	adiw	r26, 0x08	; 8
     ee0:	c3 56       	subi	r28, 0x63	; 99
     ee2:	de 4f       	sbci	r29, 0xFE	; 254
     ee4:	b9 83       	std	Y+1, r27	; 0x01
     ee6:	a8 83       	st	Y, r26
     ee8:	cd 59       	subi	r28, 0x9D	; 157
     eea:	d1 40       	sbci	r29, 0x01	; 1
     eec:	13 96       	adiw	r26, 0x03	; 3
     eee:	1c 92       	st	X, r1
     ef0:	1e 92       	st	-X, r1
     ef2:	12 97       	sbiw	r26, 0x02	; 2
	if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     ef4:	f8 01       	movw	r30, r16
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	20 83       	st	Z, r18
     efa:	fa 01       	movw	r30, r20
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	80 83       	st	Z, r24
     f00:	2d 92       	st	X+, r2
     f02:	3c 92       	st	X, r3
	
	// if speed is cruising and distance is twoM then speed is medHigh
	struct rule_element_type if111, if112, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f04:	48 5f       	subi	r20, 0xF8	; 248
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	cf 55       	subi	r28, 0x5F	; 95
     f0a:	de 4f       	sbci	r29, 0xFE	; 254
     f0c:	59 83       	std	Y+1, r21	; 0x01
     f0e:	48 83       	st	Y, r20
     f10:	c1 5a       	subi	r28, 0xA1	; 161
     f12:	d1 40       	sbci	r29, 0x01	; 1
     f14:	2e 55       	subi	r18, 0x5E	; 94
     f16:	3e 4f       	sbci	r19, 0xFE	; 254
     f18:	da 01       	movw	r26, r20
     f1a:	13 96       	adiw	r26, 0x03	; 3
     f1c:	3c 93       	st	X, r19
     f1e:	2e 93       	st	-X, r18
     f20:	12 97       	sbiw	r26, 0x02	; 2
     f22:	f9 01       	movw	r30, r18
     f24:	13 82       	std	Z+3, r1	; 0x03
     f26:	12 82       	std	Z+2, r1	; 0x02
     f28:	18 96       	adiw	r26, 0x08	; 8
     f2a:	cd 55       	subi	r28, 0x5D	; 93
     f2c:	de 4f       	sbci	r29, 0xFE	; 254
     f2e:	b9 83       	std	Y+1, r27	; 0x01
     f30:	a8 83       	st	Y, r26
     f32:	c3 5a       	subi	r28, 0xA3	; 163
     f34:	d1 40       	sbci	r29, 0x01	; 1
     f36:	13 96       	adiw	r26, 0x03	; 3
     f38:	1c 92       	st	X, r1
     f3a:	1e 92       	st	-X, r1
     f3c:	12 97       	sbiw	r26, 0x02	; 2
	if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     f3e:	fa 01       	movw	r30, r20
     f40:	71 83       	std	Z+1, r23	; 0x01
     f42:	60 83       	st	Z, r22
     f44:	f9 01       	movw	r30, r18
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	dc 92       	st	X, r13
     f4e:	ce 92       	st	-X, r12
	
	// if distance is threeM then speed is max
	struct rule_element_type if121, then12;
	rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     f50:	14 96       	adiw	r26, 0x04	; 4
     f52:	c9 55       	subi	r28, 0x59	; 89
     f54:	de 4f       	sbci	r29, 0xFE	; 254
     f56:	b9 83       	std	Y+1, r27	; 0x01
     f58:	a8 83       	st	Y, r26
     f5a:	c7 5a       	subi	r28, 0xA7	; 167
     f5c:	d1 40       	sbci	r29, 0x01	; 1
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	1c 92       	st	X, r1
     f62:	1e 92       	st	-X, r1
     f64:	12 97       	sbiw	r26, 0x02	; 2
     f66:	3c 96       	adiw	r30, 0x0c	; 12
     f68:	c7 55       	subi	r28, 0x57	; 87
     f6a:	de 4f       	sbci	r29, 0xFE	; 254
     f6c:	f9 83       	std	Y+1, r31	; 0x01
     f6e:	e8 83       	st	Y, r30
     f70:	c9 5a       	subi	r28, 0xA9	; 169
     f72:	d1 40       	sbci	r29, 0x01	; 1
     f74:	13 82       	std	Z+3, r1	; 0x03
     f76:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &threeM.value; then12.value = &max.value;
     f78:	83 e6       	ldi	r24, 0x63	; 99
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	8c 0f       	add	r24, r28
     f7e:	9d 1f       	adc	r25, r29
     f80:	0a 96       	adiw	r24, 0x0a	; 10
     f82:	8d 93       	st	X+, r24
     f84:	9c 93       	st	X, r25
     f86:	8f e4       	ldi	r24, 0x4F	; 79
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	8c 0f       	add	r24, r28
     f8c:	9d 1f       	adc	r25, r29
     f8e:	0a 96       	adiw	r24, 0x0a	; 10
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
     f94:	97 d0       	rcall	.+302    	; 0x10c4 <fuzzification>
	rule_evaluation();
     f96:	bd d0       	rcall	.+378    	; 0x1112 <rule_evaluation>
	defuzzification(); 
     f98:	02 d1       	rcall	.+516    	; 0x119e <defuzzification>

	if (pwm.value > 2840)
     f9a:	cf 50       	subi	r28, 0x0F	; 15
     f9c:	df 4f       	sbci	r29, 0xFF	; 255
     f9e:	88 81       	ld	r24, Y
     fa0:	99 81       	ldd	r25, Y+1	; 0x01
     fa2:	c1 5f       	subi	r28, 0xF1	; 241
     fa4:	d0 40       	sbci	r29, 0x00	; 0
     fa6:	89 31       	cpi	r24, 0x19	; 25
     fa8:	fb e0       	ldi	r31, 0x0B	; 11
     faa:	9f 07       	cpc	r25, r31
     fac:	24 f0       	brlt	.+8      	; 0xfb6 <FLC_obstacle+0x850>

	{
		setESC(2840);
     fae:	88 e1       	ldi	r24, 0x18	; 24
     fb0:	9b e0       	ldi	r25, 0x0B	; 11
     fb2:	cd d2       	rcall	.+1434   	; 0x154e <setESC>
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <FLC_obstacle+0x862>
	}
	else if (pwm.value < 2750)
     fb6:	8e 3b       	cpi	r24, 0xBE	; 190
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	92 07       	cpc	r25, r18
     fbc:	24 f4       	brge	.+8      	; 0xfc6 <FLC_obstacle+0x860>
	{
		setESC(2750);
     fbe:	8e eb       	ldi	r24, 0xBE	; 190
     fc0:	9a e0       	ldi	r25, 0x0A	; 10
     fc2:	c5 d2       	rcall	.+1418   	; 0x154e <setESC>
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <FLC_obstacle+0x862>
	}
	else
	{
		setESC(pwm.value);
     fc6:	c3 d2       	rcall	.+1414   	; 0x154e <setESC>
	}
	
	
	
     fc8:	cc 5c       	subi	r28, 0xCC	; 204
     fca:	dd 4f       	sbci	r29, 0xFD	; 253
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	5f 90       	pop	r5
     ff4:	4f 90       	pop	r4
     ff6:	3f 90       	pop	r3
     ff8:	2f 90       	pop	r2
     ffa:	08 95       	ret

00000ffc <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     ffc:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     ffe:	84 85       	ldd	r24, Z+12	; 0x0c
    1000:	95 85       	ldd	r25, Z+13	; 0x0d
    1002:	9b 01       	movw	r18, r22
    1004:	28 1b       	sub	r18, r24
    1006:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    1008:	86 85       	ldd	r24, Z+14	; 0x0e
    100a:	97 85       	ldd	r25, Z+15	; 0x0f
    100c:	86 1b       	sub	r24, r22
    100e:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	f4 f4       	brge	.+60     	; 0x1052 <compute_degree_of_membership+0x56>
    1016:	18 16       	cp	r1, r24
    1018:	19 06       	cpc	r1, r25
    101a:	f4 f4       	brge	.+60     	; 0x1058 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    101c:	60 89       	ldd	r22, Z+16	; 0x10
    101e:	71 89       	ldd	r23, Z+17	; 0x11
    1020:	a2 89       	ldd	r26, Z+18	; 0x12
    1022:	b3 89       	ldd	r27, Z+19	; 0x13
    1024:	8a 9f       	mul	r24, r26
    1026:	a0 01       	movw	r20, r0
    1028:	8b 9f       	mul	r24, r27
    102a:	50 0d       	add	r21, r0
    102c:	9a 9f       	mul	r25, r26
    102e:	50 0d       	add	r21, r0
    1030:	11 24       	eor	r1, r1
    1032:	26 9f       	mul	r18, r22
    1034:	c0 01       	movw	r24, r0
    1036:	27 9f       	mul	r18, r23
    1038:	90 0d       	add	r25, r0
    103a:	36 9f       	mul	r19, r22
    103c:	90 0d       	add	r25, r0
    103e:	11 24       	eor	r1, r1
    1040:	48 17       	cp	r20, r24
    1042:	59 07       	cpc	r21, r25
    1044:	0c f4       	brge	.+2      	; 0x1048 <compute_degree_of_membership+0x4c>
    1046:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	91 05       	cpc	r25, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <compute_degree_of_membership+0x54>
    104e:	3c f4       	brge	.+14     	; 0x105e <compute_degree_of_membership+0x62>
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <compute_degree_of_membership+0x66>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1062:	93 87       	std	Z+11, r25	; 0x0b
    1064:	82 87       	std	Z+10, r24	; 0x0a
    1066:	08 95       	ret

00001068 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    1072:	c6 85       	ldd	r28, Z+14	; 0x0e
    1074:	d7 85       	ldd	r29, Z+15	; 0x0f
    1076:	84 85       	ldd	r24, Z+12	; 0x0c
    1078:	95 85       	ldd	r25, Z+13	; 0x0d
    107a:	c8 1b       	sub	r28, r24
    107c:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    107e:	22 85       	ldd	r18, Z+10	; 0x0a
    1080:	33 85       	ldd	r19, Z+11	; 0x0b
    1082:	60 89       	ldd	r22, Z+16	; 0x10
    1084:	71 89       	ldd	r23, Z+17	; 0x11
    1086:	c9 01       	movw	r24, r18
    1088:	0e 94 4a 10 	call	0x2094	; 0x2094 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    108c:	8e 01       	movw	r16, r28
    108e:	06 1b       	sub	r16, r22
    1090:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    1092:	62 89       	ldd	r22, Z+18	; 0x12
    1094:	73 89       	ldd	r23, Z+19	; 0x13
    1096:	c9 01       	movw	r24, r18
    1098:	fd d7       	rcall	.+4090   	; 0x2094 <__divmodhi4>
    top = base - run_1 - run_2;
    109a:	06 1b       	sub	r16, r22
    109c:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    109e:	c0 0f       	add	r28, r16
    10a0:	d1 1f       	adc	r29, r17
    10a2:	2c 9f       	mul	r18, r28
    10a4:	c0 01       	movw	r24, r0
    10a6:	2d 9f       	mul	r18, r29
    10a8:	90 0d       	add	r25, r0
    10aa:	3c 9f       	mul	r19, r28
    10ac:	90 0d       	add	r25, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	99 23       	and	r25, r25
    10b2:	0c f4       	brge	.+2      	; 0x10b6 <compute_area_of_trapezoid+0x4e>
    10b4:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    10b6:	95 95       	asr	r25
    10b8:	87 95       	ror	r24
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    10cc:	00 91 1a 03 	lds	r16, 0x031A
    10d0:	10 91 1b 03 	lds	r17, 0x031B
    10d4:	01 15       	cp	r16, r1
    10d6:	11 05       	cpc	r17, r1
    10d8:	b9 f0       	breq	.+46     	; 0x1108 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    10da:	f8 01       	movw	r30, r16
    10dc:	c4 85       	ldd	r28, Z+12	; 0x0c
    10de:	d5 85       	ldd	r29, Z+13	; 0x0d
    10e0:	20 97       	sbiw	r28, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <fuzzification+0x38>
            if (mf!=NULL) {
    10e4:	20 97       	sbiw	r28, 0x00	; 0
    10e6:	29 f0       	breq	.+10     	; 0x10f2 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    10e8:	f8 01       	movw	r30, r16
    10ea:	62 85       	ldd	r22, Z+10	; 0x0a
    10ec:	73 85       	ldd	r23, Z+11	; 0x0b
    10ee:	ce 01       	movw	r24, r28
    10f0:	85 df       	rcall	.-246    	; 0xffc <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    10f2:	0c 88       	ldd	r0, Y+20	; 0x14
    10f4:	dd 89       	ldd	r29, Y+21	; 0x15
    10f6:	c0 2d       	mov	r28, r0
    10f8:	20 97       	sbiw	r28, 0x00	; 0
    10fa:	a1 f7       	brne	.-24     	; 0x10e4 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    10fc:	f8 01       	movw	r30, r16
    10fe:	06 85       	ldd	r16, Z+14	; 0x0e
    1100:	17 85       	ldd	r17, Z+15	; 0x0f
    1102:	01 15       	cp	r16, r1
    1104:	11 05       	cpc	r17, r1
    1106:	49 f7       	brne	.-46     	; 0x10da <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    111a:	c0 91 1c 03 	lds	r28, 0x031C
    111e:	d0 91 1d 03 	lds	r29, 0x031D
    1122:	20 97       	sbiw	r28, 0x00	; 0
    1124:	b9 f1       	breq	.+110    	; 0x1194 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    112a:	e8 81       	ld	r30, Y
    112c:	f9 81       	ldd	r31, Y+1	; 0x01
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	81 f0       	breq	.+32     	; 0x1152 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1132:	20 2f       	mov	r18, r16
    1134:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    1136:	a0 81       	ld	r26, Z
    1138:	b1 81       	ldd	r27, Z+1	; 0x01
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	82 17       	cp	r24, r18
    1140:	93 07       	cpc	r25, r19
    1142:	0c f4       	brge	.+2      	; 0x1146 <rule_evaluation+0x34>
    1144:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1146:	02 80       	ldd	r0, Z+2	; 0x02
    1148:	f3 81       	ldd	r31, Z+3	; 0x03
    114a:	e0 2d       	mov	r30, r0
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	99 f7       	brne	.-26     	; 0x1136 <rule_evaluation+0x24>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1152:	20 2f       	mov	r18, r16
    1154:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1156:	ea 81       	ldd	r30, Y+2	; 0x02
    1158:	fb 81       	ldd	r31, Y+3	; 0x03
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	b1 f0       	breq	.+44     	; 0x118a <rule_evaluation+0x78>
    115e:	72 2f       	mov	r23, r18
    1160:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1162:	a0 81       	ld	r26, Z
    1164:	b1 81       	ldd	r27, Z+1	; 0x01
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	57 2f       	mov	r21, r23
    116e:	46 2f       	mov	r20, r22
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	14 f4       	brge	.+4      	; 0x117a <rule_evaluation+0x68>
    1176:	58 2f       	mov	r21, r24
    1178:	49 2f       	mov	r20, r25
    117a:	5c 93       	st	X, r21
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1180:	02 80       	ldd	r0, Z+2	; 0x02
    1182:	f3 81       	ldd	r31, Z+3	; 0x03
    1184:	e0 2d       	mov	r30, r0
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	61 f7       	brne	.-40     	; 0x1162 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    118a:	0c 80       	ldd	r0, Y+4	; 0x04
    118c:	dd 81       	ldd	r29, Y+5	; 0x05
    118e:	c0 2d       	mov	r28, r0
    1190:	20 97       	sbiw	r28, 0x00	; 0
    1192:	59 f6       	brne	.-106    	; 0x112a <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    119e:	2f 92       	push	r2
    11a0:	3f 92       	push	r3
    11a2:	4f 92       	push	r4
    11a4:	5f 92       	push	r5
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <defuzzification+0x26>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <defuzzification+0x28>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <defuzzification+0x2a>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    11cc:	80 91 18 03 	lds	r24, 0x0318
    11d0:	90 91 19 03 	lds	r25, 0x0319
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	89 2b       	or	r24, r25
    11da:	09 f4       	brne	.+2      	; 0x11de <defuzzification+0x40>
    11dc:	84 c0       	rjmp	.+264    	; 0x12e6 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	04 84       	ldd	r0, Z+12	; 0x0c
    11e4:	f5 85       	ldd	r31, Z+13	; 0x0d
    11e6:	e0 2d       	mov	r30, r0
    11e8:	fe 83       	std	Y+6, r31	; 0x06
    11ea:	ed 83       	std	Y+5, r30	; 0x05
    11ec:	ef 2b       	or	r30, r31
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <defuzzification+0x54>
    11f0:	66 c0       	rjmp	.+204    	; 0x12be <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    11f2:	51 2c       	mov	r5, r1
    11f4:	61 2c       	mov	r6, r1
    11f6:	71 2c       	mov	r7, r1
    11f8:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    11fa:	31 2c       	mov	r3, r1
    11fc:	21 2c       	mov	r2, r1
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	30 df       	rcall	.-416    	; 0x1068 <compute_area_of_trapezoid>
    1208:	bc 01       	movw	r22, r24
    120a:	88 27       	eor	r24, r24
    120c:	77 fd       	sbrc	r23, 7
    120e:	80 95       	com	r24
    1210:	98 2f       	mov	r25, r24
    1212:	51 d6       	rcall	.+3234   	; 0x1eb6 <__floatsisf>
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    1218:	ed 81       	ldd	r30, Y+5	; 0x05
    121a:	fe 81       	ldd	r31, Y+6	; 0x06
    121c:	04 85       	ldd	r16, Z+12	; 0x0c
    121e:	15 85       	ldd	r17, Z+13	; 0x0d
    1220:	b8 01       	movw	r22, r16
    1222:	88 27       	eor	r24, r24
    1224:	77 fd       	sbrc	r23, 7
    1226:	80 95       	com	r24
    1228:	98 2f       	mov	r25, r24
    122a:	45 d6       	rcall	.+3210   	; 0x1eb6 <__floatsisf>
    122c:	4b 01       	movw	r8, r22
    122e:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1230:	ed 81       	ldd	r30, Y+5	; 0x05
    1232:	fe 81       	ldd	r31, Y+6	; 0x06
    1234:	86 85       	ldd	r24, Z+14	; 0x0e
    1236:	97 85       	ldd	r25, Z+15	; 0x0f
    1238:	80 1b       	sub	r24, r16
    123a:	91 0b       	sbc	r25, r17
    123c:	bc 01       	movw	r22, r24
    123e:	12 f4       	brpl	.+4      	; 0x1244 <defuzzification+0xa6>
    1240:	6f 5f       	subi	r22, 0xFF	; 255
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	75 95       	asr	r23
    1246:	67 95       	ror	r22
            centroid = centroid + intermed;
    1248:	88 27       	eor	r24, r24
    124a:	77 fd       	sbrc	r23, 7
    124c:	80 95       	com	r24
    124e:	98 2f       	mov	r25, r24
    1250:	32 d6       	rcall	.+3172   	; 0x1eb6 <__floatsisf>
    1252:	a5 01       	movw	r20, r10
    1254:	94 01       	movw	r18, r8
    1256:	30 d5       	rcall	.+2656   	; 0x1cb8 <__addsf3>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	b6 d6       	rcall	.+3436   	; 0x1fce <__mulsf3>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	63 2d       	mov	r22, r3
    1268:	72 2d       	mov	r23, r2
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	24 d5       	rcall	.+2632   	; 0x1cb8 <__addsf3>
    1270:	36 2e       	mov	r3, r22
    1272:	27 2e       	mov	r2, r23
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1278:	a7 01       	movw	r20, r14
    127a:	96 01       	movw	r18, r12
    127c:	65 2d       	mov	r22, r5
    127e:	76 2d       	mov	r23, r6
    1280:	87 2d       	mov	r24, r7
    1282:	94 2d       	mov	r25, r4
    1284:	19 d5       	rcall	.+2610   	; 0x1cb8 <__addsf3>
    1286:	56 2e       	mov	r5, r22
    1288:	67 2e       	mov	r6, r23
    128a:	78 2e       	mov	r7, r24
    128c:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    128e:	ed 81       	ldd	r30, Y+5	; 0x05
    1290:	fe 81       	ldd	r31, Y+6	; 0x06
    1292:	04 88       	ldd	r0, Z+20	; 0x14
    1294:	f5 89       	ldd	r31, Z+21	; 0x15
    1296:	e0 2d       	mov	r30, r0
    1298:	fe 83       	std	Y+6, r31	; 0x06
    129a:	ed 83       	std	Y+5, r30	; 0x05
    129c:	ef 2b       	or	r30, r31
    129e:	09 f0       	breq	.+2      	; 0x12a2 <defuzzification+0x104>
    12a0:	b0 cf       	rjmp	.-160    	; 0x1202 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    12a2:	26 2f       	mov	r18, r22
    12a4:	37 2f       	mov	r19, r23
    12a6:	48 2f       	mov	r20, r24
    12a8:	59 2f       	mov	r21, r25
    12aa:	63 2d       	mov	r22, r3
    12ac:	72 2d       	mov	r23, r2
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	66 d5       	rcall	.+2764   	; 0x1d80 <__divsf3>
    12b4:	26 2f       	mov	r18, r22
    12b6:	37 2f       	mov	r19, r23
    12b8:	48 2f       	mov	r20, r24
    12ba:	59 2f       	mov	r21, r25
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    12c6:	62 2f       	mov	r22, r18
    12c8:	73 2f       	mov	r23, r19
    12ca:	84 2f       	mov	r24, r20
    12cc:	95 2f       	mov	r25, r21
    12ce:	c0 d5       	rcall	.+2944   	; 0x1e50 <__fixsfsi>
    12d0:	eb 81       	ldd	r30, Y+3	; 0x03
    12d2:	fc 81       	ldd	r31, Y+4	; 0x04
    12d4:	73 87       	std	Z+11, r23	; 0x0b
    12d6:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    12d8:	86 85       	ldd	r24, Z+14	; 0x0e
    12da:	97 85       	ldd	r25, Z+15	; 0x0f
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	89 2b       	or	r24, r25
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <defuzzification+0x148>
    12e4:	7c cf       	rjmp	.-264    	; 0x11de <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    12e6:	26 96       	adiw	r28, 0x06	; 6
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	7f 90       	pop	r7
    130c:	6f 90       	pop	r6
    130e:	5f 90       	pop	r5
    1310:	4f 90       	pop	r4
    1312:	3f 90       	pop	r3
    1314:	2f 90       	pop	r2
    1316:	08 95       	ret

00001318 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	6a 01       	movw	r12, r20
    1330:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    1332:	d7 d6       	rcall	.+3502   	; 0x20e2 <strcpy>
    newMf->value = 0;
    1334:	1b 86       	std	Y+11, r1	; 0x0b
    1336:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    1338:	dd 86       	std	Y+13, r13	; 0x0d
    133a:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    133c:	ff 86       	std	Y+15, r15	; 0x0f
    133e:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    1340:	b5 01       	movw	r22, r10
    1342:	6c 19       	sub	r22, r12
    1344:	7d 09       	sbc	r23, r13
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	31 e0       	ldi	r19, 0x01	; 1
    134a:	c9 01       	movw	r24, r18
    134c:	a3 d6       	rcall	.+3398   	; 0x2094 <__divmodhi4>
    134e:	79 8b       	std	Y+17, r23	; 0x11
    1350:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    1352:	b7 01       	movw	r22, r14
    1354:	60 1b       	sub	r22, r16
    1356:	71 0b       	sbc	r23, r17
    1358:	c9 01       	movw	r24, r18
    135a:	9c d6       	rcall	.+3384   	; 0x2094 <__divmodhi4>
    135c:	7b 8b       	std	Y+19, r23	; 0x13
    135e:	6a 8b       	std	Y+18, r22	; 0x12
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	08 95       	ret

00001376 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	0b b6       	in	r0, 0x3b	; 59
    1382:	0f 92       	push	r0
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	80 91 ce 00 	lds	r24, 0x00CE
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	29 f4       	brne	.+10     	; 0x139e <__vector_28+0x28>
    1394:	10 92 fb 01 	sts	0x01FB, r1
    1398:	10 92 fa 01 	sts	0x01FA, r1
    139c:	10 c0       	rjmp	.+32     	; 0x13be <__vector_28+0x48>
    139e:	e0 91 fa 01 	lds	r30, 0x01FA
    13a2:	f0 91 fb 01 	lds	r31, 0x01FB
    13a6:	e2 5e       	subi	r30, 0xE2	; 226
    13a8:	fc 4f       	sbci	r31, 0xFC	; 252
    13aa:	80 83       	st	Z, r24
    13ac:	80 91 fa 01 	lds	r24, 0x01FA
    13b0:	90 91 fb 01 	lds	r25, 0x01FB
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	90 93 fb 01 	sts	0x01FB, r25
    13ba:	80 93 fa 01 	sts	0x01FA, r24
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <carInit>:
    13d4:	ad d0       	rcall	.+346    	; 0x1530 <pwmInit>
    13d6:	a7 d1       	rcall	.+846    	; 0x1726 <spi_slave_init>
    13d8:	8d ec       	ldi	r24, 0xCD	; 205
    13da:	9a e0       	ldi	r25, 0x0A	; 10
    13dc:	b8 d0       	rcall	.+368    	; 0x154e <setESC>
    13de:	84 e6       	ldi	r24, 0x64	; 100
    13e0:	9a e0       	ldi	r25, 0x0A	; 10
    13e2:	d0 c0       	rjmp	.+416    	; 0x1584 <setServo>
    13e4:	08 95       	ret

000013e6 <count>:
    13e6:	80 91 fc 01 	lds	r24, 0x01FC
    13ea:	90 91 fd 01 	lds	r25, 0x01FD
    13ee:	89 2b       	or	r24, r25
    13f0:	59 f4       	brne	.+22     	; 0x1408 <count+0x22>
    13f2:	10 92 90 00 	sts	0x0090, r1
    13f6:	85 e0       	ldi	r24, 0x05	; 5
    13f8:	80 93 91 00 	sts	0x0091, r24
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	90 93 fd 01 	sts	0x01FD, r25
    1404:	80 93 fc 01 	sts	0x01FC, r24
    1408:	80 91 94 00 	lds	r24, 0x0094
    140c:	90 91 95 00 	lds	r25, 0x0095
    1410:	80 3e       	cpi	r24, 0xE0	; 224
    1412:	90 41       	sbci	r25, 0x10	; 16
    1414:	30 f0       	brcs	.+12     	; 0x1422 <count+0x3c>
    1416:	10 92 95 00 	sts	0x0095, r1
    141a:	10 92 94 00 	sts	0x0094, r1
    141e:	10 92 91 00 	sts	0x0091, r1
    1422:	08 95       	ret

00001424 <USART1_init>:
    1424:	ec ec       	ldi	r30, 0xCC	; 204
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	11 82       	std	Z+1, r1	; 0x01
    142a:	10 82       	st	Z, r1
    142c:	20 e9       	ldi	r18, 0x90	; 144
    142e:	20 93 c9 00 	sts	0x00C9, r18
    1432:	2e e0       	ldi	r18, 0x0E	; 14
    1434:	20 93 ca 00 	sts	0x00CA, r18
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	10 92 fb 01 	sts	0x01FB, r1
    1440:	10 92 fa 01 	sts	0x01FA, r1
    1444:	08 95       	ret

00001446 <main>:




int main (void)
{	
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2b 97       	sbiw	r28, 0x0b	; 11
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	//	FLC_obstacle(2800, 150);

	carInit();
    145a:	bc df       	rcall	.-136    	; 0x13d4 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    145c:	2f ef       	ldi	r18, 0xFF	; 255
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	90 ee       	ldi	r25, 0xE0	; 224
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	80 40       	sbci	r24, 0x00	; 0
    1466:	90 40       	sbci	r25, 0x00	; 0
    1468:	e1 f7       	brne	.-8      	; 0x1462 <main+0x1c>
    146a:	00 c0       	rjmp	.+0      	; 0x146c <main+0x26>
    146c:	00 00       	nop
	unsigned char k_value_stop_line;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	d8 df       	rcall	.-80     	; 0x1424 <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    1478:	78 94       	sei
				FLC_steering(c,v);
			}
			else if (control_mode == 4)
			{
				count();
				if (TCNT3 < 4319) // 0.3 seconds
    147a:	0f 2e       	mov	r0, r31
    147c:	f4 e9       	ldi	r31, 0x94	; 148
    147e:	8f 2e       	mov	r8, r31
    1480:	91 2c       	mov	r9, r1
    1482:	f0 2d       	mov	r31, r0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF);
    1484:	0f 2e       	mov	r0, r31
    1486:	f8 e8       	ldi	r31, 0x88	; 136
    1488:	cf 2e       	mov	r12, r31
    148a:	d1 2c       	mov	r13, r1
    148c:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    148e:	0f 2e       	mov	r0, r31
    1490:	fa e8       	ldi	r31, 0x8A	; 138
    1492:	af 2e       	mov	r10, r31
    1494:	b1 2c       	mov	r11, r1
    1496:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    1498:	a5 d1       	rcall	.+842    	; 0x17e4 <is_package_recieved>
    149a:	88 23       	and	r24, r24
    149c:	e9 f3       	breq	.-6      	; 0x1498 <main+0x52>
			

			//Reading Information
			prev_control_mode = control_mode;
    149e:	1b 85       	ldd	r17, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    14a0:	be 01       	movw	r22, r28
    14a2:	6f 5f       	subi	r22, 0xFF	; 255
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	ce 01       	movw	r24, r28
    14a8:	0b 96       	adiw	r24, 0x0b	; 11
    14aa:	a6 d1       	rcall	.+844    	; 0x17f8 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    14ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <main+0x7a>
    14b2:	11 11       	cpse	r17, r1
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <main+0x7a>
				onGoingStop = 0;
    14b6:	10 92 fd 01 	sts	0x01FD, r1
    14ba:	10 92 fc 01 	sts	0x01FC, r1
				k_value_stop_line = sensor_info.dist_to_stop_line;
    14be:	79 84       	ldd	r7, Y+9	; 0x09
			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    14c0:	6b 81       	ldd	r22, Y+3	; 0x03
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    14c2:	19 81       	ldd	r17, Y+1	; 0x01
			int v = (int) sensor_info.angular_diff;
    14c4:	0a 81       	ldd	r16, Y+2	; 0x02
			
			cli();
    14c6:	f8 94       	cli
			
			if (control_mode == 0)
    14c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ca:	91 11       	cpse	r25, r1
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <main+0x9e>
			{
				FLC_obstacle(OCR1A, sF);
    14ce:	f6 01       	movw	r30, r12
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
				onGoingStop = 0;
				k_value_stop_line = sensor_info.dist_to_stop_line;
			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    14d4:	70 e0       	ldi	r23, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF);
    14d6:	47 d9       	rcall	.-3442   	; 0x766 <FLC_obstacle>
			int sF = (int) sensor_info.dist_sonic_middle;
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
    14d8:	60 2f       	mov	r22, r16
    14da:	70 e0       	ldi	r23, 0x00	; 0
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF);
				FLC_steering(c,v);
    14dc:	81 2f       	mov	r24, r17
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	1f d9       	rcall	.-3522   	; 0x720 <FLC_steering>
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <main+0xca>
			}
			else if (control_mode == 4)
    14e4:	94 30       	cpi	r25, 0x04	; 4
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <main+0xca>
			{
				count();
    14e8:	7e df       	rcall	.-260    	; 0x13e6 <count>
				if (TCNT3 < 4319) // 0.3 seconds
    14ea:	f4 01       	movw	r30, r8
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	8f 3d       	cpi	r24, 0xDF	; 223
    14f2:	90 41       	sbci	r25, 0x10	; 16
    14f4:	38 f4       	brcc	.+14     	; 0x1504 <main+0xbe>
				{
					setESC(2835);
    14f6:	83 e1       	ldi	r24, 0x13	; 19
    14f8:	9b e0       	ldi	r25, 0x0B	; 11
    14fa:	29 d0       	rcall	.+82     	; 0x154e <setESC>
					stop(k_value_stop_line);
    14fc:	87 2d       	mov	r24, r7
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	ba d1       	rcall	.+884    	; 0x1876 <stop>
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <main+0xca>
				}
				else
				{
					setESC(NEUTRAL);
    1504:	8d ec       	ldi	r24, 0xCD	; 205
    1506:	9a e0       	ldi	r25, 0x0A	; 10
    1508:	22 d0       	rcall	.+68     	; 0x154e <setESC>
					setServo(STRAIGHT);
    150a:	84 e6       	ldi	r24, 0x64	; 100
    150c:	9a e0       	ldi	r25, 0x0A	; 10
    150e:	3a d0       	rcall	.+116    	; 0x1584 <setServo>
				}
			}
			

			
			sei();
    1510:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1512:	f6 01       	movw	r30, r12
    1514:	e0 80       	ld	r14, Z
    1516:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1518:	f5 01       	movw	r30, r10
    151a:	00 81       	ld	r16, Z
    151c:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0b d1       	rcall	.+534    	; 0x1738 <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1522:	8e 2d       	mov	r24, r14
    1524:	09 d1       	rcall	.+530    	; 0x1738 <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	07 d1       	rcall	.+526    	; 0x1738 <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    152a:	80 2f       	mov	r24, r16
    152c:	05 d1       	rcall	.+522    	; 0x1738 <spi_send_byte>
    152e:	b4 cf       	rjmp	.-152    	; 0x1498 <main+0x52>

00001530 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1534:	82 ea       	ldi	r24, 0xA2	; 162
    1536:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f e8       	ldi	r25, 0x8F	; 143
    153e:	90 93 87 00 	sts	0x0087, r25
    1542:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1546:	8a e1       	ldi	r24, 0x1A	; 26
    1548:	80 93 81 00 	sts	0x0081, r24
    154c:	08 95       	ret

0000154e <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    154e:	80 36       	cpi	r24, 0x60	; 96
    1550:	2a e0       	ldi	r18, 0x0A	; 10
    1552:	92 07       	cpc	r25, r18
    1554:	3c f4       	brge	.+14     	; 0x1564 <setESC+0x16>
	{
		OCR1A = MINESC;
    1556:	8f e5       	ldi	r24, 0x5F	; 95
    1558:	9a e0       	ldi	r25, 0x0A	; 10
    155a:	90 93 89 00 	sts	0x0089, r25
    155e:	80 93 88 00 	sts	0x0088, r24
    1562:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1564:	8b 33       	cpi	r24, 0x3B	; 59
    1566:	2b e0       	ldi	r18, 0x0B	; 11
    1568:	92 07       	cpc	r25, r18
    156a:	3c f0       	brlt	.+14     	; 0x157a <setESC+0x2c>
	{
		OCR1A = MAXESC;
    156c:	8b e3       	ldi	r24, 0x3B	; 59
    156e:	9b e0       	ldi	r25, 0x0B	; 11
    1570:	90 93 89 00 	sts	0x0089, r25
    1574:	80 93 88 00 	sts	0x0088, r24
    1578:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    157a:	90 93 89 00 	sts	0x0089, r25
    157e:	80 93 88 00 	sts	0x0088, r24
    1582:	08 95       	ret

00001584 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1584:	84 3e       	cpi	r24, 0xE4	; 228
    1586:	2c e0       	ldi	r18, 0x0C	; 12
    1588:	92 07       	cpc	r25, r18
    158a:	3c f0       	brlt	.+14     	; 0x159a <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    158c:	84 ee       	ldi	r24, 0xE4	; 228
    158e:	9c e0       	ldi	r25, 0x0C	; 12
    1590:	90 93 8b 00 	sts	0x008B, r25
    1594:	80 93 8a 00 	sts	0x008A, r24
    1598:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    159a:	87 3e       	cpi	r24, 0xE7	; 231
    159c:	27 e0       	ldi	r18, 0x07	; 7
    159e:	92 07       	cpc	r25, r18
    15a0:	3c f4       	brge	.+14     	; 0x15b0 <setServo+0x2c>

		OCR1B = MAXLEFT;
    15a2:	86 ee       	ldi	r24, 0xE6	; 230
    15a4:	97 e0       	ldi	r25, 0x07	; 7
    15a6:	90 93 8b 00 	sts	0x008B, r25
    15aa:	80 93 8a 00 	sts	0x008A, r24
    15ae:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    15b0:	ea e8       	ldi	r30, 0x8A	; 138
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	40 91 00 01 	lds	r20, 0x0100
    15bc:	50 91 01 01 	lds	r21, 0x0101
    15c0:	84 9f       	mul	r24, r20
    15c2:	90 01       	movw	r18, r0
    15c4:	85 9f       	mul	r24, r21
    15c6:	30 0d       	add	r19, r0
    15c8:	94 9f       	mul	r25, r20
    15ca:	30 0d       	add	r19, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	40 91 02 01 	lds	r20, 0x0102
    15d2:	50 91 03 01 	lds	r21, 0x0103
    15d6:	64 9f       	mul	r22, r20
    15d8:	c0 01       	movw	r24, r0
    15da:	65 9f       	mul	r22, r21
    15dc:	90 0d       	add	r25, r0
    15de:	74 9f       	mul	r23, r20
    15e0:	90 0d       	add	r25, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	6a e0       	ldi	r22, 0x0A	; 10
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	53 d5       	rcall	.+2726   	; 0x2094 <__divmodhi4>
    15ee:	71 83       	std	Z+1, r23	; 0x01
    15f0:	60 83       	st	Z, r22
    15f2:	08 95       	ret

000015f4 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    15f4:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    15f6:	20 91 8a 02 	lds	r18, 0x028A
    15fa:	30 91 8b 02 	lds	r19, 0x028B
    15fe:	21 15       	cp	r18, r1
    1600:	31 05       	cpc	r19, r1
    1602:	a9 f0       	breq	.+42     	; 0x162e <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1604:	e6 e8       	ldi	r30, 0x86	; 134
    1606:	f2 e0       	ldi	r31, 0x02	; 2
    1608:	40 81       	ld	r20, Z
    160a:	51 81       	ldd	r21, Z+1	; 0x01
    160c:	da 01       	movw	r26, r20
    160e:	aa 5b       	subi	r26, 0xBA	; 186
    1610:	bd 4f       	sbci	r27, 0xFD	; 253
    1612:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1614:	4f 5f       	subi	r20, 0xFF	; 255
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	51 83       	std	Z+1, r21	; 0x01
    161a:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	31 09       	sbc	r19, r1
    1620:	30 93 8b 02 	sts	0x028B, r19
    1624:	20 93 8a 02 	sts	0x028A, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1628:	23 2b       	or	r18, r19
    162a:	21 f4       	brne	.+8      	; 0x1634 <spi_get_byte+0x40>
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    162e:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1630:	10 92 fe 01 	sts	0x01FE, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1634:	20 91 86 02 	lds	r18, 0x0286
    1638:	30 91 87 02 	lds	r19, 0x0287
    163c:	20 34       	cpi	r18, 0x40	; 64
    163e:	31 05       	cpc	r19, r1
    1640:	21 f4       	brne	.+8      	; 0x164a <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1642:	10 92 87 02 	sts	0x0287, r1
    1646:	10 92 86 02 	sts	0x0286, r1
	}
	

	sei();
    164a:	78 94       	sei
	
	return value;
	
		
}
    164c:	08 95       	ret

0000164e <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    164e:	1f 92       	push	r1
    1650:	0f 92       	push	r0
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	0f 92       	push	r0
    1656:	11 24       	eor	r1, r1
    1658:	0b b6       	in	r0, 0x3b	; 59
    165a:	0f 92       	push	r0
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    166c:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    166e:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1670:	2d 3f       	cpi	r18, 0xFD	; 253
    1672:	a9 f0       	breq	.+42     	; 0x169e <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1674:	e8 e8       	ldi	r30, 0x88	; 136
    1676:	f2 e0       	ldi	r31, 0x02	; 2
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	dc 01       	movw	r26, r24
    167e:	aa 5b       	subi	r26, 0xBA	; 186
    1680:	bd 4f       	sbci	r27, 0xFD	; 253
    1682:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    168a:	ea e8       	ldi	r30, 0x8A	; 138
    168c:	f2 e0       	ldi	r31, 0x02	; 2
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 fe 01 	sts	0x01FE, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    169e:	80 91 88 02 	lds	r24, 0x0288
    16a2:	90 91 89 02 	lds	r25, 0x0289
    16a6:	80 34       	cpi	r24, 0x40	; 64
    16a8:	91 05       	cpc	r25, r1
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    16ac:	10 92 89 02 	sts	0x0289, r1
    16b0:	10 92 88 02 	sts	0x0288, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    16b4:	80 91 44 02 	lds	r24, 0x0244
    16b8:	90 91 45 02 	lds	r25, 0x0245
    16bc:	89 2b       	or	r24, r25
    16be:	01 f1       	breq	.+64     	; 0x1700 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    16c0:	e0 91 40 02 	lds	r30, 0x0240
    16c4:	f0 91 41 02 	lds	r31, 0x0241
    16c8:	e0 50       	subi	r30, 0x00	; 0
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	80 81       	ld	r24, Z
    16ce:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    16d0:	e0 e4       	ldi	r30, 0x40	; 64
    16d2:	f2 e0       	ldi	r31, 0x02	; 2
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    16de:	e4 e4       	ldi	r30, 0x44	; 68
    16e0:	f2 e0       	ldi	r31, 0x02	; 2
    16e2:	20 81       	ld	r18, Z
    16e4:	31 81       	ldd	r19, Z+1	; 0x01
    16e6:	21 50       	subi	r18, 0x01	; 1
    16e8:	31 09       	sbc	r19, r1
    16ea:	31 83       	std	Z+1, r19	; 0x01
    16ec:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    16ee:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    16f0:	80 34       	cpi	r24, 0x40	; 64
    16f2:	91 05       	cpc	r25, r1
    16f4:	49 f4       	brne	.+18     	; 0x1708 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    16f6:	10 92 41 02 	sts	0x0241, r1
    16fa:	10 92 40 02 	sts	0x0240, r1
    16fe:	04 c0       	rjmp	.+8      	; 0x1708 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1700:	8d ef       	ldi	r24, 0xFD	; 253
    1702:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1704:	10 92 ff 01 	sts	0x01FF, r1
		
	} 	
	

}
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	bf 91       	pop	r27
    170e:	af 91       	pop	r26
    1710:	9f 91       	pop	r25
    1712:	8f 91       	pop	r24
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0b be       	out	0x3b, r0	; 59
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1726:	80 e4       	ldi	r24, 0x40	; 64
    1728:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    172a:	80 ec       	ldi	r24, 0xC0	; 192
    172c:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    172e:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1730:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1732:	8d ef       	ldi	r24, 0xFD	; 253
    1734:	8e bd       	out	0x2e, r24	; 46
    1736:	08 95       	ret

00001738 <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1738:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    173a:	20 91 44 02 	lds	r18, 0x0244
    173e:	30 91 45 02 	lds	r19, 0x0245
    1742:	20 34       	cpi	r18, 0x40	; 64
    1744:	31 05       	cpc	r19, r1
    1746:	90 f4       	brcc	.+36     	; 0x176c <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1748:	e2 e4       	ldi	r30, 0x42	; 66
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	40 81       	ld	r20, Z
    174e:	51 81       	ldd	r21, Z+1	; 0x01
    1750:	da 01       	movw	r26, r20
    1752:	a0 50       	subi	r26, 0x00	; 0
    1754:	be 4f       	sbci	r27, 0xFE	; 254
    1756:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1758:	4f 5f       	subi	r20, 0xFF	; 255
    175a:	5f 4f       	sbci	r21, 0xFF	; 255
    175c:	51 83       	std	Z+1, r21	; 0x01
    175e:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1760:	2f 5f       	subi	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	30 93 45 02 	sts	0x0245, r19
    1768:	20 93 44 02 	sts	0x0244, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    176c:	80 91 42 02 	lds	r24, 0x0242
    1770:	90 91 43 02 	lds	r25, 0x0243
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	21 f4       	brne	.+8      	; 0x1782 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    177a:	10 92 43 02 	sts	0x0243, r1
    177e:	10 92 42 02 	sts	0x0242, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1782:	80 91 44 02 	lds	r24, 0x0244
    1786:	90 91 45 02 	lds	r25, 0x0245
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f4       	brne	.+60     	; 0x17ca <spi_send_byte+0x92>
    178e:	80 91 ff 01 	lds	r24, 0x01FF
    1792:	81 11       	cpse	r24, r1
    1794:	1a c0       	rjmp	.+52     	; 0x17ca <spi_send_byte+0x92>
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1796:	e0 91 40 02 	lds	r30, 0x0240
    179a:	f0 91 41 02 	lds	r31, 0x0241
    179e:	e0 50       	subi	r30, 0x00	; 0
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	80 81       	ld	r24, Z
    17a4:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    17a6:	e0 e4       	ldi	r30, 0x40	; 64
    17a8:	f2 e0       	ldi	r31, 0x02	; 2
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    17b4:	e4 e4       	ldi	r30, 0x44	; 68
    17b6:	f2 e0       	ldi	r31, 0x02	; 2
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    17c2:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 ff 01 	sts	0x01FF, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    17ca:	80 91 40 02 	lds	r24, 0x0240
    17ce:	90 91 41 02 	lds	r25, 0x0241
    17d2:	80 34       	cpi	r24, 0x40	; 64
    17d4:	91 05       	cpc	r25, r1
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <spi_send_byte+0xa8>
		tx_spi.i_first = 0;
    17d8:	10 92 41 02 	sts	0x0241, r1
    17dc:	10 92 40 02 	sts	0x0240, r1
	}
			
			

	sei();
    17e0:	78 94       	sei
    17e2:	08 95       	ret

000017e4 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	20 91 8a 02 	lds	r18, 0x028A
    17ea:	30 91 8b 02 	lds	r19, 0x028B
    17ee:	2b 30       	cpi	r18, 0x0B	; 11
    17f0:	31 05       	cpc	r19, r1
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <is_package_recieved+0x12>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    17f6:	08 95       	ret

000017f8 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	8c 01       	movw	r16, r24
    1802:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1804:	20 91 8a 02 	lds	r18, 0x028A
    1808:	30 91 8b 02 	lds	r19, 0x028B
    180c:	23 2b       	or	r18, r19
    180e:	69 f1       	breq	.+90     	; 0x186a <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1810:	e0 91 86 02 	lds	r30, 0x0286
    1814:	f0 91 87 02 	lds	r31, 0x0287
    1818:	ea 5b       	subi	r30, 0xBA	; 186
    181a:	fd 4f       	sbci	r31, 0xFD	; 253
    181c:	80 81       	ld	r24, Z
    181e:	8f 3f       	cpi	r24, 0xFF	; 255
    1820:	e1 f4       	brne	.+56     	; 0x185a <read_sensor_info+0x62>
    1822:	e0 df       	rcall	.-64     	; 0x17e4 <is_package_recieved>
    1824:	88 23       	and	r24, r24
    1826:	11 f1       	breq	.+68     	; 0x186c <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1828:	e5 de       	rcall	.-566    	; 0x15f4 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    182a:	e4 de       	rcall	.-568    	; 0x15f4 <spi_get_byte>
    182c:	f8 01       	movw	r30, r16
    182e:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1830:	e1 de       	rcall	.-574    	; 0x15f4 <spi_get_byte>
    1832:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1834:	df de       	rcall	.-578    	; 0x15f4 <spi_get_byte>
    1836:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1838:	dd de       	rcall	.-582    	; 0x15f4 <spi_get_byte>
    183a:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    183c:	db de       	rcall	.-586    	; 0x15f4 <spi_get_byte>
    183e:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1840:	d9 de       	rcall	.-590    	; 0x15f4 <spi_get_byte>
    1842:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1844:	d7 de       	rcall	.-594    	; 0x15f4 <spi_get_byte>
    1846:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1848:	8a ef       	ldi	r24, 0xFA	; 250
    184a:	9a e0       	ldi	r25, 0x0A	; 10
    184c:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->car_speed = spi_get_byte();
    184e:	d2 de       	rcall	.-604    	; 0x15f4 <spi_get_byte>
    1850:	8e 83       	std	Y+6, r24	; 0x06
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1852:	d0 de       	rcall	.-608    	; 0x15f4 <spi_get_byte>
    1854:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	09 c0       	rjmp	.+18     	; 0x186c <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    185a:	c4 df       	rcall	.-120    	; 0x17e4 <is_package_recieved>
    185c:	88 23       	and	r24, r24
    185e:	31 f0       	breq	.+12     	; 0x186c <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1860:	c9 de       	rcall	.-622    	; 0x15f4 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1862:	be 01       	movw	r22, r28
    1864:	c8 01       	movw	r24, r16
    1866:	c8 df       	rcall	.-112    	; 0x17f8 <read_sensor_info>
    1868:	01 c0       	rjmp	.+2      	; 0x186c <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    186a:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <stop>:




void stop(int k_value)
{
    1876:	4f 92       	push	r4
    1878:	5f 92       	push	r5
    187a:	6f 92       	push	r6
    187c:	7f 92       	push	r7
    187e:	8f 92       	push	r8
    1880:	9f 92       	push	r9
    1882:	af 92       	push	r10
    1884:	bf 92       	push	r11
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	ce 5c       	subi	r28, 0xCE	; 206
    189c:	d1 09       	sbc	r29, r1
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61

	
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type orientation; strcpy(orientation.name, "orientatio");
    18a8:	2b e0       	ldi	r18, 0x0B	; 11
    18aa:	ef ec       	ldi	r30, 0xCF	; 207
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
    18ae:	de 01       	movw	r26, r28
    18b0:	11 96       	adiw	r26, 0x01	; 1
    18b2:	01 90       	ld	r0, Z+
    18b4:	0d 92       	st	X+, r0
    18b6:	2a 95       	dec	r18
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <stop+0x3c>
	
	if (k_value < -20)
    18ba:	8c 3e       	cpi	r24, 0xEC	; 236
    18bc:	2f ef       	ldi	r18, 0xFF	; 255
    18be:	92 07       	cpc	r25, r18
    18c0:	2c f4       	brge	.+10     	; 0x18cc <stop+0x56>
	{
		orientation.value = -20;
    18c2:	8c ee       	ldi	r24, 0xEC	; 236
    18c4:	9f ef       	ldi	r25, 0xFF	; 255
    18c6:	9c 87       	std	Y+12, r25	; 0x0c
    18c8:	8b 87       	std	Y+11, r24	; 0x0b
    18ca:	0a c0       	rjmp	.+20     	; 0x18e0 <stop+0x6a>
	}
	else if (k_value > 20)
    18cc:	85 31       	cpi	r24, 0x15	; 21
    18ce:	91 05       	cpc	r25, r1
    18d0:	2c f0       	brlt	.+10     	; 0x18dc <stop+0x66>
	{
		orientation.value = 20;
    18d2:	84 e1       	ldi	r24, 0x14	; 20
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 87       	std	Y+12, r25	; 0x0c
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <stop+0x6a>
	}
	else
	{
		orientation.value = k_value;
    18dc:	9c 87       	std	Y+12, r25	; 0x0c
    18de:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Set MFs
	struct mf_type off_right;
	MATLAB_MF(&off_right, "off_right", -21, -20, -20, -5);
    18e0:	5e 01       	movw	r10, r28
    18e2:	81 e1       	ldi	r24, 0x11	; 17
    18e4:	a8 0e       	add	r10, r24
    18e6:	b1 1c       	adc	r11, r1
    18e8:	0f 2e       	mov	r0, r31
    18ea:	fb ef       	ldi	r31, 0xFB	; 251
    18ec:	ef 2e       	mov	r14, r31
    18ee:	ff 24       	eor	r15, r15
    18f0:	fa 94       	dec	r15
    18f2:	f0 2d       	mov	r31, r0
    18f4:	0c ee       	ldi	r16, 0xEC	; 236
    18f6:	1f ef       	ldi	r17, 0xFF	; 255
    18f8:	2c ee       	ldi	r18, 0xEC	; 236
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4b ee       	ldi	r20, 0xEB	; 235
    18fe:	5f ef       	ldi	r21, 0xFF	; 255
    1900:	6a ed       	ldi	r22, 0xDA	; 218
    1902:	71 e0       	ldi	r23, 0x01	; 1
    1904:	c5 01       	movw	r24, r10
    1906:	08 dd       	rcall	.-1520   	; 0x1318 <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", -10, 0, 0, 10);
    1908:	6e 01       	movw	r12, r28
    190a:	e7 e2       	ldi	r30, 0x27	; 39
    190c:	ce 0e       	add	r12, r30
    190e:	d1 1c       	adc	r13, r1
    1910:	0f 2e       	mov	r0, r31
    1912:	fa e0       	ldi	r31, 0x0A	; 10
    1914:	ef 2e       	mov	r14, r31
    1916:	f1 2c       	mov	r15, r1
    1918:	f0 2d       	mov	r31, r0
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	46 ef       	ldi	r20, 0xF6	; 246
    1924:	5f ef       	ldi	r21, 0xFF	; 255
    1926:	64 ee       	ldi	r22, 0xE4	; 228
    1928:	71 e0       	ldi	r23, 0x01	; 1
    192a:	c6 01       	movw	r24, r12
    192c:	f5 dc       	rcall	.-1558   	; 0x1318 <MATLAB_MF>
	struct mf_type off_left;
	MATLAB_MF(&off_left, "off_left", 5, 20, 20, 21);
    192e:	2e 01       	movw	r4, r28
    1930:	fd e3       	ldi	r31, 0x3D	; 61
    1932:	4f 0e       	add	r4, r31
    1934:	51 1c       	adc	r5, r1
    1936:	0f 2e       	mov	r0, r31
    1938:	f5 e1       	ldi	r31, 0x15	; 21
    193a:	ef 2e       	mov	r14, r31
    193c:	f1 2c       	mov	r15, r1
    193e:	f0 2d       	mov	r31, r0
    1940:	04 e1       	ldi	r16, 0x14	; 20
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	24 e1       	ldi	r18, 0x14	; 20
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	45 e0       	ldi	r20, 0x05	; 5
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	6b ee       	ldi	r22, 0xEB	; 235
    194e:	71 e0       	ldi	r23, 0x01	; 1
    1950:	c2 01       	movw	r24, r4
    1952:	e2 dc       	rcall	.-1596   	; 0x1318 <MATLAB_MF>

	// Linked list for MFs
	orientation.membership_functions = &off_right;
    1954:	be 86       	std	Y+14, r11	; 0x0e
    1956:	ad 86       	std	Y+13, r10	; 0x0d
	off_right.next = &middle;
    1958:	de a2       	std	Y+38, r13	; 0x26
    195a:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &off_left;
    195c:	5c ae       	std	Y+60, r5	; 0x3c
    195e:	4b ae       	std	Y+59, r4	; 0x3b
	off_left.next = NULL;
    1960:	63 96       	adiw	r28, 0x13	; 19
    1962:	1f ae       	std	Y+63, r1	; 0x3f
    1964:	1e ae       	std	Y+62, r1	; 0x3e
    1966:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    1968:	6e 01       	movw	r12, r28
    196a:	23 e5       	ldi	r18, 0x53	; 83
    196c:	c2 0e       	add	r12, r18
    196e:	d1 1c       	adc	r13, r1
    1970:	86 e0       	ldi	r24, 0x06	; 6
    1972:	e4 ef       	ldi	r30, 0xF4	; 244
    1974:	f1 e0       	ldi	r31, 0x01	; 1
    1976:	d6 01       	movw	r26, r12
    1978:	01 90       	ld	r0, Z+
    197a:	0d 92       	st	X+, r0
    197c:	8a 95       	dec	r24
    197e:	e1 f7       	brne	.-8      	; 0x1978 <stop+0x102>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2600, 2660, 2660, 2720);
    1980:	3e 01       	movw	r6, r28
    1982:	83 e6       	ldi	r24, 0x63	; 99
    1984:	68 0e       	add	r6, r24
    1986:	71 1c       	adc	r7, r1
    1988:	0f 2e       	mov	r0, r31
    198a:	f0 ea       	ldi	r31, 0xA0	; 160
    198c:	ef 2e       	mov	r14, r31
    198e:	fa e0       	ldi	r31, 0x0A	; 10
    1990:	ff 2e       	mov	r15, r31
    1992:	f0 2d       	mov	r31, r0
    1994:	04 e6       	ldi	r16, 0x64	; 100
    1996:	1a e0       	ldi	r17, 0x0A	; 10
    1998:	24 e6       	ldi	r18, 0x64	; 100
    199a:	3a e0       	ldi	r19, 0x0A	; 10
    199c:	48 e2       	ldi	r20, 0x28	; 40
    199e:	5a e0       	ldi	r21, 0x0A	; 10
    19a0:	67 e5       	ldi	r22, 0x57	; 87
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	c3 01       	movw	r24, r6
    19a6:	b8 dc       	rcall	.-1680   	; 0x1318 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2800, 2820, 2820, 2840);
    19a8:	5e 01       	movw	r10, r28
    19aa:	e9 e7       	ldi	r30, 0x79	; 121
    19ac:	ae 0e       	add	r10, r30
    19ae:	b1 1c       	adc	r11, r1
    19b0:	0f 2e       	mov	r0, r31
    19b2:	f8 e1       	ldi	r31, 0x18	; 24
    19b4:	ef 2e       	mov	r14, r31
    19b6:	fb e0       	ldi	r31, 0x0B	; 11
    19b8:	ff 2e       	mov	r15, r31
    19ba:	f0 2d       	mov	r31, r0
    19bc:	04 e0       	ldi	r16, 0x04	; 4
    19be:	1b e0       	ldi	r17, 0x0B	; 11
    19c0:	24 e0       	ldi	r18, 0x04	; 4
    19c2:	3b e0       	ldi	r19, 0x0B	; 11
    19c4:	40 ef       	ldi	r20, 0xF0	; 240
    19c6:	5a e0       	ldi	r21, 0x0A	; 10
    19c8:	6e ed       	ldi	r22, 0xDE	; 222
    19ca:	71 e0       	ldi	r23, 0x01	; 1
    19cc:	c5 01       	movw	r24, r10
    19ce:	a4 dc       	rcall	.-1720   	; 0x1318 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2480, 2500, 2500, 2520);
    19d0:	4e 01       	movw	r8, r28
    19d2:	ff e8       	ldi	r31, 0x8F	; 143
    19d4:	8f 0e       	add	r8, r31
    19d6:	91 1c       	adc	r9, r1
    19d8:	0f 2e       	mov	r0, r31
    19da:	f8 ed       	ldi	r31, 0xD8	; 216
    19dc:	ef 2e       	mov	r14, r31
    19de:	f9 e0       	ldi	r31, 0x09	; 9
    19e0:	ff 2e       	mov	r15, r31
    19e2:	f0 2d       	mov	r31, r0
    19e4:	04 ec       	ldi	r16, 0xC4	; 196
    19e6:	19 e0       	ldi	r17, 0x09	; 9
    19e8:	24 ec       	ldi	r18, 0xC4	; 196
    19ea:	39 e0       	ldi	r19, 0x09	; 9
    19ec:	40 eb       	ldi	r20, 0xB0	; 176
    19ee:	59 e0       	ldi	r21, 0x09	; 9
    19f0:	6f ee       	ldi	r22, 0xEF	; 239
    19f2:	71 e0       	ldi	r23, 0x01	; 1
    19f4:	c4 01       	movw	r24, r8
    19f6:	90 dc       	rcall	.-1760   	; 0x1318 <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    19f8:	f6 01       	movw	r30, r12
    19fa:	75 86       	std	Z+13, r7	; 0x0d
    19fc:	64 86       	std	Z+12, r6	; 0x0c
	straight.next = &left;
    19fe:	f3 01       	movw	r30, r6
    1a00:	95 8a       	std	Z+21, r9	; 0x15
    1a02:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &right;
    1a04:	f4 01       	movw	r30, r8
    1a06:	b5 8a       	std	Z+21, r11	; 0x15
    1a08:	a4 8a       	std	Z+20, r10	; 0x14
	right.next = NULL;
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	15 8a       	std	Z+21, r1	; 0x15
    1a0e:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &orientation;
    1a10:	ce 01       	movw	r24, r28
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	90 93 1b 03 	sts	0x031B, r25
    1a18:	80 93 1a 03 	sts	0x031A, r24
	orientation.next = NULL;
    1a1c:	18 8a       	std	Y+16, r1	; 0x10
    1a1e:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    1a20:	d0 92 19 03 	sts	0x0319, r13
    1a24:	c0 92 18 03 	sts	0x0318, r12
	servo.next = NULL;
    1a28:	f6 01       	movw	r30, r12
    1a2a:	17 86       	std	Z+15, r1	; 0x0f
    1a2c:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    1a2e:	8c 55       	subi	r24, 0x5C	; 92
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	90 93 1d 03 	sts	0x031D, r25
    1a36:	80 93 1c 03 	sts	0x031C, r24
	struct rule_type rule2; rule1.next = &rule2;
    1a3a:	de 01       	movw	r26, r28
    1a3c:	a5 55       	subi	r26, 0x55	; 85
    1a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a40:	fc 01       	movw	r30, r24
    1a42:	b5 83       	std	Z+5, r27	; 0x05
    1a44:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1a46:	be 01       	movw	r22, r28
    1a48:	6f 54       	subi	r22, 0x4F	; 79
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	15 96       	adiw	r26, 0x05	; 5
    1a4e:	7c 93       	st	X, r23
    1a50:	6e 93       	st	-X, r22
    1a52:	14 97       	sbiw	r26, 0x04	; 4
    1a54:	fb 01       	movw	r30, r22
    1a56:	15 82       	std	Z+5, r1	; 0x05
    1a58:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	49 54       	subi	r20, 0x49	; 73
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	fc 01       	movw	r30, r24
    1a62:	51 83       	std	Z+1, r21	; 0x01
    1a64:	40 83       	st	Z, r20
    1a66:	fa 01       	movw	r30, r20
    1a68:	13 82       	std	Z+3, r1	; 0x03
    1a6a:	12 82       	std	Z+2, r1	; 0x02
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	25 54       	subi	r18, 0x45	; 69
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	fc 01       	movw	r30, r24
    1a74:	33 83       	std	Z+3, r19	; 0x03
    1a76:	22 83       	std	Z+2, r18	; 0x02
    1a78:	f9 01       	movw	r30, r18
    1a7a:	13 82       	std	Z+3, r1	; 0x03
    1a7c:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &middle.value; then1.value = &straight.value;
    1a7e:	84 57       	subi	r24, 0x74	; 116
    1a80:	91 09       	sbc	r25, r1
    1a82:	fa 01       	movw	r30, r20
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	fa e0       	ldi	r31, 0x0A	; 10
    1a8a:	6f 0e       	add	r6, r31
    1a8c:	71 1c       	adc	r7, r1
    1a8e:	f9 01       	movw	r30, r18
    1a90:	71 82       	std	Z+1, r7	; 0x01
    1a92:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1a94:	2c 5f       	subi	r18, 0xFC	; 252
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	3c 93       	st	X, r19
    1a9c:	2e 93       	st	-X, r18
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	13 82       	std	Z+3, r1	; 0x03
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    1aa4:	8e 56       	subi	r24, 0x6E	; 110
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	13 96       	adiw	r26, 0x03	; 3
    1aaa:	9c 93       	st	X, r25
    1aac:	8e 93       	st	-X, r24
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	13 82       	std	Z+3, r1	; 0x03
    1ab4:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &off_right.value; then2.value = &left.value;
    1ab6:	4c 59       	subi	r20, 0x9C	; 156
    1ab8:	51 09       	sbc	r21, r1
    1aba:	f9 01       	movw	r30, r18
    1abc:	51 83       	std	Z+1, r21	; 0x01
    1abe:	40 83       	st	Z, r20
    1ac0:	fa e0       	ldi	r31, 0x0A	; 10
    1ac2:	8f 0e       	add	r8, r31
    1ac4:	91 1c       	adc	r9, r1
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	91 82       	std	Z+1, r9	; 0x01
    1aca:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1acc:	04 96       	adiw	r24, 0x04	; 4
    1ace:	fb 01       	movw	r30, r22
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	13 82       	std	Z+3, r1	; 0x03
    1ad8:	12 82       	std	Z+2, r1	; 0x02
    1ada:	90 96       	adiw	r26, 0x20	; 32
    1adc:	fb 01       	movw	r30, r22
    1ade:	b3 83       	std	Z+3, r27	; 0x03
    1ae0:	a2 83       	std	Z+2, r26	; 0x02
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	1c 92       	st	X, r1
    1ae6:	1e 92       	st	-X, r1
    1ae8:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &off_left.value; then3.value = &right.value;
    1aea:	fa e0       	ldi	r31, 0x0A	; 10
    1aec:	4f 0e       	add	r4, r31
    1aee:	51 1c       	adc	r5, r1
    1af0:	fc 01       	movw	r30, r24
    1af2:	51 82       	std	Z+1, r5	; 0x01
    1af4:	40 82       	st	Z, r4
    1af6:	fa e0       	ldi	r31, 0x0A	; 10
    1af8:	af 0e       	add	r10, r31
    1afa:	b1 1c       	adc	r11, r1
    1afc:	ad 92       	st	X+, r10
    1afe:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    1b00:	e1 da       	rcall	.-2622   	; 0x10c4 <fuzzification>
	rule_evaluation();
    1b02:	07 db       	rcall	.-2546   	; 0x1112 <rule_evaluation>
	defuzzification();
    1b04:	4c db       	rcall	.-2408   	; 0x119e <defuzzification>
	if (servo.value > MAXLEFT)
    1b06:	f6 01       	movw	r30, r12
    1b08:	82 85       	ldd	r24, Z+10	; 0x0a
    1b0a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b0c:	87 3e       	cpi	r24, 0xE7	; 231
    1b0e:	f7 e0       	ldi	r31, 0x07	; 7
    1b10:	9f 07       	cpc	r25, r31
    1b12:	24 f0       	brlt	.+8      	; 0x1b1c <stop+0x2a6>
	{
		setServo(MAXLEFT);
    1b14:	86 ee       	ldi	r24, 0xE6	; 230
    1b16:	97 e0       	ldi	r25, 0x07	; 7
    1b18:	35 dd       	rcall	.-1430   	; 0x1584 <setServo>
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <stop+0x2b8>
	}
	else if (servo.value < MAXRIGHT)
    1b1c:	84 3e       	cpi	r24, 0xE4	; 228
    1b1e:	2c e0       	ldi	r18, 0x0C	; 12
    1b20:	92 07       	cpc	r25, r18
    1b22:	24 f4       	brge	.+8      	; 0x1b2c <stop+0x2b6>
	{
		setServo(MAXRIGHT);
    1b24:	84 ee       	ldi	r24, 0xE4	; 228
    1b26:	9c e0       	ldi	r25, 0x0C	; 12
    1b28:	2d dd       	rcall	.-1446   	; 0x1584 <setServo>
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <stop+0x2b8>
	}
	else
	{
		setServo(servo.value);
    1b2c:	2b dd       	rcall	.-1450   	; 0x1584 <setServo>
	}
	
    1b2e:	c2 53       	subi	r28, 0x32	; 50
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	8f 90       	pop	r8
    1b54:	7f 90       	pop	r7
    1b56:	6f 90       	pop	r6
    1b58:	5f 90       	pop	r5
    1b5a:	4f 90       	pop	r4
    1b5c:	08 95       	ret

00001b5e <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	0b b6       	in	r0, 0x3b	; 59
    1b6a:	0f 92       	push	r0
    1b6c:	2f 93       	push	r18
    1b6e:	3f 93       	push	r19
    1b70:	4f 93       	push	r20
    1b72:	8f 93       	push	r24
    1b74:	9f 93       	push	r25
    1b76:	af 93       	push	r26
    1b78:	bf 93       	push	r27
    1b7a:	ef 93       	push	r30
    1b7c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1b7e:	80 91 16 03 	lds	r24, 0x0316
    1b82:	90 91 17 03 	lds	r25, 0x0317
    1b86:	80 34       	cpi	r24, 0x40	; 64
    1b88:	91 05       	cpc	r25, r1
    1b8a:	31 f4       	brne	.+12     	; 0x1b98 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 93 42 03 	sts	0x0342, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1b92:	80 91 c6 00 	lds	r24, 0x00C6
    1b96:	16 c0       	rjmp	.+44     	; 0x1bc4 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1b98:	80 34       	cpi	r24, 0x40	; 64
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	e8 f4       	brcc	.+58     	; 0x1bd8 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1b9e:	e4 e1       	ldi	r30, 0x14	; 20
    1ba0:	f3 e0       	ldi	r31, 0x03	; 3
    1ba2:	20 81       	ld	r18, Z
    1ba4:	31 81       	ldd	r19, Z+1	; 0x01
    1ba6:	40 91 c6 00 	lds	r20, 0x00C6
    1baa:	d9 01       	movw	r26, r18
    1bac:	ae 52       	subi	r26, 0x2E	; 46
    1bae:	bd 4f       	sbci	r27, 0xFD	; 253
    1bb0:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	31 83       	std	Z+1, r19	; 0x01
    1bb8:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	90 93 17 03 	sts	0x0317, r25
    1bc0:	80 93 16 03 	sts	0x0316, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1bc4:	80 91 16 03 	lds	r24, 0x0316
    1bc8:	90 91 17 03 	lds	r25, 0x0317
    1bcc:	80 34       	cpi	r24, 0x40	; 64
    1bce:	91 05       	cpc	r25, r1
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 40 03 	sts	0x0340, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1bd8:	80 91 14 03 	lds	r24, 0x0314
    1bdc:	90 91 15 03 	lds	r25, 0x0315
    1be0:	80 34       	cpi	r24, 0x40	; 64
    1be2:	91 05       	cpc	r25, r1
    1be4:	21 f4       	brne	.+8      	; 0x1bee <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1be6:	10 92 15 03 	sts	0x0315, r1
    1bea:	10 92 14 03 	sts	0x0314, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	80 93 3f 03 	sts	0x033F, r24
}
    1bf4:	ff 91       	pop	r31
    1bf6:	ef 91       	pop	r30
    1bf8:	bf 91       	pop	r27
    1bfa:	af 91       	pop	r26
    1bfc:	9f 91       	pop	r25
    1bfe:	8f 91       	pop	r24
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	0b be       	out	0x3b, r0	; 59
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_22>:




ISR(USART0_TX_vect)
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	ef 93       	push	r30
    1c28:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1c2a:	80 91 d0 02 	lds	r24, 0x02D0
    1c2e:	90 91 d1 02 	lds	r25, 0x02D1
    1c32:	80 34       	cpi	r24, 0x40	; 64
    1c34:	91 05       	cpc	r25, r1
    1c36:	19 f4       	brne	.+6      	; 0x1c3e <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1c38:	10 92 3e 03 	sts	0x033E, r1
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1c3e:	89 2b       	or	r24, r25
    1c40:	b9 f0       	breq	.+46     	; 0x1c70 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1c42:	e0 91 cc 02 	lds	r30, 0x02CC
    1c46:	f0 91 cd 02 	lds	r31, 0x02CD
    1c4a:	e4 57       	subi	r30, 0x74	; 116
    1c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1c54:	ec ec       	ldi	r30, 0xCC	; 204
    1c56:	f2 e0       	ldi	r31, 0x02	; 2
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1c62:	e0 ed       	ldi	r30, 0xD0	; 208
    1c64:	f2 e0       	ldi	r31, 0x02	; 2
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1c70:	80 91 cc 02 	lds	r24, 0x02CC
    1c74:	90 91 cd 02 	lds	r25, 0x02CD
    1c78:	80 34       	cpi	r24, 0x40	; 64
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1c7e:	10 92 cd 02 	sts	0x02CD, r1
    1c82:	10 92 cc 02 	sts	0x02CC, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1c86:	80 91 d0 02 	lds	r24, 0x02D0
    1c8a:	90 91 d1 02 	lds	r25, 0x02D1
    1c8e:	89 2b       	or	r24, r25
    1c90:	39 f4       	brne	.+14     	; 0x1ca0 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1c92:	10 92 41 03 	sts	0x0341, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1c96:	e1 ec       	ldi	r30, 0xC1	; 193
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	0f 90       	pop	r0
    1caa:	0b be       	out	0x3b, r0	; 59
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__subsf3>:
    1cb6:	50 58       	subi	r21, 0x80	; 128

00001cb8 <__addsf3>:
    1cb8:	bb 27       	eor	r27, r27
    1cba:	aa 27       	eor	r26, r26
    1cbc:	0e d0       	rcall	.+28     	; 0x1cda <__addsf3x>
    1cbe:	4d c1       	rjmp	.+666    	; 0x1f5a <__fp_round>
    1cc0:	3e d1       	rcall	.+636    	; 0x1f3e <__fp_pscA>
    1cc2:	30 f0       	brcs	.+12     	; 0x1cd0 <__addsf3+0x18>
    1cc4:	43 d1       	rcall	.+646    	; 0x1f4c <__fp_pscB>
    1cc6:	20 f0       	brcs	.+8      	; 0x1cd0 <__addsf3+0x18>
    1cc8:	31 f4       	brne	.+12     	; 0x1cd6 <__addsf3+0x1e>
    1cca:	9f 3f       	cpi	r25, 0xFF	; 255
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <__addsf3+0x1a>
    1cce:	1e f4       	brtc	.+6      	; 0x1cd6 <__addsf3+0x1e>
    1cd0:	33 c1       	rjmp	.+614    	; 0x1f38 <__fp_nan>
    1cd2:	0e f4       	brtc	.+2      	; 0x1cd6 <__addsf3+0x1e>
    1cd4:	e0 95       	com	r30
    1cd6:	e7 fb       	bst	r30, 7
    1cd8:	29 c1       	rjmp	.+594    	; 0x1f2c <__fp_inf>

00001cda <__addsf3x>:
    1cda:	e9 2f       	mov	r30, r25
    1cdc:	4f d1       	rcall	.+670    	; 0x1f7c <__fp_split3>
    1cde:	80 f3       	brcs	.-32     	; 0x1cc0 <__addsf3+0x8>
    1ce0:	ba 17       	cp	r27, r26
    1ce2:	62 07       	cpc	r22, r18
    1ce4:	73 07       	cpc	r23, r19
    1ce6:	84 07       	cpc	r24, r20
    1ce8:	95 07       	cpc	r25, r21
    1cea:	18 f0       	brcs	.+6      	; 0x1cf2 <__addsf3x+0x18>
    1cec:	71 f4       	brne	.+28     	; 0x1d0a <__addsf3x+0x30>
    1cee:	9e f5       	brtc	.+102    	; 0x1d56 <__addsf3x+0x7c>
    1cf0:	67 c1       	rjmp	.+718    	; 0x1fc0 <__fp_zero>
    1cf2:	0e f4       	brtc	.+2      	; 0x1cf6 <__addsf3x+0x1c>
    1cf4:	e0 95       	com	r30
    1cf6:	0b 2e       	mov	r0, r27
    1cf8:	ba 2f       	mov	r27, r26
    1cfa:	a0 2d       	mov	r26, r0
    1cfc:	0b 01       	movw	r0, r22
    1cfe:	b9 01       	movw	r22, r18
    1d00:	90 01       	movw	r18, r0
    1d02:	0c 01       	movw	r0, r24
    1d04:	ca 01       	movw	r24, r20
    1d06:	a0 01       	movw	r20, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	ff 27       	eor	r31, r31
    1d0c:	59 1b       	sub	r21, r25
    1d0e:	99 f0       	breq	.+38     	; 0x1d36 <__addsf3x+0x5c>
    1d10:	59 3f       	cpi	r21, 0xF9	; 249
    1d12:	50 f4       	brcc	.+20     	; 0x1d28 <__addsf3x+0x4e>
    1d14:	50 3e       	cpi	r21, 0xE0	; 224
    1d16:	68 f1       	brcs	.+90     	; 0x1d72 <__addsf3x+0x98>
    1d18:	1a 16       	cp	r1, r26
    1d1a:	f0 40       	sbci	r31, 0x00	; 0
    1d1c:	a2 2f       	mov	r26, r18
    1d1e:	23 2f       	mov	r18, r19
    1d20:	34 2f       	mov	r19, r20
    1d22:	44 27       	eor	r20, r20
    1d24:	58 5f       	subi	r21, 0xF8	; 248
    1d26:	f3 cf       	rjmp	.-26     	; 0x1d0e <__addsf3x+0x34>
    1d28:	46 95       	lsr	r20
    1d2a:	37 95       	ror	r19
    1d2c:	27 95       	ror	r18
    1d2e:	a7 95       	ror	r26
    1d30:	f0 40       	sbci	r31, 0x00	; 0
    1d32:	53 95       	inc	r21
    1d34:	c9 f7       	brne	.-14     	; 0x1d28 <__addsf3x+0x4e>
    1d36:	7e f4       	brtc	.+30     	; 0x1d56 <__addsf3x+0x7c>
    1d38:	1f 16       	cp	r1, r31
    1d3a:	ba 0b       	sbc	r27, r26
    1d3c:	62 0b       	sbc	r22, r18
    1d3e:	73 0b       	sbc	r23, r19
    1d40:	84 0b       	sbc	r24, r20
    1d42:	ba f0       	brmi	.+46     	; 0x1d72 <__addsf3x+0x98>
    1d44:	91 50       	subi	r25, 0x01	; 1
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <__addsf3x+0x96>
    1d48:	ff 0f       	add	r31, r31
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	66 1f       	adc	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	c2 f7       	brpl	.-16     	; 0x1d44 <__addsf3x+0x6a>
    1d54:	0e c0       	rjmp	.+28     	; 0x1d72 <__addsf3x+0x98>
    1d56:	ba 0f       	add	r27, r26
    1d58:	62 1f       	adc	r22, r18
    1d5a:	73 1f       	adc	r23, r19
    1d5c:	84 1f       	adc	r24, r20
    1d5e:	48 f4       	brcc	.+18     	; 0x1d72 <__addsf3x+0x98>
    1d60:	87 95       	ror	r24
    1d62:	77 95       	ror	r23
    1d64:	67 95       	ror	r22
    1d66:	b7 95       	ror	r27
    1d68:	f7 95       	ror	r31
    1d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6c:	08 f0       	brcs	.+2      	; 0x1d70 <__addsf3x+0x96>
    1d6e:	b3 cf       	rjmp	.-154    	; 0x1cd6 <__addsf3+0x1e>
    1d70:	93 95       	inc	r25
    1d72:	88 0f       	add	r24, r24
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <__addsf3x+0x9e>
    1d76:	99 27       	eor	r25, r25
    1d78:	ee 0f       	add	r30, r30
    1d7a:	97 95       	ror	r25
    1d7c:	87 95       	ror	r24
    1d7e:	08 95       	ret

00001d80 <__divsf3>:
    1d80:	0c d0       	rcall	.+24     	; 0x1d9a <__divsf3x>
    1d82:	eb c0       	rjmp	.+470    	; 0x1f5a <__fp_round>
    1d84:	e3 d0       	rcall	.+454    	; 0x1f4c <__fp_pscB>
    1d86:	40 f0       	brcs	.+16     	; 0x1d98 <__divsf3+0x18>
    1d88:	da d0       	rcall	.+436    	; 0x1f3e <__fp_pscA>
    1d8a:	30 f0       	brcs	.+12     	; 0x1d98 <__divsf3+0x18>
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <__divsf3+0x16>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <__divsf3+0x18>
    1d92:	cc c0       	rjmp	.+408    	; 0x1f2c <__fp_inf>
    1d94:	51 11       	cpse	r21, r1
    1d96:	15 c1       	rjmp	.+554    	; 0x1fc2 <__fp_szero>
    1d98:	cf c0       	rjmp	.+414    	; 0x1f38 <__fp_nan>

00001d9a <__divsf3x>:
    1d9a:	f0 d0       	rcall	.+480    	; 0x1f7c <__fp_split3>
    1d9c:	98 f3       	brcs	.-26     	; 0x1d84 <__divsf3+0x4>

00001d9e <__divsf3_pse>:
    1d9e:	99 23       	and	r25, r25
    1da0:	c9 f3       	breq	.-14     	; 0x1d94 <__divsf3+0x14>
    1da2:	55 23       	and	r21, r21
    1da4:	b1 f3       	breq	.-20     	; 0x1d92 <__divsf3+0x12>
    1da6:	95 1b       	sub	r25, r21
    1da8:	55 0b       	sbc	r21, r21
    1daa:	bb 27       	eor	r27, r27
    1dac:	aa 27       	eor	r26, r26
    1dae:	62 17       	cp	r22, r18
    1db0:	73 07       	cpc	r23, r19
    1db2:	84 07       	cpc	r24, r20
    1db4:	38 f0       	brcs	.+14     	; 0x1dc4 <__divsf3_pse+0x26>
    1db6:	9f 5f       	subi	r25, 0xFF	; 255
    1db8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	44 1f       	adc	r20, r20
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	a9 f3       	breq	.-22     	; 0x1dae <__divsf3_pse+0x10>
    1dc4:	33 d0       	rcall	.+102    	; 0x1e2c <__divsf3_pse+0x8e>
    1dc6:	0e 2e       	mov	r0, r30
    1dc8:	3a f0       	brmi	.+14     	; 0x1dd8 <__divsf3_pse+0x3a>
    1dca:	e0 e8       	ldi	r30, 0x80	; 128
    1dcc:	30 d0       	rcall	.+96     	; 0x1e2e <__divsf3_pse+0x90>
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	50 40       	sbci	r21, 0x00	; 0
    1dd2:	e6 95       	lsr	r30
    1dd4:	00 1c       	adc	r0, r0
    1dd6:	ca f7       	brpl	.-14     	; 0x1dca <__divsf3_pse+0x2c>
    1dd8:	29 d0       	rcall	.+82     	; 0x1e2c <__divsf3_pse+0x8e>
    1dda:	fe 2f       	mov	r31, r30
    1ddc:	27 d0       	rcall	.+78     	; 0x1e2c <__divsf3_pse+0x8e>
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	bb 1f       	adc	r27, r27
    1de6:	26 17       	cp	r18, r22
    1de8:	37 07       	cpc	r19, r23
    1dea:	48 07       	cpc	r20, r24
    1dec:	ab 07       	cpc	r26, r27
    1dee:	b0 e8       	ldi	r27, 0x80	; 128
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <__divsf3_pse+0x56>
    1df2:	bb 0b       	sbc	r27, r27
    1df4:	80 2d       	mov	r24, r0
    1df6:	bf 01       	movw	r22, r30
    1df8:	ff 27       	eor	r31, r31
    1dfa:	93 58       	subi	r25, 0x83	; 131
    1dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfe:	2a f0       	brmi	.+10     	; 0x1e0a <__divsf3_pse+0x6c>
    1e00:	9e 3f       	cpi	r25, 0xFE	; 254
    1e02:	51 05       	cpc	r21, r1
    1e04:	68 f0       	brcs	.+26     	; 0x1e20 <__divsf3_pse+0x82>
    1e06:	92 c0       	rjmp	.+292    	; 0x1f2c <__fp_inf>
    1e08:	dc c0       	rjmp	.+440    	; 0x1fc2 <__fp_szero>
    1e0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0c:	ec f3       	brlt	.-6      	; 0x1e08 <__divsf3_pse+0x6a>
    1e0e:	98 3e       	cpi	r25, 0xE8	; 232
    1e10:	dc f3       	brlt	.-10     	; 0x1e08 <__divsf3_pse+0x6a>
    1e12:	86 95       	lsr	r24
    1e14:	77 95       	ror	r23
    1e16:	67 95       	ror	r22
    1e18:	b7 95       	ror	r27
    1e1a:	f7 95       	ror	r31
    1e1c:	9f 5f       	subi	r25, 0xFF	; 255
    1e1e:	c9 f7       	brne	.-14     	; 0x1e12 <__divsf3_pse+0x74>
    1e20:	88 0f       	add	r24, r24
    1e22:	91 1d       	adc	r25, r1
    1e24:	96 95       	lsr	r25
    1e26:	87 95       	ror	r24
    1e28:	97 f9       	bld	r25, 7
    1e2a:	08 95       	ret
    1e2c:	e1 e0       	ldi	r30, 0x01	; 1
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	bb 1f       	adc	r27, r27
    1e36:	62 17       	cp	r22, r18
    1e38:	73 07       	cpc	r23, r19
    1e3a:	84 07       	cpc	r24, r20
    1e3c:	ba 07       	cpc	r27, r26
    1e3e:	20 f0       	brcs	.+8      	; 0x1e48 <__divsf3_pse+0xaa>
    1e40:	62 1b       	sub	r22, r18
    1e42:	73 0b       	sbc	r23, r19
    1e44:	84 0b       	sbc	r24, r20
    1e46:	ba 0b       	sbc	r27, r26
    1e48:	ee 1f       	adc	r30, r30
    1e4a:	88 f7       	brcc	.-30     	; 0x1e2e <__divsf3_pse+0x90>
    1e4c:	e0 95       	com	r30
    1e4e:	08 95       	ret

00001e50 <__fixsfsi>:
    1e50:	04 d0       	rcall	.+8      	; 0x1e5a <__fixunssfsi>
    1e52:	68 94       	set
    1e54:	b1 11       	cpse	r27, r1
    1e56:	b5 c0       	rjmp	.+362    	; 0x1fc2 <__fp_szero>
    1e58:	08 95       	ret

00001e5a <__fixunssfsi>:
    1e5a:	98 d0       	rcall	.+304    	; 0x1f8c <__fp_splitA>
    1e5c:	88 f0       	brcs	.+34     	; 0x1e80 <__fixunssfsi+0x26>
    1e5e:	9f 57       	subi	r25, 0x7F	; 127
    1e60:	90 f0       	brcs	.+36     	; 0x1e86 <__fixunssfsi+0x2c>
    1e62:	b9 2f       	mov	r27, r25
    1e64:	99 27       	eor	r25, r25
    1e66:	b7 51       	subi	r27, 0x17	; 23
    1e68:	a0 f0       	brcs	.+40     	; 0x1e92 <__fixunssfsi+0x38>
    1e6a:	d1 f0       	breq	.+52     	; 0x1ea0 <__fixunssfsi+0x46>
    1e6c:	66 0f       	add	r22, r22
    1e6e:	77 1f       	adc	r23, r23
    1e70:	88 1f       	adc	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	1a f0       	brmi	.+6      	; 0x1e7c <__fixunssfsi+0x22>
    1e76:	ba 95       	dec	r27
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <__fixunssfsi+0x12>
    1e7a:	12 c0       	rjmp	.+36     	; 0x1ea0 <__fixunssfsi+0x46>
    1e7c:	b1 30       	cpi	r27, 0x01	; 1
    1e7e:	81 f0       	breq	.+32     	; 0x1ea0 <__fixunssfsi+0x46>
    1e80:	9f d0       	rcall	.+318    	; 0x1fc0 <__fp_zero>
    1e82:	b1 e0       	ldi	r27, 0x01	; 1
    1e84:	08 95       	ret
    1e86:	9c c0       	rjmp	.+312    	; 0x1fc0 <__fp_zero>
    1e88:	67 2f       	mov	r22, r23
    1e8a:	78 2f       	mov	r23, r24
    1e8c:	88 27       	eor	r24, r24
    1e8e:	b8 5f       	subi	r27, 0xF8	; 248
    1e90:	39 f0       	breq	.+14     	; 0x1ea0 <__fixunssfsi+0x46>
    1e92:	b9 3f       	cpi	r27, 0xF9	; 249
    1e94:	cc f3       	brlt	.-14     	; 0x1e88 <__fixunssfsi+0x2e>
    1e96:	86 95       	lsr	r24
    1e98:	77 95       	ror	r23
    1e9a:	67 95       	ror	r22
    1e9c:	b3 95       	inc	r27
    1e9e:	d9 f7       	brne	.-10     	; 0x1e96 <__fixunssfsi+0x3c>
    1ea0:	3e f4       	brtc	.+14     	; 0x1eb0 <__fixunssfsi+0x56>
    1ea2:	90 95       	com	r25
    1ea4:	80 95       	com	r24
    1ea6:	70 95       	com	r23
    1ea8:	61 95       	neg	r22
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	8f 4f       	sbci	r24, 0xFF	; 255
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	08 95       	ret

00001eb2 <__floatunsisf>:
    1eb2:	e8 94       	clt
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <__floatsisf+0x12>

00001eb6 <__floatsisf>:
    1eb6:	97 fb       	bst	r25, 7
    1eb8:	3e f4       	brtc	.+14     	; 0x1ec8 <__floatsisf+0x12>
    1eba:	90 95       	com	r25
    1ebc:	80 95       	com	r24
    1ebe:	70 95       	com	r23
    1ec0:	61 95       	neg	r22
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	99 23       	and	r25, r25
    1eca:	a9 f0       	breq	.+42     	; 0x1ef6 <__floatsisf+0x40>
    1ecc:	f9 2f       	mov	r31, r25
    1ece:	96 e9       	ldi	r25, 0x96	; 150
    1ed0:	bb 27       	eor	r27, r27
    1ed2:	93 95       	inc	r25
    1ed4:	f6 95       	lsr	r31
    1ed6:	87 95       	ror	r24
    1ed8:	77 95       	ror	r23
    1eda:	67 95       	ror	r22
    1edc:	b7 95       	ror	r27
    1ede:	f1 11       	cpse	r31, r1
    1ee0:	f8 cf       	rjmp	.-16     	; 0x1ed2 <__floatsisf+0x1c>
    1ee2:	fa f4       	brpl	.+62     	; 0x1f22 <__floatsisf+0x6c>
    1ee4:	bb 0f       	add	r27, r27
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__floatsisf+0x36>
    1ee8:	60 ff       	sbrs	r22, 0
    1eea:	1b c0       	rjmp	.+54     	; 0x1f22 <__floatsisf+0x6c>
    1eec:	6f 5f       	subi	r22, 0xFF	; 255
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	16 c0       	rjmp	.+44     	; 0x1f22 <__floatsisf+0x6c>
    1ef6:	88 23       	and	r24, r24
    1ef8:	11 f0       	breq	.+4      	; 0x1efe <__floatsisf+0x48>
    1efa:	96 e9       	ldi	r25, 0x96	; 150
    1efc:	11 c0       	rjmp	.+34     	; 0x1f20 <__floatsisf+0x6a>
    1efe:	77 23       	and	r23, r23
    1f00:	21 f0       	breq	.+8      	; 0x1f0a <__floatsisf+0x54>
    1f02:	9e e8       	ldi	r25, 0x8E	; 142
    1f04:	87 2f       	mov	r24, r23
    1f06:	76 2f       	mov	r23, r22
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <__floatsisf+0x5e>
    1f0a:	66 23       	and	r22, r22
    1f0c:	71 f0       	breq	.+28     	; 0x1f2a <__floatsisf+0x74>
    1f0e:	96 e8       	ldi	r25, 0x86	; 134
    1f10:	86 2f       	mov	r24, r22
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	2a f0       	brmi	.+10     	; 0x1f22 <__floatsisf+0x6c>
    1f18:	9a 95       	dec	r25
    1f1a:	66 0f       	add	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	da f7       	brpl	.-10     	; 0x1f18 <__floatsisf+0x62>
    1f22:	88 0f       	add	r24, r24
    1f24:	96 95       	lsr	r25
    1f26:	87 95       	ror	r24
    1f28:	97 f9       	bld	r25, 7
    1f2a:	08 95       	ret

00001f2c <__fp_inf>:
    1f2c:	97 f9       	bld	r25, 7
    1f2e:	9f 67       	ori	r25, 0x7F	; 127
    1f30:	80 e8       	ldi	r24, 0x80	; 128
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	08 95       	ret

00001f38 <__fp_nan>:
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	80 ec       	ldi	r24, 0xC0	; 192
    1f3c:	08 95       	ret

00001f3e <__fp_pscA>:
    1f3e:	00 24       	eor	r0, r0
    1f40:	0a 94       	dec	r0
    1f42:	16 16       	cp	r1, r22
    1f44:	17 06       	cpc	r1, r23
    1f46:	18 06       	cpc	r1, r24
    1f48:	09 06       	cpc	r0, r25
    1f4a:	08 95       	ret

00001f4c <__fp_pscB>:
    1f4c:	00 24       	eor	r0, r0
    1f4e:	0a 94       	dec	r0
    1f50:	12 16       	cp	r1, r18
    1f52:	13 06       	cpc	r1, r19
    1f54:	14 06       	cpc	r1, r20
    1f56:	05 06       	cpc	r0, r21
    1f58:	08 95       	ret

00001f5a <__fp_round>:
    1f5a:	09 2e       	mov	r0, r25
    1f5c:	03 94       	inc	r0
    1f5e:	00 0c       	add	r0, r0
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <__fp_round+0xc>
    1f62:	88 23       	and	r24, r24
    1f64:	52 f0       	brmi	.+20     	; 0x1f7a <__fp_round+0x20>
    1f66:	bb 0f       	add	r27, r27
    1f68:	40 f4       	brcc	.+16     	; 0x1f7a <__fp_round+0x20>
    1f6a:	bf 2b       	or	r27, r31
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <__fp_round+0x18>
    1f6e:	60 ff       	sbrs	r22, 0
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <__fp_round+0x20>
    1f72:	6f 5f       	subi	r22, 0xFF	; 255
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	8f 4f       	sbci	r24, 0xFF	; 255
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	08 95       	ret

00001f7c <__fp_split3>:
    1f7c:	57 fd       	sbrc	r21, 7
    1f7e:	90 58       	subi	r25, 0x80	; 128
    1f80:	44 0f       	add	r20, r20
    1f82:	55 1f       	adc	r21, r21
    1f84:	59 f0       	breq	.+22     	; 0x1f9c <__fp_splitA+0x10>
    1f86:	5f 3f       	cpi	r21, 0xFF	; 255
    1f88:	71 f0       	breq	.+28     	; 0x1fa6 <__fp_splitA+0x1a>
    1f8a:	47 95       	ror	r20

00001f8c <__fp_splitA>:
    1f8c:	88 0f       	add	r24, r24
    1f8e:	97 fb       	bst	r25, 7
    1f90:	99 1f       	adc	r25, r25
    1f92:	61 f0       	breq	.+24     	; 0x1fac <__fp_splitA+0x20>
    1f94:	9f 3f       	cpi	r25, 0xFF	; 255
    1f96:	79 f0       	breq	.+30     	; 0x1fb6 <__fp_splitA+0x2a>
    1f98:	87 95       	ror	r24
    1f9a:	08 95       	ret
    1f9c:	12 16       	cp	r1, r18
    1f9e:	13 06       	cpc	r1, r19
    1fa0:	14 06       	cpc	r1, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	f2 cf       	rjmp	.-28     	; 0x1f8a <__fp_split3+0xe>
    1fa6:	46 95       	lsr	r20
    1fa8:	f1 df       	rcall	.-30     	; 0x1f8c <__fp_splitA>
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <__fp_splitA+0x30>
    1fac:	16 16       	cp	r1, r22
    1fae:	17 06       	cpc	r1, r23
    1fb0:	18 06       	cpc	r1, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	f1 cf       	rjmp	.-30     	; 0x1f98 <__fp_splitA+0xc>
    1fb6:	86 95       	lsr	r24
    1fb8:	71 05       	cpc	r23, r1
    1fba:	61 05       	cpc	r22, r1
    1fbc:	08 94       	sec
    1fbe:	08 95       	ret

00001fc0 <__fp_zero>:
    1fc0:	e8 94       	clt

00001fc2 <__fp_szero>:
    1fc2:	bb 27       	eor	r27, r27
    1fc4:	66 27       	eor	r22, r22
    1fc6:	77 27       	eor	r23, r23
    1fc8:	cb 01       	movw	r24, r22
    1fca:	97 f9       	bld	r25, 7
    1fcc:	08 95       	ret

00001fce <__mulsf3>:
    1fce:	0b d0       	rcall	.+22     	; 0x1fe6 <__mulsf3x>
    1fd0:	c4 cf       	rjmp	.-120    	; 0x1f5a <__fp_round>
    1fd2:	b5 df       	rcall	.-150    	; 0x1f3e <__fp_pscA>
    1fd4:	28 f0       	brcs	.+10     	; 0x1fe0 <__mulsf3+0x12>
    1fd6:	ba df       	rcall	.-140    	; 0x1f4c <__fp_pscB>
    1fd8:	18 f0       	brcs	.+6      	; 0x1fe0 <__mulsf3+0x12>
    1fda:	95 23       	and	r25, r21
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <__mulsf3+0x12>
    1fde:	a6 cf       	rjmp	.-180    	; 0x1f2c <__fp_inf>
    1fe0:	ab cf       	rjmp	.-170    	; 0x1f38 <__fp_nan>
    1fe2:	11 24       	eor	r1, r1
    1fe4:	ee cf       	rjmp	.-36     	; 0x1fc2 <__fp_szero>

00001fe6 <__mulsf3x>:
    1fe6:	ca df       	rcall	.-108    	; 0x1f7c <__fp_split3>
    1fe8:	a0 f3       	brcs	.-24     	; 0x1fd2 <__mulsf3+0x4>

00001fea <__mulsf3_pse>:
    1fea:	95 9f       	mul	r25, r21
    1fec:	d1 f3       	breq	.-12     	; 0x1fe2 <__mulsf3+0x14>
    1fee:	95 0f       	add	r25, r21
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	62 9f       	mul	r22, r18
    1ff6:	f0 01       	movw	r30, r0
    1ff8:	72 9f       	mul	r23, r18
    1ffa:	bb 27       	eor	r27, r27
    1ffc:	f0 0d       	add	r31, r0
    1ffe:	b1 1d       	adc	r27, r1
    2000:	63 9f       	mul	r22, r19
    2002:	aa 27       	eor	r26, r26
    2004:	f0 0d       	add	r31, r0
    2006:	b1 1d       	adc	r27, r1
    2008:	aa 1f       	adc	r26, r26
    200a:	64 9f       	mul	r22, r20
    200c:	66 27       	eor	r22, r22
    200e:	b0 0d       	add	r27, r0
    2010:	a1 1d       	adc	r26, r1
    2012:	66 1f       	adc	r22, r22
    2014:	82 9f       	mul	r24, r18
    2016:	22 27       	eor	r18, r18
    2018:	b0 0d       	add	r27, r0
    201a:	a1 1d       	adc	r26, r1
    201c:	62 1f       	adc	r22, r18
    201e:	73 9f       	mul	r23, r19
    2020:	b0 0d       	add	r27, r0
    2022:	a1 1d       	adc	r26, r1
    2024:	62 1f       	adc	r22, r18
    2026:	83 9f       	mul	r24, r19
    2028:	a0 0d       	add	r26, r0
    202a:	61 1d       	adc	r22, r1
    202c:	22 1f       	adc	r18, r18
    202e:	74 9f       	mul	r23, r20
    2030:	33 27       	eor	r19, r19
    2032:	a0 0d       	add	r26, r0
    2034:	61 1d       	adc	r22, r1
    2036:	23 1f       	adc	r18, r19
    2038:	84 9f       	mul	r24, r20
    203a:	60 0d       	add	r22, r0
    203c:	21 1d       	adc	r18, r1
    203e:	82 2f       	mov	r24, r18
    2040:	76 2f       	mov	r23, r22
    2042:	6a 2f       	mov	r22, r26
    2044:	11 24       	eor	r1, r1
    2046:	9f 57       	subi	r25, 0x7F	; 127
    2048:	50 40       	sbci	r21, 0x00	; 0
    204a:	8a f0       	brmi	.+34     	; 0x206e <__mulsf3_pse+0x84>
    204c:	e1 f0       	breq	.+56     	; 0x2086 <__mulsf3_pse+0x9c>
    204e:	88 23       	and	r24, r24
    2050:	4a f0       	brmi	.+18     	; 0x2064 <__mulsf3_pse+0x7a>
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	bb 1f       	adc	r27, r27
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	91 50       	subi	r25, 0x01	; 1
    2060:	50 40       	sbci	r21, 0x00	; 0
    2062:	a9 f7       	brne	.-22     	; 0x204e <__mulsf3_pse+0x64>
    2064:	9e 3f       	cpi	r25, 0xFE	; 254
    2066:	51 05       	cpc	r21, r1
    2068:	70 f0       	brcs	.+28     	; 0x2086 <__mulsf3_pse+0x9c>
    206a:	60 cf       	rjmp	.-320    	; 0x1f2c <__fp_inf>
    206c:	aa cf       	rjmp	.-172    	; 0x1fc2 <__fp_szero>
    206e:	5f 3f       	cpi	r21, 0xFF	; 255
    2070:	ec f3       	brlt	.-6      	; 0x206c <__mulsf3_pse+0x82>
    2072:	98 3e       	cpi	r25, 0xE8	; 232
    2074:	dc f3       	brlt	.-10     	; 0x206c <__mulsf3_pse+0x82>
    2076:	86 95       	lsr	r24
    2078:	77 95       	ror	r23
    207a:	67 95       	ror	r22
    207c:	b7 95       	ror	r27
    207e:	f7 95       	ror	r31
    2080:	e7 95       	ror	r30
    2082:	9f 5f       	subi	r25, 0xFF	; 255
    2084:	c1 f7       	brne	.-16     	; 0x2076 <__mulsf3_pse+0x8c>
    2086:	fe 2b       	or	r31, r30
    2088:	88 0f       	add	r24, r24
    208a:	91 1d       	adc	r25, r1
    208c:	96 95       	lsr	r25
    208e:	87 95       	ror	r24
    2090:	97 f9       	bld	r25, 7
    2092:	08 95       	ret

00002094 <__divmodhi4>:
    2094:	97 fb       	bst	r25, 7
    2096:	07 2e       	mov	r0, r23
    2098:	16 f4       	brtc	.+4      	; 0x209e <__divmodhi4+0xa>
    209a:	00 94       	com	r0
    209c:	06 d0       	rcall	.+12     	; 0x20aa <__divmodhi4_neg1>
    209e:	77 fd       	sbrc	r23, 7
    20a0:	08 d0       	rcall	.+16     	; 0x20b2 <__divmodhi4_neg2>
    20a2:	0b d0       	rcall	.+22     	; 0x20ba <__udivmodhi4>
    20a4:	07 fc       	sbrc	r0, 7
    20a6:	05 d0       	rcall	.+10     	; 0x20b2 <__divmodhi4_neg2>
    20a8:	3e f4       	brtc	.+14     	; 0x20b8 <__divmodhi4_exit>

000020aa <__divmodhi4_neg1>:
    20aa:	90 95       	com	r25
    20ac:	81 95       	neg	r24
    20ae:	9f 4f       	sbci	r25, 0xFF	; 255
    20b0:	08 95       	ret

000020b2 <__divmodhi4_neg2>:
    20b2:	70 95       	com	r23
    20b4:	61 95       	neg	r22
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255

000020b8 <__divmodhi4_exit>:
    20b8:	08 95       	ret

000020ba <__udivmodhi4>:
    20ba:	aa 1b       	sub	r26, r26
    20bc:	bb 1b       	sub	r27, r27
    20be:	51 e1       	ldi	r21, 0x11	; 17
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <__udivmodhi4_ep>

000020c2 <__udivmodhi4_loop>:
    20c2:	aa 1f       	adc	r26, r26
    20c4:	bb 1f       	adc	r27, r27
    20c6:	a6 17       	cp	r26, r22
    20c8:	b7 07       	cpc	r27, r23
    20ca:	10 f0       	brcs	.+4      	; 0x20d0 <__udivmodhi4_ep>
    20cc:	a6 1b       	sub	r26, r22
    20ce:	b7 0b       	sbc	r27, r23

000020d0 <__udivmodhi4_ep>:
    20d0:	88 1f       	adc	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	5a 95       	dec	r21
    20d6:	a9 f7       	brne	.-22     	; 0x20c2 <__udivmodhi4_loop>
    20d8:	80 95       	com	r24
    20da:	90 95       	com	r25
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	08 95       	ret

000020e2 <strcpy>:
    20e2:	fb 01       	movw	r30, r22
    20e4:	dc 01       	movw	r26, r24
    20e6:	01 90       	ld	r0, Z+
    20e8:	0d 92       	st	X+, r0
    20ea:	00 20       	and	r0, r0
    20ec:	e1 f7       	brne	.-8      	; 0x20e6 <strcpy+0x4>
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
