
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00002144  000021d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014c  008001fa  008001fa  000022d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00002302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002eb5  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bc1  00000000  00000000  00005397  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002661  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  000085bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010cea  00000000  00000000  00008b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001683  00000000  00000000  00019836  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0001aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003910  00000000  00000000  0001b051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_19>
      50:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e4       	ldi	r30, 0x44	; 68
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3f       	cpi	r26, 0xFA	; 250
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ef       	ldi	r26, 0xFA	; 250
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 34       	cpi	r26, 0x46	; 70
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 35 0a 	call	0x146a	; 0x146a <main>
      c6:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <doFuzzy>:
      ec:	2f 92       	push	r2
      ee:	3f 92       	push	r3
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	c4 5c       	subi	r28, 0xC4	; 196
     116:	d1 40       	sbci	r29, 0x01	; 1
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	2c 01       	movw	r4, r24
     124:	6b 01       	movw	r12, r22
     126:	88 e0       	ldi	r24, 0x08	; 8
     128:	e4 e0       	ldi	r30, 0x04	; 4
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	de 01       	movw	r26, r28
     12e:	11 96       	adiw	r26, 0x01	; 1
     130:	01 90       	ld	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	8a 95       	dec	r24
     136:	e1 f7       	brne	.-8      	; 0x130 <doFuzzy+0x44>
     138:	3e 01       	movw	r6, r28
     13a:	21 e1       	ldi	r18, 0x11	; 17
     13c:	62 0e       	add	r6, r18
     13e:	71 1c       	adc	r7, r1
     140:	0f 2e       	mov	r0, r31
     142:	f7 e8       	ldi	r31, 0x87	; 135
     144:	ef 2e       	mov	r14, r31
     146:	f1 2c       	mov	r15, r1
     148:	f0 2d       	mov	r31, r0
     14a:	08 e7       	ldi	r16, 0x78	; 120
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	24 e6       	ldi	r18, 0x64	; 100
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	43 e6       	ldi	r20, 0x63	; 99
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	6c e0       	ldi	r22, 0x0C	; 12
     158:	71 e0       	ldi	r23, 0x01	; 1
     15a:	c3 01       	movw	r24, r6
     15c:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     160:	4e 01       	movw	r8, r28
     162:	47 e2       	ldi	r20, 0x27	; 39
     164:	84 0e       	add	r8, r20
     166:	91 1c       	adc	r9, r1
     168:	0f 2e       	mov	r0, r31
     16a:	ff ea       	ldi	r31, 0xAF	; 175
     16c:	ef 2e       	mov	r14, r31
     16e:	f1 2c       	mov	r15, r1
     170:	f0 2d       	mov	r31, r0
     172:	0b e9       	ldi	r16, 0x9B	; 155
     174:	10 e0       	ldi	r17, 0x00	; 0
     176:	21 e9       	ldi	r18, 0x91	; 145
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	4d e7       	ldi	r20, 0x7D	; 125
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	66 e1       	ldi	r22, 0x16	; 22
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	c4 01       	movw	r24, r8
     184:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     188:	5e 01       	movw	r10, r28
     18a:	5d e3       	ldi	r21, 0x3D	; 61
     18c:	a5 0e       	add	r10, r21
     18e:	b1 1c       	adc	r11, r1
     190:	0f 2e       	mov	r0, r31
     192:	f8 ec       	ldi	r31, 0xC8	; 200
     194:	ef 2e       	mov	r14, r31
     196:	f1 2c       	mov	r15, r1
     198:	f0 2d       	mov	r31, r0
     19a:	07 ec       	ldi	r16, 0xC7	; 199
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	24 eb       	ldi	r18, 0xB4	; 180
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	45 ea       	ldi	r20, 0xA5	; 165
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	6d e1       	ldi	r22, 0x1D	; 29
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	c5 01       	movw	r24, r10
     1ac:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     1b0:	7e 86       	std	Y+14, r7	; 0x0e
     1b2:	6d 86       	std	Y+13, r6	; 0x0d
     1b4:	9e a2       	std	Y+38, r9	; 0x26
     1b6:	8d a2       	std	Y+37, r8	; 0x25
     1b8:	bc ae       	std	Y+60, r11	; 0x3c
     1ba:	ab ae       	std	Y+59, r10	; 0x3b
     1bc:	63 96       	adiw	r28, 0x13	; 19
     1be:	1f ae       	std	Y+63, r1	; 0x3f
     1c0:	1e ae       	std	Y+62, r1	; 0x3e
     1c2:	63 97       	sbiw	r28, 0x13	; 19
     1c4:	84 e6       	ldi	r24, 0x64	; 100
     1c6:	48 16       	cp	r4, r24
     1c8:	51 04       	cpc	r5, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <doFuzzy+0xea>
     1cc:	84 e6       	ldi	r24, 0x64	; 100
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9c 87       	std	Y+12, r25	; 0x0c
     1d2:	8b 87       	std	Y+11, r24	; 0x0b
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <doFuzzy+0x100>
     1d6:	a8 ec       	ldi	r26, 0xC8	; 200
     1d8:	4a 16       	cp	r4, r26
     1da:	51 04       	cpc	r5, r1
     1dc:	2c f0       	brlt	.+10     	; 0x1e8 <doFuzzy+0xfc>
     1de:	87 ec       	ldi	r24, 0xC7	; 199
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	9c 87       	std	Y+12, r25	; 0x0c
     1e4:	8b 87       	std	Y+11, r24	; 0x0b
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <doFuzzy+0x100>
     1e8:	5c 86       	std	Y+12, r5	; 0x0c
     1ea:	4b 86       	std	Y+11, r4	; 0x0b
     1ec:	88 e0       	ldi	r24, 0x08	; 8
     1ee:	e6 e2       	ldi	r30, 0x26	; 38
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	de 01       	movw	r26, r28
     1f4:	ad 5a       	subi	r26, 0xAD	; 173
     1f6:	bf 4f       	sbci	r27, 0xFF	; 255
     1f8:	01 90       	ld	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	8a 95       	dec	r24
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <doFuzzy+0x10c>
     200:	3e 01       	movw	r6, r28
     202:	b3 e6       	ldi	r27, 0x63	; 99
     204:	6b 0e       	add	r6, r27
     206:	71 1c       	adc	r7, r1
     208:	0f 2e       	mov	r0, r31
     20a:	f3 e2       	ldi	r31, 0x23	; 35
     20c:	ef 2e       	mov	r14, r31
     20e:	f1 2c       	mov	r15, r1
     210:	f0 2d       	mov	r31, r0
     212:	04 e1       	ldi	r16, 0x14	; 20
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	6e e2       	ldi	r22, 0x2E	; 46
     220:	71 e0       	ldi	r23, 0x01	; 1
     222:	c3 01       	movw	r24, r6
     224:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     228:	4e 01       	movw	r8, r28
     22a:	e9 e7       	ldi	r30, 0x79	; 121
     22c:	8e 0e       	add	r8, r30
     22e:	91 1c       	adc	r9, r1
     230:	0f 2e       	mov	r0, r31
     232:	f7 e3       	ldi	r31, 0x37	; 55
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	08 e2       	ldi	r16, 0x28	; 40
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	23 e2       	ldi	r18, 0x23	; 35
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	4f e0       	ldi	r20, 0x0F	; 15
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	66 e3       	ldi	r22, 0x36	; 54
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	c4 01       	movw	r24, r8
     24c:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     250:	5e 01       	movw	r10, r28
     252:	ff e8       	ldi	r31, 0x8F	; 143
     254:	af 0e       	add	r10, r31
     256:	b1 1c       	adc	r11, r1
     258:	0f 2e       	mov	r0, r31
     25a:	fb e4       	ldi	r31, 0x4B	; 75
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 2c       	mov	r15, r1
     260:	f0 2d       	mov	r31, r0
     262:	0a e4       	ldi	r16, 0x4A	; 74
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	22 e3       	ldi	r18, 0x32	; 50
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	48 e2       	ldi	r20, 0x28	; 40
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	6d e3       	ldi	r22, 0x3D	; 61
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	c5 01       	movw	r24, r10
     274:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     278:	a1 96       	adiw	r28, 0x21	; 33
     27a:	7f ae       	std	Y+63, r7	; 0x3f
     27c:	6e ae       	std	Y+62, r6	; 0x3e
     27e:	a1 97       	sbiw	r28, 0x21	; 33
     280:	d3 01       	movw	r26, r6
     282:	55 96       	adiw	r26, 0x15	; 21
     284:	9c 92       	st	X, r9
     286:	8e 92       	st	-X, r8
     288:	54 97       	sbiw	r26, 0x14	; 20
     28a:	f4 01       	movw	r30, r8
     28c:	b5 8a       	std	Z+21, r11	; 0x15
     28e:	a4 8a       	std	Z+20, r10	; 0x14
     290:	d5 01       	movw	r26, r10
     292:	55 96       	adiw	r26, 0x15	; 21
     294:	1c 92       	st	X, r1
     296:	1e 92       	st	-X, r1
     298:	54 97       	sbiw	r26, 0x14	; 20
     29a:	1c 14       	cp	r1, r12
     29c:	1d 04       	cpc	r1, r13
     29e:	3c f0       	brlt	.+14     	; 0x2ae <doFuzzy+0x1c2>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	6f 96       	adiw	r28, 0x1f	; 31
     2a6:	9f af       	std	Y+63, r25	; 0x3f
     2a8:	8e af       	std	Y+62, r24	; 0x3e
     2aa:	6f 97       	sbiw	r28, 0x1f	; 31
     2ac:	0f c0       	rjmp	.+30     	; 0x2cc <doFuzzy+0x1e0>
     2ae:	bb e4       	ldi	r27, 0x4B	; 75
     2b0:	cb 16       	cp	r12, r27
     2b2:	d1 04       	cpc	r13, r1
     2b4:	3c f0       	brlt	.+14     	; 0x2c4 <doFuzzy+0x1d8>
     2b6:	8a e4       	ldi	r24, 0x4A	; 74
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	6f 96       	adiw	r28, 0x1f	; 31
     2bc:	9f af       	std	Y+63, r25	; 0x3f
     2be:	8e af       	std	Y+62, r24	; 0x3e
     2c0:	6f 97       	sbiw	r28, 0x1f	; 31
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <doFuzzy+0x1e0>
     2c4:	6f 96       	adiw	r28, 0x1f	; 31
     2c6:	df ae       	std	Y+63, r13	; 0x3f
     2c8:	ce ae       	std	Y+62, r12	; 0x3e
     2ca:	6f 97       	sbiw	r28, 0x1f	; 31
     2cc:	1e 01       	movw	r2, r28
     2ce:	e5 ea       	ldi	r30, 0xA5	; 165
     2d0:	2e 0e       	add	r2, r30
     2d2:	31 1c       	adc	r3, r1
     2d4:	89 e0       	ldi	r24, 0x09	; 9
     2d6:	e4 e4       	ldi	r30, 0x44	; 68
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	d1 01       	movw	r26, r2
     2dc:	01 90       	ld	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	8a 95       	dec	r24
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <doFuzzy+0x1f0>
     2e4:	2e 01       	movw	r4, r28
     2e6:	f5 eb       	ldi	r31, 0xB5	; 181
     2e8:	4f 0e       	add	r4, r31
     2ea:	51 1c       	adc	r5, r1
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fc e9       	ldi	r31, 0x9C	; 156
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f9 e0       	ldi	r31, 0x09	; 9
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	08 e3       	ldi	r16, 0x38	; 56
     2fa:	19 e0       	ldi	r17, 0x09	; 9
     2fc:	28 e3       	ldi	r18, 0x38	; 56
     2fe:	39 e0       	ldi	r19, 0x09	; 9
     300:	47 e3       	ldi	r20, 0x37	; 55
     302:	59 e0       	ldi	r21, 0x09	; 9
     304:	6d e4       	ldi	r22, 0x4D	; 77
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	c2 01       	movw	r24, r4
     30a:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     30e:	3e 01       	movw	r6, r28
     310:	2b ec       	ldi	r18, 0xCB	; 203
     312:	62 0e       	add	r6, r18
     314:	71 1c       	adc	r7, r1
     316:	0f 2e       	mov	r0, r31
     318:	e1 2c       	mov	r14, r1
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	ff 2e       	mov	r15, r31
     31e:	f0 2d       	mov	r31, r0
     320:	0c e9       	ldi	r16, 0x9C	; 156
     322:	19 e0       	ldi	r17, 0x09	; 9
     324:	2c e9       	ldi	r18, 0x9C	; 156
     326:	39 e0       	ldi	r19, 0x09	; 9
     328:	40 e6       	ldi	r20, 0x60	; 96
     32a:	59 e0       	ldi	r21, 0x09	; 9
     32c:	6f ee       	ldi	r22, 0xEF	; 239
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	c3 01       	movw	r24, r6
     332:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     336:	6e 01       	movw	r12, r28
     338:	41 ee       	ldi	r20, 0xE1	; 225
     33a:	c4 0e       	add	r12, r20
     33c:	d1 1c       	adc	r13, r1
     33e:	0f 2e       	mov	r0, r31
     340:	f0 ea       	ldi	r31, 0xA0	; 160
     342:	ef 2e       	mov	r14, r31
     344:	fa e0       	ldi	r31, 0x0A	; 10
     346:	ff 2e       	mov	r15, r31
     348:	f0 2d       	mov	r31, r0
     34a:	04 e6       	ldi	r16, 0x64	; 100
     34c:	1a e0       	ldi	r17, 0x0A	; 10
     34e:	24 e6       	ldi	r18, 0x64	; 100
     350:	3a e0       	ldi	r19, 0x0A	; 10
     352:	48 ed       	ldi	r20, 0xD8	; 216
     354:	59 e0       	ldi	r21, 0x09	; 9
     356:	67 e5       	ldi	r22, 0x57	; 87
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	c6 01       	movw	r24, r12
     35c:	0e 94 b7 09 	call	0x136e	; 0x136e <MATLAB_MF>
     360:	4e 01       	movw	r8, r28
     362:	57 ef       	ldi	r21, 0xF7	; 247
     364:	85 0e       	add	r8, r21
     366:	91 1c       	adc	r9, r1
     368:	0f 2e       	mov	r0, r31
     36a:	f4 e5       	ldi	r31, 0x54	; 84
     36c:	ef 2e       	mov	r14, r31
     36e:	fb e0       	ldi	r31, 0x0B	; 11
     370:	ff 2e       	mov	r15, r31
     372:	f0 2d       	mov	r31, r0
     374:	00 ef       	ldi	r16, 0xF0	; 240
     376:	1a e0       	ldi	r17, 0x0A	; 10
     378:	20 ef       	ldi	r18, 0xF0	; 240
     37a:	3a e0       	ldi	r19, 0x0A	; 10
     37c:	4c e8       	ldi	r20, 0x8C	; 140
     37e:	5a e0       	ldi	r21, 0x0A	; 10
     380:	6e ed       	ldi	r22, 0xDE	; 222
     382:	71 e0       	ldi	r23, 0x01	; 1
     384:	c4 01       	movw	r24, r8
     386:	f3 d7       	rcall	.+4070   	; 0x136e <MATLAB_MF>
     388:	5e 01       	movw	r10, r28
     38a:	83 ef       	ldi	r24, 0xF3	; 243
     38c:	a8 1a       	sub	r10, r24
     38e:	8e ef       	ldi	r24, 0xFE	; 254
     390:	b8 0a       	sbc	r11, r24
     392:	0f 2e       	mov	r0, r31
     394:	f1 e9       	ldi	r31, 0x91	; 145
     396:	ef 2e       	mov	r14, r31
     398:	fb e0       	ldi	r31, 0x0B	; 11
     39a:	ff 2e       	mov	r15, r31
     39c:	f0 2d       	mov	r31, r0
     39e:	00 e9       	ldi	r16, 0x90	; 144
     3a0:	1b e0       	ldi	r17, 0x0B	; 11
     3a2:	20 e9       	ldi	r18, 0x90	; 144
     3a4:	3b e0       	ldi	r19, 0x0B	; 11
     3a6:	4c e2       	ldi	r20, 0x2C	; 44
     3a8:	5b e0       	ldi	r21, 0x0B	; 11
     3aa:	60 e6       	ldi	r22, 0x60	; 96
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	c5 01       	movw	r24, r10
     3b0:	de d7       	rcall	.+4028   	; 0x136e <MATLAB_MF>
     3b2:	d1 01       	movw	r26, r2
     3b4:	1d 96       	adiw	r26, 0x0d	; 13
     3b6:	bc 92       	st	X, r11
     3b8:	ae 92       	st	-X, r10
     3ba:	1c 97       	sbiw	r26, 0x0c	; 12
     3bc:	f5 01       	movw	r30, r10
     3be:	95 8a       	std	Z+21, r9	; 0x15
     3c0:	84 8a       	std	Z+20, r8	; 0x14
     3c2:	d4 01       	movw	r26, r8
     3c4:	55 96       	adiw	r26, 0x15	; 21
     3c6:	dc 92       	st	X, r13
     3c8:	ce 92       	st	-X, r12
     3ca:	54 97       	sbiw	r26, 0x14	; 20
     3cc:	f6 01       	movw	r30, r12
     3ce:	75 8a       	std	Z+21, r7	; 0x15
     3d0:	64 8a       	std	Z+20, r6	; 0x14
     3d2:	d3 01       	movw	r26, r6
     3d4:	55 96       	adiw	r26, 0x15	; 21
     3d6:	5c 92       	st	X, r5
     3d8:	4e 92       	st	-X, r4
     3da:	54 97       	sbiw	r26, 0x14	; 20
     3dc:	f2 01       	movw	r30, r4
     3de:	15 8a       	std	Z+21, r1	; 0x15
     3e0:	14 8a       	std	Z+20, r1	; 0x14
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	90 93 1d 03 	sts	0x031D, r25
     3ea:	80 93 1c 03 	sts	0x031C, r24
     3ee:	e2 56       	subi	r30, 0x62	; 98
     3f0:	f1 09       	sbc	r31, r1
     3f2:	f8 8b       	std	Y+16, r31	; 0x10
     3f4:	ef 87       	std	Y+15, r30	; 0x0f
     3f6:	17 86       	std	Z+15, r1	; 0x0f
     3f8:	16 86       	std	Z+14, r1	; 0x0e
     3fa:	30 92 1b 03 	sts	0x031B, r3
     3fe:	20 92 1a 03 	sts	0x031A, r2
     402:	d1 01       	movw	r26, r2
     404:	1f 96       	adiw	r26, 0x0f	; 15
     406:	1c 92       	st	X, r1
     408:	1e 92       	st	-X, r1
     40a:	1e 97       	sbiw	r26, 0x0e	; 14
     40c:	a2 58       	subi	r26, 0x82	; 130
     40e:	bf 4f       	sbci	r27, 0xFF	; 255
     410:	83 01       	movw	r16, r6
     412:	06 5f       	subi	r16, 0xF6	; 246
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	11 96       	adiw	r26, 0x01	; 1
     418:	1c 93       	st	X, r17
     41a:	0e 93       	st	-X, r16
     41c:	13 96       	adiw	r26, 0x03	; 3
     41e:	1c 92       	st	X, r1
     420:	1e 92       	st	-X, r1
     422:	12 97       	sbiw	r26, 0x02	; 2
     424:	ae 01       	movw	r20, r28
     426:	49 5d       	subi	r20, 0xD9	; 217
     428:	5e 4f       	sbci	r21, 0xFE	; 254
     42a:	3e 01       	movw	r6, r28
     42c:	e9 e9       	ldi	r30, 0x99	; 153
     42e:	6e 0e       	add	r6, r30
     430:	71 1c       	adc	r7, r1
     432:	fa 01       	movw	r30, r20
     434:	71 82       	std	Z+1, r7	; 0x01
     436:	60 82       	st	Z, r6
     438:	13 82       	std	Z+3, r1	; 0x03
     43a:	12 82       	std	Z+2, r1	; 0x02
     43c:	86 5d       	subi	r24, 0xD6	; 214
     43e:	9e 4f       	sbci	r25, 0xFE	; 254
     440:	7e 01       	movw	r14, r28
     442:	f1 e3       	ldi	r31, 0x31	; 49
     444:	ef 0e       	add	r14, r31
     446:	f1 1c       	adc	r15, r1
     448:	fc 01       	movw	r30, r24
     44a:	f1 82       	std	Z+1, r15	; 0x01
     44c:	e0 82       	st	Z, r14
     44e:	53 83       	std	Z+3, r21	; 0x03
     450:	42 83       	std	Z+2, r20	; 0x02
     452:	34 96       	adiw	r30, 0x04	; 4
     454:	91 83       	std	Z+1, r25	; 0x01
     456:	80 83       	st	Z, r24
     458:	b3 83       	std	Z+3, r27	; 0x03
     45a:	a2 83       	std	Z+2, r26	; 0x02
     45c:	15 82       	std	Z+5, r1	; 0x05
     45e:	14 82       	std	Z+4, r1	; 0x04
     460:	0a 96       	adiw	r24, 0x0a	; 10
     462:	2a e0       	ldi	r18, 0x0A	; 10
     464:	82 0e       	add	r8, r18
     466:	91 1c       	adc	r9, r1
     468:	dc 01       	movw	r26, r24
     46a:	11 96       	adiw	r26, 0x01	; 1
     46c:	9c 92       	st	X, r9
     46e:	8e 92       	st	-X, r8
     470:	13 96       	adiw	r26, 0x03	; 3
     472:	1c 92       	st	X, r1
     474:	1e 92       	st	-X, r1
     476:	12 97       	sbiw	r26, 0x02	; 2
     478:	be 01       	movw	r22, r28
     47a:	67 5c       	subi	r22, 0xC7	; 199
     47c:	7e 4f       	sbci	r23, 0xFE	; 254
     47e:	db 01       	movw	r26, r22
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	7c 92       	st	X, r7
     484:	6e 92       	st	-X, r6
     486:	13 96       	adiw	r26, 0x03	; 3
     488:	1c 92       	st	X, r1
     48a:	1e 92       	st	-X, r1
     48c:	12 97       	sbiw	r26, 0x02	; 2
     48e:	4a 5e       	subi	r20, 0xEA	; 234
     490:	5f 4f       	sbci	r21, 0xFF	; 255
     492:	9e 01       	movw	r18, r28
     494:	29 5b       	subi	r18, 0xB9	; 185
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	da 01       	movw	r26, r20
     49a:	11 96       	adiw	r26, 0x01	; 1
     49c:	3c 93       	st	X, r19
     49e:	2e 93       	st	-X, r18
     4a0:	13 96       	adiw	r26, 0x03	; 3
     4a2:	7c 93       	st	X, r23
     4a4:	6e 93       	st	-X, r22
     4a6:	12 97       	sbiw	r26, 0x02	; 2
     4a8:	14 96       	adiw	r26, 0x04	; 4
     4aa:	11 96       	adiw	r26, 0x01	; 1
     4ac:	5c 93       	st	X, r21
     4ae:	4e 93       	st	-X, r20
     4b0:	13 96       	adiw	r26, 0x03	; 3
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	12 97       	sbiw	r26, 0x02	; 2
     4b8:	15 96       	adiw	r26, 0x05	; 5
     4ba:	fc 93       	st	X, r31
     4bc:	ee 93       	st	-X, r30
     4be:	14 97       	sbiw	r26, 0x04	; 4
     4c0:	46 5f       	subi	r20, 0xF6	; 246
     4c2:	5f 4f       	sbci	r21, 0xFF	; 255
     4c4:	ea e0       	ldi	r30, 0x0A	; 10
     4c6:	ae 0e       	add	r10, r30
     4c8:	b1 1c       	adc	r11, r1
     4ca:	fa 01       	movw	r30, r20
     4cc:	b1 82       	std	Z+1, r11	; 0x01
     4ce:	a0 82       	st	Z, r10
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	12 82       	std	Z+2, r1	; 0x02
     4d4:	5e 01       	movw	r10, r28
     4d6:	f5 eb       	ldi	r31, 0xB5	; 181
     4d8:	af 1a       	sub	r10, r31
     4da:	fe ef       	ldi	r31, 0xFE	; 254
     4dc:	bf 0a       	sbc	r11, r31
     4de:	82 5b       	subi	r24, 0xB2	; 178
     4e0:	91 09       	sbc	r25, r1
     4e2:	f5 01       	movw	r30, r10
     4e4:	91 83       	std	Z+1, r25	; 0x01
     4e6:	80 83       	st	Z, r24
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	12 82       	std	Z+2, r1	; 0x02
     4ec:	6a 5e       	subi	r22, 0xEA	; 234
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	fb 01       	movw	r30, r22
     4f2:	31 83       	std	Z+1, r19	; 0x01
     4f4:	20 83       	st	Z, r18
     4f6:	b3 82       	std	Z+3, r11	; 0x03
     4f8:	a2 82       	std	Z+2, r10	; 0x02
     4fa:	34 96       	adiw	r30, 0x04	; 4
     4fc:	71 83       	std	Z+1, r23	; 0x01
     4fe:	60 83       	st	Z, r22
     500:	53 83       	std	Z+3, r21	; 0x03
     502:	42 83       	std	Z+2, r20	; 0x02
     504:	b5 83       	std	Z+5, r27	; 0x05
     506:	a4 83       	std	Z+4, r26	; 0x04
     508:	56 01       	movw	r10, r12
     50a:	4a e0       	ldi	r20, 0x0A	; 10
     50c:	a4 0e       	add	r10, r20
     50e:	b1 1c       	adc	r11, r1
     510:	c7 5a       	subi	r28, 0xA7	; 167
     512:	de 4f       	sbci	r29, 0xFE	; 254
     514:	b9 82       	std	Y+1, r11	; 0x01
     516:	a8 82       	st	Y, r10
     518:	c9 55       	subi	r28, 0x59	; 89
     51a:	d1 40       	sbci	r29, 0x01	; 1
     51c:	c5 5a       	subi	r28, 0xA5	; 165
     51e:	de 4f       	sbci	r29, 0xFE	; 254
     520:	19 82       	std	Y+1, r1	; 0x01
     522:	18 82       	st	Y, r1
     524:	cb 55       	subi	r28, 0x5B	; 91
     526:	d1 40       	sbci	r29, 0x01	; 1
     528:	62 5f       	subi	r22, 0xF2	; 242
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	6e 01       	movw	r12, r28
     52e:	5d e6       	ldi	r21, 0x6D	; 109
     530:	c5 0e       	add	r12, r21
     532:	d1 1c       	adc	r13, r1
     534:	db 01       	movw	r26, r22
     536:	11 96       	adiw	r26, 0x01	; 1
     538:	dc 92       	st	X, r13
     53a:	ce 92       	st	-X, r12
     53c:	13 96       	adiw	r26, 0x03	; 3
     53e:	1c 92       	st	X, r1
     540:	1e 92       	st	-X, r1
     542:	12 97       	sbiw	r26, 0x02	; 2
     544:	46 5e       	subi	r20, 0xE6	; 230
     546:	5f 4f       	sbci	r21, 0xFF	; 255
     548:	da 01       	movw	r26, r20
     54a:	11 96       	adiw	r26, 0x01	; 1
     54c:	3c 93       	st	X, r19
     54e:	2e 93       	st	-X, r18
     550:	13 96       	adiw	r26, 0x03	; 3
     552:	7c 93       	st	X, r23
     554:	6e 93       	st	-X, r22
     556:	12 97       	sbiw	r26, 0x02	; 2
     558:	22 5e       	subi	r18, 0xE2	; 226
     55a:	3e 4f       	sbci	r19, 0xFE	; 254
     55c:	d9 01       	movw	r26, r18
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	5c 93       	st	X, r21
     562:	4e 93       	st	-X, r20
     564:	49 e5       	ldi	r20, 0x59	; 89
     566:	51 e0       	ldi	r21, 0x01	; 1
     568:	4c 0f       	add	r20, r28
     56a:	5d 1f       	adc	r21, r29
     56c:	13 96       	adiw	r26, 0x03	; 3
     56e:	5c 93       	st	X, r21
     570:	4e 93       	st	-X, r20
     572:	12 97       	sbiw	r26, 0x02	; 2
     574:	15 96       	adiw	r26, 0x05	; 5
     576:	fc 93       	st	X, r31
     578:	ee 93       	st	-X, r30
     57a:	14 97       	sbiw	r26, 0x04	; 4
     57c:	16 96       	adiw	r26, 0x06	; 6
     57e:	5a e0       	ldi	r21, 0x0A	; 10
     580:	45 0e       	add	r4, r21
     582:	51 1c       	adc	r5, r1
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	5c 92       	st	X, r5
     588:	4e 92       	st	-X, r4
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	1c 92       	st	X, r1
     58e:	1e 92       	st	-X, r1
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	2e 01       	movw	r4, r28
     594:	e1 e9       	ldi	r30, 0x91	; 145
     596:	4e 1a       	sub	r4, r30
     598:	ee ef       	ldi	r30, 0xFE	; 254
     59a:	5e 0a       	sbc	r5, r30
     59c:	f2 01       	movw	r30, r4
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	80 83       	st	Z, r24
     5a2:	13 82       	std	Z+3, r1	; 0x03
     5a4:	12 82       	std	Z+2, r1	; 0x02
     5a6:	6a 5e       	subi	r22, 0xEA	; 234
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	ae 01       	movw	r20, r28
     5ac:	45 5e       	subi	r20, 0xE5	; 229
     5ae:	5f 4f       	sbci	r21, 0xFF	; 255
     5b0:	fb 01       	movw	r30, r22
     5b2:	51 83       	std	Z+1, r21	; 0x01
     5b4:	40 83       	st	Z, r20
     5b6:	53 82       	std	Z+3, r5	; 0x03
     5b8:	42 82       	std	Z+2, r4	; 0x02
     5ba:	34 96       	adiw	r30, 0x04	; 4
     5bc:	71 83       	std	Z+1, r23	; 0x01
     5be:	60 83       	st	Z, r22
     5c0:	b3 83       	std	Z+3, r27	; 0x03
     5c2:	a2 83       	std	Z+2, r26	; 0x02
     5c4:	35 83       	std	Z+5, r19	; 0x05
     5c6:	24 83       	std	Z+4, r18	; 0x04
     5c8:	66 5f       	subi	r22, 0xF6	; 246
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	db 01       	movw	r26, r22
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	bc 92       	st	X, r11
     5d2:	ae 92       	st	-X, r10
     5d4:	13 96       	adiw	r26, 0x03	; 3
     5d6:	1c 92       	st	X, r1
     5d8:	1e 92       	st	-X, r1
     5da:	12 97       	sbiw	r26, 0x02	; 2
     5dc:	24 5e       	subi	r18, 0xE4	; 228
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	d9 01       	movw	r26, r18
     5e2:	11 96       	adiw	r26, 0x01	; 1
     5e4:	9c 93       	st	X, r25
     5e6:	8e 93       	st	-X, r24
     5e8:	13 96       	adiw	r26, 0x03	; 3
     5ea:	1c 92       	st	X, r1
     5ec:	1e 92       	st	-X, r1
     5ee:	12 97       	sbiw	r26, 0x02	; 2
     5f0:	8e 5f       	subi	r24, 0xFE	; 254
     5f2:	9e 4f       	sbci	r25, 0xFE	; 254
     5f4:	dc 01       	movw	r26, r24
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	fc 92       	st	X, r15
     5fa:	ee 92       	st	-X, r14
     5fc:	13 96       	adiw	r26, 0x03	; 3
     5fe:	3c 93       	st	X, r19
     600:	2e 93       	st	-X, r18
     602:	12 97       	sbiw	r26, 0x02	; 2
     604:	28 5f       	subi	r18, 0xF8	; 248
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	d9 01       	movw	r26, r18
     60a:	11 96       	adiw	r26, 0x01	; 1
     60c:	9c 93       	st	X, r25
     60e:	8e 93       	st	-X, r24
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	7c 93       	st	X, r23
     614:	6e 93       	st	-X, r22
     616:	12 97       	sbiw	r26, 0x02	; 2
     618:	15 96       	adiw	r26, 0x05	; 5
     61a:	fc 93       	st	X, r31
     61c:	ee 93       	st	-X, r30
     61e:	14 97       	sbiw	r26, 0x04	; 4
     620:	6e 5e       	subi	r22, 0xEE	; 238
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	fb 01       	movw	r30, r22
     626:	11 83       	std	Z+1, r17	; 0x01
     628:	00 83       	st	Z, r16
     62a:	13 82       	std	Z+3, r1	; 0x03
     62c:	12 82       	std	Z+2, r1	; 0x02
     62e:	1a 96       	adiw	r26, 0x0a	; 10
     630:	11 96       	adiw	r26, 0x01	; 1
     632:	7c 92       	st	X, r7
     634:	6e 92       	st	-X, r6
     636:	13 96       	adiw	r26, 0x03	; 3
     638:	1c 92       	st	X, r1
     63a:	1e 92       	st	-X, r1
     63c:	12 97       	sbiw	r26, 0x02	; 2
     63e:	42 96       	adiw	r24, 0x12	; 18
     640:	fc 01       	movw	r30, r24
     642:	51 83       	std	Z+1, r21	; 0x01
     644:	40 83       	st	Z, r20
     646:	b3 83       	std	Z+3, r27	; 0x03
     648:	a2 83       	std	Z+2, r26	; 0x02
     64a:	18 96       	adiw	r26, 0x08	; 8
     64c:	11 96       	adiw	r26, 0x01	; 1
     64e:	9c 93       	st	X, r25
     650:	8e 93       	st	-X, r24
     652:	13 96       	adiw	r26, 0x03	; 3
     654:	7c 93       	st	X, r23
     656:	6e 93       	st	-X, r22
     658:	12 97       	sbiw	r26, 0x02	; 2
     65a:	15 96       	adiw	r26, 0x05	; 5
     65c:	3c 93       	st	X, r19
     65e:	2e 93       	st	-X, r18
     660:	14 97       	sbiw	r26, 0x04	; 4
     662:	6e 5e       	subi	r22, 0xEE	; 238
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	fb 01       	movw	r30, r22
     668:	11 83       	std	Z+1, r17	; 0x01
     66a:	00 83       	st	Z, r16
     66c:	13 82       	std	Z+3, r1	; 0x03
     66e:	12 82       	std	Z+2, r1	; 0x02
     670:	0e 96       	adiw	r24, 0x0e	; 14
     672:	fc 01       	movw	r30, r24
     674:	d1 82       	std	Z+1, r13	; 0x01
     676:	c0 82       	st	Z, r12
     678:	13 82       	std	Z+3, r1	; 0x03
     67a:	12 82       	std	Z+2, r1	; 0x02
     67c:	20 5e       	subi	r18, 0xE0	; 224
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	f9 01       	movw	r30, r18
     682:	51 83       	std	Z+1, r21	; 0x01
     684:	40 83       	st	Z, r20
     686:	93 83       	std	Z+3, r25	; 0x03
     688:	82 83       	std	Z+2, r24	; 0x02
     68a:	08 96       	adiw	r24, 0x08	; 8
     68c:	fc 01       	movw	r30, r24
     68e:	31 83       	std	Z+1, r19	; 0x01
     690:	20 83       	st	Z, r18
     692:	73 83       	std	Z+3, r23	; 0x03
     694:	62 83       	std	Z+2, r22	; 0x02
     696:	b5 83       	std	Z+5, r27	; 0x05
     698:	a4 83       	std	Z+4, r26	; 0x04
     69a:	58 96       	adiw	r26, 0x18	; 24
     69c:	11 96       	adiw	r26, 0x01	; 1
     69e:	9c 92       	st	X, r9
     6a0:	8e 92       	st	-X, r8
     6a2:	13 96       	adiw	r26, 0x03	; 3
     6a4:	1c 92       	st	X, r1
     6a6:	1e 92       	st	-X, r1
     6a8:	12 97       	sbiw	r26, 0x02	; 2
     6aa:	44 56       	subi	r20, 0x64	; 100
     6ac:	5e 4f       	sbci	r21, 0xFE	; 254
     6ae:	fa 01       	movw	r30, r20
     6b0:	d1 82       	std	Z+1, r13	; 0x01
     6b2:	c0 82       	st	Z, r12
     6b4:	13 82       	std	Z+3, r1	; 0x03
     6b6:	12 82       	std	Z+2, r1	; 0x02
     6b8:	2e 5e       	subi	r18, 0xEE	; 238
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	f9 01       	movw	r30, r18
     6be:	f1 82       	std	Z+1, r15	; 0x01
     6c0:	e0 82       	st	Z, r14
     6c2:	53 83       	std	Z+3, r21	; 0x03
     6c4:	42 83       	std	Z+2, r20	; 0x02
     6c6:	34 96       	adiw	r30, 0x04	; 4
     6c8:	31 83       	std	Z+1, r19	; 0x01
     6ca:	20 83       	st	Z, r18
     6cc:	b3 83       	std	Z+3, r27	; 0x03
     6ce:	a2 83       	std	Z+2, r26	; 0x02
     6d0:	95 83       	std	Z+5, r25	; 0x05
     6d2:	84 83       	std	Z+4, r24	; 0x04
     6d4:	f0 93 1f 03 	sts	0x031F, r31
     6d8:	e0 93 1e 03 	sts	0x031E, r30
     6dc:	1e d5       	rcall	.+2620   	; 0x111a <fuzzification>
     6de:	44 d5       	rcall	.+2696   	; 0x1168 <rule_evaluation>
     6e0:	89 d5       	rcall	.+2834   	; 0x11f4 <defuzzification>
     6e2:	d1 01       	movw	r26, r2
     6e4:	1a 96       	adiw	r26, 0x0a	; 10
     6e6:	8d 91       	ld	r24, X+
     6e8:	9c 91       	ld	r25, X
     6ea:	1b 97       	sbiw	r26, 0x0b	; 11
     6ec:	86 3e       	cpi	r24, 0xE6	; 230
     6ee:	b7 e0       	ldi	r27, 0x07	; 7
     6f0:	9b 07       	cpc	r25, r27
     6f2:	24 f4       	brge	.+8      	; 0x6fc <doFuzzy+0x610>
     6f4:	86 ee       	ldi	r24, 0xE6	; 230
     6f6:	97 e0       	ldi	r25, 0x07	; 7
     6f8:	6c d7       	rcall	.+3800   	; 0x15d2 <setServo>
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <doFuzzy+0x622>
     6fc:	85 3e       	cpi	r24, 0xE5	; 229
     6fe:	ec e0       	ldi	r30, 0x0C	; 12
     700:	9e 07       	cpc	r25, r30
     702:	24 f0       	brlt	.+8      	; 0x70c <doFuzzy+0x620>
     704:	84 ee       	ldi	r24, 0xE4	; 228
     706:	9c e0       	ldi	r25, 0x0C	; 12
     708:	64 d7       	rcall	.+3784   	; 0x15d2 <setServo>
     70a:	01 c0       	rjmp	.+2      	; 0x70e <doFuzzy+0x622>
     70c:	62 d7       	rcall	.+3780   	; 0x15d2 <setServo>
     70e:	cc 53       	subi	r28, 0x3C	; 60
     710:	de 4f       	sbci	r29, 0xFE	; 254
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	7f 90       	pop	r7
     736:	6f 90       	pop	r6
     738:	5f 90       	pop	r5
     73a:	4f 90       	pop	r4
     73c:	3f 90       	pop	r3
     73e:	2f 90       	pop	r2
     740:	08 95       	ret

00000742 <FLC_steering>:
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	61 35       	cpi	r22, 0x51	; 81
     746:	71 05       	cpc	r23, r1
     748:	09 f0       	breq	.+2      	; 0x74c <FLC_steering+0xa>
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	91 05       	cpc	r25, r1
     752:	09 f0       	breq	.+2      	; 0x756 <FLC_steering+0x14>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	22 23       	and	r18, r18
     758:	31 f0       	breq	.+12     	; 0x766 <FLC_steering+0x24>
     75a:	33 23       	and	r19, r19
     75c:	21 f0       	breq	.+8      	; 0x766 <FLC_steering+0x24>
     75e:	84 ee       	ldi	r24, 0xE4	; 228
     760:	9c e0       	ldi	r25, 0x0C	; 12
     762:	37 d7       	rcall	.+3694   	; 0x15d2 <setServo>
     764:	0e c0       	rjmp	.+28     	; 0x782 <FLC_steering+0x40>
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	91 05       	cpc	r25, r1
     76c:	09 f0       	breq	.+2      	; 0x770 <FLC_steering+0x2e>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	22 23       	and	r18, r18
     772:	31 f0       	breq	.+12     	; 0x780 <FLC_steering+0x3e>
     774:	33 23       	and	r19, r19
     776:	21 f0       	breq	.+8      	; 0x780 <FLC_steering+0x3e>
     778:	86 ee       	ldi	r24, 0xE6	; 230
     77a:	97 e0       	ldi	r25, 0x07	; 7
     77c:	2a d7       	rcall	.+3668   	; 0x15d2 <setServo>
     77e:	01 c0       	rjmp	.+2      	; 0x782 <FLC_steering+0x40>
     780:	b5 dc       	rcall	.-1686   	; 0xec <doFuzzy>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	08 95       	ret

00000788 <doFuzzy2>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void doFuzzy2(int currentOCR1A, int midSonicRange)
{
     788:	2f 92       	push	r2
     78a:	3f 92       	push	r3
     78c:	4f 92       	push	r4
     78e:	5f 92       	push	r5
     790:	6f 92       	push	r6
     792:	7f 92       	push	r7
     794:	8f 92       	push	r8
     796:	9f 92       	push	r9
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	c4 53       	subi	r28, 0x34	; 52
     7b2:	d2 40       	sbci	r29, 0x02	; 2
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
// DECLARATION OF DISTANCE INPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type distance; strcpy(distance.name, "distance");
     7be:	29 e0       	ldi	r18, 0x09	; 9
     7c0:	eb e6       	ldi	r30, 0x6B	; 107
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	de 01       	movw	r26, r28
     7c6:	11 96       	adiw	r26, 0x01	; 1
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	2a 95       	dec	r18
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <doFuzzy2+0x40>
struct io_type speed; strcpy(speed.name, "speed");
     7d0:	26 e0       	ldi	r18, 0x06	; 6
     7d2:	e4 e7       	ldi	r30, 0x74	; 116
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	de 01       	movw	r26, r28
     7d8:	51 96       	adiw	r26, 0x11	; 17
     7da:	01 90       	ld	r0, Z+
     7dc:	0d 92       	st	X+, r0
     7de:	2a 95       	dec	r18
     7e0:	e1 f7       	brne	.-8      	; 0x7da <doFuzzy2+0x52>

// Variable assigned its reference value
if (currentOCR1A<MIN_SPEED) {
     7e2:	84 3b       	cpi	r24, 0xB4	; 180
     7e4:	2a e0       	ldi	r18, 0x0A	; 10
     7e6:	92 07       	cpc	r25, r18
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <doFuzzy2+0x6c>
speed.value = MIN_SPEED;
     7ea:	84 eb       	ldi	r24, 0xB4	; 180
     7ec:	9a e0       	ldi	r25, 0x0A	; 10
     7ee:	9c 8f       	std	Y+28, r25	; 0x1c
     7f0:	8b 8f       	std	Y+27, r24	; 0x1b
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <doFuzzy2+0x82>
}
else if (currentOCR1A>MAX_SPEED)
     7f4:	85 35       	cpi	r24, 0x55	; 85
     7f6:	4b e0       	ldi	r20, 0x0B	; 11
     7f8:	94 07       	cpc	r25, r20
     7fa:	2c f0       	brlt	.+10     	; 0x806 <doFuzzy2+0x7e>
{
speed.value = MAX_SPEED;
     7fc:	84 e5       	ldi	r24, 0x54	; 84
     7fe:	9b e0       	ldi	r25, 0x0B	; 11
     800:	9c 8f       	std	Y+28, r25	; 0x1c
     802:	8b 8f       	std	Y+27, r24	; 0x1b
     804:	02 c0       	rjmp	.+4      	; 0x80a <doFuzzy2+0x82>
}
else
{
speed.value = currentOCR1A;
     806:	9c 8f       	std	Y+28, r25	; 0x1c
     808:	8b 8f       	std	Y+27, r24	; 0x1b
}

// Variable assigned its reference value
if(midSonicRange < MIN_DISTANCE)
     80a:	77 23       	and	r23, r23
     80c:	1c f4       	brge	.+6      	; 0x814 <doFuzzy2+0x8c>
{
distance.value = MIN_DISTANCE;
     80e:	1c 86       	std	Y+12, r1	; 0x0c
     810:	1b 86       	std	Y+11, r1	; 0x0b
     812:	0a c0       	rjmp	.+20     	; 0x828 <doFuzzy2+0xa0>
}
else if (midSonicRange > MAX_DISTANCE)
     814:	6b 3f       	cpi	r22, 0xFB	; 251
     816:	71 05       	cpc	r23, r1
     818:	2c f0       	brlt	.+10     	; 0x824 <doFuzzy2+0x9c>
{
distance.value = MAX_DISTANCE;
     81a:	8a ef       	ldi	r24, 0xFA	; 250
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9c 87       	std	Y+12, r25	; 0x0c
     820:	8b 87       	std	Y+11, r24	; 0x0b
     822:	02 c0       	rjmp	.+4      	; 0x828 <doFuzzy2+0xa0>
}
else
{
distance.value = midSonicRange;
     824:	7c 87       	std	Y+12, r23	; 0x0c
     826:	6b 87       	std	Y+11, r22	; 0x0b
}


// Set MFs
struct mf_type stopDist;
MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 20);
     828:	6e 01       	movw	r12, r28
     82a:	51 e2       	ldi	r21, 0x21	; 33
     82c:	c5 0e       	add	r12, r21
     82e:	d1 1c       	adc	r13, r1
     830:	0f 2e       	mov	r0, r31
     832:	f4 e1       	ldi	r31, 0x14	; 20
     834:	ef 2e       	mov	r14, r31
     836:	f1 2c       	mov	r15, r1
     838:	f0 2d       	mov	r31, r0
     83a:	0c e0       	ldi	r16, 0x0C	; 12
     83c:	10 e0       	ldi	r17, 0x00	; 0
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	4f ef       	ldi	r20, 0xFF	; 255
     844:	5f ef       	ldi	r21, 0xFF	; 255
     846:	6a e7       	ldi	r22, 0x7A	; 122
     848:	71 e0       	ldi	r23, 0x01	; 1
     84a:	c6 01       	movw	r24, r12
     84c:	90 d5       	rcall	.+2848   	; 0x136e <MATLAB_MF>
struct mf_type oneM;
MATLAB_MF(&oneM, "oneM", 18, 60, 60, 95);
     84e:	3e 01       	movw	r6, r28
     850:	67 e3       	ldi	r22, 0x37	; 55
     852:	66 0e       	add	r6, r22
     854:	71 1c       	adc	r7, r1
     856:	0f 2e       	mov	r0, r31
     858:	ff e5       	ldi	r31, 0x5F	; 95
     85a:	ef 2e       	mov	r14, r31
     85c:	f1 2c       	mov	r15, r1
     85e:	f0 2d       	mov	r31, r0
     860:	0c e3       	ldi	r16, 0x3C	; 60
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	2c e3       	ldi	r18, 0x3C	; 60
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	42 e1       	ldi	r20, 0x12	; 18
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	63 e8       	ldi	r22, 0x83	; 131
     86e:	71 e0       	ldi	r23, 0x01	; 1
     870:	c3 01       	movw	r24, r6
     872:	7d d5       	rcall	.+2810   	; 0x136e <MATLAB_MF>
struct mf_type twoM;
MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     874:	0f 2e       	mov	r0, r31
     876:	ff ea       	ldi	r31, 0xAF	; 175
     878:	ef 2e       	mov	r14, r31
     87a:	f1 2c       	mov	r15, r1
     87c:	f0 2d       	mov	r31, r0
     87e:	0d e7       	ldi	r16, 0x7D	; 125
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	2d e7       	ldi	r18, 0x7D	; 125
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	4b e4       	ldi	r20, 0x4B	; 75
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	68 e8       	ldi	r22, 0x88	; 136
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	ce 01       	movw	r24, r28
     890:	83 5b       	subi	r24, 0xB3	; 179
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	6c d5       	rcall	.+2776   	; 0x136e <MATLAB_MF>
struct mf_type threeM;
MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     896:	0f 2e       	mov	r0, r31
     898:	fb ef       	ldi	r31, 0xFB	; 251
     89a:	ef 2e       	mov	r14, r31
     89c:	f1 2c       	mov	r15, r1
     89e:	f0 2d       	mov	r31, r0
     8a0:	0a ef       	ldi	r16, 0xFA	; 250
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	2a ef       	ldi	r18, 0xFA	; 250
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	46 e9       	ldi	r20, 0x96	; 150
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	6d e8       	ldi	r22, 0x8D	; 141
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	ce 01       	movw	r24, r28
     8b2:	8d 59       	subi	r24, 0x9D	; 157
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	5b d5       	rcall	.+2742   	; 0x136e <MATLAB_MF>

// Linked list for MFs
distance.membership_functions = &stopDist;
     8b8:	de 86       	std	Y+14, r13	; 0x0e
     8ba:	cd 86       	std	Y+13, r12	; 0x0d
stopDist.next = &oneM;
     8bc:	7e aa       	std	Y+54, r7	; 0x36
     8be:	6d aa       	std	Y+53, r6	; 0x35
oneM.next = &twoM;
     8c0:	8d e4       	ldi	r24, 0x4D	; 77
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8c 0f       	add	r24, r28
     8c6:	9d 1f       	adc	r25, r29
     8c8:	2d 96       	adiw	r28, 0x0d	; 13
     8ca:	9f af       	std	Y+63, r25	; 0x3f
     8cc:	8e af       	std	Y+62, r24	; 0x3e
     8ce:	2d 97       	sbiw	r28, 0x0d	; 13
twoM.next = &threeM;
     8d0:	a3 e6       	ldi	r26, 0x63	; 99
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ac 0f       	add	r26, r28
     8d6:	bd 1f       	adc	r27, r29
     8d8:	a3 96       	adiw	r28, 0x23	; 35
     8da:	bf af       	std	Y+63, r27	; 0x3f
     8dc:	ae af       	std	Y+62, r26	; 0x3e
     8de:	a3 97       	sbiw	r28, 0x23	; 35
threeM.next = NULL;
     8e0:	e9 96       	adiw	r28, 0x39	; 57
     8e2:	1f ae       	std	Y+63, r1	; 0x3f
     8e4:	1e ae       	std	Y+62, r1	; 0x3e
     8e6:	e9 97       	sbiw	r28, 0x39	; 57
//////////////////////////////////////////////////////////////////////////////


// Set MFs
struct mf_type still;
MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     8e8:	0f 2e       	mov	r0, r31
     8ea:	ee 24       	eor	r14, r14
     8ec:	ea 94       	dec	r14
     8ee:	fa e0       	ldi	r31, 0x0A	; 10
     8f0:	ff 2e       	mov	r15, r31
     8f2:	f0 2d       	mov	r31, r0
     8f4:	04 eb       	ldi	r16, 0xB4	; 180
     8f6:	1a e0       	ldi	r17, 0x0A	; 10
     8f8:	24 eb       	ldi	r18, 0xB4	; 180
     8fa:	3a e0       	ldi	r19, 0x0A	; 10
     8fc:	43 eb       	ldi	r20, 0xB3	; 179
     8fe:	5a e0       	ldi	r21, 0x0A	; 10
     900:	64 e9       	ldi	r22, 0x94	; 148
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	8c 96       	adiw	r24, 0x2c	; 44
     906:	33 d5       	rcall	.+2662   	; 0x136e <MATLAB_MF>
struct mf_type low;
MATLAB_MF(&low, "low", 2825, 2830, 2830, 2835);
     908:	5e 01       	movw	r10, r28
     90a:	bf e8       	ldi	r27, 0x8F	; 143
     90c:	ab 0e       	add	r10, r27
     90e:	b1 1c       	adc	r11, r1
     910:	0f 2e       	mov	r0, r31
     912:	f3 e1       	ldi	r31, 0x13	; 19
     914:	ef 2e       	mov	r14, r31
     916:	fb e0       	ldi	r31, 0x0B	; 11
     918:	ff 2e       	mov	r15, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	0e e0       	ldi	r16, 0x0E	; 14
     91e:	1b e0       	ldi	r17, 0x0B	; 11
     920:	2e e0       	ldi	r18, 0x0E	; 14
     922:	3b e0       	ldi	r19, 0x0B	; 11
     924:	49 e0       	ldi	r20, 0x09	; 9
     926:	5b e0       	ldi	r21, 0x0B	; 11
     928:	68 eb       	ldi	r22, 0xB8	; 184
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	c5 01       	movw	r24, r10
     92e:	1f d5       	rcall	.+2622   	; 0x136e <MATLAB_MF>
struct mf_type cruising;
MATLAB_MF(&cruising, "cruising", 2830, 2835, 2835, 2840);
     930:	0f 2e       	mov	r0, r31
     932:	f8 e1       	ldi	r31, 0x18	; 24
     934:	ef 2e       	mov	r14, r31
     936:	fb e0       	ldi	r31, 0x0B	; 11
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	03 e1       	ldi	r16, 0x13	; 19
     93e:	1b e0       	ldi	r17, 0x0B	; 11
     940:	23 e1       	ldi	r18, 0x13	; 19
     942:	3b e0       	ldi	r19, 0x0B	; 11
     944:	4e e0       	ldi	r20, 0x0E	; 14
     946:	5b e0       	ldi	r21, 0x0B	; 11
     948:	6a e9       	ldi	r22, 0x9A	; 154
     94a:	71 e0       	ldi	r23, 0x01	; 1
     94c:	ce 01       	movw	r24, r28
     94e:	8b 55       	subi	r24, 0x5B	; 91
     950:	9f 4f       	sbci	r25, 0xFF	; 255
     952:	0d d5       	rcall	.+2586   	; 0x136e <MATLAB_MF>
struct mf_type medium;
MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     954:	2e 01       	movw	r4, r28
     956:	eb eb       	ldi	r30, 0xBB	; 187
     958:	4e 0e       	add	r4, r30
     95a:	51 1c       	adc	r5, r1
     95c:	0f 2e       	mov	r0, r31
     95e:	f2 e2       	ldi	r31, 0x22	; 34
     960:	ef 2e       	mov	r14, r31
     962:	fb e0       	ldi	r31, 0x0B	; 11
     964:	ff 2e       	mov	r15, r31
     966:	f0 2d       	mov	r31, r0
     968:	08 e1       	ldi	r16, 0x18	; 24
     96a:	1b e0       	ldi	r17, 0x0B	; 11
     96c:	28 e1       	ldi	r18, 0x18	; 24
     96e:	3b e0       	ldi	r19, 0x0B	; 11
     970:	4e e0       	ldi	r20, 0x0E	; 14
     972:	5b e0       	ldi	r21, 0x0B	; 11
     974:	63 ea       	ldi	r22, 0xA3	; 163
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	c2 01       	movw	r24, r4
     97a:	f9 d4       	rcall	.+2546   	; 0x136e <MATLAB_MF>
struct mf_type high;
MATLAB_MF(&high, "high", 2835, 2845, 28545, 2855);
     97c:	0f 2e       	mov	r0, r31
     97e:	f7 e2       	ldi	r31, 0x27	; 39
     980:	ef 2e       	mov	r14, r31
     982:	fb e0       	ldi	r31, 0x0B	; 11
     984:	ff 2e       	mov	r15, r31
     986:	f0 2d       	mov	r31, r0
     988:	01 e8       	ldi	r16, 0x81	; 129
     98a:	1f e6       	ldi	r17, 0x6F	; 111
     98c:	2d e1       	ldi	r18, 0x1D	; 29
     98e:	3b e0       	ldi	r19, 0x0B	; 11
     990:	43 e1       	ldi	r20, 0x13	; 19
     992:	5b e0       	ldi	r21, 0x0B	; 11
     994:	6a ea       	ldi	r22, 0xAA	; 170
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	ce 01       	movw	r24, r28
     99a:	8f 52       	subi	r24, 0x2F	; 47
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	e7 d4       	rcall	.+2510   	; 0x136e <MATLAB_MF>

// Linked list for MFs
speed.membership_functions = &still;
     9a0:	49 e7       	ldi	r20, 0x79	; 121
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	4c 0f       	add	r20, r28
     9a6:	5d 1f       	adc	r21, r29
     9a8:	5e 8f       	std	Y+30, r21	; 0x1e
     9aa:	4d 8f       	std	Y+29, r20	; 0x1d
still.next = &low;
     9ac:	c3 57       	subi	r28, 0x73	; 115
     9ae:	df 4f       	sbci	r29, 0xFF	; 255
     9b0:	b9 82       	std	Y+1, r11	; 0x01
     9b2:	a8 82       	st	Y, r10
     9b4:	cd 58       	subi	r28, 0x8D	; 141
     9b6:	d0 40       	sbci	r29, 0x00	; 0
low.next = &cruising;
     9b8:	e5 ea       	ldi	r30, 0xA5	; 165
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ec 0f       	add	r30, r28
     9be:	fd 1f       	adc	r31, r29
     9c0:	d5 01       	movw	r26, r10
     9c2:	55 96       	adiw	r26, 0x15	; 21
     9c4:	fc 93       	st	X, r31
     9c6:	ee 93       	st	-X, r30
     9c8:	54 97       	sbiw	r26, 0x14	; 20
cruising.next = &medium;
     9ca:	c7 54       	subi	r28, 0x47	; 71
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	59 82       	std	Y+1, r5	; 0x01
     9d0:	48 82       	st	Y, r4
     9d2:	c9 5b       	subi	r28, 0xB9	; 185
     9d4:	d0 40       	sbci	r29, 0x00	; 0
medium.next = &high;
     9d6:	e1 ed       	ldi	r30, 0xD1	; 209
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ec 0f       	add	r30, r28
     9dc:	fd 1f       	adc	r31, r29
     9de:	d2 01       	movw	r26, r4
     9e0:	55 96       	adiw	r26, 0x15	; 21
     9e2:	fc 93       	st	X, r31
     9e4:	ee 93       	st	-X, r30
     9e6:	54 97       	sbiw	r26, 0x14	; 20
high.next = NULL;
     9e8:	cb 51       	subi	r28, 0x1B	; 27
     9ea:	df 4f       	sbci	r29, 0xFF	; 255
     9ec:	19 82       	std	Y+1, r1	; 0x01
     9ee:	18 82       	st	Y, r1
     9f0:	c5 5e       	subi	r28, 0xE5	; 229
     9f2:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF PWM OUTPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type pwm; strcpy(pwm.name, "pwm");
     9f4:	80 e7       	ldi	r24, 0x70	; 112
     9f6:	97 e7       	ldi	r25, 0x77	; 119
     9f8:	ad e6       	ldi	r26, 0x6D	; 109
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	c9 51       	subi	r28, 0x19	; 25
     9fe:	df 4f       	sbci	r29, 0xFF	; 255
     a00:	88 83       	st	Y, r24
     a02:	99 83       	std	Y+1, r25	; 0x01
     a04:	aa 83       	std	Y+2, r26	; 0x02
     a06:	bb 83       	std	Y+3, r27	; 0x03
     a08:	c7 5e       	subi	r28, 0xE7	; 231
     a0a:	d0 40       	sbci	r29, 0x00	; 0

// Set MFs
struct mf_type noSpeed;
MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     a0c:	4e 01       	movw	r8, r28
     a0e:	f7 ef       	ldi	r31, 0xF7	; 247
     a10:	8f 0e       	add	r8, r31
     a12:	91 1c       	adc	r9, r1
     a14:	0f 2e       	mov	r0, r31
     a16:	ee 24       	eor	r14, r14
     a18:	ea 94       	dec	r14
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	ff 2e       	mov	r15, r31
     a1e:	f0 2d       	mov	r31, r0
     a20:	04 eb       	ldi	r16, 0xB4	; 180
     a22:	1a e0       	ldi	r17, 0x0A	; 10
     a24:	24 eb       	ldi	r18, 0xB4	; 180
     a26:	3a e0       	ldi	r19, 0x0A	; 10
     a28:	43 eb       	ldi	r20, 0xB3	; 179
     a2a:	5a e0       	ldi	r21, 0x0A	; 10
     a2c:	6f ea       	ldi	r22, 0xAF	; 175
     a2e:	71 e0       	ldi	r23, 0x01	; 1
     a30:	c4 01       	movw	r24, r8
     a32:	9d d4       	rcall	.+2362   	; 0x136e <MATLAB_MF>
struct mf_type slow;
MATLAB_MF(&slow, "slow", 2825, 2830, 2830, 2835);
     a34:	6e 01       	movw	r12, r28
     a36:	23 ef       	ldi	r18, 0xF3	; 243
     a38:	c2 1a       	sub	r12, r18
     a3a:	2e ef       	ldi	r18, 0xFE	; 254
     a3c:	d2 0a       	sbc	r13, r18
     a3e:	0f 2e       	mov	r0, r31
     a40:	f3 e1       	ldi	r31, 0x13	; 19
     a42:	ef 2e       	mov	r14, r31
     a44:	fb e0       	ldi	r31, 0x0B	; 11
     a46:	ff 2e       	mov	r15, r31
     a48:	f0 2d       	mov	r31, r0
     a4a:	0e e0       	ldi	r16, 0x0E	; 14
     a4c:	1b e0       	ldi	r17, 0x0B	; 11
     a4e:	2e e0       	ldi	r18, 0x0E	; 14
     a50:	3b e0       	ldi	r19, 0x0B	; 11
     a52:	49 e0       	ldi	r20, 0x09	; 9
     a54:	5b e0       	ldi	r21, 0x0B	; 11
     a56:	67 eb       	ldi	r22, 0xB7	; 183
     a58:	71 e0       	ldi	r23, 0x01	; 1
     a5a:	c6 01       	movw	r24, r12
     a5c:	88 d4       	rcall	.+2320   	; 0x136e <MATLAB_MF>
struct mf_type cruise;
MATLAB_MF(&cruise, "cruise", 2830, 2835, 2835, 2840);
     a5e:	1e 01       	movw	r2, r28
     a60:	4d ed       	ldi	r20, 0xDD	; 221
     a62:	24 1a       	sub	r2, r20
     a64:	4e ef       	ldi	r20, 0xFE	; 254
     a66:	34 0a       	sbc	r3, r20
     a68:	0f 2e       	mov	r0, r31
     a6a:	f8 e1       	ldi	r31, 0x18	; 24
     a6c:	ef 2e       	mov	r14, r31
     a6e:	fb e0       	ldi	r31, 0x0B	; 11
     a70:	ff 2e       	mov	r15, r31
     a72:	f0 2d       	mov	r31, r0
     a74:	03 e1       	ldi	r16, 0x13	; 19
     a76:	1b e0       	ldi	r17, 0x0B	; 11
     a78:	23 e1       	ldi	r18, 0x13	; 19
     a7a:	3b e0       	ldi	r19, 0x0B	; 11
     a7c:	4e e0       	ldi	r20, 0x0E	; 14
     a7e:	5b e0       	ldi	r21, 0x0B	; 11
     a80:	6c eb       	ldi	r22, 0xBC	; 188
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	c1 01       	movw	r24, r2
     a86:	73 d4       	rcall	.+2278   	; 0x136e <MATLAB_MF>
struct mf_type medHigh;
MATLAB_MF(&medHigh, "medHigh", 2830, 2840, 2840, 2850);
     a88:	0f 2e       	mov	r0, r31
     a8a:	f2 e2       	ldi	r31, 0x22	; 34
     a8c:	ef 2e       	mov	r14, r31
     a8e:	fb e0       	ldi	r31, 0x0B	; 11
     a90:	ff 2e       	mov	r15, r31
     a92:	f0 2d       	mov	r31, r0
     a94:	08 e1       	ldi	r16, 0x18	; 24
     a96:	1b e0       	ldi	r17, 0x0B	; 11
     a98:	28 e1       	ldi	r18, 0x18	; 24
     a9a:	3b e0       	ldi	r19, 0x0B	; 11
     a9c:	4e e0       	ldi	r20, 0x0E	; 14
     a9e:	5b e0       	ldi	r21, 0x0B	; 11
     aa0:	63 ec       	ldi	r22, 0xC3	; 195
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	ce 01       	movw	r24, r28
     aa6:	87 5c       	subi	r24, 0xC7	; 199
     aa8:	9e 4f       	sbci	r25, 0xFE	; 254
     aaa:	61 d4       	rcall	.+2242   	; 0x136e <MATLAB_MF>
struct mf_type max;
MATLAB_MF(&max, "max", 2835, 2845, 28545, 2855);
     aac:	0f 2e       	mov	r0, r31
     aae:	f7 e2       	ldi	r31, 0x27	; 39
     ab0:	ef 2e       	mov	r14, r31
     ab2:	fb e0       	ldi	r31, 0x0B	; 11
     ab4:	ff 2e       	mov	r15, r31
     ab6:	f0 2d       	mov	r31, r0
     ab8:	01 e8       	ldi	r16, 0x81	; 129
     aba:	1f e6       	ldi	r17, 0x6F	; 111
     abc:	2d e1       	ldi	r18, 0x1D	; 29
     abe:	3b e0       	ldi	r19, 0x0B	; 11
     ac0:	43 e1       	ldi	r20, 0x13	; 19
     ac2:	5b e0       	ldi	r21, 0x0B	; 11
     ac4:	6b ec       	ldi	r22, 0xCB	; 203
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	ce 01       	movw	r24, r28
     aca:	81 5b       	subi	r24, 0xB1	; 177
     acc:	9e 4f       	sbci	r25, 0xFE	; 254
     ace:	4f d4       	rcall	.+2206   	; 0x136e <MATLAB_MF>

// Linked list for MFs
pwm.membership_functions = &noSpeed;
     ad0:	cd 50       	subi	r28, 0x0D	; 13
     ad2:	df 4f       	sbci	r29, 0xFF	; 255
     ad4:	99 82       	std	Y+1, r9	; 0x01
     ad6:	88 82       	st	Y, r8
     ad8:	c3 5f       	subi	r28, 0xF3	; 243
     ada:	d0 40       	sbci	r29, 0x00	; 0
noSpeed.next = &slow;
     adc:	d4 01       	movw	r26, r8
     ade:	55 96       	adiw	r26, 0x15	; 21
     ae0:	dc 92       	st	X, r13
     ae2:	ce 92       	st	-X, r12
     ae4:	54 97       	sbiw	r26, 0x14	; 20
slow.next = &cruise;
     ae6:	f6 01       	movw	r30, r12
     ae8:	35 8a       	std	Z+21, r3	; 0x15
     aea:	24 8a       	std	Z+20, r2	; 0x14
cruise.next = &medHigh;
     aec:	e9 e3       	ldi	r30, 0x39	; 57
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	ec 0f       	add	r30, r28
     af2:	fd 1f       	adc	r31, r29
     af4:	d1 01       	movw	r26, r2
     af6:	55 96       	adiw	r26, 0x15	; 21
     af8:	fc 93       	st	X, r31
     afa:	ee 93       	st	-X, r30
     afc:	54 97       	sbiw	r26, 0x14	; 20
medHigh.next = &max;
     afe:	4f e4       	ldi	r20, 0x4F	; 79
     b00:	51 e0       	ldi	r21, 0x01	; 1
     b02:	4c 0f       	add	r20, r28
     b04:	5d 1f       	adc	r21, r29
     b06:	c3 5b       	subi	r28, 0xB3	; 179
     b08:	de 4f       	sbci	r29, 0xFE	; 254
     b0a:	59 83       	std	Y+1, r21	; 0x01
     b0c:	48 83       	st	Y, r20
     b0e:	cd 54       	subi	r28, 0x4D	; 77
     b10:	d1 40       	sbci	r29, 0x01	; 1
max.next = NULL;
     b12:	cd 59       	subi	r28, 0x9D	; 157
     b14:	de 4f       	sbci	r29, 0xFE	; 254
     b16:	19 82       	std	Y+1, r1	; 0x01
     b18:	18 82       	st	Y, r1
     b1a:	c3 56       	subi	r28, 0x63	; 99
     b1c:	d1 40       	sbci	r29, 0x01	; 1


// SETTING I/O LINKED LISTS
//////////////////////////////////////////////////////////////////////////////

System_Inputs = &distance;
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	90 93 1d 03 	sts	0x031D, r25
     b26:	80 93 1c 03 	sts	0x031C, r24
distance.next = &speed;
     b2a:	40 96       	adiw	r24, 0x10	; 16
     b2c:	98 8b       	std	Y+16, r25	; 0x10
     b2e:	8f 87       	std	Y+15, r24	; 0x0f
speed.next = NULL;
     b30:	18 a2       	std	Y+32, r1	; 0x20
     b32:	1f 8e       	std	Y+31, r1	; 0x1f

System_Outputs = &pwm;
     b34:	87 ee       	ldi	r24, 0xE7	; 231
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	8c 0f       	add	r24, r28
     b3a:	9d 1f       	adc	r25, r29
     b3c:	90 93 1b 03 	sts	0x031B, r25
     b40:	80 93 1a 03 	sts	0x031A, r24
pwm.next = NULL;
     b44:	cb 50       	subi	r28, 0x0B	; 11
     b46:	df 4f       	sbci	r29, 0xFF	; 255
     b48:	19 82       	std	Y+1, r1	; 0x01
     b4a:	18 82       	st	Y, r1
     b4c:	c5 5f       	subi	r28, 0xF5	; 245
     b4e:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF RULES AND LISTS
//////////////////////////////////////////////////////////////////////////////

struct rule_type rule1; Rule_Base = &rule1;
     b50:	9e 01       	movw	r18, r28
     b52:	2b 59       	subi	r18, 0x9B	; 155
     b54:	3e 4f       	sbci	r19, 0xFE	; 254
     b56:	30 93 1f 03 	sts	0x031F, r19
     b5a:	20 93 1e 03 	sts	0x031E, r18
struct rule_type rule2; rule1.next = &rule2;
     b5e:	8c 57       	subi	r24, 0x7C	; 124
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	d9 01       	movw	r26, r18
     b64:	15 96       	adiw	r26, 0x05	; 5
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule3; rule2.next = &rule3;
     b6c:	1c 96       	adiw	r26, 0x0c	; 12
     b6e:	fc 01       	movw	r30, r24
     b70:	b5 83       	std	Z+5, r27	; 0x05
     b72:	a4 83       	std	Z+4, r26	; 0x04
struct rule_type rule4; rule3.next = &rule4;
     b74:	47 e7       	ldi	r20, 0x77	; 119
     b76:	51 e0       	ldi	r21, 0x01	; 1
     b78:	4c 0f       	add	r20, r28
     b7a:	5d 1f       	adc	r21, r29
     b7c:	15 96       	adiw	r26, 0x05	; 5
     b7e:	5c 93       	st	X, r21
     b80:	4e 93       	st	-X, r20
     b82:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule5; rule4.next = &rule5;
     b84:	8e 01       	movw	r16, r28
     b86:	03 58       	subi	r16, 0x83	; 131
     b88:	1e 4f       	sbci	r17, 0xFE	; 254
     b8a:	c5 58       	subi	r28, 0x85	; 133
     b8c:	de 4f       	sbci	r29, 0xFE	; 254
     b8e:	19 83       	std	Y+1, r17	; 0x01
     b90:	08 83       	st	Y, r16
     b92:	cb 57       	subi	r28, 0x7B	; 123
     b94:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule6; rule5.next = &rule6;
     b96:	7e 01       	movw	r14, r28
     b98:	5d e7       	ldi	r21, 0x7D	; 125
     b9a:	e5 1a       	sub	r14, r21
     b9c:	5e ef       	ldi	r21, 0xFE	; 254
     b9e:	f5 0a       	sbc	r15, r21
     ba0:	f8 01       	movw	r30, r16
     ba2:	f5 82       	std	Z+5, r15	; 0x05
     ba4:	e4 82       	std	Z+4, r14	; 0x04
struct rule_type rule7; rule6.next = &rule7;
     ba6:	49 e8       	ldi	r20, 0x89	; 137
     ba8:	51 e0       	ldi	r21, 0x01	; 1
     baa:	4c 0f       	add	r20, r28
     bac:	5d 1f       	adc	r21, r29
     bae:	f7 01       	movw	r30, r14
     bb0:	55 83       	std	Z+5, r21	; 0x05
     bb2:	44 83       	std	Z+4, r20	; 0x04
struct rule_type rule8; rule7.next = &rule8;
     bb4:	ef e8       	ldi	r30, 0x8F	; 143
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	ec 0f       	add	r30, r28
     bba:	fd 1f       	adc	r31, r29
     bbc:	c3 57       	subi	r28, 0x73	; 115
     bbe:	de 4f       	sbci	r29, 0xFE	; 254
     bc0:	f9 83       	std	Y+1, r31	; 0x01
     bc2:	e8 83       	st	Y, r30
     bc4:	cd 58       	subi	r28, 0x8D	; 141
     bc6:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule9; rule8.next = &rule9;
     bc8:	45 e9       	ldi	r20, 0x95	; 149
     bca:	51 e0       	ldi	r21, 0x01	; 1
     bcc:	4c 0f       	add	r20, r28
     bce:	5d 1f       	adc	r21, r29
     bd0:	cd 56       	subi	r28, 0x6D	; 109
     bd2:	de 4f       	sbci	r29, 0xFE	; 254
     bd4:	59 83       	std	Y+1, r21	; 0x01
     bd6:	48 83       	st	Y, r20
     bd8:	c3 59       	subi	r28, 0x93	; 147
     bda:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule10; rule9.next = &rule10;
     bdc:	eb e9       	ldi	r30, 0x9B	; 155
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	c7 56       	subi	r28, 0x67	; 103
     be6:	de 4f       	sbci	r29, 0xFE	; 254
     be8:	f9 83       	std	Y+1, r31	; 0x01
     bea:	e8 83       	st	Y, r30
     bec:	c9 59       	subi	r28, 0x99	; 153
     bee:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule11; rule10.next = &rule11;
     bf0:	41 ea       	ldi	r20, 0xA1	; 161
     bf2:	51 e0       	ldi	r21, 0x01	; 1
     bf4:	4c 0f       	add	r20, r28
     bf6:	5d 1f       	adc	r21, r29
     bf8:	c1 56       	subi	r28, 0x61	; 97
     bfa:	de 4f       	sbci	r29, 0xFE	; 254
     bfc:	59 83       	std	Y+1, r21	; 0x01
     bfe:	48 83       	st	Y, r20
     c00:	cf 59       	subi	r28, 0x9F	; 159
     c02:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     c04:	e7 ea       	ldi	r30, 0xA7	; 167
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	ec 0f       	add	r30, r28
     c0a:	fd 1f       	adc	r31, r29
     c0c:	cb 55       	subi	r28, 0x5B	; 91
     c0e:	de 4f       	sbci	r29, 0xFE	; 254
     c10:	f9 83       	std	Y+1, r31	; 0x01
     c12:	e8 83       	st	Y, r30
     c14:	c5 5a       	subi	r28, 0xA5	; 165
     c16:	d1 40       	sbci	r29, 0x01	; 1
     c18:	c5 55       	subi	r28, 0x55	; 85
     c1a:	de 4f       	sbci	r29, 0xFE	; 254
     c1c:	19 82       	std	Y+1, r1	; 0x01
     c1e:	18 82       	st	Y, r1
     c20:	cb 5a       	subi	r28, 0xAB	; 171
     c22:	d1 40       	sbci	r29, 0x01	; 1
// RULE SETUP
//////////////////////////////////////////////////////////////////////////////

// if distance is stopDist then pwm is noSpeed
struct rule_element_type if11, then1;
rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c24:	be 01       	movw	r22, r28
     c26:	63 55       	subi	r22, 0x53	; 83
     c28:	7e 4f       	sbci	r23, 0xFE	; 254
     c2a:	f9 01       	movw	r30, r18
     c2c:	71 83       	std	Z+1, r23	; 0x01
     c2e:	60 83       	st	Z, r22
     c30:	fb 01       	movw	r30, r22
     c32:	13 82       	std	Z+3, r1	; 0x03
     c34:	12 82       	std	Z+2, r1	; 0x02
     c36:	40 5f       	subi	r20, 0xF0	; 240
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	f9 01       	movw	r30, r18
     c3c:	53 83       	std	Z+3, r21	; 0x03
     c3e:	42 83       	std	Z+2, r20	; 0x02
     c40:	fa 01       	movw	r30, r20
     c42:	13 82       	std	Z+3, r1	; 0x03
     c44:	12 82       	std	Z+2, r1	; 0x02
if11.value = &stopDist.value; then1.value = &noSpeed.value;
     c46:	2a 53       	subi	r18, 0x3A	; 58
     c48:	31 40       	sbci	r19, 0x01	; 1
     c4a:	fb 01       	movw	r30, r22
     c4c:	31 83       	std	Z+1, r19	; 0x01
     c4e:	20 83       	st	Z, r18
     c50:	fa e0       	ldi	r31, 0x0A	; 10
     c52:	8f 0e       	add	r8, r31
     c54:	91 1c       	adc	r9, r1
     c56:	fa 01       	movw	r30, r20
     c58:	91 82       	std	Z+1, r9	; 0x01
     c5a:	80 82       	st	Z, r8

// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
struct rule_element_type if21, if22, then2;
rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     c5c:	68 5f       	subi	r22, 0xF8	; 248
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	fc 01       	movw	r30, r24
     c62:	71 83       	std	Z+1, r23	; 0x01
     c64:	60 83       	st	Z, r22
     c66:	48 5f       	subi	r20, 0xF8	; 248
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	fb 01       	movw	r30, r22
     c6c:	53 83       	std	Z+3, r21	; 0x03
     c6e:	42 83       	std	Z+2, r20	; 0x02
     c70:	fa 01       	movw	r30, r20
     c72:	13 82       	std	Z+3, r1	; 0x03
     c74:	12 82       	std	Z+2, r1	; 0x02
     c76:	2e 56       	subi	r18, 0x6E	; 110
     c78:	3e 4f       	sbci	r19, 0xFE	; 254
     c7a:	fc 01       	movw	r30, r24
     c7c:	33 83       	std	Z+3, r19	; 0x03
     c7e:	22 83       	std	Z+2, r18	; 0x02
     c80:	f9 01       	movw	r30, r18
     c82:	13 82       	std	Z+3, r1	; 0x03
     c84:	12 82       	std	Z+2, r1	; 0x02
if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     c86:	fa e0       	ldi	r31, 0x0A	; 10
     c88:	af 0e       	add	r10, r31
     c8a:	b1 1c       	adc	r11, r1
     c8c:	fb 01       	movw	r30, r22
     c8e:	b1 82       	std	Z+1, r11	; 0x01
     c90:	a0 82       	st	Z, r10
     c92:	fa e0       	ldi	r31, 0x0A	; 10
     c94:	6f 0e       	add	r6, r31
     c96:	71 1c       	adc	r7, r1
     c98:	fa 01       	movw	r30, r20
     c9a:	71 82       	std	Z+1, r7	; 0x01
     c9c:	60 82       	st	Z, r6
     c9e:	fa e0       	ldi	r31, 0x0A	; 10
     ca0:	cf 0e       	add	r12, r31
     ca2:	d1 1c       	adc	r13, r1
     ca4:	f9 01       	movw	r30, r18
     ca6:	d1 82       	std	Z+1, r13	; 0x01
     ca8:	c0 82       	st	Z, r12

// if speed is medium and distance is oneM then speed is cruise
struct rule_element_type if31, if32, then3;
rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     caa:	48 5f       	subi	r20, 0xF8	; 248
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	11 96       	adiw	r26, 0x01	; 1
     cb0:	5c 93       	st	X, r21
     cb2:	4e 93       	st	-X, r20
     cb4:	28 5f       	subi	r18, 0xF8	; 248
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	fa 01       	movw	r30, r20
     cba:	33 83       	std	Z+3, r19	; 0x03
     cbc:	22 83       	std	Z+2, r18	; 0x02
     cbe:	f9 01       	movw	r30, r18
     cc0:	13 82       	std	Z+3, r1	; 0x03
     cc2:	12 82       	std	Z+2, r1	; 0x02
     cc4:	82 5a       	subi	r24, 0xA2	; 162
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	dc 01       	movw	r26, r24
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	1c 92       	st	X, r1
     cd6:	1e 92       	st	-X, r1
     cd8:	12 97       	sbiw	r26, 0x02	; 2
if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     cda:	ba e0       	ldi	r27, 0x0A	; 10
     cdc:	4b 0e       	add	r4, r27
     cde:	51 1c       	adc	r5, r1
     ce0:	fa 01       	movw	r30, r20
     ce2:	51 82       	std	Z+1, r5	; 0x01
     ce4:	40 82       	st	Z, r4
     ce6:	d9 01       	movw	r26, r18
     ce8:	6d 92       	st	X+, r6
     cea:	7c 92       	st	X, r7
     cec:	ba e0       	ldi	r27, 0x0A	; 10
     cee:	2b 0e       	add	r2, r27
     cf0:	31 1c       	adc	r3, r1
     cf2:	fc 01       	movw	r30, r24
     cf4:	31 82       	std	Z+1, r3	; 0x01
     cf6:	20 82       	st	Z, r2

// if speed is high and distance is oneM then speed is cruise
struct rule_element_type if41, if42, then4;
rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     cf8:	28 5f       	subi	r18, 0xF8	; 248
     cfa:	3f 4f       	sbci	r19, 0xFF	; 255
     cfc:	c9 58       	subi	r28, 0x89	; 137
     cfe:	de 4f       	sbci	r29, 0xFE	; 254
     d00:	39 83       	std	Y+1, r19	; 0x01
     d02:	28 83       	st	Y, r18
     d04:	c7 57       	subi	r28, 0x77	; 119
     d06:	d1 40       	sbci	r29, 0x01	; 1
     d08:	08 96       	adiw	r24, 0x08	; 8
     d0a:	d9 01       	movw	r26, r18
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	fc 01       	movw	r30, r24
     d16:	13 82       	std	Z+3, r1	; 0x03
     d18:	12 82       	std	Z+2, r1	; 0x02
     d1a:	18 96       	adiw	r26, 0x08	; 8
     d1c:	c7 58       	subi	r28, 0x87	; 135
     d1e:	de 4f       	sbci	r29, 0xFE	; 254
     d20:	b9 83       	std	Y+1, r27	; 0x01
     d22:	a8 83       	st	Y, r26
     d24:	c9 57       	subi	r28, 0x79	; 121
     d26:	d1 40       	sbci	r29, 0x01	; 1
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	1c 92       	st	X, r1
     d2c:	1e 92       	st	-X, r1
     d2e:	12 97       	sbiw	r26, 0x02	; 2
if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d30:	41 ed       	ldi	r20, 0xD1	; 209
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	4c 0f       	add	r20, r28
     d36:	5d 1f       	adc	r21, r29
     d38:	46 5f       	subi	r20, 0xF6	; 246
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	f9 01       	movw	r30, r18
     d3e:	51 83       	std	Z+1, r21	; 0x01
     d40:	40 83       	st	Z, r20
     d42:	fc 01       	movw	r30, r24
     d44:	71 82       	std	Z+1, r7	; 0x01
     d46:	60 82       	st	Z, r6
     d48:	2d 92       	st	X+, r2
     d4a:	3c 92       	st	X, r3

// if speed is still and distance is oneM then speed is slow
struct rule_element_type if51, if52, then5;
rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     d4c:	08 96       	adiw	r24, 0x08	; 8
     d4e:	d8 01       	movw	r26, r16
     d50:	8d 93       	st	X+, r24
     d52:	9c 93       	st	X, r25
     d54:	68 5d       	subi	r22, 0xD8	; 216
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	fc 01       	movw	r30, r24
     d5a:	73 83       	std	Z+3, r23	; 0x03
     d5c:	62 83       	std	Z+2, r22	; 0x02
     d5e:	db 01       	movw	r26, r22
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	1c 92       	st	X, r1
     d64:	1e 92       	st	-X, r1
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	38 96       	adiw	r30, 0x08	; 8
     d6a:	d8 01       	movw	r26, r16
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	fc 93       	st	X, r31
     d70:	ee 93       	st	-X, r30
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	13 82       	std	Z+3, r1	; 0x03
     d76:	12 82       	std	Z+2, r1	; 0x02
if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     d78:	29 e7       	ldi	r18, 0x79	; 121
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	2c 0f       	add	r18, r28
     d7e:	3d 1f       	adc	r19, r29
     d80:	26 5f       	subi	r18, 0xF6	; 246
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	dc 01       	movw	r26, r24
     d86:	2d 93       	st	X+, r18
     d88:	3c 93       	st	X, r19
     d8a:	db 01       	movw	r26, r22
     d8c:	6d 92       	st	X+, r6
     d8e:	7c 92       	st	X, r7
     d90:	d1 82       	std	Z+1, r13	; 0x01
     d92:	c0 82       	st	Z, r12

// if speed is cruising and distance is oneM then speed is slow
struct rule_element_type if61, if62, then6;
rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     d94:	0c 96       	adiw	r24, 0x0c	; 12
     d96:	f7 01       	movw	r30, r14
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	04 59       	subi	r16, 0x94	; 148
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	dc 01       	movw	r26, r24
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	1c 93       	st	X, r17
     da6:	0e 93       	st	-X, r16
     da8:	12 97       	sbiw	r26, 0x02	; 2
     daa:	f8 01       	movw	r30, r16
     dac:	13 82       	std	Z+3, r1	; 0x03
     dae:	12 82       	std	Z+2, r1	; 0x02
     db0:	34 96       	adiw	r30, 0x04	; 4
     db2:	d7 01       	movw	r26, r14
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	fc 93       	st	X, r31
     db8:	ee 93       	st	-X, r30
     dba:	12 97       	sbiw	r26, 0x02	; 2
     dbc:	13 82       	std	Z+3, r1	; 0x03
     dbe:	12 82       	std	Z+2, r1	; 0x02
if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     dc0:	65 ea       	ldi	r22, 0xA5	; 165
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	6c 0f       	add	r22, r28
     dc6:	7d 1f       	adc	r23, r29
     dc8:	66 5f       	subi	r22, 0xF6	; 246
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	dc 01       	movw	r26, r24
     dce:	6d 93       	st	X+, r22
     dd0:	7c 93       	st	X, r23
     dd2:	d8 01       	movw	r26, r16
     dd4:	6d 92       	st	X+, r6
     dd6:	7c 92       	st	X, r7
     dd8:	d1 82       	std	Z+1, r13	; 0x01
     dda:	c0 82       	st	Z, r12

// if speed is low and distance is twoM then speed is cruise
struct rule_element_type if71, if72, then7;
rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     ddc:	0c 96       	adiw	r24, 0x0c	; 12
     dde:	c7 57       	subi	r28, 0x77	; 119
     de0:	de 4f       	sbci	r29, 0xFE	; 254
     de2:	99 83       	std	Y+1, r25	; 0x01
     de4:	88 83       	st	Y, r24
     de6:	c9 58       	subi	r28, 0x89	; 137
     de8:	d1 40       	sbci	r29, 0x01	; 1
     dea:	04 5f       	subi	r16, 0xF4	; 244
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	fc 01       	movw	r30, r24
     df0:	13 83       	std	Z+3, r17	; 0x03
     df2:	02 83       	std	Z+2, r16	; 0x02
     df4:	d8 01       	movw	r26, r16
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	1c 92       	st	X, r1
     dfa:	1e 92       	st	-X, r1
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	38 96       	adiw	r30, 0x08	; 8
     e00:	c5 57       	subi	r28, 0x75	; 117
     e02:	de 4f       	sbci	r29, 0xFE	; 254
     e04:	f9 83       	std	Y+1, r31	; 0x01
     e06:	e8 83       	st	Y, r30
     e08:	cb 58       	subi	r28, 0x8B	; 139
     e0a:	d1 40       	sbci	r29, 0x01	; 1
     e0c:	13 82       	std	Z+3, r1	; 0x03
     e0e:	12 82       	std	Z+2, r1	; 0x02
if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     e10:	dc 01       	movw	r26, r24
     e12:	ad 92       	st	X+, r10
     e14:	bc 92       	st	X, r11
     e16:	8d e4       	ldi	r24, 0x4D	; 77
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	8c 0f       	add	r24, r28
     e1c:	9d 1f       	adc	r25, r29
     e1e:	0a 96       	adiw	r24, 0x0a	; 10
     e20:	d8 01       	movw	r26, r16
     e22:	8d 93       	st	X+, r24
     e24:	9c 93       	st	X, r25
     e26:	31 82       	std	Z+1, r3	; 0x01
     e28:	20 82       	st	Z, r2

// if speed is medium and distance is twoM then speed is medHigh
struct rule_element_type if81, if82, then8;
rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e2a:	08 5f       	subi	r16, 0xF8	; 248
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	c1 57       	subi	r28, 0x71	; 113
     e30:	de 4f       	sbci	r29, 0xFE	; 254
     e32:	19 83       	std	Y+1, r17	; 0x01
     e34:	08 83       	st	Y, r16
     e36:	cf 58       	subi	r28, 0x8F	; 143
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	7e 01       	movw	r14, r28
     e3c:	bf ef       	ldi	r27, 0xFF	; 255
     e3e:	eb 1a       	sub	r14, r27
     e40:	bd ef       	ldi	r27, 0xFD	; 253
     e42:	fb 0a       	sbc	r15, r27
     e44:	f8 01       	movw	r30, r16
     e46:	f3 82       	std	Z+3, r15	; 0x03
     e48:	e2 82       	std	Z+2, r14	; 0x02
     e4a:	d7 01       	movw	r26, r14
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	1c 92       	st	X, r1
     e50:	1e 92       	st	-X, r1
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	14 96       	adiw	r26, 0x04	; 4
     e56:	cf 56       	subi	r28, 0x6F	; 111
     e58:	de 4f       	sbci	r29, 0xFE	; 254
     e5a:	b9 83       	std	Y+1, r27	; 0x01
     e5c:	a8 83       	st	Y, r26
     e5e:	c1 59       	subi	r28, 0x91	; 145
     e60:	d1 40       	sbci	r29, 0x01	; 1
     e62:	13 96       	adiw	r26, 0x03	; 3
     e64:	1c 92       	st	X, r1
     e66:	1e 92       	st	-X, r1
     e68:	12 97       	sbiw	r26, 0x02	; 2
if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     e6a:	51 82       	std	Z+1, r5	; 0x01
     e6c:	40 82       	st	Z, r4
     e6e:	f7 01       	movw	r30, r14
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	0f 2e       	mov	r0, r31
     e76:	f9 e3       	ldi	r31, 0x39	; 57
     e78:	cf 2e       	mov	r12, r31
     e7a:	dd 24       	eor	r13, r13
     e7c:	d3 94       	inc	r13
     e7e:	f0 2d       	mov	r31, r0
     e80:	cc 0e       	add	r12, r28
     e82:	dd 1e       	adc	r13, r29
     e84:	fa e0       	ldi	r31, 0x0A	; 10
     e86:	cf 0e       	add	r12, r31
     e88:	d1 1c       	adc	r13, r1
     e8a:	cd 92       	st	X+, r12
     e8c:	dc 92       	st	X, r13

// if speed is high and distance is twoM then speed is medHigh
struct rule_element_type if91, if92, then9;
rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     e8e:	7e 01       	movw	r14, r28
     e90:	a7 ef       	ldi	r26, 0xF7	; 247
     e92:	ea 1a       	sub	r14, r26
     e94:	ad ef       	ldi	r26, 0xFD	; 253
     e96:	fa 0a       	sbc	r15, r26
     e98:	cb 56       	subi	r28, 0x6B	; 107
     e9a:	de 4f       	sbci	r29, 0xFE	; 254
     e9c:	f9 82       	std	Y+1, r15	; 0x01
     e9e:	e8 82       	st	Y, r14
     ea0:	c5 59       	subi	r28, 0x95	; 149
     ea2:	d1 40       	sbci	r29, 0x01	; 1
     ea4:	00 5f       	subi	r16, 0xF0	; 240
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	f7 01       	movw	r30, r14
     eaa:	13 83       	std	Z+3, r17	; 0x03
     eac:	02 83       	std	Z+2, r16	; 0x02
     eae:	d8 01       	movw	r26, r16
     eb0:	13 96       	adiw	r26, 0x03	; 3
     eb2:	1c 92       	st	X, r1
     eb4:	1e 92       	st	-X, r1
     eb6:	12 97       	sbiw	r26, 0x02	; 2
     eb8:	14 96       	adiw	r26, 0x04	; 4
     eba:	c9 56       	subi	r28, 0x69	; 105
     ebc:	de 4f       	sbci	r29, 0xFE	; 254
     ebe:	b9 83       	std	Y+1, r27	; 0x01
     ec0:	a8 83       	st	Y, r26
     ec2:	c7 59       	subi	r28, 0x97	; 151
     ec4:	d1 40       	sbci	r29, 0x01	; 1
     ec6:	13 96       	adiw	r26, 0x03	; 3
     ec8:	1c 92       	st	X, r1
     eca:	1e 92       	st	-X, r1
     ecc:	12 97       	sbiw	r26, 0x02	; 2
if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     ece:	51 83       	std	Z+1, r21	; 0x01
     ed0:	40 83       	st	Z, r20
     ed2:	f8 01       	movw	r30, r16
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	cd 92       	st	X+, r12
     eda:	dc 92       	st	X, r13

// if speed is still and distance is twoM then speed is cruise
struct rule_element_type if101, if102, then10;
rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     edc:	08 5f       	subi	r16, 0xF8	; 248
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	c5 56       	subi	r28, 0x65	; 101
     ee2:	de 4f       	sbci	r29, 0xFE	; 254
     ee4:	19 83       	std	Y+1, r17	; 0x01
     ee6:	08 83       	st	Y, r16
     ee8:	cb 59       	subi	r28, 0x9B	; 155
     eea:	d1 40       	sbci	r29, 0x01	; 1
     eec:	42 5c       	subi	r20, 0xC2	; 194
     eee:	5e 4f       	sbci	r21, 0xFE	; 254
     ef0:	d8 01       	movw	r26, r16
     ef2:	13 96       	adiw	r26, 0x03	; 3
     ef4:	5c 93       	st	X, r21
     ef6:	4e 93       	st	-X, r20
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	fa 01       	movw	r30, r20
     efc:	13 82       	std	Z+3, r1	; 0x03
     efe:	12 82       	std	Z+2, r1	; 0x02
     f00:	18 96       	adiw	r26, 0x08	; 8
     f02:	c3 56       	subi	r28, 0x63	; 99
     f04:	de 4f       	sbci	r29, 0xFE	; 254
     f06:	b9 83       	std	Y+1, r27	; 0x01
     f08:	a8 83       	st	Y, r26
     f0a:	cd 59       	subi	r28, 0x9D	; 157
     f0c:	d1 40       	sbci	r29, 0x01	; 1
     f0e:	13 96       	adiw	r26, 0x03	; 3
     f10:	1c 92       	st	X, r1
     f12:	1e 92       	st	-X, r1
     f14:	12 97       	sbiw	r26, 0x02	; 2
if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     f16:	f8 01       	movw	r30, r16
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	fa 01       	movw	r30, r20
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	2d 92       	st	X+, r2
     f24:	3c 92       	st	X, r3

// if speed is cruising and distance is twoM then speed is medHigh
struct rule_element_type if111, if112, then11;
rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f26:	48 5f       	subi	r20, 0xF8	; 248
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	cf 55       	subi	r28, 0x5F	; 95
     f2c:	de 4f       	sbci	r29, 0xFE	; 254
     f2e:	59 83       	std	Y+1, r21	; 0x01
     f30:	48 83       	st	Y, r20
     f32:	c1 5a       	subi	r28, 0xA1	; 161
     f34:	d1 40       	sbci	r29, 0x01	; 1
     f36:	2e 55       	subi	r18, 0x5E	; 94
     f38:	3e 4f       	sbci	r19, 0xFE	; 254
     f3a:	da 01       	movw	r26, r20
     f3c:	13 96       	adiw	r26, 0x03	; 3
     f3e:	3c 93       	st	X, r19
     f40:	2e 93       	st	-X, r18
     f42:	12 97       	sbiw	r26, 0x02	; 2
     f44:	f9 01       	movw	r30, r18
     f46:	13 82       	std	Z+3, r1	; 0x03
     f48:	12 82       	std	Z+2, r1	; 0x02
     f4a:	18 96       	adiw	r26, 0x08	; 8
     f4c:	cd 55       	subi	r28, 0x5D	; 93
     f4e:	de 4f       	sbci	r29, 0xFE	; 254
     f50:	b9 83       	std	Y+1, r27	; 0x01
     f52:	a8 83       	st	Y, r26
     f54:	c3 5a       	subi	r28, 0xA3	; 163
     f56:	d1 40       	sbci	r29, 0x01	; 1
     f58:	13 96       	adiw	r26, 0x03	; 3
     f5a:	1c 92       	st	X, r1
     f5c:	1e 92       	st	-X, r1
     f5e:	12 97       	sbiw	r26, 0x02	; 2
if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     f60:	fa 01       	movw	r30, r20
     f62:	71 83       	std	Z+1, r23	; 0x01
     f64:	60 83       	st	Z, r22
     f66:	f9 01       	movw	r30, r18
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	dc 92       	st	X, r13
     f70:	ce 92       	st	-X, r12

// if distance is threeM then speed is max
struct rule_element_type if121, then12;
rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     f72:	14 96       	adiw	r26, 0x04	; 4
     f74:	c9 55       	subi	r28, 0x59	; 89
     f76:	de 4f       	sbci	r29, 0xFE	; 254
     f78:	b9 83       	std	Y+1, r27	; 0x01
     f7a:	a8 83       	st	Y, r26
     f7c:	c7 5a       	subi	r28, 0xA7	; 167
     f7e:	d1 40       	sbci	r29, 0x01	; 1
     f80:	13 96       	adiw	r26, 0x03	; 3
     f82:	1c 92       	st	X, r1
     f84:	1e 92       	st	-X, r1
     f86:	12 97       	sbiw	r26, 0x02	; 2
     f88:	3c 96       	adiw	r30, 0x0c	; 12
     f8a:	c7 55       	subi	r28, 0x57	; 87
     f8c:	de 4f       	sbci	r29, 0xFE	; 254
     f8e:	f9 83       	std	Y+1, r31	; 0x01
     f90:	e8 83       	st	Y, r30
     f92:	c9 5a       	subi	r28, 0xA9	; 169
     f94:	d1 40       	sbci	r29, 0x01	; 1
     f96:	13 82       	std	Z+3, r1	; 0x03
     f98:	12 82       	std	Z+2, r1	; 0x02
if121.value = &threeM.value; then12.value = &max.value;
     f9a:	83 e6       	ldi	r24, 0x63	; 99
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8c 0f       	add	r24, r28
     fa0:	9d 1f       	adc	r25, r29
     fa2:	0a 96       	adiw	r24, 0x0a	; 10
     fa4:	8d 93       	st	X+, r24
     fa6:	9c 93       	st	X, r25
     fa8:	8f e4       	ldi	r24, 0x4F	; 79
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	8c 0f       	add	r24, r28
     fae:	9d 1f       	adc	r25, r29
     fb0:	0a 96       	adiw	r24, 0x0a	; 10
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24


// EXECUTING FUZZY LOGIC & OUTPUT VALUE
//////////////////////////////////////////////////////////////////////////////

fuzzification();
     fb6:	b1 d0       	rcall	.+354    	; 0x111a <fuzzification>
rule_evaluation();
     fb8:	d7 d0       	rcall	.+430    	; 0x1168 <rule_evaluation>
defuzzification();
     fba:	1c d1       	rcall	.+568    	; 0x11f4 <defuzzification>

if (pwm.value > 2845)
     fbc:	cf 50       	subi	r28, 0x0F	; 15
     fbe:	df 4f       	sbci	r29, 0xFF	; 255
     fc0:	88 81       	ld	r24, Y
     fc2:	99 81       	ldd	r25, Y+1	; 0x01
     fc4:	c1 5f       	subi	r28, 0xF1	; 241
     fc6:	d0 40       	sbci	r29, 0x00	; 0
     fc8:	8e 31       	cpi	r24, 0x1E	; 30
     fca:	fb e0       	ldi	r31, 0x0B	; 11
     fcc:	9f 07       	cpc	r25, r31
     fce:	44 f0       	brlt	.+16     	; 0xfe0 <doFuzzy2+0x858>
{
setESC(2845+adjustment);
     fd0:	80 91 fa 01 	lds	r24, 0x01FA
     fd4:	90 91 fb 01 	lds	r25, 0x01FB
     fd8:	83 5e       	subi	r24, 0xE3	; 227
     fda:	94 4f       	sbci	r25, 0xF4	; 244
     fdc:	df d2       	rcall	.+1470   	; 0x159c <setESC>
     fde:	0f c0       	rjmp	.+30     	; 0xffe <doFuzzy2+0x876>
}
else if (pwm.value < 2750)
     fe0:	8e 3b       	cpi	r24, 0xBE	; 190
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	92 07       	cpc	r25, r18
     fe6:	24 f4       	brge	.+8      	; 0xff0 <doFuzzy2+0x868>
{
setESC(2750);
     fe8:	8e eb       	ldi	r24, 0xBE	; 190
     fea:	9a e0       	ldi	r25, 0x0A	; 10
     fec:	d7 d2       	rcall	.+1454   	; 0x159c <setESC>
     fee:	07 c0       	rjmp	.+14     	; 0xffe <doFuzzy2+0x876>
}
else
{
setESC(pwm.value+adjustment);
     ff0:	20 91 fa 01 	lds	r18, 0x01FA
     ff4:	30 91 fb 01 	lds	r19, 0x01FB
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	cf d2       	rcall	.+1438   	; 0x159c <setESC>
}



}
     ffe:	cc 5c       	subi	r28, 0xCC	; 204
    1000:	dd 4f       	sbci	r29, 0xFD	; 253
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	bf 90       	pop	r11
    101e:	af 90       	pop	r10
    1020:	9f 90       	pop	r9
    1022:	8f 90       	pop	r8
    1024:	7f 90       	pop	r7
    1026:	6f 90       	pop	r6
    1028:	5f 90       	pop	r5
    102a:	4f 90       	pop	r4
    102c:	3f 90       	pop	r3
    102e:	2f 90       	pop	r2
    1030:	08 95       	ret

00001032 <FLC_obstacle>:

void FLC_obstacle(int currentOCR1A, int midSonicRange, int v)
{
if(v == 81)
    1032:	41 35       	cpi	r20, 0x51	; 81
    1034:	51 05       	cpc	r21, r1
    1036:	39 f4       	brne	.+14     	; 0x1046 <FLC_obstacle+0x14>
{
adjustment = -5;
    1038:	2b ef       	ldi	r18, 0xFB	; 251
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	30 93 fb 01 	sts	0x01FB, r19
    1040:	20 93 fa 01 	sts	0x01FA, r18
    1044:	04 c0       	rjmp	.+8      	; 0x104e <FLC_obstacle+0x1c>
}
else
{
adjustment = 0;
    1046:	10 92 fb 01 	sts	0x01FB, r1
    104a:	10 92 fa 01 	sts	0x01FA, r1
}

doFuzzy2(currentOCR1A,midSonicRange);
    104e:	9c cb       	rjmp	.-2248   	; 0x788 <doFuzzy2>
    1050:	08 95       	ret

00001052 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1052:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1054:	84 85       	ldd	r24, Z+12	; 0x0c
    1056:	95 85       	ldd	r25, Z+13	; 0x0d
    1058:	9b 01       	movw	r18, r22
    105a:	28 1b       	sub	r18, r24
    105c:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    105e:	86 85       	ldd	r24, Z+14	; 0x0e
    1060:	97 85       	ldd	r25, Z+15	; 0x0f
    1062:	86 1b       	sub	r24, r22
    1064:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1066:	12 16       	cp	r1, r18
    1068:	13 06       	cpc	r1, r19
    106a:	f4 f4       	brge	.+60     	; 0x10a8 <compute_degree_of_membership+0x56>
    106c:	18 16       	cp	r1, r24
    106e:	19 06       	cpc	r1, r25
    1070:	f4 f4       	brge	.+60     	; 0x10ae <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1072:	60 89       	ldd	r22, Z+16	; 0x10
    1074:	71 89       	ldd	r23, Z+17	; 0x11
    1076:	a2 89       	ldd	r26, Z+18	; 0x12
    1078:	b3 89       	ldd	r27, Z+19	; 0x13
    107a:	8a 9f       	mul	r24, r26
    107c:	a0 01       	movw	r20, r0
    107e:	8b 9f       	mul	r24, r27
    1080:	50 0d       	add	r21, r0
    1082:	9a 9f       	mul	r25, r26
    1084:	50 0d       	add	r21, r0
    1086:	11 24       	eor	r1, r1
    1088:	26 9f       	mul	r18, r22
    108a:	c0 01       	movw	r24, r0
    108c:	27 9f       	mul	r18, r23
    108e:	90 0d       	add	r25, r0
    1090:	36 9f       	mul	r19, r22
    1092:	90 0d       	add	r25, r0
    1094:	11 24       	eor	r1, r1
    1096:	48 17       	cp	r20, r24
    1098:	59 07       	cpc	r21, r25
    109a:	0c f4       	brge	.+2      	; 0x109e <compute_degree_of_membership+0x4c>
    109c:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    109e:	8f 3f       	cpi	r24, 0xFF	; 255
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <compute_degree_of_membership+0x54>
    10a4:	3c f4       	brge	.+14     	; 0x10b4 <compute_degree_of_membership+0x62>
    10a6:	08 c0       	rjmp	.+16     	; 0x10b8 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <compute_degree_of_membership+0x66>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    10b8:	93 87       	std	Z+11, r25	; 0x0b
    10ba:	82 87       	std	Z+10, r24	; 0x0a
    10bc:	08 95       	ret

000010be <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    10c8:	c6 85       	ldd	r28, Z+14	; 0x0e
    10ca:	d7 85       	ldd	r29, Z+15	; 0x0f
    10cc:	84 85       	ldd	r24, Z+12	; 0x0c
    10ce:	95 85       	ldd	r25, Z+13	; 0x0d
    10d0:	c8 1b       	sub	r28, r24
    10d2:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    10d4:	22 85       	ldd	r18, Z+10	; 0x0a
    10d6:	33 85       	ldd	r19, Z+11	; 0x0b
    10d8:	60 89       	ldd	r22, Z+16	; 0x10
    10da:	71 89       	ldd	r23, Z+17	; 0x11
    10dc:	c9 01       	movw	r24, r18
    10de:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    10e2:	8e 01       	movw	r16, r28
    10e4:	06 1b       	sub	r16, r22
    10e6:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    10e8:	62 89       	ldd	r22, Z+18	; 0x12
    10ea:	73 89       	ldd	r23, Z+19	; 0x13
    10ec:	c9 01       	movw	r24, r18
    10ee:	fa d7       	rcall	.+4084   	; 0x20e4 <__divmodhi4>
    top = base - run_1 - run_2;
    10f0:	06 1b       	sub	r16, r22
    10f2:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    10f4:	c0 0f       	add	r28, r16
    10f6:	d1 1f       	adc	r29, r17
    10f8:	2c 9f       	mul	r18, r28
    10fa:	c0 01       	movw	r24, r0
    10fc:	2d 9f       	mul	r18, r29
    10fe:	90 0d       	add	r25, r0
    1100:	3c 9f       	mul	r19, r28
    1102:	90 0d       	add	r25, r0
    1104:	11 24       	eor	r1, r1
    1106:	99 23       	and	r25, r25
    1108:	0c f4       	brge	.+2      	; 0x110c <compute_area_of_trapezoid+0x4e>
    110a:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    110c:	95 95       	asr	r25
    110e:	87 95       	ror	r24
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1122:	00 91 1c 03 	lds	r16, 0x031C
    1126:	10 91 1d 03 	lds	r17, 0x031D
    112a:	01 15       	cp	r16, r1
    112c:	11 05       	cpc	r17, r1
    112e:	b9 f0       	breq	.+46     	; 0x115e <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1130:	f8 01       	movw	r30, r16
    1132:	c4 85       	ldd	r28, Z+12	; 0x0c
    1134:	d5 85       	ldd	r29, Z+13	; 0x0d
    1136:	20 97       	sbiw	r28, 0x00	; 0
    1138:	61 f0       	breq	.+24     	; 0x1152 <fuzzification+0x38>
            if (mf!=NULL) {
    113a:	20 97       	sbiw	r28, 0x00	; 0
    113c:	29 f0       	breq	.+10     	; 0x1148 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    113e:	f8 01       	movw	r30, r16
    1140:	62 85       	ldd	r22, Z+10	; 0x0a
    1142:	73 85       	ldd	r23, Z+11	; 0x0b
    1144:	ce 01       	movw	r24, r28
    1146:	85 df       	rcall	.-246    	; 0x1052 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1148:	0c 88       	ldd	r0, Y+20	; 0x14
    114a:	dd 89       	ldd	r29, Y+21	; 0x15
    114c:	c0 2d       	mov	r28, r0
    114e:	20 97       	sbiw	r28, 0x00	; 0
    1150:	a1 f7       	brne	.-24     	; 0x113a <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1152:	f8 01       	movw	r30, r16
    1154:	06 85       	ldd	r16, Z+14	; 0x0e
    1156:	17 85       	ldd	r17, Z+15	; 0x0f
    1158:	01 15       	cp	r16, r1
    115a:	11 05       	cpc	r17, r1
    115c:	49 f7       	brne	.-46     	; 0x1130 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    1170:	c0 91 1e 03 	lds	r28, 0x031E
    1174:	d0 91 1f 03 	lds	r29, 0x031F
    1178:	20 97       	sbiw	r28, 0x00	; 0
    117a:	b9 f1       	breq	.+110    	; 0x11ea <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1180:	e8 81       	ld	r30, Y
    1182:	f9 81       	ldd	r31, Y+1	; 0x01
    1184:	30 97       	sbiw	r30, 0x00	; 0
    1186:	81 f0       	breq	.+32     	; 0x11a8 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1188:	20 2f       	mov	r18, r16
    118a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    118c:	a0 81       	ld	r26, Z
    118e:	b1 81       	ldd	r27, Z+1	; 0x01
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	82 17       	cp	r24, r18
    1196:	93 07       	cpc	r25, r19
    1198:	0c f4       	brge	.+2      	; 0x119c <rule_evaluation+0x34>
    119a:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    119c:	02 80       	ldd	r0, Z+2	; 0x02
    119e:	f3 81       	ldd	r31, Z+3	; 0x03
    11a0:	e0 2d       	mov	r30, r0
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	99 f7       	brne	.-26     	; 0x118c <rule_evaluation+0x24>
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11a8:	20 2f       	mov	r18, r16
    11aa:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    11ac:	ea 81       	ldd	r30, Y+2	; 0x02
    11ae:	fb 81       	ldd	r31, Y+3	; 0x03
    11b0:	30 97       	sbiw	r30, 0x00	; 0
    11b2:	b1 f0       	breq	.+44     	; 0x11e0 <rule_evaluation+0x78>
    11b4:	72 2f       	mov	r23, r18
    11b6:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    11b8:	a0 81       	ld	r26, Z
    11ba:	b1 81       	ldd	r27, Z+1	; 0x01
    11bc:	8d 91       	ld	r24, X+
    11be:	9c 91       	ld	r25, X
    11c0:	11 97       	sbiw	r26, 0x01	; 1
    11c2:	57 2f       	mov	r21, r23
    11c4:	46 2f       	mov	r20, r22
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	14 f4       	brge	.+4      	; 0x11d0 <rule_evaluation+0x68>
    11cc:	58 2f       	mov	r21, r24
    11ce:	49 2f       	mov	r20, r25
    11d0:	5c 93       	st	X, r21
    11d2:	11 96       	adiw	r26, 0x01	; 1
    11d4:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    11d6:	02 80       	ldd	r0, Z+2	; 0x02
    11d8:	f3 81       	ldd	r31, Z+3	; 0x03
    11da:	e0 2d       	mov	r30, r0
    11dc:	30 97       	sbiw	r30, 0x00	; 0
    11de:	61 f7       	brne	.-40     	; 0x11b8 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    11e0:	0c 80       	ldd	r0, Y+4	; 0x04
    11e2:	dd 81       	ldd	r29, Y+5	; 0x05
    11e4:	c0 2d       	mov	r28, r0
    11e6:	20 97       	sbiw	r28, 0x00	; 0
    11e8:	59 f6       	brne	.-106    	; 0x1180 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    11f4:	2f 92       	push	r2
    11f6:	3f 92       	push	r3
    11f8:	4f 92       	push	r4
    11fa:	5f 92       	push	r5
    11fc:	6f 92       	push	r6
    11fe:	7f 92       	push	r7
    1200:	8f 92       	push	r8
    1202:	9f 92       	push	r9
    1204:	af 92       	push	r10
    1206:	bf 92       	push	r11
    1208:	cf 92       	push	r12
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	00 d0       	rcall	.+0      	; 0x121a <defuzzification+0x26>
    121a:	00 d0       	rcall	.+0      	; 0x121c <defuzzification+0x28>
    121c:	00 d0       	rcall	.+0      	; 0x121e <defuzzification+0x2a>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1222:	80 91 1a 03 	lds	r24, 0x031A
    1226:	90 91 1b 03 	lds	r25, 0x031B
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	89 2b       	or	r24, r25
    1230:	09 f4       	brne	.+2      	; 0x1234 <defuzzification+0x40>
    1232:	84 c0       	rjmp	.+264    	; 0x133c <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1234:	eb 81       	ldd	r30, Y+3	; 0x03
    1236:	fc 81       	ldd	r31, Y+4	; 0x04
    1238:	04 84       	ldd	r0, Z+12	; 0x0c
    123a:	f5 85       	ldd	r31, Z+13	; 0x0d
    123c:	e0 2d       	mov	r30, r0
    123e:	fe 83       	std	Y+6, r31	; 0x06
    1240:	ed 83       	std	Y+5, r30	; 0x05
    1242:	ef 2b       	or	r30, r31
    1244:	09 f4       	brne	.+2      	; 0x1248 <defuzzification+0x54>
    1246:	66 c0       	rjmp	.+204    	; 0x1314 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1248:	51 2c       	mov	r5, r1
    124a:	61 2c       	mov	r6, r1
    124c:	71 2c       	mov	r7, r1
    124e:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    1250:	31 2c       	mov	r3, r1
    1252:	21 2c       	mov	r2, r1
    1254:	19 82       	std	Y+1, r1	; 0x01
    1256:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	30 df       	rcall	.-416    	; 0x10be <compute_area_of_trapezoid>
    125e:	bc 01       	movw	r22, r24
    1260:	88 27       	eor	r24, r24
    1262:	77 fd       	sbrc	r23, 7
    1264:	80 95       	com	r24
    1266:	98 2f       	mov	r25, r24
    1268:	4e d6       	rcall	.+3228   	; 0x1f06 <__floatsisf>
    126a:	6b 01       	movw	r12, r22
    126c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    126e:	ed 81       	ldd	r30, Y+5	; 0x05
    1270:	fe 81       	ldd	r31, Y+6	; 0x06
    1272:	04 85       	ldd	r16, Z+12	; 0x0c
    1274:	15 85       	ldd	r17, Z+13	; 0x0d
    1276:	b8 01       	movw	r22, r16
    1278:	88 27       	eor	r24, r24
    127a:	77 fd       	sbrc	r23, 7
    127c:	80 95       	com	r24
    127e:	98 2f       	mov	r25, r24
    1280:	42 d6       	rcall	.+3204   	; 0x1f06 <__floatsisf>
    1282:	4b 01       	movw	r8, r22
    1284:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1286:	ed 81       	ldd	r30, Y+5	; 0x05
    1288:	fe 81       	ldd	r31, Y+6	; 0x06
    128a:	86 85       	ldd	r24, Z+14	; 0x0e
    128c:	97 85       	ldd	r25, Z+15	; 0x0f
    128e:	80 1b       	sub	r24, r16
    1290:	91 0b       	sbc	r25, r17
    1292:	bc 01       	movw	r22, r24
    1294:	12 f4       	brpl	.+4      	; 0x129a <defuzzification+0xa6>
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	75 95       	asr	r23
    129c:	67 95       	ror	r22
            centroid = centroid + intermed;
    129e:	88 27       	eor	r24, r24
    12a0:	77 fd       	sbrc	r23, 7
    12a2:	80 95       	com	r24
    12a4:	98 2f       	mov	r25, r24
    12a6:	2f d6       	rcall	.+3166   	; 0x1f06 <__floatsisf>
    12a8:	a5 01       	movw	r20, r10
    12aa:	94 01       	movw	r18, r8
    12ac:	2d d5       	rcall	.+2650   	; 0x1d08 <__addsf3>
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	b3 d6       	rcall	.+3430   	; 0x201e <__mulsf3>
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	63 2d       	mov	r22, r3
    12be:	72 2d       	mov	r23, r2
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	21 d5       	rcall	.+2626   	; 0x1d08 <__addsf3>
    12c6:	36 2e       	mov	r3, r22
    12c8:	27 2e       	mov	r2, r23
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    12ce:	a7 01       	movw	r20, r14
    12d0:	96 01       	movw	r18, r12
    12d2:	65 2d       	mov	r22, r5
    12d4:	76 2d       	mov	r23, r6
    12d6:	87 2d       	mov	r24, r7
    12d8:	94 2d       	mov	r25, r4
    12da:	16 d5       	rcall	.+2604   	; 0x1d08 <__addsf3>
    12dc:	56 2e       	mov	r5, r22
    12de:	67 2e       	mov	r6, r23
    12e0:	78 2e       	mov	r7, r24
    12e2:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    12e4:	ed 81       	ldd	r30, Y+5	; 0x05
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	04 88       	ldd	r0, Z+20	; 0x14
    12ea:	f5 89       	ldd	r31, Z+21	; 0x15
    12ec:	e0 2d       	mov	r30, r0
    12ee:	fe 83       	std	Y+6, r31	; 0x06
    12f0:	ed 83       	std	Y+5, r30	; 0x05
    12f2:	ef 2b       	or	r30, r31
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <defuzzification+0x104>
    12f6:	b0 cf       	rjmp	.-160    	; 0x1258 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    12f8:	26 2f       	mov	r18, r22
    12fa:	37 2f       	mov	r19, r23
    12fc:	48 2f       	mov	r20, r24
    12fe:	59 2f       	mov	r21, r25
    1300:	63 2d       	mov	r22, r3
    1302:	72 2d       	mov	r23, r2
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	63 d5       	rcall	.+2758   	; 0x1dd0 <__divsf3>
    130a:	26 2f       	mov	r18, r22
    130c:	37 2f       	mov	r19, r23
    130e:	48 2f       	mov	r20, r24
    1310:	59 2f       	mov	r21, r25
    1312:	04 c0       	rjmp	.+8      	; 0x131c <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    131c:	62 2f       	mov	r22, r18
    131e:	73 2f       	mov	r23, r19
    1320:	84 2f       	mov	r24, r20
    1322:	95 2f       	mov	r25, r21
    1324:	bd d5       	rcall	.+2938   	; 0x1ea0 <__fixsfsi>
    1326:	eb 81       	ldd	r30, Y+3	; 0x03
    1328:	fc 81       	ldd	r31, Y+4	; 0x04
    132a:	73 87       	std	Z+11, r23	; 0x0b
    132c:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    132e:	86 85       	ldd	r24, Z+14	; 0x0e
    1330:	97 85       	ldd	r25, Z+15	; 0x0f
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	89 2b       	or	r24, r25
    1338:	09 f0       	breq	.+2      	; 0x133c <defuzzification+0x148>
    133a:	7c cf       	rjmp	.-264    	; 0x1234 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    133c:	26 96       	adiw	r28, 0x06	; 6
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	3f 90       	pop	r3
    136a:	2f 90       	pop	r2
    136c:	08 95       	ret

0000136e <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	6a 01       	movw	r12, r20
    1386:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    1388:	d4 d6       	rcall	.+3496   	; 0x2132 <strcpy>
    newMf->value = 0;
    138a:	1b 86       	std	Y+11, r1	; 0x0b
    138c:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    138e:	dd 86       	std	Y+13, r13	; 0x0d
    1390:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    1392:	ff 86       	std	Y+15, r15	; 0x0f
    1394:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    1396:	b5 01       	movw	r22, r10
    1398:	6c 19       	sub	r22, r12
    139a:	7d 09       	sbc	r23, r13
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	31 e0       	ldi	r19, 0x01	; 1
    13a0:	c9 01       	movw	r24, r18
    13a2:	a0 d6       	rcall	.+3392   	; 0x20e4 <__divmodhi4>
    13a4:	79 8b       	std	Y+17, r23	; 0x11
    13a6:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    13a8:	b7 01       	movw	r22, r14
    13aa:	60 1b       	sub	r22, r16
    13ac:	71 0b       	sbc	r23, r17
    13ae:	c9 01       	movw	r24, r18
    13b0:	99 d6       	rcall	.+3378   	; 0x20e4 <__divmodhi4>
    13b2:	7b 8b       	std	Y+19, r23	; 0x13
    13b4:	6a 8b       	std	Y+18, r22	; 0x12
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	08 95       	ret

000013cc <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	0b b6       	in	r0, 0x3b	; 59
    13d8:	0f 92       	push	r0
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	80 91 ce 00 	lds	r24, 0x00CE
    13e6:	8f 3f       	cpi	r24, 0xFF	; 255
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <__vector_28+0x28>
    13ea:	10 92 fd 01 	sts	0x01FD, r1
    13ee:	10 92 fc 01 	sts	0x01FC, r1
    13f2:	10 c0       	rjmp	.+32     	; 0x1414 <__vector_28+0x48>
    13f4:	e0 91 fc 01 	lds	r30, 0x01FC
    13f8:	f0 91 fd 01 	lds	r31, 0x01FD
    13fc:	e0 5e       	subi	r30, 0xE0	; 224
    13fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1400:	80 83       	st	Z, r24
    1402:	80 91 fc 01 	lds	r24, 0x01FC
    1406:	90 91 fd 01 	lds	r25, 0x01FD
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	90 93 fd 01 	sts	0x01FD, r25
    1410:	80 93 fc 01 	sts	0x01FC, r24
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	0f 90       	pop	r0
    141e:	0b be       	out	0x3b, r0	; 59
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <carInit>:
    142a:	a9 d0       	rcall	.+338    	; 0x157e <pwmInit>
    142c:	a3 d1       	rcall	.+838    	; 0x1774 <spi_slave_init>
    142e:	8d ec       	ldi	r24, 0xCD	; 205
    1430:	9a e0       	ldi	r25, 0x0A	; 10
    1432:	90 93 89 00 	sts	0x0089, r25
    1436:	80 93 88 00 	sts	0x0088, r24
    143a:	84 e6       	ldi	r24, 0x64	; 100
    143c:	9a e0       	ldi	r25, 0x0A	; 10
    143e:	90 93 8b 00 	sts	0x008B, r25
    1442:	80 93 8a 00 	sts	0x008A, r24
    1446:	08 95       	ret

00001448 <USART1_init>:
    1448:	ec ec       	ldi	r30, 0xCC	; 204
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	11 82       	std	Z+1, r1	; 0x01
    144e:	10 82       	st	Z, r1
    1450:	20 e9       	ldi	r18, 0x90	; 144
    1452:	20 93 c9 00 	sts	0x00C9, r18
    1456:	2e e0       	ldi	r18, 0x0E	; 14
    1458:	20 93 ca 00 	sts	0x00CA, r18
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	10 92 fd 01 	sts	0x01FD, r1
    1464:	10 92 fc 01 	sts	0x01FC, r1
    1468:	08 95       	ret

0000146a <main>:




int main (void)
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	2b 97       	sbiw	r28, 0x0b	; 11
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	//	FLC_obstacle(2800, 150);

	FLC_obstacle(2840,250,81);
    147e:	41 e5       	ldi	r20, 0x51	; 81
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	6a ef       	ldi	r22, 0xFA	; 250
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	88 e1       	ldi	r24, 0x18	; 24
    1488:	9b e0       	ldi	r25, 0x0B	; 11
    148a:	d3 dd       	rcall	.-1114   	; 0x1032 <FLC_obstacle>



	carInit();
    148c:	ce df       	rcall	.-100    	; 0x142a <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    148e:	2f ef       	ldi	r18, 0xFF	; 255
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	90 ee       	ldi	r25, 0xE0	; 224
    1494:	21 50       	subi	r18, 0x01	; 1
    1496:	80 40       	sbci	r24, 0x00	; 0
    1498:	90 40       	sbci	r25, 0x00	; 0
    149a:	e1 f7       	brne	.-8      	; 0x1494 <main+0x2a>
    149c:	00 c0       	rjmp	.+0      	; 0x149e <main+0x34>
    149e:	00 00       	nop
	int k_value_stop_line;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    14a0:	87 e0       	ldi	r24, 0x07	; 7
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	d1 df       	rcall	.-94     	; 0x1448 <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    14aa:	78 94       	sei
				FLC_obstacle(OCR1A, sF, v);
				FLC_steering(c,v);
			}
			else if (control_mode == 4)
			{
				if (TCNT3 < 300) // 0.3 seconds
    14ac:	0f 2e       	mov	r0, r31
    14ae:	f4 e9       	ldi	r31, 0x94	; 148
    14b0:	6f 2e       	mov	r6, r31
    14b2:	71 2c       	mov	r7, r1
    14b4:	f0 2d       	mov	r31, r0
					setESC(2835);
					stop(k_value_stop_line);
				}
				else
				{
					TCCR3B = (0<<CS32)|(0<<CS30);
    14b6:	0f 2e       	mov	r0, r31
    14b8:	f1 e9       	ldi	r31, 0x91	; 145
    14ba:	4f 2e       	mov	r4, r31
    14bc:	51 2c       	mov	r5, r1
    14be:	f0 2d       	mov	r31, r0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    14c0:	0f 2e       	mov	r0, r31
    14c2:	f8 e8       	ldi	r31, 0x88	; 136
    14c4:	cf 2e       	mov	r12, r31
    14c6:	d1 2c       	mov	r13, r1
    14c8:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    14ca:	0f 2e       	mov	r0, r31
    14cc:	fa e8       	ldi	r31, 0x8A	; 138
    14ce:	af 2e       	mov	r10, r31
    14d0:	b1 2c       	mov	r11, r1
    14d2:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    14d4:	af d1       	rcall	.+862    	; 0x1834 <is_package_recieved>
    14d6:	88 23       	and	r24, r24
    14d8:	e9 f3       	breq	.-6      	; 0x14d4 <main+0x6a>
			

			//Reading Information
			prev_control_mode = control_mode;
    14da:	1b 85       	ldd	r17, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	ce 01       	movw	r24, r28
    14e4:	0b 96       	adiw	r24, 0x0b	; 11
    14e6:	b0 d1       	rcall	.+864    	; 0x1848 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    14e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	79 f4       	brne	.+30     	; 0x150c <main+0xa2>
    14ee:	11 11       	cpse	r17, r1
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <main+0xa2>
				onGoingStop = 0;
    14f2:	10 92 ff 01 	sts	0x01FF, r1
    14f6:	10 92 fe 01 	sts	0x01FE, r1
				count(1);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 66 00 	call	0xcc	; 0xcc <count>
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
    1502:	89 84       	ldd	r8, Y+9	; 0x09
    1504:	91 2c       	mov	r9, r1
    1506:	e8 e2       	ldi	r30, 0x28	; 40
    1508:	8e 1a       	sub	r8, r30
    150a:	91 08       	sbc	r9, r1
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    150c:	6b 81       	ldd	r22, Y+3	; 0x03
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    150e:	f9 80       	ldd	r15, Y+1	; 0x01
			int v = (int) sensor_info.angular_diff;
    1510:	0a 81       	ldd	r16, Y+2	; 0x02
			
			cli();
    1512:	f8 94       	cli
			
			if (control_mode == 0)
    1514:	8b 85       	ldd	r24, Y+11	; 0x0b
    1516:	81 11       	cpse	r24, r1
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <main+0xc8>
			int sF = (int) sensor_info.dist_sonic_middle;
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
    151a:	10 e0       	ldi	r17, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    151c:	f6 01       	movw	r30, r12
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
				onGoingStop = 0;
				count(1);
				k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1522:	70 e0       	ldi	r23, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    1524:	a8 01       	movw	r20, r16
    1526:	85 dd       	rcall	.-1270   	; 0x1032 <FLC_obstacle>
				FLC_steering(c,v);
    1528:	b8 01       	movw	r22, r16
    152a:	8f 2d       	mov	r24, r15
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	09 d9       	rcall	.-3566   	; 0x742 <FLC_steering>
    1530:	16 c0       	rjmp	.+44     	; 0x155e <main+0xf4>
			}
			else if (control_mode == 4)
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	a1 f4       	brne	.+40     	; 0x155e <main+0xf4>
			{
				if (TCNT3 < 300) // 0.3 seconds
    1536:	f3 01       	movw	r30, r6
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	8c 32       	cpi	r24, 0x2C	; 44
    153e:	91 40       	sbci	r25, 0x01	; 1
    1540:	30 f4       	brcc	.+12     	; 0x154e <main+0xe4>
				{
					setESC(2835);
    1542:	83 e1       	ldi	r24, 0x13	; 19
    1544:	9b e0       	ldi	r25, 0x0B	; 11
    1546:	2a d0       	rcall	.+84     	; 0x159c <setESC>
					stop(k_value_stop_line);
    1548:	c4 01       	movw	r24, r8
    154a:	bd d1       	rcall	.+890    	; 0x18c6 <stop>
    154c:	08 c0       	rjmp	.+16     	; 0x155e <main+0xf4>
				}
				else
				{
					TCCR3B = (0<<CS32)|(0<<CS30);
    154e:	f2 01       	movw	r30, r4
    1550:	10 82       	st	Z, r1
					setESC(NEUTRAL);
    1552:	8d ec       	ldi	r24, 0xCD	; 205
    1554:	9a e0       	ldi	r25, 0x0A	; 10
    1556:	22 d0       	rcall	.+68     	; 0x159c <setESC>
					setServo(STRAIGHT);
    1558:	84 e6       	ldi	r24, 0x64	; 100
    155a:	9a e0       	ldi	r25, 0x0A	; 10
    155c:	3a d0       	rcall	.+116    	; 0x15d2 <setServo>
				}
			}
			

			
			sei();
    155e:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1560:	f6 01       	movw	r30, r12
    1562:	e0 80       	ld	r14, Z
    1564:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1566:	f5 01       	movw	r30, r10
    1568:	00 81       	ld	r16, Z
    156a:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	0b d1       	rcall	.+534    	; 0x1786 <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1570:	8e 2d       	mov	r24, r14
    1572:	09 d1       	rcall	.+530    	; 0x1786 <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	07 d1       	rcall	.+526    	; 0x1786 <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    1578:	80 2f       	mov	r24, r16
    157a:	05 d1       	rcall	.+522    	; 0x1786 <spi_send_byte>
    157c:	ab cf       	rjmp	.-170    	; 0x14d4 <main+0x6a>

0000157e <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    157e:	80 e3       	ldi	r24, 0x30	; 48
    1580:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1582:	82 ea       	ldi	r24, 0xA2	; 162
    1584:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	9f e8       	ldi	r25, 0x8F	; 143
    158c:	90 93 87 00 	sts	0x0087, r25
    1590:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1594:	8a e1       	ldi	r24, 0x1A	; 26
    1596:	80 93 81 00 	sts	0x0081, r24
    159a:	08 95       	ret

0000159c <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    159c:	80 36       	cpi	r24, 0x60	; 96
    159e:	2a e0       	ldi	r18, 0x0A	; 10
    15a0:	92 07       	cpc	r25, r18
    15a2:	3c f4       	brge	.+14     	; 0x15b2 <setESC+0x16>
	{
		OCR1A = MINESC;
    15a4:	8f e5       	ldi	r24, 0x5F	; 95
    15a6:	9a e0       	ldi	r25, 0x0A	; 10
    15a8:	90 93 89 00 	sts	0x0089, r25
    15ac:	80 93 88 00 	sts	0x0088, r24
    15b0:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    15b2:	82 32       	cpi	r24, 0x22	; 34
    15b4:	2b e0       	ldi	r18, 0x0B	; 11
    15b6:	92 07       	cpc	r25, r18
    15b8:	3c f0       	brlt	.+14     	; 0x15c8 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    15ba:	82 e2       	ldi	r24, 0x22	; 34
    15bc:	9b e0       	ldi	r25, 0x0B	; 11
    15be:	90 93 89 00 	sts	0x0089, r25
    15c2:	80 93 88 00 	sts	0x0088, r24
    15c6:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    15c8:	90 93 89 00 	sts	0x0089, r25
    15cc:	80 93 88 00 	sts	0x0088, r24
    15d0:	08 95       	ret

000015d2 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    15d2:	84 3e       	cpi	r24, 0xE4	; 228
    15d4:	2c e0       	ldi	r18, 0x0C	; 12
    15d6:	92 07       	cpc	r25, r18
    15d8:	3c f0       	brlt	.+14     	; 0x15e8 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    15da:	84 ee       	ldi	r24, 0xE4	; 228
    15dc:	9c e0       	ldi	r25, 0x0C	; 12
    15de:	90 93 8b 00 	sts	0x008B, r25
    15e2:	80 93 8a 00 	sts	0x008A, r24
    15e6:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    15e8:	87 3e       	cpi	r24, 0xE7	; 231
    15ea:	27 e0       	ldi	r18, 0x07	; 7
    15ec:	92 07       	cpc	r25, r18
    15ee:	3c f4       	brge	.+14     	; 0x15fe <setServo+0x2c>

		OCR1B = MAXLEFT;
    15f0:	86 ee       	ldi	r24, 0xE6	; 230
    15f2:	97 e0       	ldi	r25, 0x07	; 7
    15f4:	90 93 8b 00 	sts	0x008B, r25
    15f8:	80 93 8a 00 	sts	0x008A, r24
    15fc:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    15fe:	ea e8       	ldi	r30, 0x8A	; 138
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	40 91 00 01 	lds	r20, 0x0100
    160a:	50 91 01 01 	lds	r21, 0x0101
    160e:	84 9f       	mul	r24, r20
    1610:	90 01       	movw	r18, r0
    1612:	85 9f       	mul	r24, r21
    1614:	30 0d       	add	r19, r0
    1616:	94 9f       	mul	r25, r20
    1618:	30 0d       	add	r19, r0
    161a:	11 24       	eor	r1, r1
    161c:	40 91 02 01 	lds	r20, 0x0102
    1620:	50 91 03 01 	lds	r21, 0x0103
    1624:	64 9f       	mul	r22, r20
    1626:	c0 01       	movw	r24, r0
    1628:	65 9f       	mul	r22, r21
    162a:	90 0d       	add	r25, r0
    162c:	74 9f       	mul	r23, r20
    162e:	90 0d       	add	r25, r0
    1630:	11 24       	eor	r1, r1
    1632:	82 0f       	add	r24, r18
    1634:	93 1f       	adc	r25, r19
    1636:	6a e0       	ldi	r22, 0x0A	; 10
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	54 d5       	rcall	.+2728   	; 0x20e4 <__divmodhi4>
    163c:	71 83       	std	Z+1, r23	; 0x01
    163e:	60 83       	st	Z, r22
    1640:	08 95       	ret

00001642 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1642:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1644:	20 91 8c 02 	lds	r18, 0x028C
    1648:	30 91 8d 02 	lds	r19, 0x028D
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	a9 f0       	breq	.+42     	; 0x167c <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1652:	e8 e8       	ldi	r30, 0x88	; 136
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	40 81       	ld	r20, Z
    1658:	51 81       	ldd	r21, Z+1	; 0x01
    165a:	da 01       	movw	r26, r20
    165c:	a8 5b       	subi	r26, 0xB8	; 184
    165e:	bd 4f       	sbci	r27, 0xFD	; 253
    1660:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1662:	4f 5f       	subi	r20, 0xFF	; 255
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	51 83       	std	Z+1, r21	; 0x01
    1668:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    166a:	21 50       	subi	r18, 0x01	; 1
    166c:	31 09       	sbc	r19, r1
    166e:	30 93 8d 02 	sts	0x028D, r19
    1672:	20 93 8c 02 	sts	0x028C, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1676:	23 2b       	or	r18, r19
    1678:	21 f4       	brne	.+8      	; 0x1682 <spi_get_byte+0x40>
    167a:	01 c0       	rjmp	.+2      	; 0x167e <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    167c:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    167e:	10 92 00 02 	sts	0x0200, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1682:	20 91 88 02 	lds	r18, 0x0288
    1686:	30 91 89 02 	lds	r19, 0x0289
    168a:	20 34       	cpi	r18, 0x40	; 64
    168c:	31 05       	cpc	r19, r1
    168e:	21 f4       	brne	.+8      	; 0x1698 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1690:	10 92 89 02 	sts	0x0289, r1
    1694:	10 92 88 02 	sts	0x0288, r1
	}
	

	sei();
    1698:	78 94       	sei
	
	return value;
	
		
}
    169a:	08 95       	ret

0000169c <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	0b b6       	in	r0, 0x3b	; 59
    16a8:	0f 92       	push	r0
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    16ba:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    16bc:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    16be:	2d 3f       	cpi	r18, 0xFD	; 253
    16c0:	a9 f0       	breq	.+42     	; 0x16ec <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    16c2:	ea e8       	ldi	r30, 0x8A	; 138
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	80 81       	ld	r24, Z
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	dc 01       	movw	r26, r24
    16cc:	a8 5b       	subi	r26, 0xB8	; 184
    16ce:	bd 4f       	sbci	r27, 0xFD	; 253
    16d0:	2c 93       	st	X, r18
		rx_spi.i_last++;
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    16d8:	ec e8       	ldi	r30, 0x8C	; 140
    16da:	f2 e0       	ldi	r31, 0x02	; 2
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 00 02 	sts	0x0200, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    16ec:	80 91 8a 02 	lds	r24, 0x028A
    16f0:	90 91 8b 02 	lds	r25, 0x028B
    16f4:	80 34       	cpi	r24, 0x40	; 64
    16f6:	91 05       	cpc	r25, r1
    16f8:	21 f4       	brne	.+8      	; 0x1702 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    16fa:	10 92 8b 02 	sts	0x028B, r1
    16fe:	10 92 8a 02 	sts	0x028A, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1702:	80 91 46 02 	lds	r24, 0x0246
    1706:	90 91 47 02 	lds	r25, 0x0247
    170a:	89 2b       	or	r24, r25
    170c:	01 f1       	breq	.+64     	; 0x174e <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    170e:	e0 91 42 02 	lds	r30, 0x0242
    1712:	f0 91 43 02 	lds	r31, 0x0243
    1716:	ee 5f       	subi	r30, 0xFE	; 254
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	80 81       	ld	r24, Z
    171c:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    171e:	e2 e4       	ldi	r30, 0x42	; 66
    1720:	f2 e0       	ldi	r31, 0x02	; 2
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    172c:	e6 e4       	ldi	r30, 0x46	; 70
    172e:	f2 e0       	ldi	r31, 0x02	; 2
    1730:	20 81       	ld	r18, Z
    1732:	31 81       	ldd	r19, Z+1	; 0x01
    1734:	21 50       	subi	r18, 0x01	; 1
    1736:	31 09       	sbc	r19, r1
    1738:	31 83       	std	Z+1, r19	; 0x01
    173a:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    173c:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    173e:	80 34       	cpi	r24, 0x40	; 64
    1740:	91 05       	cpc	r25, r1
    1742:	49 f4       	brne	.+18     	; 0x1756 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1744:	10 92 43 02 	sts	0x0243, r1
    1748:	10 92 42 02 	sts	0x0242, r1
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    174e:	8d ef       	ldi	r24, 0xFD	; 253
    1750:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1752:	10 92 01 02 	sts	0x0201, r1
		
	} 	
	

}
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1774:	80 e4       	ldi	r24, 0x40	; 64
    1776:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1778:	80 ec       	ldi	r24, 0xC0	; 192
    177a:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    177c:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    177e:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1780:	8d ef       	ldi	r24, 0xFD	; 253
    1782:	8e bd       	out	0x2e, r24	; 46
    1784:	08 95       	ret

00001786 <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1786:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1788:	20 91 46 02 	lds	r18, 0x0246
    178c:	30 91 47 02 	lds	r19, 0x0247
    1790:	20 34       	cpi	r18, 0x40	; 64
    1792:	31 05       	cpc	r19, r1
    1794:	90 f4       	brcc	.+36     	; 0x17ba <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1796:	e4 e4       	ldi	r30, 0x44	; 68
    1798:	f2 e0       	ldi	r31, 0x02	; 2
    179a:	40 81       	ld	r20, Z
    179c:	51 81       	ldd	r21, Z+1	; 0x01
    179e:	da 01       	movw	r26, r20
    17a0:	ae 5f       	subi	r26, 0xFE	; 254
    17a2:	bd 4f       	sbci	r27, 0xFD	; 253
    17a4:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    17a6:	4f 5f       	subi	r20, 0xFF	; 255
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255
    17aa:	51 83       	std	Z+1, r21	; 0x01
    17ac:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	30 93 47 02 	sts	0x0247, r19
    17b6:	20 93 46 02 	sts	0x0246, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    17ba:	80 91 44 02 	lds	r24, 0x0244
    17be:	90 91 45 02 	lds	r25, 0x0245
    17c2:	80 34       	cpi	r24, 0x40	; 64
    17c4:	91 05       	cpc	r25, r1
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    17c8:	10 92 45 02 	sts	0x0245, r1
    17cc:	10 92 44 02 	sts	0x0244, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    17d0:	80 91 46 02 	lds	r24, 0x0246
    17d4:	90 91 47 02 	lds	r25, 0x0247
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f9 f4       	brne	.+62     	; 0x181a <spi_send_byte+0x94>
    17dc:	80 91 01 02 	lds	r24, 0x0201
    17e0:	81 11       	cpse	r24, r1
    17e2:	1b c0       	rjmp	.+54     	; 0x181a <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    17e4:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    17e6:	e0 91 42 02 	lds	r30, 0x0242
    17ea:	f0 91 43 02 	lds	r31, 0x0243
    17ee:	ee 5f       	subi	r30, 0xFE	; 254
    17f0:	fd 4f       	sbci	r31, 0xFD	; 253
    17f2:	80 81       	ld	r24, Z
    17f4:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    17f6:	e2 e4       	ldi	r30, 0x42	; 66
    17f8:	f2 e0       	ldi	r31, 0x02	; 2
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1804:	e6 e4       	ldi	r30, 0x46	; 70
    1806:	f2 e0       	ldi	r31, 0x02	; 2
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1812:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 01 02 	sts	0x0201, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    181a:	80 91 42 02 	lds	r24, 0x0242
    181e:	90 91 43 02 	lds	r25, 0x0243
    1822:	80 34       	cpi	r24, 0x40	; 64
    1824:	91 05       	cpc	r25, r1
    1826:	21 f4       	brne	.+8      	; 0x1830 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1828:	10 92 43 02 	sts	0x0243, r1
    182c:	10 92 42 02 	sts	0x0242, r1
	}
			
			

	sei();
    1830:	78 94       	sei
    1832:	08 95       	ret

00001834 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	20 91 8c 02 	lds	r18, 0x028C
    183a:	30 91 8d 02 	lds	r19, 0x028D
    183e:	2b 30       	cpi	r18, 0x0B	; 11
    1840:	31 05       	cpc	r19, r1
    1842:	08 f4       	brcc	.+2      	; 0x1846 <is_package_recieved+0x12>
    1844:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1846:	08 95       	ret

00001848 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	8c 01       	movw	r16, r24
    1852:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1854:	20 91 8c 02 	lds	r18, 0x028C
    1858:	30 91 8d 02 	lds	r19, 0x028D
    185c:	23 2b       	or	r18, r19
    185e:	69 f1       	breq	.+90     	; 0x18ba <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1860:	e0 91 88 02 	lds	r30, 0x0288
    1864:	f0 91 89 02 	lds	r31, 0x0289
    1868:	e8 5b       	subi	r30, 0xB8	; 184
    186a:	fd 4f       	sbci	r31, 0xFD	; 253
    186c:	80 81       	ld	r24, Z
    186e:	8f 3f       	cpi	r24, 0xFF	; 255
    1870:	e1 f4       	brne	.+56     	; 0x18aa <read_sensor_info+0x62>
    1872:	e0 df       	rcall	.-64     	; 0x1834 <is_package_recieved>
    1874:	88 23       	and	r24, r24
    1876:	11 f1       	breq	.+68     	; 0x18bc <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1878:	e4 de       	rcall	.-568    	; 0x1642 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    187a:	e3 de       	rcall	.-570    	; 0x1642 <spi_get_byte>
    187c:	f8 01       	movw	r30, r16
    187e:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1880:	e0 de       	rcall	.-576    	; 0x1642 <spi_get_byte>
    1882:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1884:	de de       	rcall	.-580    	; 0x1642 <spi_get_byte>
    1886:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1888:	dc de       	rcall	.-584    	; 0x1642 <spi_get_byte>
    188a:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    188c:	da de       	rcall	.-588    	; 0x1642 <spi_get_byte>
    188e:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1890:	d8 de       	rcall	.-592    	; 0x1642 <spi_get_byte>
    1892:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1894:	d6 de       	rcall	.-596    	; 0x1642 <spi_get_byte>
    1896:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1898:	81 e2       	ldi	r24, 0x21	; 33
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    189e:	d1 de       	rcall	.-606    	; 0x1642 <spi_get_byte>
    18a0:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    18a2:	cf de       	rcall	.-610    	; 0x1642 <spi_get_byte>
    18a4:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    18aa:	c4 df       	rcall	.-120    	; 0x1834 <is_package_recieved>
    18ac:	88 23       	and	r24, r24
    18ae:	31 f0       	breq	.+12     	; 0x18bc <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    18b0:	c8 de       	rcall	.-624    	; 0x1642 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    18b2:	be 01       	movw	r22, r28
    18b4:	c8 01       	movw	r24, r16
    18b6:	c8 df       	rcall	.-112    	; 0x1848 <read_sensor_info>
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <stop>:




void stop(int k_value)
{
    18c6:	4f 92       	push	r4
    18c8:	5f 92       	push	r5
    18ca:	6f 92       	push	r6
    18cc:	7f 92       	push	r7
    18ce:	8f 92       	push	r8
    18d0:	9f 92       	push	r9
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	ce 5c       	subi	r28, 0xCE	; 206
    18ec:	d1 09       	sbc	r29, r1
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61

	
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type orientation; strcpy(orientation.name, "orientatio");
    18f8:	2b e0       	ldi	r18, 0x0B	; 11
    18fa:	ef ec       	ldi	r30, 0xCF	; 207
    18fc:	f1 e0       	ldi	r31, 0x01	; 1
    18fe:	de 01       	movw	r26, r28
    1900:	11 96       	adiw	r26, 0x01	; 1
    1902:	01 90       	ld	r0, Z+
    1904:	0d 92       	st	X+, r0
    1906:	2a 95       	dec	r18
    1908:	e1 f7       	brne	.-8      	; 0x1902 <stop+0x3c>
	
	if (k_value < -20)
    190a:	8c 3e       	cpi	r24, 0xEC	; 236
    190c:	2f ef       	ldi	r18, 0xFF	; 255
    190e:	92 07       	cpc	r25, r18
    1910:	2c f4       	brge	.+10     	; 0x191c <stop+0x56>
	{
		orientation.value = -20;
    1912:	8c ee       	ldi	r24, 0xEC	; 236
    1914:	9f ef       	ldi	r25, 0xFF	; 255
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	8b 87       	std	Y+11, r24	; 0x0b
    191a:	0a c0       	rjmp	.+20     	; 0x1930 <stop+0x6a>
	}
	else if (k_value > 20)
    191c:	85 31       	cpi	r24, 0x15	; 21
    191e:	91 05       	cpc	r25, r1
    1920:	2c f0       	brlt	.+10     	; 0x192c <stop+0x66>
	{
		orientation.value = 20;
    1922:	84 e1       	ldi	r24, 0x14	; 20
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c 87       	std	Y+12, r25	; 0x0c
    1928:	8b 87       	std	Y+11, r24	; 0x0b
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <stop+0x6a>
	}
	else
	{
		orientation.value = k_value;
    192c:	9c 87       	std	Y+12, r25	; 0x0c
    192e:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Set MFs
	struct mf_type off_right;
	MATLAB_MF(&off_right, "off_right", -21, -20, -20, -5);
    1930:	5e 01       	movw	r10, r28
    1932:	81 e1       	ldi	r24, 0x11	; 17
    1934:	a8 0e       	add	r10, r24
    1936:	b1 1c       	adc	r11, r1
    1938:	0f 2e       	mov	r0, r31
    193a:	fb ef       	ldi	r31, 0xFB	; 251
    193c:	ef 2e       	mov	r14, r31
    193e:	ff 24       	eor	r15, r15
    1940:	fa 94       	dec	r15
    1942:	f0 2d       	mov	r31, r0
    1944:	0c ee       	ldi	r16, 0xEC	; 236
    1946:	1f ef       	ldi	r17, 0xFF	; 255
    1948:	2c ee       	ldi	r18, 0xEC	; 236
    194a:	3f ef       	ldi	r19, 0xFF	; 255
    194c:	4b ee       	ldi	r20, 0xEB	; 235
    194e:	5f ef       	ldi	r21, 0xFF	; 255
    1950:	6a ed       	ldi	r22, 0xDA	; 218
    1952:	71 e0       	ldi	r23, 0x01	; 1
    1954:	c5 01       	movw	r24, r10
    1956:	0b dd       	rcall	.-1514   	; 0x136e <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", -10, 0, 0, 10);
    1958:	6e 01       	movw	r12, r28
    195a:	e7 e2       	ldi	r30, 0x27	; 39
    195c:	ce 0e       	add	r12, r30
    195e:	d1 1c       	adc	r13, r1
    1960:	0f 2e       	mov	r0, r31
    1962:	fa e0       	ldi	r31, 0x0A	; 10
    1964:	ef 2e       	mov	r14, r31
    1966:	f1 2c       	mov	r15, r1
    1968:	f0 2d       	mov	r31, r0
    196a:	00 e0       	ldi	r16, 0x00	; 0
    196c:	10 e0       	ldi	r17, 0x00	; 0
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	46 ef       	ldi	r20, 0xF6	; 246
    1974:	5f ef       	ldi	r21, 0xFF	; 255
    1976:	64 ee       	ldi	r22, 0xE4	; 228
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	c6 01       	movw	r24, r12
    197c:	f8 dc       	rcall	.-1552   	; 0x136e <MATLAB_MF>
	struct mf_type off_left;
	MATLAB_MF(&off_left, "off_left", 5, 20, 20, 21);
    197e:	2e 01       	movw	r4, r28
    1980:	fd e3       	ldi	r31, 0x3D	; 61
    1982:	4f 0e       	add	r4, r31
    1984:	51 1c       	adc	r5, r1
    1986:	0f 2e       	mov	r0, r31
    1988:	f5 e1       	ldi	r31, 0x15	; 21
    198a:	ef 2e       	mov	r14, r31
    198c:	f1 2c       	mov	r15, r1
    198e:	f0 2d       	mov	r31, r0
    1990:	04 e1       	ldi	r16, 0x14	; 20
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	24 e1       	ldi	r18, 0x14	; 20
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	45 e0       	ldi	r20, 0x05	; 5
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	6b ee       	ldi	r22, 0xEB	; 235
    199e:	71 e0       	ldi	r23, 0x01	; 1
    19a0:	c2 01       	movw	r24, r4
    19a2:	e5 dc       	rcall	.-1590   	; 0x136e <MATLAB_MF>

	// Linked list for MFs
	orientation.membership_functions = &off_right;
    19a4:	be 86       	std	Y+14, r11	; 0x0e
    19a6:	ad 86       	std	Y+13, r10	; 0x0d
	off_right.next = &middle;
    19a8:	de a2       	std	Y+38, r13	; 0x26
    19aa:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &off_left;
    19ac:	5c ae       	std	Y+60, r5	; 0x3c
    19ae:	4b ae       	std	Y+59, r4	; 0x3b
	off_left.next = NULL;
    19b0:	63 96       	adiw	r28, 0x13	; 19
    19b2:	1f ae       	std	Y+63, r1	; 0x3f
    19b4:	1e ae       	std	Y+62, r1	; 0x3e
    19b6:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    19b8:	6e 01       	movw	r12, r28
    19ba:	23 e5       	ldi	r18, 0x53	; 83
    19bc:	c2 0e       	add	r12, r18
    19be:	d1 1c       	adc	r13, r1
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	e4 ef       	ldi	r30, 0xF4	; 244
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	d6 01       	movw	r26, r12
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	8a 95       	dec	r24
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <stop+0x102>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2600, 2660, 2660, 2720);
    19d0:	3e 01       	movw	r6, r28
    19d2:	83 e6       	ldi	r24, 0x63	; 99
    19d4:	68 0e       	add	r6, r24
    19d6:	71 1c       	adc	r7, r1
    19d8:	0f 2e       	mov	r0, r31
    19da:	f0 ea       	ldi	r31, 0xA0	; 160
    19dc:	ef 2e       	mov	r14, r31
    19de:	fa e0       	ldi	r31, 0x0A	; 10
    19e0:	ff 2e       	mov	r15, r31
    19e2:	f0 2d       	mov	r31, r0
    19e4:	04 e6       	ldi	r16, 0x64	; 100
    19e6:	1a e0       	ldi	r17, 0x0A	; 10
    19e8:	24 e6       	ldi	r18, 0x64	; 100
    19ea:	3a e0       	ldi	r19, 0x0A	; 10
    19ec:	48 e2       	ldi	r20, 0x28	; 40
    19ee:	5a e0       	ldi	r21, 0x0A	; 10
    19f0:	67 e5       	ldi	r22, 0x57	; 87
    19f2:	71 e0       	ldi	r23, 0x01	; 1
    19f4:	c3 01       	movw	r24, r6
    19f6:	bb dc       	rcall	.-1674   	; 0x136e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2800, 2820, 2820, 2840);
    19f8:	5e 01       	movw	r10, r28
    19fa:	e9 e7       	ldi	r30, 0x79	; 121
    19fc:	ae 0e       	add	r10, r30
    19fe:	b1 1c       	adc	r11, r1
    1a00:	0f 2e       	mov	r0, r31
    1a02:	f8 e1       	ldi	r31, 0x18	; 24
    1a04:	ef 2e       	mov	r14, r31
    1a06:	fb e0       	ldi	r31, 0x0B	; 11
    1a08:	ff 2e       	mov	r15, r31
    1a0a:	f0 2d       	mov	r31, r0
    1a0c:	04 e0       	ldi	r16, 0x04	; 4
    1a0e:	1b e0       	ldi	r17, 0x0B	; 11
    1a10:	24 e0       	ldi	r18, 0x04	; 4
    1a12:	3b e0       	ldi	r19, 0x0B	; 11
    1a14:	40 ef       	ldi	r20, 0xF0	; 240
    1a16:	5a e0       	ldi	r21, 0x0A	; 10
    1a18:	6e ed       	ldi	r22, 0xDE	; 222
    1a1a:	71 e0       	ldi	r23, 0x01	; 1
    1a1c:	c5 01       	movw	r24, r10
    1a1e:	a7 dc       	rcall	.-1714   	; 0x136e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2480, 2500, 2500, 2520);
    1a20:	4e 01       	movw	r8, r28
    1a22:	ff e8       	ldi	r31, 0x8F	; 143
    1a24:	8f 0e       	add	r8, r31
    1a26:	91 1c       	adc	r9, r1
    1a28:	0f 2e       	mov	r0, r31
    1a2a:	f8 ed       	ldi	r31, 0xD8	; 216
    1a2c:	ef 2e       	mov	r14, r31
    1a2e:	f9 e0       	ldi	r31, 0x09	; 9
    1a30:	ff 2e       	mov	r15, r31
    1a32:	f0 2d       	mov	r31, r0
    1a34:	04 ec       	ldi	r16, 0xC4	; 196
    1a36:	19 e0       	ldi	r17, 0x09	; 9
    1a38:	24 ec       	ldi	r18, 0xC4	; 196
    1a3a:	39 e0       	ldi	r19, 0x09	; 9
    1a3c:	40 eb       	ldi	r20, 0xB0	; 176
    1a3e:	59 e0       	ldi	r21, 0x09	; 9
    1a40:	6f ee       	ldi	r22, 0xEF	; 239
    1a42:	71 e0       	ldi	r23, 0x01	; 1
    1a44:	c4 01       	movw	r24, r8
    1a46:	93 dc       	rcall	.-1754   	; 0x136e <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    1a48:	f6 01       	movw	r30, r12
    1a4a:	75 86       	std	Z+13, r7	; 0x0d
    1a4c:	64 86       	std	Z+12, r6	; 0x0c
	straight.next = &left;
    1a4e:	f3 01       	movw	r30, r6
    1a50:	95 8a       	std	Z+21, r9	; 0x15
    1a52:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &right;
    1a54:	f4 01       	movw	r30, r8
    1a56:	b5 8a       	std	Z+21, r11	; 0x15
    1a58:	a4 8a       	std	Z+20, r10	; 0x14
	right.next = NULL;
    1a5a:	f5 01       	movw	r30, r10
    1a5c:	15 8a       	std	Z+21, r1	; 0x15
    1a5e:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &orientation;
    1a60:	ce 01       	movw	r24, r28
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	90 93 1d 03 	sts	0x031D, r25
    1a68:	80 93 1c 03 	sts	0x031C, r24
	orientation.next = NULL;
    1a6c:	18 8a       	std	Y+16, r1	; 0x10
    1a6e:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    1a70:	d0 92 1b 03 	sts	0x031B, r13
    1a74:	c0 92 1a 03 	sts	0x031A, r12
	servo.next = NULL;
    1a78:	f6 01       	movw	r30, r12
    1a7a:	17 86       	std	Z+15, r1	; 0x0f
    1a7c:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    1a7e:	8c 55       	subi	r24, 0x5C	; 92
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	90 93 1f 03 	sts	0x031F, r25
    1a86:	80 93 1e 03 	sts	0x031E, r24
	struct rule_type rule2; rule1.next = &rule2;
    1a8a:	de 01       	movw	r26, r28
    1a8c:	a5 55       	subi	r26, 0x55	; 85
    1a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a90:	fc 01       	movw	r30, r24
    1a92:	b5 83       	std	Z+5, r27	; 0x05
    1a94:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 54       	subi	r22, 0x4F	; 79
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	15 96       	adiw	r26, 0x05	; 5
    1a9e:	7c 93       	st	X, r23
    1aa0:	6e 93       	st	-X, r22
    1aa2:	14 97       	sbiw	r26, 0x04	; 4
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	15 82       	std	Z+5, r1	; 0x05
    1aa8:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1aaa:	ae 01       	movw	r20, r28
    1aac:	49 54       	subi	r20, 0x49	; 73
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	51 83       	std	Z+1, r21	; 0x01
    1ab4:	40 83       	st	Z, r20
    1ab6:	fa 01       	movw	r30, r20
    1ab8:	13 82       	std	Z+3, r1	; 0x03
    1aba:	12 82       	std	Z+2, r1	; 0x02
    1abc:	9e 01       	movw	r18, r28
    1abe:	25 54       	subi	r18, 0x45	; 69
    1ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	33 83       	std	Z+3, r19	; 0x03
    1ac6:	22 83       	std	Z+2, r18	; 0x02
    1ac8:	f9 01       	movw	r30, r18
    1aca:	13 82       	std	Z+3, r1	; 0x03
    1acc:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &middle.value; then1.value = &straight.value;
    1ace:	84 57       	subi	r24, 0x74	; 116
    1ad0:	91 09       	sbc	r25, r1
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	fa e0       	ldi	r31, 0x0A	; 10
    1ada:	6f 0e       	add	r6, r31
    1adc:	71 1c       	adc	r7, r1
    1ade:	f9 01       	movw	r30, r18
    1ae0:	71 82       	std	Z+1, r7	; 0x01
    1ae2:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1ae4:	2c 5f       	subi	r18, 0xFC	; 252
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	3c 93       	st	X, r19
    1aec:	2e 93       	st	-X, r18
    1aee:	f9 01       	movw	r30, r18
    1af0:	13 82       	std	Z+3, r1	; 0x03
    1af2:	12 82       	std	Z+2, r1	; 0x02
    1af4:	8e 56       	subi	r24, 0x6E	; 110
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	13 96       	adiw	r26, 0x03	; 3
    1afa:	9c 93       	st	X, r25
    1afc:	8e 93       	st	-X, r24
    1afe:	12 97       	sbiw	r26, 0x02	; 2
    1b00:	fc 01       	movw	r30, r24
    1b02:	13 82       	std	Z+3, r1	; 0x03
    1b04:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &off_right.value; then2.value = &left.value;
    1b06:	4c 59       	subi	r20, 0x9C	; 156
    1b08:	51 09       	sbc	r21, r1
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	51 83       	std	Z+1, r21	; 0x01
    1b0e:	40 83       	st	Z, r20
    1b10:	fa e0       	ldi	r31, 0x0A	; 10
    1b12:	8f 0e       	add	r8, r31
    1b14:	91 1c       	adc	r9, r1
    1b16:	fc 01       	movw	r30, r24
    1b18:	91 82       	std	Z+1, r9	; 0x01
    1b1a:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1b1c:	04 96       	adiw	r24, 0x04	; 4
    1b1e:	fb 01       	movw	r30, r22
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	fc 01       	movw	r30, r24
    1b26:	13 82       	std	Z+3, r1	; 0x03
    1b28:	12 82       	std	Z+2, r1	; 0x02
    1b2a:	90 96       	adiw	r26, 0x20	; 32
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	13 96       	adiw	r26, 0x03	; 3
    1b34:	1c 92       	st	X, r1
    1b36:	1e 92       	st	-X, r1
    1b38:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &off_left.value; then3.value = &right.value;
    1b3a:	fa e0       	ldi	r31, 0x0A	; 10
    1b3c:	4f 0e       	add	r4, r31
    1b3e:	51 1c       	adc	r5, r1
    1b40:	fc 01       	movw	r30, r24
    1b42:	51 82       	std	Z+1, r5	; 0x01
    1b44:	40 82       	st	Z, r4
    1b46:	fa e0       	ldi	r31, 0x0A	; 10
    1b48:	af 0e       	add	r10, r31
    1b4a:	b1 1c       	adc	r11, r1
    1b4c:	ad 92       	st	X+, r10
    1b4e:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    1b50:	e4 da       	rcall	.-2616   	; 0x111a <fuzzification>
	rule_evaluation();
    1b52:	0a db       	rcall	.-2540   	; 0x1168 <rule_evaluation>
	defuzzification();
    1b54:	4f db       	rcall	.-2402   	; 0x11f4 <defuzzification>
	if (servo.value > MAXLEFT)
    1b56:	f6 01       	movw	r30, r12
    1b58:	82 85       	ldd	r24, Z+10	; 0x0a
    1b5a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b5c:	87 3e       	cpi	r24, 0xE7	; 231
    1b5e:	f7 e0       	ldi	r31, 0x07	; 7
    1b60:	9f 07       	cpc	r25, r31
    1b62:	24 f0       	brlt	.+8      	; 0x1b6c <stop+0x2a6>
	{
		setServo(MAXLEFT);
    1b64:	86 ee       	ldi	r24, 0xE6	; 230
    1b66:	97 e0       	ldi	r25, 0x07	; 7
    1b68:	34 dd       	rcall	.-1432   	; 0x15d2 <setServo>
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <stop+0x2b8>
	}
	else if (servo.value < MAXRIGHT)
    1b6c:	84 3e       	cpi	r24, 0xE4	; 228
    1b6e:	2c e0       	ldi	r18, 0x0C	; 12
    1b70:	92 07       	cpc	r25, r18
    1b72:	24 f4       	brge	.+8      	; 0x1b7c <stop+0x2b6>
	{
		setServo(MAXRIGHT);
    1b74:	84 ee       	ldi	r24, 0xE4	; 228
    1b76:	9c e0       	ldi	r25, 0x0C	; 12
    1b78:	2c dd       	rcall	.-1448   	; 0x15d2 <setServo>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <stop+0x2b8>
	}
	else
	{
		setServo(servo.value);
    1b7c:	2a dd       	rcall	.-1452   	; 0x15d2 <setServo>
	}
	
    1b7e:	c2 53       	subi	r28, 0x32	; 50
    1b80:	df 4f       	sbci	r29, 0xFF	; 255
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	9f 90       	pop	r9
    1ba2:	8f 90       	pop	r8
    1ba4:	7f 90       	pop	r7
    1ba6:	6f 90       	pop	r6
    1ba8:	5f 90       	pop	r5
    1baa:	4f 90       	pop	r4
    1bac:	08 95       	ret

00001bae <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	0b b6       	in	r0, 0x3b	; 59
    1bba:	0f 92       	push	r0
    1bbc:	2f 93       	push	r18
    1bbe:	3f 93       	push	r19
    1bc0:	4f 93       	push	r20
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	af 93       	push	r26
    1bc8:	bf 93       	push	r27
    1bca:	ef 93       	push	r30
    1bcc:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1bce:	80 91 18 03 	lds	r24, 0x0318
    1bd2:	90 91 19 03 	lds	r25, 0x0319
    1bd6:	80 34       	cpi	r24, 0x40	; 64
    1bd8:	91 05       	cpc	r25, r1
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 44 03 	sts	0x0344, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1be2:	80 91 c6 00 	lds	r24, 0x00C6
    1be6:	16 c0       	rjmp	.+44     	; 0x1c14 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1be8:	80 34       	cpi	r24, 0x40	; 64
    1bea:	91 05       	cpc	r25, r1
    1bec:	e8 f4       	brcc	.+58     	; 0x1c28 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1bee:	e6 e1       	ldi	r30, 0x16	; 22
    1bf0:	f3 e0       	ldi	r31, 0x03	; 3
    1bf2:	20 81       	ld	r18, Z
    1bf4:	31 81       	ldd	r19, Z+1	; 0x01
    1bf6:	40 91 c6 00 	lds	r20, 0x00C6
    1bfa:	d9 01       	movw	r26, r18
    1bfc:	ac 52       	subi	r26, 0x2C	; 44
    1bfe:	bd 4f       	sbci	r27, 0xFD	; 253
    1c00:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1c02:	2f 5f       	subi	r18, 0xFF	; 255
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	31 83       	std	Z+1, r19	; 0x01
    1c08:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	90 93 19 03 	sts	0x0319, r25
    1c10:	80 93 18 03 	sts	0x0318, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1c14:	80 91 18 03 	lds	r24, 0x0318
    1c18:	90 91 19 03 	lds	r25, 0x0319
    1c1c:	80 34       	cpi	r24, 0x40	; 64
    1c1e:	91 05       	cpc	r25, r1
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	80 93 42 03 	sts	0x0342, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1c28:	80 91 16 03 	lds	r24, 0x0316
    1c2c:	90 91 17 03 	lds	r25, 0x0317
    1c30:	80 34       	cpi	r24, 0x40	; 64
    1c32:	91 05       	cpc	r25, r1
    1c34:	21 f4       	brne	.+8      	; 0x1c3e <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1c36:	10 92 17 03 	sts	0x0317, r1
    1c3a:	10 92 16 03 	sts	0x0316, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 41 03 	sts	0x0341, r24
}
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	4f 91       	pop	r20
    1c52:	3f 91       	pop	r19
    1c54:	2f 91       	pop	r18
    1c56:	0f 90       	pop	r0
    1c58:	0b be       	out	0x3b, r0	; 59
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_22>:




ISR(USART0_TX_vect)
{
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	0b b6       	in	r0, 0x3b	; 59
    1c70:	0f 92       	push	r0
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1c7a:	80 91 d2 02 	lds	r24, 0x02D2
    1c7e:	90 91 d3 02 	lds	r25, 0x02D3
    1c82:	80 34       	cpi	r24, 0x40	; 64
    1c84:	91 05       	cpc	r25, r1
    1c86:	19 f4       	brne	.+6      	; 0x1c8e <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1c88:	10 92 40 03 	sts	0x0340, r1
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1c8e:	89 2b       	or	r24, r25
    1c90:	b9 f0       	breq	.+46     	; 0x1cc0 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1c92:	e0 91 ce 02 	lds	r30, 0x02CE
    1c96:	f0 91 cf 02 	lds	r31, 0x02CF
    1c9a:	e2 57       	subi	r30, 0x72	; 114
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1ca4:	ee ec       	ldi	r30, 0xCE	; 206
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1cb2:	e2 ed       	ldi	r30, 0xD2	; 210
    1cb4:	f2 e0       	ldi	r31, 0x02	; 2
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1cc0:	80 91 ce 02 	lds	r24, 0x02CE
    1cc4:	90 91 cf 02 	lds	r25, 0x02CF
    1cc8:	80 34       	cpi	r24, 0x40	; 64
    1cca:	91 05       	cpc	r25, r1
    1ccc:	21 f4       	brne	.+8      	; 0x1cd6 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1cce:	10 92 cf 02 	sts	0x02CF, r1
    1cd2:	10 92 ce 02 	sts	0x02CE, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1cd6:	80 91 d2 02 	lds	r24, 0x02D2
    1cda:	90 91 d3 02 	lds	r25, 0x02D3
    1cde:	89 2b       	or	r24, r25
    1ce0:	39 f4       	brne	.+14     	; 0x1cf0 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1ce2:	10 92 43 03 	sts	0x0343, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1ce6:	e1 ec       	ldi	r30, 0xC1	; 193
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 7b       	andi	r24, 0xBF	; 191
    1cee:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	0f 90       	pop	r0
    1cfa:	0b be       	out	0x3b, r0	; 59
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__subsf3>:
    1d06:	50 58       	subi	r21, 0x80	; 128

00001d08 <__addsf3>:
    1d08:	bb 27       	eor	r27, r27
    1d0a:	aa 27       	eor	r26, r26
    1d0c:	0e d0       	rcall	.+28     	; 0x1d2a <__addsf3x>
    1d0e:	4d c1       	rjmp	.+666    	; 0x1faa <__fp_round>
    1d10:	3e d1       	rcall	.+636    	; 0x1f8e <__fp_pscA>
    1d12:	30 f0       	brcs	.+12     	; 0x1d20 <__addsf3+0x18>
    1d14:	43 d1       	rcall	.+646    	; 0x1f9c <__fp_pscB>
    1d16:	20 f0       	brcs	.+8      	; 0x1d20 <__addsf3+0x18>
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <__addsf3+0x1e>
    1d1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d1c:	11 f4       	brne	.+4      	; 0x1d22 <__addsf3+0x1a>
    1d1e:	1e f4       	brtc	.+6      	; 0x1d26 <__addsf3+0x1e>
    1d20:	33 c1       	rjmp	.+614    	; 0x1f88 <__fp_nan>
    1d22:	0e f4       	brtc	.+2      	; 0x1d26 <__addsf3+0x1e>
    1d24:	e0 95       	com	r30
    1d26:	e7 fb       	bst	r30, 7
    1d28:	29 c1       	rjmp	.+594    	; 0x1f7c <__fp_inf>

00001d2a <__addsf3x>:
    1d2a:	e9 2f       	mov	r30, r25
    1d2c:	4f d1       	rcall	.+670    	; 0x1fcc <__fp_split3>
    1d2e:	80 f3       	brcs	.-32     	; 0x1d10 <__addsf3+0x8>
    1d30:	ba 17       	cp	r27, r26
    1d32:	62 07       	cpc	r22, r18
    1d34:	73 07       	cpc	r23, r19
    1d36:	84 07       	cpc	r24, r20
    1d38:	95 07       	cpc	r25, r21
    1d3a:	18 f0       	brcs	.+6      	; 0x1d42 <__addsf3x+0x18>
    1d3c:	71 f4       	brne	.+28     	; 0x1d5a <__addsf3x+0x30>
    1d3e:	9e f5       	brtc	.+102    	; 0x1da6 <__addsf3x+0x7c>
    1d40:	67 c1       	rjmp	.+718    	; 0x2010 <__fp_zero>
    1d42:	0e f4       	brtc	.+2      	; 0x1d46 <__addsf3x+0x1c>
    1d44:	e0 95       	com	r30
    1d46:	0b 2e       	mov	r0, r27
    1d48:	ba 2f       	mov	r27, r26
    1d4a:	a0 2d       	mov	r26, r0
    1d4c:	0b 01       	movw	r0, r22
    1d4e:	b9 01       	movw	r22, r18
    1d50:	90 01       	movw	r18, r0
    1d52:	0c 01       	movw	r0, r24
    1d54:	ca 01       	movw	r24, r20
    1d56:	a0 01       	movw	r20, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	ff 27       	eor	r31, r31
    1d5c:	59 1b       	sub	r21, r25
    1d5e:	99 f0       	breq	.+38     	; 0x1d86 <__addsf3x+0x5c>
    1d60:	59 3f       	cpi	r21, 0xF9	; 249
    1d62:	50 f4       	brcc	.+20     	; 0x1d78 <__addsf3x+0x4e>
    1d64:	50 3e       	cpi	r21, 0xE0	; 224
    1d66:	68 f1       	brcs	.+90     	; 0x1dc2 <__addsf3x+0x98>
    1d68:	1a 16       	cp	r1, r26
    1d6a:	f0 40       	sbci	r31, 0x00	; 0
    1d6c:	a2 2f       	mov	r26, r18
    1d6e:	23 2f       	mov	r18, r19
    1d70:	34 2f       	mov	r19, r20
    1d72:	44 27       	eor	r20, r20
    1d74:	58 5f       	subi	r21, 0xF8	; 248
    1d76:	f3 cf       	rjmp	.-26     	; 0x1d5e <__addsf3x+0x34>
    1d78:	46 95       	lsr	r20
    1d7a:	37 95       	ror	r19
    1d7c:	27 95       	ror	r18
    1d7e:	a7 95       	ror	r26
    1d80:	f0 40       	sbci	r31, 0x00	; 0
    1d82:	53 95       	inc	r21
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__addsf3x+0x4e>
    1d86:	7e f4       	brtc	.+30     	; 0x1da6 <__addsf3x+0x7c>
    1d88:	1f 16       	cp	r1, r31
    1d8a:	ba 0b       	sbc	r27, r26
    1d8c:	62 0b       	sbc	r22, r18
    1d8e:	73 0b       	sbc	r23, r19
    1d90:	84 0b       	sbc	r24, r20
    1d92:	ba f0       	brmi	.+46     	; 0x1dc2 <__addsf3x+0x98>
    1d94:	91 50       	subi	r25, 0x01	; 1
    1d96:	a1 f0       	breq	.+40     	; 0x1dc0 <__addsf3x+0x96>
    1d98:	ff 0f       	add	r31, r31
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	66 1f       	adc	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	c2 f7       	brpl	.-16     	; 0x1d94 <__addsf3x+0x6a>
    1da4:	0e c0       	rjmp	.+28     	; 0x1dc2 <__addsf3x+0x98>
    1da6:	ba 0f       	add	r27, r26
    1da8:	62 1f       	adc	r22, r18
    1daa:	73 1f       	adc	r23, r19
    1dac:	84 1f       	adc	r24, r20
    1dae:	48 f4       	brcc	.+18     	; 0x1dc2 <__addsf3x+0x98>
    1db0:	87 95       	ror	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b7 95       	ror	r27
    1db8:	f7 95       	ror	r31
    1dba:	9e 3f       	cpi	r25, 0xFE	; 254
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <__addsf3x+0x96>
    1dbe:	b3 cf       	rjmp	.-154    	; 0x1d26 <__addsf3+0x1e>
    1dc0:	93 95       	inc	r25
    1dc2:	88 0f       	add	r24, r24
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <__addsf3x+0x9e>
    1dc6:	99 27       	eor	r25, r25
    1dc8:	ee 0f       	add	r30, r30
    1dca:	97 95       	ror	r25
    1dcc:	87 95       	ror	r24
    1dce:	08 95       	ret

00001dd0 <__divsf3>:
    1dd0:	0c d0       	rcall	.+24     	; 0x1dea <__divsf3x>
    1dd2:	eb c0       	rjmp	.+470    	; 0x1faa <__fp_round>
    1dd4:	e3 d0       	rcall	.+454    	; 0x1f9c <__fp_pscB>
    1dd6:	40 f0       	brcs	.+16     	; 0x1de8 <__divsf3+0x18>
    1dd8:	da d0       	rcall	.+436    	; 0x1f8e <__fp_pscA>
    1dda:	30 f0       	brcs	.+12     	; 0x1de8 <__divsf3+0x18>
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <__divsf3+0x16>
    1dde:	5f 3f       	cpi	r21, 0xFF	; 255
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <__divsf3+0x18>
    1de2:	cc c0       	rjmp	.+408    	; 0x1f7c <__fp_inf>
    1de4:	51 11       	cpse	r21, r1
    1de6:	15 c1       	rjmp	.+554    	; 0x2012 <__fp_szero>
    1de8:	cf c0       	rjmp	.+414    	; 0x1f88 <__fp_nan>

00001dea <__divsf3x>:
    1dea:	f0 d0       	rcall	.+480    	; 0x1fcc <__fp_split3>
    1dec:	98 f3       	brcs	.-26     	; 0x1dd4 <__divsf3+0x4>

00001dee <__divsf3_pse>:
    1dee:	99 23       	and	r25, r25
    1df0:	c9 f3       	breq	.-14     	; 0x1de4 <__divsf3+0x14>
    1df2:	55 23       	and	r21, r21
    1df4:	b1 f3       	breq	.-20     	; 0x1de2 <__divsf3+0x12>
    1df6:	95 1b       	sub	r25, r21
    1df8:	55 0b       	sbc	r21, r21
    1dfa:	bb 27       	eor	r27, r27
    1dfc:	aa 27       	eor	r26, r26
    1dfe:	62 17       	cp	r22, r18
    1e00:	73 07       	cpc	r23, r19
    1e02:	84 07       	cpc	r24, r20
    1e04:	38 f0       	brcs	.+14     	; 0x1e14 <__divsf3_pse+0x26>
    1e06:	9f 5f       	subi	r25, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	44 1f       	adc	r20, r20
    1e10:	aa 1f       	adc	r26, r26
    1e12:	a9 f3       	breq	.-22     	; 0x1dfe <__divsf3_pse+0x10>
    1e14:	33 d0       	rcall	.+102    	; 0x1e7c <__divsf3_pse+0x8e>
    1e16:	0e 2e       	mov	r0, r30
    1e18:	3a f0       	brmi	.+14     	; 0x1e28 <__divsf3_pse+0x3a>
    1e1a:	e0 e8       	ldi	r30, 0x80	; 128
    1e1c:	30 d0       	rcall	.+96     	; 0x1e7e <__divsf3_pse+0x90>
    1e1e:	91 50       	subi	r25, 0x01	; 1
    1e20:	50 40       	sbci	r21, 0x00	; 0
    1e22:	e6 95       	lsr	r30
    1e24:	00 1c       	adc	r0, r0
    1e26:	ca f7       	brpl	.-14     	; 0x1e1a <__divsf3_pse+0x2c>
    1e28:	29 d0       	rcall	.+82     	; 0x1e7c <__divsf3_pse+0x8e>
    1e2a:	fe 2f       	mov	r31, r30
    1e2c:	27 d0       	rcall	.+78     	; 0x1e7c <__divsf3_pse+0x8e>
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	bb 1f       	adc	r27, r27
    1e36:	26 17       	cp	r18, r22
    1e38:	37 07       	cpc	r19, r23
    1e3a:	48 07       	cpc	r20, r24
    1e3c:	ab 07       	cpc	r26, r27
    1e3e:	b0 e8       	ldi	r27, 0x80	; 128
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <__divsf3_pse+0x56>
    1e42:	bb 0b       	sbc	r27, r27
    1e44:	80 2d       	mov	r24, r0
    1e46:	bf 01       	movw	r22, r30
    1e48:	ff 27       	eor	r31, r31
    1e4a:	93 58       	subi	r25, 0x83	; 131
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	2a f0       	brmi	.+10     	; 0x1e5a <__divsf3_pse+0x6c>
    1e50:	9e 3f       	cpi	r25, 0xFE	; 254
    1e52:	51 05       	cpc	r21, r1
    1e54:	68 f0       	brcs	.+26     	; 0x1e70 <__divsf3_pse+0x82>
    1e56:	92 c0       	rjmp	.+292    	; 0x1f7c <__fp_inf>
    1e58:	dc c0       	rjmp	.+440    	; 0x2012 <__fp_szero>
    1e5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5c:	ec f3       	brlt	.-6      	; 0x1e58 <__divsf3_pse+0x6a>
    1e5e:	98 3e       	cpi	r25, 0xE8	; 232
    1e60:	dc f3       	brlt	.-10     	; 0x1e58 <__divsf3_pse+0x6a>
    1e62:	86 95       	lsr	r24
    1e64:	77 95       	ror	r23
    1e66:	67 95       	ror	r22
    1e68:	b7 95       	ror	r27
    1e6a:	f7 95       	ror	r31
    1e6c:	9f 5f       	subi	r25, 0xFF	; 255
    1e6e:	c9 f7       	brne	.-14     	; 0x1e62 <__divsf3_pse+0x74>
    1e70:	88 0f       	add	r24, r24
    1e72:	91 1d       	adc	r25, r1
    1e74:	96 95       	lsr	r25
    1e76:	87 95       	ror	r24
    1e78:	97 f9       	bld	r25, 7
    1e7a:	08 95       	ret
    1e7c:	e1 e0       	ldi	r30, 0x01	; 1
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	bb 1f       	adc	r27, r27
    1e86:	62 17       	cp	r22, r18
    1e88:	73 07       	cpc	r23, r19
    1e8a:	84 07       	cpc	r24, r20
    1e8c:	ba 07       	cpc	r27, r26
    1e8e:	20 f0       	brcs	.+8      	; 0x1e98 <__divsf3_pse+0xaa>
    1e90:	62 1b       	sub	r22, r18
    1e92:	73 0b       	sbc	r23, r19
    1e94:	84 0b       	sbc	r24, r20
    1e96:	ba 0b       	sbc	r27, r26
    1e98:	ee 1f       	adc	r30, r30
    1e9a:	88 f7       	brcc	.-30     	; 0x1e7e <__divsf3_pse+0x90>
    1e9c:	e0 95       	com	r30
    1e9e:	08 95       	ret

00001ea0 <__fixsfsi>:
    1ea0:	04 d0       	rcall	.+8      	; 0x1eaa <__fixunssfsi>
    1ea2:	68 94       	set
    1ea4:	b1 11       	cpse	r27, r1
    1ea6:	b5 c0       	rjmp	.+362    	; 0x2012 <__fp_szero>
    1ea8:	08 95       	ret

00001eaa <__fixunssfsi>:
    1eaa:	98 d0       	rcall	.+304    	; 0x1fdc <__fp_splitA>
    1eac:	88 f0       	brcs	.+34     	; 0x1ed0 <__fixunssfsi+0x26>
    1eae:	9f 57       	subi	r25, 0x7F	; 127
    1eb0:	90 f0       	brcs	.+36     	; 0x1ed6 <__fixunssfsi+0x2c>
    1eb2:	b9 2f       	mov	r27, r25
    1eb4:	99 27       	eor	r25, r25
    1eb6:	b7 51       	subi	r27, 0x17	; 23
    1eb8:	a0 f0       	brcs	.+40     	; 0x1ee2 <__fixunssfsi+0x38>
    1eba:	d1 f0       	breq	.+52     	; 0x1ef0 <__fixunssfsi+0x46>
    1ebc:	66 0f       	add	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	1a f0       	brmi	.+6      	; 0x1ecc <__fixunssfsi+0x22>
    1ec6:	ba 95       	dec	r27
    1ec8:	c9 f7       	brne	.-14     	; 0x1ebc <__fixunssfsi+0x12>
    1eca:	12 c0       	rjmp	.+36     	; 0x1ef0 <__fixunssfsi+0x46>
    1ecc:	b1 30       	cpi	r27, 0x01	; 1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <__fixunssfsi+0x46>
    1ed0:	9f d0       	rcall	.+318    	; 0x2010 <__fp_zero>
    1ed2:	b1 e0       	ldi	r27, 0x01	; 1
    1ed4:	08 95       	ret
    1ed6:	9c c0       	rjmp	.+312    	; 0x2010 <__fp_zero>
    1ed8:	67 2f       	mov	r22, r23
    1eda:	78 2f       	mov	r23, r24
    1edc:	88 27       	eor	r24, r24
    1ede:	b8 5f       	subi	r27, 0xF8	; 248
    1ee0:	39 f0       	breq	.+14     	; 0x1ef0 <__fixunssfsi+0x46>
    1ee2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ee4:	cc f3       	brlt	.-14     	; 0x1ed8 <__fixunssfsi+0x2e>
    1ee6:	86 95       	lsr	r24
    1ee8:	77 95       	ror	r23
    1eea:	67 95       	ror	r22
    1eec:	b3 95       	inc	r27
    1eee:	d9 f7       	brne	.-10     	; 0x1ee6 <__fixunssfsi+0x3c>
    1ef0:	3e f4       	brtc	.+14     	; 0x1f00 <__fixunssfsi+0x56>
    1ef2:	90 95       	com	r25
    1ef4:	80 95       	com	r24
    1ef6:	70 95       	com	r23
    1ef8:	61 95       	neg	r22
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8f 4f       	sbci	r24, 0xFF	; 255
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	08 95       	ret

00001f02 <__floatunsisf>:
    1f02:	e8 94       	clt
    1f04:	09 c0       	rjmp	.+18     	; 0x1f18 <__floatsisf+0x12>

00001f06 <__floatsisf>:
    1f06:	97 fb       	bst	r25, 7
    1f08:	3e f4       	brtc	.+14     	; 0x1f18 <__floatsisf+0x12>
    1f0a:	90 95       	com	r25
    1f0c:	80 95       	com	r24
    1f0e:	70 95       	com	r23
    1f10:	61 95       	neg	r22
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	99 23       	and	r25, r25
    1f1a:	a9 f0       	breq	.+42     	; 0x1f46 <__floatsisf+0x40>
    1f1c:	f9 2f       	mov	r31, r25
    1f1e:	96 e9       	ldi	r25, 0x96	; 150
    1f20:	bb 27       	eor	r27, r27
    1f22:	93 95       	inc	r25
    1f24:	f6 95       	lsr	r31
    1f26:	87 95       	ror	r24
    1f28:	77 95       	ror	r23
    1f2a:	67 95       	ror	r22
    1f2c:	b7 95       	ror	r27
    1f2e:	f1 11       	cpse	r31, r1
    1f30:	f8 cf       	rjmp	.-16     	; 0x1f22 <__floatsisf+0x1c>
    1f32:	fa f4       	brpl	.+62     	; 0x1f72 <__floatsisf+0x6c>
    1f34:	bb 0f       	add	r27, r27
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <__floatsisf+0x36>
    1f38:	60 ff       	sbrs	r22, 0
    1f3a:	1b c0       	rjmp	.+54     	; 0x1f72 <__floatsisf+0x6c>
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	16 c0       	rjmp	.+44     	; 0x1f72 <__floatsisf+0x6c>
    1f46:	88 23       	and	r24, r24
    1f48:	11 f0       	breq	.+4      	; 0x1f4e <__floatsisf+0x48>
    1f4a:	96 e9       	ldi	r25, 0x96	; 150
    1f4c:	11 c0       	rjmp	.+34     	; 0x1f70 <__floatsisf+0x6a>
    1f4e:	77 23       	and	r23, r23
    1f50:	21 f0       	breq	.+8      	; 0x1f5a <__floatsisf+0x54>
    1f52:	9e e8       	ldi	r25, 0x8E	; 142
    1f54:	87 2f       	mov	r24, r23
    1f56:	76 2f       	mov	r23, r22
    1f58:	05 c0       	rjmp	.+10     	; 0x1f64 <__floatsisf+0x5e>
    1f5a:	66 23       	and	r22, r22
    1f5c:	71 f0       	breq	.+28     	; 0x1f7a <__floatsisf+0x74>
    1f5e:	96 e8       	ldi	r25, 0x86	; 134
    1f60:	86 2f       	mov	r24, r22
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	2a f0       	brmi	.+10     	; 0x1f72 <__floatsisf+0x6c>
    1f68:	9a 95       	dec	r25
    1f6a:	66 0f       	add	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	da f7       	brpl	.-10     	; 0x1f68 <__floatsisf+0x62>
    1f72:	88 0f       	add	r24, r24
    1f74:	96 95       	lsr	r25
    1f76:	87 95       	ror	r24
    1f78:	97 f9       	bld	r25, 7
    1f7a:	08 95       	ret

00001f7c <__fp_inf>:
    1f7c:	97 f9       	bld	r25, 7
    1f7e:	9f 67       	ori	r25, 0x7F	; 127
    1f80:	80 e8       	ldi	r24, 0x80	; 128
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	08 95       	ret

00001f88 <__fp_nan>:
    1f88:	9f ef       	ldi	r25, 0xFF	; 255
    1f8a:	80 ec       	ldi	r24, 0xC0	; 192
    1f8c:	08 95       	ret

00001f8e <__fp_pscA>:
    1f8e:	00 24       	eor	r0, r0
    1f90:	0a 94       	dec	r0
    1f92:	16 16       	cp	r1, r22
    1f94:	17 06       	cpc	r1, r23
    1f96:	18 06       	cpc	r1, r24
    1f98:	09 06       	cpc	r0, r25
    1f9a:	08 95       	ret

00001f9c <__fp_pscB>:
    1f9c:	00 24       	eor	r0, r0
    1f9e:	0a 94       	dec	r0
    1fa0:	12 16       	cp	r1, r18
    1fa2:	13 06       	cpc	r1, r19
    1fa4:	14 06       	cpc	r1, r20
    1fa6:	05 06       	cpc	r0, r21
    1fa8:	08 95       	ret

00001faa <__fp_round>:
    1faa:	09 2e       	mov	r0, r25
    1fac:	03 94       	inc	r0
    1fae:	00 0c       	add	r0, r0
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <__fp_round+0xc>
    1fb2:	88 23       	and	r24, r24
    1fb4:	52 f0       	brmi	.+20     	; 0x1fca <__fp_round+0x20>
    1fb6:	bb 0f       	add	r27, r27
    1fb8:	40 f4       	brcc	.+16     	; 0x1fca <__fp_round+0x20>
    1fba:	bf 2b       	or	r27, r31
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <__fp_round+0x18>
    1fbe:	60 ff       	sbrs	r22, 0
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <__fp_round+0x20>
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	08 95       	ret

00001fcc <__fp_split3>:
    1fcc:	57 fd       	sbrc	r21, 7
    1fce:	90 58       	subi	r25, 0x80	; 128
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	59 f0       	breq	.+22     	; 0x1fec <__fp_splitA+0x10>
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	71 f0       	breq	.+28     	; 0x1ff6 <__fp_splitA+0x1a>
    1fda:	47 95       	ror	r20

00001fdc <__fp_splitA>:
    1fdc:	88 0f       	add	r24, r24
    1fde:	97 fb       	bst	r25, 7
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <__fp_splitA+0x20>
    1fe4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <__fp_splitA+0x2a>
    1fe8:	87 95       	ror	r24
    1fea:	08 95       	ret
    1fec:	12 16       	cp	r1, r18
    1fee:	13 06       	cpc	r1, r19
    1ff0:	14 06       	cpc	r1, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	f2 cf       	rjmp	.-28     	; 0x1fda <__fp_split3+0xe>
    1ff6:	46 95       	lsr	r20
    1ff8:	f1 df       	rcall	.-30     	; 0x1fdc <__fp_splitA>
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <__fp_splitA+0x30>
    1ffc:	16 16       	cp	r1, r22
    1ffe:	17 06       	cpc	r1, r23
    2000:	18 06       	cpc	r1, r24
    2002:	99 1f       	adc	r25, r25
    2004:	f1 cf       	rjmp	.-30     	; 0x1fe8 <__fp_splitA+0xc>
    2006:	86 95       	lsr	r24
    2008:	71 05       	cpc	r23, r1
    200a:	61 05       	cpc	r22, r1
    200c:	08 94       	sec
    200e:	08 95       	ret

00002010 <__fp_zero>:
    2010:	e8 94       	clt

00002012 <__fp_szero>:
    2012:	bb 27       	eor	r27, r27
    2014:	66 27       	eor	r22, r22
    2016:	77 27       	eor	r23, r23
    2018:	cb 01       	movw	r24, r22
    201a:	97 f9       	bld	r25, 7
    201c:	08 95       	ret

0000201e <__mulsf3>:
    201e:	0b d0       	rcall	.+22     	; 0x2036 <__mulsf3x>
    2020:	c4 cf       	rjmp	.-120    	; 0x1faa <__fp_round>
    2022:	b5 df       	rcall	.-150    	; 0x1f8e <__fp_pscA>
    2024:	28 f0       	brcs	.+10     	; 0x2030 <__mulsf3+0x12>
    2026:	ba df       	rcall	.-140    	; 0x1f9c <__fp_pscB>
    2028:	18 f0       	brcs	.+6      	; 0x2030 <__mulsf3+0x12>
    202a:	95 23       	and	r25, r21
    202c:	09 f0       	breq	.+2      	; 0x2030 <__mulsf3+0x12>
    202e:	a6 cf       	rjmp	.-180    	; 0x1f7c <__fp_inf>
    2030:	ab cf       	rjmp	.-170    	; 0x1f88 <__fp_nan>
    2032:	11 24       	eor	r1, r1
    2034:	ee cf       	rjmp	.-36     	; 0x2012 <__fp_szero>

00002036 <__mulsf3x>:
    2036:	ca df       	rcall	.-108    	; 0x1fcc <__fp_split3>
    2038:	a0 f3       	brcs	.-24     	; 0x2022 <__mulsf3+0x4>

0000203a <__mulsf3_pse>:
    203a:	95 9f       	mul	r25, r21
    203c:	d1 f3       	breq	.-12     	; 0x2032 <__mulsf3+0x14>
    203e:	95 0f       	add	r25, r21
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	55 1f       	adc	r21, r21
    2044:	62 9f       	mul	r22, r18
    2046:	f0 01       	movw	r30, r0
    2048:	72 9f       	mul	r23, r18
    204a:	bb 27       	eor	r27, r27
    204c:	f0 0d       	add	r31, r0
    204e:	b1 1d       	adc	r27, r1
    2050:	63 9f       	mul	r22, r19
    2052:	aa 27       	eor	r26, r26
    2054:	f0 0d       	add	r31, r0
    2056:	b1 1d       	adc	r27, r1
    2058:	aa 1f       	adc	r26, r26
    205a:	64 9f       	mul	r22, r20
    205c:	66 27       	eor	r22, r22
    205e:	b0 0d       	add	r27, r0
    2060:	a1 1d       	adc	r26, r1
    2062:	66 1f       	adc	r22, r22
    2064:	82 9f       	mul	r24, r18
    2066:	22 27       	eor	r18, r18
    2068:	b0 0d       	add	r27, r0
    206a:	a1 1d       	adc	r26, r1
    206c:	62 1f       	adc	r22, r18
    206e:	73 9f       	mul	r23, r19
    2070:	b0 0d       	add	r27, r0
    2072:	a1 1d       	adc	r26, r1
    2074:	62 1f       	adc	r22, r18
    2076:	83 9f       	mul	r24, r19
    2078:	a0 0d       	add	r26, r0
    207a:	61 1d       	adc	r22, r1
    207c:	22 1f       	adc	r18, r18
    207e:	74 9f       	mul	r23, r20
    2080:	33 27       	eor	r19, r19
    2082:	a0 0d       	add	r26, r0
    2084:	61 1d       	adc	r22, r1
    2086:	23 1f       	adc	r18, r19
    2088:	84 9f       	mul	r24, r20
    208a:	60 0d       	add	r22, r0
    208c:	21 1d       	adc	r18, r1
    208e:	82 2f       	mov	r24, r18
    2090:	76 2f       	mov	r23, r22
    2092:	6a 2f       	mov	r22, r26
    2094:	11 24       	eor	r1, r1
    2096:	9f 57       	subi	r25, 0x7F	; 127
    2098:	50 40       	sbci	r21, 0x00	; 0
    209a:	8a f0       	brmi	.+34     	; 0x20be <__mulsf3_pse+0x84>
    209c:	e1 f0       	breq	.+56     	; 0x20d6 <__mulsf3_pse+0x9c>
    209e:	88 23       	and	r24, r24
    20a0:	4a f0       	brmi	.+18     	; 0x20b4 <__mulsf3_pse+0x7a>
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	bb 1f       	adc	r27, r27
    20a8:	66 1f       	adc	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	91 50       	subi	r25, 0x01	; 1
    20b0:	50 40       	sbci	r21, 0x00	; 0
    20b2:	a9 f7       	brne	.-22     	; 0x209e <__mulsf3_pse+0x64>
    20b4:	9e 3f       	cpi	r25, 0xFE	; 254
    20b6:	51 05       	cpc	r21, r1
    20b8:	70 f0       	brcs	.+28     	; 0x20d6 <__mulsf3_pse+0x9c>
    20ba:	60 cf       	rjmp	.-320    	; 0x1f7c <__fp_inf>
    20bc:	aa cf       	rjmp	.-172    	; 0x2012 <__fp_szero>
    20be:	5f 3f       	cpi	r21, 0xFF	; 255
    20c0:	ec f3       	brlt	.-6      	; 0x20bc <__mulsf3_pse+0x82>
    20c2:	98 3e       	cpi	r25, 0xE8	; 232
    20c4:	dc f3       	brlt	.-10     	; 0x20bc <__mulsf3_pse+0x82>
    20c6:	86 95       	lsr	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f7 95       	ror	r31
    20d0:	e7 95       	ror	r30
    20d2:	9f 5f       	subi	r25, 0xFF	; 255
    20d4:	c1 f7       	brne	.-16     	; 0x20c6 <__mulsf3_pse+0x8c>
    20d6:	fe 2b       	or	r31, r30
    20d8:	88 0f       	add	r24, r24
    20da:	91 1d       	adc	r25, r1
    20dc:	96 95       	lsr	r25
    20de:	87 95       	ror	r24
    20e0:	97 f9       	bld	r25, 7
    20e2:	08 95       	ret

000020e4 <__divmodhi4>:
    20e4:	97 fb       	bst	r25, 7
    20e6:	07 2e       	mov	r0, r23
    20e8:	16 f4       	brtc	.+4      	; 0x20ee <__divmodhi4+0xa>
    20ea:	00 94       	com	r0
    20ec:	06 d0       	rcall	.+12     	; 0x20fa <__divmodhi4_neg1>
    20ee:	77 fd       	sbrc	r23, 7
    20f0:	08 d0       	rcall	.+16     	; 0x2102 <__divmodhi4_neg2>
    20f2:	0b d0       	rcall	.+22     	; 0x210a <__udivmodhi4>
    20f4:	07 fc       	sbrc	r0, 7
    20f6:	05 d0       	rcall	.+10     	; 0x2102 <__divmodhi4_neg2>
    20f8:	3e f4       	brtc	.+14     	; 0x2108 <__divmodhi4_exit>

000020fa <__divmodhi4_neg1>:
    20fa:	90 95       	com	r25
    20fc:	81 95       	neg	r24
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	08 95       	ret

00002102 <__divmodhi4_neg2>:
    2102:	70 95       	com	r23
    2104:	61 95       	neg	r22
    2106:	7f 4f       	sbci	r23, 0xFF	; 255

00002108 <__divmodhi4_exit>:
    2108:	08 95       	ret

0000210a <__udivmodhi4>:
    210a:	aa 1b       	sub	r26, r26
    210c:	bb 1b       	sub	r27, r27
    210e:	51 e1       	ldi	r21, 0x11	; 17
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <__udivmodhi4_ep>

00002112 <__udivmodhi4_loop>:
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	a6 17       	cp	r26, r22
    2118:	b7 07       	cpc	r27, r23
    211a:	10 f0       	brcs	.+4      	; 0x2120 <__udivmodhi4_ep>
    211c:	a6 1b       	sub	r26, r22
    211e:	b7 0b       	sbc	r27, r23

00002120 <__udivmodhi4_ep>:
    2120:	88 1f       	adc	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	5a 95       	dec	r21
    2126:	a9 f7       	brne	.-22     	; 0x2112 <__udivmodhi4_loop>
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	08 95       	ret

00002132 <strcpy>:
    2132:	fb 01       	movw	r30, r22
    2134:	dc 01       	movw	r26, r24
    2136:	01 90       	ld	r0, Z+
    2138:	0d 92       	st	X+, r0
    213a:	00 20       	and	r0, r0
    213c:	e1 f7       	brne	.-8      	; 0x2136 <strcpy+0x4>
    213e:	08 95       	ret

00002140 <_exit>:
    2140:	f8 94       	cli

00002142 <__stop_program>:
    2142:	ff cf       	rjmp	.-2      	; 0x2142 <__stop_program>
