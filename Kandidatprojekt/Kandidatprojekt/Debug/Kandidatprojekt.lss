
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001fc  008001fc  00002454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba0  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077e  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000209b  00000000  00000000  0000490a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  000069a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010b54  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e38  00000000  00000000  0001792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00018764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003897  00000000  00000000  0001889c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ec       	ldi	r30, 0xC4	; 196
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3f       	cpi	r26, 0xFC	; 252
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac ef       	ldi	r26, 0xFC	; 252
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3c       	cpi	r26, 0xC1	; 193
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <main>
      c6:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
* Output: speed, (PWM counter)
*/
void FLC_steering(measAng, measErr)
int measAng;
int measErr;
{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	cc 5d       	subi	r28, 0xDC	; 220
      f6:	d2 40       	sbci	r29, 0x02	; 2
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	c5 52       	subi	r28, 0x25	; 37
     104:	dd 4f       	sbci	r29, 0xFD	; 253
     106:	99 83       	std	Y+1, r25	; 0x01
     108:	88 83       	st	Y, r24
     10a:	cb 5d       	subi	r28, 0xDB	; 219
     10c:	d2 40       	sbci	r29, 0x02	; 2
     10e:	c9 52       	subi	r28, 0x29	; 41
     110:	dd 4f       	sbci	r29, 0xFD	; 253
     112:	79 83       	std	Y+1, r23	; 0x01
     114:	68 83       	st	Y, r22
     116:	c7 5d       	subi	r28, 0xD7	; 215
     118:	d2 40       	sbci	r29, 0x02	; 2
	
	
	
	// DECLARATION OF ERROR INPUT
	struct io_type error;		// input 1
	strcpy(error.name, "error");
     11a:	86 e0       	ldi	r24, 0x06	; 6
     11c:	e0 e0       	ldi	r30, 0x00	; 0
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	de 01       	movw	r26, r28
     122:	11 96       	adiw	r26, 0x01	; 1
     124:	01 90       	ld	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	8a 95       	dec	r24
     12a:	e1 f7       	brne	.-8      	; 0x124 <FLC_steering+0x58>
	//MFs
	struct mf_type farRight;				// [-1 0 10 35]
	strcpy(farRight.name, "farRight");		
     12c:	9e 01       	movw	r18, r28
     12e:	2f 5e       	subi	r18, 0xEF	; 239
     130:	3f 4f       	sbci	r19, 0xFF	; 255
     132:	89 e0       	ldi	r24, 0x09	; 9
     134:	e6 e0       	ldi	r30, 0x06	; 6
     136:	f1 e0       	ldi	r31, 0x01	; 1
     138:	d9 01       	movw	r26, r18
     13a:	01 90       	ld	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	8a 95       	dec	r24
     140:	e1 f7       	brne	.-8      	; 0x13a <FLC_steering+0x6e>
	farRight.value = 0;
     142:	1c 8e       	std	Y+28, r1	; 0x1c
     144:	1b 8e       	std	Y+27, r1	; 0x1b
	farRight.point1 = -1;
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	9f ef       	ldi	r25, 0xFF	; 255
     14a:	9e 8f       	std	Y+30, r25	; 0x1e
     14c:	8d 8f       	std	Y+29, r24	; 0x1d
	farRight.point2= 35;
     14e:	83 e2       	ldi	r24, 0x23	; 35
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	98 a3       	std	Y+32, r25	; 0x20
     154:	8f 8f       	std	Y+31, r24	; 0x1f
	farRight.slope1 = 100;
     156:	0f 2e       	mov	r0, r31
     158:	f4 e6       	ldi	r31, 0x64	; 100
     15a:	ef 2e       	mov	r14, r31
     15c:	f1 2c       	mov	r15, r1
     15e:	f0 2d       	mov	r31, r0
     160:	fa a2       	std	Y+34, r15	; 0x22
     162:	e9 a2       	std	Y+33, r14	; 0x21
	farRight.slope2 = 4;
     164:	44 e0       	ldi	r20, 0x04	; 4
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	5c a3       	std	Y+36, r21	; 0x24
     16a:	4b a3       	std	Y+35, r20	; 0x23
	struct mf_type eRight;					// [10 60 70 120]
	strcpy(eRight.name, "eRight");
     16c:	ce 01       	movw	r24, r28
     16e:	87 96       	adiw	r24, 0x27	; 39
     170:	67 e0       	ldi	r22, 0x07	; 7
     172:	ef e0       	ldi	r30, 0x0F	; 15
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	dc 01       	movw	r26, r24
     178:	01 90       	ld	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	6a 95       	dec	r22
     17e:	e1 f7       	brne	.-8      	; 0x178 <FLC_steering+0xac>
	eRight.value = 0;
     180:	1a aa       	std	Y+50, r1	; 0x32
     182:	19 aa       	std	Y+49, r1	; 0x31
	eRight.point1 = 10;
     184:	6a e0       	ldi	r22, 0x0A	; 10
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	7c ab       	std	Y+52, r23	; 0x34
     18a:	6b ab       	std	Y+51, r22	; 0x33
	eRight.point2= 120;
     18c:	68 e7       	ldi	r22, 0x78	; 120
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	7e ab       	std	Y+54, r23	; 0x36
     192:	6d ab       	std	Y+53, r22	; 0x35
	eRight.slope1 = 2;
     194:	62 e0       	ldi	r22, 0x02	; 2
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	78 af       	std	Y+56, r23	; 0x38
     19a:	6f ab       	std	Y+55, r22	; 0x37
	eRight.slope2 = 2;
     19c:	7a af       	std	Y+58, r23	; 0x3a
     19e:	69 af       	std	Y+57, r22	; 0x39
	struct mf_type center;					// [65 115 135 185]
	strcpy(center.name, "center");
     1a0:	17 e0       	ldi	r17, 0x07	; 7
     1a2:	e6 e1       	ldi	r30, 0x16	; 22
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	de 01       	movw	r26, r28
     1a8:	dd 96       	adiw	r26, 0x3d	; 61
     1aa:	01 90       	ld	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	1a 95       	dec	r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <FLC_steering+0xde>
	center.value = 0;
     1b2:	29 96       	adiw	r28, 0x09	; 9
     1b4:	1f ae       	std	Y+63, r1	; 0x3f
     1b6:	1e ae       	std	Y+62, r1	; 0x3e
     1b8:	29 97       	sbiw	r28, 0x09	; 9
	center.point1 = 65;
     1ba:	e1 e4       	ldi	r30, 0x41	; 65
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	2b 96       	adiw	r28, 0x0b	; 11
     1c0:	ff af       	std	Y+63, r31	; 0x3f
     1c2:	ee af       	std	Y+62, r30	; 0x3e
     1c4:	2b 97       	sbiw	r28, 0x0b	; 11
	center.point2= 185;
     1c6:	e9 eb       	ldi	r30, 0xB9	; 185
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	2d 96       	adiw	r28, 0x0d	; 13
     1cc:	ff af       	std	Y+63, r31	; 0x3f
     1ce:	ee af       	std	Y+62, r30	; 0x3e
     1d0:	2d 97       	sbiw	r28, 0x0d	; 13
	center.slope1 = 2;
     1d2:	2f 96       	adiw	r28, 0x0f	; 15
     1d4:	7f af       	std	Y+63, r23	; 0x3f
     1d6:	6e af       	std	Y+62, r22	; 0x3e
     1d8:	2f 97       	sbiw	r28, 0x0f	; 15
	center.slope2 = 2;	
     1da:	61 96       	adiw	r28, 0x11	; 17
     1dc:	7f af       	std	Y+63, r23	; 0x3f
     1de:	6e af       	std	Y+62, r22	; 0x3e
     1e0:	61 97       	sbiw	r28, 0x11	; 17
	struct mf_type eLeft;					// [130 180 190 240]
	strcpy(eLeft.name, "eLeft");
     1e2:	3e 01       	movw	r6, r28
     1e4:	03 e5       	ldi	r16, 0x53	; 83
     1e6:	60 0e       	add	r6, r16
     1e8:	71 1c       	adc	r7, r1
     1ea:	16 e0       	ldi	r17, 0x06	; 6
     1ec:	ed e1       	ldi	r30, 0x1D	; 29
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	d3 01       	movw	r26, r6
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	1a 95       	dec	r17
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <FLC_steering+0x126>
	eLeft.value = 0;
     1fa:	d3 01       	movw	r26, r6
     1fc:	1b 96       	adiw	r26, 0x0b	; 11
     1fe:	1c 92       	st	X, r1
     200:	1e 92       	st	-X, r1
     202:	1a 97       	sbiw	r26, 0x0a	; 10
	eLeft.point1 = 130;
     204:	e2 e8       	ldi	r30, 0x82	; 130
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	1d 96       	adiw	r26, 0x0d	; 13
     20a:	fc 93       	st	X, r31
     20c:	ee 93       	st	-X, r30
     20e:	1c 97       	sbiw	r26, 0x0c	; 12
	eLeft.point2 = 240;
     210:	e0 ef       	ldi	r30, 0xF0	; 240
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	1f 96       	adiw	r26, 0x0f	; 15
     216:	fc 93       	st	X, r31
     218:	ee 93       	st	-X, r30
     21a:	1e 97       	sbiw	r26, 0x0e	; 14
	eLeft.slope1 = 2;
     21c:	51 96       	adiw	r26, 0x11	; 17
     21e:	7c 93       	st	X, r23
     220:	6e 93       	st	-X, r22
     222:	50 97       	sbiw	r26, 0x10	; 16
	eLeft.slope2 = 2;
     224:	53 96       	adiw	r26, 0x13	; 19
     226:	7c 93       	st	X, r23
     228:	6e 93       	st	-X, r22
     22a:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type farLeft;                	// [215 240 250 251]
	strcpy(farLeft.name, "farLeft");		
     22c:	1e 01       	movw	r2, r28
     22e:	b9 e6       	ldi	r27, 0x69	; 105
     230:	2b 0e       	add	r2, r27
     232:	31 1c       	adc	r3, r1
     234:	68 e0       	ldi	r22, 0x08	; 8
     236:	e3 e2       	ldi	r30, 0x23	; 35
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	d1 01       	movw	r26, r2
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	6a 95       	dec	r22
     242:	e1 f7       	brne	.-8      	; 0x23c <FLC_steering+0x170>
	farLeft.value = 0;
     244:	f1 01       	movw	r30, r2
     246:	13 86       	std	Z+11, r1	; 0x0b
     248:	12 86       	std	Z+10, r1	; 0x0a
	farLeft.point1 = 215;
     24a:	67 ed       	ldi	r22, 0xD7	; 215
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	75 87       	std	Z+13, r23	; 0x0d
     250:	64 87       	std	Z+12, r22	; 0x0c
	farLeft.point2 = 251;
     252:	6b ef       	ldi	r22, 0xFB	; 251
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	77 87       	std	Z+15, r23	; 0x0f
     258:	66 87       	std	Z+14, r22	; 0x0e
	farLeft.slope1 = 4;
     25a:	51 8b       	std	Z+17, r21	; 0x11
     25c:	40 8b       	std	Z+16, r20	; 0x10
	farLeft.slope2 = 100;
     25e:	f3 8a       	std	Z+19, r15	; 0x13
     260:	e2 8a       	std	Z+18, r14	; 0x12
	//MF-pointers
	error.membership_functions = &farRight;	
     262:	3e 87       	std	Y+14, r19	; 0x0e
     264:	2d 87       	std	Y+13, r18	; 0x0d
	farRight.next = &eRight;
     266:	9e a3       	std	Y+38, r25	; 0x26
     268:	8d a3       	std	Y+37, r24	; 0x25
	eRight.next = &center;
     26a:	0f 2e       	mov	r0, r31
     26c:	fd e3       	ldi	r31, 0x3D	; 61
     26e:	ef 2e       	mov	r14, r31
     270:	f1 2c       	mov	r15, r1
     272:	f0 2d       	mov	r31, r0
     274:	ec 0e       	add	r14, r28
     276:	fd 1e       	adc	r15, r29
     278:	fc ae       	std	Y+60, r15	; 0x3c
     27a:	eb ae       	std	Y+59, r14	; 0x3b
	center.next = &eLeft;
     27c:	63 96       	adiw	r28, 0x13	; 19
     27e:	7f ae       	std	Y+63, r7	; 0x3f
     280:	6e ae       	std	Y+62, r6	; 0x3e
     282:	63 97       	sbiw	r28, 0x13	; 19
	eLeft.next = &farLeft;
     284:	d3 01       	movw	r26, r6
     286:	55 96       	adiw	r26, 0x15	; 21
     288:	3c 92       	st	X, r3
     28a:	2e 92       	st	-X, r2
     28c:	54 97       	sbiw	r26, 0x14	; 20
	farLeft.next = NULL;
     28e:	15 8a       	std	Z+21, r1	; 0x15
     290:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	struct rule_type rule1;		// first rule in rule base

	strcpy(angle.name, "angle");
     292:	22 59       	subi	r18, 0x92	; 146
     294:	3f 4f       	sbci	r19, 0xFF	; 255
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	eb e2       	ldi	r30, 0x2B	; 43
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	d9 01       	movw	r26, r18
     29e:	01 90       	ld	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	8a 95       	dec	r24
     2a4:	e1 f7       	brne	.-8      	; 0x29e <FLC_steering+0x1d2>
	strcpy(servo.name, "servo");
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	e1 e3       	ldi	r30, 0x31	; 49
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	de 01       	movw	r26, r28
     2ae:	a1 57       	subi	r26, 0x71	; 113
     2b0:	bf 4f       	sbci	r27, 0xFF	; 255
     2b2:	01 90       	ld	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	8a 95       	dec	r24
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <FLC_steering+0x1e6>
	* MF SlLeft:				[2670 2770 2820 2920]
	* MF left:				    [2840 2940 2950 3050]
	* MF shLeft:				[2950 3050 3060 3061]
	*/
	struct mf_type shLeft;
	strcpy(shLeft.name, "shLeft");
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	e7 e3       	ldi	r30, 0x37	; 55
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	de 01       	movw	r26, r28
     2c2:	ab 55       	subi	r26, 0x5B	; 91
     2c4:	bf 4f       	sbci	r27, 0xFF	; 255
     2c6:	01 90       	ld	r0, Z+
     2c8:	0d 92       	st	X+, r0
     2ca:	8a 95       	dec	r24
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <FLC_steering+0x1fa>
	shLeft.value = 0;
     2ce:	c1 55       	subi	r28, 0x51	; 81
     2d0:	df 4f       	sbci	r29, 0xFF	; 255
     2d2:	19 82       	std	Y+1, r1	; 0x01
     2d4:	18 82       	st	Y, r1
     2d6:	cf 5a       	subi	r28, 0xAF	; 175
     2d8:	d0 40       	sbci	r29, 0x00	; 0
	shLeft.point1 = 2950;
     2da:	66 e8       	ldi	r22, 0x86	; 134
     2dc:	7b e0       	ldi	r23, 0x0B	; 11
     2de:	cf 54       	subi	r28, 0x4F	; 79
     2e0:	df 4f       	sbci	r29, 0xFF	; 255
     2e2:	79 83       	std	Y+1, r23	; 0x01
     2e4:	68 83       	st	Y, r22
     2e6:	c1 5b       	subi	r28, 0xB1	; 177
     2e8:	d0 40       	sbci	r29, 0x00	; 0
	shLeft.point2 = 3061;
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f5 ef       	ldi	r31, 0xF5	; 245
     2ee:	cf 2e       	mov	r12, r31
     2f0:	fb e0       	ldi	r31, 0x0B	; 11
     2f2:	df 2e       	mov	r13, r31
     2f4:	f0 2d       	mov	r31, r0
     2f6:	cd 54       	subi	r28, 0x4D	; 77
     2f8:	df 4f       	sbci	r29, 0xFF	; 255
     2fa:	d9 82       	std	Y+1, r13	; 0x01
     2fc:	c8 82       	st	Y, r12
     2fe:	c3 5b       	subi	r28, 0xB3	; 179
     300:	d0 40       	sbci	r29, 0x00	; 0
	shLeft.slope1 = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	cb 54       	subi	r28, 0x4B	; 75
     308:	df 4f       	sbci	r29, 0xFF	; 255
     30a:	99 83       	std	Y+1, r25	; 0x01
     30c:	88 83       	st	Y, r24
     30e:	c5 5b       	subi	r28, 0xB5	; 181
     310:	d0 40       	sbci	r29, 0x00	; 0
	shLeft.slope2 = 100;
     312:	e4 e6       	ldi	r30, 0x64	; 100
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	c9 54       	subi	r28, 0x49	; 73
     318:	df 4f       	sbci	r29, 0xFF	; 255
     31a:	f9 83       	std	Y+1, r31	; 0x01
     31c:	e8 83       	st	Y, r30
     31e:	c7 5b       	subi	r28, 0xB7	; 183
     320:	d0 40       	sbci	r29, 0x00	; 0
	shLeft.next = NULL;
     322:	c7 54       	subi	r28, 0x47	; 71
     324:	df 4f       	sbci	r29, 0xFF	; 255
     326:	19 82       	std	Y+1, r1	; 0x01
     328:	18 82       	st	Y, r1
     32a:	c9 5b       	subi	r28, 0xB9	; 185
     32c:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type left;
	strcpy(left.name, "left");
     32e:	45 e0       	ldi	r20, 0x05	; 5
     330:	ee e3       	ldi	r30, 0x3E	; 62
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	de 01       	movw	r26, r28
     336:	a5 54       	subi	r26, 0x45	; 69
     338:	bf 4f       	sbci	r27, 0xFF	; 255
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	4a 95       	dec	r20
     340:	e1 f7       	brne	.-8      	; 0x33a <FLC_steering+0x26e>
	left.value = 0;
     342:	cb 53       	subi	r28, 0x3B	; 59
     344:	df 4f       	sbci	r29, 0xFF	; 255
     346:	19 82       	std	Y+1, r1	; 0x01
     348:	18 82       	st	Y, r1
     34a:	c5 5c       	subi	r28, 0xC5	; 197
     34c:	d0 40       	sbci	r29, 0x00	; 0
	left.point1 = 2840;
     34e:	0f 2e       	mov	r0, r31
     350:	f8 e1       	ldi	r31, 0x18	; 24
     352:	ef 2e       	mov	r14, r31
     354:	fb e0       	ldi	r31, 0x0B	; 11
     356:	ff 2e       	mov	r15, r31
     358:	f0 2d       	mov	r31, r0
     35a:	c9 53       	subi	r28, 0x39	; 57
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	f9 82       	std	Y+1, r15	; 0x01
     360:	e8 82       	st	Y, r14
     362:	c7 5c       	subi	r28, 0xC7	; 199
     364:	d0 40       	sbci	r29, 0x00	; 0
	left.point2 = 3050;
     366:	0a ee       	ldi	r16, 0xEA	; 234
     368:	1b e0       	ldi	r17, 0x0B	; 11
     36a:	c7 53       	subi	r28, 0x37	; 55
     36c:	df 4f       	sbci	r29, 0xFF	; 255
     36e:	19 83       	std	Y+1, r17	; 0x01
     370:	08 83       	st	Y, r16
     372:	c9 5c       	subi	r28, 0xC9	; 201
     374:	d0 40       	sbci	r29, 0x00	; 0
	left.slope1 = 1;
     376:	c5 53       	subi	r28, 0x35	; 53
     378:	df 4f       	sbci	r29, 0xFF	; 255
     37a:	99 83       	std	Y+1, r25	; 0x01
     37c:	88 83       	st	Y, r24
     37e:	cb 5c       	subi	r28, 0xCB	; 203
     380:	d0 40       	sbci	r29, 0x00	; 0
	left.slope2 = 1;
     382:	c3 53       	subi	r28, 0x33	; 51
     384:	df 4f       	sbci	r29, 0xFF	; 255
     386:	99 83       	std	Y+1, r25	; 0x01
     388:	88 83       	st	Y, r24
     38a:	cd 5c       	subi	r28, 0xCD	; 205
     38c:	d0 40       	sbci	r29, 0x00	; 0
	left.next = &shLeft;
     38e:	45 ea       	ldi	r20, 0xA5	; 165
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	4c 0f       	add	r20, r28
     394:	5d 1f       	adc	r21, r29
     396:	c1 53       	subi	r28, 0x31	; 49
     398:	df 4f       	sbci	r29, 0xFF	; 255
     39a:	59 83       	std	Y+1, r21	; 0x01
     39c:	48 83       	st	Y, r20
     39e:	cf 5c       	subi	r28, 0xCF	; 207
     3a0:	d0 40       	sbci	r29, 0x00	; 0
	
	
	struct mf_type slLeft;
	strcpy(slLeft.name, "slLeft");
     3a2:	4e 01       	movw	r8, r28
     3a4:	51 ed       	ldi	r21, 0xD1	; 209
     3a6:	85 0e       	add	r8, r21
     3a8:	91 1c       	adc	r9, r1
     3aa:	47 e0       	ldi	r20, 0x07	; 7
     3ac:	e3 e4       	ldi	r30, 0x43	; 67
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	d4 01       	movw	r26, r8
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	4a 95       	dec	r20
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <FLC_steering+0x2e6>
	slLeft.value = 0;
     3ba:	d4 01       	movw	r26, r8
     3bc:	1b 96       	adiw	r26, 0x0b	; 11
     3be:	1c 92       	st	X, r1
     3c0:	1e 92       	st	-X, r1
     3c2:	1a 97       	sbiw	r26, 0x0a	; 10
	slLeft.point1 = 2670;
     3c4:	ee e6       	ldi	r30, 0x6E	; 110
     3c6:	fa e0       	ldi	r31, 0x0A	; 10
     3c8:	1d 96       	adiw	r26, 0x0d	; 13
     3ca:	fc 93       	st	X, r31
     3cc:	ee 93       	st	-X, r30
     3ce:	1c 97       	sbiw	r26, 0x0c	; 12
	slLeft.point2 = 2920;
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f8 e6       	ldi	r31, 0x68	; 104
     3d4:	ef 2e       	mov	r14, r31
     3d6:	fb e0       	ldi	r31, 0x0B	; 11
     3d8:	ff 2e       	mov	r15, r31
     3da:	f0 2d       	mov	r31, r0
     3dc:	1f 96       	adiw	r26, 0x0f	; 15
     3de:	fc 92       	st	X, r15
     3e0:	ee 92       	st	-X, r14
     3e2:	1e 97       	sbiw	r26, 0x0e	; 14
	slLeft.slope1 = 1;
     3e4:	51 96       	adiw	r26, 0x11	; 17
     3e6:	9c 93       	st	X, r25
     3e8:	8e 93       	st	-X, r24
     3ea:	50 97       	sbiw	r26, 0x10	; 16
	slLeft.slope2 = 1;
     3ec:	53 96       	adiw	r26, 0x13	; 19
     3ee:	9c 93       	st	X, r25
     3f0:	8e 93       	st	-X, r24
     3f2:	52 97       	sbiw	r26, 0x12	; 18
	slLeft.next = &left;
     3f4:	0b eb       	ldi	r16, 0xBB	; 187
     3f6:	10 e0       	ldi	r17, 0x00	; 0
     3f8:	0c 0f       	add	r16, r28
     3fa:	1d 1f       	adc	r17, r29
     3fc:	55 96       	adiw	r26, 0x15	; 21
     3fe:	1c 93       	st	X, r17
     400:	0e 93       	st	-X, r16
     402:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type straight;
	strcpy(straight.name, "straight");
     404:	2e 01       	movw	r4, r28
     406:	17 ee       	ldi	r17, 0xE7	; 231
     408:	41 0e       	add	r4, r17
     40a:	51 1c       	adc	r5, r1
     40c:	49 e0       	ldi	r20, 0x09	; 9
     40e:	ea e4       	ldi	r30, 0x4A	; 74
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	d2 01       	movw	r26, r4
     414:	01 90       	ld	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	4a 95       	dec	r20
     41a:	e1 f7       	brne	.-8      	; 0x414 <FLC_steering+0x348>
	straight.value = 0;
     41c:	d2 01       	movw	r26, r4
     41e:	1b 96       	adiw	r26, 0x0b	; 11
     420:	1c 92       	st	X, r1
     422:	1e 92       	st	-X, r1
     424:	1a 97       	sbiw	r26, 0x0a	; 10
	straight.point1 = 2540;
     426:	0f 2e       	mov	r0, r31
     428:	fc ee       	ldi	r31, 0xEC	; 236
     42a:	af 2e       	mov	r10, r31
     42c:	f9 e0       	ldi	r31, 0x09	; 9
     42e:	bf 2e       	mov	r11, r31
     430:	f0 2d       	mov	r31, r0
     432:	1d 96       	adiw	r26, 0x0d	; 13
     434:	bc 92       	st	X, r11
     436:	ae 92       	st	-X, r10
     438:	1c 97       	sbiw	r26, 0x0c	; 12
	straight.point2 = 2780;
     43a:	ec ed       	ldi	r30, 0xDC	; 220
     43c:	fa e0       	ldi	r31, 0x0A	; 10
     43e:	1f 96       	adiw	r26, 0x0f	; 15
     440:	fc 93       	st	X, r31
     442:	ee 93       	st	-X, r30
     444:	1e 97       	sbiw	r26, 0x0e	; 14
	straight.slope1 = 1;
     446:	51 96       	adiw	r26, 0x11	; 17
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
     44c:	50 97       	sbiw	r26, 0x10	; 16
	straight.slope2 = 1;
     44e:	53 96       	adiw	r26, 0x13	; 19
     450:	9c 93       	st	X, r25
     452:	8e 93       	st	-X, r24
     454:	52 97       	sbiw	r26, 0x12	; 18
	straight.next = &slLeft;
     456:	55 96       	adiw	r26, 0x15	; 21
     458:	9c 92       	st	X, r9
     45a:	8e 92       	st	-X, r8
     45c:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type slRight;
	strcpy(slRight.name, "slRight");
     45e:	7e 01       	movw	r14, r28
     460:	fd ef       	ldi	r31, 0xFD	; 253
     462:	ef 0e       	add	r14, r31
     464:	f1 1c       	adc	r15, r1
     466:	48 e0       	ldi	r20, 0x08	; 8
     468:	e3 e5       	ldi	r30, 0x53	; 83
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	d7 01       	movw	r26, r14
     46e:	01 90       	ld	r0, Z+
     470:	0d 92       	st	X+, r0
     472:	4a 95       	dec	r20
     474:	e1 f7       	brne	.-8      	; 0x46e <FLC_steering+0x3a2>
	slRight.value = 0;
     476:	d7 01       	movw	r26, r14
     478:	1b 96       	adiw	r26, 0x0b	; 11
     47a:	1c 92       	st	X, r1
     47c:	1e 92       	st	-X, r1
     47e:	1a 97       	sbiw	r26, 0x0a	; 10
	slRight.point1 = 2400;
     480:	e0 e6       	ldi	r30, 0x60	; 96
     482:	f9 e0       	ldi	r31, 0x09	; 9
     484:	1d 96       	adiw	r26, 0x0d	; 13
     486:	fc 93       	st	X, r31
     488:	ee 93       	st	-X, r30
     48a:	1c 97       	sbiw	r26, 0x0c	; 12
	slRight.point2 = 2650;
     48c:	0a e5       	ldi	r16, 0x5A	; 90
     48e:	1a e0       	ldi	r17, 0x0A	; 10
     490:	1f 96       	adiw	r26, 0x0f	; 15
     492:	1c 93       	st	X, r17
     494:	0e 93       	st	-X, r16
     496:	1e 97       	sbiw	r26, 0x0e	; 14
	slRight.slope1 = 1;
     498:	51 96       	adiw	r26, 0x11	; 17
     49a:	9c 93       	st	X, r25
     49c:	8e 93       	st	-X, r24
     49e:	50 97       	sbiw	r26, 0x10	; 16
	slRight.slope2 = 1;
     4a0:	53 96       	adiw	r26, 0x13	; 19
     4a2:	9c 93       	st	X, r25
     4a4:	8e 93       	st	-X, r24
     4a6:	52 97       	sbiw	r26, 0x12	; 18
	slRight.next = &straight;
     4a8:	55 96       	adiw	r26, 0x15	; 21
     4aa:	5c 92       	st	X, r5
     4ac:	4e 92       	st	-X, r4
     4ae:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type right;
	strcpy(right.name, "right");
     4b0:	8e 01       	movw	r16, r28
     4b2:	0d 5e       	subi	r16, 0xED	; 237
     4b4:	1e 4f       	sbci	r17, 0xFE	; 254
     4b6:	46 e0       	ldi	r20, 0x06	; 6
     4b8:	ec e8       	ldi	r30, 0x8C	; 140
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	d8 01       	movw	r26, r16
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	4a 95       	dec	r20
     4c4:	e1 f7       	brne	.-8      	; 0x4be <FLC_steering+0x3f2>
	right.value = 0;
     4c6:	d8 01       	movw	r26, r16
     4c8:	1b 96       	adiw	r26, 0x0b	; 11
     4ca:	1c 92       	st	X, r1
     4cc:	1e 92       	st	-X, r1
     4ce:	1a 97       	sbiw	r26, 0x0a	; 10
	right.point1 = 2270;
     4d0:	ee ed       	ldi	r30, 0xDE	; 222
     4d2:	f8 e0       	ldi	r31, 0x08	; 8
     4d4:	1d 96       	adiw	r26, 0x0d	; 13
     4d6:	fc 93       	st	X, r31
     4d8:	ee 93       	st	-X, r30
     4da:	1c 97       	sbiw	r26, 0x0c	; 12
	right.point2 = 2480;
     4dc:	40 eb       	ldi	r20, 0xB0	; 176
     4de:	59 e0       	ldi	r21, 0x09	; 9
     4e0:	1f 96       	adiw	r26, 0x0f	; 15
     4e2:	5c 93       	st	X, r21
     4e4:	4e 93       	st	-X, r20
     4e6:	1e 97       	sbiw	r26, 0x0e	; 14
	right.slope1 = 1;
     4e8:	51 96       	adiw	r26, 0x11	; 17
     4ea:	9c 93       	st	X, r25
     4ec:	8e 93       	st	-X, r24
     4ee:	50 97       	sbiw	r26, 0x10	; 16
	right.slope2 = 1;
     4f0:	53 96       	adiw	r26, 0x13	; 19
     4f2:	9c 93       	st	X, r25
     4f4:	8e 93       	st	-X, r24
     4f6:	52 97       	sbiw	r26, 0x12	; 18
	right.next = &slRight;
     4f8:	55 96       	adiw	r26, 0x15	; 21
     4fa:	fc 92       	st	X, r15
     4fc:	ee 92       	st	-X, r14
     4fe:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type shRight;
	strcpy(shRight.name, "shRight");
     500:	48 e0       	ldi	r20, 0x08	; 8
     502:	eb e5       	ldi	r30, 0x5B	; 91
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	56 96       	adiw	r26, 0x16	; 22
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	4a 95       	dec	r20
     50e:	e1 f7       	brne	.-8      	; 0x508 <FLC_steering+0x43c>
	shRight.value = 0;
     510:	cd 5c       	subi	r28, 0xCD	; 205
     512:	de 4f       	sbci	r29, 0xFE	; 254
     514:	19 82       	std	Y+1, r1	; 0x01
     516:	18 82       	st	Y, r1
     518:	c3 53       	subi	r28, 0x33	; 51
     51a:	d1 40       	sbci	r29, 0x01	; 1
	shRight.point1 = 2259;
     51c:	a3 ed       	ldi	r26, 0xD3	; 211
     51e:	b8 e0       	ldi	r27, 0x08	; 8
     520:	cb 5c       	subi	r28, 0xCB	; 203
     522:	de 4f       	sbci	r29, 0xFE	; 254
     524:	b9 83       	std	Y+1, r27	; 0x01
     526:	a8 83       	st	Y, r26
     528:	c5 53       	subi	r28, 0x35	; 53
     52a:	d1 40       	sbci	r29, 0x01	; 1
	shRight.point2 = 2370;
     52c:	e2 e4       	ldi	r30, 0x42	; 66
     52e:	f9 e0       	ldi	r31, 0x09	; 9
     530:	c9 5c       	subi	r28, 0xC9	; 201
     532:	de 4f       	sbci	r29, 0xFE	; 254
     534:	f9 83       	std	Y+1, r31	; 0x01
     536:	e8 83       	st	Y, r30
     538:	c7 53       	subi	r28, 0x37	; 55
     53a:	d1 40       	sbci	r29, 0x01	; 1
	shRight.slope1 = 100;
     53c:	44 e6       	ldi	r20, 0x64	; 100
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	c7 5c       	subi	r28, 0xC7	; 199
     542:	de 4f       	sbci	r29, 0xFE	; 254
     544:	59 83       	std	Y+1, r21	; 0x01
     546:	48 83       	st	Y, r20
     548:	c9 53       	subi	r28, 0x39	; 57
     54a:	d1 40       	sbci	r29, 0x01	; 1
	shRight.slope2 = 1;
     54c:	c5 5c       	subi	r28, 0xC5	; 197
     54e:	de 4f       	sbci	r29, 0xFE	; 254
     550:	99 83       	std	Y+1, r25	; 0x01
     552:	88 83       	st	Y, r24
     554:	cb 53       	subi	r28, 0x3B	; 59
     556:	d1 40       	sbci	r29, 0x01	; 1
	shRight.next = &right;
     558:	c3 5c       	subi	r28, 0xC3	; 195
     55a:	de 4f       	sbci	r29, 0xFE	; 254
     55c:	19 83       	std	Y+1, r17	; 0x01
     55e:	08 83       	st	Y, r16
     560:	cd 53       	subi	r28, 0x3D	; 61
     562:	d1 40       	sbci	r29, 0x01	; 1
	
	
	angle.membership_functions = &shRight;
     564:	e9 e2       	ldi	r30, 0x29	; 41
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	ec 0f       	add	r30, r28
     56a:	fd 1f       	adc	r31, r29
     56c:	d9 01       	movw	r26, r18
     56e:	1d 96       	adiw	r26, 0x0d	; 13
     570:	fc 93       	st	X, r31
     572:	ee 93       	st	-X, r30
     574:	1c 97       	sbiw	r26, 0x0c	; 12
	angle.next = NULL;
     576:	1f 96       	adiw	r26, 0x0f	; 15
     578:	1c 92       	st	X, r1
     57a:	1e 92       	st	-X, r1
     57c:	1e 97       	sbiw	r26, 0x0e	; 14
	


	

	error.next = &angle;
     57e:	38 8b       	std	Y+16, r19	; 0x10
     580:	2f 87       	std	Y+15, r18	; 0x0f
	* max			[2890 2926 2934 2970]
	
	*
	*/
	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     582:	20 54       	subi	r18, 0x40	; 64
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	48 e0       	ldi	r20, 0x08	; 8
     588:	e3 e6       	ldi	r30, 0x63	; 99
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	d9 01       	movw	r26, r18
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	4a 95       	dec	r20
     594:	e1 f7       	brne	.-8      	; 0x58e <FLC_steering+0x4c2>
	oShLeft.value = 0;
     596:	d9 01       	movw	r26, r18
     598:	1b 96       	adiw	r26, 0x0b	; 11
     59a:	1c 92       	st	X, r1
     59c:	1e 92       	st	-X, r1
     59e:	1a 97       	sbiw	r26, 0x0a	; 10
	oShLeft.point1 = 2950;
     5a0:	1d 96       	adiw	r26, 0x0d	; 13
     5a2:	7c 93       	st	X, r23
     5a4:	6e 93       	st	-X, r22
     5a6:	1c 97       	sbiw	r26, 0x0c	; 12
	oShLeft.point2 = 3061;
     5a8:	1f 96       	adiw	r26, 0x0f	; 15
     5aa:	dc 92       	st	X, r13
     5ac:	ce 92       	st	-X, r12
     5ae:	1e 97       	sbiw	r26, 0x0e	; 14
	oShLeft.slope1 = 1;
     5b0:	51 96       	adiw	r26, 0x11	; 17
     5b2:	9c 93       	st	X, r25
     5b4:	8e 93       	st	-X, r24
     5b6:	50 97       	sbiw	r26, 0x10	; 16
	oShLeft.slope2 = 100;
     5b8:	e4 e6       	ldi	r30, 0x64	; 100
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	53 96       	adiw	r26, 0x13	; 19
     5be:	fc 93       	st	X, r31
     5c0:	ee 93       	st	-X, r30
     5c2:	52 97       	sbiw	r26, 0x12	; 18
	oShLeft.next = NULL;
     5c4:	55 96       	adiw	r26, 0x15	; 21
     5c6:	1c 92       	st	X, r1
     5c8:	1e 92       	st	-X, r1
     5ca:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     5cc:	46 e0       	ldi	r20, 0x06	; 6
     5ce:	eb e6       	ldi	r30, 0x6B	; 107
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	56 96       	adiw	r26, 0x16	; 22
     5d4:	01 90       	ld	r0, Z+
     5d6:	0d 92       	st	X+, r0
     5d8:	4a 95       	dec	r20
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <FLC_steering+0x508>
	oLeft.value = 0;
     5dc:	c1 5a       	subi	r28, 0xA1	; 161
     5de:	de 4f       	sbci	r29, 0xFE	; 254
     5e0:	19 82       	std	Y+1, r1	; 0x01
     5e2:	18 82       	st	Y, r1
     5e4:	cf 55       	subi	r28, 0x5F	; 95
     5e6:	d1 40       	sbci	r29, 0x01	; 1
	oLeft.point1 = 2840;
     5e8:	48 e1       	ldi	r20, 0x18	; 24
     5ea:	5b e0       	ldi	r21, 0x0B	; 11
     5ec:	cf 59       	subi	r28, 0x9F	; 159
     5ee:	de 4f       	sbci	r29, 0xFE	; 254
     5f0:	59 83       	std	Y+1, r21	; 0x01
     5f2:	48 83       	st	Y, r20
     5f4:	c1 56       	subi	r28, 0x61	; 97
     5f6:	d1 40       	sbci	r29, 0x01	; 1
	oLeft.point2 = 3050;
     5f8:	6a ee       	ldi	r22, 0xEA	; 234
     5fa:	7b e0       	ldi	r23, 0x0B	; 11
     5fc:	cd 59       	subi	r28, 0x9D	; 157
     5fe:	de 4f       	sbci	r29, 0xFE	; 254
     600:	79 83       	std	Y+1, r23	; 0x01
     602:	68 83       	st	Y, r22
     604:	c3 56       	subi	r28, 0x63	; 99
     606:	d1 40       	sbci	r29, 0x01	; 1
	oLeft.slope1 = 1;
     608:	cb 59       	subi	r28, 0x9B	; 155
     60a:	de 4f       	sbci	r29, 0xFE	; 254
     60c:	99 83       	std	Y+1, r25	; 0x01
     60e:	88 83       	st	Y, r24
     610:	c5 56       	subi	r28, 0x65	; 101
     612:	d1 40       	sbci	r29, 0x01	; 1
	oLeft.slope2 = 1;
     614:	c9 59       	subi	r28, 0x99	; 153
     616:	de 4f       	sbci	r29, 0xFE	; 254
     618:	99 83       	std	Y+1, r25	; 0x01
     61a:	88 83       	st	Y, r24
     61c:	c7 56       	subi	r28, 0x67	; 103
     61e:	d1 40       	sbci	r29, 0x01	; 1
	oLeft.next = &oShLeft;
     620:	c7 59       	subi	r28, 0x97	; 151
     622:	de 4f       	sbci	r29, 0xFE	; 254
     624:	39 83       	std	Y+1, r19	; 0x01
     626:	28 83       	st	Y, r18
     628:	c9 56       	subi	r28, 0x69	; 105
     62a:	d1 40       	sbci	r29, 0x01	; 1
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     62c:	6e 01       	movw	r12, r28
     62e:	75 e9       	ldi	r23, 0x95	; 149
     630:	c7 1a       	sub	r12, r23
     632:	7e ef       	ldi	r23, 0xFE	; 254
     634:	d7 0a       	sbc	r13, r23
     636:	28 e0       	ldi	r18, 0x08	; 8
     638:	e1 e7       	ldi	r30, 0x71	; 113
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	d6 01       	movw	r26, r12
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	2a 95       	dec	r18
     644:	e1 f7       	brne	.-8      	; 0x63e <FLC_steering+0x572>
	oSlLeft.value = 0;
     646:	d6 01       	movw	r26, r12
     648:	1b 96       	adiw	r26, 0x0b	; 11
     64a:	1c 92       	st	X, r1
     64c:	1e 92       	st	-X, r1
     64e:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlLeft.point1 = 2670;
     650:	ee e6       	ldi	r30, 0x6E	; 110
     652:	fa e0       	ldi	r31, 0x0A	; 10
     654:	1d 96       	adiw	r26, 0x0d	; 13
     656:	fc 93       	st	X, r31
     658:	ee 93       	st	-X, r30
     65a:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlLeft.point2 = 2920;
     65c:	28 e6       	ldi	r18, 0x68	; 104
     65e:	3b e0       	ldi	r19, 0x0B	; 11
     660:	1f 96       	adiw	r26, 0x0f	; 15
     662:	3c 93       	st	X, r19
     664:	2e 93       	st	-X, r18
     666:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlLeft.slope1 = 1;
     668:	51 96       	adiw	r26, 0x11	; 17
     66a:	9c 93       	st	X, r25
     66c:	8e 93       	st	-X, r24
     66e:	50 97       	sbiw	r26, 0x10	; 16
	oSlLeft.slope2 = 1;
     670:	53 96       	adiw	r26, 0x13	; 19
     672:	9c 93       	st	X, r25
     674:	8e 93       	st	-X, r24
     676:	52 97       	sbiw	r26, 0x12	; 18
	oSlLeft.next = &oLeft;
     678:	45 e5       	ldi	r20, 0x55	; 85
     67a:	51 e0       	ldi	r21, 0x01	; 1
     67c:	4c 0f       	add	r20, r28
     67e:	5d 1f       	adc	r21, r29
     680:	55 96       	adiw	r26, 0x15	; 21
     682:	5c 93       	st	X, r21
     684:	4e 93       	st	-X, r20
     686:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     688:	9e 01       	movw	r18, r28
     68a:	2f 57       	subi	r18, 0x7F	; 127
     68c:	3e 4f       	sbci	r19, 0xFE	; 254
     68e:	4a e0       	ldi	r20, 0x0A	; 10
     690:	e2 e9       	ldi	r30, 0x92	; 146
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	d9 01       	movw	r26, r18
     696:	01 90       	ld	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	4a 95       	dec	r20
     69c:	e1 f7       	brne	.-8      	; 0x696 <FLC_steering+0x5ca>
	oStraight.value = 0;
     69e:	d9 01       	movw	r26, r18
     6a0:	1b 96       	adiw	r26, 0x0b	; 11
     6a2:	1c 92       	st	X, r1
     6a4:	1e 92       	st	-X, r1
     6a6:	1a 97       	sbiw	r26, 0x0a	; 10
	oStraight.point1 = 2540;
     6a8:	1d 96       	adiw	r26, 0x0d	; 13
     6aa:	bc 92       	st	X, r11
     6ac:	ae 92       	st	-X, r10
     6ae:	1c 97       	sbiw	r26, 0x0c	; 12
	oStraight.point2 = 2780;
     6b0:	ec ed       	ldi	r30, 0xDC	; 220
     6b2:	fa e0       	ldi	r31, 0x0A	; 10
     6b4:	1f 96       	adiw	r26, 0x0f	; 15
     6b6:	fc 93       	st	X, r31
     6b8:	ee 93       	st	-X, r30
     6ba:	1e 97       	sbiw	r26, 0x0e	; 14
	oStraight.slope1 = 1;
     6bc:	51 96       	adiw	r26, 0x11	; 17
     6be:	9c 93       	st	X, r25
     6c0:	8e 93       	st	-X, r24
     6c2:	50 97       	sbiw	r26, 0x10	; 16
	oStraight.slope2 = 1;
     6c4:	53 96       	adiw	r26, 0x13	; 19
     6c6:	9c 93       	st	X, r25
     6c8:	8e 93       	st	-X, r24
     6ca:	52 97       	sbiw	r26, 0x12	; 18
	oStraight.next = &oSlLeft;
     6cc:	55 96       	adiw	r26, 0x15	; 21
     6ce:	dc 92       	st	X, r13
     6d0:	ce 92       	st	-X, r12
     6d2:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     6d4:	be 01       	movw	r22, r28
     6d6:	69 56       	subi	r22, 0x69	; 105
     6d8:	7e 4f       	sbci	r23, 0xFE	; 254
     6da:	49 e0       	ldi	r20, 0x09	; 9
     6dc:	e9 e7       	ldi	r30, 0x79	; 121
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	db 01       	movw	r26, r22
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	4a 95       	dec	r20
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <FLC_steering+0x616>
	oSlRight.value = 0;
     6ea:	db 01       	movw	r26, r22
     6ec:	1b 96       	adiw	r26, 0x0b	; 11
     6ee:	1c 92       	st	X, r1
     6f0:	1e 92       	st	-X, r1
     6f2:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlRight.point1 = 2400;
     6f4:	e0 e6       	ldi	r30, 0x60	; 96
     6f6:	f9 e0       	ldi	r31, 0x09	; 9
     6f8:	1d 96       	adiw	r26, 0x0d	; 13
     6fa:	fc 93       	st	X, r31
     6fc:	ee 93       	st	-X, r30
     6fe:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlRight.point2 = 2650;
     700:	4a e5       	ldi	r20, 0x5A	; 90
     702:	5a e0       	ldi	r21, 0x0A	; 10
     704:	1f 96       	adiw	r26, 0x0f	; 15
     706:	5c 93       	st	X, r21
     708:	4e 93       	st	-X, r20
     70a:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlRight.slope1 = 1;
     70c:	51 96       	adiw	r26, 0x11	; 17
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	50 97       	sbiw	r26, 0x10	; 16
	oSlRight.slope2 = 1;
     714:	53 96       	adiw	r26, 0x13	; 19
     716:	9c 93       	st	X, r25
     718:	8e 93       	st	-X, r24
     71a:	52 97       	sbiw	r26, 0x12	; 18
	oSlRight.next = &oStraight;
     71c:	55 96       	adiw	r26, 0x15	; 21
     71e:	3c 93       	st	X, r19
     720:	2e 93       	st	-X, r18
     722:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     724:	ae 01       	movw	r20, r28
     726:	43 55       	subi	r20, 0x53	; 83
     728:	5e 4f       	sbci	r21, 0xFE	; 254
     72a:	0f 2e       	mov	r0, r31
     72c:	f7 e0       	ldi	r31, 0x07	; 7
     72e:	bf 2e       	mov	r11, r31
     730:	f0 2d       	mov	r31, r0
     732:	e2 e8       	ldi	r30, 0x82	; 130
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	da 01       	movw	r26, r20
     738:	01 90       	ld	r0, Z+
     73a:	0d 92       	st	X+, r0
     73c:	ba 94       	dec	r11
     73e:	e1 f7       	brne	.-8      	; 0x738 <FLC_steering+0x66c>
	oRight.value = 0;
     740:	da 01       	movw	r26, r20
     742:	1b 96       	adiw	r26, 0x0b	; 11
     744:	1c 92       	st	X, r1
     746:	1e 92       	st	-X, r1
     748:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     74a:	ee ed       	ldi	r30, 0xDE	; 222
     74c:	f8 e0       	ldi	r31, 0x08	; 8
     74e:	1d 96       	adiw	r26, 0x0d	; 13
     750:	fc 93       	st	X, r31
     752:	ee 93       	st	-X, r30
     754:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     756:	e0 eb       	ldi	r30, 0xB0	; 176
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	1f 96       	adiw	r26, 0x0f	; 15
     75c:	fc 93       	st	X, r31
     75e:	ee 93       	st	-X, r30
     760:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     762:	51 96       	adiw	r26, 0x11	; 17
     764:	9c 93       	st	X, r25
     766:	8e 93       	st	-X, r24
     768:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     76a:	53 96       	adiw	r26, 0x13	; 19
     76c:	9c 93       	st	X, r25
     76e:	8e 93       	st	-X, r24
     770:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     772:	55 96       	adiw	r26, 0x15	; 21
     774:	7c 93       	st	X, r23
     776:	6e 93       	st	-X, r22
     778:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     77a:	0f 2e       	mov	r0, r31
     77c:	f9 e0       	ldi	r31, 0x09	; 9
     77e:	af 2e       	mov	r10, r31
     780:	f0 2d       	mov	r31, r0
     782:	e9 e8       	ldi	r30, 0x89	; 137
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	56 96       	adiw	r26, 0x16	; 22
     788:	01 90       	ld	r0, Z+
     78a:	0d 92       	st	X+, r0
     78c:	aa 94       	dec	r10
     78e:	e1 f7       	brne	.-8      	; 0x788 <FLC_steering+0x6bc>
	oShright.value = 0;
     790:	c3 53       	subi	r28, 0x33	; 51
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	19 82       	std	Y+1, r1	; 0x01
     796:	18 82       	st	Y, r1
     798:	cd 5c       	subi	r28, 0xCD	; 205
     79a:	d1 40       	sbci	r29, 0x01	; 1
	oShright.point1 = 2259;
     79c:	a3 ed       	ldi	r26, 0xD3	; 211
     79e:	b8 e0       	ldi	r27, 0x08	; 8
     7a0:	c1 53       	subi	r28, 0x31	; 49
     7a2:	de 4f       	sbci	r29, 0xFE	; 254
     7a4:	b9 83       	std	Y+1, r27	; 0x01
     7a6:	a8 83       	st	Y, r26
     7a8:	cf 5c       	subi	r28, 0xCF	; 207
     7aa:	d1 40       	sbci	r29, 0x01	; 1
	oShright.point2 = 2370;
     7ac:	e2 e4       	ldi	r30, 0x42	; 66
     7ae:	f9 e0       	ldi	r31, 0x09	; 9
     7b0:	cf 52       	subi	r28, 0x2F	; 47
     7b2:	de 4f       	sbci	r29, 0xFE	; 254
     7b4:	f9 83       	std	Y+1, r31	; 0x01
     7b6:	e8 83       	st	Y, r30
     7b8:	c1 5d       	subi	r28, 0xD1	; 209
     7ba:	d1 40       	sbci	r29, 0x01	; 1
	oShright.slope1 = 100;
     7bc:	a4 e6       	ldi	r26, 0x64	; 100
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	cd 52       	subi	r28, 0x2D	; 45
     7c2:	de 4f       	sbci	r29, 0xFE	; 254
     7c4:	b9 83       	std	Y+1, r27	; 0x01
     7c6:	a8 83       	st	Y, r26
     7c8:	c3 5d       	subi	r28, 0xD3	; 211
     7ca:	d1 40       	sbci	r29, 0x01	; 1
	oShright.slope2 = 1;
     7cc:	cb 52       	subi	r28, 0x2B	; 43
     7ce:	de 4f       	sbci	r29, 0xFE	; 254
     7d0:	99 83       	std	Y+1, r25	; 0x01
     7d2:	88 83       	st	Y, r24
     7d4:	c5 5d       	subi	r28, 0xD5	; 213
     7d6:	d1 40       	sbci	r29, 0x01	; 1
	oShright.next = &oRight;
     7d8:	c9 52       	subi	r28, 0x29	; 41
     7da:	de 4f       	sbci	r29, 0xFE	; 254
     7dc:	59 83       	std	Y+1, r21	; 0x01
     7de:	48 83       	st	Y, r20
     7e0:	c7 5d       	subi	r28, 0xD7	; 215
     7e2:	d1 40       	sbci	r29, 0x01	; 1
	
	servo.membership_functions = &oShright;
     7e4:	e3 ec       	ldi	r30, 0xC3	; 195
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	ec 0f       	add	r30, r28
     7ea:	fd 1f       	adc	r31, r29
     7ec:	c5 56       	subi	r28, 0x65	; 101
     7ee:	df 4f       	sbci	r29, 0xFF	; 255
     7f0:	f9 83       	std	Y+1, r31	; 0x01
     7f2:	e8 83       	st	Y, r30
     7f4:	cb 59       	subi	r28, 0x9B	; 155
     7f6:	d0 40       	sbci	r29, 0x00	; 0
	servo.next = NULL;
     7f8:	c3 56       	subi	r28, 0x63	; 99
     7fa:	df 4f       	sbci	r29, 0xFF	; 255
     7fc:	19 82       	std	Y+1, r1	; 0x01
     7fe:	18 82       	st	Y, r1
     800:	cd 59       	subi	r28, 0x9D	; 157
     802:	d0 40       	sbci	r29, 0x00	; 0
	*/
	
	
	/* rule # 15: if eRight and slRight then oSlLeft */
	struct rule_element_type then15;
	then15.value = &oSlLeft.value;
     804:	56 01       	movw	r10, r12
     806:	fa e0       	ldi	r31, 0x0A	; 10
     808:	af 0e       	add	r10, r31
     80a:	b1 1c       	adc	r11, r1
     80c:	c7 52       	subi	r28, 0x27	; 39
     80e:	de 4f       	sbci	r29, 0xFE	; 254
     810:	b9 82       	std	Y+1, r11	; 0x01
     812:	a8 82       	st	Y, r10
     814:	c9 5d       	subi	r28, 0xD9	; 217
     816:	d1 40       	sbci	r29, 0x01	; 1
	then15.next = NULL;
     818:	c5 52       	subi	r28, 0x25	; 37
     81a:	de 4f       	sbci	r29, 0xFE	; 254
     81c:	19 82       	std	Y+1, r1	; 0x01
     81e:	18 82       	st	Y, r1
     820:	cb 5d       	subi	r28, 0xDB	; 219
     822:	d1 40       	sbci	r29, 0x01	; 1
	
	struct rule_element_type if152;
	if152.value = &slRight.value;
     824:	de 01       	movw	r26, r28
     826:	a3 52       	subi	r26, 0x23	; 35
     828:	be 4f       	sbci	r27, 0xFE	; 254
     82a:	67 01       	movw	r12, r14
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	c8 0e       	add	r12, r24
     830:	d1 1c       	adc	r13, r1
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	dc 92       	st	X, r13
     836:	ce 92       	st	-X, r12
	if152.next = NULL;
     838:	13 96       	adiw	r26, 0x03	; 3
     83a:	1c 92       	st	X, r1
     83c:	1e 92       	st	-X, r1
     83e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if151;
	if151.value = &eRight.value;
     840:	7e 01       	movw	r14, r28
     842:	9f e1       	ldi	r25, 0x1F	; 31
     844:	e9 1a       	sub	r14, r25
     846:	9e ef       	ldi	r25, 0xFE	; 254
     848:	f9 0a       	sbc	r15, r25
     84a:	ce 01       	movw	r24, r28
     84c:	c1 96       	adiw	r24, 0x31	; 49
     84e:	f7 01       	movw	r30, r14
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
	if151.next = &if152;
     854:	b3 83       	std	Z+3, r27	; 0x03
     856:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule15;
	rule15.if_side = &if151;
     858:	18 96       	adiw	r26, 0x08	; 8
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	fc 92       	st	X, r15
     85e:	ee 92       	st	-X, r14
	rule15.then_side = &then15;
     860:	0f 2e       	mov	r0, r31
     862:	f9 ed       	ldi	r31, 0xD9	; 217
     864:	ef 2e       	mov	r14, r31
     866:	ff 24       	eor	r15, r15
     868:	f3 94       	inc	r15
     86a:	f0 2d       	mov	r31, r0
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	13 96       	adiw	r26, 0x03	; 3
     872:	fc 92       	st	X, r15
     874:	ee 92       	st	-X, r14
     876:	12 97       	sbiw	r26, 0x02	; 2
	rule15.next = NULL;
     878:	15 96       	adiw	r26, 0x05	; 5
     87a:	1c 92       	st	X, r1
     87c:	1e 92       	st	-X, r1
     87e:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 14: if eRight and right then oSlLeft */
	struct rule_element_type then14;
	then14.value = &oSlLeft.value;
     880:	c5 51       	subi	r28, 0x15	; 21
     882:	de 4f       	sbci	r29, 0xFE	; 254
     884:	b9 82       	std	Y+1, r11	; 0x01
     886:	a8 82       	st	Y, r10
     888:	cb 5e       	subi	r28, 0xEB	; 235
     88a:	d1 40       	sbci	r29, 0x01	; 1
	then14.next = NULL;
     88c:	c3 51       	subi	r28, 0x13	; 19
     88e:	de 4f       	sbci	r29, 0xFE	; 254
     890:	19 82       	std	Y+1, r1	; 0x01
     892:	18 82       	st	Y, r1
     894:	cd 5e       	subi	r28, 0xED	; 237
     896:	d1 40       	sbci	r29, 0x01	; 1
	
	struct rule_element_type if142;
	if142.value = &right.value;
     898:	7e 01       	movw	r14, r28
     89a:	e1 e1       	ldi	r30, 0x11	; 17
     89c:	ee 1a       	sub	r14, r30
     89e:	ee ef       	ldi	r30, 0xFE	; 254
     8a0:	fe 0a       	sbc	r15, r30
     8a2:	e4 5c       	subi	r30, 0xC4	; 196
     8a4:	f1 09       	sbc	r31, r1
     8a6:	cb 52       	subi	r28, 0x2B	; 43
     8a8:	dd 4f       	sbci	r29, 0xFD	; 253
     8aa:	f9 83       	std	Y+1, r31	; 0x01
     8ac:	e8 83       	st	Y, r30
     8ae:	c5 5d       	subi	r28, 0xD5	; 213
     8b0:	d2 40       	sbci	r29, 0x02	; 2
     8b2:	8f 01       	movw	r16, r30
     8b4:	f7 01       	movw	r30, r14
     8b6:	11 83       	std	Z+1, r17	; 0x01
     8b8:	00 83       	st	Z, r16
	if142.next = NULL;
     8ba:	13 82       	std	Z+3, r1	; 0x03
     8bc:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if141;
	if141.value = &eRight.value;
     8be:	0a 52       	subi	r16, 0x2A	; 42
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	f8 01       	movw	r30, r16
     8c4:	91 83       	std	Z+1, r25	; 0x01
     8c6:	80 83       	st	Z, r24
	if141.next = &if142;
     8c8:	f3 82       	std	Z+3, r15	; 0x03
     8ca:	e2 82       	std	Z+2, r14	; 0x02
	
	struct rule_type rule14;
	rule14.if_side = &if141;
     8cc:	7e 01       	movw	r14, r28
     8ce:	f9 e0       	ldi	r31, 0x09	; 9
     8d0:	ef 1a       	sub	r14, r31
     8d2:	fe ef       	ldi	r31, 0xFE	; 254
     8d4:	ff 0a       	sbc	r15, r31
     8d6:	f7 01       	movw	r30, r14
     8d8:	11 83       	std	Z+1, r17	; 0x01
     8da:	00 83       	st	Z, r16
	rule14.then_side = &then14;
     8dc:	0b ee       	ldi	r16, 0xEB	; 235
     8de:	11 e0       	ldi	r17, 0x01	; 1
     8e0:	0c 0f       	add	r16, r28
     8e2:	1d 1f       	adc	r17, r29
     8e4:	13 83       	std	Z+3, r17	; 0x03
     8e6:	02 83       	std	Z+2, r16	; 0x02
	rule14.next = &rule15;
     8e8:	b5 83       	std	Z+5, r27	; 0x05
     8ea:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 13: if eLeft and slLeft then oSlRight */
	struct rule_element_type then13;
	then13.value = &oSlRight.value;
     8ec:	66 5f       	subi	r22, 0xF6	; 246
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	c3 50       	subi	r28, 0x03	; 3
     8f2:	de 4f       	sbci	r29, 0xFE	; 254
     8f4:	79 83       	std	Y+1, r23	; 0x01
     8f6:	68 83       	st	Y, r22
     8f8:	cd 5f       	subi	r28, 0xFD	; 253
     8fa:	d1 40       	sbci	r29, 0x01	; 1
	then13.next = NULL;
     8fc:	c1 50       	subi	r28, 0x01	; 1
     8fe:	de 4f       	sbci	r29, 0xFE	; 254
     900:	19 82       	std	Y+1, r1	; 0x01
     902:	18 82       	st	Y, r1
     904:	cf 5f       	subi	r28, 0xFF	; 255
     906:	d1 40       	sbci	r29, 0x01	; 1
	
	struct rule_element_type if132;
	if132.value = &slLeft.value;
     908:	5c 96       	adiw	r26, 0x1c	; 28
     90a:	ec 51       	subi	r30, 0x1C	; 28
     90c:	f1 40       	sbci	r31, 0x01	; 1
     90e:	c7 52       	subi	r28, 0x27	; 39
     910:	dd 4f       	sbci	r29, 0xFD	; 253
     912:	f9 83       	std	Y+1, r31	; 0x01
     914:	e8 83       	st	Y, r30
     916:	c9 5d       	subi	r28, 0xD9	; 217
     918:	d2 40       	sbci	r29, 0x02	; 2
     91a:	11 96       	adiw	r26, 0x01	; 1
     91c:	fc 93       	st	X, r31
     91e:	ee 93       	st	-X, r30
	if132.next = NULL;
     920:	13 96       	adiw	r26, 0x03	; 3
     922:	1c 92       	st	X, r1
     924:	1e 92       	st	-X, r1
     926:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if131;
	if131.value = &eLeft.value;
     928:	06 5e       	subi	r16, 0xE6	; 230
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	fa e0       	ldi	r31, 0x0A	; 10
     92e:	6f 0e       	add	r6, r31
     930:	71 1c       	adc	r7, r1
     932:	f8 01       	movw	r30, r16
     934:	71 82       	std	Z+1, r7	; 0x01
     936:	60 82       	st	Z, r6
	if131.next = &if132;
     938:	b3 83       	std	Z+3, r27	; 0x03
     93a:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule13;
	rule13.if_side = &if131;
     93c:	18 96       	adiw	r26, 0x08	; 8
     93e:	11 96       	adiw	r26, 0x01	; 1
     940:	1c 93       	st	X, r17
     942:	0e 93       	st	-X, r16
	rule13.then_side = &then13;
     944:	0d ef       	ldi	r16, 0xFD	; 253
     946:	11 e0       	ldi	r17, 0x01	; 1
     948:	0c 0f       	add	r16, r28
     94a:	1d 1f       	adc	r17, r29
     94c:	13 96       	adiw	r26, 0x03	; 3
     94e:	1c 93       	st	X, r17
     950:	0e 93       	st	-X, r16
     952:	12 97       	sbiw	r26, 0x02	; 2
	rule13.next = &rule14;
     954:	15 96       	adiw	r26, 0x05	; 5
     956:	fc 92       	st	X, r15
     958:	ee 92       	st	-X, r14
     95a:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 12: if eLeft and left then oSlRight */
	struct rule_element_type then12;
	then12.value = &oSlRight.value;
     95c:	c1 5f       	subi	r28, 0xF1	; 241
     95e:	dd 4f       	sbci	r29, 0xFD	; 253
     960:	79 83       	std	Y+1, r23	; 0x01
     962:	68 83       	st	Y, r22
     964:	cf 50       	subi	r28, 0x0F	; 15
     966:	d2 40       	sbci	r29, 0x02	; 2
	then12.next = NULL;
     968:	cf 5e       	subi	r28, 0xEF	; 239
     96a:	dd 4f       	sbci	r29, 0xFD	; 253
     96c:	19 82       	std	Y+1, r1	; 0x01
     96e:	18 82       	st	Y, r1
     970:	c1 51       	subi	r28, 0x11	; 17
     972:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if122;
	if122.value = &left.value;
     974:	0a 5e       	subi	r16, 0xEA	; 234
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	0f 2e       	mov	r0, r31
     97a:	fb eb       	ldi	r31, 0xBB	; 187
     97c:	8f 2e       	mov	r8, r31
     97e:	91 2c       	mov	r9, r1
     980:	f0 2d       	mov	r31, r0
     982:	8c 0e       	add	r8, r28
     984:	9d 1e       	adc	r9, r29
     986:	ea e0       	ldi	r30, 0x0A	; 10
     988:	8e 0e       	add	r8, r30
     98a:	91 1c       	adc	r9, r1
     98c:	f8 01       	movw	r30, r16
     98e:	91 82       	std	Z+1, r9	; 0x01
     990:	80 82       	st	Z, r8
	if122.next = NULL;
     992:	13 82       	std	Z+3, r1	; 0x03
     994:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if121;
	if121.value = &eLeft.value;
     996:	7e 01       	movw	r14, r28
     998:	f9 ee       	ldi	r31, 0xE9	; 233
     99a:	ef 1a       	sub	r14, r31
     99c:	fd ef       	ldi	r31, 0xFD	; 253
     99e:	ff 0a       	sbc	r15, r31
     9a0:	f7 01       	movw	r30, r14
     9a2:	71 82       	std	Z+1, r7	; 0x01
     9a4:	60 82       	st	Z, r6
	if121.next = &if122;
     9a6:	13 83       	std	Z+3, r17	; 0x03
     9a8:	02 83       	std	Z+2, r16	; 0x02
	
	struct rule_type rule12;
	rule12.if_side = &if121;
     9aa:	08 5f       	subi	r16, 0xF8	; 248
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	f8 01       	movw	r30, r16
     9b0:	f1 82       	std	Z+1, r15	; 0x01
     9b2:	e0 82       	st	Z, r14
	rule12.then_side = &then12;
     9b4:	0f 2e       	mov	r0, r31
     9b6:	ff e0       	ldi	r31, 0x0F	; 15
     9b8:	ef 2e       	mov	r14, r31
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	ff 2e       	mov	r15, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	ec 0e       	add	r14, r28
     9c2:	fd 1e       	adc	r15, r29
     9c4:	f3 82       	std	Z+3, r15	; 0x03
     9c6:	e2 82       	std	Z+2, r14	; 0x02
	rule12.next = &rule13;
     9c8:	b5 83       	std	Z+5, r27	; 0x05
     9ca:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 11: if eLeft and straight then slRight */
	struct rule_element_type then11;
	then11.value = &slRight.value;
     9cc:	cf 5d       	subi	r28, 0xDF	; 223
     9ce:	dd 4f       	sbci	r29, 0xFD	; 253
     9d0:	d9 82       	std	Y+1, r13	; 0x01
     9d2:	c8 82       	st	Y, r12
     9d4:	c1 52       	subi	r28, 0x21	; 33
     9d6:	d2 40       	sbci	r29, 0x02	; 2
	then11.next = NULL;
     9d8:	cd 5d       	subi	r28, 0xDD	; 221
     9da:	dd 4f       	sbci	r29, 0xFD	; 253
     9dc:	19 82       	std	Y+1, r1	; 0x01
     9de:	18 82       	st	Y, r1
     9e0:	c3 52       	subi	r28, 0x23	; 35
     9e2:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if112;
	if112.value = &straight.value;
     9e4:	3a 96       	adiw	r30, 0x0a	; 10
     9e6:	aa e0       	ldi	r26, 0x0A	; 10
     9e8:	4a 0e       	add	r4, r26
     9ea:	51 1c       	adc	r5, r1
     9ec:	51 82       	std	Z+1, r5	; 0x01
     9ee:	40 82       	st	Z, r4
	if112.next = NULL;
     9f0:	13 82       	std	Z+3, r1	; 0x03
     9f2:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if111;
	if111.value = &eLeft.value;
     9f4:	7e 01       	movw	r14, r28
     9f6:	b7 ed       	ldi	r27, 0xD7	; 215
     9f8:	eb 1a       	sub	r14, r27
     9fa:	bd ef       	ldi	r27, 0xFD	; 253
     9fc:	fb 0a       	sbc	r15, r27
     9fe:	d7 01       	movw	r26, r14
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	7c 92       	st	X, r7
     a04:	6e 92       	st	-X, r6
	if111.next = &if112;
     a06:	13 96       	adiw	r26, 0x03	; 3
     a08:	fc 93       	st	X, r31
     a0a:	ee 93       	st	-X, r30
     a0c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule11;
	rule11.if_side = &if111;
     a0e:	38 96       	adiw	r30, 0x08	; 8
     a10:	f1 82       	std	Z+1, r15	; 0x01
     a12:	e0 82       	st	Z, r14
	rule11.then_side = &then11;
     a14:	0f 2e       	mov	r0, r31
     a16:	f1 e2       	ldi	r31, 0x21	; 33
     a18:	ef 2e       	mov	r14, r31
     a1a:	f2 e0       	ldi	r31, 0x02	; 2
     a1c:	ff 2e       	mov	r15, r31
     a1e:	f0 2d       	mov	r31, r0
     a20:	ec 0e       	add	r14, r28
     a22:	fd 1e       	adc	r15, r29
     a24:	f3 82       	std	Z+3, r15	; 0x03
     a26:	e2 82       	std	Z+2, r14	; 0x02
	rule11.next = &rule12;
     a28:	15 83       	std	Z+5, r17	; 0x05
     a2a:	04 83       	std	Z+4, r16	; 0x04
	
	/* rule # 10: if eLeft and slRight then oslRight */
	struct rule_element_type then10;
	then10.value = &oSlRight.value;
     a2c:	cd 5c       	subi	r28, 0xCD	; 205
     a2e:	dd 4f       	sbci	r29, 0xFD	; 253
     a30:	79 83       	std	Y+1, r23	; 0x01
     a32:	68 83       	st	Y, r22
     a34:	c3 53       	subi	r28, 0x33	; 51
     a36:	d2 40       	sbci	r29, 0x02	; 2
	then10.next = NULL;
     a38:	cb 5c       	subi	r28, 0xCB	; 203
     a3a:	dd 4f       	sbci	r29, 0xFD	; 253
     a3c:	19 82       	std	Y+1, r1	; 0x01
     a3e:	18 82       	st	Y, r1
     a40:	c5 53       	subi	r28, 0x35	; 53
     a42:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if102;
	if102.value = &slRight.value;
     a44:	04 5e       	subi	r16, 0xE4	; 228
     a46:	1f 4f       	sbci	r17, 0xFF	; 255
     a48:	d8 01       	movw	r26, r16
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	dc 92       	st	X, r13
     a4e:	ce 92       	st	-X, r12
	if102.next = NULL;
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	1c 92       	st	X, r1
     a54:	1e 92       	st	-X, r1
     a56:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if101;
	if101.value = &eLeft.value;
     a58:	7e 01       	movw	r14, r28
     a5a:	b5 ec       	ldi	r27, 0xC5	; 197
     a5c:	eb 1a       	sub	r14, r27
     a5e:	bd ef       	ldi	r27, 0xFD	; 253
     a60:	fb 0a       	sbc	r15, r27
     a62:	d7 01       	movw	r26, r14
     a64:	11 96       	adiw	r26, 0x01	; 1
     a66:	7c 92       	st	X, r7
     a68:	6e 92       	st	-X, r6
	if101.next = &if102;
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	1c 93       	st	X, r17
     a6e:	0e 93       	st	-X, r16
     a70:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule10;
	rule10.if_side = &if101;
     a72:	08 5f       	subi	r16, 0xF8	; 248
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	d8 01       	movw	r26, r16
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	fc 92       	st	X, r15
     a7c:	ee 92       	st	-X, r14
	rule10.then_side = &then10;
     a7e:	0f 2e       	mov	r0, r31
     a80:	f3 e3       	ldi	r31, 0x33	; 51
     a82:	ef 2e       	mov	r14, r31
     a84:	f2 e0       	ldi	r31, 0x02	; 2
     a86:	ff 2e       	mov	r15, r31
     a88:	f0 2d       	mov	r31, r0
     a8a:	ec 0e       	add	r14, r28
     a8c:	fd 1e       	adc	r15, r29
     a8e:	13 96       	adiw	r26, 0x03	; 3
     a90:	fc 92       	st	X, r15
     a92:	ee 92       	st	-X, r14
     a94:	12 97       	sbiw	r26, 0x02	; 2
	rule10.next = &rule11;
     a96:	15 96       	adiw	r26, 0x05	; 5
     a98:	fc 93       	st	X, r31
     a9a:	ee 93       	st	-X, r30
     a9c:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 9: if eLeft and Right then oSlRight */
	struct rule_element_type then9;
	then9.value = &oSlRight.value;
     a9e:	7e 01       	movw	r14, r28
     aa0:	ab eb       	ldi	r26, 0xBB	; 187
     aa2:	ea 1a       	sub	r14, r26
     aa4:	ad ef       	ldi	r26, 0xFD	; 253
     aa6:	fa 0a       	sbc	r15, r26
     aa8:	f7 01       	movw	r30, r14
     aaa:	71 83       	std	Z+1, r23	; 0x01
     aac:	60 83       	st	Z, r22
	then9.next = NULL;
     aae:	13 82       	std	Z+3, r1	; 0x03
     ab0:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if92;
	if92.value = &right.value;
     ab2:	34 96       	adiw	r30, 0x04	; 4
     ab4:	cb 52       	subi	r28, 0x2B	; 43
     ab6:	dd 4f       	sbci	r29, 0xFD	; 253
     ab8:	68 81       	ld	r22, Y
     aba:	79 81       	ldd	r23, Y+1	; 0x01
     abc:	c5 5d       	subi	r28, 0xD5	; 213
     abe:	d2 40       	sbci	r29, 0x02	; 2
     ac0:	71 83       	std	Z+1, r23	; 0x01
     ac2:	60 83       	st	Z, r22
	if92.next = NULL;
     ac4:	13 82       	std	Z+3, r1	; 0x03
     ac6:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if91;
	if91.value = &eLeft.value;
     ac8:	be 01       	movw	r22, r28
     aca:	63 5b       	subi	r22, 0xB3	; 179
     acc:	7d 4f       	sbci	r23, 0xFD	; 253
     ace:	db 01       	movw	r26, r22
     ad0:	11 96       	adiw	r26, 0x01	; 1
     ad2:	7c 92       	st	X, r7
     ad4:	6e 92       	st	-X, r6
	if91.next = &if92;
     ad6:	13 96       	adiw	r26, 0x03	; 3
     ad8:	fc 93       	st	X, r31
     ada:	ee 93       	st	-X, r30
     adc:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule9;
	rule9.if_side = &if91;
     ade:	38 96       	adiw	r30, 0x08	; 8
     ae0:	71 83       	std	Z+1, r23	; 0x01
     ae2:	60 83       	st	Z, r22
	rule9.then_side = &then9;
     ae4:	f3 82       	std	Z+3, r15	; 0x03
     ae6:	e2 82       	std	Z+2, r14	; 0x02
	rule9.next = &rule10;
     ae8:	15 83       	std	Z+5, r17	; 0x05
     aea:	04 83       	std	Z+4, r16	; 0x04
	
	/* rule # 8: if eLeft and shRight then oRight */
	struct rule_element_type then8;
	then8.value = &oRight.value;
     aec:	7e 01       	movw	r14, r28
     aee:	b9 ea       	ldi	r27, 0xA9	; 169
     af0:	eb 1a       	sub	r14, r27
     af2:	bd ef       	ldi	r27, 0xFD	; 253
     af4:	fb 0a       	sbc	r15, r27
     af6:	46 5f       	subi	r20, 0xF6	; 246
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	d7 01       	movw	r26, r14
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	5c 93       	st	X, r21
     b00:	4e 93       	st	-X, r20
	then8.next = NULL;
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	1c 92       	st	X, r1
     b06:	1e 92       	st	-X, r1
     b08:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if82;
	if82.value = &shRight.value;
     b0a:	62 5f       	subi	r22, 0xF2	; 242
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	09 e2       	ldi	r16, 0x29	; 41
     b10:	11 e0       	ldi	r17, 0x01	; 1
     b12:	0c 0f       	add	r16, r28
     b14:	1d 1f       	adc	r17, r29
     b16:	06 5f       	subi	r16, 0xF6	; 246
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	db 01       	movw	r26, r22
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	1c 93       	st	X, r17
     b20:	0e 93       	st	-X, r16
	if82.next = NULL;
     b22:	13 96       	adiw	r26, 0x03	; 3
     b24:	1c 92       	st	X, r1
     b26:	1e 92       	st	-X, r1
     b28:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if81;
	if81.value = &eLeft.value;
     b2a:	04 5d       	subi	r16, 0xD4	; 212
     b2c:	1e 4f       	sbci	r17, 0xFE	; 254
     b2e:	d8 01       	movw	r26, r16
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	7c 92       	st	X, r7
     b34:	6e 92       	st	-X, r6
	if81.next = &if82;
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	7c 93       	st	X, r23
     b3a:	6e 93       	st	-X, r22
     b3c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule8;
	rule8.if_side = &if81;
     b3e:	68 5f       	subi	r22, 0xF8	; 248
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	db 01       	movw	r26, r22
     b44:	11 96       	adiw	r26, 0x01	; 1
     b46:	1c 93       	st	X, r17
     b48:	0e 93       	st	-X, r16
	rule8.then_side = &then8;
     b4a:	13 96       	adiw	r26, 0x03	; 3
     b4c:	fc 92       	st	X, r15
     b4e:	ee 92       	st	-X, r14
     b50:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     b52:	15 96       	adiw	r26, 0x05	; 5
     b54:	fc 93       	st	X, r31
     b56:	ee 93       	st	-X, r30
     b58:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 7: if center then oStraight */
	struct rule_element_type then7;
	then7.value = &oStraight.value;
     b5a:	16 96       	adiw	r26, 0x06	; 6
     b5c:	26 5f       	subi	r18, 0xF6	; 246
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	3c 93       	st	X, r19
     b64:	2e 93       	st	-X, r18
	then7.next = NULL;
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	1c 92       	st	X, r1
     b6a:	1e 92       	st	-X, r1
     b6c:	12 97       	sbiw	r26, 0x02	; 2

	
	struct rule_element_type if71;
	if71.value = &center.value;
     b6e:	2e 51       	subi	r18, 0x1E	; 30
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	0d e3       	ldi	r16, 0x3D	; 61
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	0c 0f       	add	r16, r28
     b78:	1d 1f       	adc	r17, r29
     b7a:	06 5f       	subi	r16, 0xF6	; 246
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	f9 01       	movw	r30, r18
     b80:	11 83       	std	Z+1, r17	; 0x01
     b82:	00 83       	st	Z, r16
	if71.next = NULL;
     b84:	13 82       	std	Z+3, r1	; 0x03
     b86:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_type rule7;
	rule7.if_side = &if71;
     b88:	34 96       	adiw	r30, 0x04	; 4
     b8a:	31 83       	std	Z+1, r19	; 0x01
     b8c:	20 83       	st	Z, r18
	rule7.then_side = &then7;
     b8e:	b3 83       	std	Z+3, r27	; 0x03
     b90:	a2 83       	std	Z+2, r26	; 0x02
	rule7.next = &rule8;
     b92:	75 83       	std	Z+5, r23	; 0x05
     b94:	64 83       	std	Z+4, r22	; 0x04
	
	
	/* rule # 6: if eRight and straight then oSlLeft */
	struct rule_element_type then6;
	then6.value = &oSlLeft.value;
     b96:	00 5d       	subi	r16, 0xD0	; 208
     b98:	1d 4f       	sbci	r17, 0xFD	; 253
     b9a:	d8 01       	movw	r26, r16
     b9c:	11 96       	adiw	r26, 0x01	; 1
     b9e:	bc 92       	st	X, r11
     ba0:	ae 92       	st	-X, r10
	then6.next = NULL;
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	1c 92       	st	X, r1
     ba6:	1e 92       	st	-X, r1
     ba8:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if62;
	if62.value = &straight.value;
     baa:	22 5f       	subi	r18, 0xF2	; 242
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	d9 01       	movw	r26, r18
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	5c 92       	st	X, r5
     bb4:	4e 92       	st	-X, r4
	if62.next = NULL;
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	1c 92       	st	X, r1
     bba:	1e 92       	st	-X, r1
     bbc:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if61;
	if61.value = &eRight.value;
     bbe:	64 5e       	subi	r22, 0xE4	; 228
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	db 01       	movw	r26, r22
     bc4:	11 96       	adiw	r26, 0x01	; 1
     bc6:	9c 93       	st	X, r25
     bc8:	8e 93       	st	-X, r24
	if61.next = &if62;
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	3c 93       	st	X, r19
     bce:	2e 93       	st	-X, r18
     bd0:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule6;
	rule6.if_side = &if61;
     bd2:	28 5f       	subi	r18, 0xF8	; 248
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	d9 01       	movw	r26, r18
     bd8:	11 96       	adiw	r26, 0x01	; 1
     bda:	7c 93       	st	X, r23
     bdc:	6e 93       	st	-X, r22
	rule6.then_side = &then6;
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	1c 93       	st	X, r17
     be2:	0e 93       	st	-X, r16
     be4:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     be6:	15 96       	adiw	r26, 0x05	; 5
     be8:	fc 93       	st	X, r31
     bea:	ee 93       	st	-X, r30
     bec:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 5: if eRight and slLeft then oSlLeft */
	struct rule_element_type then5;
	then5.value = &oSlLeft.value;
     bee:	16 96       	adiw	r26, 0x06	; 6
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	bc 92       	st	X, r11
     bf4:	ae 92       	st	-X, r10
	then5.next = NULL;
     bf6:	13 96       	adiw	r26, 0x03	; 3
     bf8:	1c 92       	st	X, r1
     bfa:	1e 92       	st	-X, r1
     bfc:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if52;
	if52.value = &slLeft.value;
     bfe:	0a 5e       	subi	r16, 0xEA	; 234
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	c7 52       	subi	r28, 0x27	; 39
     c04:	dd 4f       	sbci	r29, 0xFD	; 253
     c06:	e8 80       	ld	r14, Y
     c08:	f9 80       	ldd	r15, Y+1	; 0x01
     c0a:	c9 5d       	subi	r28, 0xD9	; 217
     c0c:	d2 40       	sbci	r29, 0x02	; 2
     c0e:	f8 01       	movw	r30, r16
     c10:	f1 82       	std	Z+1, r15	; 0x01
     c12:	e0 82       	st	Z, r14
	if52.next = NULL;
     c14:	13 82       	std	Z+3, r1	; 0x03
     c16:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if51;
	if51.value = &eRight.value;
     c18:	6e 5e       	subi	r22, 0xEE	; 238
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	fb 01       	movw	r30, r22
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
	if51.next = &if52;
     c22:	13 83       	std	Z+3, r17	; 0x03
     c24:	02 83       	std	Z+2, r16	; 0x02
	
	struct rule_type rule5;
	rule5.if_side = &if51;
     c26:	34 96       	adiw	r30, 0x04	; 4
     c28:	71 83       	std	Z+1, r23	; 0x01
     c2a:	60 83       	st	Z, r22
	rule5.then_side = &then5;
     c2c:	b3 83       	std	Z+3, r27	; 0x03
     c2e:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     c30:	35 83       	std	Z+5, r19	; 0x05
     c32:	24 83       	std	Z+4, r18	; 0x04
	
	/* rule # 4: if eRight and left then oSlLeft */
	struct rule_element_type then4;
	then4.value = &oSlLeft.value;
     c34:	02 5f       	subi	r16, 0xF2	; 242
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
     c38:	d8 01       	movw	r26, r16
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	bc 92       	st	X, r11
     c3e:	ae 92       	st	-X, r10
	then4.next = NULL;
     c40:	13 96       	adiw	r26, 0x03	; 3
     c42:	1c 92       	st	X, r1
     c44:	1e 92       	st	-X, r1
     c46:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &left.value;
     c48:	24 5e       	subi	r18, 0xE4	; 228
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	d9 01       	movw	r26, r18
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 92       	st	X, r9
     c52:	8e 92       	st	-X, r8
	if42.next = NULL;
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	1c 92       	st	X, r1
     c58:	1e 92       	st	-X, r1
     c5a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &eRight.value;
     c5c:	6e 5e       	subi	r22, 0xEE	; 238
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	db 01       	movw	r26, r22
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	9c 93       	st	X, r25
     c66:	8e 93       	st	-X, r24
	if41.next = &if42;
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	3c 93       	st	X, r19
     c6c:	2e 93       	st	-X, r18
     c6e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule4;
	rule4.if_side = &if41;
     c70:	28 5f       	subi	r18, 0xF8	; 248
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	d9 01       	movw	r26, r18
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	7c 93       	st	X, r23
     c7a:	6e 93       	st	-X, r22
	rule4.then_side = &then4;
     c7c:	13 96       	adiw	r26, 0x03	; 3
     c7e:	1c 93       	st	X, r17
     c80:	0e 93       	st	-X, r16
     c82:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     c84:	15 96       	adiw	r26, 0x05	; 5
     c86:	fc 93       	st	X, r31
     c88:	ee 93       	st	-X, r30
     c8a:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 3: if eRight and sharpLeft then left */
	struct rule_element_type then3;
	then3.value = &oLeft.value;
     c8c:	7e 01       	movw	r14, r28
     c8e:	b3 e5       	ldi	r27, 0x53	; 83
     c90:	eb 1a       	sub	r14, r27
     c92:	bd ef       	ldi	r27, 0xFD	; 253
     c94:	fb 0a       	sbc	r15, r27
     c96:	65 e5       	ldi	r22, 0x55	; 85
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	6c 0f       	add	r22, r28
     c9c:	7d 1f       	adc	r23, r29
     c9e:	66 5f       	subi	r22, 0xF6	; 246
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	f7 01       	movw	r30, r14
     ca4:	71 83       	std	Z+1, r23	; 0x01
     ca6:	60 83       	st	Z, r22
	then3.next = NULL;
     ca8:	13 82       	std	Z+3, r1	; 0x03
     caa:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &shLeft.value;
     cac:	de 01       	movw	r26, r28
     cae:	af 54       	subi	r26, 0x4F	; 79
     cb0:	bd 4f       	sbci	r27, 0xFD	; 253
     cb2:	05 ea       	ldi	r16, 0xA5	; 165
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	0c 0f       	add	r16, r28
     cb8:	1d 1f       	adc	r17, r29
     cba:	06 5f       	subi	r16, 0xF6	; 246
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	1c 93       	st	X, r17
     cc2:	0e 93       	st	-X, r16
	if32.next = NULL;
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	1c 92       	st	X, r1
     cc8:	1e 92       	st	-X, r1
     cca:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &eRight.value;
     ccc:	0a 5f       	subi	r16, 0xFA	; 250
     cce:	1d 4f       	sbci	r17, 0xFD	; 253
     cd0:	f8 01       	movw	r30, r16
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24
	if31.next = &if32;
     cd6:	b3 83       	std	Z+3, r27	; 0x03
     cd8:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule3;
	rule3.if_side = &if31;
     cda:	18 96       	adiw	r26, 0x08	; 8
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	1c 93       	st	X, r17
     ce0:	0e 93       	st	-X, r16
	rule3.then_side = &then3;
     ce2:	13 96       	adiw	r26, 0x03	; 3
     ce4:	fc 92       	st	X, r15
     ce6:	ee 92       	st	-X, r14
     ce8:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     cea:	15 96       	adiw	r26, 0x05	; 5
     cec:	3c 93       	st	X, r19
     cee:	2e 93       	st	-X, r18
     cf0:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 2: if farLeft then right */
	struct rule_element_type if21;
	if21.value = &farLeft.value;
     cf2:	06 5f       	subi	r16, 0xF6	; 246
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	8e 5b       	subi	r24, 0xBE	; 190
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
	if21.next = NULL;
     d00:	13 82       	std	Z+3, r1	; 0x03
     d02:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type then2;
	then2.value = &oRight.value;
     d04:	80 5b       	subi	r24, 0xB0	; 176
     d06:	9d 4f       	sbci	r25, 0xFD	; 253
     d08:	fc 01       	movw	r30, r24
     d0a:	51 83       	std	Z+1, r21	; 0x01
     d0c:	40 83       	st	Z, r20
	then2.next = NULL;
     d0e:	13 82       	std	Z+3, r1	; 0x03
     d10:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_type rule2;
	rule2.if_side = &if21;
     d12:	20 5e       	subi	r18, 0xE0	; 224
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	f9 01       	movw	r30, r18
     d18:	11 83       	std	Z+1, r17	; 0x01
     d1a:	00 83       	st	Z, r16
	rule2.then_side = &then2;
     d1c:	93 83       	std	Z+3, r25	; 0x03
     d1e:	82 83       	std	Z+2, r24	; 0x02
	rule2.next = &rule3;
     d20:	b5 83       	std	Z+5, r27	; 0x05
     d22:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 1: if farRight then oLeft */
	struct rule_element_type if11;
	if11.value = &farRight.value;
     d24:	0a 96       	adiw	r24, 0x0a	; 10
     d26:	4c 59       	subi	r20, 0x9C	; 156
     d28:	51 40       	sbci	r21, 0x01	; 1
     d2a:	dc 01       	movw	r26, r24
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	5c 93       	st	X, r21
     d30:	4e 93       	st	-X, r20
	if11.next = NULL;
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	1c 92       	st	X, r1
     d36:	1e 92       	st	-X, r1
     d38:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type then1;
	then1.value = &oLeft.value;
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	7c 93       	st	X, r23
     d40:	6e 93       	st	-X, r22
	then1.next = NULL;
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	1c 92       	st	X, r1
     d46:	1e 92       	st	-X, r1
     d48:	12 97       	sbiw	r26, 0x02	; 2
	
	rule1.if_side = &if11;
     d4a:	e8 52       	subi	r30, 0x28	; 40
     d4c:	f2 40       	sbci	r31, 0x02	; 2
     d4e:	91 83       	std	Z+1, r25	; 0x01
     d50:	80 83       	st	Z, r24
	rule1.then_side = &then1;
     d52:	b3 83       	std	Z+3, r27	; 0x03
     d54:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     d56:	35 83       	std	Z+5, r19	; 0x05
     d58:	24 83       	std	Z+4, r18	; 0x04
	
	// pointers to top of lists
	Rule_Base = &rule1;
     d5a:	f0 93 90 02 	sts	0x0290, r31
     d5e:	e0 93 8f 02 	sts	0x028F, r30
	System_Inputs = &error;
     d62:	e1 e0       	ldi	r30, 0x01	; 1
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	ec 0f       	add	r30, r28
     d68:	fd 1f       	adc	r31, r29
     d6a:	f0 93 8e 02 	sts	0x028E, r31
     d6e:	e0 93 8d 02 	sts	0x028D, r30
	System_Outputs = &servo;
     d72:	0f 2e       	mov	r0, r31
     d74:	ff e8       	ldi	r31, 0x8F	; 143
     d76:	ef 2e       	mov	r14, r31
     d78:	f1 2c       	mov	r15, r1
     d7a:	f0 2d       	mov	r31, r0
     d7c:	ec 0e       	add	r14, r28
     d7e:	fd 1e       	adc	r15, r29
     d80:	f0 92 8c 02 	sts	0x028C, r15
     d84:	e0 92 8b 02 	sts	0x028B, r14
	
	
	// set iErr's input value to measErr value
	if(measErr<0)				// if sensor value is smaller than error's input set's lower limit
     d88:	c9 52       	subi	r28, 0x29	; 41
     d8a:	dd 4f       	sbci	r29, 0xFD	; 253
     d8c:	08 81       	ld	r16, Y
     d8e:	19 81       	ldd	r17, Y+1	; 0x01
     d90:	c7 5d       	subi	r28, 0xD7	; 215
     d92:	d2 40       	sbci	r29, 0x02	; 2
     d94:	11 23       	and	r17, r17
     d96:	1c f4       	brge	.+6      	; 0xd9e <FLC_steering+0xcd2>
	{
		error.value = 0;  // force input value to lowest point in error's input set
     d98:	1c 86       	std	Y+12, r1	; 0x0c
     d9a:	1b 86       	std	Y+11, r1	; 0x0b
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <FLC_steering+0xcfe>
	}
	else if(measErr>250)			// if sensor value is bigger than error's input set's upper limit
     d9e:	c9 52       	subi	r28, 0x29	; 41
     da0:	dd 4f       	sbci	r29, 0xFD	; 253
     da2:	28 81       	ld	r18, Y
     da4:	39 81       	ldd	r19, Y+1	; 0x01
     da6:	c7 5d       	subi	r28, 0xD7	; 215
     da8:	d2 40       	sbci	r29, 0x02	; 2
     daa:	2b 3f       	cpi	r18, 0xFB	; 251
     dac:	31 05       	cpc	r19, r1
     dae:	2c f0       	brlt	.+10     	; 0xdba <FLC_steering+0xcee>
	{
		error.value = 250;  // force input value to lowest point in error's input set
     db0:	8a ef       	ldi	r24, 0xFA	; 250
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 87       	std	Y+12, r25	; 0x0c
     db6:	8b 87       	std	Y+11, r24	; 0x0b
     db8:	08 c0       	rjmp	.+16     	; 0xdca <FLC_steering+0xcfe>
	}
	else
	{
		error.value = measErr; 
     dba:	c9 52       	subi	r28, 0x29	; 41
     dbc:	dd 4f       	sbci	r29, 0xFD	; 253
     dbe:	48 81       	ld	r20, Y
     dc0:	59 81       	ldd	r21, Y+1	; 0x01
     dc2:	c7 5d       	subi	r28, 0xD7	; 215
     dc4:	d2 40       	sbci	r29, 0x02	; 2
     dc6:	5c 87       	std	Y+12, r21	; 0x0c
     dc8:	4b 87       	std	Y+11, r20	; 0x0b
	}
	
	// set iAng's input value to measAng value 
	if(measAng<2260)				// if sensor value is smaller than error's input set lower limit
     dca:	c5 52       	subi	r28, 0x25	; 37
     dcc:	dd 4f       	sbci	r29, 0xFD	; 253
     dce:	88 81       	ld	r24, Y
     dd0:	99 81       	ldd	r25, Y+1	; 0x01
     dd2:	cb 5d       	subi	r28, 0xDB	; 219
     dd4:	d2 40       	sbci	r29, 0x02	; 2
     dd6:	84 3d       	cpi	r24, 0xD4	; 212
     dd8:	98 40       	sbci	r25, 0x08	; 8
     dda:	4c f4       	brge	.+18     	; 0xdee <FLC_steering+0xd22>
	{
		angle.value = 2260;  // force input value to lowest point in error's input set
     ddc:	84 ed       	ldi	r24, 0xD4	; 212
     dde:	98 e0       	ldi	r25, 0x08	; 8
     de0:	c7 57       	subi	r28, 0x77	; 119
     de2:	df 4f       	sbci	r29, 0xFF	; 255
     de4:	99 83       	std	Y+1, r25	; 0x01
     de6:	88 83       	st	Y, r24
     de8:	c9 58       	subi	r28, 0x89	; 137
     dea:	d0 40       	sbci	r29, 0x00	; 0
     dec:	20 c0       	rjmp	.+64     	; 0xe2e <FLC_steering+0xd62>
	}
	else if(measAng>3060)			// if sensor value is bigger than error's input set's upper limit
     dee:	c5 52       	subi	r28, 0x25	; 37
     df0:	dd 4f       	sbci	r29, 0xFD	; 253
     df2:	e8 80       	ld	r14, Y
     df4:	f9 80       	ldd	r15, Y+1	; 0x01
     df6:	cb 5d       	subi	r28, 0xDB	; 219
     df8:	d2 40       	sbci	r29, 0x02	; 2
     dfa:	05 ef       	ldi	r16, 0xF5	; 245
     dfc:	e0 16       	cp	r14, r16
     dfe:	0b e0       	ldi	r16, 0x0B	; 11
     e00:	f0 06       	cpc	r15, r16
     e02:	4c f0       	brlt	.+18     	; 0xe16 <FLC_steering+0xd4a>
	{
		angle.value = 3060;  // force input value to lowest point in error's input set
     e04:	84 ef       	ldi	r24, 0xF4	; 244
     e06:	9b e0       	ldi	r25, 0x0B	; 11
     e08:	c7 57       	subi	r28, 0x77	; 119
     e0a:	df 4f       	sbci	r29, 0xFF	; 255
     e0c:	99 83       	std	Y+1, r25	; 0x01
     e0e:	88 83       	st	Y, r24
     e10:	c9 58       	subi	r28, 0x89	; 137
     e12:	d0 40       	sbci	r29, 0x00	; 0
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <FLC_steering+0xd62>
	}
	else
	{
		angle.value = measAng;
     e16:	c5 52       	subi	r28, 0x25	; 37
     e18:	dd 4f       	sbci	r29, 0xFD	; 253
     e1a:	28 81       	ld	r18, Y
     e1c:	39 81       	ldd	r19, Y+1	; 0x01
     e1e:	cb 5d       	subi	r28, 0xDB	; 219
     e20:	d2 40       	sbci	r29, 0x02	; 2
     e22:	c7 57       	subi	r28, 0x77	; 119
     e24:	df 4f       	sbci	r29, 0xFF	; 255
     e26:	39 83       	std	Y+1, r19	; 0x01
     e28:	28 83       	st	Y, r18
     e2a:	c9 58       	subi	r28, 0x89	; 137
     e2c:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	// the methods performing the FLC
	fuzzification();
     e2e:	55 d5       	rcall	.+2730   	; 0x18da <fuzzification>
	rule_evaluation();
     e30:	7b d5       	rcall	.+2806   	; 0x1928 <rule_evaluation>
	defuzzification();
     e32:	c0 d5       	rcall	.+2944   	; 0x19b4 <defuzzification>
	setServo(servo.value);
     e34:	c7 56       	subi	r28, 0x67	; 103
     e36:	df 4f       	sbci	r29, 0xFF	; 255
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	c9 59       	subi	r28, 0x99	; 153
     e3e:	d0 40       	sbci	r29, 0x00	; 0
     e40:	62 d7       	rcall	.+3780   	; 0x1d06 <setServo>
}
     e42:	c4 52       	subi	r28, 0x24	; 36
     e44:	dd 4f       	sbci	r29, 0xFD	; 253
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	bf 90       	pop	r11
     e62:	af 90       	pop	r10
     e64:	9f 90       	pop	r9
     e66:	8f 90       	pop	r8
     e68:	7f 90       	pop	r7
     e6a:	6f 90       	pop	r6
     e6c:	5f 90       	pop	r5
     e6e:	4f 90       	pop	r4
     e70:	3f 90       	pop	r3
     e72:	2f 90       	pop	r2
     e74:	08 95       	ret

00000e76 <FLC_road>:
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_road(int v, int d)
{
   
     e76:	2f 92       	push	r2
     e78:	3f 92       	push	r3
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	c3 52       	subi	r28, 0x23	; 35
     ea0:	d2 40       	sbci	r29, 0x02	; 2
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
   	struct io_type speed;       // input 2
   	struct io_type pwm;         // output
   	struct rule_type rule1;		// first rule in rule base 
	// Declaration of I/Os
    strcpy(speed.name, "speed");
    strcpy(distance.name, "distance");
     eac:	26 e0       	ldi	r18, 0x06	; 6
     eae:	ec e9       	ldi	r30, 0x9C	; 156
     eb0:	f1 e0       	ldi	r31, 0x01	; 1
     eb2:	de 01       	movw	r26, r28
     eb4:	51 96       	adiw	r26, 0x11	; 17
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	2a 95       	dec	r18
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <FLC_road+0x40>
    strcpy(pwm.name, "pwm");
     ebe:	29 e0       	ldi	r18, 0x09	; 9
     ec0:	e2 ea       	ldi	r30, 0xA2	; 162
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	ae 01       	movw	r20, r28
     ec6:	4f 5f       	subi	r20, 0xFF	; 255
     ec8:	5f 4f       	sbci	r21, 0xFF	; 255
     eca:	da 01       	movw	r26, r20
     ecc:	01 90       	ld	r0, Z+
     ece:	0d 92       	st	X+, r0
     ed0:	2a 95       	dec	r18
     ed2:	e1 f7       	brne	.-8      	; 0xecc <FLC_road+0x56>

     ed4:	00 e7       	ldi	r16, 0x70	; 112
     ed6:	17 e7       	ldi	r17, 0x77	; 119
     ed8:	2d e6       	ldi	r18, 0x6D	; 109
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	09 a3       	std	Y+33, r16	; 0x21
     ede:	1a a3       	std	Y+34, r17	; 0x22
     ee0:	2b a3       	std	Y+35, r18	; 0x23
     ee2:	3c a3       	std	Y+36, r19	; 0x24

	
    speed.value = v;
    distance.value = d;
     ee4:	9c 8f       	std	Y+28, r25	; 0x1c
     ee6:	8b 8f       	std	Y+27, r24	; 0x1b
	
     ee8:	7c 87       	std	Y+12, r23	; 0x0c
     eea:	6b 87       	std	Y+11, r22	; 0x0b
     * MF oneM:					[22 72 100 150]
     * MF stopDist:				[-1, 0, 12, 62]
     */
    struct mf_type threeM;
    strcpy(threeM.name, "threeM");
    threeM.value = 0;
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	eb ea       	ldi	r30, 0xAB	; 171
     ef0:	f1 e0       	ldi	r31, 0x01	; 1
     ef2:	de 01       	movw	r26, r28
     ef4:	d7 96       	adiw	r26, 0x37	; 55
     ef6:	01 90       	ld	r0, Z+
     ef8:	0d 92       	st	X+, r0
     efa:	8a 95       	dec	r24
     efc:	e1 f7       	brne	.-8      	; 0xef6 <FLC_road+0x80>
    threeM.point1 = 150;
     efe:	23 96       	adiw	r28, 0x03	; 3
     f00:	1f ae       	std	Y+63, r1	; 0x3f
     f02:	1e ae       	std	Y+62, r1	; 0x3e
     f04:	23 97       	sbiw	r28, 0x03	; 3
    threeM.point2 = 301;
     f06:	26 e9       	ldi	r18, 0x96	; 150
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	25 96       	adiw	r28, 0x05	; 5
     f0c:	3f af       	std	Y+63, r19	; 0x3f
     f0e:	2e af       	std	Y+62, r18	; 0x3e
     f10:	25 97       	sbiw	r28, 0x05	; 5
    threeM.slope1 = 2;
     f12:	8d e2       	ldi	r24, 0x2D	; 45
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	27 96       	adiw	r28, 0x07	; 7
     f18:	9f af       	std	Y+63, r25	; 0x3f
     f1a:	8e af       	std	Y+62, r24	; 0x3e
     f1c:	27 97       	sbiw	r28, 0x07	; 7
    threeM.slope2 = 100;
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	29 96       	adiw	r28, 0x09	; 9
     f24:	9f af       	std	Y+63, r25	; 0x3f
     f26:	8e af       	std	Y+62, r24	; 0x3e
     f28:	29 97       	sbiw	r28, 0x09	; 9
    threeM.next = NULL;
     f2a:	0f 2e       	mov	r0, r31
     f2c:	f4 e6       	ldi	r31, 0x64	; 100
     f2e:	6f 2e       	mov	r6, r31
     f30:	71 2c       	mov	r7, r1
     f32:	f0 2d       	mov	r31, r0
     f34:	2b 96       	adiw	r28, 0x0b	; 11
     f36:	7f ae       	std	Y+63, r7	; 0x3f
     f38:	6e ae       	std	Y+62, r6	; 0x3e
     f3a:	2b 97       	sbiw	r28, 0x0b	; 11
    
     f3c:	2d 96       	adiw	r28, 0x0d	; 13
     f3e:	1f ae       	std	Y+63, r1	; 0x3f
     f40:	1e ae       	std	Y+62, r1	; 0x3e
     f42:	2d 97       	sbiw	r28, 0x0d	; 13
    struct mf_type twoM;
    strcpy(twoM.name, "twoM");
    twoM.value = 0;
     f44:	6e 01       	movw	r12, r28
     f46:	1d e4       	ldi	r17, 0x4D	; 77
     f48:	c1 0e       	add	r12, r17
     f4a:	d1 1c       	adc	r13, r1
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	e2 eb       	ldi	r30, 0xB2	; 178
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	d6 01       	movw	r26, r12
     f54:	01 90       	ld	r0, Z+
     f56:	0d 92       	st	X+, r0
     f58:	6a 95       	dec	r22
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <FLC_road+0xde>
    twoM.point1 = 110;
     f5c:	d6 01       	movw	r26, r12
     f5e:	1b 96       	adiw	r26, 0x0b	; 11
     f60:	1c 92       	st	X, r1
     f62:	1e 92       	st	-X, r1
     f64:	1a 97       	sbiw	r26, 0x0a	; 10
    twoM.point2 = 222;
     f66:	6e e6       	ldi	r22, 0x6E	; 110
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	1d 96       	adiw	r26, 0x0d	; 13
     f6c:	7c 93       	st	X, r23
     f6e:	6e 93       	st	-X, r22
     f70:	1c 97       	sbiw	r26, 0x0c	; 12
    twoM.slope1 = 2;
     f72:	6e ed       	ldi	r22, 0xDE	; 222
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	1f 96       	adiw	r26, 0x0f	; 15
     f78:	7c 93       	st	X, r23
     f7a:	6e 93       	st	-X, r22
     f7c:	1e 97       	sbiw	r26, 0x0e	; 14
    twoM.slope2 = 2;
     f7e:	51 96       	adiw	r26, 0x11	; 17
     f80:	9c 93       	st	X, r25
     f82:	8e 93       	st	-X, r24
     f84:	50 97       	sbiw	r26, 0x10	; 16
    twoM.next = &threeM;
     f86:	53 96       	adiw	r26, 0x13	; 19
     f88:	9c 93       	st	X, r25
     f8a:	8e 93       	st	-X, r24
     f8c:	52 97       	sbiw	r26, 0x12	; 18
    
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	ec 0f       	add	r30, r28
     f94:	fd 1f       	adc	r31, r29
     f96:	55 96       	adiw	r26, 0x15	; 21
     f98:	fc 93       	st	X, r31
     f9a:	ee 93       	st	-X, r30
     f9c:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type oneM;
    strcpy(oneM.name, "oneM");
    oneM.value = 0;
     f9e:	5e 01       	movw	r10, r28
     fa0:	f3 e6       	ldi	r31, 0x63	; 99
     fa2:	af 0e       	add	r10, r31
     fa4:	b1 1c       	adc	r11, r1
     fa6:	65 e0       	ldi	r22, 0x05	; 5
     fa8:	e7 eb       	ldi	r30, 0xB7	; 183
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	d5 01       	movw	r26, r10
     fae:	01 90       	ld	r0, Z+
     fb0:	0d 92       	st	X+, r0
     fb2:	6a 95       	dec	r22
     fb4:	e1 f7       	brne	.-8      	; 0xfae <FLC_road+0x138>
    oneM.point1 = 22;
     fb6:	d5 01       	movw	r26, r10
     fb8:	1b 96       	adiw	r26, 0x0b	; 11
     fba:	1c 92       	st	X, r1
     fbc:	1e 92       	st	-X, r1
     fbe:	1a 97       	sbiw	r26, 0x0a	; 10
    oneM.point2 = 150;
     fc0:	66 e1       	ldi	r22, 0x16	; 22
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	1d 96       	adiw	r26, 0x0d	; 13
     fc6:	7c 93       	st	X, r23
     fc8:	6e 93       	st	-X, r22
     fca:	1c 97       	sbiw	r26, 0x0c	; 12
    oneM.slope1 = 2;
     fcc:	1f 96       	adiw	r26, 0x0f	; 15
     fce:	3c 93       	st	X, r19
     fd0:	2e 93       	st	-X, r18
     fd2:	1e 97       	sbiw	r26, 0x0e	; 14
    oneM.slope2 = 2;
     fd4:	51 96       	adiw	r26, 0x11	; 17
     fd6:	9c 93       	st	X, r25
     fd8:	8e 93       	st	-X, r24
     fda:	50 97       	sbiw	r26, 0x10	; 16
    oneM.next = &twoM;
     fdc:	53 96       	adiw	r26, 0x13	; 19
     fde:	9c 93       	st	X, r25
     fe0:	8e 93       	st	-X, r24
     fe2:	52 97       	sbiw	r26, 0x12	; 18
    
     fe4:	55 96       	adiw	r26, 0x15	; 21
     fe6:	dc 92       	st	X, r13
     fe8:	ce 92       	st	-X, r12
     fea:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type stopDist;
    strcpy(stopDist.name, "stopDist");
    stopDist.value = 0;
     fec:	29 e0       	ldi	r18, 0x09	; 9
     fee:	ec eb       	ldi	r30, 0xBC	; 188
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	56 96       	adiw	r26, 0x16	; 22
     ff4:	01 90       	ld	r0, Z+
     ff6:	0d 92       	st	X+, r0
     ff8:	2a 95       	dec	r18
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <FLC_road+0x17e>
    stopDist.point1 = -1;
     ffc:	cd 57       	subi	r28, 0x7D	; 125
     ffe:	df 4f       	sbci	r29, 0xFF	; 255
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	18 82       	st	Y, r1
    1004:	c3 58       	subi	r28, 0x83	; 131
    1006:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.point2 = 62;
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	cb 57       	subi	r28, 0x7B	; 123
    100e:	df 4f       	sbci	r29, 0xFF	; 255
    1010:	39 83       	std	Y+1, r19	; 0x01
    1012:	28 83       	st	Y, r18
    1014:	c5 58       	subi	r28, 0x85	; 133
    1016:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.slope1 = 100;
    1018:	2e e3       	ldi	r18, 0x3E	; 62
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	c9 57       	subi	r28, 0x79	; 121
    101e:	df 4f       	sbci	r29, 0xFF	; 255
    1020:	39 83       	std	Y+1, r19	; 0x01
    1022:	28 83       	st	Y, r18
    1024:	c7 58       	subi	r28, 0x87	; 135
    1026:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.slope2 = 2;
    1028:	c7 57       	subi	r28, 0x77	; 119
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	79 82       	std	Y+1, r7	; 0x01
    102e:	68 82       	st	Y, r6
    1030:	c9 58       	subi	r28, 0x89	; 137
    1032:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.next = &oneM;
    1034:	c5 57       	subi	r28, 0x75	; 117
    1036:	df 4f       	sbci	r29, 0xFF	; 255
    1038:	99 83       	std	Y+1, r25	; 0x01
    103a:	88 83       	st	Y, r24
    103c:	cb 58       	subi	r28, 0x8B	; 139
    103e:	d0 40       	sbci	r29, 0x00	; 0
    
    1040:	c3 57       	subi	r28, 0x73	; 115
    1042:	df 4f       	sbci	r29, 0xFF	; 255
    1044:	b9 82       	std	Y+1, r11	; 0x01
    1046:	a8 82       	st	Y, r10
    1048:	cd 58       	subi	r28, 0x8D	; 141
    104a:	d0 40       	sbci	r29, 0x00	; 0
    
    distance.membership_functions = &stopDist;
    distance.next = NULL;
    104c:	e9 e7       	ldi	r30, 0x79	; 121
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	ec 0f       	add	r30, r28
    1052:	fd 1f       	adc	r31, r29
    1054:	fe 87       	std	Y+14, r31	; 0x0e
    1056:	ed 87       	std	Y+13, r30	; 0x0d
    
    1058:	18 8a       	std	Y+16, r1	; 0x10
    105a:	1f 86       	std	Y+15, r1	; 0x0f
     * MF high:		[2890 2900 2930 2931]
     *
     */
    struct mf_type high;
    strcpy(high.name, "high");
    high.value = 0;
    105c:	2e 01       	movw	r4, r28
    105e:	ff e8       	ldi	r31, 0x8F	; 143
    1060:	4f 0e       	add	r4, r31
    1062:	51 1c       	adc	r5, r1
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	e5 ec       	ldi	r30, 0xC5	; 197
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	d2 01       	movw	r26, r4
    106c:	01 90       	ld	r0, Z+
    106e:	0d 92       	st	X+, r0
    1070:	8a 95       	dec	r24
    1072:	e1 f7       	brne	.-8      	; 0x106c <FLC_road+0x1f6>
    high.point1 = 2890;
    1074:	d2 01       	movw	r26, r4
    1076:	1b 96       	adiw	r26, 0x0b	; 11
    1078:	1c 92       	st	X, r1
    107a:	1e 92       	st	-X, r1
    107c:	1a 97       	sbiw	r26, 0x0a	; 10
    high.point2 = 2931;
    107e:	ea e4       	ldi	r30, 0x4A	; 74
    1080:	fb e0       	ldi	r31, 0x0B	; 11
    1082:	1d 96       	adiw	r26, 0x0d	; 13
    1084:	fc 93       	st	X, r31
    1086:	ee 93       	st	-X, r30
    1088:	1c 97       	sbiw	r26, 0x0c	; 12
    high.slope1 = 10;
    108a:	0f 2e       	mov	r0, r31
    108c:	f3 e7       	ldi	r31, 0x73	; 115
    108e:	6f 2e       	mov	r6, r31
    1090:	fb e0       	ldi	r31, 0x0B	; 11
    1092:	7f 2e       	mov	r7, r31
    1094:	f0 2d       	mov	r31, r0
    1096:	1f 96       	adiw	r26, 0x0f	; 15
    1098:	7c 92       	st	X, r7
    109a:	6e 92       	st	-X, r6
    109c:	1e 97       	sbiw	r26, 0x0e	; 14
    high.slope2 = 100;
    109e:	8a e0       	ldi	r24, 0x0A	; 10
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	51 96       	adiw	r26, 0x11	; 17
    10a4:	9c 93       	st	X, r25
    10a6:	8e 93       	st	-X, r24
    10a8:	50 97       	sbiw	r26, 0x10	; 16
    high.next = NULL;
    10aa:	0f 2e       	mov	r0, r31
    10ac:	f4 e6       	ldi	r31, 0x64	; 100
    10ae:	8f 2e       	mov	r8, r31
    10b0:	91 2c       	mov	r9, r1
    10b2:	f0 2d       	mov	r31, r0
    10b4:	53 96       	adiw	r26, 0x13	; 19
    10b6:	9c 92       	st	X, r9
    10b8:	8e 92       	st	-X, r8
    10ba:	52 97       	sbiw	r26, 0x12	; 18
    
    10bc:	55 96       	adiw	r26, 0x15	; 21
    10be:	1c 92       	st	X, r1
    10c0:	1e 92       	st	-X, r1
    10c2:	54 97       	sbiw	r26, 0x14	; 20
    struct mf_type medium;
    strcpy(medium.name, "medium");
    medium.value = 0;
    10c4:	87 e0       	ldi	r24, 0x07	; 7
    10c6:	ea ec       	ldi	r30, 0xCA	; 202
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	56 96       	adiw	r26, 0x16	; 22
    10cc:	01 90       	ld	r0, Z+
    10ce:	0d 92       	st	X+, r0
    10d0:	8a 95       	dec	r24
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <FLC_road+0x256>
    medium.point1 = 2845;
    10d4:	c1 55       	subi	r28, 0x51	; 81
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	18 82       	st	Y, r1
    10dc:	cf 5a       	subi	r28, 0xAF	; 175
    10de:	d0 40       	sbci	r29, 0x00	; 0
    medium.point2 = 2926;
    10e0:	8d e1       	ldi	r24, 0x1D	; 29
    10e2:	9b e0       	ldi	r25, 0x0B	; 11
    10e4:	cf 54       	subi	r28, 0x4F	; 79
    10e6:	df 4f       	sbci	r29, 0xFF	; 255
    10e8:	99 83       	std	Y+1, r25	; 0x01
    10ea:	88 83       	st	Y, r24
    10ec:	c1 5b       	subi	r28, 0xB1	; 177
    10ee:	d0 40       	sbci	r29, 0x00	; 0
    medium.slope1 = 3;
    10f0:	0f 2e       	mov	r0, r31
    10f2:	fe e6       	ldi	r31, 0x6E	; 110
    10f4:	8f 2e       	mov	r8, r31
    10f6:	fb e0       	ldi	r31, 0x0B	; 11
    10f8:	9f 2e       	mov	r9, r31
    10fa:	f0 2d       	mov	r31, r0
    10fc:	cd 54       	subi	r28, 0x4D	; 77
    10fe:	df 4f       	sbci	r29, 0xFF	; 255
    1100:	99 82       	std	Y+1, r9	; 0x01
    1102:	88 82       	st	Y, r8
    1104:	c3 5b       	subi	r28, 0xB3	; 179
    1106:	d0 40       	sbci	r29, 0x00	; 0
    medium.slope2 = 3;
    1108:	0f 2e       	mov	r0, r31
    110a:	f3 e0       	ldi	r31, 0x03	; 3
    110c:	6f 2e       	mov	r6, r31
    110e:	71 2c       	mov	r7, r1
    1110:	f0 2d       	mov	r31, r0
    1112:	cb 54       	subi	r28, 0x4B	; 75
    1114:	df 4f       	sbci	r29, 0xFF	; 255
    1116:	79 82       	std	Y+1, r7	; 0x01
    1118:	68 82       	st	Y, r6
    111a:	c5 5b       	subi	r28, 0xB5	; 181
    111c:	d0 40       	sbci	r29, 0x00	; 0
    medium.next = &high;
    111e:	c9 54       	subi	r28, 0x49	; 73
    1120:	df 4f       	sbci	r29, 0xFF	; 255
    1122:	79 82       	std	Y+1, r7	; 0x01
    1124:	68 82       	st	Y, r6
    1126:	c7 5b       	subi	r28, 0xB7	; 183
    1128:	d0 40       	sbci	r29, 0x00	; 0
    
    112a:	c7 54       	subi	r28, 0x47	; 71
    112c:	df 4f       	sbci	r29, 0xFF	; 255
    112e:	59 82       	std	Y+1, r5	; 0x01
    1130:	48 82       	st	Y, r4
    1132:	c9 5b       	subi	r28, 0xB9	; 185
    1134:	d0 40       	sbci	r29, 0x00	; 0
	struct mf_type cruising;
	strcpy(cruising.name, "cruising");
	cruising.value = 0;
    1136:	89 e0       	ldi	r24, 0x09	; 9
    1138:	e1 ed       	ldi	r30, 0xD1	; 209
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	de 01       	movw	r26, r28
    113e:	a5 54       	subi	r26, 0x45	; 69
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	01 90       	ld	r0, Z+
    1144:	0d 92       	st	X+, r0
    1146:	8a 95       	dec	r24
    1148:	e1 f7       	brne	.-8      	; 0x1142 <FLC_road+0x2cc>
	cruising.point1 = 2800;
    114a:	cb 53       	subi	r28, 0x3B	; 59
    114c:	df 4f       	sbci	r29, 0xFF	; 255
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	18 82       	st	Y, r1
    1152:	c5 5c       	subi	r28, 0xC5	; 197
    1154:	d0 40       	sbci	r29, 0x00	; 0
	cruising.point2= 2880;
    1156:	0f 2e       	mov	r0, r31
    1158:	f0 ef       	ldi	r31, 0xF0	; 240
    115a:	2f 2e       	mov	r2, r31
    115c:	fa e0       	ldi	r31, 0x0A	; 10
    115e:	3f 2e       	mov	r3, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	c9 53       	subi	r28, 0x39	; 57
    1164:	df 4f       	sbci	r29, 0xFF	; 255
    1166:	39 82       	std	Y+1, r3	; 0x01
    1168:	28 82       	st	Y, r2
    116a:	c7 5c       	subi	r28, 0xC7	; 199
    116c:	d0 40       	sbci	r29, 0x00	; 0
	cruising.slope1 = 4;
    116e:	20 e4       	ldi	r18, 0x40	; 64
    1170:	3b e0       	ldi	r19, 0x0B	; 11
    1172:	c7 53       	subi	r28, 0x37	; 55
    1174:	df 4f       	sbci	r29, 0xFF	; 255
    1176:	39 83       	std	Y+1, r19	; 0x01
    1178:	28 83       	st	Y, r18
    117a:	c9 5c       	subi	r28, 0xC9	; 201
    117c:	d0 40       	sbci	r29, 0x00	; 0
	cruising.slope2 = 4;
    117e:	04 e0       	ldi	r16, 0x04	; 4
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	c5 53       	subi	r28, 0x35	; 53
    1184:	df 4f       	sbci	r29, 0xFF	; 255
    1186:	19 83       	std	Y+1, r17	; 0x01
    1188:	08 83       	st	Y, r16
    118a:	cb 5c       	subi	r28, 0xCB	; 203
    118c:	d0 40       	sbci	r29, 0x00	; 0
	cruising.next = &medium;
    118e:	c3 53       	subi	r28, 0x33	; 51
    1190:	df 4f       	sbci	r29, 0xFF	; 255
    1192:	19 83       	std	Y+1, r17	; 0x01
    1194:	08 83       	st	Y, r16
    1196:	cd 5c       	subi	r28, 0xCD	; 205
    1198:	d0 40       	sbci	r29, 0x00	; 0
	
    119a:	65 ea       	ldi	r22, 0xA5	; 165
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	6c 0f       	add	r22, r28
    11a0:	7d 1f       	adc	r23, r29
    11a2:	c1 53       	subi	r28, 0x31	; 49
    11a4:	df 4f       	sbci	r29, 0xFF	; 255
    11a6:	79 83       	std	Y+1, r23	; 0x01
    11a8:	68 83       	st	Y, r22
    11aa:	cf 5c       	subi	r28, 0xCF	; 207
    11ac:	d0 40       	sbci	r29, 0x00	; 0
	struct mf_type low;
	strcpy(low.name, "low");
	low.value = 0;
    11ae:	9e 01       	movw	r18, r28
    11b0:	2f 52       	subi	r18, 0x2F	; 47
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	8c e6       	ldi	r24, 0x6C	; 108
    11b6:	9f e6       	ldi	r25, 0x6F	; 111
    11b8:	a7 e7       	ldi	r26, 0x77	; 119
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
	low.point1 = 2765;
    11c6:	13 86       	std	Z+11, r1	; 0x0b
    11c8:	12 86       	std	Z+10, r1	; 0x0a
	low.point2= 2835;
    11ca:	6d ec       	ldi	r22, 0xCD	; 205
    11cc:	7a e0       	ldi	r23, 0x0A	; 10
    11ce:	75 87       	std	Z+13, r23	; 0x0d
    11d0:	64 87       	std	Z+12, r22	; 0x0c
	low.slope1 = 4;
    11d2:	83 e1       	ldi	r24, 0x13	; 19
    11d4:	9b e0       	ldi	r25, 0x0B	; 11
    11d6:	97 87       	std	Z+15, r25	; 0x0f
    11d8:	86 87       	std	Z+14, r24	; 0x0e
	low.slope2 = 4;
    11da:	11 8b       	std	Z+17, r17	; 0x11
    11dc:	00 8b       	std	Z+16, r16	; 0x10
	low.next = &cruising;
    11de:	13 8b       	std	Z+19, r17	; 0x13
    11e0:	02 8b       	std	Z+18, r16	; 0x12
	
    11e2:	8b eb       	ldi	r24, 0xBB	; 187
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	8c 0f       	add	r24, r28
    11e8:	9d 1f       	adc	r25, r29
    11ea:	95 8b       	std	Z+21, r25	; 0x15
    11ec:	84 8b       	std	Z+20, r24	; 0x14
	
    struct mf_type still;
    strcpy(still.name, "still");
    still.value = 0;
    11ee:	be 01       	movw	r22, r28
    11f0:	69 51       	subi	r22, 0x19	; 25
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	ea ed       	ldi	r30, 0xDA	; 218
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	db 01       	movw	r26, r22
    11fc:	01 90       	ld	r0, Z+
    11fe:	0d 92       	st	X+, r0
    1200:	8a 95       	dec	r24
    1202:	e1 f7       	brne	.-8      	; 0x11fc <FLC_road+0x386>
    still.point1 = 2749;
    1204:	db 01       	movw	r26, r22
    1206:	1b 96       	adiw	r26, 0x0b	; 11
    1208:	1c 92       	st	X, r1
    120a:	1e 92       	st	-X, r1
    120c:	1a 97       	sbiw	r26, 0x0a	; 10
    still.point2= 2790;
    120e:	0f 2e       	mov	r0, r31
    1210:	fd eb       	ldi	r31, 0xBD	; 189
    1212:	ef 2e       	mov	r14, r31
    1214:	fa e0       	ldi	r31, 0x0A	; 10
    1216:	ff 2e       	mov	r15, r31
    1218:	f0 2d       	mov	r31, r0
    121a:	1d 96       	adiw	r26, 0x0d	; 13
    121c:	fc 92       	st	X, r15
    121e:	ee 92       	st	-X, r14
    1220:	1c 97       	sbiw	r26, 0x0c	; 12
    still.slope1 = 100;
    1222:	86 ee       	ldi	r24, 0xE6	; 230
    1224:	9a e0       	ldi	r25, 0x0A	; 10
    1226:	1f 96       	adiw	r26, 0x0f	; 15
    1228:	9c 93       	st	X, r25
    122a:	8e 93       	st	-X, r24
    122c:	1e 97       	sbiw	r26, 0x0e	; 14
    still.slope2 = 4;
    122e:	e4 e6       	ldi	r30, 0x64	; 100
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	51 96       	adiw	r26, 0x11	; 17
    1234:	fc 93       	st	X, r31
    1236:	ee 93       	st	-X, r30
    1238:	50 97       	sbiw	r26, 0x10	; 16
    still.next = &low;
    123a:	53 96       	adiw	r26, 0x13	; 19
    123c:	1c 93       	st	X, r17
    123e:	0e 93       	st	-X, r16
    1240:	52 97       	sbiw	r26, 0x12	; 18
    
    1242:	55 96       	adiw	r26, 0x15	; 21
    1244:	3c 93       	st	X, r19
    1246:	2e 93       	st	-X, r18
    1248:	54 97       	sbiw	r26, 0x14	; 20
    speed.membership_functions = &still;
    speed.next = &distance;
    124a:	7e 8f       	std	Y+30, r23	; 0x1e
    124c:	6d 8f       	std	Y+29, r22	; 0x1d
    
    124e:	58 a3       	std	Y+32, r21	; 0x20
    1250:	4f 8f       	std	Y+31, r20	; 0x1f
     * max			[2890 2926 2934 2970]
     *
     */
    struct mf_type noSpeed;
    strcpy(noSpeed.name, "noSpeed");
    noSpeed.value = 0;
    1252:	48 e0       	ldi	r20, 0x08	; 8
    1254:	e0 ee       	ldi	r30, 0xE0	; 224
    1256:	f1 e0       	ldi	r31, 0x01	; 1
    1258:	56 96       	adiw	r26, 0x16	; 22
    125a:	01 90       	ld	r0, Z+
    125c:	0d 92       	st	X+, r0
    125e:	4a 95       	dec	r20
    1260:	e1 f7       	brne	.-8      	; 0x125a <FLC_road+0x3e4>
    noSpeed.point1 = 2749;
    1262:	c9 5f       	subi	r28, 0xF9	; 249
    1264:	de 4f       	sbci	r29, 0xFE	; 254
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	18 82       	st	Y, r1
    126a:	c7 50       	subi	r28, 0x07	; 7
    126c:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.point2 = 2790;
    126e:	c7 5f       	subi	r28, 0xF7	; 247
    1270:	de 4f       	sbci	r29, 0xFE	; 254
    1272:	f9 82       	std	Y+1, r15	; 0x01
    1274:	e8 82       	st	Y, r14
    1276:	c9 50       	subi	r28, 0x09	; 9
    1278:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.slope1 = 100;
    127a:	c5 5f       	subi	r28, 0xF5	; 245
    127c:	de 4f       	sbci	r29, 0xFE	; 254
    127e:	99 83       	std	Y+1, r25	; 0x01
    1280:	88 83       	st	Y, r24
    1282:	cb 50       	subi	r28, 0x0B	; 11
    1284:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.slope2 = 4;
    1286:	44 e6       	ldi	r20, 0x64	; 100
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	c3 5f       	subi	r28, 0xF3	; 243
    128c:	de 4f       	sbci	r29, 0xFE	; 254
    128e:	59 83       	std	Y+1, r21	; 0x01
    1290:	48 83       	st	Y, r20
    1292:	cd 50       	subi	r28, 0x0D	; 13
    1294:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.next = NULL;
    1296:	c1 5f       	subi	r28, 0xF1	; 241
    1298:	de 4f       	sbci	r29, 0xFE	; 254
    129a:	19 83       	std	Y+1, r17	; 0x01
    129c:	08 83       	st	Y, r16
    129e:	cf 50       	subi	r28, 0x0F	; 15
    12a0:	d1 40       	sbci	r29, 0x01	; 1
    
    12a2:	cf 5e       	subi	r28, 0xEF	; 239
    12a4:	de 4f       	sbci	r29, 0xFE	; 254
    12a6:	19 82       	std	Y+1, r1	; 0x01
    12a8:	18 82       	st	Y, r1
    12aa:	c1 51       	subi	r28, 0x11	; 17
    12ac:	d1 40       	sbci	r29, 0x01	; 1
    struct mf_type slow;
    strcpy(slow.name, "slow");
    slow.value = 0;
    12ae:	7e 01       	movw	r14, r28
    12b0:	5d ee       	ldi	r21, 0xED	; 237
    12b2:	e5 1a       	sub	r14, r21
    12b4:	5e ef       	ldi	r21, 0xFE	; 254
    12b6:	f5 0a       	sbc	r15, r21
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	e8 ee       	ldi	r30, 0xE8	; 232
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	d7 01       	movw	r26, r14
    12c0:	01 90       	ld	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	8a 95       	dec	r24
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <FLC_road+0x44a>
    slow.point1 = 2765;
    12c8:	d7 01       	movw	r26, r14
    12ca:	1b 96       	adiw	r26, 0x0b	; 11
    12cc:	1c 92       	st	X, r1
    12ce:	1e 92       	st	-X, r1
    12d0:	1a 97       	sbiw	r26, 0x0a	; 10
    slow.point2 = 2836;
    12d2:	ed ec       	ldi	r30, 0xCD	; 205
    12d4:	fa e0       	ldi	r31, 0x0A	; 10
    12d6:	1d 96       	adiw	r26, 0x0d	; 13
    12d8:	fc 93       	st	X, r31
    12da:	ee 93       	st	-X, r30
    12dc:	1c 97       	sbiw	r26, 0x0c	; 12
    slow.slope1 = 4;
    12de:	84 e1       	ldi	r24, 0x14	; 20
    12e0:	9b e0       	ldi	r25, 0x0B	; 11
    12e2:	1f 96       	adiw	r26, 0x0f	; 15
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
    12e8:	1e 97       	sbiw	r26, 0x0e	; 14
    slow.slope2 = 4;
    12ea:	51 96       	adiw	r26, 0x11	; 17
    12ec:	1c 93       	st	X, r17
    12ee:	0e 93       	st	-X, r16
    12f0:	50 97       	sbiw	r26, 0x10	; 16
    slow.next = &noSpeed;
    12f2:	53 96       	adiw	r26, 0x13	; 19
    12f4:	1c 93       	st	X, r17
    12f6:	0e 93       	st	-X, r16
    12f8:	52 97       	sbiw	r26, 0x12	; 18
    
    12fa:	4d ef       	ldi	r20, 0xFD	; 253
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	4c 0f       	add	r20, r28
    1300:	5d 1f       	adc	r21, r29
    1302:	55 96       	adiw	r26, 0x15	; 21
    1304:	5c 93       	st	X, r21
    1306:	4e 93       	st	-X, r20
    1308:	54 97       	sbiw	r26, 0x14	; 20
    struct mf_type cruise;
    strcpy(cruise.name, "cruise");
    cruise.value = 0;
    130a:	ce 01       	movw	r24, r28
    130c:	87 5d       	subi	r24, 0xD7	; 215
    130e:	9e 4f       	sbci	r25, 0xFE	; 254
    1310:	47 e0       	ldi	r20, 0x07	; 7
    1312:	ed ee       	ldi	r30, 0xED	; 237
    1314:	f1 e0       	ldi	r31, 0x01	; 1
    1316:	dc 01       	movw	r26, r24
    1318:	01 90       	ld	r0, Z+
    131a:	0d 92       	st	X+, r0
    131c:	4a 95       	dec	r20
    131e:	e1 f7       	brne	.-8      	; 0x1318 <FLC_road+0x4a2>
    cruise.point1 = 2800;
    1320:	dc 01       	movw	r26, r24
    1322:	1b 96       	adiw	r26, 0x0b	; 11
    1324:	1c 92       	st	X, r1
    1326:	1e 92       	st	-X, r1
    1328:	1a 97       	sbiw	r26, 0x0a	; 10
    cruise.point2 = 2880;
    132a:	1d 96       	adiw	r26, 0x0d	; 13
    132c:	3c 92       	st	X, r3
    132e:	2e 92       	st	-X, r2
    1330:	1c 97       	sbiw	r26, 0x0c	; 12
    cruise.slope1 = 3;
    1332:	e0 e4       	ldi	r30, 0x40	; 64
    1334:	fb e0       	ldi	r31, 0x0B	; 11
    1336:	1f 96       	adiw	r26, 0x0f	; 15
    1338:	fc 93       	st	X, r31
    133a:	ee 93       	st	-X, r30
    133c:	1e 97       	sbiw	r26, 0x0e	; 14
    cruise.slope2 = 3;
    133e:	51 96       	adiw	r26, 0x11	; 17
    1340:	7c 92       	st	X, r7
    1342:	6e 92       	st	-X, r6
    1344:	50 97       	sbiw	r26, 0x10	; 16
    cruise.next = &slow;
    1346:	53 96       	adiw	r26, 0x13	; 19
    1348:	7c 92       	st	X, r7
    134a:	6e 92       	st	-X, r6
    134c:	52 97       	sbiw	r26, 0x12	; 18
    
    134e:	55 96       	adiw	r26, 0x15	; 21
    1350:	fc 92       	st	X, r15
    1352:	ee 92       	st	-X, r14
    1354:	54 97       	sbiw	r26, 0x14	; 20
    struct mf_type medHigh;
    strcpy(medHigh.name, "medHigh");
    medHigh.value = 0;
    1356:	ae 01       	movw	r20, r28
    1358:	41 5c       	subi	r20, 0xC1	; 193
    135a:	5e 4f       	sbci	r21, 0xFE	; 254
    135c:	68 94       	set
    135e:	22 24       	eor	r2, r2
    1360:	23 f8       	bld	r2, 3
    1362:	e4 ef       	ldi	r30, 0xF4	; 244
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	da 01       	movw	r26, r20
    1368:	01 90       	ld	r0, Z+
    136a:	0d 92       	st	X+, r0
    136c:	2a 94       	dec	r2
    136e:	e1 f7       	brne	.-8      	; 0x1368 <FLC_road+0x4f2>
    medHigh.point1 = 2844;
    1370:	da 01       	movw	r26, r20
    1372:	1b 96       	adiw	r26, 0x0b	; 11
    1374:	1c 92       	st	X, r1
    1376:	1e 92       	st	-X, r1
    1378:	1a 97       	sbiw	r26, 0x0a	; 10
    medHigh.point2 = 2926;
    137a:	ec e1       	ldi	r30, 0x1C	; 28
    137c:	fb e0       	ldi	r31, 0x0B	; 11
    137e:	1d 96       	adiw	r26, 0x0d	; 13
    1380:	fc 93       	st	X, r31
    1382:	ee 93       	st	-X, r30
    1384:	1c 97       	sbiw	r26, 0x0c	; 12
    medHigh.slope1 = 3;
    1386:	1f 96       	adiw	r26, 0x0f	; 15
    1388:	9c 92       	st	X, r9
    138a:	8e 92       	st	-X, r8
    138c:	1e 97       	sbiw	r26, 0x0e	; 14
    medHigh.slope2 = 3;
    138e:	51 96       	adiw	r26, 0x11	; 17
    1390:	7c 92       	st	X, r7
    1392:	6e 92       	st	-X, r6
    1394:	50 97       	sbiw	r26, 0x10	; 16
    medHigh.next = &cruise;
    1396:	53 96       	adiw	r26, 0x13	; 19
    1398:	7c 92       	st	X, r7
    139a:	6e 92       	st	-X, r6
    139c:	52 97       	sbiw	r26, 0x12	; 18
    
    139e:	55 96       	adiw	r26, 0x15	; 21
    13a0:	9c 93       	st	X, r25
    13a2:	8e 93       	st	-X, r24
    13a4:	54 97       	sbiw	r26, 0x14	; 20
    struct mf_type max;
    strcpy(high.name, "max");
    max.value = 0;
    13a6:	0f 2e       	mov	r0, r31
    13a8:	fd e6       	ldi	r31, 0x6D	; 109
    13aa:	6f 2e       	mov	r6, r31
    13ac:	f1 e6       	ldi	r31, 0x61	; 97
    13ae:	7f 2e       	mov	r7, r31
    13b0:	f8 e7       	ldi	r31, 0x78	; 120
    13b2:	8f 2e       	mov	r8, r31
    13b4:	91 2c       	mov	r9, r1
    13b6:	f0 2d       	mov	r31, r0
    13b8:	d2 01       	movw	r26, r4
    13ba:	6d 92       	st	X+, r6
    13bc:	7d 92       	st	X+, r7
    13be:	8d 92       	st	X+, r8
    13c0:	9c 92       	st	X, r9
    13c2:	13 97       	sbiw	r26, 0x03	; 3
    max.point1 = 2890;
    13c4:	fe 01       	movw	r30, r28
    13c6:	eb 5a       	subi	r30, 0xAB	; 171
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	13 86       	std	Z+11, r1	; 0x0b
    13cc:	12 86       	std	Z+10, r1	; 0x0a
    max.point2 = 2931;
    13ce:	0f 2e       	mov	r0, r31
    13d0:	fa e4       	ldi	r31, 0x4A	; 74
    13d2:	6f 2e       	mov	r6, r31
    13d4:	fb e0       	ldi	r31, 0x0B	; 11
    13d6:	7f 2e       	mov	r7, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	75 86       	std	Z+13, r7	; 0x0d
    13dc:	64 86       	std	Z+12, r6	; 0x0c
    max.slope1 = 4;
    13de:	0f 2e       	mov	r0, r31
    13e0:	f3 e7       	ldi	r31, 0x73	; 115
    13e2:	8f 2e       	mov	r8, r31
    13e4:	fb e0       	ldi	r31, 0x0B	; 11
    13e6:	9f 2e       	mov	r9, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	97 86       	std	Z+15, r9	; 0x0f
    13ec:	86 86       	std	Z+14, r8	; 0x0e
    max.slope2 = 100;
    13ee:	11 8b       	std	Z+17, r17	; 0x11
    13f0:	00 8b       	std	Z+16, r16	; 0x10
    max.next = &medHigh;
    13f2:	a4 e6       	ldi	r26, 0x64	; 100
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	b3 8b       	std	Z+19, r27	; 0x13
    13f8:	a2 8b       	std	Z+18, r26	; 0x12
    
    13fa:	55 8b       	std	Z+21, r21	; 0x15
    13fc:	44 8b       	std	Z+20, r20	; 0x14
    pwm.membership_functions = &max;
    pwm.next = NULL;
    13fe:	fe a7       	std	Y+46, r31	; 0x2e
    1400:	ed a7       	std	Y+45, r30	; 0x2d
    
    1402:	18 aa       	std	Y+48, r1	; 0x30
    1404:	1f a6       	std	Y+47, r1	; 0x2f
     */
	
	/* rule # 11: if still and oneMeter then slow */
	struct rule_element_type then11;
	then11.value = &slow.value;
	then11.next = NULL;
    1406:	4e 01       	movw	r8, r28
    1408:	b5 e9       	ldi	r27, 0x95	; 149
    140a:	8b 1a       	sub	r8, r27
    140c:	be ef       	ldi	r27, 0xFE	; 254
    140e:	9b 0a       	sbc	r9, r27
    1410:	17 01       	movw	r2, r14
    1412:	1a e0       	ldi	r17, 0x0A	; 10
    1414:	21 0e       	add	r2, r17
    1416:	31 1c       	adc	r3, r1
    1418:	d4 01       	movw	r26, r8
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	3c 92       	st	X, r3
    141e:	2e 92       	st	-X, r2
	
    1420:	13 96       	adiw	r26, 0x03	; 3
    1422:	1c 92       	st	X, r1
    1424:	1e 92       	st	-X, r1
    1426:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if112;
	if112.value = &oneM.value;
	if112.next = NULL;
    1428:	3e 01       	movw	r6, r28
    142a:	b1 e9       	ldi	r27, 0x91	; 145
    142c:	6b 1a       	sub	r6, r27
    142e:	be ef       	ldi	r27, 0xFE	; 254
    1430:	7b 0a       	sbc	r7, r27
    1432:	1a e0       	ldi	r17, 0x0A	; 10
    1434:	a1 0e       	add	r10, r17
    1436:	b1 1c       	adc	r11, r1
    1438:	d3 01       	movw	r26, r6
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	bc 92       	st	X, r11
    143e:	ae 92       	st	-X, r10
	
    1440:	13 96       	adiw	r26, 0x03	; 3
    1442:	1c 92       	st	X, r1
    1444:	1e 92       	st	-X, r1
    1446:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if111;
	if111.value = &still.value;
	if111.next = &if112;
    1448:	7e 01       	movw	r14, r28
    144a:	bd e8       	ldi	r27, 0x8D	; 141
    144c:	eb 1a       	sub	r14, r27
    144e:	be ef       	ldi	r27, 0xFE	; 254
    1450:	fb 0a       	sbc	r15, r27
    1452:	66 5f       	subi	r22, 0xF6	; 246
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	d7 01       	movw	r26, r14
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	7c 93       	st	X, r23
    145c:	6e 93       	st	-X, r22
	
    145e:	13 96       	adiw	r26, 0x03	; 3
    1460:	7c 92       	st	X, r7
    1462:	6e 92       	st	-X, r6
    1464:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_type rule11;
	rule11.if_side = &if111;
	rule11.then_side = &then11;
    1466:	c9 58       	subi	r28, 0x89	; 137
    1468:	de 4f       	sbci	r29, 0xFE	; 254
    146a:	f9 82       	std	Y+1, r15	; 0x01
    146c:	e8 82       	st	Y, r14
    146e:	c7 57       	subi	r28, 0x77	; 119
    1470:	d1 40       	sbci	r29, 0x01	; 1
	rule11.next = NULL;
    1472:	c7 58       	subi	r28, 0x87	; 135
    1474:	de 4f       	sbci	r29, 0xFE	; 254
    1476:	99 82       	std	Y+1, r9	; 0x01
    1478:	88 82       	st	Y, r8
    147a:	c9 57       	subi	r28, 0x79	; 121
    147c:	d1 40       	sbci	r29, 0x01	; 1
	
    147e:	c5 58       	subi	r28, 0x85	; 133
    1480:	de 4f       	sbci	r29, 0xFE	; 254
    1482:	19 82       	std	Y+1, r1	; 0x01
    1484:	18 82       	st	Y, r1
    1486:	cb 57       	subi	r28, 0x7B	; 123
    1488:	d1 40       	sbci	r29, 0x01	; 1
	/* rule # 10: if low and twoM then cruise */
	struct rule_element_type then10;
	then10.value = &cruise.value;
	then10.next = NULL;
    148a:	64 57       	subi	r22, 0x74	; 116
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	3c 01       	movw	r6, r24
    1490:	ba e0       	ldi	r27, 0x0A	; 10
    1492:	6b 0e       	add	r6, r27
    1494:	71 1c       	adc	r7, r1
    1496:	db 01       	movw	r26, r22
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	7c 92       	st	X, r7
    149c:	6e 92       	st	-X, r6
	
    149e:	13 96       	adiw	r26, 0x03	; 3
    14a0:	1c 92       	st	X, r1
    14a2:	1e 92       	st	-X, r1
    14a4:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if102;
	if102.value = &twoM.value;
	if102.next = NULL;
    14a6:	7e 01       	movw	r14, r28
    14a8:	bf e7       	ldi	r27, 0x7F	; 127
    14aa:	eb 1a       	sub	r14, r27
    14ac:	be ef       	ldi	r27, 0xFE	; 254
    14ae:	fb 0a       	sbc	r15, r27
    14b0:	82 5d       	subi	r24, 0xD2	; 210
    14b2:	91 09       	sbc	r25, r1
    14b4:	d7 01       	movw	r26, r14
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
	
    14bc:	13 96       	adiw	r26, 0x03	; 3
    14be:	1c 92       	st	X, r1
    14c0:	1e 92       	st	-X, r1
    14c2:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if101;
	if101.value = &low.value;
	if101.next = &if102;
    14c4:	8e 01       	movw	r16, r28
    14c6:	0b 57       	subi	r16, 0x7B	; 123
    14c8:	1e 4f       	sbci	r17, 0xFE	; 254
    14ca:	49 01       	movw	r8, r18
    14cc:	ba e0       	ldi	r27, 0x0A	; 10
    14ce:	8b 0e       	add	r8, r27
    14d0:	91 1c       	adc	r9, r1
    14d2:	d8 01       	movw	r26, r16
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	9c 92       	st	X, r9
    14d8:	8e 92       	st	-X, r8
	
    14da:	13 96       	adiw	r26, 0x03	; 3
    14dc:	fc 92       	st	X, r15
    14de:	ee 92       	st	-X, r14
    14e0:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_type rule10;
	rule10.if_side = &if101;
	rule10.then_side = &then10;
    14e2:	7e 01       	movw	r14, r28
    14e4:	b7 e7       	ldi	r27, 0x77	; 119
    14e6:	eb 1a       	sub	r14, r27
    14e8:	be ef       	ldi	r27, 0xFE	; 254
    14ea:	fb 0a       	sbc	r15, r27
    14ec:	d7 01       	movw	r26, r14
    14ee:	11 96       	adiw	r26, 0x01	; 1
    14f0:	1c 93       	st	X, r17
    14f2:	0e 93       	st	-X, r16
	rule10.next = &rule11;
    14f4:	13 96       	adiw	r26, 0x03	; 3
    14f6:	7c 93       	st	X, r23
    14f8:	6e 93       	st	-X, r22
    14fa:	12 97       	sbiw	r26, 0x02	; 2
	
    14fc:	27 e7       	ldi	r18, 0x77	; 119
    14fe:	31 e0       	ldi	r19, 0x01	; 1
    1500:	2c 0f       	add	r18, r28
    1502:	3d 1f       	adc	r19, r29
    1504:	15 96       	adiw	r26, 0x05	; 5
    1506:	3c 93       	st	X, r19
    1508:	2e 93       	st	-X, r18
    150a:	14 97       	sbiw	r26, 0x04	; 4
	/* rule # 9: if threeM then max */
	struct rule_element_type then9;
	then9.value = &max.value;
	then9.next = NULL;
    150c:	16 96       	adiw	r26, 0x06	; 6
    150e:	3a 96       	adiw	r30, 0x0a	; 10
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	fc 93       	st	X, r31
    1514:	ee 93       	st	-X, r30
	
    1516:	13 96       	adiw	r26, 0x03	; 3
    1518:	1c 92       	st	X, r1
    151a:	1e 92       	st	-X, r1
    151c:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if91;
	if91.value = &threeM.value;
	if91.next = NULL;
    151e:	6a 5e       	subi	r22, 0xEA	; 234
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	27 e3       	ldi	r18, 0x37	; 55
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	2c 0f       	add	r18, r28
    1528:	3d 1f       	adc	r19, r29
    152a:	26 5f       	subi	r18, 0xF6	; 246
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	fb 01       	movw	r30, r22
    1530:	31 83       	std	Z+1, r19	; 0x01
    1532:	20 83       	st	Z, r18
	
    1534:	13 82       	std	Z+3, r1	; 0x03
    1536:	12 82       	std	Z+2, r1	; 0x02
	struct rule_type rule9;
	rule9.if_side = &if91;
	rule9.then_side = &then9;
    1538:	34 96       	adiw	r30, 0x04	; 4
    153a:	71 83       	std	Z+1, r23	; 0x01
    153c:	60 83       	st	Z, r22
	rule9.next = &rule10;
    153e:	b3 83       	std	Z+3, r27	; 0x03
    1540:	a2 83       	std	Z+2, r26	; 0x02
 
    1542:	f5 82       	std	Z+5, r15	; 0x05
    1544:	e4 82       	std	Z+4, r14	; 0x04
	/* rule # 8: if high and twoM then medHigh */
	struct rule_element_type then8;
	then8.value = &medHigh.value;
	then8.next = NULL;
    1546:	66 5f       	subi	r22, 0xF6	; 246
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	46 5f       	subi	r20, 0xF6	; 246
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	db 01       	movw	r26, r22
    1550:	11 96       	adiw	r26, 0x01	; 1
    1552:	5c 93       	st	X, r21
    1554:	4e 93       	st	-X, r20
	
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	1c 92       	st	X, r1
    155a:	1e 92       	st	-X, r1
    155c:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if82;
	if82.value = &twoM.value;
	if82.next = NULL;
    155e:	7e 01       	movw	r14, r28
    1560:	bf e5       	ldi	r27, 0x5F	; 95
    1562:	eb 1a       	sub	r14, r27
    1564:	be ef       	ldi	r27, 0xFE	; 254
    1566:	fb 0a       	sbc	r15, r27
    1568:	d7 01       	movw	r26, r14
    156a:	11 96       	adiw	r26, 0x01	; 1
    156c:	9c 93       	st	X, r25
    156e:	8e 93       	st	-X, r24
	
    1570:	13 96       	adiw	r26, 0x03	; 3
    1572:	1c 92       	st	X, r1
    1574:	1e 92       	st	-X, r1
    1576:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if81;
	if81.value = &high.value;
	if81.next = &if82;
    1578:	00 5e       	subi	r16, 0xE0	; 224
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	62 01       	movw	r12, r4
    157e:	ba e0       	ldi	r27, 0x0A	; 10
    1580:	cb 0e       	add	r12, r27
    1582:	d1 1c       	adc	r13, r1
    1584:	d8 01       	movw	r26, r16
    1586:	11 96       	adiw	r26, 0x01	; 1
    1588:	dc 92       	st	X, r13
    158a:	ce 92       	st	-X, r12
	
    158c:	13 96       	adiw	r26, 0x03	; 3
    158e:	fc 92       	st	X, r15
    1590:	ee 92       	st	-X, r14
    1592:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_type rule8;
	rule8.if_side = &if81;
	rule8.then_side = &then8;
    1594:	14 96       	adiw	r26, 0x04	; 4
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	1c 93       	st	X, r17
    159a:	0e 93       	st	-X, r16
	rule8.next = &rule9;
    159c:	13 96       	adiw	r26, 0x03	; 3
    159e:	7c 93       	st	X, r23
    15a0:	6e 93       	st	-X, r22
    15a2:	12 97       	sbiw	r26, 0x02	; 2
 
    15a4:	15 96       	adiw	r26, 0x05	; 5
    15a6:	fc 93       	st	X, r31
    15a8:	ee 93       	st	-X, r30
    15aa:	14 97       	sbiw	r26, 0x04	; 4
	/* rule # 7: if cruising and twoM then medHigh */
	struct rule_element_type then7;
	then7.value = &medHigh.value;
	then7.next = NULL;
    15ac:	6e 5e       	subi	r22, 0xEE	; 238
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	fb 01       	movw	r30, r22
    15b2:	51 83       	std	Z+1, r21	; 0x01
    15b4:	40 83       	st	Z, r20
 
    15b6:	13 82       	std	Z+3, r1	; 0x03
    15b8:	12 82       	std	Z+2, r1	; 0x02
	struct rule_element_type if72;
	if72.value = &twoM.value;
	if72.next = NULL;
    15ba:	2e 01       	movw	r4, r28
    15bc:	fd e4       	ldi	r31, 0x4D	; 77
    15be:	4f 1a       	sub	r4, r31
    15c0:	fe ef       	ldi	r31, 0xFE	; 254
    15c2:	5f 0a       	sbc	r5, r31
    15c4:	f2 01       	movw	r30, r4
    15c6:	91 83       	std	Z+1, r25	; 0x01
    15c8:	80 83       	st	Z, r24
 
    15ca:	13 82       	std	Z+3, r1	; 0x03
    15cc:	12 82       	std	Z+2, r1	; 0x02
	struct rule_element_type if71;
	if71.value = &cruising.value;
	if71.next = &if72;
    15ce:	0e 5e       	subi	r16, 0xEE	; 238
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	0f 2e       	mov	r0, r31
    15d4:	fb eb       	ldi	r31, 0xBB	; 187
    15d6:	ef 2e       	mov	r14, r31
    15d8:	f1 2c       	mov	r15, r1
    15da:	f0 2d       	mov	r31, r0
    15dc:	ec 0e       	add	r14, r28
    15de:	fd 1e       	adc	r15, r29
    15e0:	fa e0       	ldi	r31, 0x0A	; 10
    15e2:	ef 0e       	add	r14, r31
    15e4:	f1 1c       	adc	r15, r1
    15e6:	f8 01       	movw	r30, r16
    15e8:	f1 82       	std	Z+1, r15	; 0x01
    15ea:	e0 82       	st	Z, r14
 
    15ec:	53 82       	std	Z+3, r5	; 0x03
    15ee:	42 82       	std	Z+2, r4	; 0x02
	struct rule_type rule7;
	rule7.if_side = &if71;
	rule7.then_side = &then7;
    15f0:	34 96       	adiw	r30, 0x04	; 4
    15f2:	11 83       	std	Z+1, r17	; 0x01
    15f4:	00 83       	st	Z, r16
	rule7.next = &rule8;
    15f6:	73 83       	std	Z+3, r23	; 0x03
    15f8:	62 83       	std	Z+2, r22	; 0x02
 
    15fa:	b5 83       	std	Z+5, r27	; 0x05
    15fc:	a4 83       	std	Z+4, r26	; 0x04
 
     /* rule # 6: if low and twoM then cruise */
    struct rule_element_type then6;
    then6.value = &cruise.value;
    then6.next = NULL;
    15fe:	20 58       	subi	r18, 0x80	; 128
    1600:	3e 4f       	sbci	r19, 0xFE	; 254
    1602:	d9 01       	movw	r26, r18
    1604:	11 96       	adiw	r26, 0x01	; 1
    1606:	7c 92       	st	X, r7
    1608:	6e 92       	st	-X, r6
    
    160a:	13 96       	adiw	r26, 0x03	; 3
    160c:	1c 92       	st	X, r1
    160e:	1e 92       	st	-X, r1
    1610:	12 97       	sbiw	r26, 0x02	; 2
	struct rule_element_type if62;
	if62.value = &twoM.value;
	if62.next = NULL;
    1612:	6a 5e       	subi	r22, 0xEA	; 234
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	db 01       	movw	r26, r22
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 93       	st	X, r25
    161c:	8e 93       	st	-X, r24
	
    161e:	13 96       	adiw	r26, 0x03	; 3
    1620:	1c 92       	st	X, r1
    1622:	1e 92       	st	-X, r1
    1624:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type if61;
    if61.value = &low.value;
	if61.next = &if62;
    1626:	8e 58       	subi	r24, 0x8E	; 142
    1628:	9e 4f       	sbci	r25, 0xFE	; 254
    162a:	dc 01       	movw	r26, r24
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	9c 92       	st	X, r9
    1630:	8e 92       	st	-X, r8
    
    1632:	13 96       	adiw	r26, 0x03	; 3
    1634:	7c 93       	st	X, r23
    1636:	6e 93       	st	-X, r22
    1638:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_type rule6;
    rule6.if_side = &if61;
    rule6.then_side = &then6;
    163a:	68 5f       	subi	r22, 0xF8	; 248
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	db 01       	movw	r26, r22
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
    rule6.next = &rule7;
    1646:	13 96       	adiw	r26, 0x03	; 3
    1648:	3c 93       	st	X, r19
    164a:	2e 93       	st	-X, r18
    164c:	12 97       	sbiw	r26, 0x02	; 2
    
    164e:	15 96       	adiw	r26, 0x05	; 5
    1650:	fc 93       	st	X, r31
    1652:	ee 93       	st	-X, r30
    1654:	14 97       	sbiw	r26, 0x04	; 4
    /* rule # 5: if high and oneM then medHigh */
    struct rule_element_type then5;
    then5.value = &medHigh.value;
    then5.next = NULL;
    1656:	2e 5e       	subi	r18, 0xEE	; 238
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	f9 01       	movw	r30, r18
    165c:	51 83       	std	Z+1, r21	; 0x01
    165e:	40 83       	st	Z, r20
    
    1660:	13 82       	std	Z+3, r1	; 0x03
    1662:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if52;
	if52.value = &oneM.value;
	if52.next = NULL;
    1664:	0e 96       	adiw	r24, 0x0e	; 14
    1666:	dc 01       	movw	r26, r24
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	bc 92       	st	X, r11
    166c:	ae 92       	st	-X, r10
	
    166e:	13 96       	adiw	r26, 0x03	; 3
    1670:	1c 92       	st	X, r1
    1672:	1e 92       	st	-X, r1
    1674:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type if51;
    if51.value = &high.value;
    if51.next = &if52;
    1676:	14 96       	adiw	r26, 0x04	; 4
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	dc 92       	st	X, r13
    167c:	ce 92       	st	-X, r12
    
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	9c 93       	st	X, r25
    1682:	8e 93       	st	-X, r24
    1684:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_type rule5;
    rule5.if_side = &if51;
    rule5.then_side = &then5;
    1686:	08 96       	adiw	r24, 0x08	; 8
    1688:	fc 01       	movw	r30, r24
    168a:	b1 83       	std	Z+1, r27	; 0x01
    168c:	a0 83       	st	Z, r26
    rule5.next = &rule6;
    168e:	33 83       	std	Z+3, r19	; 0x03
    1690:	22 83       	std	Z+2, r18	; 0x02
    
    1692:	75 83       	std	Z+5, r23	; 0x05
    1694:	64 83       	std	Z+4, r22	; 0x04
    /* rule # 4: if medium and oneM then cruise */  
    struct rule_element_type then4;
    then4.value = &cruise.value;
    then4.next = NULL;
    1696:	2e 5e       	subi	r18, 0xEE	; 238
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	d9 01       	movw	r26, r18
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	7c 92       	st	X, r7
    16a0:	6e 92       	st	-X, r6
    
    16a2:	13 96       	adiw	r26, 0x03	; 3
    16a4:	1c 92       	st	X, r1
    16a6:	1e 92       	st	-X, r1
    16a8:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type if42;
    if42.value = &oneM.value;
    if42.next = NULL;
    16aa:	40 56       	subi	r20, 0x60	; 96
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	fa 01       	movw	r30, r20
    16b0:	b1 82       	std	Z+1, r11	; 0x01
    16b2:	a0 82       	st	Z, r10
    
    16b4:	13 82       	std	Z+3, r1	; 0x03
    16b6:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if41;
    if41.value = &medium.value;
    if41.next = &if42;
    16b8:	18 96       	adiw	r26, 0x08	; 8
    16ba:	65 ea       	ldi	r22, 0xA5	; 165
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	6c 0f       	add	r22, r28
    16c0:	7d 1f       	adc	r23, r29
    16c2:	66 5f       	subi	r22, 0xF6	; 246
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	7c 93       	st	X, r23
    16ca:	6e 93       	st	-X, r22
    
    16cc:	13 96       	adiw	r26, 0x03	; 3
    16ce:	5c 93       	st	X, r21
    16d0:	4e 93       	st	-X, r20
    16d2:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_type rule4;
    rule4.if_side = &if41;
    rule4.then_side = &then4;
    16d4:	48 5f       	subi	r20, 0xF8	; 248
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	fa 01       	movw	r30, r20
    16da:	b1 83       	std	Z+1, r27	; 0x01
    16dc:	a0 83       	st	Z, r26
    rule4.next = &rule5;
    16de:	33 83       	std	Z+3, r19	; 0x03
    16e0:	22 83       	std	Z+2, r18	; 0x02
	  
    16e2:	95 83       	std	Z+5, r25	; 0x05
    16e4:	84 83       	std	Z+4, r24	; 0x04
    /* rule # 3: if cruising and oneM then slow */
    struct rule_element_type then3;
    then3.value = &slow.value;
    then3.next = NULL;
    16e6:	2e 5e       	subi	r18, 0xEE	; 238
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	d9 01       	movw	r26, r18
    16ec:	11 96       	adiw	r26, 0x01	; 1
    16ee:	3c 92       	st	X, r3
    16f0:	2e 92       	st	-X, r2
    
    16f2:	13 96       	adiw	r26, 0x03	; 3
    16f4:	1c 92       	st	X, r1
    16f6:	1e 92       	st	-X, r1
    16f8:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type if32;
    if32.value = &oneM.value;
    if32.next = NULL;
    16fa:	4c 96       	adiw	r24, 0x1c	; 28
    16fc:	fc 01       	movw	r30, r24
    16fe:	b1 82       	std	Z+1, r11	; 0x01
    1700:	a0 82       	st	Z, r10
    
    1702:	13 82       	std	Z+3, r1	; 0x03
    1704:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if31;
    if31.value = &cruising.value;
    if31.next = &if32;
    1706:	18 96       	adiw	r26, 0x08	; 8
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	fc 92       	st	X, r15
    170c:	ee 92       	st	-X, r14
    
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	9c 93       	st	X, r25
    1712:	8e 93       	st	-X, r24
    1714:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_type rule3;
    rule3.if_side = &if31;
    rule3.then_side = &then3;
    1716:	08 96       	adiw	r24, 0x08	; 8
    1718:	fc 01       	movw	r30, r24
    171a:	b1 83       	std	Z+1, r27	; 0x01
    171c:	a0 83       	st	Z, r26
    rule3.next = &rule4;
    171e:	33 83       	std	Z+3, r19	; 0x03
    1720:	22 83       	std	Z+2, r18	; 0x02
    
    1722:	55 83       	std	Z+5, r21	; 0x05
    1724:	44 83       	std	Z+4, r20	; 0x04
    /* rule # 2: if low and oneM then slow */
    struct rule_element_type if22;
    if22.value = &oneM.value;
    if22.next = NULL;
    1726:	36 96       	adiw	r30, 0x06	; 6
    1728:	b1 82       	std	Z+1, r11	; 0x01
    172a:	a0 82       	st	Z, r10
    
    172c:	13 82       	std	Z+3, r1	; 0x03
    172e:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if21;
    if21.value = &low.value;
    if21.next = &if22;
    1730:	1e 96       	adiw	r26, 0x0e	; 14
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 92       	st	X, r9
    1736:	8e 92       	st	-X, r8
    
    1738:	13 96       	adiw	r26, 0x03	; 3
    173a:	fc 93       	st	X, r31
    173c:	ee 93       	st	-X, r30
    173e:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type then2;
    then2.value = &slow.value;
    then2.next = NULL;
    1740:	26 5e       	subi	r18, 0xE6	; 230
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	f9 01       	movw	r30, r18
    1746:	31 82       	std	Z+1, r3	; 0x01
    1748:	20 82       	st	Z, r2
    
    174a:	13 82       	std	Z+3, r1	; 0x03
    174c:	12 82       	std	Z+2, r1	; 0x02
    struct rule_type rule2;
    rule2.if_side = &if21;
    rule2.then_side = &then2;
    174e:	34 96       	adiw	r30, 0x04	; 4
    1750:	b1 83       	std	Z+1, r27	; 0x01
    1752:	a0 83       	st	Z, r26
    rule2.next = &rule3;
    1754:	33 83       	std	Z+3, r19	; 0x03
    1756:	22 83       	std	Z+2, r18	; 0x02
    
    1758:	95 83       	std	Z+5, r25	; 0x05
    175a:	84 83       	std	Z+4, r24	; 0x04
    /* rule # 1: if stopDist then noSpeed */
    struct rule_element_type if11;
    if11.value = &stopDist.value;
    if11.next = NULL;
    175c:	48 96       	adiw	r24, 0x18	; 24
    175e:	29 e7       	ldi	r18, 0x79	; 121
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	2c 0f       	add	r18, r28
    1764:	3d 1f       	adc	r19, r29
    1766:	26 5f       	subi	r18, 0xF6	; 246
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	dc 01       	movw	r26, r24
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	3c 93       	st	X, r19
    1770:	2e 93       	st	-X, r18
    
    1772:	13 96       	adiw	r26, 0x03	; 3
    1774:	1c 92       	st	X, r1
    1776:	1e 92       	st	-X, r1
    1778:	12 97       	sbiw	r26, 0x02	; 2
    struct rule_element_type then1;
    then1.value = &noSpeed.value;
    then1.next = NULL;
    177a:	14 96       	adiw	r26, 0x04	; 4
    177c:	0f 2e       	mov	r0, r31
    177e:	fd ef       	ldi	r31, 0xFD	; 253
    1780:	8f 2e       	mov	r8, r31
    1782:	91 2c       	mov	r9, r1
    1784:	f0 2d       	mov	r31, r0
    1786:	8c 0e       	add	r8, r28
    1788:	9d 1e       	adc	r9, r29
    178a:	1a e0       	ldi	r17, 0x0A	; 10
    178c:	81 0e       	add	r8, r17
    178e:	91 1c       	adc	r9, r1
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	9c 92       	st	X, r9
    1794:	8e 92       	st	-X, r8
    
    1796:	13 96       	adiw	r26, 0x03	; 3
    1798:	1c 92       	st	X, r1
    179a:	1e 92       	st	-X, r1
    179c:	12 97       	sbiw	r26, 0x02	; 2
    rule1.if_side = &if11;
    rule1.then_side = &then1;
    179e:	9a ab       	std	Y+50, r25	; 0x32
    17a0:	89 ab       	std	Y+49, r24	; 0x31
    rule1.next = &rule2;
    17a2:	bc ab       	std	Y+52, r27	; 0x34
    17a4:	ab ab       	std	Y+51, r26	; 0x33
    
    17a6:	fe ab       	std	Y+54, r31	; 0x36
    17a8:	ed ab       	std	Y+53, r30	; 0x35
	// pointers to top of lists
    Rule_Base = &rule1;
    System_Inputs = &speed;
    17aa:	8a 5e       	subi	r24, 0xEA	; 234
    17ac:	91 40       	sbci	r25, 0x01	; 1
    17ae:	90 93 90 02 	sts	0x0290, r25
    17b2:	80 93 8f 02 	sts	0x028F, r24
    System_Outputs = &pwm;
    17b6:	21 e1       	ldi	r18, 0x11	; 17
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	2c 0f       	add	r18, r28
    17bc:	3d 1f       	adc	r19, r29
    17be:	30 93 8e 02 	sts	0x028E, r19
    17c2:	20 93 8d 02 	sts	0x028D, r18
    
    17c6:	41 e2       	ldi	r20, 0x21	; 33
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	4c 0f       	add	r20, r28
    17cc:	5d 1f       	adc	r21, r29
    17ce:	50 93 8c 02 	sts	0x028C, r21
    17d2:	40 93 8b 02 	sts	0x028B, r20
	// the methods performing the FLC
    fuzzification();
    rule_evaluation();
    17d6:	81 d0       	rcall	.+258    	; 0x18da <fuzzification>
    defuzzification();
    17d8:	a7 d0       	rcall	.+334    	; 0x1928 <rule_evaluation>
	setESC(pwm.value);
    17da:	ec d0       	rcall	.+472    	; 0x19b4 <defuzzification>
}
    17dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17de:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e0:	77 d2       	rcall	.+1262   	; 0x1cd0 <setESC>

    17e2:	cd 5d       	subi	r28, 0xDD	; 221
    17e4:	dd 4f       	sbci	r29, 0xFD	; 253
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1816:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1818:	84 85       	ldd	r24, Z+12	; 0x0c
    181a:	95 85       	ldd	r25, Z+13	; 0x0d
    181c:	9b 01       	movw	r18, r22
    181e:	28 1b       	sub	r18, r24
    1820:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    1822:	86 85       	ldd	r24, Z+14	; 0x0e
    1824:	97 85       	ldd	r25, Z+15	; 0x0f
    1826:	86 1b       	sub	r24, r22
    1828:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    182a:	12 16       	cp	r1, r18
    182c:	13 06       	cpc	r1, r19
    182e:	ec f4       	brge	.+58     	; 0x186a <compute_degree_of_membership+0x54>
    1830:	18 16       	cp	r1, r24
    1832:	19 06       	cpc	r1, r25
    1834:	ec f4       	brge	.+58     	; 0x1870 <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1836:	60 89       	ldd	r22, Z+16	; 0x10
    1838:	71 89       	ldd	r23, Z+17	; 0x11
    183a:	a2 89       	ldd	r26, Z+18	; 0x12
    183c:	b3 89       	ldd	r27, Z+19	; 0x13
    183e:	8a 9f       	mul	r24, r26
    1840:	a0 01       	movw	r20, r0
    1842:	8b 9f       	mul	r24, r27
    1844:	50 0d       	add	r21, r0
    1846:	9a 9f       	mul	r25, r26
    1848:	50 0d       	add	r21, r0
    184a:	11 24       	eor	r1, r1
    184c:	26 9f       	mul	r18, r22
    184e:	c0 01       	movw	r24, r0
    1850:	27 9f       	mul	r18, r23
    1852:	90 0d       	add	r25, r0
    1854:	36 9f       	mul	r19, r22
    1856:	90 0d       	add	r25, r0
    1858:	11 24       	eor	r1, r1
    185a:	48 17       	cp	r20, r24
    185c:	59 07       	cpc	r21, r25
    185e:	0c f4       	brge	.+2      	; 0x1862 <compute_degree_of_membership+0x4c>
    1860:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    1862:	84 36       	cpi	r24, 0x64	; 100
    1864:	91 05       	cpc	r25, r1
    1866:	3c f4       	brge	.+14     	; 0x1876 <compute_degree_of_membership+0x60>
    1868:	08 c0       	rjmp	.+16     	; 0x187a <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	05 c0       	rjmp	.+10     	; 0x187a <compute_degree_of_membership+0x64>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    1876:	84 e6       	ldi	r24, 0x64	; 100
    1878:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    187a:	93 87       	std	Z+11, r25	; 0x0b
    187c:	82 87       	std	Z+10, r24	; 0x0a
    187e:	08 95       	ret

00001880 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    188a:	c6 85       	ldd	r28, Z+14	; 0x0e
    188c:	d7 85       	ldd	r29, Z+15	; 0x0f
    188e:	84 85       	ldd	r24, Z+12	; 0x0c
    1890:	95 85       	ldd	r25, Z+13	; 0x0d
    1892:	c8 1b       	sub	r28, r24
    1894:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    1896:	22 85       	ldd	r18, Z+10	; 0x0a
    1898:	33 85       	ldd	r19, Z+11	; 0x0b
    189a:	60 89       	ldd	r22, Z+16	; 0x10
    189c:	71 89       	ldd	r23, Z+17	; 0x11
    189e:	c9 01       	movw	r24, r18
    18a0:	e8 d4       	rcall	.+2512   	; 0x2272 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    18a2:	8e 01       	movw	r16, r28
    18a4:	06 1b       	sub	r16, r22
    18a6:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    18a8:	62 89       	ldd	r22, Z+18	; 0x12
    18aa:	73 89       	ldd	r23, Z+19	; 0x13
    18ac:	c9 01       	movw	r24, r18
    18ae:	e1 d4       	rcall	.+2498   	; 0x2272 <__divmodhi4>
    top = base - run_1 - run_2;
    18b0:	06 1b       	sub	r16, r22
    18b2:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    18b4:	c0 0f       	add	r28, r16
    18b6:	d1 1f       	adc	r29, r17
    18b8:	2c 9f       	mul	r18, r28
    18ba:	c0 01       	movw	r24, r0
    18bc:	2d 9f       	mul	r18, r29
    18be:	90 0d       	add	r25, r0
    18c0:	3c 9f       	mul	r19, r28
    18c2:	90 0d       	add	r25, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	99 23       	and	r25, r25
    18c8:	0c f4       	brge	.+2      	; 0x18cc <compute_area_of_trapezoid+0x4c>
    18ca:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    18e2:	00 91 8d 02 	lds	r16, 0x028D
    18e6:	10 91 8e 02 	lds	r17, 0x028E
    18ea:	01 15       	cp	r16, r1
    18ec:	11 05       	cpc	r17, r1
    18ee:	b9 f0       	breq	.+46     	; 0x191e <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    18f0:	f8 01       	movw	r30, r16
    18f2:	c4 85       	ldd	r28, Z+12	; 0x0c
    18f4:	d5 85       	ldd	r29, Z+13	; 0x0d
    18f6:	20 97       	sbiw	r28, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <fuzzification+0x38>
            if (mf!=NULL) {
    18fa:	20 97       	sbiw	r28, 0x00	; 0
    18fc:	29 f0       	breq	.+10     	; 0x1908 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    18fe:	f8 01       	movw	r30, r16
    1900:	62 85       	ldd	r22, Z+10	; 0x0a
    1902:	73 85       	ldd	r23, Z+11	; 0x0b
    1904:	ce 01       	movw	r24, r28
    1906:	87 df       	rcall	.-242    	; 0x1816 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1908:	0c 88       	ldd	r0, Y+20	; 0x14
    190a:	dd 89       	ldd	r29, Y+21	; 0x15
    190c:	c0 2d       	mov	r28, r0
    190e:	20 97       	sbiw	r28, 0x00	; 0
    1910:	a1 f7       	brne	.-24     	; 0x18fa <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1912:	f8 01       	movw	r30, r16
    1914:	06 85       	ldd	r16, Z+14	; 0x0e
    1916:	17 85       	ldd	r17, Z+15	; 0x0f
    1918:	01 15       	cp	r16, r1
    191a:	11 05       	cpc	r17, r1
    191c:	49 f7       	brne	.-46     	; 0x18f0 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    1930:	c0 91 8f 02 	lds	r28, 0x028F
    1934:	d0 91 90 02 	lds	r29, 0x0290
    1938:	20 97       	sbiw	r28, 0x00	; 0
    193a:	b9 f1       	breq	.+110    	; 0x19aa <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    193c:	04 e6       	ldi	r16, 0x64	; 100
    193e:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1940:	e8 81       	ld	r30, Y
    1942:	f9 81       	ldd	r31, Y+1	; 0x01
    1944:	30 97       	sbiw	r30, 0x00	; 0
    1946:	81 f0       	breq	.+32     	; 0x1968 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1948:	20 2f       	mov	r18, r16
    194a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    194c:	a0 81       	ld	r26, Z
    194e:	b1 81       	ldd	r27, Z+1	; 0x01
    1950:	8d 91       	ld	r24, X+
    1952:	9c 91       	ld	r25, X
    1954:	82 17       	cp	r24, r18
    1956:	93 07       	cpc	r25, r19
    1958:	0c f4       	brge	.+2      	; 0x195c <rule_evaluation+0x34>
    195a:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    195c:	02 80       	ldd	r0, Z+2	; 0x02
    195e:	f3 81       	ldd	r31, Z+3	; 0x03
    1960:	e0 2d       	mov	r30, r0
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	99 f7       	brne	.-26     	; 0x194c <rule_evaluation+0x24>
    1966:	02 c0       	rjmp	.+4      	; 0x196c <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1968:	20 2f       	mov	r18, r16
    196a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    196c:	ea 81       	ldd	r30, Y+2	; 0x02
    196e:	fb 81       	ldd	r31, Y+3	; 0x03
    1970:	30 97       	sbiw	r30, 0x00	; 0
    1972:	b1 f0       	breq	.+44     	; 0x19a0 <rule_evaluation+0x78>
    1974:	72 2f       	mov	r23, r18
    1976:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1978:	a0 81       	ld	r26, Z
    197a:	b1 81       	ldd	r27, Z+1	; 0x01
    197c:	8d 91       	ld	r24, X+
    197e:	9c 91       	ld	r25, X
    1980:	11 97       	sbiw	r26, 0x01	; 1
    1982:	57 2f       	mov	r21, r23
    1984:	46 2f       	mov	r20, r22
    1986:	28 17       	cp	r18, r24
    1988:	39 07       	cpc	r19, r25
    198a:	14 f4       	brge	.+4      	; 0x1990 <rule_evaluation+0x68>
    198c:	58 2f       	mov	r21, r24
    198e:	49 2f       	mov	r20, r25
    1990:	5c 93       	st	X, r21
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1996:	02 80       	ldd	r0, Z+2	; 0x02
    1998:	f3 81       	ldd	r31, Z+3	; 0x03
    199a:	e0 2d       	mov	r30, r0
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	61 f7       	brne	.-40     	; 0x1978 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    19a0:	0c 80       	ldd	r0, Y+4	; 0x04
    19a2:	dd 81       	ldd	r29, Y+5	; 0x05
    19a4:	c0 2d       	mov	r28, r0
    19a6:	20 97       	sbiw	r28, 0x00	; 0
    19a8:	59 f6       	brne	.-106    	; 0x1940 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	08 95       	ret

000019b4 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    19b4:	2f 92       	push	r2
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	00 d0       	rcall	.+0      	; 0x19da <defuzzification+0x26>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <defuzzification+0x28>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <defuzzification+0x2a>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    19e2:	80 91 8b 02 	lds	r24, 0x028B
    19e6:	90 91 8c 02 	lds	r25, 0x028C
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	89 2b       	or	r24, r25
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <defuzzification+0x40>
    19f2:	84 c0       	rjmp	.+264    	; 0x1afc <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    19f4:	eb 81       	ldd	r30, Y+3	; 0x03
    19f6:	fc 81       	ldd	r31, Y+4	; 0x04
    19f8:	04 84       	ldd	r0, Z+12	; 0x0c
    19fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    19fc:	e0 2d       	mov	r30, r0
    19fe:	fe 83       	std	Y+6, r31	; 0x06
    1a00:	ed 83       	std	Y+5, r30	; 0x05
    1a02:	ef 2b       	or	r30, r31
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <defuzzification+0x54>
    1a06:	66 c0       	rjmp	.+204    	; 0x1ad4 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1a08:	51 2c       	mov	r5, r1
    1a0a:	61 2c       	mov	r6, r1
    1a0c:	71 2c       	mov	r7, r1
    1a0e:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    1a10:	31 2c       	mov	r3, r1
    1a12:	21 2c       	mov	r2, r1
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	31 df       	rcall	.-414    	; 0x1880 <compute_area_of_trapezoid>
    1a1e:	bc 01       	movw	r22, r24
    1a20:	88 27       	eor	r24, r24
    1a22:	77 fd       	sbrc	r23, 7
    1a24:	80 95       	com	r24
    1a26:	98 2f       	mov	r25, r24
    1a28:	35 d3       	rcall	.+1642   	; 0x2094 <__floatsisf>
    1a2a:	6b 01       	movw	r12, r22
    1a2c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    1a2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a30:	fe 81       	ldd	r31, Y+6	; 0x06
    1a32:	04 85       	ldd	r16, Z+12	; 0x0c
    1a34:	15 85       	ldd	r17, Z+13	; 0x0d
    1a36:	b8 01       	movw	r22, r16
    1a38:	88 27       	eor	r24, r24
    1a3a:	77 fd       	sbrc	r23, 7
    1a3c:	80 95       	com	r24
    1a3e:	98 2f       	mov	r25, r24
    1a40:	29 d3       	rcall	.+1618   	; 0x2094 <__floatsisf>
    1a42:	4b 01       	movw	r8, r22
    1a44:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1a46:	ed 81       	ldd	r30, Y+5	; 0x05
    1a48:	fe 81       	ldd	r31, Y+6	; 0x06
    1a4a:	86 85       	ldd	r24, Z+14	; 0x0e
    1a4c:	97 85       	ldd	r25, Z+15	; 0x0f
    1a4e:	80 1b       	sub	r24, r16
    1a50:	91 0b       	sbc	r25, r17
    1a52:	bc 01       	movw	r22, r24
    1a54:	12 f4       	brpl	.+4      	; 0x1a5a <defuzzification+0xa6>
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	75 95       	asr	r23
    1a5c:	67 95       	ror	r22
            centroid = centroid + intermed;
    1a5e:	88 27       	eor	r24, r24
    1a60:	77 fd       	sbrc	r23, 7
    1a62:	80 95       	com	r24
    1a64:	98 2f       	mov	r25, r24
    1a66:	16 d3       	rcall	.+1580   	; 0x2094 <__floatsisf>
    1a68:	a5 01       	movw	r20, r10
    1a6a:	94 01       	movw	r18, r8
    1a6c:	14 d2       	rcall	.+1064   	; 0x1e96 <__addsf3>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
    1a76:	9a d3       	rcall	.+1844   	; 0x21ac <__mulsf3>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	63 2d       	mov	r22, r3
    1a7e:	72 2d       	mov	r23, r2
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	08 d2       	rcall	.+1040   	; 0x1e96 <__addsf3>
    1a86:	36 2e       	mov	r3, r22
    1a88:	27 2e       	mov	r2, r23
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1a8e:	a7 01       	movw	r20, r14
    1a90:	96 01       	movw	r18, r12
    1a92:	65 2d       	mov	r22, r5
    1a94:	76 2d       	mov	r23, r6
    1a96:	87 2d       	mov	r24, r7
    1a98:	94 2d       	mov	r25, r4
    1a9a:	fd d1       	rcall	.+1018   	; 0x1e96 <__addsf3>
    1a9c:	56 2e       	mov	r5, r22
    1a9e:	67 2e       	mov	r6, r23
    1aa0:	78 2e       	mov	r7, r24
    1aa2:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa8:	04 88       	ldd	r0, Z+20	; 0x14
    1aaa:	f5 89       	ldd	r31, Z+21	; 0x15
    1aac:	e0 2d       	mov	r30, r0
    1aae:	fe 83       	std	Y+6, r31	; 0x06
    1ab0:	ed 83       	std	Y+5, r30	; 0x05
    1ab2:	ef 2b       	or	r30, r31
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <defuzzification+0x104>
    1ab6:	b0 cf       	rjmp	.-160    	; 0x1a18 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    1ab8:	26 2f       	mov	r18, r22
    1aba:	37 2f       	mov	r19, r23
    1abc:	48 2f       	mov	r20, r24
    1abe:	59 2f       	mov	r21, r25
    1ac0:	63 2d       	mov	r22, r3
    1ac2:	72 2d       	mov	r23, r2
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	4a d2       	rcall	.+1172   	; 0x1f5e <__divsf3>
    1aca:	26 2f       	mov	r18, r22
    1acc:	37 2f       	mov	r19, r23
    1ace:	48 2f       	mov	r20, r24
    1ad0:	59 2f       	mov	r21, r25
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    1adc:	62 2f       	mov	r22, r18
    1ade:	73 2f       	mov	r23, r19
    1ae0:	84 2f       	mov	r24, r20
    1ae2:	95 2f       	mov	r25, r21
    1ae4:	a4 d2       	rcall	.+1352   	; 0x202e <__fixsfsi>
    1ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aea:	73 87       	std	Z+11, r23	; 0x0b
    1aec:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1aee:	86 85       	ldd	r24, Z+14	; 0x0e
    1af0:	97 85       	ldd	r25, Z+15	; 0x0f
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	89 2b       	or	r24, r25
    1af8:	09 f0       	breq	.+2      	; 0x1afc <defuzzification+0x148>
    1afa:	7c cf       	rjmp	.-264    	; 0x19f4 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    1afc:	26 96       	adiw	r28, 0x06	; 6
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	bf 90       	pop	r11
    1b1a:	af 90       	pop	r10
    1b1c:	9f 90       	pop	r9
    1b1e:	8f 90       	pop	r8
    1b20:	7f 90       	pop	r7
    1b22:	6f 90       	pop	r6
    1b24:	5f 90       	pop	r5
    1b26:	4f 90       	pop	r4
    1b28:	3f 90       	pop	r3
    1b2a:	2f 90       	pop	r2
    1b2c:	08 95       	ret

00001b2e <__vector_28>:
	}

	int16_t Get_Measurement(void) //TODO
	{
		return 140;
	}
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	0b b6       	in	r0, 0x3b	; 59
    1b3a:	0f 92       	push	r0
    1b3c:	8f 93       	push	r24
    1b3e:	9f 93       	push	r25
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31
    1b44:	80 91 ce 00 	lds	r24, 0x00CE
    1b48:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <__vector_28+0x28>
    1b4c:	10 92 b2 02 	sts	0x02B2, r1
    1b50:	10 92 b1 02 	sts	0x02B1, r1
    1b54:	10 c0       	rjmp	.+32     	; 0x1b76 <__vector_28+0x48>
    1b56:	e0 91 b1 02 	lds	r30, 0x02B1
    1b5a:	f0 91 b2 02 	lds	r31, 0x02B2
    1b5e:	ef 56       	subi	r30, 0x6F	; 111
    1b60:	fd 4f       	sbci	r31, 0xFD	; 253
    1b62:	80 83       	st	Z, r24
    1b64:	80 91 b1 02 	lds	r24, 0x02B1
    1b68:	90 91 b2 02 	lds	r25, 0x02B2
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	90 93 b2 02 	sts	0x02B2, r25
    1b72:	80 93 b1 02 	sts	0x02B1, r24
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	0f 90       	pop	r0
    1b80:	0b be       	out	0x3b, r0	; 59
    1b82:	0f 90       	pop	r0
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	0f 90       	pop	r0
    1b88:	1f 90       	pop	r1
    1b8a:	18 95       	reti

00001b8c <SPI_slaveInit>:
    1b8c:	80 e4       	ldi	r24, 0x40	; 64
    1b8e:	84 b9       	out	0x04, r24	; 4
    1b90:	80 ec       	ldi	r24, 0xC0	; 192
    1b92:	8c bd       	out	0x2c, r24	; 44
    1b94:	08 95       	ret

00001b96 <carInit>:
    1b96:	8d d0       	rcall	.+282    	; 0x1cb2 <pwmInit>
    1b98:	f9 df       	rcall	.-14     	; 0x1b8c <SPI_slaveInit>
    1b9a:	8d ec       	ldi	r24, 0xCD	; 205
    1b9c:	9a e0       	ldi	r25, 0x0A	; 10
    1b9e:	98 d0       	rcall	.+304    	; 0x1cd0 <setESC>
    1ba0:	84 e6       	ldi	r24, 0x64	; 100
    1ba2:	9a e0       	ldi	r25, 0x0A	; 10
    1ba4:	b0 c0       	rjmp	.+352    	; 0x1d06 <setServo>
    1ba6:	08 95       	ret

00001ba8 <USART1_init>:
    1ba8:	ec ec       	ldi	r30, 0xCC	; 204
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	11 82       	std	Z+1, r1	; 0x01
    1bae:	10 82       	st	Z, r1
    1bb0:	20 e9       	ldi	r18, 0x90	; 144
    1bb2:	20 93 c9 00 	sts	0x00C9, r18
    1bb6:	2e e0       	ldi	r18, 0x0E	; 14
    1bb8:	20 93 ca 00 	sts	0x00CA, r18
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
    1bc0:	08 95       	ret

00001bc2 <Sens_info_read>:
    1bc2:	e9 ec       	ldi	r30, 0xC9	; 201
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	20 81       	ld	r18, Z
    1bc8:	2f 77       	andi	r18, 0x7F	; 127
    1bca:	20 83       	st	Z, r18
    1bcc:	20 91 91 02 	lds	r18, 0x0291
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	2c 93       	st	X, r18
    1bd4:	20 91 92 02 	lds	r18, 0x0292
    1bd8:	11 96       	adiw	r26, 0x01	; 1
    1bda:	2c 93       	st	X, r18
    1bdc:	10 92 b2 02 	sts	0x02B2, r1
    1be0:	10 92 b1 02 	sts	0x02B1, r1
    1be4:	80 81       	ld	r24, Z
    1be6:	80 68       	ori	r24, 0x80	; 128
    1be8:	80 83       	st	Z, r24
    1bea:	08 95       	ret

00001bec <__vector_18>:
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	2f 93       	push	r18
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	80 91 fc 01 	lds	r24, 0x01FC
    1c00:	90 91 fd 01 	lds	r25, 0x01FD
    1c04:	8b 39       	cpi	r24, 0x9B	; 155
    1c06:	26 e9       	ldi	r18, 0x96	; 150
    1c08:	92 07       	cpc	r25, r18
    1c0a:	30 f4       	brcc	.+12     	; 0x1c18 <__vector_18+0x2c>
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	90 93 fd 01 	sts	0x01FD, r25
    1c12:	80 93 fc 01 	sts	0x01FC, r24
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <__vector_18+0x3e>
    1c18:	80 91 fe 01 	lds	r24, 0x01FE
    1c1c:	81 60       	ori	r24, 0x01	; 1
    1c1e:	80 93 fe 01 	sts	0x01FE, r24
    1c22:	10 92 fd 01 	sts	0x01FD, r1
    1c26:	10 92 fc 01 	sts	0x01FC, r1
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	2f 91       	pop	r18
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	0f 90       	pop	r0
    1c36:	1f 90       	pop	r1
    1c38:	18 95       	reti

00001c3a <main>:


	/* main function
	*/
	int main (void)
	{
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	2f 97       	sbiw	r28, 0x0f	; 15
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
		
		
		
		
		
		carInit();
    1c4e:	a3 df       	rcall	.-186    	; 0x1b96 <carInit>

		
		
		
		sei();
    1c50:	78 94       	sei
		DDRA = 0xFF;
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	81 b9       	out	0x01, r24	; 1
		sens_info_ptr = &sensor_info;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a6 df       	rcall	.-180    	; 0x1ba8 <USART1_init>
		
		
		
		int distance;
		while (1) {
			counter_UART1_reciever =2;
    1c5c:	02 e0       	ldi	r16, 0x02	; 2
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
				
				
				cli();
				
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    1c60:	0f 2e       	mov	r0, r31
    1c62:	fa e8       	ldi	r31, 0x8A	; 138
    1c64:	cf 2e       	mov	r12, r31
    1c66:	d1 2c       	mov	r13, r1
    1c68:	f0 2d       	mov	r31, r0
				// inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    1c6a:	0f 2e       	mov	r0, r31
    1c6c:	f8 e8       	ldi	r31, 0x88	; 136
    1c6e:	ef 2e       	mov	r14, r31
    1c70:	f1 2c       	mov	r15, r1
    1c72:	f0 2d       	mov	r31, r0
		
		
		
		int distance;
		while (1) {
			counter_UART1_reciever =2;
    1c74:	10 93 b2 02 	sts	0x02B2, r17
    1c78:	00 93 b1 02 	sts	0x02B1, r16
			if (counter_UART1_reciever > 1) {
    1c7c:	80 91 b1 02 	lds	r24, 0x02B1
    1c80:	90 91 b2 02 	lds	r25, 0x02B2
    1c84:	02 97       	sbiw	r24, 0x02	; 2
    1c86:	b4 f3       	brlt	.-20     	; 0x1c74 <main+0x3a>
				
				Sens_info_read(sens_info_ptr);
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	9a df       	rcall	.-204    	; 0x1bc2 <Sens_info_read>
				
				PORTA = sensor_info.dist_right_line;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	82 b9       	out	0x02, r24	; 2
				
				
				cli();
    1c92:	f8 94       	cli
				
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    1c94:	f6 01       	movw	r30, r12
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
				PORTA = sensor_info.dist_right_line;
				
				
				cli();
				
				distance = (int) sensor_info.dist_right_line;
    1c9a:	69 81       	ldd	r22, Y+1	; 0x01
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
				FLC_steering(OCR1B, distance);
    1c9e:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
				// inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	6a 81       	ldd	r22, Y+2	; 0x02
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	e4 d8       	rcall	.-3640   	; 0xe76 <FLC_road>
				sei();
    1cae:	78 94       	sei
    1cb0:	e1 cf       	rjmp	.-62     	; 0x1c74 <main+0x3a>

00001cb2 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1cb6:	82 ea       	ldi	r24, 0xA2	; 162
    1cb8:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	9f e8       	ldi	r25, 0x8F	; 143
    1cc0:	90 93 87 00 	sts	0x0087, r25
    1cc4:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1cc8:	8a e1       	ldi	r24, 0x1A	; 26
    1cca:	80 93 81 00 	sts	0x0081, r24
    1cce:	08 95       	ret

00001cd0 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1cd0:	80 36       	cpi	r24, 0x60	; 96
    1cd2:	2a e0       	ldi	r18, 0x0A	; 10
    1cd4:	92 07       	cpc	r25, r18
    1cd6:	3c f4       	brge	.+14     	; 0x1ce6 <setESC+0x16>
	{
		OCR1A = MINESC;
    1cd8:	8f e5       	ldi	r24, 0x5F	; 95
    1cda:	9a e0       	ldi	r25, 0x0A	; 10
    1cdc:	90 93 89 00 	sts	0x0089, r25
    1ce0:	80 93 88 00 	sts	0x0088, r24
    1ce4:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1ce6:	8b 33       	cpi	r24, 0x3B	; 59
    1ce8:	2b e0       	ldi	r18, 0x0B	; 11
    1cea:	92 07       	cpc	r25, r18
    1cec:	3c f0       	brlt	.+14     	; 0x1cfc <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1cee:	8b e3       	ldi	r24, 0x3B	; 59
    1cf0:	9b e0       	ldi	r25, 0x0B	; 11
    1cf2:	90 93 89 00 	sts	0x0089, r25
    1cf6:	80 93 88 00 	sts	0x0088, r24
    1cfa:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1cfc:	90 93 89 00 	sts	0x0089, r25
    1d00:	80 93 88 00 	sts	0x0088, r24
    1d04:	08 95       	ret

00001d06 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    1d06:	87 3e       	cpi	r24, 0xE7	; 231
    1d08:	27 e0       	ldi	r18, 0x07	; 7
    1d0a:	92 07       	cpc	r25, r18
    1d0c:	3c f4       	brge	.+14     	; 0x1d1c <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1d0e:	86 ee       	ldi	r24, 0xE6	; 230
    1d10:	97 e0       	ldi	r25, 0x07	; 7
    1d12:	90 93 8b 00 	sts	0x008B, r25
    1d16:	80 93 8a 00 	sts	0x008A, r24
    1d1a:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1d1c:	8f 33       	cpi	r24, 0x3F	; 63
    1d1e:	2c e0       	ldi	r18, 0x0C	; 12
    1d20:	92 07       	cpc	r25, r18
    1d22:	3c f0       	brlt	.+14     	; 0x1d32 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1d24:	8f e3       	ldi	r24, 0x3F	; 63
    1d26:	9c e0       	ldi	r25, 0x0C	; 12
    1d28:	90 93 8b 00 	sts	0x008B, r25
    1d2c:	80 93 8a 00 	sts	0x008A, r24
    1d30:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    1d32:	90 93 8b 00 	sts	0x008B, r25
    1d36:	80 93 8a 00 	sts	0x008A, r24
    1d3a:	08 95       	ret

00001d3c <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	0b b6       	in	r0, 0x3b	; 59
    1d48:	0f 92       	push	r0
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	8f 93       	push	r24
    1d52:	9f 93       	push	r25
    1d54:	af 93       	push	r26
    1d56:	bf 93       	push	r27
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1d5c:	80 91 89 02 	lds	r24, 0x0289
    1d60:	90 91 8a 02 	lds	r25, 0x028A
    1d64:	80 34       	cpi	r24, 0x40	; 64
    1d66:	91 05       	cpc	r25, r1
    1d68:	31 f4       	brne	.+12     	; 0x1d76 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 bf 02 	sts	0x02BF, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1d70:	80 91 c6 00 	lds	r24, 0x00C6
    1d74:	16 c0       	rjmp	.+44     	; 0x1da2 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1d76:	80 34       	cpi	r24, 0x40	; 64
    1d78:	91 05       	cpc	r25, r1
    1d7a:	e8 f4       	brcc	.+58     	; 0x1db6 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1d7c:	e7 e8       	ldi	r30, 0x87	; 135
    1d7e:	f2 e0       	ldi	r31, 0x02	; 2
    1d80:	20 81       	ld	r18, Z
    1d82:	31 81       	ldd	r19, Z+1	; 0x01
    1d84:	40 91 c6 00 	lds	r20, 0x00C6
    1d88:	d9 01       	movw	r26, r18
    1d8a:	ab 5b       	subi	r26, 0xBB	; 187
    1d8c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d8e:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	31 83       	std	Z+1, r19	; 0x01
    1d96:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	90 93 8a 02 	sts	0x028A, r25
    1d9e:	80 93 89 02 	sts	0x0289, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1da2:	80 91 89 02 	lds	r24, 0x0289
    1da6:	90 91 8a 02 	lds	r25, 0x028A
    1daa:	80 34       	cpi	r24, 0x40	; 64
    1dac:	91 05       	cpc	r25, r1
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 bd 02 	sts	0x02BD, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1db6:	80 91 87 02 	lds	r24, 0x0287
    1dba:	90 91 88 02 	lds	r25, 0x0288
    1dbe:	80 34       	cpi	r24, 0x40	; 64
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1dc4:	10 92 88 02 	sts	0x0288, r1
    1dc8:	10 92 87 02 	sts	0x0287, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 bc 02 	sts	0x02BC, r24
}
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	4f 91       	pop	r20
    1de0:	3f 91       	pop	r19
    1de2:	2f 91       	pop	r18
    1de4:	0f 90       	pop	r0
    1de6:	0b be       	out	0x3b, r0	; 59
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_22>:




ISR(USART0_TX_vect)
{
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	0b b6       	in	r0, 0x3b	; 59
    1dfe:	0f 92       	push	r0
    1e00:	8f 93       	push	r24
    1e02:	9f 93       	push	r25
    1e04:	ef 93       	push	r30
    1e06:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1e08:	80 91 43 02 	lds	r24, 0x0243
    1e0c:	90 91 44 02 	lds	r25, 0x0244
    1e10:	80 34       	cpi	r24, 0x40	; 64
    1e12:	91 05       	cpc	r25, r1
    1e14:	19 f4       	brne	.+6      	; 0x1e1c <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1e16:	10 92 bb 02 	sts	0x02BB, r1
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1e1c:	89 2b       	or	r24, r25
    1e1e:	b9 f0       	breq	.+46     	; 0x1e4e <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1e20:	e0 91 3f 02 	lds	r30, 0x023F
    1e24:	f0 91 40 02 	lds	r31, 0x0240
    1e28:	e1 50       	subi	r30, 0x01	; 1
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1e32:	ef e3       	ldi	r30, 0x3F	; 63
    1e34:	f2 e0       	ldi	r31, 0x02	; 2
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1e40:	e3 e4       	ldi	r30, 0x43	; 67
    1e42:	f2 e0       	ldi	r31, 0x02	; 2
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1e4e:	80 91 3f 02 	lds	r24, 0x023F
    1e52:	90 91 40 02 	lds	r25, 0x0240
    1e56:	80 34       	cpi	r24, 0x40	; 64
    1e58:	91 05       	cpc	r25, r1
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1e5c:	10 92 40 02 	sts	0x0240, r1
    1e60:	10 92 3f 02 	sts	0x023F, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1e64:	80 91 43 02 	lds	r24, 0x0243
    1e68:	90 91 44 02 	lds	r25, 0x0244
    1e6c:	89 2b       	or	r24, r25
    1e6e:	39 f4       	brne	.+14     	; 0x1e7e <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1e70:	10 92 be 02 	sts	0x02BE, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1e74:	e1 ec       	ldi	r30, 0xC1	; 193
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7b       	andi	r24, 0xBF	; 191
    1e7c:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	0f 90       	pop	r0
    1e88:	0b be       	out	0x3b, r0	; 59
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <__subsf3>:
    1e94:	50 58       	subi	r21, 0x80	; 128

00001e96 <__addsf3>:
    1e96:	bb 27       	eor	r27, r27
    1e98:	aa 27       	eor	r26, r26
    1e9a:	0e d0       	rcall	.+28     	; 0x1eb8 <__addsf3x>
    1e9c:	4d c1       	rjmp	.+666    	; 0x2138 <__fp_round>
    1e9e:	3e d1       	rcall	.+636    	; 0x211c <__fp_pscA>
    1ea0:	30 f0       	brcs	.+12     	; 0x1eae <__addsf3+0x18>
    1ea2:	43 d1       	rcall	.+646    	; 0x212a <__fp_pscB>
    1ea4:	20 f0       	brcs	.+8      	; 0x1eae <__addsf3+0x18>
    1ea6:	31 f4       	brne	.+12     	; 0x1eb4 <__addsf3+0x1e>
    1ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eaa:	11 f4       	brne	.+4      	; 0x1eb0 <__addsf3+0x1a>
    1eac:	1e f4       	brtc	.+6      	; 0x1eb4 <__addsf3+0x1e>
    1eae:	33 c1       	rjmp	.+614    	; 0x2116 <__fp_nan>
    1eb0:	0e f4       	brtc	.+2      	; 0x1eb4 <__addsf3+0x1e>
    1eb2:	e0 95       	com	r30
    1eb4:	e7 fb       	bst	r30, 7
    1eb6:	29 c1       	rjmp	.+594    	; 0x210a <__fp_inf>

00001eb8 <__addsf3x>:
    1eb8:	e9 2f       	mov	r30, r25
    1eba:	4f d1       	rcall	.+670    	; 0x215a <__fp_split3>
    1ebc:	80 f3       	brcs	.-32     	; 0x1e9e <__addsf3+0x8>
    1ebe:	ba 17       	cp	r27, r26
    1ec0:	62 07       	cpc	r22, r18
    1ec2:	73 07       	cpc	r23, r19
    1ec4:	84 07       	cpc	r24, r20
    1ec6:	95 07       	cpc	r25, r21
    1ec8:	18 f0       	brcs	.+6      	; 0x1ed0 <__addsf3x+0x18>
    1eca:	71 f4       	brne	.+28     	; 0x1ee8 <__addsf3x+0x30>
    1ecc:	9e f5       	brtc	.+102    	; 0x1f34 <__addsf3x+0x7c>
    1ece:	67 c1       	rjmp	.+718    	; 0x219e <__fp_zero>
    1ed0:	0e f4       	brtc	.+2      	; 0x1ed4 <__addsf3x+0x1c>
    1ed2:	e0 95       	com	r30
    1ed4:	0b 2e       	mov	r0, r27
    1ed6:	ba 2f       	mov	r27, r26
    1ed8:	a0 2d       	mov	r26, r0
    1eda:	0b 01       	movw	r0, r22
    1edc:	b9 01       	movw	r22, r18
    1ede:	90 01       	movw	r18, r0
    1ee0:	0c 01       	movw	r0, r24
    1ee2:	ca 01       	movw	r24, r20
    1ee4:	a0 01       	movw	r20, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	ff 27       	eor	r31, r31
    1eea:	59 1b       	sub	r21, r25
    1eec:	99 f0       	breq	.+38     	; 0x1f14 <__addsf3x+0x5c>
    1eee:	59 3f       	cpi	r21, 0xF9	; 249
    1ef0:	50 f4       	brcc	.+20     	; 0x1f06 <__addsf3x+0x4e>
    1ef2:	50 3e       	cpi	r21, 0xE0	; 224
    1ef4:	68 f1       	brcs	.+90     	; 0x1f50 <__addsf3x+0x98>
    1ef6:	1a 16       	cp	r1, r26
    1ef8:	f0 40       	sbci	r31, 0x00	; 0
    1efa:	a2 2f       	mov	r26, r18
    1efc:	23 2f       	mov	r18, r19
    1efe:	34 2f       	mov	r19, r20
    1f00:	44 27       	eor	r20, r20
    1f02:	58 5f       	subi	r21, 0xF8	; 248
    1f04:	f3 cf       	rjmp	.-26     	; 0x1eec <__addsf3x+0x34>
    1f06:	46 95       	lsr	r20
    1f08:	37 95       	ror	r19
    1f0a:	27 95       	ror	r18
    1f0c:	a7 95       	ror	r26
    1f0e:	f0 40       	sbci	r31, 0x00	; 0
    1f10:	53 95       	inc	r21
    1f12:	c9 f7       	brne	.-14     	; 0x1f06 <__addsf3x+0x4e>
    1f14:	7e f4       	brtc	.+30     	; 0x1f34 <__addsf3x+0x7c>
    1f16:	1f 16       	cp	r1, r31
    1f18:	ba 0b       	sbc	r27, r26
    1f1a:	62 0b       	sbc	r22, r18
    1f1c:	73 0b       	sbc	r23, r19
    1f1e:	84 0b       	sbc	r24, r20
    1f20:	ba f0       	brmi	.+46     	; 0x1f50 <__addsf3x+0x98>
    1f22:	91 50       	subi	r25, 0x01	; 1
    1f24:	a1 f0       	breq	.+40     	; 0x1f4e <__addsf3x+0x96>
    1f26:	ff 0f       	add	r31, r31
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	66 1f       	adc	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	88 1f       	adc	r24, r24
    1f30:	c2 f7       	brpl	.-16     	; 0x1f22 <__addsf3x+0x6a>
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <__addsf3x+0x98>
    1f34:	ba 0f       	add	r27, r26
    1f36:	62 1f       	adc	r22, r18
    1f38:	73 1f       	adc	r23, r19
    1f3a:	84 1f       	adc	r24, r20
    1f3c:	48 f4       	brcc	.+18     	; 0x1f50 <__addsf3x+0x98>
    1f3e:	87 95       	ror	r24
    1f40:	77 95       	ror	r23
    1f42:	67 95       	ror	r22
    1f44:	b7 95       	ror	r27
    1f46:	f7 95       	ror	r31
    1f48:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4a:	08 f0       	brcs	.+2      	; 0x1f4e <__addsf3x+0x96>
    1f4c:	b3 cf       	rjmp	.-154    	; 0x1eb4 <__addsf3+0x1e>
    1f4e:	93 95       	inc	r25
    1f50:	88 0f       	add	r24, r24
    1f52:	08 f0       	brcs	.+2      	; 0x1f56 <__addsf3x+0x9e>
    1f54:	99 27       	eor	r25, r25
    1f56:	ee 0f       	add	r30, r30
    1f58:	97 95       	ror	r25
    1f5a:	87 95       	ror	r24
    1f5c:	08 95       	ret

00001f5e <__divsf3>:
    1f5e:	0c d0       	rcall	.+24     	; 0x1f78 <__divsf3x>
    1f60:	eb c0       	rjmp	.+470    	; 0x2138 <__fp_round>
    1f62:	e3 d0       	rcall	.+454    	; 0x212a <__fp_pscB>
    1f64:	40 f0       	brcs	.+16     	; 0x1f76 <__divsf3+0x18>
    1f66:	da d0       	rcall	.+436    	; 0x211c <__fp_pscA>
    1f68:	30 f0       	brcs	.+12     	; 0x1f76 <__divsf3+0x18>
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <__divsf3+0x16>
    1f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <__divsf3+0x18>
    1f70:	cc c0       	rjmp	.+408    	; 0x210a <__fp_inf>
    1f72:	51 11       	cpse	r21, r1
    1f74:	15 c1       	rjmp	.+554    	; 0x21a0 <__fp_szero>
    1f76:	cf c0       	rjmp	.+414    	; 0x2116 <__fp_nan>

00001f78 <__divsf3x>:
    1f78:	f0 d0       	rcall	.+480    	; 0x215a <__fp_split3>
    1f7a:	98 f3       	brcs	.-26     	; 0x1f62 <__divsf3+0x4>

00001f7c <__divsf3_pse>:
    1f7c:	99 23       	and	r25, r25
    1f7e:	c9 f3       	breq	.-14     	; 0x1f72 <__divsf3+0x14>
    1f80:	55 23       	and	r21, r21
    1f82:	b1 f3       	breq	.-20     	; 0x1f70 <__divsf3+0x12>
    1f84:	95 1b       	sub	r25, r21
    1f86:	55 0b       	sbc	r21, r21
    1f88:	bb 27       	eor	r27, r27
    1f8a:	aa 27       	eor	r26, r26
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	38 f0       	brcs	.+14     	; 0x1fa2 <__divsf3_pse+0x26>
    1f94:	9f 5f       	subi	r25, 0xFF	; 255
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	44 1f       	adc	r20, r20
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	a9 f3       	breq	.-22     	; 0x1f8c <__divsf3_pse+0x10>
    1fa2:	33 d0       	rcall	.+102    	; 0x200a <__divsf3_pse+0x8e>
    1fa4:	0e 2e       	mov	r0, r30
    1fa6:	3a f0       	brmi	.+14     	; 0x1fb6 <__divsf3_pse+0x3a>
    1fa8:	e0 e8       	ldi	r30, 0x80	; 128
    1faa:	30 d0       	rcall	.+96     	; 0x200c <__divsf3_pse+0x90>
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	e6 95       	lsr	r30
    1fb2:	00 1c       	adc	r0, r0
    1fb4:	ca f7       	brpl	.-14     	; 0x1fa8 <__divsf3_pse+0x2c>
    1fb6:	29 d0       	rcall	.+82     	; 0x200a <__divsf3_pse+0x8e>
    1fb8:	fe 2f       	mov	r31, r30
    1fba:	27 d0       	rcall	.+78     	; 0x200a <__divsf3_pse+0x8e>
    1fbc:	66 0f       	add	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	26 17       	cp	r18, r22
    1fc6:	37 07       	cpc	r19, r23
    1fc8:	48 07       	cpc	r20, r24
    1fca:	ab 07       	cpc	r26, r27
    1fcc:	b0 e8       	ldi	r27, 0x80	; 128
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <__divsf3_pse+0x56>
    1fd0:	bb 0b       	sbc	r27, r27
    1fd2:	80 2d       	mov	r24, r0
    1fd4:	bf 01       	movw	r22, r30
    1fd6:	ff 27       	eor	r31, r31
    1fd8:	93 58       	subi	r25, 0x83	; 131
    1fda:	5f 4f       	sbci	r21, 0xFF	; 255
    1fdc:	2a f0       	brmi	.+10     	; 0x1fe8 <__divsf3_pse+0x6c>
    1fde:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe0:	51 05       	cpc	r21, r1
    1fe2:	68 f0       	brcs	.+26     	; 0x1ffe <__divsf3_pse+0x82>
    1fe4:	92 c0       	rjmp	.+292    	; 0x210a <__fp_inf>
    1fe6:	dc c0       	rjmp	.+440    	; 0x21a0 <__fp_szero>
    1fe8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fea:	ec f3       	brlt	.-6      	; 0x1fe6 <__divsf3_pse+0x6a>
    1fec:	98 3e       	cpi	r25, 0xE8	; 232
    1fee:	dc f3       	brlt	.-10     	; 0x1fe6 <__divsf3_pse+0x6a>
    1ff0:	86 95       	lsr	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	f7 95       	ror	r31
    1ffa:	9f 5f       	subi	r25, 0xFF	; 255
    1ffc:	c9 f7       	brne	.-14     	; 0x1ff0 <__divsf3_pse+0x74>
    1ffe:	88 0f       	add	r24, r24
    2000:	91 1d       	adc	r25, r1
    2002:	96 95       	lsr	r25
    2004:	87 95       	ror	r24
    2006:	97 f9       	bld	r25, 7
    2008:	08 95       	ret
    200a:	e1 e0       	ldi	r30, 0x01	; 1
    200c:	66 0f       	add	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	88 1f       	adc	r24, r24
    2012:	bb 1f       	adc	r27, r27
    2014:	62 17       	cp	r22, r18
    2016:	73 07       	cpc	r23, r19
    2018:	84 07       	cpc	r24, r20
    201a:	ba 07       	cpc	r27, r26
    201c:	20 f0       	brcs	.+8      	; 0x2026 <__divsf3_pse+0xaa>
    201e:	62 1b       	sub	r22, r18
    2020:	73 0b       	sbc	r23, r19
    2022:	84 0b       	sbc	r24, r20
    2024:	ba 0b       	sbc	r27, r26
    2026:	ee 1f       	adc	r30, r30
    2028:	88 f7       	brcc	.-30     	; 0x200c <__divsf3_pse+0x90>
    202a:	e0 95       	com	r30
    202c:	08 95       	ret

0000202e <__fixsfsi>:
    202e:	04 d0       	rcall	.+8      	; 0x2038 <__fixunssfsi>
    2030:	68 94       	set
    2032:	b1 11       	cpse	r27, r1
    2034:	b5 c0       	rjmp	.+362    	; 0x21a0 <__fp_szero>
    2036:	08 95       	ret

00002038 <__fixunssfsi>:
    2038:	98 d0       	rcall	.+304    	; 0x216a <__fp_splitA>
    203a:	88 f0       	brcs	.+34     	; 0x205e <__fixunssfsi+0x26>
    203c:	9f 57       	subi	r25, 0x7F	; 127
    203e:	90 f0       	brcs	.+36     	; 0x2064 <__fixunssfsi+0x2c>
    2040:	b9 2f       	mov	r27, r25
    2042:	99 27       	eor	r25, r25
    2044:	b7 51       	subi	r27, 0x17	; 23
    2046:	a0 f0       	brcs	.+40     	; 0x2070 <__fixunssfsi+0x38>
    2048:	d1 f0       	breq	.+52     	; 0x207e <__fixunssfsi+0x46>
    204a:	66 0f       	add	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	88 1f       	adc	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	1a f0       	brmi	.+6      	; 0x205a <__fixunssfsi+0x22>
    2054:	ba 95       	dec	r27
    2056:	c9 f7       	brne	.-14     	; 0x204a <__fixunssfsi+0x12>
    2058:	12 c0       	rjmp	.+36     	; 0x207e <__fixunssfsi+0x46>
    205a:	b1 30       	cpi	r27, 0x01	; 1
    205c:	81 f0       	breq	.+32     	; 0x207e <__fixunssfsi+0x46>
    205e:	9f d0       	rcall	.+318    	; 0x219e <__fp_zero>
    2060:	b1 e0       	ldi	r27, 0x01	; 1
    2062:	08 95       	ret
    2064:	9c c0       	rjmp	.+312    	; 0x219e <__fp_zero>
    2066:	67 2f       	mov	r22, r23
    2068:	78 2f       	mov	r23, r24
    206a:	88 27       	eor	r24, r24
    206c:	b8 5f       	subi	r27, 0xF8	; 248
    206e:	39 f0       	breq	.+14     	; 0x207e <__fixunssfsi+0x46>
    2070:	b9 3f       	cpi	r27, 0xF9	; 249
    2072:	cc f3       	brlt	.-14     	; 0x2066 <__fixunssfsi+0x2e>
    2074:	86 95       	lsr	r24
    2076:	77 95       	ror	r23
    2078:	67 95       	ror	r22
    207a:	b3 95       	inc	r27
    207c:	d9 f7       	brne	.-10     	; 0x2074 <__fixunssfsi+0x3c>
    207e:	3e f4       	brtc	.+14     	; 0x208e <__fixunssfsi+0x56>
    2080:	90 95       	com	r25
    2082:	80 95       	com	r24
    2084:	70 95       	com	r23
    2086:	61 95       	neg	r22
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	8f 4f       	sbci	r24, 0xFF	; 255
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	08 95       	ret

00002090 <__floatunsisf>:
    2090:	e8 94       	clt
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <__floatsisf+0x12>

00002094 <__floatsisf>:
    2094:	97 fb       	bst	r25, 7
    2096:	3e f4       	brtc	.+14     	; 0x20a6 <__floatsisf+0x12>
    2098:	90 95       	com	r25
    209a:	80 95       	com	r24
    209c:	70 95       	com	r23
    209e:	61 95       	neg	r22
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	8f 4f       	sbci	r24, 0xFF	; 255
    20a4:	9f 4f       	sbci	r25, 0xFF	; 255
    20a6:	99 23       	and	r25, r25
    20a8:	a9 f0       	breq	.+42     	; 0x20d4 <__floatsisf+0x40>
    20aa:	f9 2f       	mov	r31, r25
    20ac:	96 e9       	ldi	r25, 0x96	; 150
    20ae:	bb 27       	eor	r27, r27
    20b0:	93 95       	inc	r25
    20b2:	f6 95       	lsr	r31
    20b4:	87 95       	ror	r24
    20b6:	77 95       	ror	r23
    20b8:	67 95       	ror	r22
    20ba:	b7 95       	ror	r27
    20bc:	f1 11       	cpse	r31, r1
    20be:	f8 cf       	rjmp	.-16     	; 0x20b0 <__floatsisf+0x1c>
    20c0:	fa f4       	brpl	.+62     	; 0x2100 <__floatsisf+0x6c>
    20c2:	bb 0f       	add	r27, r27
    20c4:	11 f4       	brne	.+4      	; 0x20ca <__floatsisf+0x36>
    20c6:	60 ff       	sbrs	r22, 0
    20c8:	1b c0       	rjmp	.+54     	; 0x2100 <__floatsisf+0x6c>
    20ca:	6f 5f       	subi	r22, 0xFF	; 255
    20cc:	7f 4f       	sbci	r23, 0xFF	; 255
    20ce:	8f 4f       	sbci	r24, 0xFF	; 255
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <__floatsisf+0x6c>
    20d4:	88 23       	and	r24, r24
    20d6:	11 f0       	breq	.+4      	; 0x20dc <__floatsisf+0x48>
    20d8:	96 e9       	ldi	r25, 0x96	; 150
    20da:	11 c0       	rjmp	.+34     	; 0x20fe <__floatsisf+0x6a>
    20dc:	77 23       	and	r23, r23
    20de:	21 f0       	breq	.+8      	; 0x20e8 <__floatsisf+0x54>
    20e0:	9e e8       	ldi	r25, 0x8E	; 142
    20e2:	87 2f       	mov	r24, r23
    20e4:	76 2f       	mov	r23, r22
    20e6:	05 c0       	rjmp	.+10     	; 0x20f2 <__floatsisf+0x5e>
    20e8:	66 23       	and	r22, r22
    20ea:	71 f0       	breq	.+28     	; 0x2108 <__floatsisf+0x74>
    20ec:	96 e8       	ldi	r25, 0x86	; 134
    20ee:	86 2f       	mov	r24, r22
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	2a f0       	brmi	.+10     	; 0x2100 <__floatsisf+0x6c>
    20f6:	9a 95       	dec	r25
    20f8:	66 0f       	add	r22, r22
    20fa:	77 1f       	adc	r23, r23
    20fc:	88 1f       	adc	r24, r24
    20fe:	da f7       	brpl	.-10     	; 0x20f6 <__floatsisf+0x62>
    2100:	88 0f       	add	r24, r24
    2102:	96 95       	lsr	r25
    2104:	87 95       	ror	r24
    2106:	97 f9       	bld	r25, 7
    2108:	08 95       	ret

0000210a <__fp_inf>:
    210a:	97 f9       	bld	r25, 7
    210c:	9f 67       	ori	r25, 0x7F	; 127
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	08 95       	ret

00002116 <__fp_nan>:
    2116:	9f ef       	ldi	r25, 0xFF	; 255
    2118:	80 ec       	ldi	r24, 0xC0	; 192
    211a:	08 95       	ret

0000211c <__fp_pscA>:
    211c:	00 24       	eor	r0, r0
    211e:	0a 94       	dec	r0
    2120:	16 16       	cp	r1, r22
    2122:	17 06       	cpc	r1, r23
    2124:	18 06       	cpc	r1, r24
    2126:	09 06       	cpc	r0, r25
    2128:	08 95       	ret

0000212a <__fp_pscB>:
    212a:	00 24       	eor	r0, r0
    212c:	0a 94       	dec	r0
    212e:	12 16       	cp	r1, r18
    2130:	13 06       	cpc	r1, r19
    2132:	14 06       	cpc	r1, r20
    2134:	05 06       	cpc	r0, r21
    2136:	08 95       	ret

00002138 <__fp_round>:
    2138:	09 2e       	mov	r0, r25
    213a:	03 94       	inc	r0
    213c:	00 0c       	add	r0, r0
    213e:	11 f4       	brne	.+4      	; 0x2144 <__fp_round+0xc>
    2140:	88 23       	and	r24, r24
    2142:	52 f0       	brmi	.+20     	; 0x2158 <__fp_round+0x20>
    2144:	bb 0f       	add	r27, r27
    2146:	40 f4       	brcc	.+16     	; 0x2158 <__fp_round+0x20>
    2148:	bf 2b       	or	r27, r31
    214a:	11 f4       	brne	.+4      	; 0x2150 <__fp_round+0x18>
    214c:	60 ff       	sbrs	r22, 0
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <__fp_round+0x20>
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	8f 4f       	sbci	r24, 0xFF	; 255
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	08 95       	ret

0000215a <__fp_split3>:
    215a:	57 fd       	sbrc	r21, 7
    215c:	90 58       	subi	r25, 0x80	; 128
    215e:	44 0f       	add	r20, r20
    2160:	55 1f       	adc	r21, r21
    2162:	59 f0       	breq	.+22     	; 0x217a <__fp_splitA+0x10>
    2164:	5f 3f       	cpi	r21, 0xFF	; 255
    2166:	71 f0       	breq	.+28     	; 0x2184 <__fp_splitA+0x1a>
    2168:	47 95       	ror	r20

0000216a <__fp_splitA>:
    216a:	88 0f       	add	r24, r24
    216c:	97 fb       	bst	r25, 7
    216e:	99 1f       	adc	r25, r25
    2170:	61 f0       	breq	.+24     	; 0x218a <__fp_splitA+0x20>
    2172:	9f 3f       	cpi	r25, 0xFF	; 255
    2174:	79 f0       	breq	.+30     	; 0x2194 <__fp_splitA+0x2a>
    2176:	87 95       	ror	r24
    2178:	08 95       	ret
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	55 1f       	adc	r21, r21
    2182:	f2 cf       	rjmp	.-28     	; 0x2168 <__fp_split3+0xe>
    2184:	46 95       	lsr	r20
    2186:	f1 df       	rcall	.-30     	; 0x216a <__fp_splitA>
    2188:	08 c0       	rjmp	.+16     	; 0x219a <__fp_splitA+0x30>
    218a:	16 16       	cp	r1, r22
    218c:	17 06       	cpc	r1, r23
    218e:	18 06       	cpc	r1, r24
    2190:	99 1f       	adc	r25, r25
    2192:	f1 cf       	rjmp	.-30     	; 0x2176 <__fp_splitA+0xc>
    2194:	86 95       	lsr	r24
    2196:	71 05       	cpc	r23, r1
    2198:	61 05       	cpc	r22, r1
    219a:	08 94       	sec
    219c:	08 95       	ret

0000219e <__fp_zero>:
    219e:	e8 94       	clt

000021a0 <__fp_szero>:
    21a0:	bb 27       	eor	r27, r27
    21a2:	66 27       	eor	r22, r22
    21a4:	77 27       	eor	r23, r23
    21a6:	cb 01       	movw	r24, r22
    21a8:	97 f9       	bld	r25, 7
    21aa:	08 95       	ret

000021ac <__mulsf3>:
    21ac:	0b d0       	rcall	.+22     	; 0x21c4 <__mulsf3x>
    21ae:	c4 cf       	rjmp	.-120    	; 0x2138 <__fp_round>
    21b0:	b5 df       	rcall	.-150    	; 0x211c <__fp_pscA>
    21b2:	28 f0       	brcs	.+10     	; 0x21be <__mulsf3+0x12>
    21b4:	ba df       	rcall	.-140    	; 0x212a <__fp_pscB>
    21b6:	18 f0       	brcs	.+6      	; 0x21be <__mulsf3+0x12>
    21b8:	95 23       	and	r25, r21
    21ba:	09 f0       	breq	.+2      	; 0x21be <__mulsf3+0x12>
    21bc:	a6 cf       	rjmp	.-180    	; 0x210a <__fp_inf>
    21be:	ab cf       	rjmp	.-170    	; 0x2116 <__fp_nan>
    21c0:	11 24       	eor	r1, r1
    21c2:	ee cf       	rjmp	.-36     	; 0x21a0 <__fp_szero>

000021c4 <__mulsf3x>:
    21c4:	ca df       	rcall	.-108    	; 0x215a <__fp_split3>
    21c6:	a0 f3       	brcs	.-24     	; 0x21b0 <__mulsf3+0x4>

000021c8 <__mulsf3_pse>:
    21c8:	95 9f       	mul	r25, r21
    21ca:	d1 f3       	breq	.-12     	; 0x21c0 <__mulsf3+0x14>
    21cc:	95 0f       	add	r25, r21
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	55 1f       	adc	r21, r21
    21d2:	62 9f       	mul	r22, r18
    21d4:	f0 01       	movw	r30, r0
    21d6:	72 9f       	mul	r23, r18
    21d8:	bb 27       	eor	r27, r27
    21da:	f0 0d       	add	r31, r0
    21dc:	b1 1d       	adc	r27, r1
    21de:	63 9f       	mul	r22, r19
    21e0:	aa 27       	eor	r26, r26
    21e2:	f0 0d       	add	r31, r0
    21e4:	b1 1d       	adc	r27, r1
    21e6:	aa 1f       	adc	r26, r26
    21e8:	64 9f       	mul	r22, r20
    21ea:	66 27       	eor	r22, r22
    21ec:	b0 0d       	add	r27, r0
    21ee:	a1 1d       	adc	r26, r1
    21f0:	66 1f       	adc	r22, r22
    21f2:	82 9f       	mul	r24, r18
    21f4:	22 27       	eor	r18, r18
    21f6:	b0 0d       	add	r27, r0
    21f8:	a1 1d       	adc	r26, r1
    21fa:	62 1f       	adc	r22, r18
    21fc:	73 9f       	mul	r23, r19
    21fe:	b0 0d       	add	r27, r0
    2200:	a1 1d       	adc	r26, r1
    2202:	62 1f       	adc	r22, r18
    2204:	83 9f       	mul	r24, r19
    2206:	a0 0d       	add	r26, r0
    2208:	61 1d       	adc	r22, r1
    220a:	22 1f       	adc	r18, r18
    220c:	74 9f       	mul	r23, r20
    220e:	33 27       	eor	r19, r19
    2210:	a0 0d       	add	r26, r0
    2212:	61 1d       	adc	r22, r1
    2214:	23 1f       	adc	r18, r19
    2216:	84 9f       	mul	r24, r20
    2218:	60 0d       	add	r22, r0
    221a:	21 1d       	adc	r18, r1
    221c:	82 2f       	mov	r24, r18
    221e:	76 2f       	mov	r23, r22
    2220:	6a 2f       	mov	r22, r26
    2222:	11 24       	eor	r1, r1
    2224:	9f 57       	subi	r25, 0x7F	; 127
    2226:	50 40       	sbci	r21, 0x00	; 0
    2228:	8a f0       	brmi	.+34     	; 0x224c <__mulsf3_pse+0x84>
    222a:	e1 f0       	breq	.+56     	; 0x2264 <__mulsf3_pse+0x9c>
    222c:	88 23       	and	r24, r24
    222e:	4a f0       	brmi	.+18     	; 0x2242 <__mulsf3_pse+0x7a>
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	bb 1f       	adc	r27, r27
    2236:	66 1f       	adc	r22, r22
    2238:	77 1f       	adc	r23, r23
    223a:	88 1f       	adc	r24, r24
    223c:	91 50       	subi	r25, 0x01	; 1
    223e:	50 40       	sbci	r21, 0x00	; 0
    2240:	a9 f7       	brne	.-22     	; 0x222c <__mulsf3_pse+0x64>
    2242:	9e 3f       	cpi	r25, 0xFE	; 254
    2244:	51 05       	cpc	r21, r1
    2246:	70 f0       	brcs	.+28     	; 0x2264 <__mulsf3_pse+0x9c>
    2248:	60 cf       	rjmp	.-320    	; 0x210a <__fp_inf>
    224a:	aa cf       	rjmp	.-172    	; 0x21a0 <__fp_szero>
    224c:	5f 3f       	cpi	r21, 0xFF	; 255
    224e:	ec f3       	brlt	.-6      	; 0x224a <__mulsf3_pse+0x82>
    2250:	98 3e       	cpi	r25, 0xE8	; 232
    2252:	dc f3       	brlt	.-10     	; 0x224a <__mulsf3_pse+0x82>
    2254:	86 95       	lsr	r24
    2256:	77 95       	ror	r23
    2258:	67 95       	ror	r22
    225a:	b7 95       	ror	r27
    225c:	f7 95       	ror	r31
    225e:	e7 95       	ror	r30
    2260:	9f 5f       	subi	r25, 0xFF	; 255
    2262:	c1 f7       	brne	.-16     	; 0x2254 <__mulsf3_pse+0x8c>
    2264:	fe 2b       	or	r31, r30
    2266:	88 0f       	add	r24, r24
    2268:	91 1d       	adc	r25, r1
    226a:	96 95       	lsr	r25
    226c:	87 95       	ror	r24
    226e:	97 f9       	bld	r25, 7
    2270:	08 95       	ret

00002272 <__divmodhi4>:
    2272:	97 fb       	bst	r25, 7
    2274:	07 2e       	mov	r0, r23
    2276:	16 f4       	brtc	.+4      	; 0x227c <__divmodhi4+0xa>
    2278:	00 94       	com	r0
    227a:	06 d0       	rcall	.+12     	; 0x2288 <__divmodhi4_neg1>
    227c:	77 fd       	sbrc	r23, 7
    227e:	08 d0       	rcall	.+16     	; 0x2290 <__divmodhi4_neg2>
    2280:	0b d0       	rcall	.+22     	; 0x2298 <__udivmodhi4>
    2282:	07 fc       	sbrc	r0, 7
    2284:	05 d0       	rcall	.+10     	; 0x2290 <__divmodhi4_neg2>
    2286:	3e f4       	brtc	.+14     	; 0x2296 <__divmodhi4_exit>

00002288 <__divmodhi4_neg1>:
    2288:	90 95       	com	r25
    228a:	81 95       	neg	r24
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	08 95       	ret

00002290 <__divmodhi4_neg2>:
    2290:	70 95       	com	r23
    2292:	61 95       	neg	r22
    2294:	7f 4f       	sbci	r23, 0xFF	; 255

00002296 <__divmodhi4_exit>:
    2296:	08 95       	ret

00002298 <__udivmodhi4>:
    2298:	aa 1b       	sub	r26, r26
    229a:	bb 1b       	sub	r27, r27
    229c:	51 e1       	ldi	r21, 0x11	; 17
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <__udivmodhi4_ep>

000022a0 <__udivmodhi4_loop>:
    22a0:	aa 1f       	adc	r26, r26
    22a2:	bb 1f       	adc	r27, r27
    22a4:	a6 17       	cp	r26, r22
    22a6:	b7 07       	cpc	r27, r23
    22a8:	10 f0       	brcs	.+4      	; 0x22ae <__udivmodhi4_ep>
    22aa:	a6 1b       	sub	r26, r22
    22ac:	b7 0b       	sbc	r27, r23

000022ae <__udivmodhi4_ep>:
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	5a 95       	dec	r21
    22b4:	a9 f7       	brne	.-22     	; 0x22a0 <__udivmodhi4_loop>
    22b6:	80 95       	com	r24
    22b8:	90 95       	com	r25
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
