
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  0000251c  000025b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000251c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  008001fe  008001fe  000026ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  000026de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034d9  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d77  00000000  00000000  00005dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d8d  00000000  00000000  00006b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  000098d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d2f  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001930  00000000  00000000  0001abcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0001c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004090  00000000  00000000  0001c6af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_19>
      50:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c0       	rjmp	.+74     	; 0xcc <__vector_32>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3f       	cpi	r26, 0xFE	; 254
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ef       	ldi	r26, 0xFE	; 254
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 32       	cpi	r26, 0x26	; 38
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 9e 09 	call	0x133c	; 0x133c <main>
      c6:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_32>:
#include <stdint.h>
#include <string.h>


ISR(TIMER3_COMPA_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	8f 93       	push	r24
    step=step+1;
      d8:	80 91 19 03 	lds	r24, 0x0319
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 19 03 	sts	0x0319, r24
}
      e2:	8f 91       	pop	r24
      e4:	0f 90       	pop	r0
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	0f 90       	pop	r0
      ea:	1f 90       	pop	r1
      ec:	18 95       	reti

000000ee <countInit>:


void countInit(int req_delay)
{
    OCR3A =  req_delay;
      ee:	90 93 99 00 	sts	0x0099, r25
      f2:	80 93 98 00 	sts	0x0098, r24
	TCNT3 = 0;
      f6:	10 92 95 00 	sts	0x0095, r1
      fa:	10 92 94 00 	sts	0x0094, r1
    TIMSK3 = (1<<OCIE3A);
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	80 93 71 00 	sts	0x0071, r24
	TCCR3B = (1<<WGM32)|(1<<CS32)|(1<<CS30); // CTC-mode 4 to compare with OCR1A, 
     104:	8d e0       	ldi	r24, 0x0D	; 13
     106:	80 93 91 00 	sts	0x0091, r24
	
    
	step = 0;
     10a:	10 92 19 03 	sts	0x0319, r1
     10e:	08 95       	ret

00000110 <resetCounter>:
	
}

void resetCounter(void)
{
	 TCCR3B = (0<<CS32)|(0<<CS30);
     110:	10 92 91 00 	sts	0x0091, r1
     114:	08 95       	ret

00000116 <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange, int currentEsc)
{
     116:	2f 92       	push	r2
     118:	3f 92       	push	r3
     11a:	4f 92       	push	r4
     11c:	5f 92       	push	r5
     11e:	6f 92       	push	r6
     120:	7f 92       	push	r7
     122:	8f 92       	push	r8
     124:	9f 92       	push	r9
     126:	af 92       	push	r10
     128:	bf 92       	push	r11
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	ca 5b       	subi	r28, 0xBA	; 186
     140:	d2 40       	sbci	r29, 0x02	; 2
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	7b 01       	movw	r14, r22
     14e:	6a 01       	movw	r12, r20
	
	int fullBatteryAdjust = 11;
	
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     150:	29 e0       	ldi	r18, 0x09	; 9
     152:	e0 e0       	ldi	r30, 0x00	; 0
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	de 01       	movw	r26, r28
     158:	11 96       	adiw	r26, 0x01	; 1
     15a:	01 90       	ld	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	2a 95       	dec	r18
     160:	e1 f7       	brne	.-8      	; 0x15a <FLC_speed+0x44>
	struct io_type steering; strcpy(steering.name, "steering");
     162:	29 e0       	ldi	r18, 0x09	; 9
     164:	e9 e0       	ldi	r30, 0x09	; 9
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	de 01       	movw	r26, r28
     16a:	51 96       	adiw	r26, 0x11	; 17
     16c:	01 90       	ld	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	2a 95       	dec	r18
     172:	e1 f7       	brne	.-8      	; 0x16c <FLC_speed+0x56>
	struct io_type esc; strcpy(esc.name, "esc");
     174:	05 e6       	ldi	r16, 0x65	; 101
     176:	13 e7       	ldi	r17, 0x73	; 115
     178:	23 e6       	ldi	r18, 0x63	; 99
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	09 a3       	std	Y+33, r16	; 0x21
     17e:	1a a3       	std	Y+34, r17	; 0x22
     180:	2b a3       	std	Y+35, r18	; 0x23
     182:	3c a3       	std	Y+36, r19	; 0x24

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     184:	26 e0       	ldi	r18, 0x06	; 6
     186:	e2 e1       	ldi	r30, 0x12	; 18
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	de 01       	movw	r26, r28
     18c:	d1 96       	adiw	r26, 0x31	; 49
     18e:	01 90       	ld	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	2a 95       	dec	r18
     194:	e1 f7       	brne	.-8      	; 0x18e <FLC_speed+0x78>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     196:	87 3e       	cpi	r24, 0xE7	; 231
     198:	07 e0       	ldi	r16, 0x07	; 7
     19a:	90 07       	cpc	r25, r16
     19c:	2c f4       	brge	.+10     	; 0x1a8 <FLC_speed+0x92>
		steering.value = 202;
     19e:	8a ec       	ldi	r24, 0xCA	; 202
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	9c 8f       	std	Y+28, r25	; 0x1c
     1a4:	8b 8f       	std	Y+27, r24	; 0x1b
     1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <FLC_speed+0xb0>
	}
	else if (currentServo>=MAXRIGHT)
     1a8:	84 3e       	cpi	r24, 0xE4	; 228
     1aa:	1c e0       	ldi	r17, 0x0C	; 12
     1ac:	91 07       	cpc	r25, r17
     1ae:	2c f0       	brlt	.+10     	; 0x1ba <FLC_speed+0xa4>
	{
		steering.value = 330;
     1b0:	8a e4       	ldi	r24, 0x4A	; 74
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	9c 8f       	std	Y+28, r25	; 0x1c
     1b6:	8b 8f       	std	Y+27, r24	; 0x1b
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <FLC_speed+0xb0>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     1ba:	6a e0       	ldi	r22, 0x0A	; 10
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divmodhi4>
     1c2:	7c 8f       	std	Y+28, r23	; 0x1c
     1c4:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// Variable assigned its reference value
	if (currentEsc<2780)
     1c6:	2c ed       	ldi	r18, 0xDC	; 220
     1c8:	c2 16       	cp	r12, r18
     1ca:	2a e0       	ldi	r18, 0x0A	; 10
     1cc:	d2 06       	cpc	r13, r18
     1ce:	2c f4       	brge	.+10     	; 0x1da <FLC_speed+0xc4>
	{
		esc.value = 2780;
     1d0:	8c ed       	ldi	r24, 0xDC	; 220
     1d2:	9a e0       	ldi	r25, 0x0A	; 10
     1d4:	9c a7       	std	Y+44, r25	; 0x2c
     1d6:	8b a7       	std	Y+43, r24	; 0x2b
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <FLC_speed+0xdc>
	}
	else if (currentEsc>MAXESC)
     1da:	43 e2       	ldi	r20, 0x23	; 35
     1dc:	c4 16       	cp	r12, r20
     1de:	4b e0       	ldi	r20, 0x0B	; 11
     1e0:	d4 06       	cpc	r13, r20
     1e2:	2c f0       	brlt	.+10     	; 0x1ee <FLC_speed+0xd8>
	{
		esc.value = MAXESC;
     1e4:	82 e2       	ldi	r24, 0x22	; 34
     1e6:	9b e0       	ldi	r25, 0x0B	; 11
     1e8:	9c a7       	std	Y+44, r25	; 0x2c
     1ea:	8b a7       	std	Y+43, r24	; 0x2b
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <FLC_speed+0xdc>
	}
	else
	{
		esc.value = currentEsc;
     1ee:	dc a6       	std	Y+44, r13	; 0x2c
     1f0:	cb a6       	std	Y+43, r12	; 0x2b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     1f2:	ff 20       	and	r15, r15
     1f4:	1c f4       	brge	.+6      	; 0x1fc <FLC_speed+0xe6>
	{
		distance.value = MIN_DISTANCE;
     1f6:	1c 86       	std	Y+12, r1	; 0x0c
     1f8:	1b 86       	std	Y+11, r1	; 0x0b
     1fa:	0b c0       	rjmp	.+22     	; 0x212 <FLC_speed+0xfc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     1fc:	6c e4       	ldi	r22, 0x4C	; 76
     1fe:	e6 16       	cp	r14, r22
     200:	f1 04       	cpc	r15, r1
     202:	2c f0       	brlt	.+10     	; 0x20e <FLC_speed+0xf8>
	{
		distance.value = MAX_DISTANCE;
     204:	8b e4       	ldi	r24, 0x4B	; 75
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	9c 87       	std	Y+12, r25	; 0x0c
     20a:	8b 87       	std	Y+11, r24	; 0x0b
     20c:	02 c0       	rjmp	.+4      	; 0x212 <FLC_speed+0xfc>
	}
	else
	{
		distance.value = midSonicRange;
     20e:	fc 86       	std	Y+12, r15	; 0x0c
     210:	eb 86       	std	Y+11, r14	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type maxLeft;
	MATLAB_MF(&maxLeft, "maxLeft", 201, 202, 205, 230);
     212:	0f 2e       	mov	r0, r31
     214:	f6 ee       	ldi	r31, 0xE6	; 230
     216:	ef 2e       	mov	r14, r31
     218:	f1 2c       	mov	r15, r1
     21a:	f0 2d       	mov	r31, r0
     21c:	0d ec       	ldi	r16, 0xCD	; 205
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	2a ec       	ldi	r18, 0xCA	; 202
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	49 ec       	ldi	r20, 0xC9	; 201
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	68 e1       	ldi	r22, 0x18	; 24
     22a:	71 e0       	ldi	r23, 0x01	; 1
     22c:	ce 01       	movw	r24, r28
     22e:	8f 5b       	subi	r24, 0xBF	; 191
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	8a d6       	rcall	.+3348   	; 0xf48 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 205, 230, 237, 262);
     234:	0f 2e       	mov	r0, r31
     236:	f6 e0       	ldi	r31, 0x06	; 6
     238:	ef 2e       	mov	r14, r31
     23a:	ff 24       	eor	r15, r15
     23c:	f3 94       	inc	r15
     23e:	f0 2d       	mov	r31, r0
     240:	0d ee       	ldi	r16, 0xED	; 237
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	26 ee       	ldi	r18, 0xE6	; 230
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	4d ec       	ldi	r20, 0xCD	; 205
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	60 e2       	ldi	r22, 0x20	; 32
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	ce 01       	movw	r24, r28
     252:	89 5a       	subi	r24, 0xA9	; 169
     254:	9f 4f       	sbci	r25, 0xFF	; 255
     256:	78 d6       	rcall	.+3312   	; 0xf48 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 236, 266, 266, 296);
     258:	0f 2e       	mov	r0, r31
     25a:	f8 e2       	ldi	r31, 0x28	; 40
     25c:	ef 2e       	mov	r14, r31
     25e:	ff 24       	eor	r15, r15
     260:	f3 94       	inc	r15
     262:	f0 2d       	mov	r31, r0
     264:	0a e0       	ldi	r16, 0x0A	; 10
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	2a e0       	ldi	r18, 0x0A	; 10
     26a:	31 e0       	ldi	r19, 0x01	; 1
     26c:	4c ee       	ldi	r20, 0xEC	; 236
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	65 e2       	ldi	r22, 0x25	; 37
     272:	71 e0       	ldi	r23, 0x01	; 1
     274:	ce 01       	movw	r24, r28
     276:	83 59       	subi	r24, 0x93	; 147
     278:	9f 4f       	sbci	r25, 0xFF	; 255
     27a:	66 d6       	rcall	.+3276   	; 0xf48 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 267, 295, 302, 325);
     27c:	0f 2e       	mov	r0, r31
     27e:	f5 e4       	ldi	r31, 0x45	; 69
     280:	ef 2e       	mov	r14, r31
     282:	ff 24       	eor	r15, r15
     284:	f3 94       	inc	r15
     286:	f0 2d       	mov	r31, r0
     288:	0e e2       	ldi	r16, 0x2E	; 46
     28a:	11 e0       	ldi	r17, 0x01	; 1
     28c:	27 e2       	ldi	r18, 0x27	; 39
     28e:	31 e0       	ldi	r19, 0x01	; 1
     290:	4b e0       	ldi	r20, 0x0B	; 11
     292:	51 e0       	ldi	r21, 0x01	; 1
     294:	6e e2       	ldi	r22, 0x2E	; 46
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	ce 01       	movw	r24, r28
     29a:	8d 57       	subi	r24, 0x7D	; 125
     29c:	9f 4f       	sbci	r25, 0xFF	; 255
     29e:	54 d6       	rcall	.+3240   	; 0xf48 <MATLAB_MF>
	struct mf_type maxRight;
	MATLAB_MF(&maxRight, "maxRight", 301, 325, 330, 331);
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fb e4       	ldi	r31, 0x4B	; 75
     2a4:	ef 2e       	mov	r14, r31
     2a6:	ff 24       	eor	r15, r15
     2a8:	f3 94       	inc	r15
     2aa:	f0 2d       	mov	r31, r0
     2ac:	0a e4       	ldi	r16, 0x4A	; 74
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	25 e4       	ldi	r18, 0x45	; 69
     2b2:	31 e0       	ldi	r19, 0x01	; 1
     2b4:	4d e2       	ldi	r20, 0x2D	; 45
     2b6:	51 e0       	ldi	r21, 0x01	; 1
     2b8:	64 e3       	ldi	r22, 0x34	; 52
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	ce 01       	movw	r24, r28
     2be:	87 56       	subi	r24, 0x67	; 103
     2c0:	9f 4f       	sbci	r25, 0xFF	; 255
     2c2:	42 d6       	rcall	.+3204   	; 0xf48 <MATLAB_MF>
	

	// Linked list for MFs
	steering.membership_functions = &maxLeft;
     2c4:	81 e4       	ldi	r24, 0x41	; 65
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8c 0f       	add	r24, r28
     2ca:	9d 1f       	adc	r25, r29
     2cc:	9e 8f       	std	Y+30, r25	; 0x1e
     2ce:	8d 8f       	std	Y+29, r24	; 0x1d
	maxLeft.next = &left;
     2d0:	a7 e5       	ldi	r26, 0x57	; 87
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ac 0f       	add	r26, r28
     2d6:	bd 1f       	adc	r27, r29
     2d8:	67 96       	adiw	r28, 0x17	; 23
     2da:	bf af       	std	Y+63, r27	; 0x3f
     2dc:	ae af       	std	Y+62, r26	; 0x3e
     2de:	67 97       	sbiw	r28, 0x17	; 23
	left.next = &straight;
     2e0:	ed e6       	ldi	r30, 0x6D	; 109
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	ad 96       	adiw	r28, 0x2d	; 45
     2ea:	ff af       	std	Y+63, r31	; 0x3f
     2ec:	ee af       	std	Y+62, r30	; 0x3e
     2ee:	ad 97       	sbiw	r28, 0x2d	; 45
	straight.next = &right;
     2f0:	03 e8       	ldi	r16, 0x83	; 131
     2f2:	10 e0       	ldi	r17, 0x00	; 0
     2f4:	0c 0f       	add	r16, r28
     2f6:	1d 1f       	adc	r17, r29
     2f8:	cf 57       	subi	r28, 0x7F	; 127
     2fa:	df 4f       	sbci	r29, 0xFF	; 255
     2fc:	19 83       	std	Y+1, r17	; 0x01
     2fe:	08 83       	st	Y, r16
     300:	c1 58       	subi	r28, 0x81	; 129
     302:	d0 40       	sbci	r29, 0x00	; 0
	right.next = & maxRight;
     304:	89 e9       	ldi	r24, 0x99	; 153
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	8c 0f       	add	r24, r28
     30a:	9d 1f       	adc	r25, r29
     30c:	c9 56       	subi	r28, 0x69	; 105
     30e:	df 4f       	sbci	r29, 0xFF	; 255
     310:	99 83       	std	Y+1, r25	; 0x01
     312:	88 83       	st	Y, r24
     314:	c7 59       	subi	r28, 0x97	; 151
     316:	d0 40       	sbci	r29, 0x00	; 0
	maxRight.next = NULL;
     318:	c3 55       	subi	r28, 0x53	; 83
     31a:	df 4f       	sbci	r29, 0xFF	; 255
     31c:	19 82       	std	Y+1, r1	; 0x01
     31e:	18 82       	st	Y, r1
     320:	cd 5a       	subi	r28, 0xAD	; 173
     322:	d0 40       	sbci	r29, 0x00	; 0
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 10, 20);
     324:	0f 2e       	mov	r0, r31
     326:	f4 e1       	ldi	r31, 0x14	; 20
     328:	ef 2e       	mov	r14, r31
     32a:	f1 2c       	mov	r15, r1
     32c:	f0 2d       	mov	r31, r0
     32e:	0a e0       	ldi	r16, 0x0A	; 10
     330:	10 e0       	ldi	r17, 0x00	; 0
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4f ef       	ldi	r20, 0xFF	; 255
     338:	5f ef       	ldi	r21, 0xFF	; 255
     33a:	6d e3       	ldi	r22, 0x3D	; 61
     33c:	71 e0       	ldi	r23, 0x01	; 1
     33e:	46 96       	adiw	r24, 0x16	; 22
     340:	03 d6       	rcall	.+3078   	; 0xf48 <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 10, 30, 30, 50);
     342:	5e 01       	movw	r10, r28
     344:	95 ec       	ldi	r25, 0xC5	; 197
     346:	a9 0e       	add	r10, r25
     348:	b1 1c       	adc	r11, r1
     34a:	0f 2e       	mov	r0, r31
     34c:	f2 e3       	ldi	r31, 0x32	; 50
     34e:	ef 2e       	mov	r14, r31
     350:	f1 2c       	mov	r15, r1
     352:	f0 2d       	mov	r31, r0
     354:	0e e1       	ldi	r16, 0x1E	; 30
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	2e e1       	ldi	r18, 0x1E	; 30
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	4a e0       	ldi	r20, 0x0A	; 10
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	66 e4       	ldi	r22, 0x46	; 70
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	c5 01       	movw	r24, r10
     366:	f0 d5       	rcall	.+3040   	; 0xf48 <MATLAB_MF>
	struct mf_type distant;
	MATLAB_MF(&distant, "distant", 30, 50, 50, 70);
     368:	0f 2e       	mov	r0, r31
     36a:	f6 e4       	ldi	r31, 0x46	; 70
     36c:	ef 2e       	mov	r14, r31
     36e:	f1 2c       	mov	r15, r1
     370:	f0 2d       	mov	r31, r0
     372:	02 e3       	ldi	r16, 0x32	; 50
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	22 e3       	ldi	r18, 0x32	; 50
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4e e1       	ldi	r20, 0x1E	; 30
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	6c e4       	ldi	r22, 0x4C	; 76
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	ce 01       	movw	r24, r28
     384:	85 52       	subi	r24, 0x25	; 37
     386:	9f 4f       	sbci	r25, 0xFF	; 255
     388:	df d5       	rcall	.+3006   	; 0xf48 <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 50, 70, 75, MAX_DISTANCE+1);
     38a:	0f 2e       	mov	r0, r31
     38c:	fc e4       	ldi	r31, 0x4C	; 76
     38e:	ef 2e       	mov	r14, r31
     390:	f1 2c       	mov	r15, r1
     392:	f0 2d       	mov	r31, r0
     394:	0b e4       	ldi	r16, 0x4B	; 75
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	26 e4       	ldi	r18, 0x46	; 70
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	42 e3       	ldi	r20, 0x32	; 50
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	64 e5       	ldi	r22, 0x54	; 84
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	ce 01       	movw	r24, r28
     3a6:	8f 50       	subi	r24, 0x0F	; 15
     3a8:	9f 4f       	sbci	r25, 0xFF	; 255
     3aa:	ce d5       	rcall	.+2972   	; 0xf48 <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     3ac:	af ea       	ldi	r26, 0xAF	; 175
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	ac 0f       	add	r26, r28
     3b2:	bd 1f       	adc	r27, r29
     3b4:	be 87       	std	Y+14, r27	; 0x0e
     3b6:	ad 87       	std	Y+13, r26	; 0x0d
	stopDist.next = &close;
     3b8:	cd 53       	subi	r28, 0x3D	; 61
     3ba:	df 4f       	sbci	r29, 0xFF	; 255
     3bc:	b9 82       	std	Y+1, r11	; 0x01
     3be:	a8 82       	st	Y, r10
     3c0:	c3 5c       	subi	r28, 0xC3	; 195
     3c2:	d0 40       	sbci	r29, 0x00	; 0
	close.next = &distant;
     3c4:	0b ed       	ldi	r16, 0xDB	; 219
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	0c 0f       	add	r16, r28
     3ca:	1d 1f       	adc	r17, r29
     3cc:	f5 01       	movw	r30, r10
     3ce:	15 8b       	std	Z+21, r17	; 0x15
     3d0:	04 8b       	std	Z+20, r16	; 0x14
	distant.next = &faar;
     3d2:	81 ef       	ldi	r24, 0xF1	; 241
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	8c 0f       	add	r24, r28
     3d8:	9d 1f       	adc	r25, r29
     3da:	c1 51       	subi	r28, 0x11	; 17
     3dc:	df 4f       	sbci	r29, 0xFF	; 255
     3de:	99 83       	std	Y+1, r25	; 0x01
     3e0:	88 83       	st	Y, r24
     3e2:	cf 5e       	subi	r28, 0xEF	; 239
     3e4:	d0 40       	sbci	r29, 0x00	; 0
	faar.next = NULL;
     3e6:	cb 5f       	subi	r28, 0xFB	; 251
     3e8:	de 4f       	sbci	r29, 0xFE	; 254
     3ea:	19 82       	std	Y+1, r1	; 0x01
     3ec:	18 82       	st	Y, r1
     3ee:	c5 50       	subi	r28, 0x05	; 5
     3f0:	d1 40       	sbci	r29, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2779, 2780, 2800, 2830);
     3f2:	0f 2e       	mov	r0, r31
     3f4:	fe e0       	ldi	r31, 0x0E	; 14
     3f6:	ef 2e       	mov	r14, r31
     3f8:	fb e0       	ldi	r31, 0x0B	; 11
     3fa:	ff 2e       	mov	r15, r31
     3fc:	f0 2d       	mov	r31, r0
     3fe:	00 ef       	ldi	r16, 0xF0	; 240
     400:	1a e0       	ldi	r17, 0x0A	; 10
     402:	2c ed       	ldi	r18, 0xDC	; 220
     404:	3a e0       	ldi	r19, 0x0A	; 10
     406:	4b ed       	ldi	r20, 0xDB	; 219
     408:	5a e0       	ldi	r21, 0x0A	; 10
     40a:	69 e5       	ldi	r22, 0x59	; 89
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	46 96       	adiw	r24, 0x16	; 22
     410:	9b d5       	rcall	.+2870   	; 0xf48 <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2825, 2835, 2835, 2845);
     412:	0f 2e       	mov	r0, r31
     414:	fd e1       	ldi	r31, 0x1D	; 29
     416:	ef 2e       	mov	r14, r31
     418:	fb e0       	ldi	r31, 0x0B	; 11
     41a:	ff 2e       	mov	r15, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	03 e1       	ldi	r16, 0x13	; 19
     420:	1b e0       	ldi	r17, 0x0B	; 11
     422:	23 e1       	ldi	r18, 0x13	; 19
     424:	3b e0       	ldi	r19, 0x0B	; 11
     426:	49 e0       	ldi	r20, 0x09	; 9
     428:	5b e0       	ldi	r21, 0x0B	; 11
     42a:	63 e7       	ldi	r22, 0x73	; 115
     42c:	71 e0       	ldi	r23, 0x01	; 1
     42e:	ce 01       	movw	r24, r28
     430:	83 5e       	subi	r24, 0xE3	; 227
     432:	9e 4f       	sbci	r25, 0xFE	; 254
     434:	89 d5       	rcall	.+2834   	; 0xf48 <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     436:	0f 2e       	mov	r0, r31
     438:	f2 e2       	ldi	r31, 0x22	; 34
     43a:	ef 2e       	mov	r14, r31
     43c:	fb e0       	ldi	r31, 0x0B	; 11
     43e:	ff 2e       	mov	r15, r31
     440:	f0 2d       	mov	r31, r0
     442:	08 e1       	ldi	r16, 0x18	; 24
     444:	1b e0       	ldi	r17, 0x0B	; 11
     446:	28 e1       	ldi	r18, 0x18	; 24
     448:	3b e0       	ldi	r19, 0x0B	; 11
     44a:	4e e0       	ldi	r20, 0x0E	; 14
     44c:	5b e0       	ldi	r21, 0x0B	; 11
     44e:	61 e6       	ldi	r22, 0x61	; 97
     450:	71 e0       	ldi	r23, 0x01	; 1
     452:	ce 01       	movw	r24, r28
     454:	8d 5c       	subi	r24, 0xCD	; 205
     456:	9e 4f       	sbci	r25, 0xFE	; 254
     458:	77 d5       	rcall	.+2798   	; 0xf48 <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2835, 2845, 2845, 2855);
     45a:	0f 2e       	mov	r0, r31
     45c:	f7 e2       	ldi	r31, 0x27	; 39
     45e:	ef 2e       	mov	r14, r31
     460:	fb e0       	ldi	r31, 0x0B	; 11
     462:	ff 2e       	mov	r15, r31
     464:	f0 2d       	mov	r31, r0
     466:	0d e1       	ldi	r16, 0x1D	; 29
     468:	1b e0       	ldi	r17, 0x0B	; 11
     46a:	2d e1       	ldi	r18, 0x1D	; 29
     46c:	3b e0       	ldi	r19, 0x0B	; 11
     46e:	43 e1       	ldi	r20, 0x13	; 19
     470:	5b e0       	ldi	r21, 0x0B	; 11
     472:	68 e6       	ldi	r22, 0x68	; 104
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	ce 01       	movw	r24, r28
     478:	87 5b       	subi	r24, 0xB7	; 183
     47a:	9e 4f       	sbci	r25, 0xFE	; 254
     47c:	65 d5       	rcall	.+2762   	; 0xf48 <MATLAB_MF>

	// Linked list for MFs
	esc.membership_functions = &neutral;
     47e:	a7 e0       	ldi	r26, 0x07	; 7
     480:	b1 e0       	ldi	r27, 0x01	; 1
     482:	ac 0f       	add	r26, r28
     484:	bd 1f       	adc	r27, r29
     486:	be a7       	std	Y+46, r27	; 0x2e
     488:	ad a7       	std	Y+45, r26	; 0x2d
	neutral.next = &low;
     48a:	ed e1       	ldi	r30, 0x1D	; 29
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	c5 5e       	subi	r28, 0xE5	; 229
     494:	de 4f       	sbci	r29, 0xFE	; 254
     496:	f9 83       	std	Y+1, r31	; 0x01
     498:	e8 83       	st	Y, r30
     49a:	cb 51       	subi	r28, 0x1B	; 27
     49c:	d1 40       	sbci	r29, 0x01	; 1
	low.next = &medium;
     49e:	03 e3       	ldi	r16, 0x33	; 51
     4a0:	11 e0       	ldi	r17, 0x01	; 1
     4a2:	0c 0f       	add	r16, r28
     4a4:	1d 1f       	adc	r17, r29
     4a6:	cf 5c       	subi	r28, 0xCF	; 207
     4a8:	de 4f       	sbci	r29, 0xFE	; 254
     4aa:	19 83       	std	Y+1, r17	; 0x01
     4ac:	08 83       	st	Y, r16
     4ae:	c1 53       	subi	r28, 0x31	; 49
     4b0:	d1 40       	sbci	r29, 0x01	; 1
	medium.next = &high;
     4b2:	89 e4       	ldi	r24, 0x49	; 73
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	8c 0f       	add	r24, r28
     4b8:	9d 1f       	adc	r25, r29
     4ba:	c9 5b       	subi	r28, 0xB9	; 185
     4bc:	de 4f       	sbci	r29, 0xFE	; 254
     4be:	99 83       	std	Y+1, r25	; 0x01
     4c0:	88 83       	st	Y, r24
     4c2:	c7 54       	subi	r28, 0x47	; 71
     4c4:	d1 40       	sbci	r29, 0x01	; 1
	high.next = NULL;
     4c6:	c3 5a       	subi	r28, 0xA3	; 163
     4c8:	de 4f       	sbci	r29, 0xFE	; 254
     4ca:	19 82       	std	Y+1, r1	; 0x01
     4cc:	18 82       	st	Y, r1
     4ce:	cd 55       	subi	r28, 0x5D	; 93
     4d0:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     4d2:	a1 e0       	ldi	r26, 0x01	; 1
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ac 0f       	add	r26, r28
     4d8:	bd 1f       	adc	r27, r29
     4da:	b0 93 1d 03 	sts	0x031D, r27
     4de:	a0 93 1c 03 	sts	0x031C, r26
	distance.next = &steering;
     4e2:	4e 01       	movw	r8, r28
     4e4:	b1 e1       	ldi	r27, 0x11	; 17
     4e6:	8b 0e       	add	r8, r27
     4e8:	91 1c       	adc	r9, r1
     4ea:	98 8a       	std	Y+16, r9	; 0x10
     4ec:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     4ee:	3e 01       	movw	r6, r28
     4f0:	e1 e2       	ldi	r30, 0x21	; 33
     4f2:	6e 0e       	add	r6, r30
     4f4:	71 1c       	adc	r7, r1
     4f6:	78 a2       	std	Y+32, r7	; 0x20
     4f8:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     4fa:	18 aa       	std	Y+48, r1	; 0x30
     4fc:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     4fe:	6e 01       	movw	r12, r28
     500:	f1 e3       	ldi	r31, 0x31	; 49
     502:	cf 0e       	add	r12, r31
     504:	d1 1c       	adc	r13, r1
     506:	d0 92 1b 03 	sts	0x031B, r13
     50a:	c0 92 1a 03 	sts	0x031A, r12
	speed.next = NULL;
     50e:	21 96       	adiw	r28, 0x01	; 1
     510:	1f ae       	std	Y+63, r1	; 0x3f
     512:	1e ae       	std	Y+62, r1	; 0x3e
     514:	21 97       	sbiw	r28, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type zero;
	MATLAB_MF(&zero, "zero", 2779-fullBatteryAdjust, 2780-fullBatteryAdjust, 2802-fullBatteryAdjust, 2830-fullBatteryAdjust);
     516:	2e 01       	movw	r4, r28
     518:	01 ea       	ldi	r16, 0xA1	; 161
     51a:	40 1a       	sub	r4, r16
     51c:	0e ef       	ldi	r16, 0xFE	; 254
     51e:	50 0a       	sbc	r5, r16
     520:	0f 2e       	mov	r0, r31
     522:	f3 e0       	ldi	r31, 0x03	; 3
     524:	ef 2e       	mov	r14, r31
     526:	fb e0       	ldi	r31, 0x0B	; 11
     528:	ff 2e       	mov	r15, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	07 ee       	ldi	r16, 0xE7	; 231
     52e:	1a e0       	ldi	r17, 0x0A	; 10
     530:	21 ed       	ldi	r18, 0xD1	; 209
     532:	3a e0       	ldi	r19, 0x0A	; 10
     534:	40 ed       	ldi	r20, 0xD0	; 208
     536:	5a e0       	ldi	r21, 0x0A	; 10
     538:	6d e6       	ldi	r22, 0x6D	; 109
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	c2 01       	movw	r24, r4
     53e:	04 d5       	rcall	.+2568   	; 0xf48 <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2825-fullBatteryAdjust, 2835-fullBatteryAdjust, 2835-fullBatteryAdjust, 2845-fullBatteryAdjust);
     540:	1e 01       	movw	r2, r28
     542:	1b e8       	ldi	r17, 0x8B	; 139
     544:	21 1a       	sub	r2, r17
     546:	1e ef       	ldi	r17, 0xFE	; 254
     548:	31 0a       	sbc	r3, r17
     54a:	0f 2e       	mov	r0, r31
     54c:	f2 e1       	ldi	r31, 0x12	; 18
     54e:	ef 2e       	mov	r14, r31
     550:	fb e0       	ldi	r31, 0x0B	; 11
     552:	ff 2e       	mov	r15, r31
     554:	f0 2d       	mov	r31, r0
     556:	08 e0       	ldi	r16, 0x08	; 8
     558:	1b e0       	ldi	r17, 0x0B	; 11
     55a:	28 e0       	ldi	r18, 0x08	; 8
     55c:	3b e0       	ldi	r19, 0x0B	; 11
     55e:	4e ef       	ldi	r20, 0xFE	; 254
     560:	5a e0       	ldi	r21, 0x0A	; 10
     562:	62 e7       	ldi	r22, 0x72	; 114
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	c1 01       	movw	r24, r2
     568:	ef d4       	rcall	.+2526   	; 0xf48 <MATLAB_MF>
	struct mf_type average;
	MATLAB_MF(&average, "average", 2828-fullBatteryAdjust, 2838-fullBatteryAdjust, 2838-fullBatteryAdjust, 2848-fullBatteryAdjust);
     56a:	0f 2e       	mov	r0, r31
     56c:	f5 e1       	ldi	r31, 0x15	; 21
     56e:	ef 2e       	mov	r14, r31
     570:	fb e0       	ldi	r31, 0x0B	; 11
     572:	ff 2e       	mov	r15, r31
     574:	f0 2d       	mov	r31, r0
     576:	0b e0       	ldi	r16, 0x0B	; 11
     578:	1b e0       	ldi	r17, 0x0B	; 11
     57a:	2b e0       	ldi	r18, 0x0B	; 11
     57c:	3b e0       	ldi	r19, 0x0B	; 11
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	5b e0       	ldi	r21, 0x0B	; 11
     582:	67 e7       	ldi	r22, 0x77	; 119
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	ce 01       	movw	r24, r28
     588:	85 57       	subi	r24, 0x75	; 117
     58a:	9e 4f       	sbci	r25, 0xFE	; 254
     58c:	dd d4       	rcall	.+2490   	; 0xf48 <MATLAB_MF>
	struct mf_type fast;
	MATLAB_MF(&fast, "fast", 2830-fullBatteryAdjust, 2840-fullBatteryAdjust, 2840-fullBatteryAdjust, 2850-fullBatteryAdjust);
     58e:	0f 2e       	mov	r0, r31
     590:	f7 e1       	ldi	r31, 0x17	; 23
     592:	ef 2e       	mov	r14, r31
     594:	fb e0       	ldi	r31, 0x0B	; 11
     596:	ff 2e       	mov	r15, r31
     598:	f0 2d       	mov	r31, r0
     59a:	0d e0       	ldi	r16, 0x0D	; 13
     59c:	1b e0       	ldi	r17, 0x0B	; 11
     59e:	2d e0       	ldi	r18, 0x0D	; 13
     5a0:	3b e0       	ldi	r19, 0x0B	; 11
     5a2:	43 e0       	ldi	r20, 0x03	; 3
     5a4:	5b e0       	ldi	r21, 0x0B	; 11
     5a6:	6f e7       	ldi	r22, 0x7F	; 127
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	ce 01       	movw	r24, r28
     5ac:	8f 55       	subi	r24, 0x5F	; 95
     5ae:	9e 4f       	sbci	r25, 0xFE	; 254
     5b0:	cb d4       	rcall	.+2454   	; 0xf48 <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &zero;
     5b2:	5e ae       	std	Y+62, r5	; 0x3e
     5b4:	4d ae       	std	Y+61, r4	; 0x3d
	zero.next = &slow;
     5b6:	d2 01       	movw	r26, r4
     5b8:	55 96       	adiw	r26, 0x15	; 21
     5ba:	3c 92       	st	X, r3
     5bc:	2e 92       	st	-X, r2
     5be:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &average;
     5c0:	0b e8       	ldi	r16, 0x8B	; 139
     5c2:	11 e0       	ldi	r17, 0x01	; 1
     5c4:	0c 0f       	add	r16, r28
     5c6:	1d 1f       	adc	r17, r29
     5c8:	f1 01       	movw	r30, r2
     5ca:	15 8b       	std	Z+21, r17	; 0x15
     5cc:	04 8b       	std	Z+20, r16	; 0x14
	average.next = &fast;
     5ce:	81 ea       	ldi	r24, 0xA1	; 161
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	8c 0f       	add	r24, r28
     5d4:	9d 1f       	adc	r25, r29
     5d6:	c1 56       	subi	r28, 0x61	; 97
     5d8:	de 4f       	sbci	r29, 0xFE	; 254
     5da:	99 83       	std	Y+1, r25	; 0x01
     5dc:	88 83       	st	Y, r24
     5de:	cf 59       	subi	r28, 0x9F	; 159
     5e0:	d1 40       	sbci	r29, 0x01	; 1
	fast.next = NULL;
     5e2:	cb 54       	subi	r28, 0x4B	; 75
     5e4:	de 4f       	sbci	r29, 0xFE	; 254
     5e6:	19 82       	std	Y+1, r1	; 0x01
     5e8:	18 82       	st	Y, r1
     5ea:	c5 5b       	subi	r28, 0xB5	; 181
     5ec:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     5ee:	a1 e0       	ldi	r26, 0x01	; 1
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	ac 0f       	add	r26, r28
     5f4:	bd 1f       	adc	r27, r29
     5f6:	b0 93 1d 03 	sts	0x031D, r27
     5fa:	a0 93 1c 03 	sts	0x031C, r26
	distance.next = &steering;
     5fe:	98 8a       	std	Y+16, r9	; 0x10
     600:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     602:	78 a2       	std	Y+32, r7	; 0x20
     604:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     606:	18 aa       	std	Y+48, r1	; 0x30
     608:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     60a:	d0 92 1b 03 	sts	0x031B, r13
     60e:	c0 92 1a 03 	sts	0x031A, r12
	speed.next = NULL;
     612:	21 96       	adiw	r28, 0x01	; 1
     614:	1f ae       	std	Y+63, r1	; 0x3f
     616:	1e ae       	std	Y+62, r1	; 0x3e
     618:	21 97       	sbiw	r28, 0x01	; 1


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     61a:	be 01       	movw	r22, r28
     61c:	69 54       	subi	r22, 0x49	; 73
     61e:	7e 4f       	sbci	r23, 0xFE	; 254
     620:	70 93 1f 03 	sts	0x031F, r23
     624:	60 93 1e 03 	sts	0x031E, r22
	struct rule_type rule2; rule1.next = &rule2;
     628:	ae 01       	movw	r20, r28
     62a:	43 54       	subi	r20, 0x43	; 67
     62c:	5e 4f       	sbci	r21, 0xFE	; 254
     62e:	fb 01       	movw	r30, r22
     630:	55 83       	std	Z+5, r21	; 0x05
     632:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
     634:	82 96       	adiw	r24, 0x22	; 34
     636:	da 01       	movw	r26, r20
     638:	15 96       	adiw	r26, 0x05	; 5
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
     63e:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule4; rule3.next = &rule4;
     640:	9e 01       	movw	r18, r28
     642:	27 53       	subi	r18, 0x37	; 55
     644:	3e 4f       	sbci	r19, 0xFE	; 254
     646:	fc 01       	movw	r30, r24
     648:	35 83       	std	Z+5, r19	; 0x05
     64a:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5; 
     64c:	52 96       	adiw	r26, 0x12	; 18
     64e:	f9 01       	movw	r30, r18
     650:	b5 83       	std	Z+5, r27	; 0x05
     652:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
     654:	05 ed       	ldi	r16, 0xD5	; 213
     656:	11 e0       	ldi	r17, 0x01	; 1
     658:	0c 0f       	add	r16, r28
     65a:	1d 1f       	adc	r17, r29
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	1c 93       	st	X, r17
     660:	0e 93       	st	-X, r16
     662:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule7; rule6.next = &rule7;
     664:	6e 01       	movw	r12, r28
     666:	15 e2       	ldi	r17, 0x25	; 37
     668:	c1 1a       	sub	r12, r17
     66a:	1e ef       	ldi	r17, 0xFE	; 254
     66c:	d1 0a       	sbc	r13, r17
     66e:	c7 52       	subi	r28, 0x27	; 39
     670:	de 4f       	sbci	r29, 0xFE	; 254
     672:	d9 82       	std	Y+1, r13	; 0x01
     674:	c8 82       	st	Y, r12
     676:	c9 5d       	subi	r28, 0xD9	; 217
     678:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule8; rule7.next = &rule8;
     67a:	4e 01       	movw	r8, r28
     67c:	ef e1       	ldi	r30, 0x1F	; 31
     67e:	8e 1a       	sub	r8, r30
     680:	ee ef       	ldi	r30, 0xFE	; 254
     682:	9e 0a       	sbc	r9, r30
     684:	f6 01       	movw	r30, r12
     686:	95 82       	std	Z+5, r9	; 0x05
     688:	84 82       	std	Z+4, r8	; 0x04
	struct rule_type rule9; rule8.next = &rule9;
     68a:	3e 01       	movw	r6, r28
     68c:	f9 e1       	ldi	r31, 0x19	; 25
     68e:	6f 1a       	sub	r6, r31
     690:	fe ef       	ldi	r31, 0xFE	; 254
     692:	7f 0a       	sbc	r7, r31
     694:	f4 01       	movw	r30, r8
     696:	75 82       	std	Z+5, r7	; 0x05
     698:	64 82       	std	Z+4, r6	; 0x04
	struct rule_type rule10; rule9.next = &rule10;
     69a:	0d ee       	ldi	r16, 0xED	; 237
     69c:	11 e0       	ldi	r17, 0x01	; 1
     69e:	0c 0f       	add	r16, r28
     6a0:	1d 1f       	adc	r17, r29
     6a2:	f3 01       	movw	r30, r6
     6a4:	15 83       	std	Z+5, r17	; 0x05
     6a6:	04 83       	std	Z+4, r16	; 0x04
	struct rule_type rule11; rule10.next = &rule11;
     6a8:	e3 ef       	ldi	r30, 0xF3	; 243
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	ec 0f       	add	r30, r28
     6ae:	fd 1f       	adc	r31, r29
     6b0:	cf 50       	subi	r28, 0x0F	; 15
     6b2:	de 4f       	sbci	r29, 0xFE	; 254
     6b4:	f9 83       	std	Y+1, r31	; 0x01
     6b6:	e8 83       	st	Y, r30
     6b8:	c1 5f       	subi	r28, 0xF1	; 241
     6ba:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12;
     6bc:	09 ef       	ldi	r16, 0xF9	; 249
     6be:	11 e0       	ldi	r17, 0x01	; 1
     6c0:	0c 0f       	add	r16, r28
     6c2:	1d 1f       	adc	r17, r29
     6c4:	c9 50       	subi	r28, 0x09	; 9
     6c6:	de 4f       	sbci	r29, 0xFE	; 254
     6c8:	19 83       	std	Y+1, r17	; 0x01
     6ca:	08 83       	st	Y, r16
     6cc:	c7 5f       	subi	r28, 0xF7	; 247
     6ce:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule13; rule12.next = &rule13;
     6d0:	ef ef       	ldi	r30, 0xFF	; 255
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	ec 0f       	add	r30, r28
     6d6:	fd 1f       	adc	r31, r29
     6d8:	c3 50       	subi	r28, 0x03	; 3
     6da:	de 4f       	sbci	r29, 0xFE	; 254
     6dc:	f9 83       	std	Y+1, r31	; 0x01
     6de:	e8 83       	st	Y, r30
     6e0:	cd 5f       	subi	r28, 0xFD	; 253
     6e2:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule14; rule13.next = &rule14;
     6e4:	05 e0       	ldi	r16, 0x05	; 5
     6e6:	12 e0       	ldi	r17, 0x02	; 2
     6e8:	0c 0f       	add	r16, r28
     6ea:	1d 1f       	adc	r17, r29
     6ec:	cd 5f       	subi	r28, 0xFD	; 253
     6ee:	dd 4f       	sbci	r29, 0xFD	; 253
     6f0:	19 83       	std	Y+1, r17	; 0x01
     6f2:	08 83       	st	Y, r16
     6f4:	c3 50       	subi	r28, 0x03	; 3
     6f6:	d2 40       	sbci	r29, 0x02	; 2
	rule14.next = NULL;
     6f8:	c7 5f       	subi	r28, 0xF7	; 247
     6fa:	dd 4f       	sbci	r29, 0xFD	; 253
     6fc:	19 82       	std	Y+1, r1	; 0x01
     6fe:	18 82       	st	Y, r1
     700:	c9 50       	subi	r28, 0x09	; 9
     702:	d2 40       	sbci	r29, 0x02	; 2
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     704:	7e 01       	movw	r14, r28
     706:	15 ef       	ldi	r17, 0xF5	; 245
     708:	e1 1a       	sub	r14, r17
     70a:	1d ef       	ldi	r17, 0xFD	; 253
     70c:	f1 0a       	sbc	r15, r17
     70e:	fb 01       	movw	r30, r22
     710:	f1 82       	std	Z+1, r15	; 0x01
     712:	e0 82       	st	Z, r14
     714:	f7 01       	movw	r30, r14
     716:	13 82       	std	Z+3, r1	; 0x03
     718:	12 82       	std	Z+2, r1	; 0x02
     71a:	8e 01       	movw	r16, r28
     71c:	01 5f       	subi	r16, 0xF1	; 241
     71e:	1d 4f       	sbci	r17, 0xFD	; 253
     720:	fb 01       	movw	r30, r22
     722:	13 83       	std	Z+3, r17	; 0x03
     724:	02 83       	std	Z+2, r16	; 0x02
     726:	f8 01       	movw	r30, r16
     728:	13 82       	std	Z+3, r1	; 0x03
     72a:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &zero.value;
     72c:	6f ea       	ldi	r22, 0xAF	; 175
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	6c 0f       	add	r22, r28
     732:	7d 1f       	adc	r23, r29
     734:	66 5f       	subi	r22, 0xF6	; 246
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	f7 01       	movw	r30, r14
     73a:	71 83       	std	Z+1, r23	; 0x01
     73c:	60 83       	st	Z, r22
     73e:	fa e0       	ldi	r31, 0x0A	; 10
     740:	4f 0e       	add	r4, r31
     742:	51 1c       	adc	r5, r1
     744:	f8 01       	movw	r30, r16
     746:	51 82       	std	Z+1, r5	; 0x01
     748:	40 82       	st	Z, r4

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     74a:	0c 5f       	subi	r16, 0xFC	; 252
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	fa 01       	movw	r30, r20
     750:	11 83       	std	Z+1, r17	; 0x01
     752:	00 83       	st	Z, r16
     754:	f8 01       	movw	r30, r16
     756:	13 82       	std	Z+3, r1	; 0x03
     758:	12 82       	std	Z+2, r1	; 0x02
     75a:	62 5a       	subi	r22, 0xA2	; 162
     75c:	7e 4f       	sbci	r23, 0xFE	; 254
     75e:	fa 01       	movw	r30, r20
     760:	73 83       	std	Z+3, r23	; 0x03
     762:	62 83       	std	Z+2, r22	; 0x02
     764:	fb 01       	movw	r30, r22
     766:	13 82       	std	Z+3, r1	; 0x03
     768:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &slow.value;
     76a:	4e 5e       	subi	r20, 0xEE	; 238
     76c:	51 09       	sbc	r21, r1
     76e:	f8 01       	movw	r30, r16
     770:	51 83       	std	Z+1, r21	; 0x01
     772:	40 83       	st	Z, r20
     774:	51 01       	movw	r10, r2
     776:	fa e0       	ldi	r31, 0x0A	; 10
     778:	af 0e       	add	r10, r31
     77a:	b1 1c       	adc	r11, r1
     77c:	fb 01       	movw	r30, r22
     77e:	b1 82       	std	Z+1, r11	; 0x01
     780:	a0 82       	st	Z, r10

	// if dist is faar and steering is right then speed is average
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     782:	08 5f       	subi	r16, 0xF8	; 248
     784:	1f 4f       	sbci	r17, 0xFF	; 255
     786:	fc 01       	movw	r30, r24
     788:	11 83       	std	Z+1, r17	; 0x01
     78a:	00 83       	st	Z, r16
     78c:	40 5b       	subi	r20, 0xB0	; 176
     78e:	5e 4f       	sbci	r21, 0xFE	; 254
     790:	f8 01       	movw	r30, r16
     792:	53 83       	std	Z+3, r21	; 0x03
     794:	42 83       	std	Z+2, r20	; 0x02
     796:	fa 01       	movw	r30, r20
     798:	13 82       	std	Z+3, r1	; 0x03
     79a:	12 82       	std	Z+2, r1	; 0x02
     79c:	64 5f       	subi	r22, 0xF4	; 244
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	fc 01       	movw	r30, r24
     7a2:	73 83       	std	Z+3, r23	; 0x03
     7a4:	62 83       	std	Z+2, r22	; 0x02
     7a6:	fb 01       	movw	r30, r22
     7a8:	13 82       	std	Z+3, r1	; 0x03
     7aa:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &average.value;
     7ac:	81 ef       	ldi	r24, 0xF1	; 241
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8c 0f       	add	r24, r28
     7b2:	9d 1f       	adc	r25, r29
     7b4:	0a 96       	adiw	r24, 0x0a	; 10
     7b6:	f8 01       	movw	r30, r16
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
     7bc:	03 e8       	ldi	r16, 0x83	; 131
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	0c 0f       	add	r16, r28
     7c2:	1d 1f       	adc	r17, r29
     7c4:	06 5f       	subi	r16, 0xF6	; 246
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	fa 01       	movw	r30, r20
     7ca:	11 83       	std	Z+1, r17	; 0x01
     7cc:	00 83       	st	Z, r16
     7ce:	4b e8       	ldi	r20, 0x8B	; 139
     7d0:	51 e0       	ldi	r21, 0x01	; 1
     7d2:	4c 0f       	add	r20, r28
     7d4:	5d 1f       	adc	r21, r29
     7d6:	46 5f       	subi	r20, 0xF6	; 246
     7d8:	5f 4f       	sbci	r21, 0xFF	; 255
     7da:	fb 01       	movw	r30, r22
     7dc:	51 83       	std	Z+1, r21	; 0x01
     7de:	40 83       	st	Z, r20

	// if dist is faar and steering is left then speed is average
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     7e0:	7e 01       	movw	r14, r28
     7e2:	f9 ed       	ldi	r31, 0xD9	; 217
     7e4:	ef 1a       	sub	r14, r31
     7e6:	fd ef       	ldi	r31, 0xFD	; 253
     7e8:	ff 0a       	sbc	r15, r31
     7ea:	f9 01       	movw	r30, r18
     7ec:	f1 82       	std	Z+1, r15	; 0x01
     7ee:	e0 82       	st	Z, r14
     7f0:	02 56       	subi	r16, 0x62	; 98
     7f2:	1e 4f       	sbci	r17, 0xFE	; 254
     7f4:	f7 01       	movw	r30, r14
     7f6:	13 83       	std	Z+3, r17	; 0x03
     7f8:	02 83       	std	Z+2, r16	; 0x02
     7fa:	f8 01       	movw	r30, r16
     7fc:	13 82       	std	Z+3, r1	; 0x03
     7fe:	12 82       	std	Z+2, r1	; 0x02
     800:	64 5f       	subi	r22, 0xF4	; 244
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	73 83       	std	Z+3, r23	; 0x03
     808:	62 83       	std	Z+2, r22	; 0x02
     80a:	fb 01       	movw	r30, r22
     80c:	13 82       	std	Z+3, r1	; 0x03
     80e:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &average.value;
     810:	f7 01       	movw	r30, r14
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
     816:	27 e5       	ldi	r18, 0x57	; 87
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	2c 0f       	add	r18, r28
     81c:	3d 1f       	adc	r19, r29
     81e:	26 5f       	subi	r18, 0xF6	; 246
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	f8 01       	movw	r30, r16
     824:	31 83       	std	Z+1, r19	; 0x01
     826:	20 83       	st	Z, r18
     828:	fb 01       	movw	r30, r22
     82a:	51 83       	std	Z+1, r21	; 0x01
     82c:	40 83       	st	Z, r20

	// if dist is faar and steering is maxRight then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     82e:	08 5f       	subi	r16, 0xF8	; 248
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	1c 93       	st	X, r17
     836:	0e 93       	st	-X, r16
     838:	68 5f       	subi	r22, 0xF8	; 248
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	f8 01       	movw	r30, r16
     83e:	73 83       	std	Z+3, r23	; 0x03
     840:	62 83       	std	Z+2, r22	; 0x02
     842:	fb 01       	movw	r30, r22
     844:	13 82       	std	Z+3, r1	; 0x03
     846:	12 82       	std	Z+2, r1	; 0x02
     848:	26 52       	subi	r18, 0x26	; 38
     84a:	3e 4f       	sbci	r19, 0xFE	; 254
     84c:	13 96       	adiw	r26, 0x03	; 3
     84e:	3c 93       	st	X, r19
     850:	2e 93       	st	-X, r18
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	d9 01       	movw	r26, r18
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	1c 92       	st	X, r1
     85a:	1e 92       	st	-X, r1
     85c:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &maxRight.value; then5.value = &slow.value;
     85e:	f8 01       	movw	r30, r16
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24
     864:	a9 e9       	ldi	r26, 0x99	; 153
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	ac 0f       	add	r26, r28
     86a:	bd 1f       	adc	r27, r29
     86c:	1a 96       	adiw	r26, 0x0a	; 10
     86e:	fb 01       	movw	r30, r22
     870:	b1 83       	std	Z+1, r27	; 0x01
     872:	a0 83       	st	Z, r26
     874:	d9 01       	movw	r26, r18
     876:	ad 92       	st	X+, r10
     878:	bc 92       	st	X, r11
	
	// if dist is faar and steering is maxLeft then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     87a:	68 5f       	subi	r22, 0xF8	; 248
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	cb 52       	subi	r28, 0x2B	; 43
     880:	de 4f       	sbci	r29, 0xFE	; 254
     882:	79 83       	std	Y+1, r23	; 0x01
     884:	68 83       	st	Y, r22
     886:	c5 5d       	subi	r28, 0xD5	; 213
     888:	d1 40       	sbci	r29, 0x01	; 1
     88a:	28 5f       	subi	r18, 0xF8	; 248
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	fb 01       	movw	r30, r22
     890:	33 83       	std	Z+3, r19	; 0x03
     892:	22 83       	std	Z+2, r18	; 0x02
     894:	d9 01       	movw	r26, r18
     896:	13 96       	adiw	r26, 0x03	; 3
     898:	1c 92       	st	X, r1
     89a:	1e 92       	st	-X, r1
     89c:	12 97       	sbiw	r26, 0x02	; 2
     89e:	14 96       	adiw	r26, 0x04	; 4
     8a0:	c9 52       	subi	r28, 0x29	; 41
     8a2:	de 4f       	sbci	r29, 0xFE	; 254
     8a4:	b9 83       	std	Y+1, r27	; 0x01
     8a6:	a8 83       	st	Y, r26
     8a8:	c7 5d       	subi	r28, 0xD7	; 215
     8aa:	d1 40       	sbci	r29, 0x01	; 1
     8ac:	13 96       	adiw	r26, 0x03	; 3
     8ae:	1c 92       	st	X, r1
     8b0:	1e 92       	st	-X, r1
     8b2:	12 97       	sbiw	r26, 0x02	; 2
	if61.value = &faar.value; if62.value = &maxLeft.value; then6.value = &slow.value;
     8b4:	91 83       	std	Z+1, r25	; 0x01
     8b6:	80 83       	st	Z, r24
     8b8:	61 e4       	ldi	r22, 0x41	; 65
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	6c 0f       	add	r22, r28
     8be:	7d 1f       	adc	r23, r29
     8c0:	66 5f       	subi	r22, 0xF6	; 246
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	f9 01       	movw	r30, r18
     8c6:	71 83       	std	Z+1, r23	; 0x01
     8c8:	60 83       	st	Z, r22
     8ca:	ad 92       	st	X+, r10
     8cc:	bc 92       	st	X, r11
	
	// if dist is distant and currentEsc is neutral then speed is slow
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     8ce:	7e 5f       	subi	r23, 0xFE	; 254
     8d0:	d6 01       	movw	r26, r12
     8d2:	6d 93       	st	X+, r22
     8d4:	7c 93       	st	X, r23
     8d6:	04 5e       	subi	r16, 0xE4	; 228
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	fb 01       	movw	r30, r22
     8dc:	13 83       	std	Z+3, r17	; 0x03
     8de:	02 83       	std	Z+2, r16	; 0x02
     8e0:	d8 01       	movw	r26, r16
     8e2:	13 96       	adiw	r26, 0x03	; 3
     8e4:	1c 92       	st	X, r1
     8e6:	1e 92       	st	-X, r1
     8e8:	12 97       	sbiw	r26, 0x02	; 2
     8ea:	38 96       	adiw	r30, 0x08	; 8
     8ec:	d6 01       	movw	r26, r12
     8ee:	13 96       	adiw	r26, 0x03	; 3
     8f0:	fc 93       	st	X, r31
     8f2:	ee 93       	st	-X, r30
     8f4:	12 97       	sbiw	r26, 0x02	; 2
     8f6:	13 82       	std	Z+3, r1	; 0x03
     8f8:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &distant.value; if72.value = &neutral.value; then7.value = &slow.value;
     8fa:	2b ed       	ldi	r18, 0xDB	; 219
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	2c 0f       	add	r18, r28
     900:	3d 1f       	adc	r19, r29
     902:	26 5f       	subi	r18, 0xF6	; 246
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	db 01       	movw	r26, r22
     908:	2d 93       	st	X+, r18
     90a:	3c 93       	st	X, r19
     90c:	0f 2e       	mov	r0, r31
     90e:	f7 e0       	ldi	r31, 0x07	; 7
     910:	cf 2e       	mov	r12, r31
     912:	dd 24       	eor	r13, r13
     914:	d3 94       	inc	r13
     916:	f0 2d       	mov	r31, r0
     918:	cc 0e       	add	r12, r28
     91a:	dd 1e       	adc	r13, r29
     91c:	ba e0       	ldi	r27, 0x0A	; 10
     91e:	cb 0e       	add	r12, r27
     920:	d1 1c       	adc	r13, r1
     922:	d8 01       	movw	r26, r16
     924:	cd 92       	st	X+, r12
     926:	dc 92       	st	X, r13
     928:	b1 82       	std	Z+1, r11	; 0x01
     92a:	a0 82       	st	Z, r10
	
	// if dist is distant and currentEsc is low then speed is average
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     92c:	64 5f       	subi	r22, 0xF4	; 244
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	f4 01       	movw	r30, r8
     932:	71 83       	std	Z+1, r23	; 0x01
     934:	60 83       	st	Z, r22
     936:	04 5f       	subi	r16, 0xF4	; 244
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	db 01       	movw	r26, r22
     93c:	13 96       	adiw	r26, 0x03	; 3
     93e:	1c 93       	st	X, r17
     940:	0e 93       	st	-X, r16
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	f8 01       	movw	r30, r16
     946:	13 82       	std	Z+3, r1	; 0x03
     948:	12 82       	std	Z+2, r1	; 0x02
     94a:	34 96       	adiw	r30, 0x04	; 4
     94c:	d4 01       	movw	r26, r8
     94e:	13 96       	adiw	r26, 0x03	; 3
     950:	fc 93       	st	X, r31
     952:	ee 93       	st	-X, r30
     954:	12 97       	sbiw	r26, 0x02	; 2
     956:	13 82       	std	Z+3, r1	; 0x03
     958:	12 82       	std	Z+2, r1	; 0x02
	if81.value = &distant.value; if82.value = &low.value; then8.value = &average.value;
     95a:	db 01       	movw	r26, r22
     95c:	2d 93       	st	X+, r18
     95e:	3c 93       	st	X, r19
     960:	0f 2e       	mov	r0, r31
     962:	fd e1       	ldi	r31, 0x1D	; 29
     964:	ef 2e       	mov	r14, r31
     966:	ff 24       	eor	r15, r15
     968:	f3 94       	inc	r15
     96a:	f0 2d       	mov	r31, r0
     96c:	ec 0e       	add	r14, r28
     96e:	fd 1e       	adc	r15, r29
     970:	ba e0       	ldi	r27, 0x0A	; 10
     972:	eb 0e       	add	r14, r27
     974:	f1 1c       	adc	r15, r1
     976:	d8 01       	movw	r26, r16
     978:	ed 92       	st	X+, r14
     97a:	fc 92       	st	X, r15
     97c:	51 83       	std	Z+1, r21	; 0x01
     97e:	40 83       	st	Z, r20
	
	// if dist is distant and currentEsc is medium then speed is average
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     980:	64 5f       	subi	r22, 0xF4	; 244
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	f3 01       	movw	r30, r6
     986:	71 83       	std	Z+1, r23	; 0x01
     988:	60 83       	st	Z, r22
     98a:	4e 01       	movw	r8, r28
     98c:	f9 e9       	ldi	r31, 0x99	; 153
     98e:	8f 1a       	sub	r8, r31
     990:	fd ef       	ldi	r31, 0xFD	; 253
     992:	9f 0a       	sbc	r9, r31
     994:	db 01       	movw	r26, r22
     996:	13 96       	adiw	r26, 0x03	; 3
     998:	9c 92       	st	X, r9
     99a:	8e 92       	st	-X, r8
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	f4 01       	movw	r30, r8
     9a0:	13 82       	std	Z+3, r1	; 0x03
     9a2:	12 82       	std	Z+2, r1	; 0x02
     9a4:	34 96       	adiw	r30, 0x04	; 4
     9a6:	d3 01       	movw	r26, r6
     9a8:	13 96       	adiw	r26, 0x03	; 3
     9aa:	fc 93       	st	X, r31
     9ac:	ee 93       	st	-X, r30
     9ae:	12 97       	sbiw	r26, 0x02	; 2
     9b0:	13 82       	std	Z+3, r1	; 0x03
     9b2:	12 82       	std	Z+2, r1	; 0x02
	if91.value = &distant.value; if92.value = &medium.value; then9.value = &average.value;
     9b4:	db 01       	movw	r26, r22
     9b6:	2d 93       	st	X+, r18
     9b8:	3c 93       	st	X, r19
     9ba:	03 e3       	ldi	r16, 0x33	; 51
     9bc:	11 e0       	ldi	r17, 0x01	; 1
     9be:	0c 0f       	add	r16, r28
     9c0:	1d 1f       	adc	r17, r29
     9c2:	06 5f       	subi	r16, 0xF6	; 246
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	d4 01       	movw	r26, r8
     9c8:	0d 93       	st	X+, r16
     9ca:	1c 93       	st	X, r17
     9cc:	51 83       	std	Z+1, r21	; 0x01
     9ce:	40 83       	st	Z, r20
	
	// if dist is faar and steering is straight and currentEsc is neutral then speed is average
	struct rule_element_type if101, if102, if103, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = &if103; if103.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     9d0:	26 57       	subi	r18, 0x76	; 118
     9d2:	3e 4f       	sbci	r19, 0xFE	; 254
     9d4:	c3 51       	subi	r28, 0x13	; 19
     9d6:	de 4f       	sbci	r29, 0xFE	; 254
     9d8:	39 83       	std	Y+1, r19	; 0x01
     9da:	28 83       	st	Y, r18
     9dc:	cd 5e       	subi	r28, 0xED	; 237
     9de:	d1 40       	sbci	r29, 0x01	; 1
     9e0:	60 5f       	subi	r22, 0xF0	; 240
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	f9 01       	movw	r30, r18
     9e6:	73 83       	std	Z+3, r23	; 0x03
     9e8:	62 83       	std	Z+2, r22	; 0x02
     9ea:	4e 01       	movw	r8, r28
     9ec:	f9 e8       	ldi	r31, 0x89	; 137
     9ee:	8f 1a       	sub	r8, r31
     9f0:	fd ef       	ldi	r31, 0xFD	; 253
     9f2:	9f 0a       	sbc	r9, r31
     9f4:	db 01       	movw	r26, r22
     9f6:	13 96       	adiw	r26, 0x03	; 3
     9f8:	9c 92       	st	X, r9
     9fa:	8e 92       	st	-X, r8
     9fc:	12 97       	sbiw	r26, 0x02	; 2
     9fe:	f4 01       	movw	r30, r8
     a00:	13 82       	std	Z+3, r1	; 0x03
     a02:	12 82       	std	Z+2, r1	; 0x02
     a04:	34 96       	adiw	r30, 0x04	; 4
     a06:	c1 51       	subi	r28, 0x11	; 17
     a08:	de 4f       	sbci	r29, 0xFE	; 254
     a0a:	f9 83       	std	Y+1, r31	; 0x01
     a0c:	e8 83       	st	Y, r30
     a0e:	cf 5e       	subi	r28, 0xEF	; 239
     a10:	d1 40       	sbci	r29, 0x01	; 1
     a12:	13 82       	std	Z+3, r1	; 0x03
     a14:	12 82       	std	Z+2, r1	; 0x02
	if101.value = &faar.value; if102.value = &straight.value; if103.value = &neutral.value; then10.value = &slow.value;
     a16:	d9 01       	movw	r26, r18
     a18:	8d 93       	st	X+, r24
     a1a:	9c 93       	st	X, r25
     a1c:	2d e6       	ldi	r18, 0x6D	; 109
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	2c 0f       	add	r18, r28
     a22:	3d 1f       	adc	r19, r29
     a24:	26 5f       	subi	r18, 0xF6	; 246
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	db 01       	movw	r26, r22
     a2a:	2d 93       	st	X+, r18
     a2c:	3c 93       	st	X, r19
     a2e:	d4 01       	movw	r26, r8
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	dc 92       	st	X, r13
     a34:	ce 92       	st	-X, r12
     a36:	b1 82       	std	Z+1, r11	; 0x01
     a38:	a0 82       	st	Z, r10

	// if dist is faar and steering is straight and currentEsc is low then speed is average
	struct rule_element_type if111, if112, if113, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = &if113; if113.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     a3a:	6e 01       	movw	r12, r28
     a3c:	b1 e8       	ldi	r27, 0x81	; 129
     a3e:	cb 1a       	sub	r12, r27
     a40:	bd ef       	ldi	r27, 0xFD	; 253
     a42:	db 0a       	sbc	r13, r27
     a44:	cd 50       	subi	r28, 0x0D	; 13
     a46:	de 4f       	sbci	r29, 0xFE	; 254
     a48:	d9 82       	std	Y+1, r13	; 0x01
     a4a:	c8 82       	st	Y, r12
     a4c:	c3 5f       	subi	r28, 0xF3	; 243
     a4e:	d1 40       	sbci	r29, 0x01	; 1
     a50:	60 5f       	subi	r22, 0xF0	; 240
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	f6 01       	movw	r30, r12
     a56:	73 83       	std	Z+3, r23	; 0x03
     a58:	62 83       	std	Z+2, r22	; 0x02
     a5a:	50 96       	adiw	r26, 0x10	; 16
     a5c:	fb 01       	movw	r30, r22
     a5e:	b3 83       	std	Z+3, r27	; 0x03
     a60:	a2 83       	std	Z+2, r26	; 0x02
     a62:	13 96       	adiw	r26, 0x03	; 3
     a64:	1c 92       	st	X, r1
     a66:	1e 92       	st	-X, r1
     a68:	12 97       	sbiw	r26, 0x02	; 2
     a6a:	5e 01       	movw	r10, r28
     a6c:	f5 e7       	ldi	r31, 0x75	; 117
     a6e:	af 1a       	sub	r10, r31
     a70:	fd ef       	ldi	r31, 0xFD	; 253
     a72:	bf 0a       	sbc	r11, r31
     a74:	cb 50       	subi	r28, 0x0B	; 11
     a76:	de 4f       	sbci	r29, 0xFE	; 254
     a78:	b9 82       	std	Y+1, r11	; 0x01
     a7a:	a8 82       	st	Y, r10
     a7c:	c5 5f       	subi	r28, 0xF5	; 245
     a7e:	d1 40       	sbci	r29, 0x01	; 1
     a80:	f5 01       	movw	r30, r10
     a82:	13 82       	std	Z+3, r1	; 0x03
     a84:	12 82       	std	Z+2, r1	; 0x02
	if111.value = &faar.value; if112.value = &straight.value; if113.value = &low.value; then11.value = &average.value;
     a86:	f6 01       	movw	r30, r12
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	80 83       	st	Z, r24
     a8c:	fb 01       	movw	r30, r22
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	20 83       	st	Z, r18
     a92:	ed 92       	st	X+, r14
     a94:	fc 92       	st	X, r15
     a96:	d5 01       	movw	r26, r10
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	5c 93       	st	X, r21
     a9c:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is medium then speed is fast
	struct rule_element_type if121, if122, if123, then12;
	rule12.if_side = &if121; if121.next = &if122; if122.next = &if123; if123.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     a9e:	64 5f       	subi	r22, 0xF4	; 244
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	c7 50       	subi	r28, 0x07	; 7
     aa4:	de 4f       	sbci	r29, 0xFE	; 254
     aa6:	79 83       	std	Y+1, r23	; 0x01
     aa8:	68 83       	st	Y, r22
     aaa:	c9 5f       	subi	r28, 0xF9	; 249
     aac:	d1 40       	sbci	r29, 0x01	; 1
     aae:	42 50       	subi	r20, 0x02	; 2
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	fb 01       	movw	r30, r22
     ab4:	53 83       	std	Z+3, r21	; 0x03
     ab6:	42 83       	std	Z+2, r20	; 0x02
     ab8:	1c 96       	adiw	r26, 0x0c	; 12
     aba:	fa 01       	movw	r30, r20
     abc:	b3 83       	std	Z+3, r27	; 0x03
     abe:	a2 83       	std	Z+2, r26	; 0x02
     ac0:	13 96       	adiw	r26, 0x03	; 3
     ac2:	1c 92       	st	X, r1
     ac4:	1e 92       	st	-X, r1
     ac6:	12 97       	sbiw	r26, 0x02	; 2
     ac8:	7e 01       	movw	r14, r28
     aca:	f5 e6       	ldi	r31, 0x65	; 101
     acc:	ef 1a       	sub	r14, r31
     ace:	fd ef       	ldi	r31, 0xFD	; 253
     ad0:	ff 0a       	sbc	r15, r31
     ad2:	c5 50       	subi	r28, 0x05	; 5
     ad4:	de 4f       	sbci	r29, 0xFE	; 254
     ad6:	f9 82       	std	Y+1, r15	; 0x01
     ad8:	e8 82       	st	Y, r14
     ada:	cb 5f       	subi	r28, 0xFB	; 251
     adc:	d1 40       	sbci	r29, 0x01	; 1
     ade:	f7 01       	movw	r30, r14
     ae0:	13 82       	std	Z+3, r1	; 0x03
     ae2:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &faar.value; if122.value = &straight.value; if123.value = &medium.value; then12.value = &fast.value;
     ae4:	fb 01       	movw	r30, r22
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	80 83       	st	Z, r24
     aea:	fa 01       	movw	r30, r20
     aec:	31 83       	std	Z+1, r19	; 0x01
     aee:	20 83       	st	Z, r18
     af0:	0d 93       	st	X+, r16
     af2:	1c 93       	st	X, r17
     af4:	41 ea       	ldi	r20, 0xA1	; 161
     af6:	51 e0       	ldi	r21, 0x01	; 1
     af8:	4c 0f       	add	r20, r28
     afa:	5d 1f       	adc	r21, r29
     afc:	46 5f       	subi	r20, 0xF6	; 246
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	d7 01       	movw	r26, r14
     b02:	11 96       	adiw	r26, 0x01	; 1
     b04:	5c 93       	st	X, r21
     b06:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is high then speed is fast
	struct rule_element_type if131, if132, if133, then13;
	rule13.if_side = &if131; if131.next = &if132; if132.next = &if133; if133.next = NULL; rule13.then_side = &then13; then13.next = NULL;
     b08:	0e 59       	subi	r16, 0x9E	; 158
     b0a:	1e 4f       	sbci	r17, 0xFE	; 254
     b0c:	c1 50       	subi	r28, 0x01	; 1
     b0e:	de 4f       	sbci	r29, 0xFE	; 254
     b10:	19 83       	std	Y+1, r17	; 0x01
     b12:	08 83       	st	Y, r16
     b14:	cf 5f       	subi	r28, 0xFF	; 255
     b16:	d1 40       	sbci	r29, 0x01	; 1
     b18:	6c 5e       	subi	r22, 0xEC	; 236
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	f8 01       	movw	r30, r16
     b1e:	73 83       	std	Z+3, r23	; 0x03
     b20:	62 83       	std	Z+2, r22	; 0x02
     b22:	1c 96       	adiw	r26, 0x0c	; 12
     b24:	fb 01       	movw	r30, r22
     b26:	b3 83       	std	Z+3, r27	; 0x03
     b28:	a2 83       	std	Z+2, r26	; 0x02
     b2a:	13 96       	adiw	r26, 0x03	; 3
     b2c:	1c 92       	st	X, r1
     b2e:	1e 92       	st	-X, r1
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	7e 01       	movw	r14, r28
     b34:	f5 e5       	ldi	r31, 0x55	; 85
     b36:	ef 1a       	sub	r14, r31
     b38:	fd ef       	ldi	r31, 0xFD	; 253
     b3a:	ff 0a       	sbc	r15, r31
     b3c:	cf 5f       	subi	r28, 0xFF	; 255
     b3e:	dd 4f       	sbci	r29, 0xFD	; 253
     b40:	f9 82       	std	Y+1, r15	; 0x01
     b42:	e8 82       	st	Y, r14
     b44:	c1 50       	subi	r28, 0x01	; 1
     b46:	d2 40       	sbci	r29, 0x02	; 2
     b48:	f7 01       	movw	r30, r14
     b4a:	13 82       	std	Z+3, r1	; 0x03
     b4c:	12 82       	std	Z+2, r1	; 0x02
	if131.value = &faar.value; if132.value = &straight.value; if133.value = &high.value; then13.value = &fast.value;
     b4e:	f8 01       	movw	r30, r16
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
     b54:	fb 01       	movw	r30, r22
     b56:	31 83       	std	Z+1, r19	; 0x01
     b58:	20 83       	st	Z, r18
     b5a:	69 e4       	ldi	r22, 0x49	; 73
     b5c:	71 e0       	ldi	r23, 0x01	; 1
     b5e:	6c 0f       	add	r22, r28
     b60:	7d 1f       	adc	r23, r29
     b62:	66 5f       	subi	r22, 0xF6	; 246
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	6d 93       	st	X+, r22
     b68:	7c 93       	st	X, r23
     b6a:	d7 01       	movw	r26, r14
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	5c 93       	st	X, r21
     b70:	4e 93       	st	-X, r20

	// if dist is faar and steering is straight then speed is fast
	struct rule_element_type if141, if142, then14;
	rule14.if_side = &if141; if141.next = &if142; if142.next = NULL; rule14.then_side = &then14; then14.next = NULL;
     b72:	64 5a       	subi	r22, 0xA4	; 164
     b74:	7e 4f       	sbci	r23, 0xFE	; 254
     b76:	cb 5f       	subi	r28, 0xFB	; 251
     b78:	dd 4f       	sbci	r29, 0xFD	; 253
     b7a:	79 83       	std	Y+1, r23	; 0x01
     b7c:	68 83       	st	Y, r22
     b7e:	c5 50       	subi	r28, 0x05	; 5
     b80:	d2 40       	sbci	r29, 0x02	; 2
     b82:	18 96       	adiw	r26, 0x08	; 8
     b84:	fb 01       	movw	r30, r22
     b86:	b3 83       	std	Z+3, r27	; 0x03
     b88:	a2 83       	std	Z+2, r26	; 0x02
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	1c 92       	st	X, r1
     b8e:	1e 92       	st	-X, r1
     b90:	12 97       	sbiw	r26, 0x02	; 2
     b92:	08 5e       	subi	r16, 0xE8	; 232
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	c9 5f       	subi	r28, 0xF9	; 249
     b98:	dd 4f       	sbci	r29, 0xFD	; 253
     b9a:	19 83       	std	Y+1, r17	; 0x01
     b9c:	08 83       	st	Y, r16
     b9e:	c7 50       	subi	r28, 0x07	; 7
     ba0:	d2 40       	sbci	r29, 0x02	; 2
     ba2:	f8 01       	movw	r30, r16
     ba4:	13 82       	std	Z+3, r1	; 0x03
     ba6:	12 82       	std	Z+2, r1	; 0x02
	if141.value = &faar.value; if142.value = &straight.value; then14.value = &fast.value;
     ba8:	fb 01       	movw	r30, r22
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	80 83       	st	Z, r24
     bae:	2d 93       	st	X+, r18
     bb0:	3c 93       	st	X, r19
     bb2:	d8 01       	movw	r26, r16
     bb4:	4d 93       	st	X+, r20
     bb6:	5c 93       	st	X, r21


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     bb8:	94 d0       	rcall	.+296    	; 0xce2 <fuzzification>
	rule_evaluation();
     bba:	ba d0       	rcall	.+372    	; 0xd30 <rule_evaluation>
	defuzzification();
     bbc:	ff d0       	rcall	.+510    	; 0xdbc <defuzzification>

	if (speed.value > MAXESC)
     bbe:	8b ad       	ldd	r24, Y+59	; 0x3b
     bc0:	9c ad       	ldd	r25, Y+60	; 0x3c
     bc2:	83 32       	cpi	r24, 0x23	; 35
     bc4:	bb e0       	ldi	r27, 0x0B	; 11
     bc6:	9b 07       	cpc	r25, r27
     bc8:	24 f0       	brlt	.+8      	; 0xbd2 <FLC_speed+0xabc>
	{
		setESC(MAXESC);
     bca:	82 e2       	ldi	r24, 0x22	; 34
     bcc:	9b e0       	ldi	r25, 0x0B	; 11
     bce:	f2 d7       	rcall	.+4068   	; 0x1bb4 <setESC>
     bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <FLC_speed+0xace>
	}
	else if (speed.value < NEUTRAL)
     bd2:	8d 3c       	cpi	r24, 0xCD	; 205
     bd4:	ea e0       	ldi	r30, 0x0A	; 10
     bd6:	9e 07       	cpc	r25, r30
     bd8:	24 f4       	brge	.+8      	; 0xbe2 <FLC_speed+0xacc>
	{
		setESC(NEUTRAL);
     bda:	8d ec       	ldi	r24, 0xCD	; 205
     bdc:	9a e0       	ldi	r25, 0x0A	; 10
     bde:	ea d7       	rcall	.+4052   	; 0x1bb4 <setESC>
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <FLC_speed+0xace>
	}
	else
	{
	
		setESC(speed.value);
     be2:	e8 d7       	rcall	.+4048   	; 0x1bb4 <setESC>
	}
    
    
}
     be4:	c6 54       	subi	r28, 0x46	; 70
     be6:	dd 4f       	sbci	r29, 0xFD	; 253
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	5f 90       	pop	r5
     c10:	4f 90       	pop	r4
     c12:	3f 90       	pop	r3
     c14:	2f 90       	pop	r2
     c16:	08 95       	ret

00000c18 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c18:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c1a:	84 85       	ldd	r24, Z+12	; 0x0c
     c1c:	95 85       	ldd	r25, Z+13	; 0x0d
     c1e:	9b 01       	movw	r18, r22
     c20:	28 1b       	sub	r18, r24
     c22:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c24:	86 85       	ldd	r24, Z+14	; 0x0e
     c26:	97 85       	ldd	r25, Z+15	; 0x0f
     c28:	86 1b       	sub	r24, r22
     c2a:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c2c:	12 16       	cp	r1, r18
     c2e:	13 06       	cpc	r1, r19
     c30:	f4 f4       	brge	.+60     	; 0xc6e <compute_degree_of_membership+0x56>
     c32:	18 16       	cp	r1, r24
     c34:	19 06       	cpc	r1, r25
     c36:	f4 f4       	brge	.+60     	; 0xc74 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c38:	60 89       	ldd	r22, Z+16	; 0x10
     c3a:	71 89       	ldd	r23, Z+17	; 0x11
     c3c:	a2 89       	ldd	r26, Z+18	; 0x12
     c3e:	b3 89       	ldd	r27, Z+19	; 0x13
     c40:	8a 9f       	mul	r24, r26
     c42:	a0 01       	movw	r20, r0
     c44:	8b 9f       	mul	r24, r27
     c46:	50 0d       	add	r21, r0
     c48:	9a 9f       	mul	r25, r26
     c4a:	50 0d       	add	r21, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	26 9f       	mul	r18, r22
     c50:	c0 01       	movw	r24, r0
     c52:	27 9f       	mul	r18, r23
     c54:	90 0d       	add	r25, r0
     c56:	36 9f       	mul	r19, r22
     c58:	90 0d       	add	r25, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	48 17       	cp	r20, r24
     c5e:	59 07       	cpc	r21, r25
     c60:	0c f4       	brge	.+2      	; 0xc64 <compute_degree_of_membership+0x4c>
     c62:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c64:	8f 3f       	cpi	r24, 0xFF	; 255
     c66:	91 05       	cpc	r25, r1
     c68:	09 f0       	breq	.+2      	; 0xc6c <compute_degree_of_membership+0x54>
     c6a:	3c f4       	brge	.+14     	; 0xc7a <compute_degree_of_membership+0x62>
     c6c:	08 c0       	rjmp	.+16     	; 0xc7e <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <compute_degree_of_membership+0x66>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c7e:	93 87       	std	Z+11, r25	; 0x0b
     c80:	82 87       	std	Z+10, r24	; 0x0a
     c82:	08 95       	ret

00000c84 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     c8e:	c6 85       	ldd	r28, Z+14	; 0x0e
     c90:	d7 85       	ldd	r29, Z+15	; 0x0f
     c92:	84 85       	ldd	r24, Z+12	; 0x0c
     c94:	95 85       	ldd	r25, Z+13	; 0x0d
     c96:	c8 1b       	sub	r28, r24
     c98:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     c9a:	22 85       	ldd	r18, Z+10	; 0x0a
     c9c:	33 85       	ldd	r19, Z+11	; 0x0b
     c9e:	60 89       	ldd	r22, Z+16	; 0x10
     ca0:	71 89       	ldd	r23, Z+17	; 0x11
     ca2:	c9 01       	movw	r24, r18
     ca4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     ca8:	8e 01       	movw	r16, r28
     caa:	06 1b       	sub	r16, r22
     cac:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     cae:	62 89       	ldd	r22, Z+18	; 0x12
     cb0:	73 89       	ldd	r23, Z+19	; 0x13
     cb2:	c9 01       	movw	r24, r18
     cb4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divmodhi4>
    top = base - run_1 - run_2;
     cb8:	06 1b       	sub	r16, r22
     cba:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     cbc:	c0 0f       	add	r28, r16
     cbe:	d1 1f       	adc	r29, r17
     cc0:	2c 9f       	mul	r18, r28
     cc2:	c0 01       	movw	r24, r0
     cc4:	2d 9f       	mul	r18, r29
     cc6:	90 0d       	add	r25, r0
     cc8:	3c 9f       	mul	r19, r28
     cca:	90 0d       	add	r25, r0
     ccc:	11 24       	eor	r1, r1
     cce:	99 23       	and	r25, r25
     cd0:	0c f4       	brge	.+2      	; 0xcd4 <compute_area_of_trapezoid+0x50>
     cd2:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     cd4:	95 95       	asr	r25
     cd6:	87 95       	ror	r24
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     cea:	00 91 1c 03 	lds	r16, 0x031C
     cee:	10 91 1d 03 	lds	r17, 0x031D
     cf2:	01 15       	cp	r16, r1
     cf4:	11 05       	cpc	r17, r1
     cf6:	b9 f0       	breq	.+46     	; 0xd26 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     cf8:	f8 01       	movw	r30, r16
     cfa:	c4 85       	ldd	r28, Z+12	; 0x0c
     cfc:	d5 85       	ldd	r29, Z+13	; 0x0d
     cfe:	20 97       	sbiw	r28, 0x00	; 0
     d00:	61 f0       	breq	.+24     	; 0xd1a <fuzzification+0x38>
            if (mf!=NULL) {
     d02:	20 97       	sbiw	r28, 0x00	; 0
     d04:	29 f0       	breq	.+10     	; 0xd10 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     d06:	f8 01       	movw	r30, r16
     d08:	62 85       	ldd	r22, Z+10	; 0x0a
     d0a:	73 85       	ldd	r23, Z+11	; 0x0b
     d0c:	ce 01       	movw	r24, r28
     d0e:	84 df       	rcall	.-248    	; 0xc18 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d10:	0c 88       	ldd	r0, Y+20	; 0x14
     d12:	dd 89       	ldd	r29, Y+21	; 0x15
     d14:	c0 2d       	mov	r28, r0
     d16:	20 97       	sbiw	r28, 0x00	; 0
     d18:	a1 f7       	brne	.-24     	; 0xd02 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d1a:	f8 01       	movw	r30, r16
     d1c:	06 85       	ldd	r16, Z+14	; 0x0e
     d1e:	17 85       	ldd	r17, Z+15	; 0x0f
     d20:	01 15       	cp	r16, r1
     d22:	11 05       	cpc	r17, r1
     d24:	49 f7       	brne	.-46     	; 0xcf8 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d38:	c0 91 1e 03 	lds	r28, 0x031E
     d3c:	d0 91 1f 03 	lds	r29, 0x031F
     d40:	20 97       	sbiw	r28, 0x00	; 0
     d42:	b9 f1       	breq	.+110    	; 0xdb2 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d44:	00 e0       	ldi	r16, 0x00	; 0
     d46:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d48:	e8 81       	ld	r30, Y
     d4a:	f9 81       	ldd	r31, Y+1	; 0x01
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	81 f0       	breq	.+32     	; 0xd70 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d50:	20 2f       	mov	r18, r16
     d52:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d54:	a0 81       	ld	r26, Z
     d56:	b1 81       	ldd	r27, Z+1	; 0x01
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	82 17       	cp	r24, r18
     d5e:	93 07       	cpc	r25, r19
     d60:	0c f4       	brge	.+2      	; 0xd64 <rule_evaluation+0x34>
     d62:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d64:	02 80       	ldd	r0, Z+2	; 0x02
     d66:	f3 81       	ldd	r31, Z+3	; 0x03
     d68:	e0 2d       	mov	r30, r0
     d6a:	30 97       	sbiw	r30, 0x00	; 0
     d6c:	99 f7       	brne	.-26     	; 0xd54 <rule_evaluation+0x24>
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d70:	20 2f       	mov	r18, r16
     d72:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	30 97       	sbiw	r30, 0x00	; 0
     d7a:	b1 f0       	breq	.+44     	; 0xda8 <rule_evaluation+0x78>
     d7c:	72 2f       	mov	r23, r18
     d7e:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d80:	a0 81       	ld	r26, Z
     d82:	b1 81       	ldd	r27, Z+1	; 0x01
     d84:	8d 91       	ld	r24, X+
     d86:	9c 91       	ld	r25, X
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	57 2f       	mov	r21, r23
     d8c:	46 2f       	mov	r20, r22
     d8e:	28 17       	cp	r18, r24
     d90:	39 07       	cpc	r19, r25
     d92:	14 f4       	brge	.+4      	; 0xd98 <rule_evaluation+0x68>
     d94:	58 2f       	mov	r21, r24
     d96:	49 2f       	mov	r20, r25
     d98:	5c 93       	st	X, r21
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d9e:	02 80       	ldd	r0, Z+2	; 0x02
     da0:	f3 81       	ldd	r31, Z+3	; 0x03
     da2:	e0 2d       	mov	r30, r0
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	61 f7       	brne	.-40     	; 0xd80 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     da8:	0c 80       	ldd	r0, Y+4	; 0x04
     daa:	dd 81       	ldd	r29, Y+5	; 0x05
     dac:	c0 2d       	mov	r28, r0
     dae:	20 97       	sbiw	r28, 0x00	; 0
     db0:	59 f6       	brne	.-106    	; 0xd48 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     dbc:	2f 92       	push	r2
     dbe:	3f 92       	push	r3
     dc0:	4f 92       	push	r4
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <defuzzification+0x26>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <defuzzification+0x28>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <defuzzification+0x2a>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     dea:	80 91 1a 03 	lds	r24, 0x031A
     dee:	90 91 1b 03 	lds	r25, 0x031B
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
     df6:	89 2b       	or	r24, r25
     df8:	09 f4       	brne	.+2      	; 0xdfc <defuzzification+0x40>
     dfa:	8d c0       	rjmp	.+282    	; 0xf16 <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     dfc:	eb 81       	ldd	r30, Y+3	; 0x03
     dfe:	fc 81       	ldd	r31, Y+4	; 0x04
     e00:	04 84       	ldd	r0, Z+12	; 0x0c
     e02:	f5 85       	ldd	r31, Z+13	; 0x0d
     e04:	e0 2d       	mov	r30, r0
     e06:	fe 83       	std	Y+6, r31	; 0x06
     e08:	ed 83       	std	Y+5, r30	; 0x05
     e0a:	ef 2b       	or	r30, r31
     e0c:	09 f4       	brne	.+2      	; 0xe10 <defuzzification+0x54>
     e0e:	6e c0       	rjmp	.+220    	; 0xeec <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     e10:	51 2c       	mov	r5, r1
     e12:	61 2c       	mov	r6, r1
     e14:	71 2c       	mov	r7, r1
     e16:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e18:	31 2c       	mov	r3, r1
     e1a:	21 2c       	mov	r2, r1
     e1c:	19 82       	std	Y+1, r1	; 0x01
     e1e:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	2f df       	rcall	.-418    	; 0xc84 <compute_area_of_trapezoid>
     e26:	bc 01       	movw	r22, r24
     e28:	88 27       	eor	r24, r24
     e2a:	77 fd       	sbrc	r23, 7
     e2c:	80 95       	com	r24
     e2e:	98 2f       	mov	r25, r24
     e30:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatsisf>
     e34:	6b 01       	movw	r12, r22
     e36:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e38:	ed 81       	ldd	r30, Y+5	; 0x05
     e3a:	fe 81       	ldd	r31, Y+6	; 0x06
     e3c:	04 85       	ldd	r16, Z+12	; 0x0c
     e3e:	15 85       	ldd	r17, Z+13	; 0x0d
     e40:	b8 01       	movw	r22, r16
     e42:	88 27       	eor	r24, r24
     e44:	77 fd       	sbrc	r23, 7
     e46:	80 95       	com	r24
     e48:	98 2f       	mov	r25, r24
     e4a:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatsisf>
     e4e:	4b 01       	movw	r8, r22
     e50:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e52:	ed 81       	ldd	r30, Y+5	; 0x05
     e54:	fe 81       	ldd	r31, Y+6	; 0x06
     e56:	86 85       	ldd	r24, Z+14	; 0x0e
     e58:	97 85       	ldd	r25, Z+15	; 0x0f
     e5a:	80 1b       	sub	r24, r16
     e5c:	91 0b       	sbc	r25, r17
     e5e:	bc 01       	movw	r22, r24
     e60:	12 f4       	brpl	.+4      	; 0xe66 <defuzzification+0xaa>
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	75 95       	asr	r23
     e68:	67 95       	ror	r22
            centroid = centroid + intermed;
     e6a:	88 27       	eor	r24, r24
     e6c:	77 fd       	sbrc	r23, 7
     e6e:	80 95       	com	r24
     e70:	98 2f       	mov	r25, r24
     e72:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatsisf>
     e76:	a5 01       	movw	r20, r10
     e78:	94 01       	movw	r18, r8
     e7a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	63 2d       	mov	r22, r3
     e90:	72 2d       	mov	r23, r2
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
     e9a:	36 2e       	mov	r3, r22
     e9c:	27 2e       	mov	r2, r23
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     ea2:	a7 01       	movw	r20, r14
     ea4:	96 01       	movw	r18, r12
     ea6:	65 2d       	mov	r22, r5
     ea8:	76 2d       	mov	r23, r6
     eaa:	87 2d       	mov	r24, r7
     eac:	94 2d       	mov	r25, r4
     eae:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
     eb2:	56 2e       	mov	r5, r22
     eb4:	67 2e       	mov	r6, r23
     eb6:	78 2e       	mov	r7, r24
     eb8:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     eba:	ed 81       	ldd	r30, Y+5	; 0x05
     ebc:	fe 81       	ldd	r31, Y+6	; 0x06
     ebe:	04 88       	ldd	r0, Z+20	; 0x14
     ec0:	f5 89       	ldd	r31, Z+21	; 0x15
     ec2:	e0 2d       	mov	r30, r0
     ec4:	fe 83       	std	Y+6, r31	; 0x06
     ec6:	ed 83       	std	Y+5, r30	; 0x05
     ec8:	ef 2b       	or	r30, r31
     eca:	09 f0       	breq	.+2      	; 0xece <defuzzification+0x112>
     ecc:	a9 cf       	rjmp	.-174    	; 0xe20 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     ece:	26 2f       	mov	r18, r22
     ed0:	37 2f       	mov	r19, r23
     ed2:	48 2f       	mov	r20, r24
     ed4:	59 2f       	mov	r21, r25
     ed6:	63 2d       	mov	r22, r3
     ed8:	72 2d       	mov	r23, r2
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__divsf3>
     ee2:	26 2f       	mov	r18, r22
     ee4:	37 2f       	mov	r19, r23
     ee6:	48 2f       	mov	r20, r24
     ee8:	59 2f       	mov	r21, r25
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     ef4:	62 2f       	mov	r22, r18
     ef6:	73 2f       	mov	r23, r19
     ef8:	84 2f       	mov	r24, r20
     efa:	95 2f       	mov	r25, r21
     efc:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixsfsi>
     f00:	eb 81       	ldd	r30, Y+3	; 0x03
     f02:	fc 81       	ldd	r31, Y+4	; 0x04
     f04:	73 87       	std	Z+11, r23	; 0x0b
     f06:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     f08:	86 85       	ldd	r24, Z+14	; 0x0e
     f0a:	97 85       	ldd	r25, Z+15	; 0x0f
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	89 2b       	or	r24, r25
     f12:	09 f0       	breq	.+2      	; 0xf16 <defuzzification+0x15a>
     f14:	73 cf       	rjmp	.-282    	; 0xdfc <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     f16:	26 96       	adiw	r28, 0x06	; 6
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	3f 90       	pop	r3
     f44:	2f 90       	pop	r2
     f46:	08 95       	ret

00000f48 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	6a 01       	movw	r12, r20
     f60:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     f62:	0e 94 85 12 	call	0x250a	; 0x250a <strcpy>
    newMf->value = 0;
     f66:	1b 86       	std	Y+11, r1	; 0x0b
     f68:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     f6a:	dd 86       	std	Y+13, r13	; 0x0d
     f6c:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     f6e:	ff 86       	std	Y+15, r15	; 0x0f
     f70:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     f72:	b5 01       	movw	r22, r10
     f74:	6c 19       	sub	r22, r12
     f76:	7d 09       	sbc	r23, r13
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	31 e0       	ldi	r19, 0x01	; 1
     f7c:	c9 01       	movw	r24, r18
     f7e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divmodhi4>
     f82:	79 8b       	std	Y+17, r23	; 0x11
     f84:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     f86:	b7 01       	movw	r22, r14
     f88:	60 1b       	sub	r22, r16
     f8a:	71 0b       	sbc	r23, r17
     f8c:	c9 01       	movw	r24, r18
     f8e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divmodhi4>
     f92:	7b 8b       	std	Y+19, r23	; 0x13
     f94:	6a 8b       	std	Y+18, r22	; 0x12
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	08 95       	ret

00000fac <straightIntersection>:
void straightIntersection(int c1);



void straightIntersection(int c1)
{
     fac:	4f 92       	push	r4
     fae:	5f 92       	push	r5
     fb0:	6f 92       	push	r6
     fb2:	7f 92       	push	r7
     fb4:	8f 92       	push	r8
     fb6:	9f 92       	push	r9
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	ce 5c       	subi	r28, 0xCE	; 206
     fd2:	d1 09       	sbc	r29, r1
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
	

	
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	//
	struct io_type cPosition; strcpy(cPosition.name, "cPosition");
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	e8 e9       	ldi	r30, 0x98	; 152
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	de 01       	movw	r26, r28
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	01 90       	ld	r0, Z+
     fea:	0d 92       	st	X+, r0
     fec:	2a 95       	dec	r18
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <straightIntersection+0x3c>


	// set iErr's input value to measErr value
	if(c1<50)				// if sensor value is smaller than cPosition's input set's lower limit
     ff0:	82 33       	cpi	r24, 0x32	; 50
     ff2:	91 05       	cpc	r25, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <straightIntersection+0x54>
	{
		cPosition.value = 50;  // force input value to lowest point in cPosition's input set
     ff6:	82 e3       	ldi	r24, 0x32	; 50
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9c 87       	std	Y+12, r25	; 0x0c
     ffc:	8b 87       	std	Y+11, r24	; 0x0b
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <straightIntersection+0x68>
	}
	else if(c1>200)			// if sensor value is bigger than cPosition's input set's upper limit
    1000:	89 3c       	cpi	r24, 0xC9	; 201
    1002:	91 05       	cpc	r25, r1
    1004:	2c f0       	brlt	.+10     	; 0x1010 <straightIntersection+0x64>
	{
		cPosition.value = 200;  // force input value to lowest point in cPosition's input set
    1006:	88 ec       	ldi	r24, 0xC8	; 200
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9c 87       	std	Y+12, r25	; 0x0c
    100c:	8b 87       	std	Y+11, r24	; 0x0b
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <straightIntersection+0x68>
	}
	else
	{
		cPosition.value = c1;
    1010:	9c 87       	std	Y+12, r25	; 0x0c
    1012:	8b 87       	std	Y+11, r24	; 0x0b
	}
	struct mf_type cRight;
	MATLAB_MF(&cRight, "cRight", 49, 50, 80, 100); // Min_value = 160
    1014:	5e 01       	movw	r10, r28
    1016:	21 e1       	ldi	r18, 0x11	; 17
    1018:	a2 0e       	add	r10, r18
    101a:	b1 1c       	adc	r11, r1
    101c:	0f 2e       	mov	r0, r31
    101e:	f4 e6       	ldi	r31, 0x64	; 100
    1020:	ef 2e       	mov	r14, r31
    1022:	f1 2c       	mov	r15, r1
    1024:	f0 2d       	mov	r31, r0
    1026:	00 e5       	ldi	r16, 0x50	; 80
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	22 e3       	ldi	r18, 0x32	; 50
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	41 e3       	ldi	r20, 0x31	; 49
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	64 e8       	ldi	r22, 0x84	; 132
    1034:	71 e0       	ldi	r23, 0x01	; 1
    1036:	c5 01       	movw	r24, r10
    1038:	87 df       	rcall	.-242    	; 0xf48 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 80, 120, 120, 160);
    103a:	6e 01       	movw	r12, r28
    103c:	47 e2       	ldi	r20, 0x27	; 39
    103e:	c4 0e       	add	r12, r20
    1040:	d1 1c       	adc	r13, r1
    1042:	0f 2e       	mov	r0, r31
    1044:	f0 ea       	ldi	r31, 0xA0	; 160
    1046:	ef 2e       	mov	r14, r31
    1048:	f1 2c       	mov	r15, r1
    104a:	f0 2d       	mov	r31, r0
    104c:	08 e7       	ldi	r16, 0x78	; 120
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	28 e7       	ldi	r18, 0x78	; 120
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e5       	ldi	r20, 0x50	; 80
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	6b e8       	ldi	r22, 0x8B	; 139
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	c6 01       	movw	r24, r12
    105e:	74 df       	rcall	.-280    	; 0xf48 <MATLAB_MF>
	struct mf_type cLeft;
	MATLAB_MF(&cLeft, "cLeft", 140, 180, 200, 201); // Max_value = 370
    1060:	2e 01       	movw	r4, r28
    1062:	8d e3       	ldi	r24, 0x3D	; 61
    1064:	48 0e       	add	r4, r24
    1066:	51 1c       	adc	r5, r1
    1068:	0f 2e       	mov	r0, r31
    106a:	f9 ec       	ldi	r31, 0xC9	; 201
    106c:	ef 2e       	mov	r14, r31
    106e:	f1 2c       	mov	r15, r1
    1070:	f0 2d       	mov	r31, r0
    1072:	08 ec       	ldi	r16, 0xC8	; 200
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	24 eb       	ldi	r18, 0xB4	; 180
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4c e8       	ldi	r20, 0x8C	; 140
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	62 e9       	ldi	r22, 0x92	; 146
    1080:	71 e0       	ldi	r23, 0x01	; 1
    1082:	c2 01       	movw	r24, r4
    1084:	61 df       	rcall	.-318    	; 0xf48 <MATLAB_MF>


	cPosition.membership_functions = &cRight;
    1086:	be 86       	std	Y+14, r11	; 0x0e
    1088:	ad 86       	std	Y+13, r10	; 0x0d
	cRight.next = &centre;
    108a:	de a2       	std	Y+38, r13	; 0x26
    108c:	cd a2       	std	Y+37, r12	; 0x25
	centre.next = &cLeft;
    108e:	5c ae       	std	Y+60, r5	; 0x3c
    1090:	4b ae       	std	Y+59, r4	; 0x3b
	cLeft.next = NULL;
    1092:	63 96       	adiw	r28, 0x13	; 19
    1094:	1f ae       	std	Y+63, r1	; 0x3f
    1096:	1e ae       	std	Y+62, r1	; 0x3e
    1098:	63 97       	sbiw	r28, 0x13	; 19

	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////
	//
	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    109a:	6e 01       	movw	r12, r28
    109c:	e3 e5       	ldi	r30, 0x53	; 83
    109e:	ce 0e       	add	r12, r30
    10a0:	d1 1c       	adc	r13, r1
    10a2:	89 e0       	ldi	r24, 0x09	; 9
    10a4:	e9 e0       	ldi	r30, 0x09	; 9
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	d6 01       	movw	r26, r12
    10aa:	01 90       	ld	r0, Z+
    10ac:	0d 92       	st	X+, r0
    10ae:	8a 95       	dec	r24
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <straightIntersection+0xfe>

	struct mf_type left;
	MATLAB_MF(&left, "left", 244, 248, 248, 252);           // TODO: needs to be tuned
    10b2:	3e 01       	movw	r6, r28
    10b4:	f3 e6       	ldi	r31, 0x63	; 99
    10b6:	6f 0e       	add	r6, r31
    10b8:	71 1c       	adc	r7, r1
    10ba:	0f 2e       	mov	r0, r31
    10bc:	fc ef       	ldi	r31, 0xFC	; 252
    10be:	ef 2e       	mov	r14, r31
    10c0:	f1 2c       	mov	r15, r1
    10c2:	f0 2d       	mov	r31, r0
    10c4:	08 ef       	ldi	r16, 0xF8	; 248
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	28 ef       	ldi	r18, 0xF8	; 248
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	44 ef       	ldi	r20, 0xF4	; 244
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	60 e2       	ldi	r22, 0x20	; 32
    10d2:	71 e0       	ldi	r23, 0x01	; 1
    10d4:	c3 01       	movw	r24, r6
    10d6:	38 df       	rcall	.-400    	; 0xf48 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 251, 259, 259, 267);
    10d8:	5e 01       	movw	r10, r28
    10da:	29 e7       	ldi	r18, 0x79	; 121
    10dc:	a2 0e       	add	r10, r18
    10de:	b1 1c       	adc	r11, r1
    10e0:	0f 2e       	mov	r0, r31
    10e2:	fb e0       	ldi	r31, 0x0B	; 11
    10e4:	ef 2e       	mov	r14, r31
    10e6:	ff 24       	eor	r15, r15
    10e8:	f3 94       	inc	r15
    10ea:	f0 2d       	mov	r31, r0
    10ec:	03 e0       	ldi	r16, 0x03	; 3
    10ee:	11 e0       	ldi	r17, 0x01	; 1
    10f0:	23 e0       	ldi	r18, 0x03	; 3
    10f2:	31 e0       	ldi	r19, 0x01	; 1
    10f4:	4b ef       	ldi	r20, 0xFB	; 251
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	65 e2       	ldi	r22, 0x25	; 37
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	c5 01       	movw	r24, r10
    10fe:	24 df       	rcall	.-440    	; 0xf48 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 266, 271, 271, 276);         // TODO: needs to be tuned
    1100:	4e 01       	movw	r8, r28
    1102:	4f e8       	ldi	r20, 0x8F	; 143
    1104:	84 0e       	add	r8, r20
    1106:	91 1c       	adc	r9, r1
    1108:	0f 2e       	mov	r0, r31
    110a:	f4 e1       	ldi	r31, 0x14	; 20
    110c:	ef 2e       	mov	r14, r31
    110e:	ff 24       	eor	r15, r15
    1110:	f3 94       	inc	r15
    1112:	f0 2d       	mov	r31, r0
    1114:	0f e0       	ldi	r16, 0x0F	; 15
    1116:	11 e0       	ldi	r17, 0x01	; 1
    1118:	2f e0       	ldi	r18, 0x0F	; 15
    111a:	31 e0       	ldi	r19, 0x01	; 1
    111c:	4a e0       	ldi	r20, 0x0A	; 10
    111e:	51 e0       	ldi	r21, 0x01	; 1
    1120:	6e e2       	ldi	r22, 0x2E	; 46
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	c4 01       	movw	r24, r8
    1126:	10 df       	rcall	.-480    	; 0xf48 <MATLAB_MF>


	steering.membership_functions = &right;
    1128:	f6 01       	movw	r30, r12
    112a:	95 86       	std	Z+13, r9	; 0x0d
    112c:	84 86       	std	Z+12, r8	; 0x0c
	right.next = &straight;
    112e:	f4 01       	movw	r30, r8
    1130:	b5 8a       	std	Z+21, r11	; 0x15
    1132:	a4 8a       	std	Z+20, r10	; 0x14
	straight.next = &left;
    1134:	f5 01       	movw	r30, r10
    1136:	75 8a       	std	Z+21, r7	; 0x15
    1138:	64 8a       	std	Z+20, r6	; 0x14
	left.next = NULL;
    113a:	f3 01       	movw	r30, r6
    113c:	15 8a       	std	Z+21, r1	; 0x15
    113e:	14 8a       	std	Z+20, r1	; 0x14



	// pointers to top of lists
	//
	System_Inputs = &cPosition;
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	90 93 1d 03 	sts	0x031D, r25
    1148:	80 93 1c 03 	sts	0x031C, r24
	cPosition.next = NULL;
    114c:	18 8a       	std	Y+16, r1	; 0x10
    114e:	1f 86       	std	Y+15, r1	; 0x0f
	System_Outputs = &steering;
    1150:	d0 92 1b 03 	sts	0x031B, r13
    1154:	c0 92 1a 03 	sts	0x031A, r12
	steering.next = NULL;
    1158:	f6 01       	movw	r30, r12
    115a:	17 86       	std	Z+15, r1	; 0x0f
    115c:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    115e:	8c 55       	subi	r24, 0x5C	; 92
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	90 93 1f 03 	sts	0x031F, r25
    1166:	80 93 1e 03 	sts	0x031E, r24
	struct rule_type rule2; rule1.next = &rule2;
    116a:	de 01       	movw	r26, r28
    116c:	a5 55       	subi	r26, 0x55	; 85
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	fc 01       	movw	r30, r24
    1172:	b5 83       	std	Z+5, r27	; 0x05
    1174:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1176:	be 01       	movw	r22, r28
    1178:	6f 54       	subi	r22, 0x4F	; 79
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	15 96       	adiw	r26, 0x05	; 5
    117e:	7c 93       	st	X, r23
    1180:	6e 93       	st	-X, r22
    1182:	14 97       	sbiw	r26, 0x04	; 4
    1184:	fb 01       	movw	r30, r22
    1186:	15 82       	std	Z+5, r1	; 0x05
    1188:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if cPosition is cRight then steering is left"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    118a:	ae 01       	movw	r20, r28
    118c:	49 54       	subi	r20, 0x49	; 73
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	fc 01       	movw	r30, r24
    1192:	51 83       	std	Z+1, r21	; 0x01
    1194:	40 83       	st	Z, r20
    1196:	fa 01       	movw	r30, r20
    1198:	13 82       	std	Z+3, r1	; 0x03
    119a:	12 82       	std	Z+2, r1	; 0x02
    119c:	9e 01       	movw	r18, r28
    119e:	25 54       	subi	r18, 0x45	; 69
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	fc 01       	movw	r30, r24
    11a4:	33 83       	std	Z+3, r19	; 0x03
    11a6:	22 83       	std	Z+2, r18	; 0x02
    11a8:	f9 01       	movw	r30, r18
    11aa:	13 82       	std	Z+3, r1	; 0x03
    11ac:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &cRight.value; then1.value = &left.value;
    11ae:	8a 58       	subi	r24, 0x8A	; 138
    11b0:	91 09       	sbc	r25, r1
    11b2:	fa 01       	movw	r30, r20
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	fa e0       	ldi	r31, 0x0A	; 10
    11ba:	6f 0e       	add	r6, r31
    11bc:	71 1c       	adc	r7, r1
    11be:	f9 01       	movw	r30, r18
    11c0:	71 82       	std	Z+1, r7	; 0x01
    11c2:	60 82       	st	Z, r6

	////RULE 2 "if cPosition is cLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    11c4:	2c 5f       	subi	r18, 0xFC	; 252
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	3c 93       	st	X, r19
    11cc:	2e 93       	st	-X, r18
    11ce:	f9 01       	movw	r30, r18
    11d0:	13 82       	std	Z+3, r1	; 0x03
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	88 55       	subi	r24, 0x58	; 88
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	13 96       	adiw	r26, 0x03	; 3
    11da:	9c 93       	st	X, r25
    11dc:	8e 93       	st	-X, r24
    11de:	12 97       	sbiw	r26, 0x02	; 2
    11e0:	fc 01       	movw	r30, r24
    11e2:	13 82       	std	Z+3, r1	; 0x03
    11e4:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &cLeft.value; then2.value = &right.value;
    11e6:	fa e0       	ldi	r31, 0x0A	; 10
    11e8:	4f 0e       	add	r4, r31
    11ea:	51 1c       	adc	r5, r1
    11ec:	f9 01       	movw	r30, r18
    11ee:	51 82       	std	Z+1, r5	; 0x01
    11f0:	40 82       	st	Z, r4
    11f2:	fa e0       	ldi	r31, 0x0A	; 10
    11f4:	8f 0e       	add	r8, r31
    11f6:	91 1c       	adc	r9, r1
    11f8:	fc 01       	movw	r30, r24
    11fa:	91 82       	std	Z+1, r9	; 0x01
    11fc:	80 82       	st	Z, r8

	////RULE 3 "if cPosition is centre and vOrientation is rightOriented then steering is left"
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    11fe:	04 96       	adiw	r24, 0x04	; 4
    1200:	fb 01       	movw	r30, r22
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	fc 01       	movw	r30, r24
    1208:	13 82       	std	Z+3, r1	; 0x03
    120a:	12 82       	std	Z+2, r1	; 0x02
    120c:	90 96       	adiw	r26, 0x20	; 32
    120e:	fb 01       	movw	r30, r22
    1210:	b3 83       	std	Z+3, r27	; 0x03
    1212:	a2 83       	std	Z+2, r26	; 0x02
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	1c 92       	st	X, r1
    1218:	1e 92       	st	-X, r1
    121a:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &centre.value; then3.value = &straight.value;
    121c:	2e 58       	subi	r18, 0x8E	; 142
    121e:	31 09       	sbc	r19, r1
    1220:	fc 01       	movw	r30, r24
    1222:	31 83       	std	Z+1, r19	; 0x01
    1224:	20 83       	st	Z, r18
    1226:	fa e0       	ldi	r31, 0x0A	; 10
    1228:	af 0e       	add	r10, r31
    122a:	b1 1c       	adc	r11, r1
    122c:	ad 92       	st	X+, r10
    122e:	bc 92       	st	X, r11


	// the methods performing the FLC
	fuzzification();
    1230:	58 dd       	rcall	.-1360   	; 0xce2 <fuzzification>
	rule_evaluation();
    1232:	7e dd       	rcall	.-1284   	; 0xd30 <rule_evaluation>
	defuzzification();
    1234:	c3 dd       	rcall	.-1146   	; 0xdbc <defuzzification>
	
	steering.value = steering.value*10;
    1236:	f6 01       	movw	r30, r12
    1238:	22 85       	ldd	r18, Z+10	; 0x0a
    123a:	33 85       	ldd	r19, Z+11	; 0x0b
    123c:	c9 01       	movw	r24, r18
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	93 87       	std	Z+11, r25	; 0x0b
    1254:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1256:	86 3e       	cpi	r24, 0xE6	; 230
    1258:	f7 e0       	ldi	r31, 0x07	; 7
    125a:	9f 07       	cpc	r25, r31
    125c:	24 f4       	brge	.+8      	; 0x1266 <straightIntersection+0x2ba>
	{
		setServo(MAXLEFT);
    125e:	86 ee       	ldi	r24, 0xE6	; 230
    1260:	97 e0       	ldi	r25, 0x07	; 7
    1262:	c3 d4       	rcall	.+2438   	; 0x1bea <setServo>
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <straightIntersection+0x2cc>
	}
	else if (steering.value >MAXRIGHT)
    1266:	85 3e       	cpi	r24, 0xE5	; 229
    1268:	2c e0       	ldi	r18, 0x0C	; 12
    126a:	92 07       	cpc	r25, r18
    126c:	24 f0       	brlt	.+8      	; 0x1276 <straightIntersection+0x2ca>
	{
		setServo(MAXRIGHT);
    126e:	84 ee       	ldi	r24, 0xE4	; 228
    1270:	9c e0       	ldi	r25, 0x0C	; 12
    1272:	bb d4       	rcall	.+2422   	; 0x1bea <setServo>
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <straightIntersection+0x2cc>
	}
	else
	{
		setServo(steering.value);
    1276:	b9 d4       	rcall	.+2418   	; 0x1bea <setServo>
	}

}
    1278:	c2 53       	subi	r28, 0x32	; 50
    127a:	df 4f       	sbci	r29, 0xFF	; 255
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	6f 90       	pop	r6
    12a2:	5f 90       	pop	r5
    12a4:	4f 90       	pop	r4
    12a6:	08 95       	ret

000012a8 <intersection>:


void intersection(int gyro, unsigned char type, int c, int v)
{
	if (gyro<0)
    12a8:	99 23       	and	r25, r25
    12aa:	24 f4       	brge	.+8      	; 0x12b4 <intersection+0xc>
	{
		gyro = -gyro;
    12ac:	91 95       	neg	r25
    12ae:	81 95       	neg	r24
    12b0:	91 09       	sbc	r25, r1
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <intersection+0x16>
    12b4:	8e 37       	cpi	r24, 0x7E	; 126
    12b6:	91 05       	cpc	r25, r1
    12b8:	14 f0       	brlt	.+4      	; 0x12be <intersection+0x16>
    12ba:	8d e7       	ldi	r24, 0x7D	; 125
    12bc:	90 e0       	ldi	r25, 0x00	; 0
	{
		gyro = maxGyro;
	}
	
	
	if (type == 'r')
    12be:	62 37       	cpi	r22, 0x72	; 114
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <intersection+0x2e>
	{
		// rightTurn(gyro);
		if (gyro<20)
    12c2:	44 97       	sbiw	r24, 0x14	; 20
    12c4:	24 f4       	brge	.+8      	; 0x12ce <intersection+0x26>
		{
			setServo(MAXRIGHT-400);
    12c6:	84 e5       	ldi	r24, 0x54	; 84
    12c8:	9b e0       	ldi	r25, 0x0B	; 11
    12ca:	8f c4       	rjmp	.+2334   	; 0x1bea <setServo>
    12cc:	08 95       	ret
		}
		else
		{
			setServo(MAXRIGHT); // maxright-180
    12ce:	84 ee       	ldi	r24, 0xE4	; 228
    12d0:	9c e0       	ldi	r25, 0x0C	; 12
    12d2:	8b c4       	rjmp	.+2326   	; 0x1bea <setServo>
    12d4:	08 95       	ret
		}
	}
	else if (type == 'l')
    12d6:	6c 36       	cpi	r22, 0x6C	; 108
    12d8:	51 f4       	brne	.+20     	; 0x12ee <intersection+0x46>
	{
		// leftTurn(gyro);               // original plan 6
		if (gyro < 6)                  // hard coded
    12da:	06 97       	sbiw	r24, 0x06	; 6
    12dc:	24 f4       	brge	.+8      	; 0x12e6 <intersection+0x3e>
		{
			setServo(STRAIGHT-150);
    12de:	88 e8       	ldi	r24, 0x88	; 136
    12e0:	99 e0       	ldi	r25, 0x09	; 9
    12e2:	83 c4       	rjmp	.+2310   	; 0x1bea <setServo>
    12e4:	08 95       	ret
		}
		else
		{
			setServo(MAXLEFT);
    12e6:	86 ee       	ldi	r24, 0xE6	; 230
    12e8:	97 e0       	ldi	r25, 0x07	; 7
    12ea:	7f c4       	rjmp	.+2302   	; 0x1bea <setServo>
    12ec:	08 95       	ret
		}
	}
	else if (type == 'F')
    12ee:	66 34       	cpi	r22, 0x46	; 70
    12f0:	61 f4       	brne	.+24     	; 0x130a <intersection+0x62>
	{
		if (v==81 && c == 2)             // State "no left side"
    12f2:	21 35       	cpi	r18, 0x51	; 81
    12f4:	31 05       	cpc	r19, r1
    12f6:	39 f4       	brne	.+14     	; 0x1306 <intersection+0x5e>
    12f8:	42 30       	cpi	r20, 0x02	; 2
    12fa:	51 05       	cpc	r21, r1
    12fc:	21 f4       	brne	.+8      	; 0x1306 <intersection+0x5e>
		{
			setServo(STRAIGHT-300);
    12fe:	82 ef       	ldi	r24, 0xF2	; 242
    1300:	98 e0       	ldi	r25, 0x08	; 8
    1302:	73 c4       	rjmp	.+2278   	; 0x1bea <setServo>
    1304:	08 95       	ret
		}
		else
		{
			//setServo(STRAIGHT);
			straightIntersection(c);
    1306:	ca 01       	movw	r24, r20
    1308:	51 ce       	rjmp	.-862    	; 0xfac <straightIntersection>
    130a:	08 95       	ret

0000130c <carInit>:
* to allow the operator to turn on the ESC manually
* and thus set the neutral
*/
void carInit(void)
{
	pwmInit();
    130c:	44 d4       	rcall	.+2184   	; 0x1b96 <pwmInit>
	spi_slave_init();
    130e:	f4 d4       	rcall	.+2536   	; 0x1cf8 <spi_slave_init>
	OCR1A = NEUTRAL;
    1310:	8d ec       	ldi	r24, 0xCD	; 205
    1312:	9a e0       	ldi	r25, 0x0A	; 10
    1314:	90 93 89 00 	sts	0x0089, r25
    1318:	80 93 88 00 	sts	0x0088, r24
	OCR1B = STRAIGHT;
    131c:	8e e1       	ldi	r24, 0x1E	; 30
    131e:	9a e0       	ldi	r25, 0x0A	; 10
    1320:	90 93 8b 00 	sts	0x008B, r25
    1324:	80 93 8a 00 	sts	0x008A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	90 ee       	ldi	r25, 0xE0	; 224
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	80 40       	sbci	r24, 0x00	; 0
    1332:	90 40       	sbci	r25, 0x00	; 0
    1334:	e1 f7       	brne	.-8      	; 0x132e <carInit+0x22>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <carInit+0x2c>
    1338:	00 00       	nop
    133a:	08 95       	ret

0000133c <main>:



//////////////// MAIN /////////////////////////////////////////////////////////////
int main (void)
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	2f 97       	sbiw	r28, 0x0f	; 15
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	straightIntersection(200);
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	2b de       	rcall	.-938    	; 0xfac <straightIntersection>
	
	int man_velocity = 0;
    1356:	1a 82       	std	Y+2, r1	; 0x02
    1358:	19 82       	std	Y+1, r1	; 0x01
	int man_steering = 0;
    135a:	1c 82       	std	Y+4, r1	; 0x04
    135c:	1b 82       	std	Y+3, r1	; 0x03
	carInit();
    135e:	d6 df       	rcall	.-84     	; 0x130c <carInit>
	volatile struct Sensor_information sensor_info;
	struct Sensor_information* sens_info_ptr;
	sens_info_ptr = &sensor_info;
	volatile unsigned char control_mode;
	unsigned char prev_control_mode;
	sei();
    1360:	78 94       	sei
	
	isParking = 0;
    1362:	10 92 18 03 	sts	0x0318, r1
			unsigned char type = (unsigned) (char) sensor_info.next_turn_decision;
			int manualInstruction = (int) sensor_info.dist_right_line;
			
			if(control_mode == 0x05 && prev_control_mode == 0x04){
				countInit(30000);
				isParking = 1;
    1366:	bb 24       	eor	r11, r11
    1368:	b3 94       	inc	r11
				}
				
				else if (control_mode == 1)
				{
					
					FLC_speed(OCR1A, sF, OCR1B);
    136a:	0f 2e       	mov	r0, r31
    136c:	fa e8       	ldi	r31, 0x8A	; 138
    136e:	cf 2e       	mov	r12, r31
    1370:	d1 2c       	mov	r13, r1
    1372:	f0 2d       	mov	r31, r0
    1374:	0f 2e       	mov	r0, r31
    1376:	f8 e8       	ldi	r31, 0x88	; 136
    1378:	ef 2e       	mov	r14, r31
    137a:	f1 2c       	mov	r15, r1
    137c:	f0 2d       	mov	r31, r0
	
	isParking = 0;
	
	while (1)
	{
		if (is_package_recieved())
    137e:	49 d5       	rcall	.+2706   	; 0x1e12 <is_package_recieved>
    1380:	88 23       	and	r24, r24
    1382:	e9 f3       	breq	.-6      	; 0x137e <main+0x42>
		{
			
			//Reading Information
			prev_control_mode = control_mode;
    1384:	9f 84       	ldd	r9, Y+15	; 0x0f
			read_sensor_info(&control_mode, sens_info_ptr);
    1386:	be 01       	movw	r22, r28
    1388:	6b 5f       	subi	r22, 0xFB	; 251
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	0f 96       	adiw	r24, 0x0f	; 15
    1390:	4a d5       	rcall	.+2708   	; 0x1e26 <read_sensor_info>
			
			int sF = (int) sensor_info.dist_sonic_middle;
    1392:	1f 81       	ldd	r17, Y+7	; 0x07
			int sB = (int) sensor_info.dist_sonic_back;
    1394:	6a 84       	ldd	r6, Y+10	; 0x0a
			int c = (int) sensor_info.dist_right_line;
    1396:	0d 81       	ldd	r16, Y+5	; 0x05
			int v = (int) sensor_info.angular_diff;
    1398:	8e 80       	ldd	r8, Y+6	; 0x06
			int gyro = (int) sensor_info.angle - 125;
    139a:	7c 84       	ldd	r7, Y+12	; 0x0c
			unsigned char type = (unsigned) (char) sensor_info.next_turn_decision;
    139c:	8e 85       	ldd	r24, Y+14	; 0x0e
			int manualInstruction = (int) sensor_info.dist_right_line;
    139e:	ad 80       	ldd	r10, Y+5	; 0x05
			
			if(control_mode == 0x05 && prev_control_mode == 0x04){
    13a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a2:	85 30       	cpi	r24, 0x05	; 5
    13a4:	49 f4       	brne	.+18     	; 0x13b8 <main+0x7c>
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	98 12       	cpse	r9, r24
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <main+0x7c>
				countInit(30000);
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	95 e7       	ldi	r25, 0x75	; 117
    13b0:	0e 94 77 00 	call	0xee	; 0xee <countInit>
				isParking = 1;
    13b4:	b0 92 18 03 	sts	0x0318, r11
			}
			
			cli();
    13b8:	f8 94       	cli
			
			if(!isParking)
    13ba:	80 91 18 03 	lds	r24, 0x0318
    13be:	81 11       	cpse	r24, r1
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <main+0x104>
			
			//Reading Information
			prev_control_mode = control_mode;
			read_sensor_info(&control_mode, sens_info_ptr);
			
			int sF = (int) sensor_info.dist_sonic_middle;
    13c2:	61 2f       	mov	r22, r17
    13c4:	70 e0       	ldi	r23, 0x00	; 0
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
    13c6:	10 e0       	ldi	r17, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
    13c8:	91 2c       	mov	r9, r1
			
			cli();
			
			if(!isParking)
			{
				if (control_mode == 0)
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	81 11       	cpse	r24, r1
    13ce:	0c c0       	rjmp	.+24     	; 0x13e8 <main+0xac>
				{
					FLC_speed(OCR1A, sF, OCR1B);
    13d0:	f6 01       	movw	r30, r12
    13d2:	40 81       	ld	r20, Z
    13d4:	51 81       	ldd	r21, Z+1	; 0x01
    13d6:	f7 01       	movw	r30, r14
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	0e 94 8b 00 	call	0x116	; 0x116 <FLC_speed>
					nFuzzySteering(c,v);
    13e0:	b4 01       	movw	r22, r8
    13e2:	c8 01       	movw	r24, r16
    13e4:	c2 d3       	rcall	.+1924   	; 0x1b6a <nFuzzySteering>
    13e6:	30 c0       	rjmp	.+96     	; 0x1448 <main+0x10c>
				}
				else if (control_mode == 4)
    13e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	39 f4       	brne	.+14     	; 0x13fc <main+0xc0>
				{
					setESC(NEUTRAL);
    13ee:	8d ec       	ldi	r24, 0xCD	; 205
    13f0:	9a e0       	ldi	r25, 0x0A	; 10
    13f2:	e0 d3       	rcall	.+1984   	; 0x1bb4 <setESC>
					setServo(STRAIGHT);
    13f4:	8e e1       	ldi	r24, 0x1E	; 30
    13f6:	9a e0       	ldi	r25, 0x0A	; 10
    13f8:	f8 d3       	rcall	.+2032   	; 0x1bea <setServo>
    13fa:	26 c0       	rjmp	.+76     	; 0x1448 <main+0x10c>
				}
				
				else if (control_mode == 1)
    13fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	89 f4       	brne	.+34     	; 0x1424 <main+0xe8>
				{
					
					FLC_speed(OCR1A, sF, OCR1B);
    1402:	f6 01       	movw	r30, r12
    1404:	40 81       	ld	r20, Z
    1406:	51 81       	ldd	r21, Z+1	; 0x01
    1408:	f7 01       	movw	r30, r14
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	0e 94 8b 00 	call	0x116	; 0x116 <FLC_speed>
					intersection(gyro, sensor_info.next_turn_decision, c, v);
    1412:	6e 85       	ldd	r22, Y+14	; 0x0e
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro = (int) sensor_info.angle - 125;
    1414:	87 2d       	mov	r24, r7
    1416:	90 e0       	ldi	r25, 0x00	; 0
				
				else if (control_mode == 1)
				{
					
					FLC_speed(OCR1A, sF, OCR1B);
					intersection(gyro, sensor_info.next_turn_decision, c, v);
    1418:	94 01       	movw	r18, r8
    141a:	a8 01       	movw	r20, r16
    141c:	8d 57       	subi	r24, 0x7D	; 125
    141e:	91 09       	sbc	r25, r1
    1420:	43 df       	rcall	.-378    	; 0x12a8 <intersection>
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <main+0x10c>
				}
				else if (control_mode == 6)
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	86 30       	cpi	r24, 0x06	; 6
    1428:	79 f4       	brne	.+30     	; 0x1448 <main+0x10c>
			//Reading Information
			prev_control_mode = control_mode;
			read_sensor_info(&control_mode, sens_info_ptr);
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
    142a:	46 2d       	mov	r20, r6
    142c:	50 e0       	ldi	r21, 0x00	; 0
					FLC_speed(OCR1A, sF, OCR1B);
					intersection(gyro, sensor_info.next_turn_decision, c, v);
				}
				else if (control_mode == 6)
				{
					manualMode(manualInstruction, sF, sB, &man_velocity, &man_steering);
    142e:	8e 01       	movw	r16, r28
    1430:	0d 5f       	subi	r16, 0xFD	; 253
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	9e 01       	movw	r18, r28
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	8a 2d       	mov	r24, r10
    143c:	15 d0       	rcall	.+42     	; 0x1468 <manualMode>
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <main+0x10c>
				}
			}
			else if (isParking)
    1440:	80 91 18 03 	lds	r24, 0x0318
    1444:	81 11       	cpse	r24, r1
			{
				stop();
    1446:	31 d5       	rcall	.+2658   	; 0x1eaa <stop>
			}

			
			sei();
    1448:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    144a:	f7 01       	movw	r30, r14
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1450:	f6 01       	movw	r30, r12
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte(0x05);
    1456:	85 e0       	ldi	r24, 0x05	; 5
    1458:	85 d4       	rcall	.+2314   	; 0x1d64 <spi_send_byte>
			spi_send_byte(0x06);
    145a:	86 e0       	ldi	r24, 0x06	; 6
    145c:	83 d4       	rcall	.+2310   	; 0x1d64 <spi_send_byte>
			spi_send_byte(0x07);
    145e:	87 e0       	ldi	r24, 0x07	; 7
    1460:	81 d4       	rcall	.+2306   	; 0x1d64 <spi_send_byte>
			spi_send_byte(0x08);
    1462:	88 e0       	ldi	r24, 0x08	; 8
    1464:	7f d4       	rcall	.+2302   	; 0x1d64 <spi_send_byte>
    1466:	8b cf       	rjmp	.-234    	; 0x137e <main+0x42>

00001468 <manualMode>:
 * This method performs the manual mode of driving
 * The manual instructions are forward, left, right, reverse stored in array manualInstruction
 *
 */
void manualMode(char manualInstructions, int sF, int sB, int* man_velocity, int* man_steering)
{
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	e9 01       	movw	r28, r18
	cli(); //disable interrupts	
    1472:	f8 94       	cli
	
	if (manualInstructions & (1<<4))
    1474:	84 ff       	sbrs	r24, 4
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <manualMode+0x1c>
	{
		*man_velocity = *man_velocity +  5;
    1478:	28 81       	ld	r18, Y
    147a:	39 81       	ldd	r19, Y+1	; 0x01
    147c:	2b 5f       	subi	r18, 0xFB	; 251
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	39 83       	std	Y+1, r19	; 0x01
    1482:	28 83       	st	Y, r18
	} 
	if (manualInstructions & (1<<5))
    1484:	85 ff       	sbrs	r24, 5
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <manualMode+0x2c>
	{
		*man_velocity = *man_velocity - 5;
    1488:	28 81       	ld	r18, Y
    148a:	39 81       	ldd	r19, Y+1	; 0x01
    148c:	25 50       	subi	r18, 0x05	; 5
    148e:	31 09       	sbc	r19, r1
    1490:	39 83       	std	Y+1, r19	; 0x01
    1492:	28 83       	st	Y, r18
	}
	if (manualInstructions & (1<<0))
    1494:	80 ff       	sbrs	r24, 0
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <manualMode+0x3e>
	{
		*man_steering = *man_steering - 100;
    1498:	f8 01       	movw	r30, r16
    149a:	20 81       	ld	r18, Z
    149c:	31 81       	ldd	r19, Z+1	; 0x01
    149e:	24 56       	subi	r18, 0x64	; 100
    14a0:	31 09       	sbc	r19, r1
    14a2:	31 83       	std	Z+1, r19	; 0x01
    14a4:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<1))
    14a6:	81 ff       	sbrs	r24, 1
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <manualMode+0x50>
	{
		*man_steering = *man_steering + 100;
    14aa:	f8 01       	movw	r30, r16
    14ac:	20 81       	ld	r18, Z
    14ae:	31 81       	ldd	r19, Z+1	; 0x01
    14b0:	2c 59       	subi	r18, 0x9C	; 156
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	31 83       	std	Z+1, r19	; 0x01
    14b6:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<2))
    14b8:	82 ff       	sbrs	r24, 2
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <manualMode+0x5a>
	{
		*man_steering = 0;
    14bc:	f8 01       	movw	r30, r16
    14be:	11 82       	std	Z+1, r1	; 0x01
    14c0:	10 82       	st	Z, r1
	}
	if (manualInstructions & (1<<3))
    14c2:	83 ff       	sbrs	r24, 3
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <manualMode+0x68>
	{
		*man_steering = 0;
    14c6:	f8 01       	movw	r30, r16
    14c8:	11 82       	std	Z+1, r1	; 0x01
    14ca:	10 82       	st	Z, r1
		*man_velocity = 0;
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	18 82       	st	Y, r1
	}
	
	if (sF<30 && (*man_velocity > 0))
    14d0:	6e 31       	cpi	r22, 0x1E	; 30
    14d2:	71 05       	cpc	r23, r1
    14d4:	5c f4       	brge	.+22     	; 0x14ec <manualMode+0x84>
    14d6:	88 81       	ld	r24, Y
    14d8:	99 81       	ldd	r25, Y+1	; 0x01
    14da:	18 16       	cp	r1, r24
    14dc:	19 06       	cpc	r1, r25
    14de:	34 f4       	brge	.+12     	; 0x14ec <manualMode+0x84>
	{
		setESC(NEUTRAL);
    14e0:	8d ec       	ldi	r24, 0xCD	; 205
    14e2:	9a e0       	ldi	r25, 0x0A	; 10
    14e4:	67 d3       	rcall	.+1742   	; 0x1bb4 <setESC>
		*man_velocity = 0;
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	18 82       	st	Y, r1
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <manualMode+0xa8>
	} 
	else if(sB<30 && (*man_velocity < 0))
    14ec:	4e 31       	cpi	r20, 0x1E	; 30
    14ee:	51 05       	cpc	r21, r1
    14f0:	54 f4       	brge	.+20     	; 0x1506 <manualMode+0x9e>
    14f2:	88 81       	ld	r24, Y
    14f4:	99 81       	ldd	r25, Y+1	; 0x01
    14f6:	99 23       	and	r25, r25
    14f8:	34 f4       	brge	.+12     	; 0x1506 <manualMode+0x9e>
	{
		setESC(NEUTRAL);
    14fa:	8d ec       	ldi	r24, 0xCD	; 205
    14fc:	9a e0       	ldi	r25, 0x0A	; 10
    14fe:	5a d3       	rcall	.+1716   	; 0x1bb4 <setESC>
		*man_velocity = 0;
    1500:	19 82       	std	Y+1, r1	; 0x01
    1502:	18 82       	st	Y, r1
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <manualMode+0xa8>
	}
	else
	{
		setESC(NEUTRAL + *man_velocity);	
    1506:	88 81       	ld	r24, Y
    1508:	99 81       	ldd	r25, Y+1	; 0x01
    150a:	83 53       	subi	r24, 0x33	; 51
    150c:	95 4f       	sbci	r25, 0xF5	; 245
    150e:	52 d3       	rcall	.+1700   	; 0x1bb4 <setESC>
	}
	
	setServo(STRAIGHT + *man_steering);
    1510:	f8 01       	movw	r30, r16
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	82 5e       	subi	r24, 0xE2	; 226
    1518:	95 4f       	sbci	r25, 0xF5	; 245
    151a:	67 d3       	rcall	.+1742   	; 0x1bea <setServo>
	
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{      
    1526:	2f 92       	push	r2
    1528:	3f 92       	push	r3
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	9f 92       	push	r9
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	ce 5b       	subi	r28, 0xBE	; 190
    1550:	d1 40       	sbci	r29, 0x01	; 1
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	c3 54       	subi	r28, 0x43	; 67
    155e:	de 4f       	sbci	r29, 0xFE	; 254
    1560:	99 83       	std	Y+1, r25	; 0x01
    1562:	88 83       	st	Y, r24
    1564:	cd 5b       	subi	r28, 0xBD	; 189
    1566:	d1 40       	sbci	r29, 0x01	; 1
    1568:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	
	int adjustC = 10;
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    156a:	88 e0       	ldi	r24, 0x08	; 8
    156c:	e2 ea       	ldi	r30, 0xA2	; 162
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	de 01       	movw	r26, r28
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	8a 95       	dec	r24
    157a:	e1 f7       	brne	.-8      	; 0x1574 <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 120+adjustC, 130+adjustC); // Min_value = 100
    157c:	3e 01       	movw	r6, r28
    157e:	21 e1       	ldi	r18, 0x11	; 17
    1580:	62 0e       	add	r6, r18
    1582:	71 1c       	adc	r7, r1
    1584:	0f 2e       	mov	r0, r31
    1586:	fc e8       	ldi	r31, 0x8C	; 140
    1588:	ef 2e       	mov	r14, r31
    158a:	f1 2c       	mov	r15, r1
    158c:	f0 2d       	mov	r31, r0
    158e:	02 e8       	ldi	r16, 0x82	; 130
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	24 e6       	ldi	r18, 0x64	; 100
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	43 e6       	ldi	r20, 0x63	; 99
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	6a ea       	ldi	r22, 0xAA	; 170
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	c3 01       	movw	r24, r6
    15a0:	d3 dc       	rcall	.-1626   	; 0xf48 <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRig", 120+adjustC, 130+adjustC, 140+adjustC, 145+adjustC);
    15a2:	4e 01       	movw	r8, r28
    15a4:	47 e2       	ldi	r20, 0x27	; 39
    15a6:	84 0e       	add	r8, r20
    15a8:	91 1c       	adc	r9, r1
    15aa:	0f 2e       	mov	r0, r31
    15ac:	fb e9       	ldi	r31, 0x9B	; 155
    15ae:	ef 2e       	mov	r14, r31
    15b0:	f1 2c       	mov	r15, r1
    15b2:	f0 2d       	mov	r31, r0
    15b4:	06 e9       	ldi	r16, 0x96	; 150
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	2c e8       	ldi	r18, 0x8C	; 140
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	42 e8       	ldi	r20, 0x82	; 130
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	63 eb       	ldi	r22, 0xB3	; 179
    15c2:	71 e0       	ldi	r23, 0x01	; 1
    15c4:	c4 01       	movw	r24, r8
    15c6:	c0 dc       	rcall	.-1664   	; 0xf48 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135+adjustC, 150+adjustC, 150+adjustC, 165+adjustC);
    15c8:	2e 01       	movw	r4, r28
    15ca:	6d e3       	ldi	r22, 0x3D	; 61
    15cc:	46 0e       	add	r4, r22
    15ce:	51 1c       	adc	r5, r1
    15d0:	0f 2e       	mov	r0, r31
    15d2:	ff ea       	ldi	r31, 0xAF	; 175
    15d4:	ef 2e       	mov	r14, r31
    15d6:	f1 2c       	mov	r15, r1
    15d8:	f0 2d       	mov	r31, r0
    15da:	00 ea       	ldi	r16, 0xA0	; 160
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	20 ea       	ldi	r18, 0xA0	; 160
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	41 e9       	ldi	r20, 0x91	; 145
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	6b e8       	ldi	r22, 0x8B	; 139
    15e8:	71 e0       	ldi	r23, 0x01	; 1
    15ea:	c2 01       	movw	r24, r4
    15ec:	ad dc       	rcall	.-1702   	; 0xf48 <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLe", 155+adjustC, 160+adjustC, 170+adjustC, 180+adjustC);
    15ee:	5e 01       	movw	r10, r28
    15f0:	83 e5       	ldi	r24, 0x53	; 83
    15f2:	a8 0e       	add	r10, r24
    15f4:	b1 1c       	adc	r11, r1
    15f6:	0f 2e       	mov	r0, r31
    15f8:	fe eb       	ldi	r31, 0xBE	; 190
    15fa:	ef 2e       	mov	r14, r31
    15fc:	f1 2c       	mov	r15, r1
    15fe:	f0 2d       	mov	r31, r0
    1600:	04 eb       	ldi	r16, 0xB4	; 180
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	2a ea       	ldi	r18, 0xAA	; 170
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	45 ea       	ldi	r20, 0xA5	; 165
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	6c eb       	ldi	r22, 0xBC	; 188
    160e:	71 e0       	ldi	r23, 0x01	; 1
    1610:	c5 01       	movw	r24, r10
    1612:	9a dc       	rcall	.-1740   	; 0xf48 <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 170+adjustC, 180+adjustC, 200+adjustC, 201+adjustC);  // Max_value = 200
    1614:	6e 01       	movw	r12, r28
    1616:	99 e6       	ldi	r25, 0x69	; 105
    1618:	c9 0e       	add	r12, r25
    161a:	d1 1c       	adc	r13, r1
    161c:	0f 2e       	mov	r0, r31
    161e:	f3 ed       	ldi	r31, 0xD3	; 211
    1620:	ef 2e       	mov	r14, r31
    1622:	f1 2c       	mov	r15, r1
    1624:	f0 2d       	mov	r31, r0
    1626:	02 ed       	ldi	r16, 0xD2	; 210
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	2e eb       	ldi	r18, 0xBE	; 190
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	44 eb       	ldi	r20, 0xB4	; 180
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	64 ec       	ldi	r22, 0xC4	; 196
    1634:	71 e0       	ldi	r23, 0x01	; 1
    1636:	c6 01       	movw	r24, r12
    1638:	87 dc       	rcall	.-1778   	; 0xf48 <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    163a:	7e 86       	std	Y+14, r7	; 0x0e
    163c:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    163e:	9e a2       	std	Y+38, r9	; 0x26
    1640:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    1642:	5c ae       	std	Y+60, r5	; 0x3c
    1644:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    1646:	63 96       	adiw	r28, 0x13	; 19
    1648:	bf ae       	std	Y+63, r11	; 0x3f
    164a:	ae ae       	std	Y+62, r10	; 0x3e
    164c:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    164e:	f5 01       	movw	r30, r10
    1650:	d5 8a       	std	Z+21, r13	; 0x15
    1652:	c4 8a       	std	Z+20, r12	; 0x14
	farLeft.next = NULL;
    1654:	f6 01       	movw	r30, r12
    1656:	15 8a       	std	Z+21, r1	; 0x15
    1658:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    165a:	c3 54       	subi	r28, 0x43	; 67
    165c:	de 4f       	sbci	r29, 0xFE	; 254
    165e:	88 81       	ld	r24, Y
    1660:	99 81       	ldd	r25, Y+1	; 0x01
    1662:	cd 5b       	subi	r28, 0xBD	; 189
    1664:	d1 40       	sbci	r29, 0x01	; 1
    1666:	84 36       	cpi	r24, 0x64	; 100
    1668:	91 05       	cpc	r25, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <nDoFuzzy+0x150>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    166c:	84 e6       	ldi	r24, 0x64	; 100
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 87       	std	Y+12, r25	; 0x0c
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	16 c0       	rjmp	.+44     	; 0x16a2 <nDoFuzzy+0x17c>
	}
	else if(c>200+adjustC)			// if sensor value is bigger than delta_C's input set's upper limit
    1676:	c3 54       	subi	r28, 0x43	; 67
    1678:	de 4f       	sbci	r29, 0xFE	; 254
    167a:	e8 81       	ld	r30, Y
    167c:	f9 81       	ldd	r31, Y+1	; 0x01
    167e:	cd 5b       	subi	r28, 0xBD	; 189
    1680:	d1 40       	sbci	r29, 0x01	; 1
    1682:	e3 3d       	cpi	r30, 0xD3	; 211
    1684:	f1 05       	cpc	r31, r1
    1686:	2c f0       	brlt	.+10     	; 0x1692 <nDoFuzzy+0x16c>
	{
		delta_C.value = 200+adjustC;  // force input value to lowest point in delta_C's input set
    1688:	82 ed       	ldi	r24, 0xD2	; 210
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	8b 87       	std	Y+11, r24	; 0x0b
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <nDoFuzzy+0x17c>
	}
	else
	{
		delta_C.value = c;
    1692:	c3 54       	subi	r28, 0x43	; 67
    1694:	de 4f       	sbci	r29, 0xFE	; 254
    1696:	88 81       	ld	r24, Y
    1698:	99 81       	ldd	r25, Y+1	; 0x01
    169a:	cd 5b       	subi	r28, 0xBD	; 189
    169c:	d1 40       	sbci	r29, 0x01	; 1
    169e:	9c 87       	std	Y+12, r25	; 0x0c
    16a0:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    16a2:	88 e0       	ldi	r24, 0x08	; 8
    16a4:	ec ec       	ldi	r30, 0xCC	; 204
    16a6:	f1 e0       	ldi	r31, 0x01	; 1
    16a8:	de 01       	movw	r26, r28
    16aa:	a1 58       	subi	r26, 0x81	; 129
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	01 90       	ld	r0, Z+
    16b0:	0d 92       	st	X+, r0
    16b2:	8a 95       	dec	r24
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <nDoFuzzy+0x188>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOri", -1, 0, 0, 60); // min V is 0
    16b6:	4e 01       	movw	r8, r28
    16b8:	9f e8       	ldi	r25, 0x8F	; 143
    16ba:	89 0e       	add	r8, r25
    16bc:	91 1c       	adc	r9, r1
    16be:	0f 2e       	mov	r0, r31
    16c0:	fc e3       	ldi	r31, 0x3C	; 60
    16c2:	ef 2e       	mov	r14, r31
    16c4:	f1 2c       	mov	r15, r1
    16c6:	f0 2d       	mov	r31, r0
    16c8:	00 e0       	ldi	r16, 0x00	; 0
    16ca:	10 e0       	ldi	r17, 0x00	; 0
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4f ef       	ldi	r20, 0xFF	; 255
    16d2:	5f ef       	ldi	r21, 0xFF	; 255
    16d4:	64 ed       	ldi	r22, 0xD4	; 212
    16d6:	71 e0       	ldi	r23, 0x01	; 1
    16d8:	c4 01       	movw	r24, r8
    16da:	36 dc       	rcall	.-1940   	; 0xf48 <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOri", 10, 40, 40, 70);
    16dc:	5e 01       	movw	r10, r28
    16de:	e5 ea       	ldi	r30, 0xA5	; 165
    16e0:	ae 0e       	add	r10, r30
    16e2:	b1 1c       	adc	r11, r1
    16e4:	0f 2e       	mov	r0, r31
    16e6:	f6 e4       	ldi	r31, 0x46	; 70
    16e8:	ef 2e       	mov	r14, r31
    16ea:	f1 2c       	mov	r15, r1
    16ec:	f0 2d       	mov	r31, r0
    16ee:	08 e2       	ldi	r16, 0x28	; 40
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	28 e2       	ldi	r18, 0x28	; 40
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e0       	ldi	r20, 0x0A	; 10
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	6c ed       	ldi	r22, 0xDC	; 220
    16fc:	71 e0       	ldi	r23, 0x01	; 1
    16fe:	c5 01       	movw	r24, r10
    1700:	23 dc       	rcall	.-1978   	; 0xf48 <MATLAB_MF>
		
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "rightOri", 20, 80, 80, 81); // max V is 80
    1702:	6e 01       	movw	r12, r28
    1704:	fb eb       	ldi	r31, 0xBB	; 187
    1706:	cf 0e       	add	r12, r31
    1708:	d1 1c       	adc	r13, r1
    170a:	0f 2e       	mov	r0, r31
    170c:	f1 e5       	ldi	r31, 0x51	; 81
    170e:	ef 2e       	mov	r14, r31
    1710:	f1 2c       	mov	r15, r1
    1712:	f0 2d       	mov	r31, r0
    1714:	00 e5       	ldi	r16, 0x50	; 80
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	20 e5       	ldi	r18, 0x50	; 80
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	44 e1       	ldi	r20, 0x14	; 20
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	64 ee       	ldi	r22, 0xE4	; 228
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	c6 01       	movw	r24, r12
    1726:	10 dc       	rcall	.-2016   	; 0xf48 <MATLAB_MF>

	delta_V.membership_functions = &leftOriented;
    1728:	c5 57       	subi	r28, 0x75	; 117
    172a:	df 4f       	sbci	r29, 0xFF	; 255
    172c:	99 82       	std	Y+1, r9	; 0x01
    172e:	88 82       	st	Y, r8
    1730:	cb 58       	subi	r28, 0x8B	; 139
    1732:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    1734:	f4 01       	movw	r30, r8
    1736:	b5 8a       	std	Z+21, r11	; 0x15
    1738:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    173a:	f5 01       	movw	r30, r10
    173c:	d5 8a       	std	Z+21, r13	; 0x15
    173e:	c4 8a       	std	Z+20, r12	; 0x14
	rightOriented.next = NULL;
    1740:	f6 01       	movw	r30, r12
    1742:	15 8a       	std	Z+21, r1	; 0x15
    1744:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<=0)				// if sensor value is smaller than error's input set lower limit
    1746:	12 14       	cp	r1, r2
    1748:	13 04       	cpc	r1, r3
    174a:	4c f0       	brlt	.+18     	; 0x175e <nDoFuzzy+0x238>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	c7 57       	subi	r28, 0x77	; 119
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	88 83       	st	Y, r24
    1758:	c9 58       	subi	r28, 0x89	; 137
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	13 c0       	rjmp	.+38     	; 0x1784 <nDoFuzzy+0x25e>
	}
	else if(v>=80)			// if sensor value is bigger than error's input set's upper limit
    175e:	f0 e5       	ldi	r31, 0x50	; 80
    1760:	2f 16       	cp	r2, r31
    1762:	31 04       	cpc	r3, r1
    1764:	4c f0       	brlt	.+18     	; 0x1778 <nDoFuzzy+0x252>
	{
		delta_V.value = 79;  // force input value to lowest point in error's input set
    1766:	8f e4       	ldi	r24, 0x4F	; 79
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	c7 57       	subi	r28, 0x77	; 119
    176c:	df 4f       	sbci	r29, 0xFF	; 255
    176e:	99 83       	std	Y+1, r25	; 0x01
    1770:	88 83       	st	Y, r24
    1772:	c9 58       	subi	r28, 0x89	; 137
    1774:	d0 40       	sbci	r29, 0x00	; 0
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <nDoFuzzy+0x25e>
	}
	else
	{
		delta_V.value = v;
    1778:	c7 57       	subi	r28, 0x77	; 119
    177a:	df 4f       	sbci	r29, 0xFF	; 255
    177c:	39 82       	std	Y+1, r3	; 0x01
    177e:	28 82       	st	Y, r2
    1780:	c9 58       	subi	r28, 0x89	; 137
    1782:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    1784:	6e 01       	movw	r12, r28
    1786:	21 ed       	ldi	r18, 0xD1	; 209
    1788:	c2 0e       	add	r12, r18
    178a:	d1 1c       	adc	r13, r1
    178c:	89 e0       	ldi	r24, 0x09	; 9
    178e:	e9 e0       	ldi	r30, 0x09	; 9
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	d6 01       	movw	r26, r12
    1794:	01 90       	ld	r0, Z+
    1796:	0d 92       	st	X+, r0
    1798:	8a 95       	dec	r24
    179a:	e1 f7       	brne	.-8      	; 0x1794 <nDoFuzzy+0x26e>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLe", 216, 217, 217, 235);
    179c:	0f 2e       	mov	r0, r31
    179e:	fb ee       	ldi	r31, 0xEB	; 235
    17a0:	ef 2e       	mov	r14, r31
    17a2:	f1 2c       	mov	r15, r1
    17a4:	f0 2d       	mov	r31, r0
    17a6:	09 ed       	ldi	r16, 0xD9	; 217
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	29 ed       	ldi	r18, 0xD9	; 217
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	48 ed       	ldi	r20, 0xD8	; 216
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	6d ee       	ldi	r22, 0xED	; 237
    17b4:	71 e0       	ldi	r23, 0x01	; 1
    17b6:	ce 01       	movw	r24, r28
    17b8:	8f 51       	subi	r24, 0x1F	; 31
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	c5 db       	rcall	.-2166   	; 0xf48 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 224, 239, 239, 254);
    17be:	2e 01       	movw	r4, r28
    17c0:	47 ef       	ldi	r20, 0xF7	; 247
    17c2:	44 0e       	add	r4, r20
    17c4:	51 1c       	adc	r5, r1
    17c6:	0f 2e       	mov	r0, r31
    17c8:	fe ef       	ldi	r31, 0xFE	; 254
    17ca:	ef 2e       	mov	r14, r31
    17cc:	f1 2c       	mov	r15, r1
    17ce:	f0 2d       	mov	r31, r0
    17d0:	0f ee       	ldi	r16, 0xEF	; 239
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	2f ee       	ldi	r18, 0xEF	; 239
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 ee       	ldi	r20, 0xE0	; 224
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e2       	ldi	r22, 0x20	; 32
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	c2 01       	movw	r24, r4
    17e2:	b2 db       	rcall	.-2204   	; 0xf48 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 244, 259, 259, 274);
    17e4:	1e 01       	movw	r2, r28
    17e6:	63 ef       	ldi	r22, 0xF3	; 243
    17e8:	26 1a       	sub	r2, r22
    17ea:	6e ef       	ldi	r22, 0xFE	; 254
    17ec:	36 0a       	sbc	r3, r22
    17ee:	0f 2e       	mov	r0, r31
    17f0:	f2 e1       	ldi	r31, 0x12	; 18
    17f2:	ef 2e       	mov	r14, r31
    17f4:	ff 24       	eor	r15, r15
    17f6:	f3 94       	inc	r15
    17f8:	f0 2d       	mov	r31, r0
    17fa:	03 e0       	ldi	r16, 0x03	; 3
    17fc:	11 e0       	ldi	r17, 0x01	; 1
    17fe:	23 e0       	ldi	r18, 0x03	; 3
    1800:	31 e0       	ldi	r19, 0x01	; 1
    1802:	44 ef       	ldi	r20, 0xF4	; 244
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	65 e2       	ldi	r22, 0x25	; 37
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	c1 01       	movw	r24, r2
    180c:	9d db       	rcall	.-2246   	; 0xf48 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 264, 279, 279, 294);
    180e:	3e 01       	movw	r6, r28
    1810:	8d ed       	ldi	r24, 0xDD	; 221
    1812:	68 1a       	sub	r6, r24
    1814:	8e ef       	ldi	r24, 0xFE	; 254
    1816:	78 0a       	sbc	r7, r24
    1818:	0f 2e       	mov	r0, r31
    181a:	f6 e2       	ldi	r31, 0x26	; 38
    181c:	ef 2e       	mov	r14, r31
    181e:	ff 24       	eor	r15, r15
    1820:	f3 94       	inc	r15
    1822:	f0 2d       	mov	r31, r0
    1824:	07 e1       	ldi	r16, 0x17	; 23
    1826:	11 e0       	ldi	r17, 0x01	; 1
    1828:	27 e1       	ldi	r18, 0x17	; 23
    182a:	31 e0       	ldi	r19, 0x01	; 1
    182c:	48 e0       	ldi	r20, 0x08	; 8
    182e:	51 e0       	ldi	r21, 0x01	; 1
    1830:	6e e2       	ldi	r22, 0x2E	; 46
    1832:	71 e0       	ldi	r23, 0x01	; 1
    1834:	c3 01       	movw	r24, r6
    1836:	88 db       	rcall	.-2288   	; 0xf48 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRi", 285, 302, 302, 303);
    1838:	5e 01       	movw	r10, r28
    183a:	97 ec       	ldi	r25, 0xC7	; 199
    183c:	a9 1a       	sub	r10, r25
    183e:	9e ef       	ldi	r25, 0xFE	; 254
    1840:	b9 0a       	sbc	r11, r25
    1842:	0f 2e       	mov	r0, r31
    1844:	ff e2       	ldi	r31, 0x2F	; 47
    1846:	ef 2e       	mov	r14, r31
    1848:	ff 24       	eor	r15, r15
    184a:	f3 94       	inc	r15
    184c:	f0 2d       	mov	r31, r0
    184e:	0e e2       	ldi	r16, 0x2E	; 46
    1850:	11 e0       	ldi	r17, 0x01	; 1
    1852:	2e e2       	ldi	r18, 0x2E	; 46
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	4d e1       	ldi	r20, 0x1D	; 29
    1858:	51 e0       	ldi	r21, 0x01	; 1
    185a:	65 ef       	ldi	r22, 0xF5	; 245
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	c5 01       	movw	r24, r10
    1860:	73 db       	rcall	.-2330   	; 0xf48 <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    1862:	f6 01       	movw	r30, r12
    1864:	b5 86       	std	Z+13, r11	; 0x0d
    1866:	a4 86       	std	Z+12, r10	; 0x0c
	sharpRight.next = &right;
    1868:	f5 01       	movw	r30, r10
    186a:	75 8a       	std	Z+21, r7	; 0x15
    186c:	64 8a       	std	Z+20, r6	; 0x14
	right.next = &straight;
    186e:	f3 01       	movw	r30, r6
    1870:	35 8a       	std	Z+21, r3	; 0x15
    1872:	24 8a       	std	Z+20, r2	; 0x14
	straight.next = &left;
    1874:	f1 01       	movw	r30, r2
    1876:	55 8a       	std	Z+21, r5	; 0x15
    1878:	44 8a       	std	Z+20, r4	; 0x14
	left.next = &sharpLeft;
    187a:	81 ee       	ldi	r24, 0xE1	; 225
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	8c 0f       	add	r24, r28
    1880:	9d 1f       	adc	r25, r29
    1882:	f2 01       	movw	r30, r4
    1884:	95 8b       	std	Z+21, r25	; 0x15
    1886:	84 8b       	std	Z+20, r24	; 0x14
	sharpLeft.next = NULL;
    1888:	cb 50       	subi	r28, 0x0B	; 11
    188a:	df 4f       	sbci	r29, 0xFF	; 255
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	18 82       	st	Y, r1
    1890:	c5 5f       	subi	r28, 0xF5	; 245
    1892:	d0 40       	sbci	r29, 0x00	; 0
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    1894:	80 5e       	subi	r24, 0xE0	; 224
    1896:	91 09       	sbc	r25, r1
    1898:	90 93 1d 03 	sts	0x031D, r25
    189c:	80 93 1c 03 	sts	0x031C, r24
	delta_C.next = &delta_V;
    18a0:	e8 57       	subi	r30, 0x78	; 120
    18a2:	f1 09       	sbc	r31, r1
    18a4:	f8 8b       	std	Y+16, r31	; 0x10
    18a6:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    18a8:	17 86       	std	Z+15, r1	; 0x0f
    18aa:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    18ac:	d0 92 1b 03 	sts	0x031B, r13
    18b0:	c0 92 1a 03 	sts	0x031A, r12
	steering.next = NULL;
    18b4:	f6 01       	movw	r30, r12
    18b6:	17 86       	std	Z+15, r1	; 0x0f
    18b8:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    18ba:	4e 01       	movw	r8, r28
    18bc:	f1 eb       	ldi	r31, 0xB1	; 177
    18be:	8f 1a       	sub	r8, r31
    18c0:	fe ef       	ldi	r31, 0xFE	; 254
    18c2:	9f 0a       	sbc	r9, r31
    18c4:	90 92 1f 03 	sts	0x031F, r9
    18c8:	80 92 1e 03 	sts	0x031E, r8
	struct rule_type rule2; rule1.next = &rule2;
    18cc:	be 01       	movw	r22, r28
    18ce:	6b 5a       	subi	r22, 0xAB	; 171
    18d0:	7e 4f       	sbci	r23, 0xFE	; 254
    18d2:	f4 01       	movw	r30, r8
    18d4:	75 83       	std	Z+5, r23	; 0x05
    18d6:	64 83       	std	Z+4, r22	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
    18d8:	ae 01       	movw	r20, r28
    18da:	45 5a       	subi	r20, 0xA5	; 165
    18dc:	5e 4f       	sbci	r21, 0xFE	; 254
    18de:	fb 01       	movw	r30, r22
    18e0:	55 83       	std	Z+5, r21	; 0x05
    18e2:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
    18e4:	9e 01       	movw	r18, r28
    18e6:	2f 59       	subi	r18, 0x9F	; 159
    18e8:	3e 4f       	sbci	r19, 0xFE	; 254
    18ea:	fa 01       	movw	r30, r20
    18ec:	35 83       	std	Z+5, r19	; 0x05
    18ee:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5;
    18f0:	8a 59       	subi	r24, 0x9A	; 154
    18f2:	9e 4f       	sbci	r25, 0xFE	; 254
    18f4:	f9 01       	movw	r30, r18
    18f6:	95 83       	std	Z+5, r25	; 0x05
    18f8:	84 83       	std	Z+4, r24	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
    18fa:	de 01       	movw	r26, r28
    18fc:	a3 59       	subi	r26, 0x93	; 147
    18fe:	be 4f       	sbci	r27, 0xFE	; 254
    1900:	fc 01       	movw	r30, r24
    1902:	b5 83       	std	Z+5, r27	; 0x05
    1904:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule7; rule6.next = &rule7;
    1906:	e3 e7       	ldi	r30, 0x73	; 115
    1908:	f1 e0       	ldi	r31, 0x01	; 1
    190a:	ec 0f       	add	r30, r28
    190c:	fd 1f       	adc	r31, r29
    190e:	15 96       	adiw	r26, 0x05	; 5
    1910:	fc 93       	st	X, r31
    1912:	ee 93       	st	-X, r30
    1914:	14 97       	sbiw	r26, 0x04	; 4
	rule7.next = NULL;
    1916:	c9 58       	subi	r28, 0x89	; 137
    1918:	de 4f       	sbci	r29, 0xFE	; 254
    191a:	19 82       	std	Y+1, r1	; 0x01
    191c:	18 82       	st	Y, r1
    191e:	c7 57       	subi	r28, 0x77	; 119
    1920:	d1 40       	sbci	r29, 0x01	; 1
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if deltaC is farLeft then steering is SharpRight"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1922:	8e 01       	movw	r16, r28
    1924:	07 58       	subi	r16, 0x87	; 135
    1926:	1e 4f       	sbci	r17, 0xFE	; 254
    1928:	f4 01       	movw	r30, r8
    192a:	11 83       	std	Z+1, r17	; 0x01
    192c:	00 83       	st	Z, r16
    192e:	f8 01       	movw	r30, r16
    1930:	13 82       	std	Z+3, r1	; 0x03
    1932:	12 82       	std	Z+2, r1	; 0x02
    1934:	7e 01       	movw	r14, r28
    1936:	f3 e8       	ldi	r31, 0x83	; 131
    1938:	ef 1a       	sub	r14, r31
    193a:	fe ef       	ldi	r31, 0xFE	; 254
    193c:	ff 0a       	sbc	r15, r31
    193e:	f4 01       	movw	r30, r8
    1940:	f3 82       	std	Z+3, r15	; 0x03
    1942:	e2 82       	std	Z+2, r14	; 0x02
    1944:	f7 01       	movw	r30, r14
    1946:	13 82       	std	Z+3, r1	; 0x03
    1948:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &farLeft.value; then1.value = &sharpRight.value;
    194a:	4e 01       	movw	r8, r28
    194c:	f3 e7       	ldi	r31, 0x73	; 115
    194e:	8f 0e       	add	r8, r31
    1950:	91 1c       	adc	r9, r1
    1952:	f8 01       	movw	r30, r16
    1954:	91 82       	std	Z+1, r9	; 0x01
    1956:	80 82       	st	Z, r8
    1958:	fa e0       	ldi	r31, 0x0A	; 10
    195a:	af 0e       	add	r10, r31
    195c:	b1 1c       	adc	r11, r1
    195e:	f7 01       	movw	r30, r14
    1960:	b1 82       	std	Z+1, r11	; 0x01
    1962:	a0 82       	st	Z, r10

	////RULE 2 "if deltaC is smallLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1964:	08 5f       	subi	r16, 0xF8	; 248
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	fb 01       	movw	r30, r22
    196a:	11 83       	std	Z+1, r17	; 0x01
    196c:	00 83       	st	Z, r16
    196e:	f8 01       	movw	r30, r16
    1970:	13 82       	std	Z+3, r1	; 0x03
    1972:	12 82       	std	Z+2, r1	; 0x02
    1974:	7e 01       	movw	r14, r28
    1976:	fb e7       	ldi	r31, 0x7B	; 123
    1978:	ef 1a       	sub	r14, r31
    197a:	fe ef       	ldi	r31, 0xFE	; 254
    197c:	ff 0a       	sbc	r15, r31
    197e:	fb 01       	movw	r30, r22
    1980:	f3 82       	std	Z+3, r15	; 0x03
    1982:	e2 82       	std	Z+2, r14	; 0x02
    1984:	f7 01       	movw	r30, r14
    1986:	13 82       	std	Z+3, r1	; 0x03
    1988:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &smallLeft.value; then2.value = &right.value;
    198a:	68 5f       	subi	r22, 0xF8	; 248
    198c:	71 09       	sbc	r23, r1
    198e:	f8 01       	movw	r30, r16
    1990:	71 83       	std	Z+1, r23	; 0x01
    1992:	60 83       	st	Z, r22
    1994:	fa e0       	ldi	r31, 0x0A	; 10
    1996:	6f 0e       	add	r6, r31
    1998:	71 1c       	adc	r7, r1
    199a:	f7 01       	movw	r30, r14
    199c:	71 82       	std	Z+1, r7	; 0x01
    199e:	60 82       	st	Z, r6

	////RULE 5 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    19a0:	64 5d       	subi	r22, 0xD4	; 212
    19a2:	7e 4f       	sbci	r23, 0xFE	; 254
    19a4:	fa 01       	movw	r30, r20
    19a6:	71 83       	std	Z+1, r23	; 0x01
    19a8:	60 83       	st	Z, r22
    19aa:	04 5f       	subi	r16, 0xF4	; 244
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	fb 01       	movw	r30, r22
    19b0:	13 83       	std	Z+3, r17	; 0x03
    19b2:	02 83       	std	Z+2, r16	; 0x02
    19b4:	f8 01       	movw	r30, r16
    19b6:	13 82       	std	Z+3, r1	; 0x03
    19b8:	12 82       	std	Z+2, r1	; 0x02
    19ba:	7e 01       	movw	r14, r28
    19bc:	ff e6       	ldi	r31, 0x6F	; 111
    19be:	ef 1a       	sub	r14, r31
    19c0:	fe ef       	ldi	r31, 0xFE	; 254
    19c2:	ff 0a       	sbc	r15, r31
    19c4:	fa 01       	movw	r30, r20
    19c6:	f3 82       	std	Z+3, r15	; 0x03
    19c8:	e2 82       	std	Z+2, r14	; 0x02
    19ca:	f7 01       	movw	r30, r14
    19cc:	13 82       	std	Z+3, r1	; 0x03
    19ce:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &centre.value; if32.value = &rightOriented.value; then3.value = &left.value;
    19d0:	5e 01       	movw	r10, r28
    19d2:	f7 e4       	ldi	r31, 0x47	; 71
    19d4:	af 0e       	add	r10, r31
    19d6:	b1 1c       	adc	r11, r1
    19d8:	fb 01       	movw	r30, r22
    19da:	b1 82       	std	Z+1, r11	; 0x01
    19dc:	a0 82       	st	Z, r10
    19de:	46 59       	subi	r20, 0x96	; 150
    19e0:	51 09       	sbc	r21, r1
    19e2:	f8 01       	movw	r30, r16
    19e4:	51 83       	std	Z+1, r21	; 0x01
    19e6:	40 83       	st	Z, r20
    19e8:	fa e0       	ldi	r31, 0x0A	; 10
    19ea:	4f 0e       	add	r4, r31
    19ec:	51 1c       	adc	r5, r1
    19ee:	f7 01       	movw	r30, r14
    19f0:	51 82       	std	Z+1, r5	; 0x01
    19f2:	40 82       	st	Z, r4
	
	////RULE 6 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
    19f4:	64 5f       	subi	r22, 0xF4	; 244
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	f9 01       	movw	r30, r18
    19fa:	71 83       	std	Z+1, r23	; 0x01
    19fc:	60 83       	st	Z, r22
    19fe:	4c 52       	subi	r20, 0x2C	; 44
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	fb 01       	movw	r30, r22
    1a04:	53 83       	std	Z+3, r21	; 0x03
    1a06:	42 83       	std	Z+2, r20	; 0x02
    1a08:	fa 01       	movw	r30, r20
    1a0a:	13 82       	std	Z+3, r1	; 0x03
    1a0c:	12 82       	std	Z+2, r1	; 0x02
    1a0e:	00 5f       	subi	r16, 0xF0	; 240
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	f9 01       	movw	r30, r18
    1a14:	13 83       	std	Z+3, r17	; 0x03
    1a16:	02 83       	std	Z+2, r16	; 0x02
    1a18:	f8 01       	movw	r30, r16
    1a1a:	13 82       	std	Z+3, r1	; 0x03
    1a1c:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &centre.value; if42.value = &straightOriented.value; then4.value = &straight.value;
    1a1e:	fb 01       	movw	r30, r22
    1a20:	b1 82       	std	Z+1, r11	; 0x01
    1a22:	a0 82       	st	Z, r10
    1a24:	22 5b       	subi	r18, 0xB2	; 178
    1a26:	31 09       	sbc	r19, r1
    1a28:	fa 01       	movw	r30, r20
    1a2a:	31 83       	std	Z+1, r19	; 0x01
    1a2c:	20 83       	st	Z, r18
    1a2e:	fa e0       	ldi	r31, 0x0A	; 10
    1a30:	2f 0e       	add	r2, r31
    1a32:	31 1c       	adc	r3, r1
    1a34:	f8 01       	movw	r30, r16
    1a36:	31 82       	std	Z+1, r3	; 0x01
    1a38:	20 82       	st	Z, r2
	
	////RULE 5 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
    1a3a:	64 5f       	subi	r22, 0xF4	; 244
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	fc 01       	movw	r30, r24
    1a40:	71 83       	std	Z+1, r23	; 0x01
    1a42:	60 83       	st	Z, r22
    1a44:	44 5f       	subi	r20, 0xF4	; 244
    1a46:	5f 4f       	sbci	r21, 0xFF	; 255
    1a48:	fb 01       	movw	r30, r22
    1a4a:	53 83       	std	Z+3, r21	; 0x03
    1a4c:	42 83       	std	Z+2, r20	; 0x02
    1a4e:	fa 01       	movw	r30, r20
    1a50:	13 82       	std	Z+3, r1	; 0x03
    1a52:	12 82       	std	Z+2, r1	; 0x02
    1a54:	26 50       	subi	r18, 0x06	; 6
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	fc 01       	movw	r30, r24
    1a5a:	33 83       	std	Z+3, r19	; 0x03
    1a5c:	22 83       	std	Z+2, r18	; 0x02
    1a5e:	f9 01       	movw	r30, r18
    1a60:	13 82       	std	Z+3, r1	; 0x03
    1a62:	12 82       	std	Z+2, r1	; 0x02
	if51.value = &centre.value; if52.value = &leftOriented.value; then5.value = &right.value;
    1a64:	fb 01       	movw	r30, r22
    1a66:	b1 82       	std	Z+1, r11	; 0x01
    1a68:	a0 82       	st	Z, r10
    1a6a:	8e 5c       	subi	r24, 0xCE	; 206
    1a6c:	91 09       	sbc	r25, r1
    1a6e:	fa 01       	movw	r30, r20
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	f9 01       	movw	r30, r18
    1a76:	71 82       	std	Z+1, r7	; 0x01
    1a78:	60 82       	st	Z, r6
	
	////RULE 6 "if deltaC is smallRight then steering is Left"
	struct rule_element_type if61, then6;
	rule6.if_side = &if61; if61.next = NULL; rule6.then_side = &then6; then6.next = NULL;
    1a7a:	2c 5f       	subi	r18, 0xFC	; 252
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	3c 93       	st	X, r19
    1a82:	2e 93       	st	-X, r18
    1a84:	f9 01       	movw	r30, r18
    1a86:	13 82       	std	Z+3, r1	; 0x03
    1a88:	12 82       	std	Z+2, r1	; 0x02
    1a8a:	88 5e       	subi	r24, 0xE8	; 232
    1a8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a8e:	13 96       	adiw	r26, 0x03	; 3
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
    1a94:	12 97       	sbiw	r26, 0x02	; 2
    1a96:	fc 01       	movw	r30, r24
    1a98:	13 82       	std	Z+3, r1	; 0x03
    1a9a:	12 82       	std	Z+2, r1	; 0x02
	if61.value = &smallRight.value; then6.value = &left.value;
    1a9c:	44 57       	subi	r20, 0x74	; 116
    1a9e:	51 40       	sbci	r21, 0x01	; 1
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	51 83       	std	Z+1, r21	; 0x01
    1aa4:	40 83       	st	Z, r20
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	51 82       	std	Z+1, r5	; 0x01
    1aaa:	40 82       	st	Z, r4
	
	////RULE 7 "if deltaC is farRight then steering is sharpLeft"
	struct rule_element_type if71, then7;
	rule7.if_side = &if71; if71.next = NULL; rule7.then_side = &then7; then7.next = NULL;
    1aac:	04 96       	adiw	r24, 0x04	; 4
    1aae:	cd 58       	subi	r28, 0x8D	; 141
    1ab0:	de 4f       	sbci	r29, 0xFE	; 254
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	88 83       	st	Y, r24
    1ab6:	c3 57       	subi	r28, 0x73	; 115
    1ab8:	d1 40       	sbci	r29, 0x01	; 1
    1aba:	fc 01       	movw	r30, r24
    1abc:	13 82       	std	Z+3, r1	; 0x03
    1abe:	12 82       	std	Z+2, r1	; 0x02
    1ac0:	a4 5b       	subi	r26, 0xB4	; 180
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	cb 58       	subi	r28, 0x8B	; 139
    1ac6:	de 4f       	sbci	r29, 0xFE	; 254
    1ac8:	b9 83       	std	Y+1, r27	; 0x01
    1aca:	a8 83       	st	Y, r26
    1acc:	c5 57       	subi	r28, 0x75	; 117
    1ace:	d1 40       	sbci	r29, 0x01	; 1
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	1c 92       	st	X, r1
    1ad4:	1e 92       	st	-X, r1
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
	if71.value = &farRight.value;  then7.value = &sharpLeft.value;
    1ad8:	22 59       	subi	r18, 0x92	; 146
    1ada:	31 40       	sbci	r19, 0x01	; 1
    1adc:	31 83       	std	Z+1, r19	; 0x01
    1ade:	20 83       	st	Z, r18
    1ae0:	81 ee       	ldi	r24, 0xE1	; 225
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	8c 0f       	add	r24, r28
    1ae6:	9d 1f       	adc	r25, r29
    1ae8:	0a 96       	adiw	r24, 0x0a	; 10
    1aea:	8d 93       	st	X+, r24
    1aec:	9c 93       	st	X, r25
	

	
	
	// the methods performing the FLC
	fuzzification();
    1aee:	f9 d8       	rcall	.-3598   	; 0xce2 <fuzzification>
	rule_evaluation();
    1af0:	1f d9       	rcall	.-3522   	; 0xd30 <rule_evaluation>
	defuzzification();
    1af2:	64 d9       	rcall	.-3384   	; 0xdbc <defuzzification>
	steering.value = steering.value*10;
    1af4:	f6 01       	movw	r30, r12
    1af6:	22 85       	ldd	r18, Z+10	; 0x0a
    1af8:	33 85       	ldd	r19, Z+11	; 0x0b
    1afa:	c9 01       	movw	r24, r18
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	22 0f       	add	r18, r18
    1b02:	33 1f       	adc	r19, r19
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	22 0f       	add	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	82 0f       	add	r24, r18
    1b0e:	93 1f       	adc	r25, r19
    1b10:	93 87       	std	Z+11, r25	; 0x0b
    1b12:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1b14:	86 3e       	cpi	r24, 0xE6	; 230
    1b16:	f7 e0       	ldi	r31, 0x07	; 7
    1b18:	9f 07       	cpc	r25, r31
    1b1a:	24 f4       	brge	.+8      	; 0x1b24 <nDoFuzzy+0x5fe>
	{
		setServo(MAXLEFT);
    1b1c:	86 ee       	ldi	r24, 0xE6	; 230
    1b1e:	97 e0       	ldi	r25, 0x07	; 7
    1b20:	64 d0       	rcall	.+200    	; 0x1bea <setServo>
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <nDoFuzzy+0x610>
	}
	else if (steering.value >MAXRIGHT)
    1b24:	85 3e       	cpi	r24, 0xE5	; 229
    1b26:	2c e0       	ldi	r18, 0x0C	; 12
    1b28:	92 07       	cpc	r25, r18
    1b2a:	24 f0       	brlt	.+8      	; 0x1b34 <nDoFuzzy+0x60e>
	{
		setServo(MAXRIGHT);
    1b2c:	84 ee       	ldi	r24, 0xE4	; 228
    1b2e:	9c e0       	ldi	r25, 0x0C	; 12
    1b30:	5c d0       	rcall	.+184    	; 0x1bea <setServo>
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <nDoFuzzy+0x610>
	}
	else
	{
		setServo(steering.value);
    1b34:	5a d0       	rcall	.+180    	; 0x1bea <setServo>
	}
    
}
    1b36:	c2 54       	subi	r28, 0x42	; 66
    1b38:	de 4f       	sbci	r29, 0xFE	; 254
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	5f 90       	pop	r5
    1b62:	4f 90       	pop	r4
    1b64:	3f 90       	pop	r3
    1b66:	2f 90       	pop	r2
    1b68:	08 95       	ret

00001b6a <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) && (v == 81))        // right curvature, turn right
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	39 f4       	brne	.+14     	; 0x1b7e <nFuzzySteering+0x14>
    1b70:	61 35       	cpi	r22, 0x51	; 81
    1b72:	71 05       	cpc	r23, r1
    1b74:	71 f4       	brne	.+28     	; 0x1b92 <nFuzzySteering+0x28>
	{
		setServo(MAXRIGHT-159);
    1b76:	85 e4       	ldi	r24, 0x45	; 69
    1b78:	9c e0       	ldi	r25, 0x0C	; 12
    1b7a:	37 c0       	rjmp	.+110    	; 0x1bea <setServo>
    1b7c:	08 95       	ret
	}
	else if ((c == 2) && (v == 81))       // left curvature, turn left
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	91 05       	cpc	r25, r1
    1b82:	39 f4       	brne	.+14     	; 0x1b92 <nFuzzySteering+0x28>
    1b84:	61 35       	cpi	r22, 0x51	; 81
    1b86:	71 05       	cpc	r23, r1
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <nFuzzySteering+0x28>
	{
		setServo(MAXLEFT);
    1b8a:	86 ee       	ldi	r24, 0xE6	; 230
    1b8c:	97 e0       	ldi	r25, 0x07	; 7
    1b8e:	2d c0       	rjmp	.+90     	; 0x1bea <setServo>
    1b90:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1b92:	c9 cc       	rjmp	.-1646   	; 0x1526 <nDoFuzzy>
    1b94:	08 95       	ret

00001b96 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1b96:	80 e3       	ldi	r24, 0x30	; 48
    1b98:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1b9a:	82 ea       	ldi	r24, 0xA2	; 162
    1b9c:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	9f e8       	ldi	r25, 0x8F	; 143
    1ba4:	90 93 87 00 	sts	0x0087, r25
    1ba8:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1bac:	8a e1       	ldi	r24, 0x1A	; 26
    1bae:	80 93 81 00 	sts	0x0081, r24
    1bb2:	08 95       	ret

00001bb4 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1bb4:	80 36       	cpi	r24, 0x60	; 96
    1bb6:	2a e0       	ldi	r18, 0x0A	; 10
    1bb8:	92 07       	cpc	r25, r18
    1bba:	3c f4       	brge	.+14     	; 0x1bca <setESC+0x16>
	{
		OCR1A = MINESC;
    1bbc:	8f e5       	ldi	r24, 0x5F	; 95
    1bbe:	9a e0       	ldi	r25, 0x0A	; 10
    1bc0:	90 93 89 00 	sts	0x0089, r25
    1bc4:	80 93 88 00 	sts	0x0088, r24
    1bc8:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1bca:	82 32       	cpi	r24, 0x22	; 34
    1bcc:	2b e0       	ldi	r18, 0x0B	; 11
    1bce:	92 07       	cpc	r25, r18
    1bd0:	3c f0       	brlt	.+14     	; 0x1be0 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1bd2:	82 e2       	ldi	r24, 0x22	; 34
    1bd4:	9b e0       	ldi	r25, 0x0B	; 11
    1bd6:	90 93 89 00 	sts	0x0089, r25
    1bda:	80 93 88 00 	sts	0x0088, r24
    1bde:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1be0:	90 93 89 00 	sts	0x0089, r25
    1be4:	80 93 88 00 	sts	0x0088, r24
    1be8:	08 95       	ret

00001bea <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1bea:	84 3e       	cpi	r24, 0xE4	; 228
    1bec:	2c e0       	ldi	r18, 0x0C	; 12
    1bee:	92 07       	cpc	r25, r18
    1bf0:	3c f0       	brlt	.+14     	; 0x1c00 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1bf2:	84 ee       	ldi	r24, 0xE4	; 228
    1bf4:	9c e0       	ldi	r25, 0x0C	; 12
    1bf6:	90 93 8b 00 	sts	0x008B, r25
    1bfa:	80 93 8a 00 	sts	0x008A, r24
    1bfe:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1c00:	87 3e       	cpi	r24, 0xE7	; 231
    1c02:	27 e0       	ldi	r18, 0x07	; 7
    1c04:	92 07       	cpc	r25, r18
    1c06:	3c f4       	brge	.+14     	; 0x1c16 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1c08:	86 ee       	ldi	r24, 0xE6	; 230
    1c0a:	97 e0       	ldi	r25, 0x07	; 7
    1c0c:	90 93 8b 00 	sts	0x008B, r25
    1c10:	80 93 8a 00 	sts	0x008A, r24
    1c14:	08 95       	ret
		
	} else {
		OCR1B = counterServo;
    1c16:	90 93 8b 00 	sts	0x008B, r25
    1c1a:	80 93 8a 00 	sts	0x008A, r24
    1c1e:	08 95       	ret

00001c20 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	0b b6       	in	r0, 0x3b	; 59
    1c2c:	0f 92       	push	r0
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	ef 93       	push	r30
    1c3c:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1c3e:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1c40:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1c42:	2d 3f       	cpi	r18, 0xFD	; 253
    1c44:	a9 f0       	breq	.+42     	; 0x1c70 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1c46:	e8 e8       	ldi	r30, 0x88	; 136
    1c48:	f2 e0       	ldi	r31, 0x02	; 2
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	dc 01       	movw	r26, r24
    1c50:	aa 5b       	subi	r26, 0xBA	; 186
    1c52:	bd 4f       	sbci	r27, 0xFD	; 253
    1c54:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1c5c:	ea e8       	ldi	r30, 0x8A	; 138
    1c5e:	f2 e0       	ldi	r31, 0x02	; 2
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 fe 01 	sts	0x01FE, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1c70:	80 91 88 02 	lds	r24, 0x0288
    1c74:	90 91 89 02 	lds	r25, 0x0289
    1c78:	80 34       	cpi	r24, 0x40	; 64
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1c7e:	10 92 89 02 	sts	0x0289, r1
    1c82:	10 92 88 02 	sts	0x0288, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1c86:	80 91 44 02 	lds	r24, 0x0244
    1c8a:	90 91 45 02 	lds	r25, 0x0245
    1c8e:	89 2b       	or	r24, r25
    1c90:	01 f1       	breq	.+64     	; 0x1cd2 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1c92:	e0 91 40 02 	lds	r30, 0x0240
    1c96:	f0 91 41 02 	lds	r31, 0x0241
    1c9a:	e0 50       	subi	r30, 0x00	; 0
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1ca2:	e0 e4       	ldi	r30, 0x40	; 64
    1ca4:	f2 e0       	ldi	r31, 0x02	; 2
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1cb0:	e4 e4       	ldi	r30, 0x44	; 68
    1cb2:	f2 e0       	ldi	r31, 0x02	; 2
    1cb4:	20 81       	ld	r18, Z
    1cb6:	31 81       	ldd	r19, Z+1	; 0x01
    1cb8:	21 50       	subi	r18, 0x01	; 1
    1cba:	31 09       	sbc	r19, r1
    1cbc:	31 83       	std	Z+1, r19	; 0x01
    1cbe:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1cc0:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1cc2:	80 34       	cpi	r24, 0x40	; 64
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	49 f4       	brne	.+18     	; 0x1cda <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1cc8:	10 92 41 02 	sts	0x0241, r1
    1ccc:	10 92 40 02 	sts	0x0240, r1
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1cd2:	8d ef       	ldi	r24, 0xFD	; 253
    1cd4:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1cd6:	10 92 ff 01 	sts	0x01FF, r1
		
	} 	
	

}
    1cda:	ff 91       	pop	r31
    1cdc:	ef 91       	pop	r30
    1cde:	bf 91       	pop	r27
    1ce0:	af 91       	pop	r26
    1ce2:	9f 91       	pop	r25
    1ce4:	8f 91       	pop	r24
    1ce6:	3f 91       	pop	r19
    1ce8:	2f 91       	pop	r18
    1cea:	0f 90       	pop	r0
    1cec:	0b be       	out	0x3b, r0	; 59
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1cf8:	80 e4       	ldi	r24, 0x40	; 64
    1cfa:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1cfc:	80 ec       	ldi	r24, 0xC0	; 192
    1cfe:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1d00:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1d02:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1d04:	8d ef       	ldi	r24, 0xFD	; 253
    1d06:	8e bd       	out	0x2e, r24	; 46
    1d08:	08 95       	ret

00001d0a <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1d0a:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1d0c:	20 91 8a 02 	lds	r18, 0x028A
    1d10:	30 91 8b 02 	lds	r19, 0x028B
    1d14:	21 15       	cp	r18, r1
    1d16:	31 05       	cpc	r19, r1
    1d18:	a9 f0       	breq	.+42     	; 0x1d44 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1d1a:	e6 e8       	ldi	r30, 0x86	; 134
    1d1c:	f2 e0       	ldi	r31, 0x02	; 2
    1d1e:	40 81       	ld	r20, Z
    1d20:	51 81       	ldd	r21, Z+1	; 0x01
    1d22:	da 01       	movw	r26, r20
    1d24:	aa 5b       	subi	r26, 0xBA	; 186
    1d26:	bd 4f       	sbci	r27, 0xFD	; 253
    1d28:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1d2a:	4f 5f       	subi	r20, 0xFF	; 255
    1d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2e:	51 83       	std	Z+1, r21	; 0x01
    1d30:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1d32:	21 50       	subi	r18, 0x01	; 1
    1d34:	31 09       	sbc	r19, r1
    1d36:	30 93 8b 02 	sts	0x028B, r19
    1d3a:	20 93 8a 02 	sts	0x028A, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1d3e:	23 2b       	or	r18, r19
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <spi_get_byte+0x40>
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1d44:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1d46:	10 92 fe 01 	sts	0x01FE, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1d4a:	20 91 86 02 	lds	r18, 0x0286
    1d4e:	30 91 87 02 	lds	r19, 0x0287
    1d52:	20 34       	cpi	r18, 0x40	; 64
    1d54:	31 05       	cpc	r19, r1
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1d58:	10 92 87 02 	sts	0x0287, r1
    1d5c:	10 92 86 02 	sts	0x0286, r1
	}
	

	sei();
    1d60:	78 94       	sei
	
	return value;
	
		
}
    1d62:	08 95       	ret

00001d64 <spi_send_byte>:

void spi_send_byte(unsigned char value){
	
	cli();
    1d64:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1d66:	20 91 44 02 	lds	r18, 0x0244
    1d6a:	30 91 45 02 	lds	r19, 0x0245
    1d6e:	20 34       	cpi	r18, 0x40	; 64
    1d70:	31 05       	cpc	r19, r1
    1d72:	90 f4       	brcc	.+36     	; 0x1d98 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1d74:	e2 e4       	ldi	r30, 0x42	; 66
    1d76:	f2 e0       	ldi	r31, 0x02	; 2
    1d78:	40 81       	ld	r20, Z
    1d7a:	51 81       	ldd	r21, Z+1	; 0x01
    1d7c:	da 01       	movw	r26, r20
    1d7e:	a0 50       	subi	r26, 0x00	; 0
    1d80:	be 4f       	sbci	r27, 0xFE	; 254
    1d82:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1d84:	4f 5f       	subi	r20, 0xFF	; 255
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	51 83       	std	Z+1, r21	; 0x01
    1d8a:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	30 93 45 02 	sts	0x0245, r19
    1d94:	20 93 44 02 	sts	0x0244, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1d98:	80 91 42 02 	lds	r24, 0x0242
    1d9c:	90 91 43 02 	lds	r25, 0x0243
    1da0:	80 34       	cpi	r24, 0x40	; 64
    1da2:	91 05       	cpc	r25, r1
    1da4:	21 f4       	brne	.+8      	; 0x1dae <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1da6:	10 92 43 02 	sts	0x0243, r1
    1daa:	10 92 42 02 	sts	0x0242, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1dae:	80 91 44 02 	lds	r24, 0x0244
    1db2:	90 91 45 02 	lds	r25, 0x0245
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f9 f4       	brne	.+62     	; 0x1df8 <spi_send_byte+0x94>
    1dba:	80 91 ff 01 	lds	r24, 0x01FF
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	1b c0       	rjmp	.+54     	; 0x1df8 <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    1dc2:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1dc4:	e0 91 40 02 	lds	r30, 0x0240
    1dc8:	f0 91 41 02 	lds	r31, 0x0241
    1dcc:	e0 50       	subi	r30, 0x00	; 0
    1dce:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1dd4:	e0 e4       	ldi	r30, 0x40	; 64
    1dd6:	f2 e0       	ldi	r31, 0x02	; 2
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1de2:	e4 e4       	ldi	r30, 0x44	; 68
    1de4:	f2 e0       	ldi	r31, 0x02	; 2
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1df0:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	80 93 ff 01 	sts	0x01FF, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1df8:	80 91 40 02 	lds	r24, 0x0240
    1dfc:	90 91 41 02 	lds	r25, 0x0241
    1e00:	80 34       	cpi	r24, 0x40	; 64
    1e02:	91 05       	cpc	r25, r1
    1e04:	21 f4       	brne	.+8      	; 0x1e0e <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1e06:	10 92 41 02 	sts	0x0241, r1
    1e0a:	10 92 40 02 	sts	0x0240, r1
	}
			
			

	sei();
    1e0e:	78 94       	sei
    1e10:	08 95       	ret

00001e12 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	20 91 8a 02 	lds	r18, 0x028A
    1e18:	30 91 8b 02 	lds	r19, 0x028B
    1e1c:	2b 30       	cpi	r18, 0x0B	; 11
    1e1e:	31 05       	cpc	r19, r1
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <is_package_recieved+0x12>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1e24:	08 95       	ret

00001e26 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	8c 01       	movw	r16, r24
    1e30:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1e32:	20 91 8a 02 	lds	r18, 0x028A
    1e36:	30 91 8b 02 	lds	r19, 0x028B
    1e3a:	23 2b       	or	r18, r19
    1e3c:	61 f1       	breq	.+88     	; 0x1e96 <read_sensor_info+0x70>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1e3e:	e0 91 86 02 	lds	r30, 0x0286
    1e42:	f0 91 87 02 	lds	r31, 0x0287
    1e46:	ea 5b       	subi	r30, 0xBA	; 186
    1e48:	fd 4f       	sbci	r31, 0xFD	; 253
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e4e:	d9 f4       	brne	.+54     	; 0x1e86 <read_sensor_info+0x60>
    1e50:	e0 df       	rcall	.-64     	; 0x1e12 <is_package_recieved>
    1e52:	88 23       	and	r24, r24
    1e54:	11 f1       	breq	.+68     	; 0x1e9a <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1e56:	59 df       	rcall	.-334    	; 0x1d0a <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1e58:	58 df       	rcall	.-336    	; 0x1d0a <spi_get_byte>
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1e5e:	55 df       	rcall	.-342    	; 0x1d0a <spi_get_byte>
    1e60:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1e62:	53 df       	rcall	.-346    	; 0x1d0a <spi_get_byte>
    1e64:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1e66:	51 df       	rcall	.-350    	; 0x1d0a <spi_get_byte>
    1e68:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1e6a:	4f df       	rcall	.-354    	; 0x1d0a <spi_get_byte>
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1e6e:	4d df       	rcall	.-358    	; 0x1d0a <spi_get_byte>
    1e70:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1e72:	4b df       	rcall	.-362    	; 0x1d0a <spi_get_byte>
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte();
    1e76:	49 df       	rcall	.-366    	; 0x1d0a <spi_get_byte>
    1e78:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1e7a:	47 df       	rcall	.-370    	; 0x1d0a <spi_get_byte>
    1e7c:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1e7e:	45 df       	rcall	.-374    	; 0x1d0a <spi_get_byte>
    1e80:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <read_sensor_info+0x7a>
	} else if (is_package_recieved()){
    1e86:	c5 df       	rcall	.-118    	; 0x1e12 <is_package_recieved>
    1e88:	88 23       	and	r24, r24
    1e8a:	49 f0       	breq	.+18     	; 0x1e9e <read_sensor_info+0x78>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1e8c:	3e df       	rcall	.-388    	; 0x1d0a <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1e8e:	be 01       	movw	r22, r28
    1e90:	c8 01       	movw	r24, r16
    1e92:	c9 df       	rcall	.-110    	; 0x1e26 <read_sensor_info>
    1e94:	05 c0       	rjmp	.+10     	; 0x1ea0 <read_sensor_info+0x7a>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <read_sensor_info+0x7a>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
	}
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <read_sensor_info+0x7a>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
	
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	08 95       	ret

00001eaa <stop>:


void stop()
{
    
    if (step==0)
    1eaa:	80 91 19 03 	lds	r24, 0x0319
    1eae:	81 11       	cpse	r24, r1
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <stop+0x16>
    {
        setESC(2830);
    1eb2:	8e e0       	ldi	r24, 0x0E	; 14
    1eb4:	9b e0       	ldi	r25, 0x0B	; 11
    1eb6:	7e de       	rcall	.-772    	; 0x1bb4 <setESC>
        setServo(MAXRIGHT);
    1eb8:	84 ee       	ldi	r24, 0xE4	; 228
    1eba:	9c e0       	ldi	r25, 0x0C	; 12
    1ebc:	96 ce       	rjmp	.-724    	; 0x1bea <setServo>
    1ebe:	08 95       	ret
    }
    else if (step==1)
    1ec0:	80 91 19 03 	lds	r24, 0x0319
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	51 f4       	brne	.+20     	; 0x1edc <stop+0x32>
    {
		OCR3A = 1000;
    1ec8:	88 ee       	ldi	r24, 0xE8	; 232
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	90 93 99 00 	sts	0x0099, r25
    1ed0:	80 93 98 00 	sts	0x0098, r24
		setServo(STRAIGHT);
    1ed4:	8e e1       	ldi	r24, 0x1E	; 30
    1ed6:	9a e0       	ldi	r25, 0x0A	; 10
    1ed8:	88 ce       	rjmp	.-752    	; 0x1bea <setServo>
    1eda:	08 95       	ret
	}
	else if (step ==2)
    1edc:	80 91 19 03 	lds	r24, 0x0319
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	51 f4       	brne	.+20     	; 0x1ef8 <stop+0x4e>
	{
		OCR3A = 30000;
    1ee4:	80 e3       	ldi	r24, 0x30	; 48
    1ee6:	95 e7       	ldi	r25, 0x75	; 117
    1ee8:	90 93 99 00 	sts	0x0099, r25
    1eec:	80 93 98 00 	sts	0x0098, r24
        setServo(MAXLEFT);
    1ef0:	86 ee       	ldi	r24, 0xE6	; 230
    1ef2:	97 e0       	ldi	r25, 0x07	; 7
    1ef4:	7a ce       	rjmp	.-780    	; 0x1bea <setServo>
    1ef6:	08 95       	ret
    }
    else if (step==3)
    1ef8:	80 91 19 03 	lds	r24, 0x0319
    1efc:	83 30       	cpi	r24, 0x03	; 3
    1efe:	69 f4       	brne	.+26     	; 0x1f1a <stop+0x70>
    {
        setESC(NEUTRAL);
    1f00:	8d ec       	ldi	r24, 0xCD	; 205
    1f02:	9a e0       	ldi	r25, 0x0A	; 10
    1f04:	57 de       	rcall	.-850    	; 0x1bb4 <setESC>
        setServo(STRAIGHT);
    1f06:	8e e1       	ldi	r24, 0x1E	; 30
    1f08:	9a e0       	ldi	r25, 0x0A	; 10
    1f0a:	6f de       	rcall	.-802    	; 0x1bea <setServo>
		OCR3A = 14399;
    1f0c:	8f e3       	ldi	r24, 0x3F	; 63
    1f0e:	98 e3       	ldi	r25, 0x38	; 56
    1f10:	90 93 99 00 	sts	0x0099, r25
    1f14:	80 93 98 00 	sts	0x0098, r24
    1f18:	08 95       	ret
    }
    else if (step==4)
    1f1a:	80 91 19 03 	lds	r24, 0x0319
    1f1e:	84 30       	cpi	r24, 0x04	; 4
    1f20:	69 f4       	brne	.+26     	; 0x1f3c <stop+0x92>
    {
		OCR3A = 30000;
    1f22:	80 e3       	ldi	r24, 0x30	; 48
    1f24:	95 e7       	ldi	r25, 0x75	; 117
    1f26:	90 93 99 00 	sts	0x0099, r25
    1f2a:	80 93 98 00 	sts	0x0098, r24
        setESC(2830);
    1f2e:	8e e0       	ldi	r24, 0x0E	; 14
    1f30:	9b e0       	ldi	r25, 0x0B	; 11
    1f32:	40 de       	rcall	.-896    	; 0x1bb4 <setESC>
        setServo(MAXLEFT);
    1f34:	86 ee       	ldi	r24, 0xE6	; 230
    1f36:	97 e0       	ldi	r25, 0x07	; 7
    1f38:	58 ce       	rjmp	.-848    	; 0x1bea <setServo>
    1f3a:	08 95       	ret
    }
	else if (step==5)
    1f3c:	80 91 19 03 	lds	r24, 0x0319
    1f40:	85 30       	cpi	r24, 0x05	; 5
    1f42:	51 f4       	brne	.+20     	; 0x1f58 <stop+0xae>
	{
		OCR3A = 27000;
    1f44:	88 e7       	ldi	r24, 0x78	; 120
    1f46:	99 e6       	ldi	r25, 0x69	; 105
    1f48:	90 93 99 00 	sts	0x0099, r25
    1f4c:	80 93 98 00 	sts	0x0098, r24
		setServo(MAXRIGHT);
    1f50:	84 ee       	ldi	r24, 0xE4	; 228
    1f52:	9c e0       	ldi	r25, 0x0C	; 12
    1f54:	4a ce       	rjmp	.-876    	; 0x1bea <setServo>
    1f56:	08 95       	ret
	}
	else if (step==6)
    1f58:	80 91 19 03 	lds	r24, 0x0319
    1f5c:	86 30       	cpi	r24, 0x06	; 6
    1f5e:	51 f4       	brne	.+20     	; 0x1f74 <stop+0xca>
	{
		setServo(STRAIGHT);
    1f60:	8e e1       	ldi	r24, 0x1E	; 30
    1f62:	9a e0       	ldi	r25, 0x0A	; 10
    1f64:	42 de       	rcall	.-892    	; 0x1bea <setServo>
		OCR3A = 10000;
    1f66:	80 e1       	ldi	r24, 0x10	; 16
    1f68:	97 e2       	ldi	r25, 0x27	; 39
    1f6a:	90 93 99 00 	sts	0x0099, r25
    1f6e:	80 93 98 00 	sts	0x0098, r24
    1f72:	08 95       	ret
	}
	else if (step==7)
    1f74:	80 91 19 03 	lds	r24, 0x0319
    1f78:	87 30       	cpi	r24, 0x07	; 7
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <stop+0xda>
	{
		isParking = 0;
    1f7c:	10 92 18 03 	sts	0x0318, r1
		resetCounter();
    1f80:	0c 94 88 00 	jmp	0x110	; 0x110 <resetCounter>
    1f84:	08 95       	ret

00001f86 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	0b b6       	in	r0, 0x3b	; 59
    1f92:	0f 92       	push	r0
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	af 93       	push	r26
    1fa0:	bf 93       	push	r27
    1fa2:	ef 93       	push	r30
    1fa4:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1fa6:	80 91 16 03 	lds	r24, 0x0316
    1faa:	90 91 17 03 	lds	r25, 0x0317
    1fae:	80 34       	cpi	r24, 0x40	; 64
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 24 03 	sts	0x0324, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1fba:	80 91 c6 00 	lds	r24, 0x00C6
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1fc0:	80 34       	cpi	r24, 0x40	; 64
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	e8 f4       	brcc	.+58     	; 0x2000 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1fc6:	e4 e1       	ldi	r30, 0x14	; 20
    1fc8:	f3 e0       	ldi	r31, 0x03	; 3
    1fca:	20 81       	ld	r18, Z
    1fcc:	31 81       	ldd	r19, Z+1	; 0x01
    1fce:	40 91 c6 00 	lds	r20, 0x00C6
    1fd2:	d9 01       	movw	r26, r18
    1fd4:	ae 52       	subi	r26, 0x2E	; 46
    1fd6:	bd 4f       	sbci	r27, 0xFD	; 253
    1fd8:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	90 93 17 03 	sts	0x0317, r25
    1fe8:	80 93 16 03 	sts	0x0316, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1fec:	80 91 16 03 	lds	r24, 0x0316
    1ff0:	90 91 17 03 	lds	r25, 0x0317
    1ff4:	80 34       	cpi	r24, 0x40	; 64
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	19 f4       	brne	.+6      	; 0x2000 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	80 93 22 03 	sts	0x0322, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    2000:	80 91 14 03 	lds	r24, 0x0314
    2004:	90 91 15 03 	lds	r25, 0x0315
    2008:	80 34       	cpi	r24, 0x40	; 64
    200a:	91 05       	cpc	r25, r1
    200c:	21 f4       	brne	.+8      	; 0x2016 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    200e:	10 92 15 03 	sts	0x0315, r1
    2012:	10 92 14 03 	sts	0x0314, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 21 03 	sts	0x0321, r24
}
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0b be       	out	0x3b, r0	; 59
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <__vector_22>:




ISR(USART0_TX_vect)
{
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	0b b6       	in	r0, 0x3b	; 59
    2048:	0f 92       	push	r0
    204a:	8f 93       	push	r24
    204c:	9f 93       	push	r25
    204e:	ef 93       	push	r30
    2050:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    2052:	80 91 d0 02 	lds	r24, 0x02D0
    2056:	90 91 d1 02 	lds	r25, 0x02D1
    205a:	80 34       	cpi	r24, 0x40	; 64
    205c:	91 05       	cpc	r25, r1
    205e:	19 f4       	brne	.+6      	; 0x2066 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    2060:	10 92 20 03 	sts	0x0320, r1
    2064:	02 c0       	rjmp	.+4      	; 0x206a <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    2066:	89 2b       	or	r24, r25
    2068:	b9 f0       	breq	.+46     	; 0x2098 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    206a:	e0 91 cc 02 	lds	r30, 0x02CC
    206e:	f0 91 cd 02 	lds	r31, 0x02CD
    2072:	e4 57       	subi	r30, 0x74	; 116
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
    2076:	80 81       	ld	r24, Z
    2078:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    207c:	ec ec       	ldi	r30, 0xCC	; 204
    207e:	f2 e0       	ldi	r31, 0x02	; 2
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    208a:	e0 ed       	ldi	r30, 0xD0	; 208
    208c:	f2 e0       	ldi	r31, 0x02	; 2
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    2098:	80 91 cc 02 	lds	r24, 0x02CC
    209c:	90 91 cd 02 	lds	r25, 0x02CD
    20a0:	80 34       	cpi	r24, 0x40	; 64
    20a2:	91 05       	cpc	r25, r1
    20a4:	21 f4       	brne	.+8      	; 0x20ae <__vector_22+0x72>
		tx_uart0.i_first = 0;
    20a6:	10 92 cd 02 	sts	0x02CD, r1
    20aa:	10 92 cc 02 	sts	0x02CC, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    20ae:	80 91 d0 02 	lds	r24, 0x02D0
    20b2:	90 91 d1 02 	lds	r25, 0x02D1
    20b6:	89 2b       	or	r24, r25
    20b8:	39 f4       	brne	.+14     	; 0x20c8 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    20ba:	10 92 23 03 	sts	0x0323, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    20be:	e1 ec       	ldi	r30, 0xC1	; 193
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8f 7b       	andi	r24, 0xBF	; 191
    20c6:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    20c8:	ff 91       	pop	r31
    20ca:	ef 91       	pop	r30
    20cc:	9f 91       	pop	r25
    20ce:	8f 91       	pop	r24
    20d0:	0f 90       	pop	r0
    20d2:	0b be       	out	0x3b, r0	; 59
    20d4:	0f 90       	pop	r0
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	0f 90       	pop	r0
    20da:	1f 90       	pop	r1
    20dc:	18 95       	reti

000020de <__subsf3>:
    20de:	50 58       	subi	r21, 0x80	; 128

000020e0 <__addsf3>:
    20e0:	bb 27       	eor	r27, r27
    20e2:	aa 27       	eor	r26, r26
    20e4:	0e d0       	rcall	.+28     	; 0x2102 <__addsf3x>
    20e6:	4d c1       	rjmp	.+666    	; 0x2382 <__fp_round>
    20e8:	3e d1       	rcall	.+636    	; 0x2366 <__fp_pscA>
    20ea:	30 f0       	brcs	.+12     	; 0x20f8 <__addsf3+0x18>
    20ec:	43 d1       	rcall	.+646    	; 0x2374 <__fp_pscB>
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__addsf3+0x18>
    20f0:	31 f4       	brne	.+12     	; 0x20fe <__addsf3+0x1e>
    20f2:	9f 3f       	cpi	r25, 0xFF	; 255
    20f4:	11 f4       	brne	.+4      	; 0x20fa <__addsf3+0x1a>
    20f6:	1e f4       	brtc	.+6      	; 0x20fe <__addsf3+0x1e>
    20f8:	33 c1       	rjmp	.+614    	; 0x2360 <__fp_nan>
    20fa:	0e f4       	brtc	.+2      	; 0x20fe <__addsf3+0x1e>
    20fc:	e0 95       	com	r30
    20fe:	e7 fb       	bst	r30, 7
    2100:	29 c1       	rjmp	.+594    	; 0x2354 <__fp_inf>

00002102 <__addsf3x>:
    2102:	e9 2f       	mov	r30, r25
    2104:	4f d1       	rcall	.+670    	; 0x23a4 <__fp_split3>
    2106:	80 f3       	brcs	.-32     	; 0x20e8 <__addsf3+0x8>
    2108:	ba 17       	cp	r27, r26
    210a:	62 07       	cpc	r22, r18
    210c:	73 07       	cpc	r23, r19
    210e:	84 07       	cpc	r24, r20
    2110:	95 07       	cpc	r25, r21
    2112:	18 f0       	brcs	.+6      	; 0x211a <__addsf3x+0x18>
    2114:	71 f4       	brne	.+28     	; 0x2132 <__addsf3x+0x30>
    2116:	9e f5       	brtc	.+102    	; 0x217e <__addsf3x+0x7c>
    2118:	67 c1       	rjmp	.+718    	; 0x23e8 <__fp_zero>
    211a:	0e f4       	brtc	.+2      	; 0x211e <__addsf3x+0x1c>
    211c:	e0 95       	com	r30
    211e:	0b 2e       	mov	r0, r27
    2120:	ba 2f       	mov	r27, r26
    2122:	a0 2d       	mov	r26, r0
    2124:	0b 01       	movw	r0, r22
    2126:	b9 01       	movw	r22, r18
    2128:	90 01       	movw	r18, r0
    212a:	0c 01       	movw	r0, r24
    212c:	ca 01       	movw	r24, r20
    212e:	a0 01       	movw	r20, r0
    2130:	11 24       	eor	r1, r1
    2132:	ff 27       	eor	r31, r31
    2134:	59 1b       	sub	r21, r25
    2136:	99 f0       	breq	.+38     	; 0x215e <__addsf3x+0x5c>
    2138:	59 3f       	cpi	r21, 0xF9	; 249
    213a:	50 f4       	brcc	.+20     	; 0x2150 <__addsf3x+0x4e>
    213c:	50 3e       	cpi	r21, 0xE0	; 224
    213e:	68 f1       	brcs	.+90     	; 0x219a <__addsf3x+0x98>
    2140:	1a 16       	cp	r1, r26
    2142:	f0 40       	sbci	r31, 0x00	; 0
    2144:	a2 2f       	mov	r26, r18
    2146:	23 2f       	mov	r18, r19
    2148:	34 2f       	mov	r19, r20
    214a:	44 27       	eor	r20, r20
    214c:	58 5f       	subi	r21, 0xF8	; 248
    214e:	f3 cf       	rjmp	.-26     	; 0x2136 <__addsf3x+0x34>
    2150:	46 95       	lsr	r20
    2152:	37 95       	ror	r19
    2154:	27 95       	ror	r18
    2156:	a7 95       	ror	r26
    2158:	f0 40       	sbci	r31, 0x00	; 0
    215a:	53 95       	inc	r21
    215c:	c9 f7       	brne	.-14     	; 0x2150 <__addsf3x+0x4e>
    215e:	7e f4       	brtc	.+30     	; 0x217e <__addsf3x+0x7c>
    2160:	1f 16       	cp	r1, r31
    2162:	ba 0b       	sbc	r27, r26
    2164:	62 0b       	sbc	r22, r18
    2166:	73 0b       	sbc	r23, r19
    2168:	84 0b       	sbc	r24, r20
    216a:	ba f0       	brmi	.+46     	; 0x219a <__addsf3x+0x98>
    216c:	91 50       	subi	r25, 0x01	; 1
    216e:	a1 f0       	breq	.+40     	; 0x2198 <__addsf3x+0x96>
    2170:	ff 0f       	add	r31, r31
    2172:	bb 1f       	adc	r27, r27
    2174:	66 1f       	adc	r22, r22
    2176:	77 1f       	adc	r23, r23
    2178:	88 1f       	adc	r24, r24
    217a:	c2 f7       	brpl	.-16     	; 0x216c <__addsf3x+0x6a>
    217c:	0e c0       	rjmp	.+28     	; 0x219a <__addsf3x+0x98>
    217e:	ba 0f       	add	r27, r26
    2180:	62 1f       	adc	r22, r18
    2182:	73 1f       	adc	r23, r19
    2184:	84 1f       	adc	r24, r20
    2186:	48 f4       	brcc	.+18     	; 0x219a <__addsf3x+0x98>
    2188:	87 95       	ror	r24
    218a:	77 95       	ror	r23
    218c:	67 95       	ror	r22
    218e:	b7 95       	ror	r27
    2190:	f7 95       	ror	r31
    2192:	9e 3f       	cpi	r25, 0xFE	; 254
    2194:	08 f0       	brcs	.+2      	; 0x2198 <__addsf3x+0x96>
    2196:	b3 cf       	rjmp	.-154    	; 0x20fe <__addsf3+0x1e>
    2198:	93 95       	inc	r25
    219a:	88 0f       	add	r24, r24
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <__addsf3x+0x9e>
    219e:	99 27       	eor	r25, r25
    21a0:	ee 0f       	add	r30, r30
    21a2:	97 95       	ror	r25
    21a4:	87 95       	ror	r24
    21a6:	08 95       	ret

000021a8 <__divsf3>:
    21a8:	0c d0       	rcall	.+24     	; 0x21c2 <__divsf3x>
    21aa:	eb c0       	rjmp	.+470    	; 0x2382 <__fp_round>
    21ac:	e3 d0       	rcall	.+454    	; 0x2374 <__fp_pscB>
    21ae:	40 f0       	brcs	.+16     	; 0x21c0 <__divsf3+0x18>
    21b0:	da d0       	rcall	.+436    	; 0x2366 <__fp_pscA>
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <__divsf3+0x18>
    21b4:	21 f4       	brne	.+8      	; 0x21be <__divsf3+0x16>
    21b6:	5f 3f       	cpi	r21, 0xFF	; 255
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <__divsf3+0x18>
    21ba:	cc c0       	rjmp	.+408    	; 0x2354 <__fp_inf>
    21bc:	51 11       	cpse	r21, r1
    21be:	15 c1       	rjmp	.+554    	; 0x23ea <__fp_szero>
    21c0:	cf c0       	rjmp	.+414    	; 0x2360 <__fp_nan>

000021c2 <__divsf3x>:
    21c2:	f0 d0       	rcall	.+480    	; 0x23a4 <__fp_split3>
    21c4:	98 f3       	brcs	.-26     	; 0x21ac <__divsf3+0x4>

000021c6 <__divsf3_pse>:
    21c6:	99 23       	and	r25, r25
    21c8:	c9 f3       	breq	.-14     	; 0x21bc <__divsf3+0x14>
    21ca:	55 23       	and	r21, r21
    21cc:	b1 f3       	breq	.-20     	; 0x21ba <__divsf3+0x12>
    21ce:	95 1b       	sub	r25, r21
    21d0:	55 0b       	sbc	r21, r21
    21d2:	bb 27       	eor	r27, r27
    21d4:	aa 27       	eor	r26, r26
    21d6:	62 17       	cp	r22, r18
    21d8:	73 07       	cpc	r23, r19
    21da:	84 07       	cpc	r24, r20
    21dc:	38 f0       	brcs	.+14     	; 0x21ec <__divsf3_pse+0x26>
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	5f 4f       	sbci	r21, 0xFF	; 255
    21e2:	22 0f       	add	r18, r18
    21e4:	33 1f       	adc	r19, r19
    21e6:	44 1f       	adc	r20, r20
    21e8:	aa 1f       	adc	r26, r26
    21ea:	a9 f3       	breq	.-22     	; 0x21d6 <__divsf3_pse+0x10>
    21ec:	33 d0       	rcall	.+102    	; 0x2254 <__divsf3_pse+0x8e>
    21ee:	0e 2e       	mov	r0, r30
    21f0:	3a f0       	brmi	.+14     	; 0x2200 <__divsf3_pse+0x3a>
    21f2:	e0 e8       	ldi	r30, 0x80	; 128
    21f4:	30 d0       	rcall	.+96     	; 0x2256 <__divsf3_pse+0x90>
    21f6:	91 50       	subi	r25, 0x01	; 1
    21f8:	50 40       	sbci	r21, 0x00	; 0
    21fa:	e6 95       	lsr	r30
    21fc:	00 1c       	adc	r0, r0
    21fe:	ca f7       	brpl	.-14     	; 0x21f2 <__divsf3_pse+0x2c>
    2200:	29 d0       	rcall	.+82     	; 0x2254 <__divsf3_pse+0x8e>
    2202:	fe 2f       	mov	r31, r30
    2204:	27 d0       	rcall	.+78     	; 0x2254 <__divsf3_pse+0x8e>
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	bb 1f       	adc	r27, r27
    220e:	26 17       	cp	r18, r22
    2210:	37 07       	cpc	r19, r23
    2212:	48 07       	cpc	r20, r24
    2214:	ab 07       	cpc	r26, r27
    2216:	b0 e8       	ldi	r27, 0x80	; 128
    2218:	09 f0       	breq	.+2      	; 0x221c <__divsf3_pse+0x56>
    221a:	bb 0b       	sbc	r27, r27
    221c:	80 2d       	mov	r24, r0
    221e:	bf 01       	movw	r22, r30
    2220:	ff 27       	eor	r31, r31
    2222:	93 58       	subi	r25, 0x83	; 131
    2224:	5f 4f       	sbci	r21, 0xFF	; 255
    2226:	2a f0       	brmi	.+10     	; 0x2232 <__divsf3_pse+0x6c>
    2228:	9e 3f       	cpi	r25, 0xFE	; 254
    222a:	51 05       	cpc	r21, r1
    222c:	68 f0       	brcs	.+26     	; 0x2248 <__divsf3_pse+0x82>
    222e:	92 c0       	rjmp	.+292    	; 0x2354 <__fp_inf>
    2230:	dc c0       	rjmp	.+440    	; 0x23ea <__fp_szero>
    2232:	5f 3f       	cpi	r21, 0xFF	; 255
    2234:	ec f3       	brlt	.-6      	; 0x2230 <__divsf3_pse+0x6a>
    2236:	98 3e       	cpi	r25, 0xE8	; 232
    2238:	dc f3       	brlt	.-10     	; 0x2230 <__divsf3_pse+0x6a>
    223a:	86 95       	lsr	r24
    223c:	77 95       	ror	r23
    223e:	67 95       	ror	r22
    2240:	b7 95       	ror	r27
    2242:	f7 95       	ror	r31
    2244:	9f 5f       	subi	r25, 0xFF	; 255
    2246:	c9 f7       	brne	.-14     	; 0x223a <__divsf3_pse+0x74>
    2248:	88 0f       	add	r24, r24
    224a:	91 1d       	adc	r25, r1
    224c:	96 95       	lsr	r25
    224e:	87 95       	ror	r24
    2250:	97 f9       	bld	r25, 7
    2252:	08 95       	ret
    2254:	e1 e0       	ldi	r30, 0x01	; 1
    2256:	66 0f       	add	r22, r22
    2258:	77 1f       	adc	r23, r23
    225a:	88 1f       	adc	r24, r24
    225c:	bb 1f       	adc	r27, r27
    225e:	62 17       	cp	r22, r18
    2260:	73 07       	cpc	r23, r19
    2262:	84 07       	cpc	r24, r20
    2264:	ba 07       	cpc	r27, r26
    2266:	20 f0       	brcs	.+8      	; 0x2270 <__divsf3_pse+0xaa>
    2268:	62 1b       	sub	r22, r18
    226a:	73 0b       	sbc	r23, r19
    226c:	84 0b       	sbc	r24, r20
    226e:	ba 0b       	sbc	r27, r26
    2270:	ee 1f       	adc	r30, r30
    2272:	88 f7       	brcc	.-30     	; 0x2256 <__divsf3_pse+0x90>
    2274:	e0 95       	com	r30
    2276:	08 95       	ret

00002278 <__fixsfsi>:
    2278:	04 d0       	rcall	.+8      	; 0x2282 <__fixunssfsi>
    227a:	68 94       	set
    227c:	b1 11       	cpse	r27, r1
    227e:	b5 c0       	rjmp	.+362    	; 0x23ea <__fp_szero>
    2280:	08 95       	ret

00002282 <__fixunssfsi>:
    2282:	98 d0       	rcall	.+304    	; 0x23b4 <__fp_splitA>
    2284:	88 f0       	brcs	.+34     	; 0x22a8 <__fixunssfsi+0x26>
    2286:	9f 57       	subi	r25, 0x7F	; 127
    2288:	90 f0       	brcs	.+36     	; 0x22ae <__fixunssfsi+0x2c>
    228a:	b9 2f       	mov	r27, r25
    228c:	99 27       	eor	r25, r25
    228e:	b7 51       	subi	r27, 0x17	; 23
    2290:	a0 f0       	brcs	.+40     	; 0x22ba <__fixunssfsi+0x38>
    2292:	d1 f0       	breq	.+52     	; 0x22c8 <__fixunssfsi+0x46>
    2294:	66 0f       	add	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	1a f0       	brmi	.+6      	; 0x22a4 <__fixunssfsi+0x22>
    229e:	ba 95       	dec	r27
    22a0:	c9 f7       	brne	.-14     	; 0x2294 <__fixunssfsi+0x12>
    22a2:	12 c0       	rjmp	.+36     	; 0x22c8 <__fixunssfsi+0x46>
    22a4:	b1 30       	cpi	r27, 0x01	; 1
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <__fixunssfsi+0x46>
    22a8:	9f d0       	rcall	.+318    	; 0x23e8 <__fp_zero>
    22aa:	b1 e0       	ldi	r27, 0x01	; 1
    22ac:	08 95       	ret
    22ae:	9c c0       	rjmp	.+312    	; 0x23e8 <__fp_zero>
    22b0:	67 2f       	mov	r22, r23
    22b2:	78 2f       	mov	r23, r24
    22b4:	88 27       	eor	r24, r24
    22b6:	b8 5f       	subi	r27, 0xF8	; 248
    22b8:	39 f0       	breq	.+14     	; 0x22c8 <__fixunssfsi+0x46>
    22ba:	b9 3f       	cpi	r27, 0xF9	; 249
    22bc:	cc f3       	brlt	.-14     	; 0x22b0 <__fixunssfsi+0x2e>
    22be:	86 95       	lsr	r24
    22c0:	77 95       	ror	r23
    22c2:	67 95       	ror	r22
    22c4:	b3 95       	inc	r27
    22c6:	d9 f7       	brne	.-10     	; 0x22be <__fixunssfsi+0x3c>
    22c8:	3e f4       	brtc	.+14     	; 0x22d8 <__fixunssfsi+0x56>
    22ca:	90 95       	com	r25
    22cc:	80 95       	com	r24
    22ce:	70 95       	com	r23
    22d0:	61 95       	neg	r22
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	8f 4f       	sbci	r24, 0xFF	; 255
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	08 95       	ret

000022da <__floatunsisf>:
    22da:	e8 94       	clt
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <__floatsisf+0x12>

000022de <__floatsisf>:
    22de:	97 fb       	bst	r25, 7
    22e0:	3e f4       	brtc	.+14     	; 0x22f0 <__floatsisf+0x12>
    22e2:	90 95       	com	r25
    22e4:	80 95       	com	r24
    22e6:	70 95       	com	r23
    22e8:	61 95       	neg	r22
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	8f 4f       	sbci	r24, 0xFF	; 255
    22ee:	9f 4f       	sbci	r25, 0xFF	; 255
    22f0:	99 23       	and	r25, r25
    22f2:	a9 f0       	breq	.+42     	; 0x231e <__floatsisf+0x40>
    22f4:	f9 2f       	mov	r31, r25
    22f6:	96 e9       	ldi	r25, 0x96	; 150
    22f8:	bb 27       	eor	r27, r27
    22fa:	93 95       	inc	r25
    22fc:	f6 95       	lsr	r31
    22fe:	87 95       	ror	r24
    2300:	77 95       	ror	r23
    2302:	67 95       	ror	r22
    2304:	b7 95       	ror	r27
    2306:	f1 11       	cpse	r31, r1
    2308:	f8 cf       	rjmp	.-16     	; 0x22fa <__floatsisf+0x1c>
    230a:	fa f4       	brpl	.+62     	; 0x234a <__floatsisf+0x6c>
    230c:	bb 0f       	add	r27, r27
    230e:	11 f4       	brne	.+4      	; 0x2314 <__floatsisf+0x36>
    2310:	60 ff       	sbrs	r22, 0
    2312:	1b c0       	rjmp	.+54     	; 0x234a <__floatsisf+0x6c>
    2314:	6f 5f       	subi	r22, 0xFF	; 255
    2316:	7f 4f       	sbci	r23, 0xFF	; 255
    2318:	8f 4f       	sbci	r24, 0xFF	; 255
    231a:	9f 4f       	sbci	r25, 0xFF	; 255
    231c:	16 c0       	rjmp	.+44     	; 0x234a <__floatsisf+0x6c>
    231e:	88 23       	and	r24, r24
    2320:	11 f0       	breq	.+4      	; 0x2326 <__floatsisf+0x48>
    2322:	96 e9       	ldi	r25, 0x96	; 150
    2324:	11 c0       	rjmp	.+34     	; 0x2348 <__floatsisf+0x6a>
    2326:	77 23       	and	r23, r23
    2328:	21 f0       	breq	.+8      	; 0x2332 <__floatsisf+0x54>
    232a:	9e e8       	ldi	r25, 0x8E	; 142
    232c:	87 2f       	mov	r24, r23
    232e:	76 2f       	mov	r23, r22
    2330:	05 c0       	rjmp	.+10     	; 0x233c <__floatsisf+0x5e>
    2332:	66 23       	and	r22, r22
    2334:	71 f0       	breq	.+28     	; 0x2352 <__floatsisf+0x74>
    2336:	96 e8       	ldi	r25, 0x86	; 134
    2338:	86 2f       	mov	r24, r22
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	2a f0       	brmi	.+10     	; 0x234a <__floatsisf+0x6c>
    2340:	9a 95       	dec	r25
    2342:	66 0f       	add	r22, r22
    2344:	77 1f       	adc	r23, r23
    2346:	88 1f       	adc	r24, r24
    2348:	da f7       	brpl	.-10     	; 0x2340 <__floatsisf+0x62>
    234a:	88 0f       	add	r24, r24
    234c:	96 95       	lsr	r25
    234e:	87 95       	ror	r24
    2350:	97 f9       	bld	r25, 7
    2352:	08 95       	ret

00002354 <__fp_inf>:
    2354:	97 f9       	bld	r25, 7
    2356:	9f 67       	ori	r25, 0x7F	; 127
    2358:	80 e8       	ldi	r24, 0x80	; 128
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	08 95       	ret

00002360 <__fp_nan>:
    2360:	9f ef       	ldi	r25, 0xFF	; 255
    2362:	80 ec       	ldi	r24, 0xC0	; 192
    2364:	08 95       	ret

00002366 <__fp_pscA>:
    2366:	00 24       	eor	r0, r0
    2368:	0a 94       	dec	r0
    236a:	16 16       	cp	r1, r22
    236c:	17 06       	cpc	r1, r23
    236e:	18 06       	cpc	r1, r24
    2370:	09 06       	cpc	r0, r25
    2372:	08 95       	ret

00002374 <__fp_pscB>:
    2374:	00 24       	eor	r0, r0
    2376:	0a 94       	dec	r0
    2378:	12 16       	cp	r1, r18
    237a:	13 06       	cpc	r1, r19
    237c:	14 06       	cpc	r1, r20
    237e:	05 06       	cpc	r0, r21
    2380:	08 95       	ret

00002382 <__fp_round>:
    2382:	09 2e       	mov	r0, r25
    2384:	03 94       	inc	r0
    2386:	00 0c       	add	r0, r0
    2388:	11 f4       	brne	.+4      	; 0x238e <__fp_round+0xc>
    238a:	88 23       	and	r24, r24
    238c:	52 f0       	brmi	.+20     	; 0x23a2 <__fp_round+0x20>
    238e:	bb 0f       	add	r27, r27
    2390:	40 f4       	brcc	.+16     	; 0x23a2 <__fp_round+0x20>
    2392:	bf 2b       	or	r27, r31
    2394:	11 f4       	brne	.+4      	; 0x239a <__fp_round+0x18>
    2396:	60 ff       	sbrs	r22, 0
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <__fp_round+0x20>
    239a:	6f 5f       	subi	r22, 0xFF	; 255
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	08 95       	ret

000023a4 <__fp_split3>:
    23a4:	57 fd       	sbrc	r21, 7
    23a6:	90 58       	subi	r25, 0x80	; 128
    23a8:	44 0f       	add	r20, r20
    23aa:	55 1f       	adc	r21, r21
    23ac:	59 f0       	breq	.+22     	; 0x23c4 <__fp_splitA+0x10>
    23ae:	5f 3f       	cpi	r21, 0xFF	; 255
    23b0:	71 f0       	breq	.+28     	; 0x23ce <__fp_splitA+0x1a>
    23b2:	47 95       	ror	r20

000023b4 <__fp_splitA>:
    23b4:	88 0f       	add	r24, r24
    23b6:	97 fb       	bst	r25, 7
    23b8:	99 1f       	adc	r25, r25
    23ba:	61 f0       	breq	.+24     	; 0x23d4 <__fp_splitA+0x20>
    23bc:	9f 3f       	cpi	r25, 0xFF	; 255
    23be:	79 f0       	breq	.+30     	; 0x23de <__fp_splitA+0x2a>
    23c0:	87 95       	ror	r24
    23c2:	08 95       	ret
    23c4:	12 16       	cp	r1, r18
    23c6:	13 06       	cpc	r1, r19
    23c8:	14 06       	cpc	r1, r20
    23ca:	55 1f       	adc	r21, r21
    23cc:	f2 cf       	rjmp	.-28     	; 0x23b2 <__fp_split3+0xe>
    23ce:	46 95       	lsr	r20
    23d0:	f1 df       	rcall	.-30     	; 0x23b4 <__fp_splitA>
    23d2:	08 c0       	rjmp	.+16     	; 0x23e4 <__fp_splitA+0x30>
    23d4:	16 16       	cp	r1, r22
    23d6:	17 06       	cpc	r1, r23
    23d8:	18 06       	cpc	r1, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	f1 cf       	rjmp	.-30     	; 0x23c0 <__fp_splitA+0xc>
    23de:	86 95       	lsr	r24
    23e0:	71 05       	cpc	r23, r1
    23e2:	61 05       	cpc	r22, r1
    23e4:	08 94       	sec
    23e6:	08 95       	ret

000023e8 <__fp_zero>:
    23e8:	e8 94       	clt

000023ea <__fp_szero>:
    23ea:	bb 27       	eor	r27, r27
    23ec:	66 27       	eor	r22, r22
    23ee:	77 27       	eor	r23, r23
    23f0:	cb 01       	movw	r24, r22
    23f2:	97 f9       	bld	r25, 7
    23f4:	08 95       	ret

000023f6 <__mulsf3>:
    23f6:	0b d0       	rcall	.+22     	; 0x240e <__mulsf3x>
    23f8:	c4 cf       	rjmp	.-120    	; 0x2382 <__fp_round>
    23fa:	b5 df       	rcall	.-150    	; 0x2366 <__fp_pscA>
    23fc:	28 f0       	brcs	.+10     	; 0x2408 <__mulsf3+0x12>
    23fe:	ba df       	rcall	.-140    	; 0x2374 <__fp_pscB>
    2400:	18 f0       	brcs	.+6      	; 0x2408 <__mulsf3+0x12>
    2402:	95 23       	and	r25, r21
    2404:	09 f0       	breq	.+2      	; 0x2408 <__mulsf3+0x12>
    2406:	a6 cf       	rjmp	.-180    	; 0x2354 <__fp_inf>
    2408:	ab cf       	rjmp	.-170    	; 0x2360 <__fp_nan>
    240a:	11 24       	eor	r1, r1
    240c:	ee cf       	rjmp	.-36     	; 0x23ea <__fp_szero>

0000240e <__mulsf3x>:
    240e:	ca df       	rcall	.-108    	; 0x23a4 <__fp_split3>
    2410:	a0 f3       	brcs	.-24     	; 0x23fa <__mulsf3+0x4>

00002412 <__mulsf3_pse>:
    2412:	95 9f       	mul	r25, r21
    2414:	d1 f3       	breq	.-12     	; 0x240a <__mulsf3+0x14>
    2416:	95 0f       	add	r25, r21
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	55 1f       	adc	r21, r21
    241c:	62 9f       	mul	r22, r18
    241e:	f0 01       	movw	r30, r0
    2420:	72 9f       	mul	r23, r18
    2422:	bb 27       	eor	r27, r27
    2424:	f0 0d       	add	r31, r0
    2426:	b1 1d       	adc	r27, r1
    2428:	63 9f       	mul	r22, r19
    242a:	aa 27       	eor	r26, r26
    242c:	f0 0d       	add	r31, r0
    242e:	b1 1d       	adc	r27, r1
    2430:	aa 1f       	adc	r26, r26
    2432:	64 9f       	mul	r22, r20
    2434:	66 27       	eor	r22, r22
    2436:	b0 0d       	add	r27, r0
    2438:	a1 1d       	adc	r26, r1
    243a:	66 1f       	adc	r22, r22
    243c:	82 9f       	mul	r24, r18
    243e:	22 27       	eor	r18, r18
    2440:	b0 0d       	add	r27, r0
    2442:	a1 1d       	adc	r26, r1
    2444:	62 1f       	adc	r22, r18
    2446:	73 9f       	mul	r23, r19
    2448:	b0 0d       	add	r27, r0
    244a:	a1 1d       	adc	r26, r1
    244c:	62 1f       	adc	r22, r18
    244e:	83 9f       	mul	r24, r19
    2450:	a0 0d       	add	r26, r0
    2452:	61 1d       	adc	r22, r1
    2454:	22 1f       	adc	r18, r18
    2456:	74 9f       	mul	r23, r20
    2458:	33 27       	eor	r19, r19
    245a:	a0 0d       	add	r26, r0
    245c:	61 1d       	adc	r22, r1
    245e:	23 1f       	adc	r18, r19
    2460:	84 9f       	mul	r24, r20
    2462:	60 0d       	add	r22, r0
    2464:	21 1d       	adc	r18, r1
    2466:	82 2f       	mov	r24, r18
    2468:	76 2f       	mov	r23, r22
    246a:	6a 2f       	mov	r22, r26
    246c:	11 24       	eor	r1, r1
    246e:	9f 57       	subi	r25, 0x7F	; 127
    2470:	50 40       	sbci	r21, 0x00	; 0
    2472:	8a f0       	brmi	.+34     	; 0x2496 <__mulsf3_pse+0x84>
    2474:	e1 f0       	breq	.+56     	; 0x24ae <__mulsf3_pse+0x9c>
    2476:	88 23       	and	r24, r24
    2478:	4a f0       	brmi	.+18     	; 0x248c <__mulsf3_pse+0x7a>
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	bb 1f       	adc	r27, r27
    2480:	66 1f       	adc	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	50 40       	sbci	r21, 0x00	; 0
    248a:	a9 f7       	brne	.-22     	; 0x2476 <__mulsf3_pse+0x64>
    248c:	9e 3f       	cpi	r25, 0xFE	; 254
    248e:	51 05       	cpc	r21, r1
    2490:	70 f0       	brcs	.+28     	; 0x24ae <__mulsf3_pse+0x9c>
    2492:	60 cf       	rjmp	.-320    	; 0x2354 <__fp_inf>
    2494:	aa cf       	rjmp	.-172    	; 0x23ea <__fp_szero>
    2496:	5f 3f       	cpi	r21, 0xFF	; 255
    2498:	ec f3       	brlt	.-6      	; 0x2494 <__mulsf3_pse+0x82>
    249a:	98 3e       	cpi	r25, 0xE8	; 232
    249c:	dc f3       	brlt	.-10     	; 0x2494 <__mulsf3_pse+0x82>
    249e:	86 95       	lsr	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	b7 95       	ror	r27
    24a6:	f7 95       	ror	r31
    24a8:	e7 95       	ror	r30
    24aa:	9f 5f       	subi	r25, 0xFF	; 255
    24ac:	c1 f7       	brne	.-16     	; 0x249e <__mulsf3_pse+0x8c>
    24ae:	fe 2b       	or	r31, r30
    24b0:	88 0f       	add	r24, r24
    24b2:	91 1d       	adc	r25, r1
    24b4:	96 95       	lsr	r25
    24b6:	87 95       	ror	r24
    24b8:	97 f9       	bld	r25, 7
    24ba:	08 95       	ret

000024bc <__divmodhi4>:
    24bc:	97 fb       	bst	r25, 7
    24be:	07 2e       	mov	r0, r23
    24c0:	16 f4       	brtc	.+4      	; 0x24c6 <__divmodhi4+0xa>
    24c2:	00 94       	com	r0
    24c4:	06 d0       	rcall	.+12     	; 0x24d2 <__divmodhi4_neg1>
    24c6:	77 fd       	sbrc	r23, 7
    24c8:	08 d0       	rcall	.+16     	; 0x24da <__divmodhi4_neg2>
    24ca:	0b d0       	rcall	.+22     	; 0x24e2 <__udivmodhi4>
    24cc:	07 fc       	sbrc	r0, 7
    24ce:	05 d0       	rcall	.+10     	; 0x24da <__divmodhi4_neg2>
    24d0:	3e f4       	brtc	.+14     	; 0x24e0 <__divmodhi4_exit>

000024d2 <__divmodhi4_neg1>:
    24d2:	90 95       	com	r25
    24d4:	81 95       	neg	r24
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	08 95       	ret

000024da <__divmodhi4_neg2>:
    24da:	70 95       	com	r23
    24dc:	61 95       	neg	r22
    24de:	7f 4f       	sbci	r23, 0xFF	; 255

000024e0 <__divmodhi4_exit>:
    24e0:	08 95       	ret

000024e2 <__udivmodhi4>:
    24e2:	aa 1b       	sub	r26, r26
    24e4:	bb 1b       	sub	r27, r27
    24e6:	51 e1       	ldi	r21, 0x11	; 17
    24e8:	07 c0       	rjmp	.+14     	; 0x24f8 <__udivmodhi4_ep>

000024ea <__udivmodhi4_loop>:
    24ea:	aa 1f       	adc	r26, r26
    24ec:	bb 1f       	adc	r27, r27
    24ee:	a6 17       	cp	r26, r22
    24f0:	b7 07       	cpc	r27, r23
    24f2:	10 f0       	brcs	.+4      	; 0x24f8 <__udivmodhi4_ep>
    24f4:	a6 1b       	sub	r26, r22
    24f6:	b7 0b       	sbc	r27, r23

000024f8 <__udivmodhi4_ep>:
    24f8:	88 1f       	adc	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	5a 95       	dec	r21
    24fe:	a9 f7       	brne	.-22     	; 0x24ea <__udivmodhi4_loop>
    2500:	80 95       	com	r24
    2502:	90 95       	com	r25
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	08 95       	ret

0000250a <strcpy>:
    250a:	fb 01       	movw	r30, r22
    250c:	dc 01       	movw	r26, r24
    250e:	01 90       	ld	r0, Z+
    2510:	0d 92       	st	X+, r0
    2512:	00 20       	and	r0, r0
    2514:	e1 f7       	brne	.-8      	; 0x250e <strcpy+0x4>
    2516:	08 95       	ret

00002518 <_exit>:
    2518:	f8 94       	cli

0000251a <__stop_program>:
    251a:	ff cf       	rjmp	.-2      	; 0x251a <__stop_program>
