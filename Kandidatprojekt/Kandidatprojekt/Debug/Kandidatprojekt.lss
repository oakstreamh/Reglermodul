
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000016bc  00001750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001aa  008001aa  000017fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000142f  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000661  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018fb  00000000  00000000  000033f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00004cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010a0c  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce8  00000000  00000000  00015a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0001676c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000037e7  00000000  00000000  00016884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	e8 c7       	rjmp	.+4048   	; 0x101a <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_22>
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c7       	rjmp	.+3808   	; 0xf52 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec eb       	ldi	r30, 0xBC	; 188
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3a       	cpi	r26, 0xAA	; 170
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa ea       	ldi	r26, 0xAA	; 170
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 36       	cpi	r26, 0x6F	; 111
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d2 d7       	rcall	.+4004   	; 0x1068 <main>
      c4:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_steering>:
* Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
* Output: speed, (PWM counter)
*/
void FLC_steering(int c, int s, int v)

{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c8 59       	subi	r28, 0x98	; 152
      f4:	d2 40       	sbci	r29, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
	struct io_type delta_C;
	struct io_type steering;
	struct io_type delta_V;
	
	// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     100:	99 23       	and	r25, r25
     102:	1c f4       	brge	.+6      	; 0x10a <FLC_steering+0x40>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     104:	1c 86       	std	Y+12, r1	; 0x0c
     106:	1b 86       	std	Y+11, r1	; 0x0b
     108:	0a c0       	rjmp	.+20     	; 0x11e <FLC_steering+0x54>
	}
	else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     10a:	8e 3c       	cpi	r24, 0xCE	; 206
     10c:	91 05       	cpc	r25, r1
     10e:	2c f0       	brlt	.+10     	; 0x11a <FLC_steering+0x50>
	{
		delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     110:	8d ec       	ldi	r24, 0xCD	; 205
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	9c 87       	std	Y+12, r25	; 0x0c
     116:	8b 87       	std	Y+11, r24	; 0x0b
     118:	02 c0       	rjmp	.+4      	; 0x11e <FLC_steering+0x54>
	}
	else
	{
		delta_C.value = c;
     11a:	9c 87       	std	Y+12, r25	; 0x0c
     11c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	// set iAng's input value to measAng value
	if(s<2260)				// if sensor value is smaller than error's input set lower limit
     11e:	64 3d       	cpi	r22, 0xD4	; 212
     120:	08 e0       	ldi	r16, 0x08	; 8
     122:	70 07       	cpc	r23, r16
     124:	2c f4       	brge	.+10     	; 0x130 <FLC_steering+0x66>
	{
		steering.value = 2260;  // force input value to lowest point in delta_C's input set
     126:	84 ed       	ldi	r24, 0xD4	; 212
     128:	98 e0       	ldi	r25, 0x08	; 8
     12a:	9c 8f       	std	Y+28, r25	; 0x1c
     12c:	8b 8f       	std	Y+27, r24	; 0x1b
     12e:	0b c0       	rjmp	.+22     	; 0x146 <FLC_steering+0x7c>
	}
	else if(s>3060)			// if sensor value is bigger than error's input set's upper limit
     130:	65 3f       	cpi	r22, 0xF5	; 245
     132:	1b e0       	ldi	r17, 0x0B	; 11
     134:	71 07       	cpc	r23, r17
     136:	2c f0       	brlt	.+10     	; 0x142 <FLC_steering+0x78>
	{
		steering.value = 3060;  // force input value to lowest point in error's input set
     138:	84 ef       	ldi	r24, 0xF4	; 244
     13a:	9b e0       	ldi	r25, 0x0B	; 11
     13c:	9c 8f       	std	Y+28, r25	; 0x1c
     13e:	8b 8f       	std	Y+27, r24	; 0x1b
     140:	02 c0       	rjmp	.+4      	; 0x146 <FLC_steering+0x7c>
	}
	else
	{
		steering.value = s;
     142:	7c 8f       	std	Y+28, r23	; 0x1c
     144:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// set V's input value to VÂ´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
     146:	55 23       	and	r21, r21
     148:	1c f4       	brge	.+6      	; 0x150 <FLC_steering+0x86>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     14a:	1c a6       	std	Y+44, r1	; 0x2c
     14c:	1b a6       	std	Y+43, r1	; 0x2b
     14e:	0a c0       	rjmp	.+20     	; 0x164 <FLC_steering+0x9a>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     150:	41 35       	cpi	r20, 0x51	; 81
     152:	51 05       	cpc	r21, r1
     154:	2c f0       	brlt	.+10     	; 0x160 <FLC_steering+0x96>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
     156:	80 e5       	ldi	r24, 0x50	; 80
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9c a7       	std	Y+44, r25	; 0x2c
     15c:	8b a7       	std	Y+43, r24	; 0x2b
     15e:	02 c0       	rjmp	.+4      	; 0x164 <FLC_steering+0x9a>
	}
	else
	{
		delta_V.value = v;
     160:	5c a7       	std	Y+44, r21	; 0x2c
     162:	4b a7       	std	Y+43, r20	; 0x2b
	}
	
	
	// DECLARATION OF C INPUT INPUT 1
	//struct io_type delta_C;
	strcpy(delta_C.name, "delta_C");
     164:	88 e0       	ldi	r24, 0x08	; 8
     166:	e0 e0       	ldi	r30, 0x00	; 0
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	de 01       	movw	r26, r28
     16c:	11 96       	adiw	r26, 0x01	; 1
     16e:	01 90       	ld	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	8a 95       	dec	r24
     174:	e1 f7       	brne	.-8      	; 0x16e <FLC_steering+0xa4>
	//MFs
	struct mf_type negative;
	strcpy(negative.name, "negative");
     176:	9e 01       	movw	r18, r28
     178:	2f 5c       	subi	r18, 0xCF	; 207
     17a:	3f 4f       	sbci	r19, 0xFF	; 255
     17c:	89 e0       	ldi	r24, 0x09	; 9
     17e:	e8 e0       	ldi	r30, 0x08	; 8
     180:	f1 e0       	ldi	r31, 0x01	; 1
     182:	d9 01       	movw	r26, r18
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <FLC_steering+0xba>
	negative.value = 0;
     18c:	1c ae       	std	Y+60, r1	; 0x3c
     18e:	1b ae       	std	Y+59, r1	; 0x3b
	negative.point1 = 44;
     190:	8c e2       	ldi	r24, 0x2C	; 44
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	9e af       	std	Y+62, r25	; 0x3e
     196:	8d af       	std	Y+61, r24	; 0x3d
	negative.point2= 110;
     198:	8e e6       	ldi	r24, 0x6E	; 110
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	21 96       	adiw	r28, 0x01	; 1
     19e:	9f af       	std	Y+63, r25	; 0x3f
     1a0:	8e af       	std	Y+62, r24	; 0x3e
     1a2:	21 97       	sbiw	r28, 0x01	; 1
	negative.slope1 = 100;
     1a4:	44 e6       	ldi	r20, 0x64	; 100
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	23 96       	adiw	r28, 0x03	; 3
     1aa:	5f af       	std	Y+63, r21	; 0x3f
     1ac:	4e af       	std	Y+62, r20	; 0x3e
     1ae:	23 97       	sbiw	r28, 0x03	; 3
	negative.slope2 = 2;
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	25 96       	adiw	r28, 0x05	; 5
     1b6:	9f af       	std	Y+63, r25	; 0x3f
     1b8:	8e af       	std	Y+62, r24	; 0x3e
     1ba:	25 97       	sbiw	r28, 0x05	; 5
	struct mf_type zer;
	strcpy(zer.name, "zer");
     1bc:	2e 01       	movw	r4, r28
     1be:	57 e4       	ldi	r21, 0x47	; 71
     1c0:	45 0e       	add	r4, r21
     1c2:	51 1c       	adc	r5, r1
     1c4:	4a e7       	ldi	r20, 0x7A	; 122
     1c6:	55 e6       	ldi	r21, 0x65	; 101
     1c8:	62 e7       	ldi	r22, 0x72	; 114
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	d2 01       	movw	r26, r4
     1ce:	4d 93       	st	X+, r20
     1d0:	5d 93       	st	X+, r21
     1d2:	6d 93       	st	X+, r22
     1d4:	7c 93       	st	X, r23
     1d6:	13 97       	sbiw	r26, 0x03	; 3
	zer.value = 0;
     1d8:	1b 96       	adiw	r26, 0x0b	; 11
     1da:	1c 92       	st	X, r1
     1dc:	1e 92       	st	-X, r1
     1de:	1a 97       	sbiw	r26, 0x0a	; 10
	zer.point1 = 75;
     1e0:	4b e4       	ldi	r20, 0x4B	; 75
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	1d 96       	adiw	r26, 0x0d	; 13
     1e6:	5c 93       	st	X, r21
     1e8:	4e 93       	st	-X, r20
     1ea:	1c 97       	sbiw	r26, 0x0c	; 12
	zer.point2= 175;
     1ec:	4f ea       	ldi	r20, 0xAF	; 175
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	1f 96       	adiw	r26, 0x0f	; 15
     1f2:	5c 93       	st	X, r21
     1f4:	4e 93       	st	-X, r20
     1f6:	1e 97       	sbiw	r26, 0x0e	; 14
	zer.slope1 = 2;
     1f8:	51 96       	adiw	r26, 0x11	; 17
     1fa:	9c 93       	st	X, r25
     1fc:	8e 93       	st	-X, r24
     1fe:	50 97       	sbiw	r26, 0x10	; 16
	zer.slope2 = 2;
     200:	53 96       	adiw	r26, 0x13	; 19
     202:	9c 93       	st	X, r25
     204:	8e 93       	st	-X, r24
     206:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type positive;
	strcpy(positive.name, "positive");
     208:	49 e0       	ldi	r20, 0x09	; 9
     20a:	e1 e1       	ldi	r30, 0x11	; 17
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	56 96       	adiw	r26, 0x16	; 22
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	4a 95       	dec	r20
     216:	e1 f7       	brne	.-8      	; 0x210 <FLC_steering+0x146>
	positive.value = 0;
     218:	a9 96       	adiw	r28, 0x29	; 41
     21a:	1f ae       	std	Y+63, r1	; 0x3f
     21c:	1e ae       	std	Y+62, r1	; 0x3e
     21e:	a9 97       	sbiw	r28, 0x29	; 41
	positive.point1 = 140;
     220:	4c e8       	ldi	r20, 0x8C	; 140
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	ab 96       	adiw	r28, 0x2b	; 43
     226:	5f af       	std	Y+63, r21	; 0x3f
     228:	4e af       	std	Y+62, r20	; 0x3e
     22a:	ab 97       	sbiw	r28, 0x2b	; 43
	positive.point2= 206;
     22c:	4e ec       	ldi	r20, 0xCE	; 206
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	ad 96       	adiw	r28, 0x2d	; 45
     232:	5f af       	std	Y+63, r21	; 0x3f
     234:	4e af       	std	Y+62, r20	; 0x3e
     236:	ad 97       	sbiw	r28, 0x2d	; 45
	positive.slope1 = 2;
     238:	af 96       	adiw	r28, 0x2f	; 47
     23a:	9f af       	std	Y+63, r25	; 0x3f
     23c:	8e af       	std	Y+62, r24	; 0x3e
     23e:	af 97       	sbiw	r28, 0x2f	; 47
	positive.slope2 = 100;
     240:	e4 e6       	ldi	r30, 0x64	; 100
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	e1 96       	adiw	r28, 0x31	; 49
     246:	ff af       	std	Y+63, r31	; 0x3f
     248:	ee af       	std	Y+62, r30	; 0x3e
     24a:	e1 97       	sbiw	r28, 0x31	; 49

	delta_C.membership_functions = &negative;
     24c:	3e 87       	std	Y+14, r19	; 0x0e
     24e:	2d 87       	std	Y+13, r18	; 0x0d
	negative.next = &zer;
     250:	27 96       	adiw	r28, 0x07	; 7
     252:	5f ae       	std	Y+63, r5	; 0x3f
     254:	4e ae       	std	Y+62, r4	; 0x3e
     256:	27 97       	sbiw	r28, 0x07	; 7
	zer.next = &positive;
     258:	ed e5       	ldi	r30, 0x5D	; 93
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ec 0f       	add	r30, r28
     25e:	fd 1f       	adc	r31, r29
     260:	d2 01       	movw	r26, r4
     262:	55 96       	adiw	r26, 0x15	; 21
     264:	fc 93       	st	X, r31
     266:	ee 93       	st	-X, r30
     268:	54 97       	sbiw	r26, 0x14	; 20
	positive.next = NULL;
     26a:	e3 96       	adiw	r28, 0x33	; 51
     26c:	1f ae       	std	Y+63, r1	; 0x3f
     26e:	1e ae       	std	Y+62, r1	; 0x3e
     270:	e3 97       	sbiw	r28, 0x33	; 51
	
	// DECLARATION OF STEERING INPUT (2)
	
	strcpy(steering.name, "steering");
     272:	89 e0       	ldi	r24, 0x09	; 9
     274:	ea e1       	ldi	r30, 0x1A	; 26
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	d6 97       	sbiw	r26, 0x36	; 54
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	8a 95       	dec	r24
     280:	e1 f7       	brne	.-8      	; 0x27a <FLC_steering+0x1b0>
	
	//MFs
	struct mf_type inShRight;
	strcpy(inShRight.name, "inShRight");
     282:	2e 5b       	subi	r18, 0xBE	; 190
     284:	3f 4f       	sbci	r19, 0xFF	; 255
     286:	8a e0       	ldi	r24, 0x0A	; 10
     288:	e5 e9       	ldi	r30, 0x95	; 149
     28a:	f1 e0       	ldi	r31, 0x01	; 1
     28c:	d9 01       	movw	r26, r18
     28e:	01 90       	ld	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	8a 95       	dec	r24
     294:	e1 f7       	brne	.-8      	; 0x28e <FLC_steering+0x1c4>
	inShRight.value = 0;
     296:	d9 01       	movw	r26, r18
     298:	1b 96       	adiw	r26, 0x0b	; 11
     29a:	1c 92       	st	X, r1
     29c:	1e 92       	st	-X, r1
     29e:	1a 97       	sbiw	r26, 0x0a	; 10
	inShRight.point1 = 2259;
     2a0:	e3 ed       	ldi	r30, 0xD3	; 211
     2a2:	f8 e0       	ldi	r31, 0x08	; 8
     2a4:	1d 96       	adiw	r26, 0x0d	; 13
     2a6:	fc 93       	st	X, r31
     2a8:	ee 93       	st	-X, r30
     2aa:	1c 97       	sbiw	r26, 0x0c	; 12
	inShRight.point2= 2400;
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f0 e6       	ldi	r31, 0x60	; 96
     2b0:	2f 2e       	mov	r2, r31
     2b2:	f9 e0       	ldi	r31, 0x09	; 9
     2b4:	3f 2e       	mov	r3, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	1f 96       	adiw	r26, 0x0f	; 15
     2ba:	3c 92       	st	X, r3
     2bc:	2e 92       	st	-X, r2
     2be:	1e 97       	sbiw	r26, 0x0e	; 14
	inShRight.slope1 = 100;
     2c0:	04 e6       	ldi	r16, 0x64	; 100
     2c2:	10 e0       	ldi	r17, 0x00	; 0
     2c4:	51 96       	adiw	r26, 0x11	; 17
     2c6:	1c 93       	st	X, r17
     2c8:	0e 93       	st	-X, r16
     2ca:	50 97       	sbiw	r26, 0x10	; 16
	inShRight.slope2 = 1;
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	53 96       	adiw	r26, 0x13	; 19
     2d2:	5c 93       	st	X, r21
     2d4:	4e 93       	st	-X, r20
     2d6:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inRight;
	strcpy(inRight.name, "inRight");
     2d8:	4e 01       	movw	r8, r28
     2da:	19 e8       	ldi	r17, 0x89	; 137
     2dc:	81 0e       	add	r8, r17
     2de:	91 1c       	adc	r9, r1
     2e0:	88 e0       	ldi	r24, 0x08	; 8
     2e2:	e3 e2       	ldi	r30, 0x23	; 35
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	d4 01       	movw	r26, r8
     2e8:	01 90       	ld	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	8a 95       	dec	r24
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <FLC_steering+0x21e>
	inRight.value = 0;
     2f0:	d4 01       	movw	r26, r8
     2f2:	1b 96       	adiw	r26, 0x0b	; 11
     2f4:	1c 92       	st	X, r1
     2f6:	1e 92       	st	-X, r1
     2f8:	1a 97       	sbiw	r26, 0x0a	; 10
	inRight.point1 = 2300;
     2fa:	8c ef       	ldi	r24, 0xFC	; 252
     2fc:	98 e0       	ldi	r25, 0x08	; 8
     2fe:	1d 96       	adiw	r26, 0x0d	; 13
     300:	9c 93       	st	X, r25
     302:	8e 93       	st	-X, r24
     304:	1c 97       	sbiw	r26, 0x0c	; 12
	inRight.point2= 2580;
     306:	84 e1       	ldi	r24, 0x14	; 20
     308:	9a e0       	ldi	r25, 0x0A	; 10
     30a:	1f 96       	adiw	r26, 0x0f	; 15
     30c:	9c 93       	st	X, r25
     30e:	8e 93       	st	-X, r24
     310:	1e 97       	sbiw	r26, 0x0e	; 14
	inRight.slope1 = 1;
     312:	51 96       	adiw	r26, 0x11	; 17
     314:	5c 93       	st	X, r21
     316:	4e 93       	st	-X, r20
     318:	50 97       	sbiw	r26, 0x10	; 16
	inRight.slope2 = 1;
     31a:	53 96       	adiw	r26, 0x13	; 19
     31c:	5c 93       	st	X, r21
     31e:	4e 93       	st	-X, r20
     320:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inStraight;
	strcpy(inStraight.name, "inStraight");
     322:	8b e0       	ldi	r24, 0x0B	; 11
     324:	eb e2       	ldi	r30, 0x2B	; 43
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	56 96       	adiw	r26, 0x16	; 22
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	8a 95       	dec	r24
     330:	e1 f7       	brne	.-8      	; 0x32a <FLC_steering+0x260>
	inStraight.value = 0;
     332:	c7 55       	subi	r28, 0x57	; 87
     334:	df 4f       	sbci	r29, 0xFF	; 255
     336:	19 82       	std	Y+1, r1	; 0x01
     338:	18 82       	st	Y, r1
     33a:	c9 5a       	subi	r28, 0xA9	; 169
     33c:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.point1 = 2480;
     33e:	e0 eb       	ldi	r30, 0xB0	; 176
     340:	f9 e0       	ldi	r31, 0x09	; 9
     342:	c5 55       	subi	r28, 0x55	; 85
     344:	df 4f       	sbci	r29, 0xFF	; 255
     346:	f9 83       	std	Y+1, r31	; 0x01
     348:	e8 83       	st	Y, r30
     34a:	cb 5a       	subi	r28, 0xAB	; 171
     34c:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.point2= 2840;
     34e:	0f 2e       	mov	r0, r31
     350:	f8 e1       	ldi	r31, 0x18	; 24
     352:	ef 2e       	mov	r14, r31
     354:	fb e0       	ldi	r31, 0x0B	; 11
     356:	ff 2e       	mov	r15, r31
     358:	f0 2d       	mov	r31, r0
     35a:	c3 55       	subi	r28, 0x53	; 83
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	f9 82       	std	Y+1, r15	; 0x01
     360:	e8 82       	st	Y, r14
     362:	cd 5a       	subi	r28, 0xAD	; 173
     364:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.slope1 = 1;
     366:	c1 55       	subi	r28, 0x51	; 81
     368:	df 4f       	sbci	r29, 0xFF	; 255
     36a:	59 83       	std	Y+1, r21	; 0x01
     36c:	48 83       	st	Y, r20
     36e:	cf 5a       	subi	r28, 0xAF	; 175
     370:	d0 40       	sbci	r29, 0x00	; 0
	inStraight.slope2 = 1;
     372:	cf 54       	subi	r28, 0x4F	; 79
     374:	df 4f       	sbci	r29, 0xFF	; 255
     376:	59 83       	std	Y+1, r21	; 0x01
     378:	48 83       	st	Y, r20
     37a:	c1 5b       	subi	r28, 0xB1	; 177
     37c:	d0 40       	sbci	r29, 0x00	; 0

	struct mf_type inLeft;
	strcpy(inLeft.name, "inLeft");
     37e:	87 e0       	ldi	r24, 0x07	; 7
     380:	e6 e3       	ldi	r30, 0x36	; 54
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	de 01       	movw	r26, r28
     386:	ab 54       	subi	r26, 0x4B	; 75
     388:	bf 4f       	sbci	r27, 0xFF	; 255
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <FLC_steering+0x2c0>
	inLeft.value = 0;
     392:	c1 54       	subi	r28, 0x41	; 65
     394:	df 4f       	sbci	r29, 0xFF	; 255
     396:	19 82       	std	Y+1, r1	; 0x01
     398:	18 82       	st	Y, r1
     39a:	cf 5b       	subi	r28, 0xBF	; 191
     39c:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.point1 = 2740;
     39e:	84 eb       	ldi	r24, 0xB4	; 180
     3a0:	9a e0       	ldi	r25, 0x0A	; 10
     3a2:	cf 53       	subi	r28, 0x3F	; 63
     3a4:	df 4f       	sbci	r29, 0xFF	; 255
     3a6:	99 83       	std	Y+1, r25	; 0x01
     3a8:	88 83       	st	Y, r24
     3aa:	c1 5c       	subi	r28, 0xC1	; 193
     3ac:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.point2= 3020;
     3ae:	8c ec       	ldi	r24, 0xCC	; 204
     3b0:	9b e0       	ldi	r25, 0x0B	; 11
     3b2:	cd 53       	subi	r28, 0x3D	; 61
     3b4:	df 4f       	sbci	r29, 0xFF	; 255
     3b6:	99 83       	std	Y+1, r25	; 0x01
     3b8:	88 83       	st	Y, r24
     3ba:	c3 5c       	subi	r28, 0xC3	; 195
     3bc:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.slope1 = 1;
     3be:	cb 53       	subi	r28, 0x3B	; 59
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	59 83       	std	Y+1, r21	; 0x01
     3c4:	48 83       	st	Y, r20
     3c6:	c5 5c       	subi	r28, 0xC5	; 197
     3c8:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.slope2 = 1;
     3ca:	c9 53       	subi	r28, 0x39	; 57
     3cc:	df 4f       	sbci	r29, 0xFF	; 255
     3ce:	59 83       	std	Y+1, r21	; 0x01
     3d0:	48 83       	st	Y, r20
     3d2:	c7 5c       	subi	r28, 0xC7	; 199
     3d4:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type inShLeft;
	strcpy(inShLeft.name, "inShLeft");
     3d6:	ce 01       	movw	r24, r28
     3d8:	85 53       	subi	r24, 0x35	; 53
     3da:	9f 4f       	sbci	r25, 0xFF	; 255
     3dc:	69 e0       	ldi	r22, 0x09	; 9
     3de:	ed e3       	ldi	r30, 0x3D	; 61
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	dc 01       	movw	r26, r24
     3e4:	01 90       	ld	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	6a 95       	dec	r22
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <FLC_steering+0x31a>
	inShLeft.value = 0;
     3ec:	dc 01       	movw	r26, r24
     3ee:	1b 96       	adiw	r26, 0x0b	; 11
     3f0:	1c 92       	st	X, r1
     3f2:	1e 92       	st	-X, r1
     3f4:	1a 97       	sbiw	r26, 0x0a	; 10
	inShLeft.point1 = 2920;
     3f6:	0f 2e       	mov	r0, r31
     3f8:	f8 e6       	ldi	r31, 0x68	; 104
     3fa:	af 2e       	mov	r10, r31
     3fc:	fb e0       	ldi	r31, 0x0B	; 11
     3fe:	bf 2e       	mov	r11, r31
     400:	f0 2d       	mov	r31, r0
     402:	1d 96       	adiw	r26, 0x0d	; 13
     404:	bc 92       	st	X, r11
     406:	ae 92       	st	-X, r10
     408:	1c 97       	sbiw	r26, 0x0c	; 12
	inShLeft.point2= 3061;
     40a:	65 ef       	ldi	r22, 0xF5	; 245
     40c:	7b e0       	ldi	r23, 0x0B	; 11
     40e:	1f 96       	adiw	r26, 0x0f	; 15
     410:	7c 93       	st	X, r23
     412:	6e 93       	st	-X, r22
     414:	1e 97       	sbiw	r26, 0x0e	; 14
	inShLeft.slope1 = 1;
     416:	51 96       	adiw	r26, 0x11	; 17
     418:	5c 93       	st	X, r21
     41a:	4e 93       	st	-X, r20
     41c:	50 97       	sbiw	r26, 0x10	; 16
	inShLeft.slope2 = 100;
     41e:	e4 e6       	ldi	r30, 0x64	; 100
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	53 96       	adiw	r26, 0x13	; 19
     424:	fc 93       	st	X, r31
     426:	ee 93       	st	-X, r30
     428:	52 97       	sbiw	r26, 0x12	; 18

	steering.membership_functions = &inShRight;
     42a:	3e 8f       	std	Y+30, r19	; 0x1e
     42c:	2d 8f       	std	Y+29, r18	; 0x1d
	inShRight.next = &inRight;
     42e:	d9 01       	movw	r26, r18
     430:	55 96       	adiw	r26, 0x15	; 21
     432:	9c 92       	st	X, r9
     434:	8e 92       	st	-X, r8
     436:	54 97       	sbiw	r26, 0x14	; 20
	inRight.next = &inStraight;
     438:	0f e9       	ldi	r16, 0x9F	; 159
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	0c 0f       	add	r16, r28
     43e:	1d 1f       	adc	r17, r29
     440:	f4 01       	movw	r30, r8
     442:	15 8b       	std	Z+21, r17	; 0x15
     444:	04 8b       	std	Z+20, r16	; 0x14
	inStraight.next = &inLeft;
     446:	25 eb       	ldi	r18, 0xB5	; 181
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	2c 0f       	add	r18, r28
     44c:	3d 1f       	adc	r19, r29
     44e:	cd 54       	subi	r28, 0x4D	; 77
     450:	df 4f       	sbci	r29, 0xFF	; 255
     452:	39 83       	std	Y+1, r19	; 0x01
     454:	28 83       	st	Y, r18
     456:	c3 5b       	subi	r28, 0xB3	; 179
     458:	d0 40       	sbci	r29, 0x00	; 0
	inLeft.next = &inShLeft;
     45a:	c7 53       	subi	r28, 0x37	; 55
     45c:	df 4f       	sbci	r29, 0xFF	; 255
     45e:	99 83       	std	Y+1, r25	; 0x01
     460:	88 83       	st	Y, r24
     462:	c9 5c       	subi	r28, 0xC9	; 201
     464:	d0 40       	sbci	r29, 0x00	; 0
	inShLeft.next = NULL;
     466:	dc 01       	movw	r26, r24
     468:	55 96       	adiw	r26, 0x15	; 21
     46a:	1c 92       	st	X, r1
     46c:	1e 92       	st	-X, r1
     46e:	54 97       	sbiw	r26, 0x14	; 20
	
	
	// DECLARATION OF V INPUT (3)
	
	strcpy(delta_V.name, "delta_V");
     470:	88 e0       	ldi	r24, 0x08	; 8
     472:	e6 e4       	ldi	r30, 0x46	; 70
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	aa 5a       	subi	r26, 0xAA	; 170
     478:	b1 09       	sbc	r27, r1
     47a:	01 90       	ld	r0, Z+
     47c:	0d 92       	st	X+, r0
     47e:	8a 95       	dec	r24
     480:	e1 f7       	brne	.-8      	; 0x47a <FLC_steering+0x3b0>

	//MFs
	struct mf_type small;
	strcpy(small.name, "small");
     482:	86 e0       	ldi	r24, 0x06	; 6
     484:	ee e4       	ldi	r30, 0x4E	; 78
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	de 01       	movw	r26, r28
     48a:	af 51       	subi	r26, 0x1F	; 31
     48c:	bf 4f       	sbci	r27, 0xFF	; 255
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	8a 95       	dec	r24
     494:	e1 f7       	brne	.-8      	; 0x48e <FLC_steering+0x3c4>
	small.value = 0;
     496:	c5 51       	subi	r28, 0x15	; 21
     498:	df 4f       	sbci	r29, 0xFF	; 255
     49a:	19 82       	std	Y+1, r1	; 0x01
     49c:	18 82       	st	Y, r1
     49e:	cb 5e       	subi	r28, 0xEB	; 235
     4a0:	d0 40       	sbci	r29, 0x00	; 0
	small.point1 = -1;
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	9f ef       	ldi	r25, 0xFF	; 255
     4a6:	c3 51       	subi	r28, 0x13	; 19
     4a8:	df 4f       	sbci	r29, 0xFF	; 255
     4aa:	99 83       	std	Y+1, r25	; 0x01
     4ac:	88 83       	st	Y, r24
     4ae:	cd 5e       	subi	r28, 0xED	; 237
     4b0:	d0 40       	sbci	r29, 0x00	; 0
	small.point2= 30;
     4b2:	8e e1       	ldi	r24, 0x1E	; 30
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	c1 51       	subi	r28, 0x11	; 17
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
     4ba:	99 83       	std	Y+1, r25	; 0x01
     4bc:	88 83       	st	Y, r24
     4be:	cf 5e       	subi	r28, 0xEF	; 239
     4c0:	d0 40       	sbci	r29, 0x00	; 0
	small.slope1 = 100;
     4c2:	e4 e6       	ldi	r30, 0x64	; 100
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	cf 50       	subi	r28, 0x0F	; 15
     4c8:	df 4f       	sbci	r29, 0xFF	; 255
     4ca:	f9 83       	std	Y+1, r31	; 0x01
     4cc:	e8 83       	st	Y, r30
     4ce:	c1 5f       	subi	r28, 0xF1	; 241
     4d0:	d0 40       	sbci	r29, 0x00	; 0
	small.slope2 = 5;
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	cd 50       	subi	r28, 0x0D	; 13
     4d8:	df 4f       	sbci	r29, 0xFF	; 255
     4da:	99 83       	std	Y+1, r25	; 0x01
     4dc:	88 83       	st	Y, r24
     4de:	c3 5f       	subi	r28, 0xF3	; 243
     4e0:	d0 40       	sbci	r29, 0x00	; 0
	struct mf_type medium;
	strcpy(medium.name, "medium");
     4e2:	3e 01       	movw	r6, r28
     4e4:	f7 ef       	ldi	r31, 0xF7	; 247
     4e6:	6f 0e       	add	r6, r31
     4e8:	71 1c       	adc	r7, r1
     4ea:	27 e0       	ldi	r18, 0x07	; 7
     4ec:	e4 e5       	ldi	r30, 0x54	; 84
     4ee:	f1 e0       	ldi	r31, 0x01	; 1
     4f0:	d3 01       	movw	r26, r6
     4f2:	01 90       	ld	r0, Z+
     4f4:	0d 92       	st	X+, r0
     4f6:	2a 95       	dec	r18
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <FLC_steering+0x428>
	medium.value = 0;
     4fa:	d3 01       	movw	r26, r6
     4fc:	1b 96       	adiw	r26, 0x0b	; 11
     4fe:	1c 92       	st	X, r1
     500:	1e 92       	st	-X, r1
     502:	1a 97       	sbiw	r26, 0x0a	; 10
	medium.point1 = 20;
     504:	24 e1       	ldi	r18, 0x14	; 20
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	1d 96       	adiw	r26, 0x0d	; 13
     50a:	3c 93       	st	X, r19
     50c:	2e 93       	st	-X, r18
     50e:	1c 97       	sbiw	r26, 0x0c	; 12
	medium.point2= 60;
     510:	2c e3       	ldi	r18, 0x3C	; 60
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	1f 96       	adiw	r26, 0x0f	; 15
     516:	3c 93       	st	X, r19
     518:	2e 93       	st	-X, r18
     51a:	1e 97       	sbiw	r26, 0x0e	; 14
	medium.slope1 = 5;
     51c:	51 96       	adiw	r26, 0x11	; 17
     51e:	9c 93       	st	X, r25
     520:	8e 93       	st	-X, r24
     522:	50 97       	sbiw	r26, 0x10	; 16
	medium.slope2 = 5;
     524:	53 96       	adiw	r26, 0x13	; 19
     526:	9c 93       	st	X, r25
     528:	8e 93       	st	-X, r24
     52a:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type high;
	strcpy(high.name, "high");
     52c:	02 59       	subi	r16, 0x92	; 146
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	25 e0       	ldi	r18, 0x05	; 5
     532:	eb e5       	ldi	r30, 0x5B	; 91
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	d8 01       	movw	r26, r16
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	2a 95       	dec	r18
     53e:	e1 f7       	brne	.-8      	; 0x538 <FLC_steering+0x46e>
	high.value = 0;
     540:	f8 01       	movw	r30, r16
     542:	13 86       	std	Z+11, r1	; 0x0b
     544:	12 86       	std	Z+10, r1	; 0x0a
	high.point1 = 50;
     546:	22 e3       	ldi	r18, 0x32	; 50
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	35 87       	std	Z+13, r19	; 0x0d
     54c:	24 87       	std	Z+12, r18	; 0x0c
	high.point2= 81;
     54e:	21 e5       	ldi	r18, 0x51	; 81
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	37 87       	std	Z+15, r19	; 0x0f
     554:	26 87       	std	Z+14, r18	; 0x0e
	high.slope1 = 5;
     556:	91 8b       	std	Z+17, r25	; 0x11
     558:	80 8b       	std	Z+16, r24	; 0x10
	high.slope2 = 100;
     55a:	24 e6       	ldi	r18, 0x64	; 100
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	33 8b       	std	Z+19, r19	; 0x13
     560:	22 8b       	std	Z+18, r18	; 0x12

	delta_V.membership_functions = &small;
     562:	81 ee       	ldi	r24, 0xE1	; 225
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	8c 0f       	add	r24, r28
     568:	9d 1f       	adc	r25, r29
     56a:	9e a7       	std	Y+46, r25	; 0x2e
     56c:	8d a7       	std	Y+45, r24	; 0x2d
	small.next = &medium;
     56e:	cb 50       	subi	r28, 0x0B	; 11
     570:	df 4f       	sbci	r29, 0xFF	; 255
     572:	79 82       	std	Y+1, r7	; 0x01
     574:	68 82       	st	Y, r6
     576:	c5 5f       	subi	r28, 0xF5	; 245
     578:	d0 40       	sbci	r29, 0x00	; 0
	medium.next = &high;
     57a:	d3 01       	movw	r26, r6
     57c:	55 96       	adiw	r26, 0x15	; 21
     57e:	1c 93       	st	X, r17
     580:	0e 93       	st	-X, r16
     582:	54 97       	sbiw	r26, 0x14	; 20
	high.next = NULL;
     584:	15 8a       	std	Z+21, r1	; 0x15
     586:	14 8a       	std	Z+20, r1	; 0x14
	
	// DECLARATION OF STEERING SERVO OUTPUT

	struct io_type servo;
	strcpy(servo.name, "servo");
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	e0 e6       	ldi	r30, 0x60	; 96
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	9c 96       	adiw	r26, 0x2c	; 44
     590:	01 90       	ld	r0, Z+
     592:	0d 92       	st	X+, r0
     594:	8a 95       	dec	r24
     596:	e1 f7       	brne	.-8      	; 0x590 <FLC_steering+0x4c6>

	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     598:	9e 01       	movw	r18, r28
     59a:	2d 5c       	subi	r18, 0xCD	; 205
     59c:	3e 4f       	sbci	r19, 0xFE	; 254
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	e6 e6       	ldi	r30, 0x66	; 102
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	d9 01       	movw	r26, r18
     5a6:	01 90       	ld	r0, Z+
     5a8:	0d 92       	st	X+, r0
     5aa:	8a 95       	dec	r24
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <FLC_steering+0x4dc>
	oShLeft.value = 0;
     5ae:	f9 01       	movw	r30, r18
     5b0:	13 86       	std	Z+11, r1	; 0x0b
     5b2:	12 86       	std	Z+10, r1	; 0x0a
	oShLeft.point1 = 2950;
     5b4:	86 e8       	ldi	r24, 0x86	; 134
     5b6:	9b e0       	ldi	r25, 0x0B	; 11
     5b8:	95 87       	std	Z+13, r25	; 0x0d
     5ba:	84 87       	std	Z+12, r24	; 0x0c
	oShLeft.point2 = 3061;
     5bc:	77 87       	std	Z+15, r23	; 0x0f
     5be:	66 87       	std	Z+14, r22	; 0x0e
	oShLeft.slope1 = 1;
     5c0:	51 8b       	std	Z+17, r21	; 0x11
     5c2:	40 8b       	std	Z+16, r20	; 0x10
	oShLeft.slope2 = 100;
     5c4:	64 e6       	ldi	r22, 0x64	; 100
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	73 8b       	std	Z+19, r23	; 0x13
     5ca:	62 8b       	std	Z+18, r22	; 0x12
	oShLeft.next = NULL;
     5cc:	15 8a       	std	Z+21, r1	; 0x15
     5ce:	14 8a       	std	Z+20, r1	; 0x14
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     5d0:	ce 01       	movw	r24, r28
     5d2:	87 5b       	subi	r24, 0xB7	; 183
     5d4:	9e 4f       	sbci	r25, 0xFE	; 254
     5d6:	66 e0       	ldi	r22, 0x06	; 6
     5d8:	ee e6       	ldi	r30, 0x6E	; 110
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	dc 01       	movw	r26, r24
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	6a 95       	dec	r22
     5e4:	e1 f7       	brne	.-8      	; 0x5de <FLC_steering+0x514>
	oLeft.value = 0;
     5e6:	dc 01       	movw	r26, r24
     5e8:	1b 96       	adiw	r26, 0x0b	; 11
     5ea:	1c 92       	st	X, r1
     5ec:	1e 92       	st	-X, r1
     5ee:	1a 97       	sbiw	r26, 0x0a	; 10
	oLeft.point1 = 2840;
     5f0:	1d 96       	adiw	r26, 0x0d	; 13
     5f2:	fc 92       	st	X, r15
     5f4:	ee 92       	st	-X, r14
     5f6:	1c 97       	sbiw	r26, 0x0c	; 12
	oLeft.point2 = 3050;
     5f8:	6a ee       	ldi	r22, 0xEA	; 234
     5fa:	7b e0       	ldi	r23, 0x0B	; 11
     5fc:	1f 96       	adiw	r26, 0x0f	; 15
     5fe:	7c 93       	st	X, r23
     600:	6e 93       	st	-X, r22
     602:	1e 97       	sbiw	r26, 0x0e	; 14
	oLeft.slope1 = 1;
     604:	51 96       	adiw	r26, 0x11	; 17
     606:	5c 93       	st	X, r21
     608:	4e 93       	st	-X, r20
     60a:	50 97       	sbiw	r26, 0x10	; 16
	oLeft.slope2 = 1;
     60c:	53 96       	adiw	r26, 0x13	; 19
     60e:	5c 93       	st	X, r21
     610:	4e 93       	st	-X, r20
     612:	52 97       	sbiw	r26, 0x12	; 18
	oLeft.next = &oShLeft;
     614:	55 96       	adiw	r26, 0x15	; 21
     616:	3c 93       	st	X, r19
     618:	2e 93       	st	-X, r18
     61a:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     61c:	6e 01       	movw	r12, r28
     61e:	b1 ea       	ldi	r27, 0xA1	; 161
     620:	cb 1a       	sub	r12, r27
     622:	be ef       	ldi	r27, 0xFE	; 254
     624:	db 0a       	sbc	r13, r27
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	e4 e7       	ldi	r30, 0x74	; 116
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	d6 01       	movw	r26, r12
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	6a 95       	dec	r22
     634:	e1 f7       	brne	.-8      	; 0x62e <FLC_steering+0x564>
	oSlLeft.value = 0;
     636:	f6 01       	movw	r30, r12
     638:	13 86       	std	Z+11, r1	; 0x0b
     63a:	12 86       	std	Z+10, r1	; 0x0a
	oSlLeft.point1 = 2670;
     63c:	6e e6       	ldi	r22, 0x6E	; 110
     63e:	7a e0       	ldi	r23, 0x0A	; 10
     640:	75 87       	std	Z+13, r23	; 0x0d
     642:	64 87       	std	Z+12, r22	; 0x0c
	oSlLeft.point2 = 2920;
     644:	b7 86       	std	Z+15, r11	; 0x0f
     646:	a6 86       	std	Z+14, r10	; 0x0e
	oSlLeft.slope1 = 1;
     648:	51 8b       	std	Z+17, r21	; 0x11
     64a:	40 8b       	std	Z+16, r20	; 0x10
	oSlLeft.slope2 = 1;
     64c:	53 8b       	std	Z+19, r21	; 0x13
     64e:	42 8b       	std	Z+18, r20	; 0x12
	oSlLeft.next = &oLeft;
     650:	95 8b       	std	Z+21, r25	; 0x15
     652:	84 8b       	std	Z+20, r24	; 0x14
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     654:	8c 96       	adiw	r24, 0x2c	; 44
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	ef e9       	ldi	r30, 0x9F	; 159
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	dc 01       	movw	r26, r24
     65e:	01 90       	ld	r0, Z+
     660:	0d 92       	st	X+, r0
     662:	6a 95       	dec	r22
     664:	e1 f7       	brne	.-8      	; 0x65e <FLC_steering+0x594>
	oStraight.value = 0;
     666:	dc 01       	movw	r26, r24
     668:	1b 96       	adiw	r26, 0x0b	; 11
     66a:	1c 92       	st	X, r1
     66c:	1e 92       	st	-X, r1
     66e:	1a 97       	sbiw	r26, 0x0a	; 10
	oStraight.point1 = 2540;
     670:	6c ee       	ldi	r22, 0xEC	; 236
     672:	79 e0       	ldi	r23, 0x09	; 9
     674:	1d 96       	adiw	r26, 0x0d	; 13
     676:	7c 93       	st	X, r23
     678:	6e 93       	st	-X, r22
     67a:	1c 97       	sbiw	r26, 0x0c	; 12
	oStraight.point2 = 2780;
     67c:	6c ed       	ldi	r22, 0xDC	; 220
     67e:	7a e0       	ldi	r23, 0x0A	; 10
     680:	1f 96       	adiw	r26, 0x0f	; 15
     682:	7c 93       	st	X, r23
     684:	6e 93       	st	-X, r22
     686:	1e 97       	sbiw	r26, 0x0e	; 14
	oStraight.slope1 = 1;
     688:	51 96       	adiw	r26, 0x11	; 17
     68a:	5c 93       	st	X, r21
     68c:	4e 93       	st	-X, r20
     68e:	50 97       	sbiw	r26, 0x10	; 16
	oStraight.slope2 = 1;
     690:	53 96       	adiw	r26, 0x13	; 19
     692:	5c 93       	st	X, r21
     694:	4e 93       	st	-X, r20
     696:	52 97       	sbiw	r26, 0x12	; 18
	oStraight.next = &oSlLeft;
     698:	55 96       	adiw	r26, 0x15	; 21
     69a:	dc 92       	st	X, r13
     69c:	ce 92       	st	-X, r12
     69e:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     6a0:	be 01       	movw	r22, r28
     6a2:	65 57       	subi	r22, 0x75	; 117
     6a4:	7e 4f       	sbci	r23, 0xFE	; 254
     6a6:	0f 2e       	mov	r0, r31
     6a8:	f9 e0       	ldi	r31, 0x09	; 9
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
     6ae:	ec e7       	ldi	r30, 0x7C	; 124
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	db 01       	movw	r26, r22
     6b4:	01 90       	ld	r0, Z+
     6b6:	0d 92       	st	X+, r0
     6b8:	fa 94       	dec	r15
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <FLC_steering+0x5ea>
	oSlRight.value = 0;
     6bc:	fb 01       	movw	r30, r22
     6be:	13 86       	std	Z+11, r1	; 0x0b
     6c0:	12 86       	std	Z+10, r1	; 0x0a
	oSlRight.point1 = 2400;
     6c2:	35 86       	std	Z+13, r3	; 0x0d
     6c4:	24 86       	std	Z+12, r2	; 0x0c
	oSlRight.point2 = 2650;
     6c6:	ea e5       	ldi	r30, 0x5A	; 90
     6c8:	fa e0       	ldi	r31, 0x0A	; 10
     6ca:	db 01       	movw	r26, r22
     6cc:	1f 96       	adiw	r26, 0x0f	; 15
     6ce:	fc 93       	st	X, r31
     6d0:	ee 93       	st	-X, r30
     6d2:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlRight.slope1 = 1;
     6d4:	51 96       	adiw	r26, 0x11	; 17
     6d6:	5c 93       	st	X, r21
     6d8:	4e 93       	st	-X, r20
     6da:	50 97       	sbiw	r26, 0x10	; 16
	oSlRight.slope2 = 1;
     6dc:	53 96       	adiw	r26, 0x13	; 19
     6de:	5c 93       	st	X, r21
     6e0:	4e 93       	st	-X, r20
     6e2:	52 97       	sbiw	r26, 0x12	; 18
	oSlRight.next = &oStraight;
     6e4:	55 96       	adiw	r26, 0x15	; 21
     6e6:	9c 93       	st	X, r25
     6e8:	8e 93       	st	-X, r24
     6ea:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     6ec:	5e 01       	movw	r10, r28
     6ee:	bf e5       	ldi	r27, 0x5F	; 95
     6f0:	ab 1a       	sub	r10, r27
     6f2:	be ef       	ldi	r27, 0xFE	; 254
     6f4:	bb 0a       	sbc	r11, r27
     6f6:	0f 2e       	mov	r0, r31
     6f8:	f7 e0       	ldi	r31, 0x07	; 7
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	e5 e8       	ldi	r30, 0x85	; 133
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	d5 01       	movw	r26, r10
     704:	01 90       	ld	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	fa 94       	dec	r15
     70a:	e1 f7       	brne	.-8      	; 0x704 <FLC_steering+0x63a>
	oRight.value = 0;
     70c:	f5 01       	movw	r30, r10
     70e:	13 86       	std	Z+11, r1	; 0x0b
     710:	12 86       	std	Z+10, r1	; 0x0a
	oRight.point1 = 2270;
     712:	ee ed       	ldi	r30, 0xDE	; 222
     714:	f8 e0       	ldi	r31, 0x08	; 8
     716:	d5 01       	movw	r26, r10
     718:	1d 96       	adiw	r26, 0x0d	; 13
     71a:	fc 93       	st	X, r31
     71c:	ee 93       	st	-X, r30
     71e:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     720:	e0 eb       	ldi	r30, 0xB0	; 176
     722:	f9 e0       	ldi	r31, 0x09	; 9
     724:	1f 96       	adiw	r26, 0x0f	; 15
     726:	fc 93       	st	X, r31
     728:	ee 93       	st	-X, r30
     72a:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     72c:	51 96       	adiw	r26, 0x11	; 17
     72e:	5c 93       	st	X, r21
     730:	4e 93       	st	-X, r20
     732:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     734:	53 96       	adiw	r26, 0x13	; 19
     736:	5c 93       	st	X, r21
     738:	4e 93       	st	-X, r20
     73a:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     73c:	55 96       	adiw	r26, 0x15	; 21
     73e:	7c 93       	st	X, r23
     740:	6e 93       	st	-X, r22
     742:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     744:	7e 01       	movw	r14, r28
     746:	f9 e4       	ldi	r31, 0x49	; 73
     748:	ef 1a       	sub	r14, r31
     74a:	fe ef       	ldi	r31, 0xFE	; 254
     74c:	ff 0a       	sbc	r15, r31
     74e:	0f 2e       	mov	r0, r31
     750:	f9 e0       	ldi	r31, 0x09	; 9
     752:	2f 2e       	mov	r2, r31
     754:	f0 2d       	mov	r31, r0
     756:	ec e8       	ldi	r30, 0x8C	; 140
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	d7 01       	movw	r26, r14
     75c:	01 90       	ld	r0, Z+
     75e:	0d 92       	st	X+, r0
     760:	2a 94       	dec	r2
     762:	e1 f7       	brne	.-8      	; 0x75c <FLC_steering+0x692>
	oShright.value = 0;
     764:	d7 01       	movw	r26, r14
     766:	1b 96       	adiw	r26, 0x0b	; 11
     768:	1c 92       	st	X, r1
     76a:	1e 92       	st	-X, r1
     76c:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     76e:	e3 ed       	ldi	r30, 0xD3	; 211
     770:	f8 e0       	ldi	r31, 0x08	; 8
     772:	1d 96       	adiw	r26, 0x0d	; 13
     774:	fc 93       	st	X, r31
     776:	ee 93       	st	-X, r30
     778:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     77a:	e2 e4       	ldi	r30, 0x42	; 66
     77c:	f9 e0       	ldi	r31, 0x09	; 9
     77e:	1f 96       	adiw	r26, 0x0f	; 15
     780:	fc 93       	st	X, r31
     782:	ee 93       	st	-X, r30
     784:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     786:	e4 e6       	ldi	r30, 0x64	; 100
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	51 96       	adiw	r26, 0x11	; 17
     78c:	fc 93       	st	X, r31
     78e:	ee 93       	st	-X, r30
     790:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     792:	53 96       	adiw	r26, 0x13	; 19
     794:	5c 93       	st	X, r21
     796:	4e 93       	st	-X, r20
     798:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     79a:	55 96       	adiw	r26, 0x15	; 21
     79c:	bc 92       	st	X, r11
     79e:	ae 92       	st	-X, r10
     7a0:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     7a2:	c1 5d       	subi	r28, 0xD1	; 209
     7a4:	de 4f       	sbci	r29, 0xFE	; 254
     7a6:	f9 82       	std	Y+1, r15	; 0x01
     7a8:	e8 82       	st	Y, r14
     7aa:	cf 52       	subi	r28, 0x2F	; 47
     7ac:	d1 40       	sbci	r29, 0x01	; 1
	servo.next = NULL;
     7ae:	cf 5c       	subi	r28, 0xCF	; 207
     7b0:	de 4f       	sbci	r29, 0xFE	; 254
     7b2:	19 82       	std	Y+1, r1	; 0x01
     7b4:	18 82       	st	Y, r1
     7b6:	c1 53       	subi	r28, 0x31	; 49
     7b8:	d1 40       	sbci	r29, 0x01	; 1
	*
	*/
	
	//RULE 9 "if C is zero AND steering is right AND V is high then servo is slightLeft"
	struct rule_element_type then9;
	then9.value = &oSlLeft.value;
     7ba:	5e 01       	movw	r10, r28
     7bc:	f3 e3       	ldi	r31, 0x33	; 51
     7be:	af 1a       	sub	r10, r31
     7c0:	fe ef       	ldi	r31, 0xFE	; 254
     7c2:	bf 0a       	sbc	r11, r31
     7c4:	a6 01       	movw	r20, r12
     7c6:	46 5f       	subi	r20, 0xF6	; 246
     7c8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ca:	cd 56       	subi	r28, 0x6D	; 109
     7cc:	dd 4f       	sbci	r29, 0xFD	; 253
     7ce:	59 83       	std	Y+1, r21	; 0x01
     7d0:	48 83       	st	Y, r20
     7d2:	c3 59       	subi	r28, 0x93	; 147
     7d4:	d2 40       	sbci	r29, 0x02	; 2
     7d6:	d5 01       	movw	r26, r10
     7d8:	11 96       	adiw	r26, 0x01	; 1
     7da:	5c 93       	st	X, r21
     7dc:	4e 93       	st	-X, r20
	then9.next = NULL;
     7de:	13 96       	adiw	r26, 0x03	; 3
     7e0:	1c 92       	st	X, r1
     7e2:	1e 92       	st	-X, r1
     7e4:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if93;
	if93.value = &high.value;
     7e6:	14 96       	adiw	r26, 0x04	; 4
     7e8:	f8 01       	movw	r30, r16
     7ea:	3a 96       	adiw	r30, 0x0a	; 10
     7ec:	c9 56       	subi	r28, 0x69	; 105
     7ee:	dd 4f       	sbci	r29, 0xFD	; 253
     7f0:	f9 83       	std	Y+1, r31	; 0x01
     7f2:	e8 83       	st	Y, r30
     7f4:	c7 59       	subi	r28, 0x97	; 151
     7f6:	d2 40       	sbci	r29, 0x02	; 2
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	fc 93       	st	X, r31
     7fc:	ee 93       	st	-X, r30
	if93.next = NULL;
     7fe:	13 96       	adiw	r26, 0x03	; 3
     800:	1c 92       	st	X, r1
     802:	1e 92       	st	-X, r1
     804:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inRight.value;
     806:	44 59       	subi	r20, 0x94	; 148
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	14 01       	movw	r2, r8
     80c:	fa e0       	ldi	r31, 0x0A	; 10
     80e:	2f 0e       	add	r2, r31
     810:	31 1c       	adc	r3, r1
     812:	fa 01       	movw	r30, r20
     814:	31 82       	std	Z+1, r3	; 0x01
     816:	20 82       	st	Z, r2
	if92.next = &if93;
     818:	b3 83       	std	Z+3, r27	; 0x03
     81a:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_element_type if91;
	if91.value = &zer.value;
     81c:	6e 01       	movw	r12, r28
     81e:	f7 e2       	ldi	r31, 0x27	; 39
     820:	cf 1a       	sub	r12, r31
     822:	fe ef       	ldi	r31, 0xFE	; 254
     824:	df 0a       	sbc	r13, r31
     826:	0a e0       	ldi	r16, 0x0A	; 10
     828:	40 0e       	add	r4, r16
     82a:	51 1c       	adc	r5, r1
     82c:	d6 01       	movw	r26, r12
     82e:	11 96       	adiw	r26, 0x01	; 1
     830:	5c 92       	st	X, r5
     832:	4e 92       	st	-X, r4
	if91.next = &if92;
     834:	13 96       	adiw	r26, 0x03	; 3
     836:	5c 93       	st	X, r21
     838:	4e 93       	st	-X, r20
     83a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule9;
	rule9.if_side = &if91;
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	11 96       	adiw	r26, 0x01	; 1
     840:	dc 92       	st	X, r13
     842:	ce 92       	st	-X, r12
	rule9.then_side = &then9;
     844:	13 96       	adiw	r26, 0x03	; 3
     846:	bc 92       	st	X, r11
     848:	ae 92       	st	-X, r10
     84a:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = NULL;
     84c:	15 96       	adiw	r26, 0x05	; 5
     84e:	1c 92       	st	X, r1
     850:	1e 92       	st	-X, r1
     852:	14 97       	sbiw	r26, 0x04	; 4

	
	
	//RULE 8 "if C is positive AND steering is straight AND V is high then servo is slightRight"
	struct rule_element_type then8;
	then8.value = &oSlRight.value;
     854:	42 5f       	subi	r20, 0xF2	; 242
     856:	5f 4f       	sbci	r21, 0xFF	; 255
     858:	e0 54       	subi	r30, 0x40	; 64
     85a:	f1 09       	sbc	r31, r1
     85c:	cb 56       	subi	r28, 0x6B	; 107
     85e:	dd 4f       	sbci	r29, 0xFD	; 253
     860:	f9 83       	std	Y+1, r31	; 0x01
     862:	e8 83       	st	Y, r30
     864:	c5 59       	subi	r28, 0x95	; 149
     866:	d2 40       	sbci	r29, 0x02	; 2
     868:	8f 01       	movw	r16, r30
     86a:	fa 01       	movw	r30, r20
     86c:	11 83       	std	Z+1, r17	; 0x01
     86e:	00 83       	st	Z, r16
	then8.next = NULL;
     870:	13 82       	std	Z+3, r1	; 0x03
     872:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if83;
	if83.value = &high.value;
     874:	64 5a       	subi	r22, 0xA4	; 164
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	c9 56       	subi	r28, 0x69	; 105
     87a:	dd 4f       	sbci	r29, 0xFD	; 253
     87c:	08 81       	ld	r16, Y
     87e:	19 81       	ldd	r17, Y+1	; 0x01
     880:	c7 59       	subi	r28, 0x97	; 151
     882:	d2 40       	sbci	r29, 0x02	; 2
     884:	fb 01       	movw	r30, r22
     886:	11 83       	std	Z+1, r17	; 0x01
     888:	00 83       	st	Z, r16
	if83.next = NULL;
     88a:	13 82       	std	Z+3, r1	; 0x03
     88c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &inStraight.value;
     88e:	5e 01       	movw	r10, r28
     890:	15 e1       	ldi	r17, 0x15	; 21
     892:	a1 1a       	sub	r10, r17
     894:	1e ef       	ldi	r17, 0xFE	; 254
     896:	b1 0a       	sbc	r11, r17
     898:	0f 2e       	mov	r0, r31
     89a:	ff e9       	ldi	r31, 0x9F	; 159
     89c:	8f 2e       	mov	r8, r31
     89e:	91 2c       	mov	r9, r1
     8a0:	f0 2d       	mov	r31, r0
     8a2:	8c 0e       	add	r8, r28
     8a4:	9d 1e       	adc	r9, r29
     8a6:	ea e0       	ldi	r30, 0x0A	; 10
     8a8:	8e 0e       	add	r8, r30
     8aa:	91 1c       	adc	r9, r1
     8ac:	f5 01       	movw	r30, r10
     8ae:	91 82       	std	Z+1, r9	; 0x01
     8b0:	80 82       	st	Z, r8
	if82.next = &if83;
     8b2:	73 83       	std	Z+3, r23	; 0x03
     8b4:	62 83       	std	Z+2, r22	; 0x02

	struct rule_element_type if81;
	if81.value = &positive.value;
     8b6:	68 5f       	subi	r22, 0xF8	; 248
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	0f 2e       	mov	r0, r31
     8bc:	fd e5       	ldi	r31, 0x5D	; 93
     8be:	cf 2e       	mov	r12, r31
     8c0:	d1 2c       	mov	r13, r1
     8c2:	f0 2d       	mov	r31, r0
     8c4:	cc 0e       	add	r12, r28
     8c6:	dd 1e       	adc	r13, r29
     8c8:	fa e0       	ldi	r31, 0x0A	; 10
     8ca:	cf 0e       	add	r12, r31
     8cc:	d1 1c       	adc	r13, r1
     8ce:	fb 01       	movw	r30, r22
     8d0:	d1 82       	std	Z+1, r13	; 0x01
     8d2:	c0 82       	st	Z, r12
	if81.next = &if82;
     8d4:	b3 82       	std	Z+3, r11	; 0x03
     8d6:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
     8d8:	34 96       	adiw	r30, 0x04	; 4
     8da:	71 83       	std	Z+1, r23	; 0x01
     8dc:	60 83       	st	Z, r22
	rule8.then_side = &then8;
     8de:	53 83       	std	Z+3, r21	; 0x03
     8e0:	42 83       	std	Z+2, r20	; 0x02
	rule8.next = &rule9;
     8e2:	b5 83       	std	Z+5, r27	; 0x05
     8e4:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if C is positive AND steering is left AND V is medium then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &oShright.value;
     8e6:	0a e0       	ldi	r16, 0x0A	; 10
     8e8:	e0 0e       	add	r14, r16
     8ea:	f1 1c       	adc	r15, r1
     8ec:	c7 50       	subi	r28, 0x07	; 7
     8ee:	de 4f       	sbci	r29, 0xFE	; 254
     8f0:	f9 82       	std	Y+1, r15	; 0x01
     8f2:	e8 82       	st	Y, r14
     8f4:	c9 5f       	subi	r28, 0xF9	; 249
     8f6:	d1 40       	sbci	r29, 0x01	; 1
	then7.next = NULL;
     8f8:	c5 50       	subi	r28, 0x05	; 5
     8fa:	de 4f       	sbci	r29, 0xFE	; 254
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	18 82       	st	Y, r1
     900:	cb 5f       	subi	r28, 0xFB	; 251
     902:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if73;
	if73.value = &medium.value;
     904:	62 5f       	subi	r22, 0xF2	; 242
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	42 5e       	subi	r20, 0xE2	; 226
     90a:	51 09       	sbc	r21, r1
     90c:	db 01       	movw	r26, r22
     90e:	11 96       	adiw	r26, 0x01	; 1
     910:	5c 93       	st	X, r21
     912:	4e 93       	st	-X, r20
	if73.next = NULL;
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	1c 92       	st	X, r1
     918:	1e 92       	st	-X, r1
     91a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &inLeft.value;
     91c:	8e 01       	movw	r16, r28
     91e:	0f 5f       	subi	r16, 0xFF	; 255
     920:	1d 4f       	sbci	r17, 0xFD	; 253
     922:	0f 2e       	mov	r0, r31
     924:	f5 eb       	ldi	r31, 0xB5	; 181
     926:	af 2e       	mov	r10, r31
     928:	b1 2c       	mov	r11, r1
     92a:	f0 2d       	mov	r31, r0
     92c:	ac 0e       	add	r10, r28
     92e:	bd 1e       	adc	r11, r29
     930:	ba e0       	ldi	r27, 0x0A	; 10
     932:	ab 0e       	add	r10, r27
     934:	b1 1c       	adc	r11, r1
     936:	d8 01       	movw	r26, r16
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	bc 92       	st	X, r11
     93c:	ae 92       	st	-X, r10
	if72.next = &if73;
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	7c 93       	st	X, r23
     942:	6e 93       	st	-X, r22
     944:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &positive.value;
     946:	68 5f       	subi	r22, 0xF8	; 248
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	db 01       	movw	r26, r22
     94c:	11 96       	adiw	r26, 0x01	; 1
     94e:	dc 92       	st	X, r13
     950:	ce 92       	st	-X, r12
	if71.next = &if72;
     952:	13 96       	adiw	r26, 0x03	; 3
     954:	1c 93       	st	X, r17
     956:	0e 93       	st	-X, r16
     958:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
     95a:	08 5f       	subi	r16, 0xF8	; 248
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	d8 01       	movw	r26, r16
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	7c 93       	st	X, r23
     964:	6e 93       	st	-X, r22
	rule7.then_side = &then7;
     966:	69 ef       	ldi	r22, 0xF9	; 249
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	6c 0f       	add	r22, r28
     96c:	7d 1f       	adc	r23, r29
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	7c 93       	st	X, r23
     972:	6e 93       	st	-X, r22
     974:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
     976:	15 96       	adiw	r26, 0x05	; 5
     978:	fc 93       	st	X, r31
     97a:	ee 93       	st	-X, r30
     97c:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 6 "if C is zero AND steering is left AND V is medium then servo is sharpRight"
	struct rule_element_type then6;
	then6.value = &oShright.value;
     97e:	6e 01       	movw	r12, r28
     980:	71 ef       	ldi	r23, 0xF1	; 241
     982:	c7 1a       	sub	r12, r23
     984:	7d ef       	ldi	r23, 0xFD	; 253
     986:	d7 0a       	sbc	r13, r23
     988:	d6 01       	movw	r26, r12
     98a:	11 96       	adiw	r26, 0x01	; 1
     98c:	fc 92       	st	X, r15
     98e:	ee 92       	st	-X, r14
	then6.next = NULL;
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	1c 92       	st	X, r1
     994:	1e 92       	st	-X, r1
     996:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if63;
	if63.value = &medium.value;
     998:	66 5e       	subi	r22, 0xE6	; 230
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	fb 01       	movw	r30, r22
     99e:	51 83       	std	Z+1, r21	; 0x01
     9a0:	40 83       	st	Z, r20
	if63.next = NULL;
     9a2:	13 82       	std	Z+3, r1	; 0x03
     9a4:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if62;
	if62.value = &inLeft.value;
     9a6:	18 96       	adiw	r26, 0x08	; 8
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	bc 92       	st	X, r11
     9ac:	ae 92       	st	-X, r10
	if62.next = &if63;
     9ae:	13 96       	adiw	r26, 0x03	; 3
     9b0:	7c 93       	st	X, r23
     9b2:	6e 93       	st	-X, r22
     9b4:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &zer.value;
     9b6:	68 5f       	subi	r22, 0xF8	; 248
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	fb 01       	movw	r30, r22
     9bc:	51 82       	std	Z+1, r5	; 0x01
     9be:	40 82       	st	Z, r4
	if61.next = &if62;
     9c0:	b3 83       	std	Z+3, r27	; 0x03
     9c2:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule6;
	rule6.if_side = &if61;
     9c4:	18 96       	adiw	r26, 0x08	; 8
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	7c 93       	st	X, r23
     9ca:	6e 93       	st	-X, r22
	rule6.then_side = &then6;
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	dc 92       	st	X, r13
     9d0:	ce 92       	st	-X, r12
     9d2:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     9d4:	15 96       	adiw	r26, 0x05	; 5
     9d6:	1c 93       	st	X, r17
     9d8:	0e 93       	st	-X, r16
     9da:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 5 "if C is negative AND steering is right AND V is medium then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &oShLeft.value;
     9dc:	04 5e       	subi	r16, 0xE4	; 228
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	26 5f       	subi	r18, 0xF6	; 246
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	f8 01       	movw	r30, r16
     9e6:	31 83       	std	Z+1, r19	; 0x01
     9e8:	20 83       	st	Z, r18
	then5.next = NULL;
     9ea:	13 82       	std	Z+3, r1	; 0x03
     9ec:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if53;
	if53.value = &medium.value;
     9ee:	62 5f       	subi	r22, 0xF2	; 242
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	fb 01       	movw	r30, r22
     9f4:	51 83       	std	Z+1, r21	; 0x01
     9f6:	40 83       	st	Z, r20
	if53.next = NULL;
     9f8:	13 82       	std	Z+3, r1	; 0x03
     9fa:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if52;
	if52.value = &inRight.value;
     9fc:	6e 01       	movw	r12, r28
     9fe:	f3 ed       	ldi	r31, 0xD3	; 211
     a00:	cf 1a       	sub	r12, r31
     a02:	fd ef       	ldi	r31, 0xFD	; 253
     a04:	df 0a       	sbc	r13, r31
     a06:	f6 01       	movw	r30, r12
     a08:	31 82       	std	Z+1, r3	; 0x01
     a0a:	20 82       	st	Z, r2
	if52.next = &if53;
     a0c:	73 83       	std	Z+3, r23	; 0x03
     a0e:	62 83       	std	Z+2, r22	; 0x02

	struct rule_element_type if51;
	if51.value = &negative.value;
     a10:	7e 01       	movw	r14, r28
     a12:	ff ec       	ldi	r31, 0xCF	; 207
     a14:	ef 1a       	sub	r14, r31
     a16:	fd ef       	ldi	r31, 0xFD	; 253
     a18:	ff 0a       	sbc	r15, r31
     a1a:	6e 5e       	subi	r22, 0xEE	; 238
     a1c:	71 40       	sbci	r23, 0x01	; 1
     a1e:	f7 01       	movw	r30, r14
     a20:	71 83       	std	Z+1, r23	; 0x01
     a22:	60 83       	st	Z, r22
	if51.next = &if52;
     a24:	d3 82       	std	Z+3, r13	; 0x03
     a26:	c2 82       	std	Z+2, r12	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     a28:	34 96       	adiw	r30, 0x04	; 4
     a2a:	f1 82       	std	Z+1, r15	; 0x01
     a2c:	e0 82       	st	Z, r14
	rule5.then_side = &then5;
     a2e:	13 83       	std	Z+3, r17	; 0x03
     a30:	02 83       	std	Z+2, r16	; 0x02
	rule5.next = &rule6;
     a32:	b5 83       	std	Z+5, r27	; 0x05
     a34:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 4 "if C is zero AND steering is straight AND V is medium then servo is Straight"
	struct rule_element_type then4;
	then4.value = &oStraight.value;
     a36:	0a 5e       	subi	r16, 0xEA	; 234
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	0a 96       	adiw	r24, 0x0a	; 10
     a3c:	d8 01       	movw	r26, r16
     a3e:	11 96       	adiw	r26, 0x01	; 1
     a40:	9c 93       	st	X, r25
     a42:	8e 93       	st	-X, r24
	then4.next = NULL;
     a44:	13 96       	adiw	r26, 0x03	; 3
     a46:	1c 92       	st	X, r1
     a48:	1e 92       	st	-X, r1
     a4a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if43;
	if43.value = &medium.value;
     a4c:	80 54       	subi	r24, 0x40	; 64
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	dc 01       	movw	r26, r24
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	5c 93       	st	X, r21
     a56:	4e 93       	st	-X, r20
	if43.next = NULL;
     a58:	13 96       	adiw	r26, 0x03	; 3
     a5a:	1c 92       	st	X, r1
     a5c:	1e 92       	st	-X, r1
     a5e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inStraight.value;
     a60:	7e 01       	movw	r14, r28
     a62:	bd eb       	ldi	r27, 0xBD	; 189
     a64:	eb 1a       	sub	r14, r27
     a66:	bd ef       	ldi	r27, 0xFD	; 253
     a68:	fb 0a       	sbc	r15, r27
     a6a:	d7 01       	movw	r26, r14
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	9c 92       	st	X, r9
     a70:	8e 92       	st	-X, r8
	if42.next = &if43;
     a72:	13 96       	adiw	r26, 0x03	; 3
     a74:	9c 93       	st	X, r25
     a76:	8e 93       	st	-X, r24
     a78:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &zer.value;
     a7a:	08 96       	adiw	r24, 0x08	; 8
     a7c:	dc 01       	movw	r26, r24
     a7e:	11 96       	adiw	r26, 0x01	; 1
     a80:	5c 92       	st	X, r5
     a82:	4e 92       	st	-X, r4
	if41.next = &if42;
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	fc 92       	st	X, r15
     a88:	ee 92       	st	-X, r14
     a8a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     a8c:	14 96       	adiw	r26, 0x04	; 4
     a8e:	11 96       	adiw	r26, 0x01	; 1
     a90:	9c 93       	st	X, r25
     a92:	8e 93       	st	-X, r24
	rule4.then_side = &then4;
     a94:	13 96       	adiw	r26, 0x03	; 3
     a96:	1c 93       	st	X, r17
     a98:	0e 93       	st	-X, r16
     a9a:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     a9c:	15 96       	adiw	r26, 0x05	; 5
     a9e:	fc 93       	st	X, r31
     aa0:	ee 93       	st	-X, r30
     aa2:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 3 "if C is negative AND steering is right AND V is medium then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &oShLeft.value;
     aa4:	0a 5e       	subi	r16, 0xEA	; 234
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
     aa8:	f8 01       	movw	r30, r16
     aaa:	31 83       	std	Z+1, r19	; 0x01
     aac:	20 83       	st	Z, r18
	then3.next = NULL;
     aae:	13 82       	std	Z+3, r1	; 0x03
     ab0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if33;
	if33.value = &medium.value;
     ab2:	0e 96       	adiw	r24, 0x0e	; 14
     ab4:	fc 01       	movw	r30, r24
     ab6:	51 83       	std	Z+1, r21	; 0x01
     ab8:	40 83       	st	Z, r20
	if33.next = NULL;
     aba:	13 82       	std	Z+3, r1	; 0x03
     abc:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inRight.value;
     abe:	24 5e       	subi	r18, 0xE4	; 228
     ac0:	3e 4f       	sbci	r19, 0xFE	; 254
     ac2:	f9 01       	movw	r30, r18
     ac4:	31 82       	std	Z+1, r3	; 0x01
     ac6:	20 82       	st	Z, r2
	if32.next = &if33;
     ac8:	93 83       	std	Z+3, r25	; 0x03
     aca:	82 83       	std	Z+2, r24	; 0x02
	
	struct rule_element_type if31;
	if31.value = &negative.value;
     acc:	08 96       	adiw	r24, 0x08	; 8
     ace:	fc 01       	movw	r30, r24
     ad0:	71 83       	std	Z+1, r23	; 0x01
     ad2:	60 83       	st	Z, r22
	if31.next = &if32;
     ad4:	33 83       	std	Z+3, r19	; 0x03
     ad6:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     ad8:	28 5f       	subi	r18, 0xF8	; 248
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	f9 01       	movw	r30, r18
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
	rule3.then_side = &then3;
     ae2:	13 83       	std	Z+3, r17	; 0x03
     ae4:	02 83       	std	Z+2, r16	; 0x02
	rule3.next = &rule4;
     ae6:	b5 83       	std	Z+5, r27	; 0x05
     ae8:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 2 "if C is negative AND steering is straight AND V is small then servo is SlightLeft"
	struct rule_element_type then2;
	then2.value = &oSlLeft.value;
     aea:	0a 5e       	subi	r16, 0xEA	; 234
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
     aee:	cd 56       	subi	r28, 0x6D	; 109
     af0:	dd 4f       	sbci	r29, 0xFD	; 253
     af2:	e8 81       	ld	r30, Y
     af4:	f9 81       	ldd	r31, Y+1	; 0x01
     af6:	c3 59       	subi	r28, 0x93	; 147
     af8:	d2 40       	sbci	r29, 0x02	; 2
     afa:	d8 01       	movw	r26, r16
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	fc 93       	st	X, r31
     b00:	ee 93       	st	-X, r30
	then2.next = NULL;
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	1c 92       	st	X, r1
     b06:	1e 92       	st	-X, r1
     b08:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if23;
	if23.value = &small.value;
     b0a:	0e 96       	adiw	r24, 0x0e	; 14
     b0c:	41 ee       	ldi	r20, 0xE1	; 225
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	4c 0f       	add	r20, r28
     b12:	5d 1f       	adc	r21, r29
     b14:	46 5f       	subi	r20, 0xF6	; 246
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	dc 01       	movw	r26, r24
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	5c 93       	st	X, r21
     b1e:	4e 93       	st	-X, r20
	if23.next = NULL;
     b20:	13 96       	adiw	r26, 0x03	; 3
     b22:	1c 92       	st	X, r1
     b24:	1e 92       	st	-X, r1
     b26:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if22;
	if22.value = &inStraight.value;
     b28:	14 96       	adiw	r26, 0x04	; 4
     b2a:	11 96       	adiw	r26, 0x01	; 1
     b2c:	9c 92       	st	X, r9
     b2e:	8e 92       	st	-X, r8
	if22.next = &if23;
     b30:	13 96       	adiw	r26, 0x03	; 3
     b32:	9c 93       	st	X, r25
     b34:	8e 93       	st	-X, r24
     b36:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if21;
	if21.value = &negative.value;
     b38:	08 96       	adiw	r24, 0x08	; 8
     b3a:	fc 01       	movw	r30, r24
     b3c:	71 83       	std	Z+1, r23	; 0x01
     b3e:	60 83       	st	Z, r22
	if21.next = &if22;
     b40:	b3 83       	std	Z+3, r27	; 0x03
     b42:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     b44:	18 96       	adiw	r26, 0x08	; 8
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	9c 93       	st	X, r25
     b4a:	8e 93       	st	-X, r24
	rule2.then_side = &then2;
     b4c:	13 96       	adiw	r26, 0x03	; 3
     b4e:	1c 93       	st	X, r17
     b50:	0e 93       	st	-X, r16
     b52:	12 97       	sbiw	r26, 0x02	; 2
	rule2.next = &rule3;
     b54:	15 96       	adiw	r26, 0x05	; 5
     b56:	3c 93       	st	X, r19
     b58:	2e 93       	st	-X, r18
     b5a:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 1 "if C is zero AND steering is left AND V is small then servo is SlightRight"
	struct rule_element_type then1;
	then1.value = &oSlRight.value;
     b5c:	6e 5b       	subi	r22, 0xBE	; 190
     b5e:	7d 4f       	sbci	r23, 0xFD	; 253
     b60:	cb 56       	subi	r28, 0x6B	; 107
     b62:	dd 4f       	sbci	r29, 0xFD	; 253
     b64:	08 81       	ld	r16, Y
     b66:	19 81       	ldd	r17, Y+1	; 0x01
     b68:	c5 59       	subi	r28, 0x95	; 149
     b6a:	d2 40       	sbci	r29, 0x02	; 2
     b6c:	fb 01       	movw	r30, r22
     b6e:	11 83       	std	Z+1, r17	; 0x01
     b70:	00 83       	st	Z, r16
	then1.next = NULL;
     b72:	13 82       	std	Z+3, r1	; 0x03
     b74:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if13;
	if13.value = &small.value;
     b76:	0e 96       	adiw	r24, 0x0e	; 14
     b78:	fc 01       	movw	r30, r24
     b7a:	51 83       	std	Z+1, r21	; 0x01
     b7c:	40 83       	st	Z, r20
	if13.next = NULL;
     b7e:	13 82       	std	Z+3, r1	; 0x03
     b80:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if12;
	if12.value = &inLeft.value;
     b82:	2c 5d       	subi	r18, 0xDC	; 220
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	f9 01       	movw	r30, r18
     b88:	b1 82       	std	Z+1, r11	; 0x01
     b8a:	a0 82       	st	Z, r10
	if12.next = &if13;
     b8c:	93 83       	std	Z+3, r25	; 0x03
     b8e:	82 83       	std	Z+2, r24	; 0x02
	
	struct rule_element_type if11;
	if11.value = &zer.value;
     b90:	08 96       	adiw	r24, 0x08	; 8
     b92:	fc 01       	movw	r30, r24
     b94:	51 82       	std	Z+1, r5	; 0x01
     b96:	40 82       	st	Z, r4
	if11.next = &if12;
     b98:	33 83       	std	Z+3, r19	; 0x03
     b9a:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     b9c:	28 5f       	subi	r18, 0xF8	; 248
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	f9 01       	movw	r30, r18
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
	rule1.then_side = &then1;
     ba6:	73 83       	std	Z+3, r23	; 0x03
     ba8:	62 83       	std	Z+2, r22	; 0x02
	rule1.next = &rule2;
     baa:	b5 83       	std	Z+5, r27	; 0x05
     bac:	a4 83       	std	Z+4, r26	; 0x04

	// Connecting INPUTS
	delta_C.next = &steering;
     bae:	01 e1       	ldi	r16, 0x11	; 17
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	0c 0f       	add	r16, r28
     bb4:	1d 1f       	adc	r17, r29
     bb6:	18 8b       	std	Y+16, r17	; 0x10
     bb8:	0f 87       	std	Y+15, r16	; 0x0f
	steering.next = &delta_V;
     bba:	41 e2       	ldi	r20, 0x21	; 33
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	4c 0f       	add	r20, r28
     bc0:	5d 1f       	adc	r21, r29
     bc2:	58 a3       	std	Y+32, r21	; 0x20
     bc4:	4f 8f       	std	Y+31, r20	; 0x1f
	delta_V.next = NULL;
     bc6:	18 aa       	std	Y+48, r1	; 0x30
     bc8:	1f a6       	std	Y+47, r1	; 0x2f
	
	// pointers to top of lists
	Rule_Base = &rule1;
     bca:	30 93 3e 02 	sts	0x023E, r19
     bce:	20 93 3d 02 	sts	0x023D, r18
	System_Inputs = &delta_C;
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	6c 0f       	add	r22, r28
     bd8:	7d 1f       	adc	r23, r29
     bda:	70 93 3c 02 	sts	0x023C, r23
     bde:	60 93 3b 02 	sts	0x023B, r22
	System_Outputs = &servo;
     be2:	83 e2       	ldi	r24, 0x23	; 35
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	8c 0f       	add	r24, r28
     be8:	9d 1f       	adc	r25, r29
     bea:	90 93 3a 02 	sts	0x023A, r25
     bee:	80 93 39 02 	sts	0x0239, r24
	
	// the methods performing the FLC
	fuzzification();
     bf2:	85 d0       	rcall	.+266    	; 0xcfe <fuzzification>
	rule_evaluation();
     bf4:	ab d0       	rcall	.+342    	; 0xd4c <rule_evaluation>
	defuzzification();
     bf6:	f0 d0       	rcall	.+480    	; 0xdd8 <defuzzification>
	setServo(servo.value);
     bf8:	c3 5d       	subi	r28, 0xD3	; 211
     bfa:	de 4f       	sbci	r29, 0xFE	; 254
     bfc:	88 81       	ld	r24, Y
     bfe:	99 81       	ldd	r25, Y+1	; 0x01
     c00:	cd 52       	subi	r28, 0x2D	; 45
     c02:	d1 40       	sbci	r29, 0x01	; 1
     c04:	7c d2       	rcall	.+1272   	; 0x10fe <setServo>
}
     c06:	c8 56       	subi	r28, 0x68	; 104
     c08:	dd 4f       	sbci	r29, 0xFD	; 253
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	8f 90       	pop	r8
     c2c:	7f 90       	pop	r7
     c2e:	6f 90       	pop	r6
     c30:	5f 90       	pop	r5
     c32:	4f 90       	pop	r4
     c34:	3f 90       	pop	r3
     c36:	2f 90       	pop	r2
     c38:	08 95       	ret

00000c3a <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c3a:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c3c:	84 85       	ldd	r24, Z+12	; 0x0c
     c3e:	95 85       	ldd	r25, Z+13	; 0x0d
     c40:	9b 01       	movw	r18, r22
     c42:	28 1b       	sub	r18, r24
     c44:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c46:	86 85       	ldd	r24, Z+14	; 0x0e
     c48:	97 85       	ldd	r25, Z+15	; 0x0f
     c4a:	86 1b       	sub	r24, r22
     c4c:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c4e:	12 16       	cp	r1, r18
     c50:	13 06       	cpc	r1, r19
     c52:	ec f4       	brge	.+58     	; 0xc8e <compute_degree_of_membership+0x54>
     c54:	18 16       	cp	r1, r24
     c56:	19 06       	cpc	r1, r25
     c58:	ec f4       	brge	.+58     	; 0xc94 <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c5a:	60 89       	ldd	r22, Z+16	; 0x10
     c5c:	71 89       	ldd	r23, Z+17	; 0x11
     c5e:	a2 89       	ldd	r26, Z+18	; 0x12
     c60:	b3 89       	ldd	r27, Z+19	; 0x13
     c62:	8a 9f       	mul	r24, r26
     c64:	a0 01       	movw	r20, r0
     c66:	8b 9f       	mul	r24, r27
     c68:	50 0d       	add	r21, r0
     c6a:	9a 9f       	mul	r25, r26
     c6c:	50 0d       	add	r21, r0
     c6e:	11 24       	eor	r1, r1
     c70:	26 9f       	mul	r18, r22
     c72:	c0 01       	movw	r24, r0
     c74:	27 9f       	mul	r18, r23
     c76:	90 0d       	add	r25, r0
     c78:	36 9f       	mul	r19, r22
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	48 17       	cp	r20, r24
     c80:	59 07       	cpc	r21, r25
     c82:	0c f4       	brge	.+2      	; 0xc86 <compute_degree_of_membership+0x4c>
     c84:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c86:	84 36       	cpi	r24, 0x64	; 100
     c88:	91 05       	cpc	r25, r1
     c8a:	3c f4       	brge	.+14     	; 0xc9a <compute_degree_of_membership+0x60>
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <compute_degree_of_membership+0x64>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c9a:	84 e6       	ldi	r24, 0x64	; 100
     c9c:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c9e:	93 87       	std	Z+11, r25	; 0x0b
     ca0:	82 87       	std	Z+10, r24	; 0x0a
     ca2:	08 95       	ret

00000ca4 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     cae:	c6 85       	ldd	r28, Z+14	; 0x0e
     cb0:	d7 85       	ldd	r29, Z+15	; 0x0f
     cb2:	84 85       	ldd	r24, Z+12	; 0x0c
     cb4:	95 85       	ldd	r25, Z+13	; 0x0d
     cb6:	c8 1b       	sub	r28, r24
     cb8:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     cba:	22 85       	ldd	r18, Z+10	; 0x0a
     cbc:	33 85       	ldd	r19, Z+11	; 0x0b
     cbe:	60 89       	ldd	r22, Z+16	; 0x10
     cc0:	71 89       	ldd	r23, Z+17	; 0x11
     cc2:	c9 01       	movw	r24, r18
     cc4:	d2 d4       	rcall	.+2468   	; 0x166a <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     cc6:	8e 01       	movw	r16, r28
     cc8:	06 1b       	sub	r16, r22
     cca:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     ccc:	62 89       	ldd	r22, Z+18	; 0x12
     cce:	73 89       	ldd	r23, Z+19	; 0x13
     cd0:	c9 01       	movw	r24, r18
     cd2:	cb d4       	rcall	.+2454   	; 0x166a <__divmodhi4>
    top = base - run_1 - run_2;
     cd4:	06 1b       	sub	r16, r22
     cd6:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     cd8:	c0 0f       	add	r28, r16
     cda:	d1 1f       	adc	r29, r17
     cdc:	2c 9f       	mul	r18, r28
     cde:	c0 01       	movw	r24, r0
     ce0:	2d 9f       	mul	r18, r29
     ce2:	90 0d       	add	r25, r0
     ce4:	3c 9f       	mul	r19, r28
     ce6:	90 0d       	add	r25, r0
     ce8:	11 24       	eor	r1, r1
     cea:	99 23       	and	r25, r25
     cec:	0c f4       	brge	.+2      	; 0xcf0 <compute_area_of_trapezoid+0x4c>
     cee:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d06:	00 91 3b 02 	lds	r16, 0x023B
     d0a:	10 91 3c 02 	lds	r17, 0x023C
     d0e:	01 15       	cp	r16, r1
     d10:	11 05       	cpc	r17, r1
     d12:	b9 f0       	breq	.+46     	; 0xd42 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d14:	f8 01       	movw	r30, r16
     d16:	c4 85       	ldd	r28, Z+12	; 0x0c
     d18:	d5 85       	ldd	r29, Z+13	; 0x0d
     d1a:	20 97       	sbiw	r28, 0x00	; 0
     d1c:	61 f0       	breq	.+24     	; 0xd36 <fuzzification+0x38>
            if (mf!=NULL) {
     d1e:	20 97       	sbiw	r28, 0x00	; 0
     d20:	29 f0       	breq	.+10     	; 0xd2c <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     d22:	f8 01       	movw	r30, r16
     d24:	62 85       	ldd	r22, Z+10	; 0x0a
     d26:	73 85       	ldd	r23, Z+11	; 0x0b
     d28:	ce 01       	movw	r24, r28
     d2a:	87 df       	rcall	.-242    	; 0xc3a <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d2c:	0c 88       	ldd	r0, Y+20	; 0x14
     d2e:	dd 89       	ldd	r29, Y+21	; 0x15
     d30:	c0 2d       	mov	r28, r0
     d32:	20 97       	sbiw	r28, 0x00	; 0
     d34:	a1 f7       	brne	.-24     	; 0xd1e <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d36:	f8 01       	movw	r30, r16
     d38:	06 85       	ldd	r16, Z+14	; 0x0e
     d3a:	17 85       	ldd	r17, Z+15	; 0x0f
     d3c:	01 15       	cp	r16, r1
     d3e:	11 05       	cpc	r17, r1
     d40:	49 f7       	brne	.-46     	; 0xd14 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d54:	c0 91 3d 02 	lds	r28, 0x023D
     d58:	d0 91 3e 02 	lds	r29, 0x023E
     d5c:	20 97       	sbiw	r28, 0x00	; 0
     d5e:	b9 f1       	breq	.+110    	; 0xdce <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d60:	04 e6       	ldi	r16, 0x64	; 100
     d62:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d64:	e8 81       	ld	r30, Y
     d66:	f9 81       	ldd	r31, Y+1	; 0x01
     d68:	30 97       	sbiw	r30, 0x00	; 0
     d6a:	81 f0       	breq	.+32     	; 0xd8c <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d6c:	20 2f       	mov	r18, r16
     d6e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d70:	a0 81       	ld	r26, Z
     d72:	b1 81       	ldd	r27, Z+1	; 0x01
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	82 17       	cp	r24, r18
     d7a:	93 07       	cpc	r25, r19
     d7c:	0c f4       	brge	.+2      	; 0xd80 <rule_evaluation+0x34>
     d7e:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d80:	02 80       	ldd	r0, Z+2	; 0x02
     d82:	f3 81       	ldd	r31, Z+3	; 0x03
     d84:	e0 2d       	mov	r30, r0
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	99 f7       	brne	.-26     	; 0xd70 <rule_evaluation+0x24>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d8c:	20 2f       	mov	r18, r16
     d8e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d90:	ea 81       	ldd	r30, Y+2	; 0x02
     d92:	fb 81       	ldd	r31, Y+3	; 0x03
     d94:	30 97       	sbiw	r30, 0x00	; 0
     d96:	b1 f0       	breq	.+44     	; 0xdc4 <rule_evaluation+0x78>
     d98:	72 2f       	mov	r23, r18
     d9a:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d9c:	a0 81       	ld	r26, Z
     d9e:	b1 81       	ldd	r27, Z+1	; 0x01
     da0:	8d 91       	ld	r24, X+
     da2:	9c 91       	ld	r25, X
     da4:	11 97       	sbiw	r26, 0x01	; 1
     da6:	57 2f       	mov	r21, r23
     da8:	46 2f       	mov	r20, r22
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	14 f4       	brge	.+4      	; 0xdb4 <rule_evaluation+0x68>
     db0:	58 2f       	mov	r21, r24
     db2:	49 2f       	mov	r20, r25
     db4:	5c 93       	st	X, r21
     db6:	11 96       	adiw	r26, 0x01	; 1
     db8:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     dba:	02 80       	ldd	r0, Z+2	; 0x02
     dbc:	f3 81       	ldd	r31, Z+3	; 0x03
     dbe:	e0 2d       	mov	r30, r0
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	61 f7       	brne	.-40     	; 0xd9c <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     dc4:	0c 80       	ldd	r0, Y+4	; 0x04
     dc6:	dd 81       	ldd	r29, Y+5	; 0x05
     dc8:	c0 2d       	mov	r28, r0
     dca:	20 97       	sbiw	r28, 0x00	; 0
     dcc:	59 f6       	brne	.-106    	; 0xd64 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     dd8:	2f 92       	push	r2
     dda:	3f 92       	push	r3
     ddc:	4f 92       	push	r4
     dde:	5f 92       	push	r5
     de0:	6f 92       	push	r6
     de2:	7f 92       	push	r7
     de4:	8f 92       	push	r8
     de6:	9f 92       	push	r9
     de8:	af 92       	push	r10
     dea:	bf 92       	push	r11
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <defuzzification+0x26>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <defuzzification+0x28>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <defuzzification+0x2a>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     e06:	80 91 39 02 	lds	r24, 0x0239
     e0a:	90 91 3a 02 	lds	r25, 0x023A
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	89 2b       	or	r24, r25
     e14:	09 f4       	brne	.+2      	; 0xe18 <defuzzification+0x40>
     e16:	84 c0       	rjmp	.+264    	; 0xf20 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     e18:	eb 81       	ldd	r30, Y+3	; 0x03
     e1a:	fc 81       	ldd	r31, Y+4	; 0x04
     e1c:	04 84       	ldd	r0, Z+12	; 0x0c
     e1e:	f5 85       	ldd	r31, Z+13	; 0x0d
     e20:	e0 2d       	mov	r30, r0
     e22:	fe 83       	std	Y+6, r31	; 0x06
     e24:	ed 83       	std	Y+5, r30	; 0x05
     e26:	ef 2b       	or	r30, r31
     e28:	09 f4       	brne	.+2      	; 0xe2c <defuzzification+0x54>
     e2a:	66 c0       	rjmp	.+204    	; 0xef8 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     e2c:	51 2c       	mov	r5, r1
     e2e:	61 2c       	mov	r6, r1
     e30:	71 2c       	mov	r7, r1
     e32:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e34:	31 2c       	mov	r3, r1
     e36:	21 2c       	mov	r2, r1
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	31 df       	rcall	.-414    	; 0xca4 <compute_area_of_trapezoid>
     e42:	bc 01       	movw	r22, r24
     e44:	88 27       	eor	r24, r24
     e46:	77 fd       	sbrc	r23, 7
     e48:	80 95       	com	r24
     e4a:	98 2f       	mov	r25, r24
     e4c:	1f d3       	rcall	.+1598   	; 0x148c <__floatsisf>
     e4e:	6b 01       	movw	r12, r22
     e50:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e52:	ed 81       	ldd	r30, Y+5	; 0x05
     e54:	fe 81       	ldd	r31, Y+6	; 0x06
     e56:	04 85       	ldd	r16, Z+12	; 0x0c
     e58:	15 85       	ldd	r17, Z+13	; 0x0d
     e5a:	b8 01       	movw	r22, r16
     e5c:	88 27       	eor	r24, r24
     e5e:	77 fd       	sbrc	r23, 7
     e60:	80 95       	com	r24
     e62:	98 2f       	mov	r25, r24
     e64:	13 d3       	rcall	.+1574   	; 0x148c <__floatsisf>
     e66:	4b 01       	movw	r8, r22
     e68:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e6a:	ed 81       	ldd	r30, Y+5	; 0x05
     e6c:	fe 81       	ldd	r31, Y+6	; 0x06
     e6e:	86 85       	ldd	r24, Z+14	; 0x0e
     e70:	97 85       	ldd	r25, Z+15	; 0x0f
     e72:	80 1b       	sub	r24, r16
     e74:	91 0b       	sbc	r25, r17
     e76:	bc 01       	movw	r22, r24
     e78:	12 f4       	brpl	.+4      	; 0xe7e <defuzzification+0xa6>
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	75 95       	asr	r23
     e80:	67 95       	ror	r22
            centroid = centroid + intermed;
     e82:	88 27       	eor	r24, r24
     e84:	77 fd       	sbrc	r23, 7
     e86:	80 95       	com	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	00 d3       	rcall	.+1536   	; 0x148c <__floatsisf>
     e8c:	a5 01       	movw	r20, r10
     e8e:	94 01       	movw	r18, r8
     e90:	fe d1       	rcall	.+1020   	; 0x128e <__addsf3>
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e96:	c7 01       	movw	r24, r14
     e98:	b6 01       	movw	r22, r12
     e9a:	84 d3       	rcall	.+1800   	; 0x15a4 <__mulsf3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	63 2d       	mov	r22, r3
     ea2:	72 2d       	mov	r23, r2
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	f2 d1       	rcall	.+996    	; 0x128e <__addsf3>
     eaa:	36 2e       	mov	r3, r22
     eac:	27 2e       	mov	r2, r23
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     eb2:	a7 01       	movw	r20, r14
     eb4:	96 01       	movw	r18, r12
     eb6:	65 2d       	mov	r22, r5
     eb8:	76 2d       	mov	r23, r6
     eba:	87 2d       	mov	r24, r7
     ebc:	94 2d       	mov	r25, r4
     ebe:	e7 d1       	rcall	.+974    	; 0x128e <__addsf3>
     ec0:	56 2e       	mov	r5, r22
     ec2:	67 2e       	mov	r6, r23
     ec4:	78 2e       	mov	r7, r24
     ec6:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     ec8:	ed 81       	ldd	r30, Y+5	; 0x05
     eca:	fe 81       	ldd	r31, Y+6	; 0x06
     ecc:	04 88       	ldd	r0, Z+20	; 0x14
     ece:	f5 89       	ldd	r31, Z+21	; 0x15
     ed0:	e0 2d       	mov	r30, r0
     ed2:	fe 83       	std	Y+6, r31	; 0x06
     ed4:	ed 83       	std	Y+5, r30	; 0x05
     ed6:	ef 2b       	or	r30, r31
     ed8:	09 f0       	breq	.+2      	; 0xedc <defuzzification+0x104>
     eda:	b0 cf       	rjmp	.-160    	; 0xe3c <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     edc:	26 2f       	mov	r18, r22
     ede:	37 2f       	mov	r19, r23
     ee0:	48 2f       	mov	r20, r24
     ee2:	59 2f       	mov	r21, r25
     ee4:	63 2d       	mov	r22, r3
     ee6:	72 2d       	mov	r23, r2
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	34 d2       	rcall	.+1128   	; 0x1356 <__divsf3>
     eee:	26 2f       	mov	r18, r22
     ef0:	37 2f       	mov	r19, r23
     ef2:	48 2f       	mov	r20, r24
     ef4:	59 2f       	mov	r21, r25
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     f00:	62 2f       	mov	r22, r18
     f02:	73 2f       	mov	r23, r19
     f04:	84 2f       	mov	r24, r20
     f06:	95 2f       	mov	r25, r21
     f08:	8e d2       	rcall	.+1308   	; 0x1426 <__fixsfsi>
     f0a:	eb 81       	ldd	r30, Y+3	; 0x03
     f0c:	fc 81       	ldd	r31, Y+4	; 0x04
     f0e:	73 87       	std	Z+11, r23	; 0x0b
     f10:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     f12:	86 85       	ldd	r24, Z+14	; 0x0e
     f14:	97 85       	ldd	r25, Z+15	; 0x0f
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	89 2b       	or	r24, r25
     f1c:	09 f0       	breq	.+2      	; 0xf20 <defuzzification+0x148>
     f1e:	7c cf       	rjmp	.-264    	; 0xe18 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     f20:	26 96       	adiw	r28, 0x06	; 6
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	80 91 ce 00 	lds	r24, 0x00CE
     f6c:	8f 3f       	cpi	r24, 0xFF	; 255
     f6e:	29 f4       	brne	.+10     	; 0xf7a <__vector_28+0x28>
     f70:	10 92 60 02 	sts	0x0260, r1
     f74:	10 92 5f 02 	sts	0x025F, r1
     f78:	10 c0       	rjmp	.+32     	; 0xf9a <__vector_28+0x48>
     f7a:	e0 91 5f 02 	lds	r30, 0x025F
     f7e:	f0 91 60 02 	lds	r31, 0x0260
     f82:	e1 5c       	subi	r30, 0xC1	; 193
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	80 83       	st	Z, r24
     f88:	80 91 5f 02 	lds	r24, 0x025F
     f8c:	90 91 60 02 	lds	r25, 0x0260
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	90 93 60 02 	sts	0x0260, r25
     f96:	80 93 5f 02 	sts	0x025F, r24
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <SPI_slaveInit>:
     fb0:	80 e4       	ldi	r24, 0x40	; 64
     fb2:	84 b9       	out	0x04, r24	; 4
     fb4:	80 ec       	ldi	r24, 0xC0	; 192
     fb6:	8c bd       	out	0x2c, r24	; 44
     fb8:	08 95       	ret

00000fba <carInit>:
     fba:	77 d0       	rcall	.+238    	; 0x10aa <pwmInit>
     fbc:	f9 df       	rcall	.-14     	; 0xfb0 <SPI_slaveInit>
     fbe:	8d ec       	ldi	r24, 0xCD	; 205
     fc0:	9a e0       	ldi	r25, 0x0A	; 10
     fc2:	82 d0       	rcall	.+260    	; 0x10c8 <setESC>
     fc4:	84 e6       	ldi	r24, 0x64	; 100
     fc6:	9a e0       	ldi	r25, 0x0A	; 10
     fc8:	9a c0       	rjmp	.+308    	; 0x10fe <setServo>
     fca:	08 95       	ret

00000fcc <USART1_init>:
     fcc:	ec ec       	ldi	r30, 0xCC	; 204
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	11 82       	std	Z+1, r1	; 0x01
     fd2:	10 82       	st	Z, r1
     fd4:	20 e9       	ldi	r18, 0x90	; 144
     fd6:	20 93 c9 00 	sts	0x00C9, r18
     fda:	2e e0       	ldi	r18, 0x0E	; 14
     fdc:	20 93 ca 00 	sts	0x00CA, r18
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
     fe4:	08 95       	ret

00000fe6 <Sens_info_read>:
     fe6:	dc 01       	movw	r26, r24
     fe8:	e9 ec       	ldi	r30, 0xC9	; 201
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 77       	andi	r24, 0x7F	; 127
     ff0:	80 83       	st	Z, r24
     ff2:	80 91 3f 02 	lds	r24, 0x023F
     ff6:	8c 93       	st	X, r24
     ff8:	80 91 40 02 	lds	r24, 0x0240
     ffc:	1e 96       	adiw	r26, 0x0e	; 14
     ffe:	8c 93       	st	X, r24
    1000:	1e 97       	sbiw	r26, 0x0e	; 14
    1002:	80 91 41 02 	lds	r24, 0x0241
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	8c 93       	st	X, r24
    100a:	10 92 60 02 	sts	0x0260, r1
    100e:	10 92 5f 02 	sts	0x025F, r1
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	80 83       	st	Z, r24
    1018:	08 95       	ret

0000101a <__vector_18>:
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	80 91 aa 01 	lds	r24, 0x01AA
    102e:	90 91 ab 01 	lds	r25, 0x01AB
    1032:	8b 39       	cpi	r24, 0x9B	; 155
    1034:	26 e9       	ldi	r18, 0x96	; 150
    1036:	92 07       	cpc	r25, r18
    1038:	30 f4       	brcc	.+12     	; 0x1046 <__vector_18+0x2c>
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	90 93 ab 01 	sts	0x01AB, r25
    1040:	80 93 aa 01 	sts	0x01AA, r24
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <__vector_18+0x3e>
    1046:	80 91 ac 01 	lds	r24, 0x01AC
    104a:	81 60       	ori	r24, 0x01	; 1
    104c:	80 93 ac 01 	sts	0x01AC, r24
    1050:	10 92 ab 01 	sts	0x01AB, r1
    1054:	10 92 aa 01 	sts	0x01AA, r1
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <main>:
	}

	/* main function
	*/
	int main (void)
	{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	60 97       	sbiw	r28, 0x10	; 16
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
		carInit();
    107c:	9e df       	rcall	.-196    	; 0xfba <carInit>
		setESC(NEUTRAL+70);
    107e:	83 e1       	ldi	r24, 0x13	; 19
    1080:	9b e0       	ldi	r25, 0x0B	; 11
    1082:	22 d0       	rcall	.+68     	; 0x10c8 <setESC>
		sei();
    1084:	78 94       	sei
			sens_info_ptr = &sensor_info;
			//--end of sensor information
			
			//Init for UART
			unsigned int baud_setting = 7;
			USART1_init(baud_setting);
    1086:	87 e0       	ldi	r24, 0x07	; 7
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 df       	rcall	.-192    	; 0xfcc <USART1_init>
			int v;
			int d;
			

			//Setting for Testing
			DDRA = 0xFF;
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	81 b9       	out	0x01, r24	; 1
		
		while (1) {
				
				// if (counter_UART1_reciever > 2) {
					
					Sens_info_read(sens_info_ptr);
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	a8 df       	rcall	.-176    	; 0xfe6 <Sens_info_read>
					
					c = (int) sensor_info.dist_right_line;
					v = (int) sensor_info.angular_diff;
					d = (int) sensor_info.dist_sonic_middle;
				
					cli();			
    1096:	f8 94       	cli
					
					FLC_steering(125, 2450, 70);
    1098:	46 e4       	ldi	r20, 0x46	; 70
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	62 e9       	ldi	r22, 0x92	; 146
    109e:	79 e0       	ldi	r23, 0x09	; 9
    10a0:	8d e7       	ldi	r24, 0x7D	; 125
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	12 d8       	rcall	.-4060   	; 0xca <FLC_steering>
					//FLC_road(2830,300);
					sei();
    10a6:	78 94       	sei
    10a8:	f3 cf       	rjmp	.-26     	; 0x1090 <main+0x28>

000010aa <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    10aa:	80 e3       	ldi	r24, 0x30	; 48
    10ac:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    10ae:	82 ea       	ldi	r24, 0xA2	; 162
    10b0:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f e8       	ldi	r25, 0x8F	; 143
    10b8:	90 93 87 00 	sts	0x0087, r25
    10bc:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    10c0:	8a e1       	ldi	r24, 0x1A	; 26
    10c2:	80 93 81 00 	sts	0x0081, r24
    10c6:	08 95       	ret

000010c8 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    10c8:	80 36       	cpi	r24, 0x60	; 96
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
    10cc:	92 07       	cpc	r25, r18
    10ce:	3c f4       	brge	.+14     	; 0x10de <setESC+0x16>
	{
		OCR1A = MINESC;
    10d0:	8f e5       	ldi	r24, 0x5F	; 95
    10d2:	9a e0       	ldi	r25, 0x0A	; 10
    10d4:	90 93 89 00 	sts	0x0089, r25
    10d8:	80 93 88 00 	sts	0x0088, r24
    10dc:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    10de:	8b 33       	cpi	r24, 0x3B	; 59
    10e0:	2b e0       	ldi	r18, 0x0B	; 11
    10e2:	92 07       	cpc	r25, r18
    10e4:	3c f0       	brlt	.+14     	; 0x10f4 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    10e6:	8b e3       	ldi	r24, 0x3B	; 59
    10e8:	9b e0       	ldi	r25, 0x0B	; 11
    10ea:	90 93 89 00 	sts	0x0089, r25
    10ee:	80 93 88 00 	sts	0x0088, r24
    10f2:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    10f4:	90 93 89 00 	sts	0x0089, r25
    10f8:	80 93 88 00 	sts	0x0088, r24
    10fc:	08 95       	ret

000010fe <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    10fe:	87 3e       	cpi	r24, 0xE7	; 231
    1100:	27 e0       	ldi	r18, 0x07	; 7
    1102:	92 07       	cpc	r25, r18
    1104:	3c f4       	brge	.+14     	; 0x1114 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1106:	86 ee       	ldi	r24, 0xE6	; 230
    1108:	97 e0       	ldi	r25, 0x07	; 7
    110a:	90 93 8b 00 	sts	0x008B, r25
    110e:	80 93 8a 00 	sts	0x008A, r24
    1112:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1114:	8f 33       	cpi	r24, 0x3F	; 63
    1116:	2c e0       	ldi	r18, 0x0C	; 12
    1118:	92 07       	cpc	r25, r18
    111a:	3c f0       	brlt	.+14     	; 0x112a <setServo+0x2c>

		OCR1B = MAXLEFT;
    111c:	8f e3       	ldi	r24, 0x3F	; 63
    111e:	9c e0       	ldi	r25, 0x0C	; 12
    1120:	90 93 8b 00 	sts	0x008B, r25
    1124:	80 93 8a 00 	sts	0x008A, r24
    1128:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    112a:	90 93 8b 00 	sts	0x008B, r25
    112e:	80 93 8a 00 	sts	0x008A, r24
    1132:	08 95       	ret

00001134 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1154:	80 91 37 02 	lds	r24, 0x0237
    1158:	90 91 38 02 	lds	r25, 0x0238
    115c:	80 34       	cpi	r24, 0x40	; 64
    115e:	91 05       	cpc	r25, r1
    1160:	31 f4       	brne	.+12     	; 0x116e <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 6d 02 	sts	0x026D, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1168:	80 91 c6 00 	lds	r24, 0x00C6
    116c:	16 c0       	rjmp	.+44     	; 0x119a <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    116e:	80 34       	cpi	r24, 0x40	; 64
    1170:	91 05       	cpc	r25, r1
    1172:	e8 f4       	brcc	.+58     	; 0x11ae <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1174:	e5 e3       	ldi	r30, 0x35	; 53
    1176:	f2 e0       	ldi	r31, 0x02	; 2
    1178:	20 81       	ld	r18, Z
    117a:	31 81       	ldd	r19, Z+1	; 0x01
    117c:	40 91 c6 00 	lds	r20, 0x00C6
    1180:	d9 01       	movw	r26, r18
    1182:	ad 50       	subi	r26, 0x0D	; 13
    1184:	be 4f       	sbci	r27, 0xFE	; 254
    1186:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	31 83       	std	Z+1, r19	; 0x01
    118e:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	90 93 38 02 	sts	0x0238, r25
    1196:	80 93 37 02 	sts	0x0237, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    119a:	80 91 37 02 	lds	r24, 0x0237
    119e:	90 91 38 02 	lds	r25, 0x0238
    11a2:	80 34       	cpi	r24, 0x40	; 64
    11a4:	91 05       	cpc	r25, r1
    11a6:	19 f4       	brne	.+6      	; 0x11ae <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 6b 02 	sts	0x026B, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    11ae:	80 91 35 02 	lds	r24, 0x0235
    11b2:	90 91 36 02 	lds	r25, 0x0236
    11b6:	80 34       	cpi	r24, 0x40	; 64
    11b8:	91 05       	cpc	r25, r1
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    11bc:	10 92 36 02 	sts	0x0236, r1
    11c0:	10 92 35 02 	sts	0x0235, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 6a 02 	sts	0x026A, r24
}
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0b be       	out	0x3b, r0	; 59
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_22>:




ISR(USART0_TX_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1200:	80 91 f1 01 	lds	r24, 0x01F1
    1204:	90 91 f2 01 	lds	r25, 0x01F2
    1208:	80 34       	cpi	r24, 0x40	; 64
    120a:	91 05       	cpc	r25, r1
    120c:	19 f4       	brne	.+6      	; 0x1214 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    120e:	10 92 69 02 	sts	0x0269, r1
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1214:	89 2b       	or	r24, r25
    1216:	b9 f0       	breq	.+46     	; 0x1246 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1218:	e0 91 ed 01 	lds	r30, 0x01ED
    121c:	f0 91 ee 01 	lds	r31, 0x01EE
    1220:	e3 55       	subi	r30, 0x53	; 83
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	80 81       	ld	r24, Z
    1226:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    122a:	ed ee       	ldi	r30, 0xED	; 237
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1238:	e1 ef       	ldi	r30, 0xF1	; 241
    123a:	f1 e0       	ldi	r31, 0x01	; 1
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1246:	80 91 ed 01 	lds	r24, 0x01ED
    124a:	90 91 ee 01 	lds	r25, 0x01EE
    124e:	80 34       	cpi	r24, 0x40	; 64
    1250:	91 05       	cpc	r25, r1
    1252:	21 f4       	brne	.+8      	; 0x125c <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1254:	10 92 ee 01 	sts	0x01EE, r1
    1258:	10 92 ed 01 	sts	0x01ED, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    125c:	80 91 f1 01 	lds	r24, 0x01F1
    1260:	90 91 f2 01 	lds	r25, 0x01F2
    1264:	89 2b       	or	r24, r25
    1266:	39 f4       	brne	.+14     	; 0x1276 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1268:	10 92 6c 02 	sts	0x026C, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    126c:	e1 ec       	ldi	r30, 0xC1	; 193
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7b       	andi	r24, 0xBF	; 191
    1274:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1276:	ff 91       	pop	r31
    1278:	ef 91       	pop	r30
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	0f 90       	pop	r0
    1280:	0b be       	out	0x3b, r0	; 59
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__subsf3>:
    128c:	50 58       	subi	r21, 0x80	; 128

0000128e <__addsf3>:
    128e:	bb 27       	eor	r27, r27
    1290:	aa 27       	eor	r26, r26
    1292:	0e d0       	rcall	.+28     	; 0x12b0 <__addsf3x>
    1294:	4d c1       	rjmp	.+666    	; 0x1530 <__fp_round>
    1296:	3e d1       	rcall	.+636    	; 0x1514 <__fp_pscA>
    1298:	30 f0       	brcs	.+12     	; 0x12a6 <__addsf3+0x18>
    129a:	43 d1       	rcall	.+646    	; 0x1522 <__fp_pscB>
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <__addsf3+0x18>
    129e:	31 f4       	brne	.+12     	; 0x12ac <__addsf3+0x1e>
    12a0:	9f 3f       	cpi	r25, 0xFF	; 255
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__addsf3+0x1a>
    12a4:	1e f4       	brtc	.+6      	; 0x12ac <__addsf3+0x1e>
    12a6:	33 c1       	rjmp	.+614    	; 0x150e <__fp_nan>
    12a8:	0e f4       	brtc	.+2      	; 0x12ac <__addsf3+0x1e>
    12aa:	e0 95       	com	r30
    12ac:	e7 fb       	bst	r30, 7
    12ae:	29 c1       	rjmp	.+594    	; 0x1502 <__fp_inf>

000012b0 <__addsf3x>:
    12b0:	e9 2f       	mov	r30, r25
    12b2:	4f d1       	rcall	.+670    	; 0x1552 <__fp_split3>
    12b4:	80 f3       	brcs	.-32     	; 0x1296 <__addsf3+0x8>
    12b6:	ba 17       	cp	r27, r26
    12b8:	62 07       	cpc	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	95 07       	cpc	r25, r21
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <__addsf3x+0x18>
    12c2:	71 f4       	brne	.+28     	; 0x12e0 <__addsf3x+0x30>
    12c4:	9e f5       	brtc	.+102    	; 0x132c <__addsf3x+0x7c>
    12c6:	67 c1       	rjmp	.+718    	; 0x1596 <__fp_zero>
    12c8:	0e f4       	brtc	.+2      	; 0x12cc <__addsf3x+0x1c>
    12ca:	e0 95       	com	r30
    12cc:	0b 2e       	mov	r0, r27
    12ce:	ba 2f       	mov	r27, r26
    12d0:	a0 2d       	mov	r26, r0
    12d2:	0b 01       	movw	r0, r22
    12d4:	b9 01       	movw	r22, r18
    12d6:	90 01       	movw	r18, r0
    12d8:	0c 01       	movw	r0, r24
    12da:	ca 01       	movw	r24, r20
    12dc:	a0 01       	movw	r20, r0
    12de:	11 24       	eor	r1, r1
    12e0:	ff 27       	eor	r31, r31
    12e2:	59 1b       	sub	r21, r25
    12e4:	99 f0       	breq	.+38     	; 0x130c <__addsf3x+0x5c>
    12e6:	59 3f       	cpi	r21, 0xF9	; 249
    12e8:	50 f4       	brcc	.+20     	; 0x12fe <__addsf3x+0x4e>
    12ea:	50 3e       	cpi	r21, 0xE0	; 224
    12ec:	68 f1       	brcs	.+90     	; 0x1348 <__addsf3x+0x98>
    12ee:	1a 16       	cp	r1, r26
    12f0:	f0 40       	sbci	r31, 0x00	; 0
    12f2:	a2 2f       	mov	r26, r18
    12f4:	23 2f       	mov	r18, r19
    12f6:	34 2f       	mov	r19, r20
    12f8:	44 27       	eor	r20, r20
    12fa:	58 5f       	subi	r21, 0xF8	; 248
    12fc:	f3 cf       	rjmp	.-26     	; 0x12e4 <__addsf3x+0x34>
    12fe:	46 95       	lsr	r20
    1300:	37 95       	ror	r19
    1302:	27 95       	ror	r18
    1304:	a7 95       	ror	r26
    1306:	f0 40       	sbci	r31, 0x00	; 0
    1308:	53 95       	inc	r21
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__addsf3x+0x4e>
    130c:	7e f4       	brtc	.+30     	; 0x132c <__addsf3x+0x7c>
    130e:	1f 16       	cp	r1, r31
    1310:	ba 0b       	sbc	r27, r26
    1312:	62 0b       	sbc	r22, r18
    1314:	73 0b       	sbc	r23, r19
    1316:	84 0b       	sbc	r24, r20
    1318:	ba f0       	brmi	.+46     	; 0x1348 <__addsf3x+0x98>
    131a:	91 50       	subi	r25, 0x01	; 1
    131c:	a1 f0       	breq	.+40     	; 0x1346 <__addsf3x+0x96>
    131e:	ff 0f       	add	r31, r31
    1320:	bb 1f       	adc	r27, r27
    1322:	66 1f       	adc	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	c2 f7       	brpl	.-16     	; 0x131a <__addsf3x+0x6a>
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <__addsf3x+0x98>
    132c:	ba 0f       	add	r27, r26
    132e:	62 1f       	adc	r22, r18
    1330:	73 1f       	adc	r23, r19
    1332:	84 1f       	adc	r24, r20
    1334:	48 f4       	brcc	.+18     	; 0x1348 <__addsf3x+0x98>
    1336:	87 95       	ror	r24
    1338:	77 95       	ror	r23
    133a:	67 95       	ror	r22
    133c:	b7 95       	ror	r27
    133e:	f7 95       	ror	r31
    1340:	9e 3f       	cpi	r25, 0xFE	; 254
    1342:	08 f0       	brcs	.+2      	; 0x1346 <__addsf3x+0x96>
    1344:	b3 cf       	rjmp	.-154    	; 0x12ac <__addsf3+0x1e>
    1346:	93 95       	inc	r25
    1348:	88 0f       	add	r24, r24
    134a:	08 f0       	brcs	.+2      	; 0x134e <__addsf3x+0x9e>
    134c:	99 27       	eor	r25, r25
    134e:	ee 0f       	add	r30, r30
    1350:	97 95       	ror	r25
    1352:	87 95       	ror	r24
    1354:	08 95       	ret

00001356 <__divsf3>:
    1356:	0c d0       	rcall	.+24     	; 0x1370 <__divsf3x>
    1358:	eb c0       	rjmp	.+470    	; 0x1530 <__fp_round>
    135a:	e3 d0       	rcall	.+454    	; 0x1522 <__fp_pscB>
    135c:	40 f0       	brcs	.+16     	; 0x136e <__divsf3+0x18>
    135e:	da d0       	rcall	.+436    	; 0x1514 <__fp_pscA>
    1360:	30 f0       	brcs	.+12     	; 0x136e <__divsf3+0x18>
    1362:	21 f4       	brne	.+8      	; 0x136c <__divsf3+0x16>
    1364:	5f 3f       	cpi	r21, 0xFF	; 255
    1366:	19 f0       	breq	.+6      	; 0x136e <__divsf3+0x18>
    1368:	cc c0       	rjmp	.+408    	; 0x1502 <__fp_inf>
    136a:	51 11       	cpse	r21, r1
    136c:	15 c1       	rjmp	.+554    	; 0x1598 <__fp_szero>
    136e:	cf c0       	rjmp	.+414    	; 0x150e <__fp_nan>

00001370 <__divsf3x>:
    1370:	f0 d0       	rcall	.+480    	; 0x1552 <__fp_split3>
    1372:	98 f3       	brcs	.-26     	; 0x135a <__divsf3+0x4>

00001374 <__divsf3_pse>:
    1374:	99 23       	and	r25, r25
    1376:	c9 f3       	breq	.-14     	; 0x136a <__divsf3+0x14>
    1378:	55 23       	and	r21, r21
    137a:	b1 f3       	breq	.-20     	; 0x1368 <__divsf3+0x12>
    137c:	95 1b       	sub	r25, r21
    137e:	55 0b       	sbc	r21, r21
    1380:	bb 27       	eor	r27, r27
    1382:	aa 27       	eor	r26, r26
    1384:	62 17       	cp	r22, r18
    1386:	73 07       	cpc	r23, r19
    1388:	84 07       	cpc	r24, r20
    138a:	38 f0       	brcs	.+14     	; 0x139a <__divsf3_pse+0x26>
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	5f 4f       	sbci	r21, 0xFF	; 255
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	44 1f       	adc	r20, r20
    1396:	aa 1f       	adc	r26, r26
    1398:	a9 f3       	breq	.-22     	; 0x1384 <__divsf3_pse+0x10>
    139a:	33 d0       	rcall	.+102    	; 0x1402 <__divsf3_pse+0x8e>
    139c:	0e 2e       	mov	r0, r30
    139e:	3a f0       	brmi	.+14     	; 0x13ae <__divsf3_pse+0x3a>
    13a0:	e0 e8       	ldi	r30, 0x80	; 128
    13a2:	30 d0       	rcall	.+96     	; 0x1404 <__divsf3_pse+0x90>
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	50 40       	sbci	r21, 0x00	; 0
    13a8:	e6 95       	lsr	r30
    13aa:	00 1c       	adc	r0, r0
    13ac:	ca f7       	brpl	.-14     	; 0x13a0 <__divsf3_pse+0x2c>
    13ae:	29 d0       	rcall	.+82     	; 0x1402 <__divsf3_pse+0x8e>
    13b0:	fe 2f       	mov	r31, r30
    13b2:	27 d0       	rcall	.+78     	; 0x1402 <__divsf3_pse+0x8e>
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	bb 1f       	adc	r27, r27
    13bc:	26 17       	cp	r18, r22
    13be:	37 07       	cpc	r19, r23
    13c0:	48 07       	cpc	r20, r24
    13c2:	ab 07       	cpc	r26, r27
    13c4:	b0 e8       	ldi	r27, 0x80	; 128
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__divsf3_pse+0x56>
    13c8:	bb 0b       	sbc	r27, r27
    13ca:	80 2d       	mov	r24, r0
    13cc:	bf 01       	movw	r22, r30
    13ce:	ff 27       	eor	r31, r31
    13d0:	93 58       	subi	r25, 0x83	; 131
    13d2:	5f 4f       	sbci	r21, 0xFF	; 255
    13d4:	2a f0       	brmi	.+10     	; 0x13e0 <__divsf3_pse+0x6c>
    13d6:	9e 3f       	cpi	r25, 0xFE	; 254
    13d8:	51 05       	cpc	r21, r1
    13da:	68 f0       	brcs	.+26     	; 0x13f6 <__divsf3_pse+0x82>
    13dc:	92 c0       	rjmp	.+292    	; 0x1502 <__fp_inf>
    13de:	dc c0       	rjmp	.+440    	; 0x1598 <__fp_szero>
    13e0:	5f 3f       	cpi	r21, 0xFF	; 255
    13e2:	ec f3       	brlt	.-6      	; 0x13de <__divsf3_pse+0x6a>
    13e4:	98 3e       	cpi	r25, 0xE8	; 232
    13e6:	dc f3       	brlt	.-10     	; 0x13de <__divsf3_pse+0x6a>
    13e8:	86 95       	lsr	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	f7 95       	ror	r31
    13f2:	9f 5f       	subi	r25, 0xFF	; 255
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <__divsf3_pse+0x74>
    13f6:	88 0f       	add	r24, r24
    13f8:	91 1d       	adc	r25, r1
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret
    1402:	e1 e0       	ldi	r30, 0x01	; 1
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	bb 1f       	adc	r27, r27
    140c:	62 17       	cp	r22, r18
    140e:	73 07       	cpc	r23, r19
    1410:	84 07       	cpc	r24, r20
    1412:	ba 07       	cpc	r27, r26
    1414:	20 f0       	brcs	.+8      	; 0x141e <__divsf3_pse+0xaa>
    1416:	62 1b       	sub	r22, r18
    1418:	73 0b       	sbc	r23, r19
    141a:	84 0b       	sbc	r24, r20
    141c:	ba 0b       	sbc	r27, r26
    141e:	ee 1f       	adc	r30, r30
    1420:	88 f7       	brcc	.-30     	; 0x1404 <__divsf3_pse+0x90>
    1422:	e0 95       	com	r30
    1424:	08 95       	ret

00001426 <__fixsfsi>:
    1426:	04 d0       	rcall	.+8      	; 0x1430 <__fixunssfsi>
    1428:	68 94       	set
    142a:	b1 11       	cpse	r27, r1
    142c:	b5 c0       	rjmp	.+362    	; 0x1598 <__fp_szero>
    142e:	08 95       	ret

00001430 <__fixunssfsi>:
    1430:	98 d0       	rcall	.+304    	; 0x1562 <__fp_splitA>
    1432:	88 f0       	brcs	.+34     	; 0x1456 <__fixunssfsi+0x26>
    1434:	9f 57       	subi	r25, 0x7F	; 127
    1436:	90 f0       	brcs	.+36     	; 0x145c <__fixunssfsi+0x2c>
    1438:	b9 2f       	mov	r27, r25
    143a:	99 27       	eor	r25, r25
    143c:	b7 51       	subi	r27, 0x17	; 23
    143e:	a0 f0       	brcs	.+40     	; 0x1468 <__fixunssfsi+0x38>
    1440:	d1 f0       	breq	.+52     	; 0x1476 <__fixunssfsi+0x46>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	88 1f       	adc	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	1a f0       	brmi	.+6      	; 0x1452 <__fixunssfsi+0x22>
    144c:	ba 95       	dec	r27
    144e:	c9 f7       	brne	.-14     	; 0x1442 <__fixunssfsi+0x12>
    1450:	12 c0       	rjmp	.+36     	; 0x1476 <__fixunssfsi+0x46>
    1452:	b1 30       	cpi	r27, 0x01	; 1
    1454:	81 f0       	breq	.+32     	; 0x1476 <__fixunssfsi+0x46>
    1456:	9f d0       	rcall	.+318    	; 0x1596 <__fp_zero>
    1458:	b1 e0       	ldi	r27, 0x01	; 1
    145a:	08 95       	ret
    145c:	9c c0       	rjmp	.+312    	; 0x1596 <__fp_zero>
    145e:	67 2f       	mov	r22, r23
    1460:	78 2f       	mov	r23, r24
    1462:	88 27       	eor	r24, r24
    1464:	b8 5f       	subi	r27, 0xF8	; 248
    1466:	39 f0       	breq	.+14     	; 0x1476 <__fixunssfsi+0x46>
    1468:	b9 3f       	cpi	r27, 0xF9	; 249
    146a:	cc f3       	brlt	.-14     	; 0x145e <__fixunssfsi+0x2e>
    146c:	86 95       	lsr	r24
    146e:	77 95       	ror	r23
    1470:	67 95       	ror	r22
    1472:	b3 95       	inc	r27
    1474:	d9 f7       	brne	.-10     	; 0x146c <__fixunssfsi+0x3c>
    1476:	3e f4       	brtc	.+14     	; 0x1486 <__fixunssfsi+0x56>
    1478:	90 95       	com	r25
    147a:	80 95       	com	r24
    147c:	70 95       	com	r23
    147e:	61 95       	neg	r22
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	08 95       	ret

00001488 <__floatunsisf>:
    1488:	e8 94       	clt
    148a:	09 c0       	rjmp	.+18     	; 0x149e <__floatsisf+0x12>

0000148c <__floatsisf>:
    148c:	97 fb       	bst	r25, 7
    148e:	3e f4       	brtc	.+14     	; 0x149e <__floatsisf+0x12>
    1490:	90 95       	com	r25
    1492:	80 95       	com	r24
    1494:	70 95       	com	r23
    1496:	61 95       	neg	r22
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	99 23       	and	r25, r25
    14a0:	a9 f0       	breq	.+42     	; 0x14cc <__floatsisf+0x40>
    14a2:	f9 2f       	mov	r31, r25
    14a4:	96 e9       	ldi	r25, 0x96	; 150
    14a6:	bb 27       	eor	r27, r27
    14a8:	93 95       	inc	r25
    14aa:	f6 95       	lsr	r31
    14ac:	87 95       	ror	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b7 95       	ror	r27
    14b4:	f1 11       	cpse	r31, r1
    14b6:	f8 cf       	rjmp	.-16     	; 0x14a8 <__floatsisf+0x1c>
    14b8:	fa f4       	brpl	.+62     	; 0x14f8 <__floatsisf+0x6c>
    14ba:	bb 0f       	add	r27, r27
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <__floatsisf+0x36>
    14be:	60 ff       	sbrs	r22, 0
    14c0:	1b c0       	rjmp	.+54     	; 0x14f8 <__floatsisf+0x6c>
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	16 c0       	rjmp	.+44     	; 0x14f8 <__floatsisf+0x6c>
    14cc:	88 23       	and	r24, r24
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <__floatsisf+0x48>
    14d0:	96 e9       	ldi	r25, 0x96	; 150
    14d2:	11 c0       	rjmp	.+34     	; 0x14f6 <__floatsisf+0x6a>
    14d4:	77 23       	and	r23, r23
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <__floatsisf+0x54>
    14d8:	9e e8       	ldi	r25, 0x8E	; 142
    14da:	87 2f       	mov	r24, r23
    14dc:	76 2f       	mov	r23, r22
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <__floatsisf+0x5e>
    14e0:	66 23       	and	r22, r22
    14e2:	71 f0       	breq	.+28     	; 0x1500 <__floatsisf+0x74>
    14e4:	96 e8       	ldi	r25, 0x86	; 134
    14e6:	86 2f       	mov	r24, r22
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	2a f0       	brmi	.+10     	; 0x14f8 <__floatsisf+0x6c>
    14ee:	9a 95       	dec	r25
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	da f7       	brpl	.-10     	; 0x14ee <__floatsisf+0x62>
    14f8:	88 0f       	add	r24, r24
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	97 f9       	bld	r25, 7
    1500:	08 95       	ret

00001502 <__fp_inf>:
    1502:	97 f9       	bld	r25, 7
    1504:	9f 67       	ori	r25, 0x7F	; 127
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	08 95       	ret

0000150e <__fp_nan>:
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	80 ec       	ldi	r24, 0xC0	; 192
    1512:	08 95       	ret

00001514 <__fp_pscA>:
    1514:	00 24       	eor	r0, r0
    1516:	0a 94       	dec	r0
    1518:	16 16       	cp	r1, r22
    151a:	17 06       	cpc	r1, r23
    151c:	18 06       	cpc	r1, r24
    151e:	09 06       	cpc	r0, r25
    1520:	08 95       	ret

00001522 <__fp_pscB>:
    1522:	00 24       	eor	r0, r0
    1524:	0a 94       	dec	r0
    1526:	12 16       	cp	r1, r18
    1528:	13 06       	cpc	r1, r19
    152a:	14 06       	cpc	r1, r20
    152c:	05 06       	cpc	r0, r21
    152e:	08 95       	ret

00001530 <__fp_round>:
    1530:	09 2e       	mov	r0, r25
    1532:	03 94       	inc	r0
    1534:	00 0c       	add	r0, r0
    1536:	11 f4       	brne	.+4      	; 0x153c <__fp_round+0xc>
    1538:	88 23       	and	r24, r24
    153a:	52 f0       	brmi	.+20     	; 0x1550 <__fp_round+0x20>
    153c:	bb 0f       	add	r27, r27
    153e:	40 f4       	brcc	.+16     	; 0x1550 <__fp_round+0x20>
    1540:	bf 2b       	or	r27, r31
    1542:	11 f4       	brne	.+4      	; 0x1548 <__fp_round+0x18>
    1544:	60 ff       	sbrs	r22, 0
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <__fp_round+0x20>
    1548:	6f 5f       	subi	r22, 0xFF	; 255
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	08 95       	ret

00001552 <__fp_split3>:
    1552:	57 fd       	sbrc	r21, 7
    1554:	90 58       	subi	r25, 0x80	; 128
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	59 f0       	breq	.+22     	; 0x1572 <__fp_splitA+0x10>
    155c:	5f 3f       	cpi	r21, 0xFF	; 255
    155e:	71 f0       	breq	.+28     	; 0x157c <__fp_splitA+0x1a>
    1560:	47 95       	ror	r20

00001562 <__fp_splitA>:
    1562:	88 0f       	add	r24, r24
    1564:	97 fb       	bst	r25, 7
    1566:	99 1f       	adc	r25, r25
    1568:	61 f0       	breq	.+24     	; 0x1582 <__fp_splitA+0x20>
    156a:	9f 3f       	cpi	r25, 0xFF	; 255
    156c:	79 f0       	breq	.+30     	; 0x158c <__fp_splitA+0x2a>
    156e:	87 95       	ror	r24
    1570:	08 95       	ret
    1572:	12 16       	cp	r1, r18
    1574:	13 06       	cpc	r1, r19
    1576:	14 06       	cpc	r1, r20
    1578:	55 1f       	adc	r21, r21
    157a:	f2 cf       	rjmp	.-28     	; 0x1560 <__fp_split3+0xe>
    157c:	46 95       	lsr	r20
    157e:	f1 df       	rcall	.-30     	; 0x1562 <__fp_splitA>
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <__fp_splitA+0x30>
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	99 1f       	adc	r25, r25
    158a:	f1 cf       	rjmp	.-30     	; 0x156e <__fp_splitA+0xc>
    158c:	86 95       	lsr	r24
    158e:	71 05       	cpc	r23, r1
    1590:	61 05       	cpc	r22, r1
    1592:	08 94       	sec
    1594:	08 95       	ret

00001596 <__fp_zero>:
    1596:	e8 94       	clt

00001598 <__fp_szero>:
    1598:	bb 27       	eor	r27, r27
    159a:	66 27       	eor	r22, r22
    159c:	77 27       	eor	r23, r23
    159e:	cb 01       	movw	r24, r22
    15a0:	97 f9       	bld	r25, 7
    15a2:	08 95       	ret

000015a4 <__mulsf3>:
    15a4:	0b d0       	rcall	.+22     	; 0x15bc <__mulsf3x>
    15a6:	c4 cf       	rjmp	.-120    	; 0x1530 <__fp_round>
    15a8:	b5 df       	rcall	.-150    	; 0x1514 <__fp_pscA>
    15aa:	28 f0       	brcs	.+10     	; 0x15b6 <__mulsf3+0x12>
    15ac:	ba df       	rcall	.-140    	; 0x1522 <__fp_pscB>
    15ae:	18 f0       	brcs	.+6      	; 0x15b6 <__mulsf3+0x12>
    15b0:	95 23       	and	r25, r21
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <__mulsf3+0x12>
    15b4:	a6 cf       	rjmp	.-180    	; 0x1502 <__fp_inf>
    15b6:	ab cf       	rjmp	.-170    	; 0x150e <__fp_nan>
    15b8:	11 24       	eor	r1, r1
    15ba:	ee cf       	rjmp	.-36     	; 0x1598 <__fp_szero>

000015bc <__mulsf3x>:
    15bc:	ca df       	rcall	.-108    	; 0x1552 <__fp_split3>
    15be:	a0 f3       	brcs	.-24     	; 0x15a8 <__mulsf3+0x4>

000015c0 <__mulsf3_pse>:
    15c0:	95 9f       	mul	r25, r21
    15c2:	d1 f3       	breq	.-12     	; 0x15b8 <__mulsf3+0x14>
    15c4:	95 0f       	add	r25, r21
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	55 1f       	adc	r21, r21
    15ca:	62 9f       	mul	r22, r18
    15cc:	f0 01       	movw	r30, r0
    15ce:	72 9f       	mul	r23, r18
    15d0:	bb 27       	eor	r27, r27
    15d2:	f0 0d       	add	r31, r0
    15d4:	b1 1d       	adc	r27, r1
    15d6:	63 9f       	mul	r22, r19
    15d8:	aa 27       	eor	r26, r26
    15da:	f0 0d       	add	r31, r0
    15dc:	b1 1d       	adc	r27, r1
    15de:	aa 1f       	adc	r26, r26
    15e0:	64 9f       	mul	r22, r20
    15e2:	66 27       	eor	r22, r22
    15e4:	b0 0d       	add	r27, r0
    15e6:	a1 1d       	adc	r26, r1
    15e8:	66 1f       	adc	r22, r22
    15ea:	82 9f       	mul	r24, r18
    15ec:	22 27       	eor	r18, r18
    15ee:	b0 0d       	add	r27, r0
    15f0:	a1 1d       	adc	r26, r1
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 9f       	mul	r23, r19
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	62 1f       	adc	r22, r18
    15fc:	83 9f       	mul	r24, r19
    15fe:	a0 0d       	add	r26, r0
    1600:	61 1d       	adc	r22, r1
    1602:	22 1f       	adc	r18, r18
    1604:	74 9f       	mul	r23, r20
    1606:	33 27       	eor	r19, r19
    1608:	a0 0d       	add	r26, r0
    160a:	61 1d       	adc	r22, r1
    160c:	23 1f       	adc	r18, r19
    160e:	84 9f       	mul	r24, r20
    1610:	60 0d       	add	r22, r0
    1612:	21 1d       	adc	r18, r1
    1614:	82 2f       	mov	r24, r18
    1616:	76 2f       	mov	r23, r22
    1618:	6a 2f       	mov	r22, r26
    161a:	11 24       	eor	r1, r1
    161c:	9f 57       	subi	r25, 0x7F	; 127
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	8a f0       	brmi	.+34     	; 0x1644 <__mulsf3_pse+0x84>
    1622:	e1 f0       	breq	.+56     	; 0x165c <__mulsf3_pse+0x9c>
    1624:	88 23       	and	r24, r24
    1626:	4a f0       	brmi	.+18     	; 0x163a <__mulsf3_pse+0x7a>
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	bb 1f       	adc	r27, r27
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__mulsf3_pse+0x64>
    163a:	9e 3f       	cpi	r25, 0xFE	; 254
    163c:	51 05       	cpc	r21, r1
    163e:	70 f0       	brcs	.+28     	; 0x165c <__mulsf3_pse+0x9c>
    1640:	60 cf       	rjmp	.-320    	; 0x1502 <__fp_inf>
    1642:	aa cf       	rjmp	.-172    	; 0x1598 <__fp_szero>
    1644:	5f 3f       	cpi	r21, 0xFF	; 255
    1646:	ec f3       	brlt	.-6      	; 0x1642 <__mulsf3_pse+0x82>
    1648:	98 3e       	cpi	r25, 0xE8	; 232
    164a:	dc f3       	brlt	.-10     	; 0x1642 <__mulsf3_pse+0x82>
    164c:	86 95       	lsr	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	b7 95       	ror	r27
    1654:	f7 95       	ror	r31
    1656:	e7 95       	ror	r30
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	c1 f7       	brne	.-16     	; 0x164c <__mulsf3_pse+0x8c>
    165c:	fe 2b       	or	r31, r30
    165e:	88 0f       	add	r24, r24
    1660:	91 1d       	adc	r25, r1
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret

0000166a <__divmodhi4>:
    166a:	97 fb       	bst	r25, 7
    166c:	07 2e       	mov	r0, r23
    166e:	16 f4       	brtc	.+4      	; 0x1674 <__divmodhi4+0xa>
    1670:	00 94       	com	r0
    1672:	06 d0       	rcall	.+12     	; 0x1680 <__divmodhi4_neg1>
    1674:	77 fd       	sbrc	r23, 7
    1676:	08 d0       	rcall	.+16     	; 0x1688 <__divmodhi4_neg2>
    1678:	0b d0       	rcall	.+22     	; 0x1690 <__udivmodhi4>
    167a:	07 fc       	sbrc	r0, 7
    167c:	05 d0       	rcall	.+10     	; 0x1688 <__divmodhi4_neg2>
    167e:	3e f4       	brtc	.+14     	; 0x168e <__divmodhi4_exit>

00001680 <__divmodhi4_neg1>:
    1680:	90 95       	com	r25
    1682:	81 95       	neg	r24
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	08 95       	ret

00001688 <__divmodhi4_neg2>:
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255

0000168e <__divmodhi4_exit>:
    168e:	08 95       	ret

00001690 <__udivmodhi4>:
    1690:	aa 1b       	sub	r26, r26
    1692:	bb 1b       	sub	r27, r27
    1694:	51 e1       	ldi	r21, 0x11	; 17
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <__udivmodhi4_ep>

00001698 <__udivmodhi4_loop>:
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	a6 17       	cp	r26, r22
    169e:	b7 07       	cpc	r27, r23
    16a0:	10 f0       	brcs	.+4      	; 0x16a6 <__udivmodhi4_ep>
    16a2:	a6 1b       	sub	r26, r22
    16a4:	b7 0b       	sbc	r27, r23

000016a6 <__udivmodhi4_ep>:
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	5a 95       	dec	r21
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__udivmodhi4_loop>
    16ae:	80 95       	com	r24
    16b0:	90 95       	com	r25
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	08 95       	ret

000016b8 <_exit>:
    16b8:	f8 94       	cli

000016ba <__stop_program>:
    16ba:	ff cf       	rjmp	.-2      	; 0x16ba <__stop_program>
