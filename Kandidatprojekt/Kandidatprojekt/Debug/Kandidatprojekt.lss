
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000012e4  00001378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  0080014e  0080014e  000013c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a5c  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088d  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018c7  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  00005120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010b90  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000112d  00000000  00000000  00016110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0001723d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003d05  00000000  00000000  0001739d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c6       	rjmp	.+3112   	; 0xc76 <__vector_19>
      4e:	00 00       	nop
      50:	7e c6       	rjmp	.+3324   	; 0xd4e <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	d5 c6       	rjmp	.+3498   	; 0xe04 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c5       	rjmp	.+2630   	; 0xab8 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ee       	ldi	r30, 0xE4	; 228
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 34       	cpi	r26, 0x4E	; 78
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae e4       	ldi	r26, 0x4E	; 78
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3a       	cpi	r26, 0xA0	; 160
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	58 d5       	rcall	.+2736   	; 0xb74 <main>
      c4:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <gettingReady>:
void gettingReady(int sonicR, int sonicF);



void gettingReady(int sonicR, int sonicF)
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	ca 59       	subi	r28, 0x9A	; 154
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	6c 01       	movw	r12, r24
     102:	2b 01       	movw	r4, r22
    ////////////////////////////////////////////////////////////////////////////////
    ///// SETUP FOR INPUT VARIABLE DISTF ///////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type distF; strcpy(distF.name, "distF");
     104:	86 e0       	ldi	r24, 0x06	; 6
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	de 01       	movw	r26, r28
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	01 90       	ld	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	8a 95       	dec	r24
     114:	e1 f7       	brne	.-8      	; 0x10e <gettingReady+0x44>
    
    // 2. Set MFs
    
    struct mf_type smallF;
    MATLAB_MF(&smallF, "smallF", -1, 0, 0, 20);
     116:	3e 01       	movw	r6, r28
     118:	21 e1       	ldi	r18, 0x11	; 17
     11a:	62 0e       	add	r6, r18
     11c:	71 1c       	adc	r7, r1
     11e:	0f 2e       	mov	r0, r31
     120:	f4 e1       	ldi	r31, 0x14	; 20
     122:	ef 2e       	mov	r14, r31
     124:	f1 2c       	mov	r15, r1
     126:	f0 2d       	mov	r31, r0
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4f ef       	ldi	r20, 0xFF	; 255
     132:	5f ef       	ldi	r21, 0xFF	; 255
     134:	66 e0       	ldi	r22, 0x06	; 6
     136:	71 e0       	ldi	r23, 0x01	; 1
     138:	c3 01       	movw	r24, r6
     13a:	8f d4       	rcall	.+2334   	; 0xa5a <MATLAB_MF>
    struct mf_type mediumF;
    MATLAB_MF(&mediumF, "mediumF", 10, 30, 30, 50);
     13c:	4e 01       	movw	r8, r28
     13e:	37 e2       	ldi	r19, 0x27	; 39
     140:	83 0e       	add	r8, r19
     142:	91 1c       	adc	r9, r1
     144:	0f 2e       	mov	r0, r31
     146:	f2 e3       	ldi	r31, 0x32	; 50
     148:	ef 2e       	mov	r14, r31
     14a:	f1 2c       	mov	r15, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	0e e1       	ldi	r16, 0x1E	; 30
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	2e e1       	ldi	r18, 0x1E	; 30
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	4a e0       	ldi	r20, 0x0A	; 10
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	6d e0       	ldi	r22, 0x0D	; 13
     15c:	71 e0       	ldi	r23, 0x01	; 1
     15e:	c4 01       	movw	r24, r8
     160:	7c d4       	rcall	.+2296   	; 0xa5a <MATLAB_MF>
    struct mf_type bigF;
    MATLAB_MF(&bigF, "bigF", 40, 60, 60, 80);
     162:	5e 01       	movw	r10, r28
     164:	6d e3       	ldi	r22, 0x3D	; 61
     166:	a6 0e       	add	r10, r22
     168:	b1 1c       	adc	r11, r1
     16a:	0f 2e       	mov	r0, r31
     16c:	f0 e5       	ldi	r31, 0x50	; 80
     16e:	ef 2e       	mov	r14, r31
     170:	f1 2c       	mov	r15, r1
     172:	f0 2d       	mov	r31, r0
     174:	0c e3       	ldi	r16, 0x3C	; 60
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	2c e3       	ldi	r18, 0x3C	; 60
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	48 e2       	ldi	r20, 0x28	; 40
     17e:	50 e0       	ldi	r21, 0x00	; 0
     180:	65 e1       	ldi	r22, 0x15	; 21
     182:	71 e0       	ldi	r23, 0x01	; 1
     184:	c5 01       	movw	r24, r10
     186:	69 d4       	rcall	.+2258   	; 0xa5a <MATLAB_MF>
    
    // 3. Linked list for MFs
    
    distF.membership_functions = &smallF;
     188:	7e 86       	std	Y+14, r7	; 0x0e
     18a:	6d 86       	std	Y+13, r6	; 0x0d
    smallF.next = &mediumF;
     18c:	9e a2       	std	Y+38, r9	; 0x26
     18e:	8d a2       	std	Y+37, r8	; 0x25
    mediumF.next = &bigF;
     190:	bc ae       	std	Y+60, r11	; 0x3c
     192:	ab ae       	std	Y+59, r10	; 0x3b
    bigF.next = NULL;
     194:	63 96       	adiw	r28, 0x13	; 19
     196:	1f ae       	std	Y+63, r1	; 0x3f
     198:	1e ae       	std	Y+62, r1	; 0x3e
     19a:	63 97       	sbiw	r28, 0x13	; 19
    
    // 4. Variable assigned its reference value
    
    if(sonicF < MIN_DISTANCE)
     19c:	55 20       	and	r5, r5
     19e:	1c f4       	brge	.+6      	; 0x1a6 <gettingReady+0xdc>
    {
        distF.value = MIN_DISTANCE;
     1a0:	1c 86       	std	Y+12, r1	; 0x0c
     1a2:	1b 86       	std	Y+11, r1	; 0x0b
     1a4:	0b c0       	rjmp	.+22     	; 0x1bc <gettingReady+0xf2>
    }
    else if (sonicF > MAX_DISTANCE)
     1a6:	7b ef       	ldi	r23, 0xFB	; 251
     1a8:	47 16       	cp	r4, r23
     1aa:	51 04       	cpc	r5, r1
     1ac:	2c f0       	brlt	.+10     	; 0x1b8 <gettingReady+0xee>
    {
        distF.value = MAX_DISTANCE;
     1ae:	8a ef       	ldi	r24, 0xFA	; 250
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9c 87       	std	Y+12, r25	; 0x0c
     1b4:	8b 87       	std	Y+11, r24	; 0x0b
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <gettingReady+0xf2>
    }
    else
    {
        distF.value = sonicF;
     1b8:	5c 86       	std	Y+12, r5	; 0x0c
     1ba:	4b 86       	std	Y+11, r4	; 0x0b
    ////////////////////////////////////////////////////////////////////////////////
    ///// SETUP FOR INPUT VARIABLE DISTR ///////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type distR; strcpy(distR.name, "distR");
     1bc:	86 e0       	ldi	r24, 0x06	; 6
     1be:	ea e1       	ldi	r30, 0x1A	; 26
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	de 01       	movw	r26, r28
     1c4:	ad 5a       	subi	r26, 0xAD	; 173
     1c6:	bf 4f       	sbci	r27, 0xFF	; 255
     1c8:	01 90       	ld	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	8a 95       	dec	r24
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <gettingReady+0xfe>
    
    // 2. Set MFs
    
    struct mf_type smallR;
    MATLAB_MF(&smallR, "smallR", -1, 0, 0, 20);
     1d0:	3e 01       	movw	r6, r28
     1d2:	83 e6       	ldi	r24, 0x63	; 99
     1d4:	68 0e       	add	r6, r24
     1d6:	71 1c       	adc	r7, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	f4 e1       	ldi	r31, 0x14	; 20
     1dc:	ef 2e       	mov	r14, r31
     1de:	f1 2c       	mov	r15, r1
     1e0:	f0 2d       	mov	r31, r0
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	4f ef       	ldi	r20, 0xFF	; 255
     1ec:	5f ef       	ldi	r21, 0xFF	; 255
     1ee:	60 e2       	ldi	r22, 0x20	; 32
     1f0:	71 e0       	ldi	r23, 0x01	; 1
     1f2:	c3 01       	movw	r24, r6
     1f4:	32 d4       	rcall	.+2148   	; 0xa5a <MATLAB_MF>
    struct mf_type mediumR;
    MATLAB_MF(&mediumR, "mediumR", 10, 30, 30, 50);
     1f6:	4e 01       	movw	r8, r28
     1f8:	e9 e7       	ldi	r30, 0x79	; 121
     1fa:	8e 0e       	add	r8, r30
     1fc:	91 1c       	adc	r9, r1
     1fe:	0f 2e       	mov	r0, r31
     200:	f2 e3       	ldi	r31, 0x32	; 50
     202:	ef 2e       	mov	r14, r31
     204:	f1 2c       	mov	r15, r1
     206:	f0 2d       	mov	r31, r0
     208:	0e e1       	ldi	r16, 0x1E	; 30
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	2e e1       	ldi	r18, 0x1E	; 30
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	67 e2       	ldi	r22, 0x27	; 39
     216:	71 e0       	ldi	r23, 0x01	; 1
     218:	c4 01       	movw	r24, r8
     21a:	1f d4       	rcall	.+2110   	; 0xa5a <MATLAB_MF>
    struct mf_type bigR;
    MATLAB_MF(&bigR, "bigR", 40, 60, 60, 80);
     21c:	5e 01       	movw	r10, r28
     21e:	ff e8       	ldi	r31, 0x8F	; 143
     220:	af 0e       	add	r10, r31
     222:	b1 1c       	adc	r11, r1
     224:	0f 2e       	mov	r0, r31
     226:	f0 e5       	ldi	r31, 0x50	; 80
     228:	ef 2e       	mov	r14, r31
     22a:	f1 2c       	mov	r15, r1
     22c:	f0 2d       	mov	r31, r0
     22e:	0c e3       	ldi	r16, 0x3C	; 60
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	2c e3       	ldi	r18, 0x3C	; 60
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	48 e2       	ldi	r20, 0x28	; 40
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	6f e2       	ldi	r22, 0x2F	; 47
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	c5 01       	movw	r24, r10
     240:	0c d4       	rcall	.+2072   	; 0xa5a <MATLAB_MF>
    
    // 3. Linked list for MFs
    
    distR.membership_functions = &smallR;
     242:	a1 96       	adiw	r28, 0x21	; 33
     244:	7f ae       	std	Y+63, r7	; 0x3f
     246:	6e ae       	std	Y+62, r6	; 0x3e
     248:	a1 97       	sbiw	r28, 0x21	; 33
    smallR.next = &mediumR;
     24a:	f3 01       	movw	r30, r6
     24c:	95 8a       	std	Z+21, r9	; 0x15
     24e:	84 8a       	std	Z+20, r8	; 0x14
    mediumR.next = &bigR;
     250:	f4 01       	movw	r30, r8
     252:	b5 8a       	std	Z+21, r11	; 0x15
     254:	a4 8a       	std	Z+20, r10	; 0x14
    bigR.next = NULL;
     256:	f5 01       	movw	r30, r10
     258:	15 8a       	std	Z+21, r1	; 0x15
     25a:	14 8a       	std	Z+20, r1	; 0x14
    
    // 4. Variable assigned its reference value
    
    if(sonicR < MIN_DISTANCE)
     25c:	dd 20       	and	r13, r13
     25e:	2c f4       	brge	.+10     	; 0x26a <gettingReady+0x1a0>
    {
        distR.value = MIN_DISTANCE;
     260:	6f 96       	adiw	r28, 0x1f	; 31
     262:	1f ae       	std	Y+63, r1	; 0x3f
     264:	1e ae       	std	Y+62, r1	; 0x3e
     266:	6f 97       	sbiw	r28, 0x1f	; 31
     268:	0f c0       	rjmp	.+30     	; 0x288 <gettingReady+0x1be>
    }
    else if (sonicR > MAX_DISTANCE)
     26a:	fb ef       	ldi	r31, 0xFB	; 251
     26c:	cf 16       	cp	r12, r31
     26e:	d1 04       	cpc	r13, r1
     270:	3c f0       	brlt	.+14     	; 0x280 <gettingReady+0x1b6>
    {
        distR.value = MAX_DISTANCE;
     272:	8a ef       	ldi	r24, 0xFA	; 250
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	6f 96       	adiw	r28, 0x1f	; 31
     278:	9f af       	std	Y+63, r25	; 0x3f
     27a:	8e af       	std	Y+62, r24	; 0x3e
     27c:	6f 97       	sbiw	r28, 0x1f	; 31
     27e:	04 c0       	rjmp	.+8      	; 0x288 <gettingReady+0x1be>
    }
    else
    {
        distR.value = sonicR;
     280:	6f 96       	adiw	r28, 0x1f	; 31
     282:	df ae       	std	Y+63, r13	; 0x3f
     284:	ce ae       	std	Y+62, r12	; 0x3e
     286:	6f 97       	sbiw	r28, 0x1f	; 31
    ////////////////////////////////////////////////////////////////////////////////
    ////// SETUP FOR OUTPUT VARIABLE  SERVO ////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type servo; strcpy(servo.name, "servo");
     288:	5e 01       	movw	r10, r28
     28a:	25 ea       	ldi	r18, 0xA5	; 165
     28c:	a2 0e       	add	r10, r18
     28e:	b1 1c       	adc	r11, r1
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	e4 e3       	ldi	r30, 0x34	; 52
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	d5 01       	movw	r26, r10
     298:	01 90       	ld	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	8a 95       	dec	r24
     29e:	e1 f7       	brne	.-8      	; 0x298 <gettingReady+0x1ce>
    
    // 2. Set MFs
    struct mf_type right;
    MATLAB_MF(&right, "right", 2739, 2740, 2740, 2815);
     2a0:	6e 01       	movw	r12, r28
     2a2:	35 eb       	ldi	r19, 0xB5	; 181
     2a4:	c3 0e       	add	r12, r19
     2a6:	d1 1c       	adc	r13, r1
     2a8:	0f 2e       	mov	r0, r31
     2aa:	ee 24       	eor	r14, r14
     2ac:	ea 94       	dec	r14
     2ae:	fa e0       	ldi	r31, 0x0A	; 10
     2b0:	ff 2e       	mov	r15, r31
     2b2:	f0 2d       	mov	r31, r0
     2b4:	04 eb       	ldi	r16, 0xB4	; 180
     2b6:	1a e0       	ldi	r17, 0x0A	; 10
     2b8:	24 eb       	ldi	r18, 0xB4	; 180
     2ba:	3a e0       	ldi	r19, 0x0A	; 10
     2bc:	43 eb       	ldi	r20, 0xB3	; 179
     2be:	5a e0       	ldi	r21, 0x0A	; 10
     2c0:	6a e3       	ldi	r22, 0x3A	; 58
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	c6 01       	movw	r24, r12
     2c6:	c9 d3       	rcall	.+1938   	; 0xa5a <MATLAB_MF>
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2804, 2820, 2820, 2836);
     2c8:	4e 01       	movw	r8, r28
     2ca:	6b ec       	ldi	r22, 0xCB	; 203
     2cc:	86 0e       	add	r8, r22
     2ce:	91 1c       	adc	r9, r1
     2d0:	0f 2e       	mov	r0, r31
     2d2:	f4 e1       	ldi	r31, 0x14	; 20
     2d4:	ef 2e       	mov	r14, r31
     2d6:	fb e0       	ldi	r31, 0x0B	; 11
     2d8:	ff 2e       	mov	r15, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	04 e0       	ldi	r16, 0x04	; 4
     2de:	1b e0       	ldi	r17, 0x0B	; 11
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	3b e0       	ldi	r19, 0x0B	; 11
     2e4:	44 ef       	ldi	r20, 0xF4	; 244
     2e6:	5a e0       	ldi	r21, 0x0A	; 10
     2e8:	60 e4       	ldi	r22, 0x40	; 64
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	c4 01       	movw	r24, r8
     2ee:	b5 d3       	rcall	.+1898   	; 0xa5a <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2827, 2843, 2843, 2859);
     2f0:	3e 01       	movw	r6, r28
     2f2:	71 ee       	ldi	r23, 0xE1	; 225
     2f4:	67 0e       	add	r6, r23
     2f6:	71 1c       	adc	r7, r1
     2f8:	0f 2e       	mov	r0, r31
     2fa:	fb e2       	ldi	r31, 0x2B	; 43
     2fc:	ef 2e       	mov	r14, r31
     2fe:	fb e0       	ldi	r31, 0x0B	; 11
     300:	ff 2e       	mov	r15, r31
     302:	f0 2d       	mov	r31, r0
     304:	0b e1       	ldi	r16, 0x1B	; 27
     306:	1b e0       	ldi	r17, 0x0B	; 11
     308:	2b e1       	ldi	r18, 0x1B	; 27
     30a:	3b e0       	ldi	r19, 0x0B	; 11
     30c:	4b e0       	ldi	r20, 0x0B	; 11
     30e:	5b e0       	ldi	r21, 0x0B	; 11
     310:	69 e4       	ldi	r22, 0x49	; 73
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	c3 01       	movw	r24, r6
     316:	a1 d3       	rcall	.+1858   	; 0xa5a <MATLAB_MF>
    
    
    // 3. Linked list for MFs
    servo.membership_functions = &right;
     318:	f5 01       	movw	r30, r10
     31a:	d5 86       	std	Z+13, r13	; 0x0d
     31c:	c4 86       	std	Z+12, r12	; 0x0c
    right.next = &straight;
     31e:	f6 01       	movw	r30, r12
     320:	95 8a       	std	Z+21, r9	; 0x15
     322:	84 8a       	std	Z+20, r8	; 0x14
    straight.next = &left;
     324:	f4 01       	movw	r30, r8
     326:	75 8a       	std	Z+21, r7	; 0x15
     328:	64 8a       	std	Z+20, r6	; 0x14
    left.next = NULL;
     32a:	f3 01       	movw	r30, r6
     32c:	15 8a       	std	Z+21, r1	; 0x15
     32e:	14 8a       	std	Z+20, r1	; 0x14
    
    
    ////////////////////////////////////////////////////////////////////////////////
    ////// LINKED LISTS FOR VARIABLES //////////////////////////////////////////////
    
    System_Inputs = &distR;
     330:	ee 58       	subi	r30, 0x8E	; 142
     332:	f1 09       	sbc	r31, r1
     334:	f0 93 6d 02 	sts	0x026D, r31
     338:	e0 93 6c 02 	sts	0x026C, r30
    distR.next = &distF;
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	97 87       	std	Z+15, r25	; 0x0f
     342:	86 87       	std	Z+14, r24	; 0x0e
    distF.next = NULL;
     344:	18 8a       	std	Y+16, r1	; 0x10
     346:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
     348:	b0 92 6b 02 	sts	0x026B, r11
     34c:	a0 92 6a 02 	sts	0x026A, r10
    servo.next = NULL;
     350:	f5 01       	movw	r30, r10
     352:	17 86       	std	Z+15, r1	; 0x0f
     354:	16 86       	std	Z+14, r1	; 0x0e
    struct rule_type rule9;
    
    
    // 2. Linked lists for rule_types
    
    Rule_Base = &rule1;
     356:	8a 50       	subi	r24, 0x0A	; 10
     358:	9f 4f       	sbci	r25, 0xFF	; 255
     35a:	90 93 6f 02 	sts	0x026F, r25
     35e:	80 93 6e 02 	sts	0x026E, r24
    rule1.next = &rule2;
     362:	de 01       	movw	r26, r28
     364:	a3 50       	subi	r26, 0x03	; 3
     366:	bf 4f       	sbci	r27, 0xFF	; 255
     368:	fc 01       	movw	r30, r24
     36a:	b5 83       	std	Z+5, r27	; 0x05
     36c:	a4 83       	std	Z+4, r26	; 0x04
    rule2.next = &rule3;
     36e:	23 e0       	ldi	r18, 0x03	; 3
     370:	31 e0       	ldi	r19, 0x01	; 1
     372:	2c 0f       	add	r18, r28
     374:	3d 1f       	adc	r19, r29
     376:	15 96       	adiw	r26, 0x05	; 5
     378:	3c 93       	st	X, r19
     37a:	2e 93       	st	-X, r18
     37c:	14 97       	sbiw	r26, 0x04	; 4
    rule3.next = &rule4;
     37e:	69 e0       	ldi	r22, 0x09	; 9
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	6c 0f       	add	r22, r28
     384:	7d 1f       	adc	r23, r29
     386:	c9 5f       	subi	r28, 0xF9	; 249
     388:	de 4f       	sbci	r29, 0xFE	; 254
     38a:	79 83       	std	Y+1, r23	; 0x01
     38c:	68 83       	st	Y, r22
     38e:	c7 50       	subi	r28, 0x07	; 7
     390:	d1 40       	sbci	r29, 0x01	; 1
    rule4.next = &rule5;
     392:	ef e0       	ldi	r30, 0x0F	; 15
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	ec 0f       	add	r30, r28
     398:	fd 1f       	adc	r31, r29
     39a:	c3 5f       	subi	r28, 0xF3	; 243
     39c:	de 4f       	sbci	r29, 0xFE	; 254
     39e:	f9 83       	std	Y+1, r31	; 0x01
     3a0:	e8 83       	st	Y, r30
     3a2:	cd 50       	subi	r28, 0x0D	; 13
     3a4:	d1 40       	sbci	r29, 0x01	; 1
    rule5.next = &rule6;
     3a6:	2e 01       	movw	r4, r28
     3a8:	fb ee       	ldi	r31, 0xEB	; 235
     3aa:	4f 1a       	sub	r4, r31
     3ac:	fe ef       	ldi	r31, 0xFE	; 254
     3ae:	5f 0a       	sbc	r5, r31
     3b0:	cd 5e       	subi	r28, 0xED	; 237
     3b2:	de 4f       	sbci	r29, 0xFE	; 254
     3b4:	59 82       	std	Y+1, r5	; 0x01
     3b6:	48 82       	st	Y, r4
     3b8:	c3 51       	subi	r28, 0x13	; 19
     3ba:	d1 40       	sbci	r29, 0x01	; 1
    rule6.next = &rule7;
     3bc:	8e 01       	movw	r16, r28
     3be:	05 5e       	subi	r16, 0xE5	; 229
     3c0:	1e 4f       	sbci	r17, 0xFE	; 254
     3c2:	f2 01       	movw	r30, r4
     3c4:	15 83       	std	Z+5, r17	; 0x05
     3c6:	04 83       	std	Z+4, r16	; 0x04
    rule7.next = &rule8;
     3c8:	7e 01       	movw	r14, r28
     3ca:	ff ed       	ldi	r31, 0xDF	; 223
     3cc:	ef 1a       	sub	r14, r31
     3ce:	fe ef       	ldi	r31, 0xFE	; 254
     3d0:	ff 0a       	sbc	r15, r31
     3d2:	f8 01       	movw	r30, r16
     3d4:	f5 82       	std	Z+5, r15	; 0x05
     3d6:	e4 82       	std	Z+4, r14	; 0x04
    rule8.next = &rule9;
     3d8:	1e 01       	movw	r2, r28
     3da:	f9 ed       	ldi	r31, 0xD9	; 217
     3dc:	2f 1a       	sub	r2, r31
     3de:	fe ef       	ldi	r31, 0xFE	; 254
     3e0:	3f 0a       	sbc	r3, r31
     3e2:	f7 01       	movw	r30, r14
     3e4:	35 82       	std	Z+5, r3	; 0x05
     3e6:	24 82       	std	Z+4, r2	; 0x04
    rule9.next = NULL;
     3e8:	f1 01       	movw	r30, r2
     3ea:	15 82       	std	Z+5, r1	; 0x05
     3ec:	14 82       	std	Z+4, r1	; 0x04
    
    // 3. Declaration of rule_element_types
    
    struct rule_element_type if11, if12, then1;
    rule1.if_side = &if11; if11.next = &if12; if12.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     3ee:	5e 01       	movw	r10, r28
     3f0:	f3 ed       	ldi	r31, 0xD3	; 211
     3f2:	af 1a       	sub	r10, r31
     3f4:	fe ef       	ldi	r31, 0xFE	; 254
     3f6:	bf 0a       	sbc	r11, r31
     3f8:	fc 01       	movw	r30, r24
     3fa:	b1 82       	std	Z+1, r11	; 0x01
     3fc:	a0 82       	st	Z, r10
     3fe:	ae 01       	movw	r20, r28
     400:	4f 5c       	subi	r20, 0xCF	; 207
     402:	5e 4f       	sbci	r21, 0xFE	; 254
     404:	f5 01       	movw	r30, r10
     406:	53 83       	std	Z+3, r21	; 0x03
     408:	42 83       	std	Z+2, r20	; 0x02
     40a:	fa 01       	movw	r30, r20
     40c:	13 82       	std	Z+3, r1	; 0x03
     40e:	12 82       	std	Z+2, r1	; 0x02
     410:	2e 5c       	subi	r18, 0xCE	; 206
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	fc 01       	movw	r30, r24
     416:	33 83       	std	Z+3, r19	; 0x03
     418:	22 83       	std	Z+2, r18	; 0x02
     41a:	f9 01       	movw	r30, r18
     41c:	13 82       	std	Z+3, r1	; 0x03
     41e:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &smallR.value; if12.value = &smallF.value; then1.value = &right.value;
     420:	6c 59       	subi	r22, 0x9C	; 156
     422:	71 09       	sbc	r23, r1
     424:	f5 01       	movw	r30, r10
     426:	71 83       	std	Z+1, r23	; 0x01
     428:	60 83       	st	Z, r22
     42a:	5e 01       	movw	r10, r28
     42c:	fb e1       	ldi	r31, 0x1B	; 27
     42e:	af 0e       	add	r10, r31
     430:	b1 1c       	adc	r11, r1
     432:	fa 01       	movw	r30, r20
     434:	b1 82       	std	Z+1, r11	; 0x01
     436:	a0 82       	st	Z, r10
     438:	c8 97       	sbiw	r24, 0x38	; 56
     43a:	f9 01       	movw	r30, r18
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
    
    struct rule_element_type if21, if22, then2;
    rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     440:	48 5f       	subi	r20, 0xF8	; 248
     442:	5f 4f       	sbci	r21, 0xFF	; 255
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	5c 93       	st	X, r21
     448:	4e 93       	st	-X, r20
     44a:	6e 01       	movw	r12, r28
     44c:	f3 ec       	ldi	r31, 0xC3	; 195
     44e:	cf 1a       	sub	r12, r31
     450:	fe ef       	ldi	r31, 0xFE	; 254
     452:	df 0a       	sbc	r13, r31
     454:	fa 01       	movw	r30, r20
     456:	d3 82       	std	Z+3, r13	; 0x03
     458:	c2 82       	std	Z+2, r12	; 0x02
     45a:	f6 01       	movw	r30, r12
     45c:	13 82       	std	Z+3, r1	; 0x03
     45e:	12 82       	std	Z+2, r1	; 0x02
     460:	24 5f       	subi	r18, 0xF4	; 244
     462:	3f 4f       	sbci	r19, 0xFF	; 255
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	3c 93       	st	X, r19
     468:	2e 93       	st	-X, r18
     46a:	12 97       	sbiw	r26, 0x02	; 2
     46c:	f9 01       	movw	r30, r18
     46e:	13 82       	std	Z+3, r1	; 0x03
     470:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &smallR.value; if22.value = &mediumF.value; then2.value = &right.value;
     472:	fa 01       	movw	r30, r20
     474:	71 83       	std	Z+1, r23	; 0x01
     476:	60 83       	st	Z, r22
     478:	48 50       	subi	r20, 0x08	; 8
     47a:	51 40       	sbci	r21, 0x01	; 1
     47c:	f6 01       	movw	r30, r12
     47e:	51 83       	std	Z+1, r21	; 0x01
     480:	40 83       	st	Z, r20
     482:	f9 01       	movw	r30, r18
     484:	91 83       	std	Z+1, r25	; 0x01
     486:	80 83       	st	Z, r24
    
    struct rule_element_type if31, if32, then3;
    rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     488:	2c 5f       	subi	r18, 0xFC	; 252
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	cd 5f       	subi	r28, 0xFD	; 253
     48e:	de 4f       	sbci	r29, 0xFE	; 254
     490:	39 83       	std	Y+1, r19	; 0x01
     492:	28 83       	st	Y, r18
     494:	c3 50       	subi	r28, 0x03	; 3
     496:	d1 40       	sbci	r29, 0x01	; 1
     498:	6e 01       	movw	r12, r28
     49a:	f7 eb       	ldi	r31, 0xB7	; 183
     49c:	cf 1a       	sub	r12, r31
     49e:	fe ef       	ldi	r31, 0xFE	; 254
     4a0:	df 0a       	sbc	r13, r31
     4a2:	f9 01       	movw	r30, r18
     4a4:	d3 82       	std	Z+3, r13	; 0x03
     4a6:	c2 82       	std	Z+2, r12	; 0x02
     4a8:	f6 01       	movw	r30, r12
     4aa:	13 82       	std	Z+3, r1	; 0x03
     4ac:	12 82       	std	Z+2, r1	; 0x02
     4ae:	a0 5b       	subi	r26, 0xB0	; 176
     4b0:	bf 4f       	sbci	r27, 0xFF	; 255
     4b2:	cb 5f       	subi	r28, 0xFB	; 251
     4b4:	de 4f       	sbci	r29, 0xFE	; 254
     4b6:	b9 83       	std	Y+1, r27	; 0x01
     4b8:	a8 83       	st	Y, r26
     4ba:	c5 50       	subi	r28, 0x05	; 5
     4bc:	d1 40       	sbci	r29, 0x01	; 1
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	1c 92       	st	X, r1
     4c2:	1e 92       	st	-X, r1
     4c4:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &smallR.value; if32.value = &bigF.value; then3.value = &straight.value;
     4c6:	f9 01       	movw	r30, r18
     4c8:	71 83       	std	Z+1, r23	; 0x01
     4ca:	60 83       	st	Z, r22
     4cc:	2e 5f       	subi	r18, 0xFE	; 254
     4ce:	31 09       	sbc	r19, r1
     4d0:	f6 01       	movw	r30, r12
     4d2:	31 83       	std	Z+1, r19	; 0x01
     4d4:	20 83       	st	Z, r18
     4d6:	68 59       	subi	r22, 0x98	; 152
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	c7 56       	subi	r28, 0x67	; 103
     4dc:	de 4f       	sbci	r29, 0xFE	; 254
     4de:	79 83       	std	Y+1, r23	; 0x01
     4e0:	68 83       	st	Y, r22
     4e2:	c9 59       	subi	r28, 0x99	; 153
     4e4:	d1 40       	sbci	r29, 0x01	; 1
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	7c 93       	st	X, r23
     4ea:	6e 93       	st	-X, r22
    
    struct rule_element_type if41, if42, then4;
    rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     4ec:	6e 01       	movw	r12, r28
     4ee:	7f ea       	ldi	r23, 0xAF	; 175
     4f0:	c7 1a       	sub	r12, r23
     4f2:	7e ef       	ldi	r23, 0xFE	; 254
     4f4:	d7 0a       	sbc	r13, r23
     4f6:	c7 5f       	subi	r28, 0xF7	; 247
     4f8:	de 4f       	sbci	r29, 0xFE	; 254
     4fa:	d9 82       	std	Y+1, r13	; 0x01
     4fc:	c8 82       	st	Y, r12
     4fe:	c9 50       	subi	r28, 0x09	; 9
     500:	d1 40       	sbci	r29, 0x01	; 1
     502:	18 96       	adiw	r26, 0x08	; 8
     504:	f6 01       	movw	r30, r12
     506:	b3 83       	std	Z+3, r27	; 0x03
     508:	a2 83       	std	Z+2, r26	; 0x02
     50a:	13 96       	adiw	r26, 0x03	; 3
     50c:	1c 92       	st	X, r1
     50e:	1e 92       	st	-X, r1
     510:	12 97       	sbiw	r26, 0x02	; 2
     512:	4e 01       	movw	r8, r28
     514:	f7 ea       	ldi	r31, 0xA7	; 167
     516:	8f 1a       	sub	r8, r31
     518:	fe ef       	ldi	r31, 0xFE	; 254
     51a:	9f 0a       	sbc	r9, r31
     51c:	c5 5f       	subi	r28, 0xF5	; 245
     51e:	de 4f       	sbci	r29, 0xFE	; 254
     520:	99 82       	std	Y+1, r9	; 0x01
     522:	88 82       	st	Y, r8
     524:	cb 50       	subi	r28, 0x0B	; 11
     526:	d1 40       	sbci	r29, 0x01	; 1
     528:	f4 01       	movw	r30, r8
     52a:	13 82       	std	Z+3, r1	; 0x03
     52c:	12 82       	std	Z+2, r1	; 0x02
    if41.value = &mediumR.value; if42.value = &smallF.value; then4.value = &left.value;
     52e:	62 55       	subi	r22, 0x52	; 82
     530:	71 09       	sbc	r23, r1
     532:	f6 01       	movw	r30, r12
     534:	71 83       	std	Z+1, r23	; 0x01
     536:	60 83       	st	Z, r22
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	bc 92       	st	X, r11
     53c:	ae 92       	st	-X, r10
     53e:	fa e0       	ldi	r31, 0x0A	; 10
     540:	6f 0e       	add	r6, r31
     542:	71 1c       	adc	r7, r1
     544:	f4 01       	movw	r30, r8
     546:	71 82       	std	Z+1, r7	; 0x01
     548:	60 82       	st	Z, r6
    
    struct rule_element_type if51, if52, then5;
    rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     54a:	6e 01       	movw	r12, r28
     54c:	f3 ea       	ldi	r31, 0xA3	; 163
     54e:	cf 1a       	sub	r12, r31
     550:	fe ef       	ldi	r31, 0xFE	; 254
     552:	df 0a       	sbc	r13, r31
     554:	c1 5f       	subi	r28, 0xF1	; 241
     556:	de 4f       	sbci	r29, 0xFE	; 254
     558:	d9 82       	std	Y+1, r13	; 0x01
     55a:	c8 82       	st	Y, r12
     55c:	cf 50       	subi	r28, 0x0F	; 15
     55e:	d1 40       	sbci	r29, 0x01	; 1
     560:	1c 96       	adiw	r26, 0x0c	; 12
     562:	f6 01       	movw	r30, r12
     564:	b3 83       	std	Z+3, r27	; 0x03
     566:	a2 83       	std	Z+2, r26	; 0x02
     568:	13 96       	adiw	r26, 0x03	; 3
     56a:	1c 92       	st	X, r1
     56c:	1e 92       	st	-X, r1
     56e:	12 97       	sbiw	r26, 0x02	; 2
     570:	4e 01       	movw	r8, r28
     572:	fb e9       	ldi	r31, 0x9B	; 155
     574:	8f 1a       	sub	r8, r31
     576:	fe ef       	ldi	r31, 0xFE	; 254
     578:	9f 0a       	sbc	r9, r31
     57a:	cf 5e       	subi	r28, 0xEF	; 239
     57c:	de 4f       	sbci	r29, 0xFE	; 254
     57e:	99 82       	std	Y+1, r9	; 0x01
     580:	88 82       	st	Y, r8
     582:	c1 51       	subi	r28, 0x11	; 17
     584:	d1 40       	sbci	r29, 0x01	; 1
     586:	f4 01       	movw	r30, r8
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	12 82       	std	Z+2, r1	; 0x02
    if51.value = &mediumR.value; if52.value = &mediumF.value; then5.value = &right.value;
     58c:	f6 01       	movw	r30, r12
     58e:	71 83       	std	Z+1, r23	; 0x01
     590:	60 83       	st	Z, r22
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	5c 93       	st	X, r21
     596:	4e 93       	st	-X, r20
     598:	f4 01       	movw	r30, r8
     59a:	91 83       	std	Z+1, r25	; 0x01
     59c:	80 83       	st	Z, r24
    
    struct rule_element_type if61, if62, then6;
    rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     59e:	6e 01       	movw	r12, r28
     5a0:	f7 e9       	ldi	r31, 0x97	; 151
     5a2:	cf 1a       	sub	r12, r31
     5a4:	fe ef       	ldi	r31, 0xFE	; 254
     5a6:	df 0a       	sbc	r13, r31
     5a8:	f2 01       	movw	r30, r4
     5aa:	d1 82       	std	Z+1, r13	; 0x01
     5ac:	c0 82       	st	Z, r12
     5ae:	1c 96       	adiw	r26, 0x0c	; 12
     5b0:	f6 01       	movw	r30, r12
     5b2:	b3 83       	std	Z+3, r27	; 0x03
     5b4:	a2 83       	std	Z+2, r26	; 0x02
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	1c 92       	st	X, r1
     5ba:	1e 92       	st	-X, r1
     5bc:	12 97       	sbiw	r26, 0x02	; 2
     5be:	0f 2e       	mov	r0, r31
     5c0:	f1 e7       	ldi	r31, 0x71	; 113
     5c2:	8f 2e       	mov	r8, r31
     5c4:	99 24       	eor	r9, r9
     5c6:	93 94       	inc	r9
     5c8:	f0 2d       	mov	r31, r0
     5ca:	8c 0e       	add	r8, r28
     5cc:	9d 1e       	adc	r9, r29
     5ce:	f2 01       	movw	r30, r4
     5d0:	93 82       	std	Z+3, r9	; 0x03
     5d2:	82 82       	std	Z+2, r8	; 0x02
     5d4:	cd 58       	subi	r28, 0x8D	; 141
     5d6:	de 4f       	sbci	r29, 0xFE	; 254
     5d8:	19 82       	std	Y+1, r1	; 0x01
     5da:	18 82       	st	Y, r1
     5dc:	c3 57       	subi	r28, 0x73	; 115
     5de:	d1 40       	sbci	r29, 0x01	; 1
    if61.value = &mediumR.value; if62.value = &bigF.value; then6.value = &straight.value;
     5e0:	f6 01       	movw	r30, r12
     5e2:	71 83       	std	Z+1, r23	; 0x01
     5e4:	60 83       	st	Z, r22
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	3c 93       	st	X, r19
     5ea:	2e 93       	st	-X, r18
     5ec:	c7 56       	subi	r28, 0x67	; 103
     5ee:	de 4f       	sbci	r29, 0xFE	; 254
     5f0:	88 80       	ld	r8, Y
     5f2:	99 80       	ldd	r9, Y+1	; 0x01
     5f4:	c9 59       	subi	r28, 0x99	; 153
     5f6:	d1 40       	sbci	r29, 0x01	; 1
     5f8:	cf 58       	subi	r28, 0x8F	; 143
     5fa:	de 4f       	sbci	r29, 0xFE	; 254
     5fc:	99 82       	std	Y+1, r9	; 0x01
     5fe:	88 82       	st	Y, r8
     600:	c1 57       	subi	r28, 0x71	; 113
     602:	d1 40       	sbci	r29, 0x01	; 1
    
    struct rule_element_type if71, if72, then7;
    rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     604:	6e 50       	subi	r22, 0x0E	; 14
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	f8 01       	movw	r30, r16
     60a:	71 83       	std	Z+1, r23	; 0x01
     60c:	60 83       	st	Z, r22
     60e:	1c 96       	adiw	r26, 0x0c	; 12
     610:	fb 01       	movw	r30, r22
     612:	b3 83       	std	Z+3, r27	; 0x03
     614:	a2 83       	std	Z+2, r26	; 0x02
     616:	13 96       	adiw	r26, 0x03	; 3
     618:	1c 92       	st	X, r1
     61a:	1e 92       	st	-X, r1
     61c:	12 97       	sbiw	r26, 0x02	; 2
     61e:	6e 01       	movw	r12, r28
     620:	f3 e8       	ldi	r31, 0x83	; 131
     622:	cf 1a       	sub	r12, r31
     624:	fe ef       	ldi	r31, 0xFE	; 254
     626:	df 0a       	sbc	r13, r31
     628:	f8 01       	movw	r30, r16
     62a:	d3 82       	std	Z+3, r13	; 0x03
     62c:	c2 82       	std	Z+2, r12	; 0x02
     62e:	f6 01       	movw	r30, r12
     630:	13 82       	std	Z+3, r1	; 0x03
     632:	12 82       	std	Z+2, r1	; 0x02
    if71.value = &bigR.value; if72.value = &smallF.value; then7.value = &left.value;
     634:	02 58       	subi	r16, 0x82	; 130
     636:	11 09       	sbc	r17, r1
     638:	fb 01       	movw	r30, r22
     63a:	11 83       	std	Z+1, r17	; 0x01
     63c:	00 83       	st	Z, r16
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	bc 92       	st	X, r11
     642:	ae 92       	st	-X, r10
     644:	f6 01       	movw	r30, r12
     646:	71 82       	std	Z+1, r7	; 0x01
     648:	60 82       	st	Z, r6
    
    struct rule_element_type if81, if82, then8;
    rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     64a:	64 5f       	subi	r22, 0xF4	; 244
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	f7 01       	movw	r30, r14
     650:	71 83       	std	Z+1, r23	; 0x01
     652:	60 83       	st	Z, r22
     654:	1c 96       	adiw	r26, 0x0c	; 12
     656:	fb 01       	movw	r30, r22
     658:	b3 83       	std	Z+3, r27	; 0x03
     65a:	a2 83       	std	Z+2, r26	; 0x02
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	1c 92       	st	X, r1
     660:	1e 92       	st	-X, r1
     662:	12 97       	sbiw	r26, 0x02	; 2
     664:	6e 01       	movw	r12, r28
     666:	f7 e7       	ldi	r31, 0x77	; 119
     668:	cf 1a       	sub	r12, r31
     66a:	fe ef       	ldi	r31, 0xFE	; 254
     66c:	df 0a       	sbc	r13, r31
     66e:	f7 01       	movw	r30, r14
     670:	d3 82       	std	Z+3, r13	; 0x03
     672:	c2 82       	std	Z+2, r12	; 0x02
     674:	f6 01       	movw	r30, r12
     676:	13 82       	std	Z+3, r1	; 0x03
     678:	12 82       	std	Z+2, r1	; 0x02
    if81.value = &bigR.value; if82.value = &mediumF.value; then8.value = &right.value;
     67a:	fb 01       	movw	r30, r22
     67c:	11 83       	std	Z+1, r17	; 0x01
     67e:	00 83       	st	Z, r16
     680:	11 96       	adiw	r26, 0x01	; 1
     682:	5c 93       	st	X, r21
     684:	4e 93       	st	-X, r20
     686:	f6 01       	movw	r30, r12
     688:	91 83       	std	Z+1, r25	; 0x01
     68a:	80 83       	st	Z, r24
    
    struct rule_element_type if91, if92, then9;
    rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     68c:	44 5a       	subi	r20, 0xA4	; 164
     68e:	5e 4f       	sbci	r21, 0xFE	; 254
     690:	f1 01       	movw	r30, r2
     692:	51 83       	std	Z+1, r21	; 0x01
     694:	40 83       	st	Z, r20
     696:	1c 96       	adiw	r26, 0x0c	; 12
     698:	fa 01       	movw	r30, r20
     69a:	b3 83       	std	Z+3, r27	; 0x03
     69c:	a2 83       	std	Z+2, r26	; 0x02
     69e:	13 96       	adiw	r26, 0x03	; 3
     6a0:	1c 92       	st	X, r1
     6a2:	1e 92       	st	-X, r1
     6a4:	12 97       	sbiw	r26, 0x02	; 2
     6a6:	6c 5e       	subi	r22, 0xEC	; 236
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	f1 01       	movw	r30, r2
     6ac:	73 83       	std	Z+3, r23	; 0x03
     6ae:	62 83       	std	Z+2, r22	; 0x02
     6b0:	fb 01       	movw	r30, r22
     6b2:	13 82       	std	Z+3, r1	; 0x03
     6b4:	12 82       	std	Z+2, r1	; 0x02
    if91.value = &bigR.value; if92.value = &bigF.value; then9.value = &right.value;
     6b6:	fa 01       	movw	r30, r20
     6b8:	11 83       	std	Z+1, r17	; 0x01
     6ba:	00 83       	st	Z, r16
     6bc:	2d 93       	st	X+, r18
     6be:	3c 93       	st	X, r19
     6c0:	fb 01       	movw	r30, r22
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	80 83       	st	Z, r24
    
    
    // the methods performing the FLC
    fuzzification();
     6c6:	9f d0       	rcall	.+318    	; 0x806 <fuzzification>
    rule_evaluation();
     6c8:	c5 d0       	rcall	.+394    	; 0x854 <rule_evaluation>
    defuzzification();
     6ca:	0a d1       	rcall	.+532    	; 0x8e0 <defuzzification>
    
    
    
    
    
}
     6cc:	c6 56       	subi	r28, 0x66	; 102
     6ce:	de 4f       	sbci	r29, 0xFE	; 254
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret

00000700 <fuzzy_parking>:




void fuzzy_parking(int sonicRight, int sonicForward, int speedCount)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	8c 01       	movw	r16, r24
     70a:	eb 01       	movw	r28, r22
    
    if (sonicForward >50)
     70c:	63 33       	cpi	r22, 0x33	; 51
     70e:	71 05       	cpc	r23, r1
     710:	1c f0       	brlt	.+6      	; 0x718 <fuzzy_parking+0x18>
    {
		setESC(2800);
     712:	80 ef       	ldi	r24, 0xF0	; 240
     714:	9a e0       	ldi	r25, 0x0A	; 10
     716:	79 d2       	rcall	.+1266   	; 0xc0a <setESC>
    }
	if (sonicForward<10)
     718:	ca 30       	cpi	r28, 0x0A	; 10
     71a:	d1 05       	cpc	r29, r1
     71c:	1c f4       	brge	.+6      	; 0x724 <fuzzy_parking+0x24>
	{
		setESC(2720);
     71e:	80 ea       	ldi	r24, 0xA0	; 160
     720:	9a e0       	ldi	r25, 0x0A	; 10
     722:	73 d2       	rcall	.+1254   	; 0xc0a <setESC>
	}
    
    if (readyToPark == 0)
     724:	20 91 4e 01 	lds	r18, 0x014E
     728:	30 91 4f 01 	lds	r19, 0x014F
     72c:	23 2b       	or	r18, r19
     72e:	19 f4       	brne	.+6      	; 0x736 <fuzzy_parking+0x36>
    {
        gettingReady(sonicRight, sonicForward);
     730:	be 01       	movw	r22, r28
     732:	c8 01       	movw	r24, r16
     734:	ca dc       	rcall	.-1644   	; 0xca <gettingReady>
        
    }
    
    
    
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     740:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     742:	84 85       	ldd	r24, Z+12	; 0x0c
     744:	95 85       	ldd	r25, Z+13	; 0x0d
     746:	9b 01       	movw	r18, r22
     748:	28 1b       	sub	r18, r24
     74a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     74c:	86 85       	ldd	r24, Z+14	; 0x0e
     74e:	97 85       	ldd	r25, Z+15	; 0x0f
     750:	86 1b       	sub	r24, r22
     752:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     754:	12 16       	cp	r1, r18
     756:	13 06       	cpc	r1, r19
     758:	f4 f4       	brge	.+60     	; 0x796 <compute_degree_of_membership+0x56>
     75a:	18 16       	cp	r1, r24
     75c:	19 06       	cpc	r1, r25
     75e:	f4 f4       	brge	.+60     	; 0x79c <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     760:	60 89       	ldd	r22, Z+16	; 0x10
     762:	71 89       	ldd	r23, Z+17	; 0x11
     764:	a2 89       	ldd	r26, Z+18	; 0x12
     766:	b3 89       	ldd	r27, Z+19	; 0x13
     768:	8a 9f       	mul	r24, r26
     76a:	a0 01       	movw	r20, r0
     76c:	8b 9f       	mul	r24, r27
     76e:	50 0d       	add	r21, r0
     770:	9a 9f       	mul	r25, r26
     772:	50 0d       	add	r21, r0
     774:	11 24       	eor	r1, r1
     776:	26 9f       	mul	r18, r22
     778:	c0 01       	movw	r24, r0
     77a:	27 9f       	mul	r18, r23
     77c:	90 0d       	add	r25, r0
     77e:	36 9f       	mul	r19, r22
     780:	90 0d       	add	r25, r0
     782:	11 24       	eor	r1, r1
     784:	48 17       	cp	r20, r24
     786:	59 07       	cpc	r21, r25
     788:	0c f4       	brge	.+2      	; 0x78c <compute_degree_of_membership+0x4c>
     78a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     78c:	8f 3f       	cpi	r24, 0xFF	; 255
     78e:	91 05       	cpc	r25, r1
     790:	09 f0       	breq	.+2      	; 0x794 <compute_degree_of_membership+0x54>
     792:	3c f4       	brge	.+14     	; 0x7a2 <compute_degree_of_membership+0x62>
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <compute_degree_of_membership+0x66>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     7a6:	93 87       	std	Z+11, r25	; 0x0b
     7a8:	82 87       	std	Z+10, r24	; 0x0a
     7aa:	08 95       	ret

000007ac <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     7b6:	c6 85       	ldd	r28, Z+14	; 0x0e
     7b8:	d7 85       	ldd	r29, Z+15	; 0x0f
     7ba:	84 85       	ldd	r24, Z+12	; 0x0c
     7bc:	95 85       	ldd	r25, Z+13	; 0x0d
     7be:	c8 1b       	sub	r28, r24
     7c0:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     7c2:	22 85       	ldd	r18, Z+10	; 0x0a
     7c4:	33 85       	ldd	r19, Z+11	; 0x0b
     7c6:	60 89       	ldd	r22, Z+16	; 0x10
     7c8:	71 89       	ldd	r23, Z+17	; 0x11
     7ca:	c9 01       	movw	r24, r18
     7cc:	5b d5       	rcall	.+2742   	; 0x1284 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     7ce:	8e 01       	movw	r16, r28
     7d0:	06 1b       	sub	r16, r22
     7d2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     7d4:	62 89       	ldd	r22, Z+18	; 0x12
     7d6:	73 89       	ldd	r23, Z+19	; 0x13
     7d8:	c9 01       	movw	r24, r18
     7da:	54 d5       	rcall	.+2728   	; 0x1284 <__divmodhi4>
    top = base - run_1 - run_2;
     7dc:	06 1b       	sub	r16, r22
     7de:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     7e0:	c0 0f       	add	r28, r16
     7e2:	d1 1f       	adc	r29, r17
     7e4:	2c 9f       	mul	r18, r28
     7e6:	c0 01       	movw	r24, r0
     7e8:	2d 9f       	mul	r18, r29
     7ea:	90 0d       	add	r25, r0
     7ec:	3c 9f       	mul	r19, r28
     7ee:	90 0d       	add	r25, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	99 23       	and	r25, r25
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <compute_area_of_trapezoid+0x4c>
     7f6:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     7f8:	95 95       	asr	r25
     7fa:	87 95       	ror	r24
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     80e:	00 91 6c 02 	lds	r16, 0x026C
     812:	10 91 6d 02 	lds	r17, 0x026D
     816:	01 15       	cp	r16, r1
     818:	11 05       	cpc	r17, r1
     81a:	b9 f0       	breq	.+46     	; 0x84a <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     81c:	f8 01       	movw	r30, r16
     81e:	c4 85       	ldd	r28, Z+12	; 0x0c
     820:	d5 85       	ldd	r29, Z+13	; 0x0d
     822:	20 97       	sbiw	r28, 0x00	; 0
     824:	61 f0       	breq	.+24     	; 0x83e <fuzzification+0x38>
            if (mf!=NULL) {
     826:	20 97       	sbiw	r28, 0x00	; 0
     828:	29 f0       	breq	.+10     	; 0x834 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     82a:	f8 01       	movw	r30, r16
     82c:	62 85       	ldd	r22, Z+10	; 0x0a
     82e:	73 85       	ldd	r23, Z+11	; 0x0b
     830:	ce 01       	movw	r24, r28
     832:	86 df       	rcall	.-244    	; 0x740 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     834:	0c 88       	ldd	r0, Y+20	; 0x14
     836:	dd 89       	ldd	r29, Y+21	; 0x15
     838:	c0 2d       	mov	r28, r0
     83a:	20 97       	sbiw	r28, 0x00	; 0
     83c:	a1 f7       	brne	.-24     	; 0x826 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     83e:	f8 01       	movw	r30, r16
     840:	06 85       	ldd	r16, Z+14	; 0x0e
     842:	17 85       	ldd	r17, Z+15	; 0x0f
     844:	01 15       	cp	r16, r1
     846:	11 05       	cpc	r17, r1
     848:	49 f7       	brne	.-46     	; 0x81c <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     85c:	c0 91 6e 02 	lds	r28, 0x026E
     860:	d0 91 6f 02 	lds	r29, 0x026F
     864:	20 97       	sbiw	r28, 0x00	; 0
     866:	b9 f1       	breq	.+110    	; 0x8d6 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     868:	00 e0       	ldi	r16, 0x00	; 0
     86a:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     86c:	e8 81       	ld	r30, Y
     86e:	f9 81       	ldd	r31, Y+1	; 0x01
     870:	30 97       	sbiw	r30, 0x00	; 0
     872:	81 f0       	breq	.+32     	; 0x894 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     874:	20 2f       	mov	r18, r16
     876:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     878:	a0 81       	ld	r26, Z
     87a:	b1 81       	ldd	r27, Z+1	; 0x01
     87c:	8d 91       	ld	r24, X+
     87e:	9c 91       	ld	r25, X
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	0c f4       	brge	.+2      	; 0x888 <rule_evaluation+0x34>
     886:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     888:	02 80       	ldd	r0, Z+2	; 0x02
     88a:	f3 81       	ldd	r31, Z+3	; 0x03
     88c:	e0 2d       	mov	r30, r0
     88e:	30 97       	sbiw	r30, 0x00	; 0
     890:	99 f7       	brne	.-26     	; 0x878 <rule_evaluation+0x24>
     892:	02 c0       	rjmp	.+4      	; 0x898 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     894:	20 2f       	mov	r18, r16
     896:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     898:	ea 81       	ldd	r30, Y+2	; 0x02
     89a:	fb 81       	ldd	r31, Y+3	; 0x03
     89c:	30 97       	sbiw	r30, 0x00	; 0
     89e:	b1 f0       	breq	.+44     	; 0x8cc <rule_evaluation+0x78>
     8a0:	72 2f       	mov	r23, r18
     8a2:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     8a4:	a0 81       	ld	r26, Z
     8a6:	b1 81       	ldd	r27, Z+1	; 0x01
     8a8:	8d 91       	ld	r24, X+
     8aa:	9c 91       	ld	r25, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	57 2f       	mov	r21, r23
     8b0:	46 2f       	mov	r20, r22
     8b2:	28 17       	cp	r18, r24
     8b4:	39 07       	cpc	r19, r25
     8b6:	14 f4       	brge	.+4      	; 0x8bc <rule_evaluation+0x68>
     8b8:	58 2f       	mov	r21, r24
     8ba:	49 2f       	mov	r20, r25
     8bc:	5c 93       	st	X, r21
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     8c2:	02 80       	ldd	r0, Z+2	; 0x02
     8c4:	f3 81       	ldd	r31, Z+3	; 0x03
     8c6:	e0 2d       	mov	r30, r0
     8c8:	30 97       	sbiw	r30, 0x00	; 0
     8ca:	61 f7       	brne	.-40     	; 0x8a4 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     8cc:	0c 80       	ldd	r0, Y+4	; 0x04
     8ce:	dd 81       	ldd	r29, Y+5	; 0x05
     8d0:	c0 2d       	mov	r28, r0
     8d2:	20 97       	sbiw	r28, 0x00	; 0
     8d4:	59 f6       	brne	.-106    	; 0x86c <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     8e0:	2f 92       	push	r2
     8e2:	3f 92       	push	r3
     8e4:	4f 92       	push	r4
     8e6:	5f 92       	push	r5
     8e8:	6f 92       	push	r6
     8ea:	7f 92       	push	r7
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <defuzzification+0x26>
     906:	00 d0       	rcall	.+0      	; 0x908 <defuzzification+0x28>
     908:	00 d0       	rcall	.+0      	; 0x90a <defuzzification+0x2a>
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     90e:	80 91 6a 02 	lds	r24, 0x026A
     912:	90 91 6b 02 	lds	r25, 0x026B
     916:	9c 83       	std	Y+4, r25	; 0x04
     918:	8b 83       	std	Y+3, r24	; 0x03
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <defuzzification+0x40>
     91e:	84 c0       	rjmp	.+264    	; 0xa28 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     920:	eb 81       	ldd	r30, Y+3	; 0x03
     922:	fc 81       	ldd	r31, Y+4	; 0x04
     924:	04 84       	ldd	r0, Z+12	; 0x0c
     926:	f5 85       	ldd	r31, Z+13	; 0x0d
     928:	e0 2d       	mov	r30, r0
     92a:	fe 83       	std	Y+6, r31	; 0x06
     92c:	ed 83       	std	Y+5, r30	; 0x05
     92e:	ef 2b       	or	r30, r31
     930:	09 f4       	brne	.+2      	; 0x934 <defuzzification+0x54>
     932:	66 c0       	rjmp	.+204    	; 0xa00 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     934:	51 2c       	mov	r5, r1
     936:	61 2c       	mov	r6, r1
     938:	71 2c       	mov	r7, r1
     93a:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     93c:	31 2c       	mov	r3, r1
     93e:	21 2c       	mov	r2, r1
     940:	19 82       	std	Y+1, r1	; 0x01
     942:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     944:	8d 81       	ldd	r24, Y+5	; 0x05
     946:	9e 81       	ldd	r25, Y+6	; 0x06
     948:	31 df       	rcall	.-414    	; 0x7ac <compute_area_of_trapezoid>
     94a:	bc 01       	movw	r22, r24
     94c:	88 27       	eor	r24, r24
     94e:	77 fd       	sbrc	r23, 7
     950:	80 95       	com	r24
     952:	98 2f       	mov	r25, r24
     954:	a8 d3       	rcall	.+1872   	; 0x10a6 <__floatsisf>
     956:	6b 01       	movw	r12, r22
     958:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     95a:	ed 81       	ldd	r30, Y+5	; 0x05
     95c:	fe 81       	ldd	r31, Y+6	; 0x06
     95e:	04 85       	ldd	r16, Z+12	; 0x0c
     960:	15 85       	ldd	r17, Z+13	; 0x0d
     962:	b8 01       	movw	r22, r16
     964:	88 27       	eor	r24, r24
     966:	77 fd       	sbrc	r23, 7
     968:	80 95       	com	r24
     96a:	98 2f       	mov	r25, r24
     96c:	9c d3       	rcall	.+1848   	; 0x10a6 <__floatsisf>
     96e:	4b 01       	movw	r8, r22
     970:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     972:	ed 81       	ldd	r30, Y+5	; 0x05
     974:	fe 81       	ldd	r31, Y+6	; 0x06
     976:	86 85       	ldd	r24, Z+14	; 0x0e
     978:	97 85       	ldd	r25, Z+15	; 0x0f
     97a:	80 1b       	sub	r24, r16
     97c:	91 0b       	sbc	r25, r17
     97e:	bc 01       	movw	r22, r24
     980:	12 f4       	brpl	.+4      	; 0x986 <defuzzification+0xa6>
     982:	6f 5f       	subi	r22, 0xFF	; 255
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	75 95       	asr	r23
     988:	67 95       	ror	r22
            centroid = centroid + intermed;
     98a:	88 27       	eor	r24, r24
     98c:	77 fd       	sbrc	r23, 7
     98e:	80 95       	com	r24
     990:	98 2f       	mov	r25, r24
     992:	89 d3       	rcall	.+1810   	; 0x10a6 <__floatsisf>
     994:	a5 01       	movw	r20, r10
     996:	94 01       	movw	r18, r8
     998:	87 d2       	rcall	.+1294   	; 0xea8 <__addsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0d d4       	rcall	.+2074   	; 0x11be <__mulsf3>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	63 2d       	mov	r22, r3
     9aa:	72 2d       	mov	r23, r2
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	7b d2       	rcall	.+1270   	; 0xea8 <__addsf3>
     9b2:	36 2e       	mov	r3, r22
     9b4:	27 2e       	mov	r2, r23
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     9ba:	a7 01       	movw	r20, r14
     9bc:	96 01       	movw	r18, r12
     9be:	65 2d       	mov	r22, r5
     9c0:	76 2d       	mov	r23, r6
     9c2:	87 2d       	mov	r24, r7
     9c4:	94 2d       	mov	r25, r4
     9c6:	70 d2       	rcall	.+1248   	; 0xea8 <__addsf3>
     9c8:	56 2e       	mov	r5, r22
     9ca:	67 2e       	mov	r6, r23
     9cc:	78 2e       	mov	r7, r24
     9ce:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     9d0:	ed 81       	ldd	r30, Y+5	; 0x05
     9d2:	fe 81       	ldd	r31, Y+6	; 0x06
     9d4:	04 88       	ldd	r0, Z+20	; 0x14
     9d6:	f5 89       	ldd	r31, Z+21	; 0x15
     9d8:	e0 2d       	mov	r30, r0
     9da:	fe 83       	std	Y+6, r31	; 0x06
     9dc:	ed 83       	std	Y+5, r30	; 0x05
     9de:	ef 2b       	or	r30, r31
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <defuzzification+0x104>
     9e2:	b0 cf       	rjmp	.-160    	; 0x944 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     9e4:	26 2f       	mov	r18, r22
     9e6:	37 2f       	mov	r19, r23
     9e8:	48 2f       	mov	r20, r24
     9ea:	59 2f       	mov	r21, r25
     9ec:	63 2d       	mov	r22, r3
     9ee:	72 2d       	mov	r23, r2
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	bd d2       	rcall	.+1402   	; 0xf70 <__divsf3>
     9f6:	26 2f       	mov	r18, r22
     9f8:	37 2f       	mov	r19, r23
     9fa:	48 2f       	mov	r20, r24
     9fc:	59 2f       	mov	r21, r25
     9fe:	04 c0       	rjmp	.+8      	; 0xa08 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     a08:	62 2f       	mov	r22, r18
     a0a:	73 2f       	mov	r23, r19
     a0c:	84 2f       	mov	r24, r20
     a0e:	95 2f       	mov	r25, r21
     a10:	17 d3       	rcall	.+1582   	; 0x1040 <__fixsfsi>
     a12:	eb 81       	ldd	r30, Y+3	; 0x03
     a14:	fc 81       	ldd	r31, Y+4	; 0x04
     a16:	73 87       	std	Z+11, r23	; 0x0b
     a18:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     a1a:	86 85       	ldd	r24, Z+14	; 0x0e
     a1c:	97 85       	ldd	r25, Z+15	; 0x0f
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	89 2b       	or	r24, r25
     a24:	09 f0       	breq	.+2      	; 0xa28 <defuzzification+0x148>
     a26:	7c cf       	rjmp	.-264    	; 0x920 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     a28:	26 96       	adiw	r28, 0x06	; 6
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	3f 90       	pop	r3
     a56:	2f 90       	pop	r2
     a58:	08 95       	ret

00000a5a <MATLAB_MF>:
/* This function takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format in general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
     a70:	6a 01       	movw	r12, r20
     a72:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     a74:	2e d4       	rcall	.+2140   	; 0x12d2 <strcpy>
    newMf->value = 0;
     a76:	1b 86       	std	Y+11, r1	; 0x0b
     a78:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     a7a:	dd 86       	std	Y+13, r13	; 0x0d
     a7c:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     a7e:	ff 86       	std	Y+15, r15	; 0x0f
     a80:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     a82:	b5 01       	movw	r22, r10
     a84:	6c 19       	sub	r22, r12
     a86:	7d 09       	sbc	r23, r13
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	31 e0       	ldi	r19, 0x01	; 1
     a8c:	c9 01       	movw	r24, r18
     a8e:	fa d3       	rcall	.+2036   	; 0x1284 <__divmodhi4>
     a90:	79 8b       	std	Y+17, r23	; 0x11
     a92:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     a94:	b7 01       	movw	r22, r14
     a96:	60 1b       	sub	r22, r16
     a98:	71 0b       	sbc	r23, r17
     a9a:	c9 01       	movw	r24, r18
     a9c:	f3 d3       	rcall	.+2022   	; 0x1284 <__divmodhi4>
     a9e:	7b 8b       	std	Y+19, r23	; 0x13
     aa0:	6a 8b       	std	Y+18, r22	; 0x12
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	08 95       	ret

00000ab8 <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	0b b6       	in	r0, 0x3b	; 59
     ac4:	0f 92       	push	r0
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31
     ace:	80 91 ce 00 	lds	r24, 0x00CE
     ad2:	8f 3f       	cpi	r24, 0xFF	; 255
     ad4:	29 f4       	brne	.+10     	; 0xae0 <__vector_28+0x28>
     ad6:	10 92 91 02 	sts	0x0291, r1
     ada:	10 92 90 02 	sts	0x0290, r1
     ade:	10 c0       	rjmp	.+32     	; 0xb00 <__vector_28+0x48>
     ae0:	e0 91 90 02 	lds	r30, 0x0290
     ae4:	f0 91 91 02 	lds	r31, 0x0291
     ae8:	e0 59       	subi	r30, 0x90	; 144
     aea:	fd 4f       	sbci	r31, 0xFD	; 253
     aec:	80 83       	st	Z, r24
     aee:	80 91 90 02 	lds	r24, 0x0290
     af2:	90 91 91 02 	lds	r25, 0x0291
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	90 93 91 02 	sts	0x0291, r25
     afc:	80 93 90 02 	sts	0x0290, r24
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	0f 90       	pop	r0
     b0a:	0b be       	out	0x3b, r0	; 59
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <carInit>:
     b16:	6a d0       	rcall	.+212    	; 0xbec <pwmInit>
     b18:	8d ec       	ldi	r24, 0xCD	; 205
     b1a:	9a e0       	ldi	r25, 0x0A	; 10
     b1c:	76 d0       	rcall	.+236    	; 0xc0a <setESC>
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	9a e0       	ldi	r25, 0x0A	; 10
     b22:	8e c0       	rjmp	.+284    	; 0xc40 <setServo>
     b24:	08 95       	ret

00000b26 <USART1_init>:
     b26:	ec ec       	ldi	r30, 0xCC	; 204
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	11 82       	std	Z+1, r1	; 0x01
     b2c:	10 82       	st	Z, r1
     b2e:	20 e9       	ldi	r18, 0x90	; 144
     b30:	20 93 c9 00 	sts	0x00C9, r18
     b34:	2e e0       	ldi	r18, 0x0E	; 14
     b36:	20 93 ca 00 	sts	0x00CA, r18
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	08 95       	ret

00000b40 <Sens_info_read>:
     b40:	dc 01       	movw	r26, r24
     b42:	e9 ec       	ldi	r30, 0xC9	; 201
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	80 83       	st	Z, r24
     b4c:	80 91 70 02 	lds	r24, 0x0270
     b50:	8c 93       	st	X, r24
     b52:	80 91 71 02 	lds	r24, 0x0271
     b56:	11 96       	adiw	r26, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	11 97       	sbiw	r26, 0x01	; 1
     b5c:	80 91 72 02 	lds	r24, 0x0272
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	8c 93       	st	X, r24
     b64:	10 92 91 02 	sts	0x0291, r1
     b68:	10 92 90 02 	sts	0x0290, r1
     b6c:	80 81       	ld	r24, Z
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
     b72:	08 95       	ret

00000b74 <main>:
	}

	/* main function
	*/
	int main (void)
	{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2a 97       	sbiw	r28, 0x0a	; 10
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
		
		// FOR TESTING
		//	FLC_obstacle(2800, 150);
		
		carInit();
     b88:	c6 df       	rcall	.-116    	; 0xb16 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8a:	2f ef       	ldi	r18, 0xFF	; 255
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	90 ee       	ldi	r25, 0xE0	; 224
     b90:	21 50       	subi	r18, 0x01	; 1
     b92:	80 40       	sbci	r24, 0x00	; 0
     b94:	90 40       	sbci	r25, 0x00	; 0
     b96:	e1 f7       	brne	.-8      	; 0xb90 <main+0x1c>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <main+0x26>
     b9a:	00 00       	nop
		_delay_ms(5000);
		setESC(2680);
     b9c:	88 e7       	ldi	r24, 0x78	; 120
     b9e:	9a e0       	ldi	r25, 0x0A	; 10
     ba0:	34 d0       	rcall	.+104    	; 0xc0a <setESC>
		
		
		sei();
     ba2:	78 94       	sei
		unsigned char control_mode;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	be df       	rcall	.-132    	; 0xb26 <USART1_init>
		
		cli();
		
		//FLC_obstacle(OCR1A, d);
		//FLC_steering(c, v);
		fuzzy_parking(c,v, OCR1A);
     baa:	08 e8       	ldi	r16, 0x88	; 136
     bac:	10 e0       	ldi	r17, 0x00	; 0
		
		//Sending back information
		unsigned int esc_value_to_send;
		esc_value_to_send = (unsigned) (short) OCR1A;
		unsigned int steering_value_to_send;
		steering_value_to_send = (unsigned) (short) OCR1B;
     bae:	0f 2e       	mov	r0, r31
     bb0:	fa e8       	ldi	r31, 0x8A	; 138
     bb2:	ef 2e       	mov	r14, r31
     bb4:	f1 2c       	mov	r15, r1
     bb6:	f0 2d       	mov	r31, r0
		//DDRA = 0xFF;
		//End of test setting
		
		while (1) {
		
		if (counter_UART1_reciever > 2) {
     bb8:	80 91 90 02 	lds	r24, 0x0290
     bbc:	90 91 91 02 	lds	r25, 0x0291
     bc0:	03 97       	sbiw	r24, 0x03	; 3
     bc2:	d4 f3       	brlt	.-12     	; 0xbb8 <main+0x44>
		
		//Reading Information
		//read_sensor_info(&control_mode, sens_info_ptr);
		Sens_info_read(sens_info_ptr);
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	bb df       	rcall	.-138    	; 0xb40 <Sens_info_read>
		
		c = (int) sensor_info.dist_right_line;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	90 e0       	ldi	r25, 0x00	; 0
		v = (int) sensor_info.angular_diff;
     bce:	6a 81       	ldd	r22, Y+2	; 0x02
     bd0:	70 e0       	ldi	r23, 0x00	; 0
		//d = (int) sensor_info.dist_sonic_middle;
		
		cli();
     bd2:	f8 94       	cli
		
		//FLC_obstacle(OCR1A, d);
		//FLC_steering(c, v);
		fuzzy_parking(c,v, OCR1A);
     bd4:	f8 01       	movw	r30, r16
     bd6:	40 81       	ld	r20, Z
     bd8:	51 81       	ldd	r21, Z+1	; 0x01
     bda:	92 dd       	rcall	.-1244   	; 0x700 <fuzzy_parking>
		sei();
     bdc:	78 94       	sei
		
		//Sending back information
		unsigned int esc_value_to_send;
		esc_value_to_send = (unsigned) (short) OCR1A;
     bde:	f8 01       	movw	r30, r16
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
		unsigned int steering_value_to_send;
		steering_value_to_send = (unsigned) (short) OCR1B;
     be4:	f7 01       	movw	r30, r14
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	e6 cf       	rjmp	.-52     	; 0xbb8 <main+0x44>

00000bec <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     bec:	80 e3       	ldi	r24, 0x30	; 48
     bee:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     bf0:	82 ea       	ldi	r24, 0xA2	; 162
     bf2:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	9f e8       	ldi	r25, 0x8F	; 143
     bfa:	90 93 87 00 	sts	0x0087, r25
     bfe:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     c02:	8a e1       	ldi	r24, 0x1A	; 26
     c04:	80 93 81 00 	sts	0x0081, r24
     c08:	08 95       	ret

00000c0a <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     c0a:	80 36       	cpi	r24, 0x60	; 96
     c0c:	2a e0       	ldi	r18, 0x0A	; 10
     c0e:	92 07       	cpc	r25, r18
     c10:	3c f4       	brge	.+14     	; 0xc20 <setESC+0x16>
	{
		OCR1A = MINESC;
     c12:	8f e5       	ldi	r24, 0x5F	; 95
     c14:	9a e0       	ldi	r25, 0x0A	; 10
     c16:	90 93 89 00 	sts	0x0089, r25
     c1a:	80 93 88 00 	sts	0x0088, r24
     c1e:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     c20:	8b 33       	cpi	r24, 0x3B	; 59
     c22:	2b e0       	ldi	r18, 0x0B	; 11
     c24:	92 07       	cpc	r25, r18
     c26:	3c f0       	brlt	.+14     	; 0xc36 <setESC+0x2c>
	{
		OCR1A = MAXESC;
     c28:	8b e3       	ldi	r24, 0x3B	; 59
     c2a:	9b e0       	ldi	r25, 0x0B	; 11
     c2c:	90 93 89 00 	sts	0x0089, r25
     c30:	80 93 88 00 	sts	0x0088, r24
     c34:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     c36:	90 93 89 00 	sts	0x0089, r25
     c3a:	80 93 88 00 	sts	0x0088, r24
     c3e:	08 95       	ret

00000c40 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     c40:	87 3e       	cpi	r24, 0xE7	; 231
     c42:	27 e0       	ldi	r18, 0x07	; 7
     c44:	92 07       	cpc	r25, r18
     c46:	3c f4       	brge	.+14     	; 0xc56 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     c48:	86 ee       	ldi	r24, 0xE6	; 230
     c4a:	97 e0       	ldi	r25, 0x07	; 7
     c4c:	90 93 8b 00 	sts	0x008B, r25
     c50:	80 93 8a 00 	sts	0x008A, r24
     c54:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     c56:	8f 33       	cpi	r24, 0x3F	; 63
     c58:	2c e0       	ldi	r18, 0x0C	; 12
     c5a:	92 07       	cpc	r25, r18
     c5c:	3c f0       	brlt	.+14     	; 0xc6c <setServo+0x2c>

		OCR1B = MAXLEFT;
     c5e:	8f e3       	ldi	r24, 0x3F	; 63
     c60:	9c e0       	ldi	r25, 0x0C	; 12
     c62:	90 93 8b 00 	sts	0x008B, r25
     c66:	80 93 8a 00 	sts	0x008A, r24
     c6a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     c6c:	90 93 8b 00 	sts	0x008B, r25
     c70:	80 93 8a 00 	sts	0x008A, r24
     c74:	08 95       	ret

00000c76 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	0b b6       	in	r0, 0x3b	; 59
     c82:	0f 92       	push	r0
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
     c94:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
     c96:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
     c98:	2d 3f       	cpi	r18, 0xFD	; 253
     c9a:	a9 f0       	breq	.+42     	; 0xcc6 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
     c9c:	ea ed       	ldi	r30, 0xDA	; 218
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	dc 01       	movw	r26, r24
     ca6:	a8 56       	subi	r26, 0x68	; 104
     ca8:	be 4f       	sbci	r27, 0xFE	; 254
     caa:	2c 93       	st	X, r18
		rx_spi.i_last++;
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
     cb2:	ec ed       	ldi	r30, 0xDC	; 220
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 50 01 	sts	0x0150, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
     cc6:	80 91 da 01 	lds	r24, 0x01DA
     cca:	90 91 db 01 	lds	r25, 0x01DB
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	21 f4       	brne	.+8      	; 0xcdc <__vector_19+0x66>
		
		rx_spi.i_last = 0;
     cd4:	10 92 db 01 	sts	0x01DB, r1
     cd8:	10 92 da 01 	sts	0x01DA, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
     cdc:	80 91 96 01 	lds	r24, 0x0196
     ce0:	90 91 97 01 	lds	r25, 0x0197
     ce4:	89 2b       	or	r24, r25
     ce6:	01 f1       	breq	.+64     	; 0xd28 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
     ce8:	e0 91 92 01 	lds	r30, 0x0192
     cec:	f0 91 93 01 	lds	r31, 0x0193
     cf0:	ee 5a       	subi	r30, 0xAE	; 174
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	80 81       	ld	r24, Z
     cf6:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
     cf8:	e2 e9       	ldi	r30, 0x92	; 146
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
     d06:	e6 e9       	ldi	r30, 0x96	; 150
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	20 81       	ld	r18, Z
     d0c:	31 81       	ldd	r19, Z+1	; 0x01
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	31 09       	sbc	r19, r1
     d12:	31 83       	std	Z+1, r19	; 0x01
     d14:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
     d16:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
     d18:	80 34       	cpi	r24, 0x40	; 64
     d1a:	91 05       	cpc	r25, r1
     d1c:	49 f4       	brne	.+18     	; 0xd30 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
     d1e:	10 92 93 01 	sts	0x0193, r1
     d22:	10 92 92 01 	sts	0x0192, r1
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
     d28:	8d ef       	ldi	r24, 0xFD	; 253
     d2a:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
     d2c:	10 92 51 01 	sts	0x0151, r1
		
	} 	
	

}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0b be       	out	0x3b, r0	; 59
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	0b b6       	in	r0, 0x3b	; 59
     d5a:	0f 92       	push	r0
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     d6e:	80 91 68 02 	lds	r24, 0x0268
     d72:	90 91 69 02 	lds	r25, 0x0269
     d76:	80 34       	cpi	r24, 0x40	; 64
     d78:	91 05       	cpc	r25, r1
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 9e 02 	sts	0x029E, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     d82:	80 91 c6 00 	lds	r24, 0x00C6
     d86:	16 c0       	rjmp	.+44     	; 0xdb4 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     d88:	80 34       	cpi	r24, 0x40	; 64
     d8a:	91 05       	cpc	r25, r1
     d8c:	e8 f4       	brcc	.+58     	; 0xdc8 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     d8e:	e6 e6       	ldi	r30, 0x66	; 102
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	40 91 c6 00 	lds	r20, 0x00C6
     d9a:	d9 01       	movw	r26, r18
     d9c:	ac 5d       	subi	r26, 0xDC	; 220
     d9e:	bd 4f       	sbci	r27, 0xFD	; 253
     da0:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	90 93 69 02 	sts	0x0269, r25
     db0:	80 93 68 02 	sts	0x0268, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     db4:	80 91 68 02 	lds	r24, 0x0268
     db8:	90 91 69 02 	lds	r25, 0x0269
     dbc:	80 34       	cpi	r24, 0x40	; 64
     dbe:	91 05       	cpc	r25, r1
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 9c 02 	sts	0x029C, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     dc8:	80 91 66 02 	lds	r24, 0x0266
     dcc:	90 91 67 02 	lds	r25, 0x0267
     dd0:	80 34       	cpi	r24, 0x40	; 64
     dd2:	91 05       	cpc	r25, r1
     dd4:	21 f4       	brne	.+8      	; 0xdde <__vector_20+0x90>
		rx_uart0.i_last = 0;
     dd6:	10 92 67 02 	sts	0x0267, r1
     dda:	10 92 66 02 	sts	0x0266, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 9b 02 	sts	0x029B, r24
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	0b be       	out	0x3b, r0	; 59
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <__vector_22>:




ISR(USART0_TX_vect)
{
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	0b b6       	in	r0, 0x3b	; 59
     e10:	0f 92       	push	r0
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     e1a:	80 91 22 02 	lds	r24, 0x0222
     e1e:	90 91 23 02 	lds	r25, 0x0223
     e22:	80 34       	cpi	r24, 0x40	; 64
     e24:	91 05       	cpc	r25, r1
     e26:	19 f4       	brne	.+6      	; 0xe2e <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     e28:	10 92 9a 02 	sts	0x029A, r1
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     e2e:	89 2b       	or	r24, r25
     e30:	b9 f0       	breq	.+46     	; 0xe60 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     e32:	e0 91 1e 02 	lds	r30, 0x021E
     e36:	f0 91 1f 02 	lds	r31, 0x021F
     e3a:	e2 52       	subi	r30, 0x22	; 34
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	80 81       	ld	r24, Z
     e40:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     e44:	ee e1       	ldi	r30, 0x1E	; 30
     e46:	f2 e0       	ldi	r31, 0x02	; 2
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     e52:	e2 e2       	ldi	r30, 0x22	; 34
     e54:	f2 e0       	ldi	r31, 0x02	; 2
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     e60:	80 91 1e 02 	lds	r24, 0x021E
     e64:	90 91 1f 02 	lds	r25, 0x021F
     e68:	80 34       	cpi	r24, 0x40	; 64
     e6a:	91 05       	cpc	r25, r1
     e6c:	21 f4       	brne	.+8      	; 0xe76 <__vector_22+0x72>
		tx_uart0.i_first = 0;
     e6e:	10 92 1f 02 	sts	0x021F, r1
     e72:	10 92 1e 02 	sts	0x021E, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     e76:	80 91 22 02 	lds	r24, 0x0222
     e7a:	90 91 23 02 	lds	r25, 0x0223
     e7e:	89 2b       	or	r24, r25
     e80:	39 f4       	brne	.+14     	; 0xe90 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     e82:	10 92 9d 02 	sts	0x029D, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     e86:	e1 ec       	ldi	r30, 0xC1	; 193
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__subsf3>:
     ea6:	50 58       	subi	r21, 0x80	; 128

00000ea8 <__addsf3>:
     ea8:	bb 27       	eor	r27, r27
     eaa:	aa 27       	eor	r26, r26
     eac:	0e d0       	rcall	.+28     	; 0xeca <__addsf3x>
     eae:	4d c1       	rjmp	.+666    	; 0x114a <__fp_round>
     eb0:	3e d1       	rcall	.+636    	; 0x112e <__fp_pscA>
     eb2:	30 f0       	brcs	.+12     	; 0xec0 <__addsf3+0x18>
     eb4:	43 d1       	rcall	.+646    	; 0x113c <__fp_pscB>
     eb6:	20 f0       	brcs	.+8      	; 0xec0 <__addsf3+0x18>
     eb8:	31 f4       	brne	.+12     	; 0xec6 <__addsf3+0x1e>
     eba:	9f 3f       	cpi	r25, 0xFF	; 255
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__addsf3+0x1a>
     ebe:	1e f4       	brtc	.+6      	; 0xec6 <__addsf3+0x1e>
     ec0:	33 c1       	rjmp	.+614    	; 0x1128 <__fp_nan>
     ec2:	0e f4       	brtc	.+2      	; 0xec6 <__addsf3+0x1e>
     ec4:	e0 95       	com	r30
     ec6:	e7 fb       	bst	r30, 7
     ec8:	29 c1       	rjmp	.+594    	; 0x111c <__fp_inf>

00000eca <__addsf3x>:
     eca:	e9 2f       	mov	r30, r25
     ecc:	4f d1       	rcall	.+670    	; 0x116c <__fp_split3>
     ece:	80 f3       	brcs	.-32     	; 0xeb0 <__addsf3+0x8>
     ed0:	ba 17       	cp	r27, r26
     ed2:	62 07       	cpc	r22, r18
     ed4:	73 07       	cpc	r23, r19
     ed6:	84 07       	cpc	r24, r20
     ed8:	95 07       	cpc	r25, r21
     eda:	18 f0       	brcs	.+6      	; 0xee2 <__addsf3x+0x18>
     edc:	71 f4       	brne	.+28     	; 0xefa <__addsf3x+0x30>
     ede:	9e f5       	brtc	.+102    	; 0xf46 <__addsf3x+0x7c>
     ee0:	67 c1       	rjmp	.+718    	; 0x11b0 <__fp_zero>
     ee2:	0e f4       	brtc	.+2      	; 0xee6 <__addsf3x+0x1c>
     ee4:	e0 95       	com	r30
     ee6:	0b 2e       	mov	r0, r27
     ee8:	ba 2f       	mov	r27, r26
     eea:	a0 2d       	mov	r26, r0
     eec:	0b 01       	movw	r0, r22
     eee:	b9 01       	movw	r22, r18
     ef0:	90 01       	movw	r18, r0
     ef2:	0c 01       	movw	r0, r24
     ef4:	ca 01       	movw	r24, r20
     ef6:	a0 01       	movw	r20, r0
     ef8:	11 24       	eor	r1, r1
     efa:	ff 27       	eor	r31, r31
     efc:	59 1b       	sub	r21, r25
     efe:	99 f0       	breq	.+38     	; 0xf26 <__addsf3x+0x5c>
     f00:	59 3f       	cpi	r21, 0xF9	; 249
     f02:	50 f4       	brcc	.+20     	; 0xf18 <__addsf3x+0x4e>
     f04:	50 3e       	cpi	r21, 0xE0	; 224
     f06:	68 f1       	brcs	.+90     	; 0xf62 <__addsf3x+0x98>
     f08:	1a 16       	cp	r1, r26
     f0a:	f0 40       	sbci	r31, 0x00	; 0
     f0c:	a2 2f       	mov	r26, r18
     f0e:	23 2f       	mov	r18, r19
     f10:	34 2f       	mov	r19, r20
     f12:	44 27       	eor	r20, r20
     f14:	58 5f       	subi	r21, 0xF8	; 248
     f16:	f3 cf       	rjmp	.-26     	; 0xefe <__addsf3x+0x34>
     f18:	46 95       	lsr	r20
     f1a:	37 95       	ror	r19
     f1c:	27 95       	ror	r18
     f1e:	a7 95       	ror	r26
     f20:	f0 40       	sbci	r31, 0x00	; 0
     f22:	53 95       	inc	r21
     f24:	c9 f7       	brne	.-14     	; 0xf18 <__addsf3x+0x4e>
     f26:	7e f4       	brtc	.+30     	; 0xf46 <__addsf3x+0x7c>
     f28:	1f 16       	cp	r1, r31
     f2a:	ba 0b       	sbc	r27, r26
     f2c:	62 0b       	sbc	r22, r18
     f2e:	73 0b       	sbc	r23, r19
     f30:	84 0b       	sbc	r24, r20
     f32:	ba f0       	brmi	.+46     	; 0xf62 <__addsf3x+0x98>
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	a1 f0       	breq	.+40     	; 0xf60 <__addsf3x+0x96>
     f38:	ff 0f       	add	r31, r31
     f3a:	bb 1f       	adc	r27, r27
     f3c:	66 1f       	adc	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	c2 f7       	brpl	.-16     	; 0xf34 <__addsf3x+0x6a>
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <__addsf3x+0x98>
     f46:	ba 0f       	add	r27, r26
     f48:	62 1f       	adc	r22, r18
     f4a:	73 1f       	adc	r23, r19
     f4c:	84 1f       	adc	r24, r20
     f4e:	48 f4       	brcc	.+18     	; 0xf62 <__addsf3x+0x98>
     f50:	87 95       	ror	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b7 95       	ror	r27
     f58:	f7 95       	ror	r31
     f5a:	9e 3f       	cpi	r25, 0xFE	; 254
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <__addsf3x+0x96>
     f5e:	b3 cf       	rjmp	.-154    	; 0xec6 <__addsf3+0x1e>
     f60:	93 95       	inc	r25
     f62:	88 0f       	add	r24, r24
     f64:	08 f0       	brcs	.+2      	; 0xf68 <__addsf3x+0x9e>
     f66:	99 27       	eor	r25, r25
     f68:	ee 0f       	add	r30, r30
     f6a:	97 95       	ror	r25
     f6c:	87 95       	ror	r24
     f6e:	08 95       	ret

00000f70 <__divsf3>:
     f70:	0c d0       	rcall	.+24     	; 0xf8a <__divsf3x>
     f72:	eb c0       	rjmp	.+470    	; 0x114a <__fp_round>
     f74:	e3 d0       	rcall	.+454    	; 0x113c <__fp_pscB>
     f76:	40 f0       	brcs	.+16     	; 0xf88 <__divsf3+0x18>
     f78:	da d0       	rcall	.+436    	; 0x112e <__fp_pscA>
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__divsf3+0x18>
     f7c:	21 f4       	brne	.+8      	; 0xf86 <__divsf3+0x16>
     f7e:	5f 3f       	cpi	r21, 0xFF	; 255
     f80:	19 f0       	breq	.+6      	; 0xf88 <__divsf3+0x18>
     f82:	cc c0       	rjmp	.+408    	; 0x111c <__fp_inf>
     f84:	51 11       	cpse	r21, r1
     f86:	15 c1       	rjmp	.+554    	; 0x11b2 <__fp_szero>
     f88:	cf c0       	rjmp	.+414    	; 0x1128 <__fp_nan>

00000f8a <__divsf3x>:
     f8a:	f0 d0       	rcall	.+480    	; 0x116c <__fp_split3>
     f8c:	98 f3       	brcs	.-26     	; 0xf74 <__divsf3+0x4>

00000f8e <__divsf3_pse>:
     f8e:	99 23       	and	r25, r25
     f90:	c9 f3       	breq	.-14     	; 0xf84 <__divsf3+0x14>
     f92:	55 23       	and	r21, r21
     f94:	b1 f3       	breq	.-20     	; 0xf82 <__divsf3+0x12>
     f96:	95 1b       	sub	r25, r21
     f98:	55 0b       	sbc	r21, r21
     f9a:	bb 27       	eor	r27, r27
     f9c:	aa 27       	eor	r26, r26
     f9e:	62 17       	cp	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	84 07       	cpc	r24, r20
     fa4:	38 f0       	brcs	.+14     	; 0xfb4 <__divsf3_pse+0x26>
     fa6:	9f 5f       	subi	r25, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	44 1f       	adc	r20, r20
     fb0:	aa 1f       	adc	r26, r26
     fb2:	a9 f3       	breq	.-22     	; 0xf9e <__divsf3_pse+0x10>
     fb4:	33 d0       	rcall	.+102    	; 0x101c <__divsf3_pse+0x8e>
     fb6:	0e 2e       	mov	r0, r30
     fb8:	3a f0       	brmi	.+14     	; 0xfc8 <__divsf3_pse+0x3a>
     fba:	e0 e8       	ldi	r30, 0x80	; 128
     fbc:	30 d0       	rcall	.+96     	; 0x101e <__divsf3_pse+0x90>
     fbe:	91 50       	subi	r25, 0x01	; 1
     fc0:	50 40       	sbci	r21, 0x00	; 0
     fc2:	e6 95       	lsr	r30
     fc4:	00 1c       	adc	r0, r0
     fc6:	ca f7       	brpl	.-14     	; 0xfba <__divsf3_pse+0x2c>
     fc8:	29 d0       	rcall	.+82     	; 0x101c <__divsf3_pse+0x8e>
     fca:	fe 2f       	mov	r31, r30
     fcc:	27 d0       	rcall	.+78     	; 0x101c <__divsf3_pse+0x8e>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	bb 1f       	adc	r27, r27
     fd6:	26 17       	cp	r18, r22
     fd8:	37 07       	cpc	r19, r23
     fda:	48 07       	cpc	r20, r24
     fdc:	ab 07       	cpc	r26, r27
     fde:	b0 e8       	ldi	r27, 0x80	; 128
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <__divsf3_pse+0x56>
     fe2:	bb 0b       	sbc	r27, r27
     fe4:	80 2d       	mov	r24, r0
     fe6:	bf 01       	movw	r22, r30
     fe8:	ff 27       	eor	r31, r31
     fea:	93 58       	subi	r25, 0x83	; 131
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	2a f0       	brmi	.+10     	; 0xffa <__divsf3_pse+0x6c>
     ff0:	9e 3f       	cpi	r25, 0xFE	; 254
     ff2:	51 05       	cpc	r21, r1
     ff4:	68 f0       	brcs	.+26     	; 0x1010 <__divsf3_pse+0x82>
     ff6:	92 c0       	rjmp	.+292    	; 0x111c <__fp_inf>
     ff8:	dc c0       	rjmp	.+440    	; 0x11b2 <__fp_szero>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	ec f3       	brlt	.-6      	; 0xff8 <__divsf3_pse+0x6a>
     ffe:	98 3e       	cpi	r25, 0xE8	; 232
    1000:	dc f3       	brlt	.-10     	; 0xff8 <__divsf3_pse+0x6a>
    1002:	86 95       	lsr	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	b7 95       	ror	r27
    100a:	f7 95       	ror	r31
    100c:	9f 5f       	subi	r25, 0xFF	; 255
    100e:	c9 f7       	brne	.-14     	; 0x1002 <__divsf3_pse+0x74>
    1010:	88 0f       	add	r24, r24
    1012:	91 1d       	adc	r25, r1
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret
    101c:	e1 e0       	ldi	r30, 0x01	; 1
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	bb 1f       	adc	r27, r27
    1026:	62 17       	cp	r22, r18
    1028:	73 07       	cpc	r23, r19
    102a:	84 07       	cpc	r24, r20
    102c:	ba 07       	cpc	r27, r26
    102e:	20 f0       	brcs	.+8      	; 0x1038 <__divsf3_pse+0xaa>
    1030:	62 1b       	sub	r22, r18
    1032:	73 0b       	sbc	r23, r19
    1034:	84 0b       	sbc	r24, r20
    1036:	ba 0b       	sbc	r27, r26
    1038:	ee 1f       	adc	r30, r30
    103a:	88 f7       	brcc	.-30     	; 0x101e <__divsf3_pse+0x90>
    103c:	e0 95       	com	r30
    103e:	08 95       	ret

00001040 <__fixsfsi>:
    1040:	04 d0       	rcall	.+8      	; 0x104a <__fixunssfsi>
    1042:	68 94       	set
    1044:	b1 11       	cpse	r27, r1
    1046:	b5 c0       	rjmp	.+362    	; 0x11b2 <__fp_szero>
    1048:	08 95       	ret

0000104a <__fixunssfsi>:
    104a:	98 d0       	rcall	.+304    	; 0x117c <__fp_splitA>
    104c:	88 f0       	brcs	.+34     	; 0x1070 <__fixunssfsi+0x26>
    104e:	9f 57       	subi	r25, 0x7F	; 127
    1050:	90 f0       	brcs	.+36     	; 0x1076 <__fixunssfsi+0x2c>
    1052:	b9 2f       	mov	r27, r25
    1054:	99 27       	eor	r25, r25
    1056:	b7 51       	subi	r27, 0x17	; 23
    1058:	a0 f0       	brcs	.+40     	; 0x1082 <__fixunssfsi+0x38>
    105a:	d1 f0       	breq	.+52     	; 0x1090 <__fixunssfsi+0x46>
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	1a f0       	brmi	.+6      	; 0x106c <__fixunssfsi+0x22>
    1066:	ba 95       	dec	r27
    1068:	c9 f7       	brne	.-14     	; 0x105c <__fixunssfsi+0x12>
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <__fixunssfsi+0x46>
    106c:	b1 30       	cpi	r27, 0x01	; 1
    106e:	81 f0       	breq	.+32     	; 0x1090 <__fixunssfsi+0x46>
    1070:	9f d0       	rcall	.+318    	; 0x11b0 <__fp_zero>
    1072:	b1 e0       	ldi	r27, 0x01	; 1
    1074:	08 95       	ret
    1076:	9c c0       	rjmp	.+312    	; 0x11b0 <__fp_zero>
    1078:	67 2f       	mov	r22, r23
    107a:	78 2f       	mov	r23, r24
    107c:	88 27       	eor	r24, r24
    107e:	b8 5f       	subi	r27, 0xF8	; 248
    1080:	39 f0       	breq	.+14     	; 0x1090 <__fixunssfsi+0x46>
    1082:	b9 3f       	cpi	r27, 0xF9	; 249
    1084:	cc f3       	brlt	.-14     	; 0x1078 <__fixunssfsi+0x2e>
    1086:	86 95       	lsr	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	b3 95       	inc	r27
    108e:	d9 f7       	brne	.-10     	; 0x1086 <__fixunssfsi+0x3c>
    1090:	3e f4       	brtc	.+14     	; 0x10a0 <__fixunssfsi+0x56>
    1092:	90 95       	com	r25
    1094:	80 95       	com	r24
    1096:	70 95       	com	r23
    1098:	61 95       	neg	r22
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	8f 4f       	sbci	r24, 0xFF	; 255
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	08 95       	ret

000010a2 <__floatunsisf>:
    10a2:	e8 94       	clt
    10a4:	09 c0       	rjmp	.+18     	; 0x10b8 <__floatsisf+0x12>

000010a6 <__floatsisf>:
    10a6:	97 fb       	bst	r25, 7
    10a8:	3e f4       	brtc	.+14     	; 0x10b8 <__floatsisf+0x12>
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	99 23       	and	r25, r25
    10ba:	a9 f0       	breq	.+42     	; 0x10e6 <__floatsisf+0x40>
    10bc:	f9 2f       	mov	r31, r25
    10be:	96 e9       	ldi	r25, 0x96	; 150
    10c0:	bb 27       	eor	r27, r27
    10c2:	93 95       	inc	r25
    10c4:	f6 95       	lsr	r31
    10c6:	87 95       	ror	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b7 95       	ror	r27
    10ce:	f1 11       	cpse	r31, r1
    10d0:	f8 cf       	rjmp	.-16     	; 0x10c2 <__floatsisf+0x1c>
    10d2:	fa f4       	brpl	.+62     	; 0x1112 <__floatsisf+0x6c>
    10d4:	bb 0f       	add	r27, r27
    10d6:	11 f4       	brne	.+4      	; 0x10dc <__floatsisf+0x36>
    10d8:	60 ff       	sbrs	r22, 0
    10da:	1b c0       	rjmp	.+54     	; 0x1112 <__floatsisf+0x6c>
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8f 4f       	sbci	r24, 0xFF	; 255
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <__floatsisf+0x6c>
    10e6:	88 23       	and	r24, r24
    10e8:	11 f0       	breq	.+4      	; 0x10ee <__floatsisf+0x48>
    10ea:	96 e9       	ldi	r25, 0x96	; 150
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <__floatsisf+0x6a>
    10ee:	77 23       	and	r23, r23
    10f0:	21 f0       	breq	.+8      	; 0x10fa <__floatsisf+0x54>
    10f2:	9e e8       	ldi	r25, 0x8E	; 142
    10f4:	87 2f       	mov	r24, r23
    10f6:	76 2f       	mov	r23, r22
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <__floatsisf+0x5e>
    10fa:	66 23       	and	r22, r22
    10fc:	71 f0       	breq	.+28     	; 0x111a <__floatsisf+0x74>
    10fe:	96 e8       	ldi	r25, 0x86	; 134
    1100:	86 2f       	mov	r24, r22
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	2a f0       	brmi	.+10     	; 0x1112 <__floatsisf+0x6c>
    1108:	9a 95       	dec	r25
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	da f7       	brpl	.-10     	; 0x1108 <__floatsisf+0x62>
    1112:	88 0f       	add	r24, r24
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret

0000111c <__fp_inf>:
    111c:	97 f9       	bld	r25, 7
    111e:	9f 67       	ori	r25, 0x7F	; 127
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	08 95       	ret

00001128 <__fp_nan>:
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	80 ec       	ldi	r24, 0xC0	; 192
    112c:	08 95       	ret

0000112e <__fp_pscA>:
    112e:	00 24       	eor	r0, r0
    1130:	0a 94       	dec	r0
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	18 06       	cpc	r1, r24
    1138:	09 06       	cpc	r0, r25
    113a:	08 95       	ret

0000113c <__fp_pscB>:
    113c:	00 24       	eor	r0, r0
    113e:	0a 94       	dec	r0
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	14 06       	cpc	r1, r20
    1146:	05 06       	cpc	r0, r21
    1148:	08 95       	ret

0000114a <__fp_round>:
    114a:	09 2e       	mov	r0, r25
    114c:	03 94       	inc	r0
    114e:	00 0c       	add	r0, r0
    1150:	11 f4       	brne	.+4      	; 0x1156 <__fp_round+0xc>
    1152:	88 23       	and	r24, r24
    1154:	52 f0       	brmi	.+20     	; 0x116a <__fp_round+0x20>
    1156:	bb 0f       	add	r27, r27
    1158:	40 f4       	brcc	.+16     	; 0x116a <__fp_round+0x20>
    115a:	bf 2b       	or	r27, r31
    115c:	11 f4       	brne	.+4      	; 0x1162 <__fp_round+0x18>
    115e:	60 ff       	sbrs	r22, 0
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__fp_round+0x20>
    1162:	6f 5f       	subi	r22, 0xFF	; 255
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__fp_split3>:
    116c:	57 fd       	sbrc	r21, 7
    116e:	90 58       	subi	r25, 0x80	; 128
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	59 f0       	breq	.+22     	; 0x118c <__fp_splitA+0x10>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	71 f0       	breq	.+28     	; 0x1196 <__fp_splitA+0x1a>
    117a:	47 95       	ror	r20

0000117c <__fp_splitA>:
    117c:	88 0f       	add	r24, r24
    117e:	97 fb       	bst	r25, 7
    1180:	99 1f       	adc	r25, r25
    1182:	61 f0       	breq	.+24     	; 0x119c <__fp_splitA+0x20>
    1184:	9f 3f       	cpi	r25, 0xFF	; 255
    1186:	79 f0       	breq	.+30     	; 0x11a6 <__fp_splitA+0x2a>
    1188:	87 95       	ror	r24
    118a:	08 95       	ret
    118c:	12 16       	cp	r1, r18
    118e:	13 06       	cpc	r1, r19
    1190:	14 06       	cpc	r1, r20
    1192:	55 1f       	adc	r21, r21
    1194:	f2 cf       	rjmp	.-28     	; 0x117a <__fp_split3+0xe>
    1196:	46 95       	lsr	r20
    1198:	f1 df       	rcall	.-30     	; 0x117c <__fp_splitA>
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <__fp_splitA+0x30>
    119c:	16 16       	cp	r1, r22
    119e:	17 06       	cpc	r1, r23
    11a0:	18 06       	cpc	r1, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	f1 cf       	rjmp	.-30     	; 0x1188 <__fp_splitA+0xc>
    11a6:	86 95       	lsr	r24
    11a8:	71 05       	cpc	r23, r1
    11aa:	61 05       	cpc	r22, r1
    11ac:	08 94       	sec
    11ae:	08 95       	ret

000011b0 <__fp_zero>:
    11b0:	e8 94       	clt

000011b2 <__fp_szero>:
    11b2:	bb 27       	eor	r27, r27
    11b4:	66 27       	eor	r22, r22
    11b6:	77 27       	eor	r23, r23
    11b8:	cb 01       	movw	r24, r22
    11ba:	97 f9       	bld	r25, 7
    11bc:	08 95       	ret

000011be <__mulsf3>:
    11be:	0b d0       	rcall	.+22     	; 0x11d6 <__mulsf3x>
    11c0:	c4 cf       	rjmp	.-120    	; 0x114a <__fp_round>
    11c2:	b5 df       	rcall	.-150    	; 0x112e <__fp_pscA>
    11c4:	28 f0       	brcs	.+10     	; 0x11d0 <__mulsf3+0x12>
    11c6:	ba df       	rcall	.-140    	; 0x113c <__fp_pscB>
    11c8:	18 f0       	brcs	.+6      	; 0x11d0 <__mulsf3+0x12>
    11ca:	95 23       	and	r25, r21
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__mulsf3+0x12>
    11ce:	a6 cf       	rjmp	.-180    	; 0x111c <__fp_inf>
    11d0:	ab cf       	rjmp	.-170    	; 0x1128 <__fp_nan>
    11d2:	11 24       	eor	r1, r1
    11d4:	ee cf       	rjmp	.-36     	; 0x11b2 <__fp_szero>

000011d6 <__mulsf3x>:
    11d6:	ca df       	rcall	.-108    	; 0x116c <__fp_split3>
    11d8:	a0 f3       	brcs	.-24     	; 0x11c2 <__mulsf3+0x4>

000011da <__mulsf3_pse>:
    11da:	95 9f       	mul	r25, r21
    11dc:	d1 f3       	breq	.-12     	; 0x11d2 <__mulsf3+0x14>
    11de:	95 0f       	add	r25, r21
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	55 1f       	adc	r21, r21
    11e4:	62 9f       	mul	r22, r18
    11e6:	f0 01       	movw	r30, r0
    11e8:	72 9f       	mul	r23, r18
    11ea:	bb 27       	eor	r27, r27
    11ec:	f0 0d       	add	r31, r0
    11ee:	b1 1d       	adc	r27, r1
    11f0:	63 9f       	mul	r22, r19
    11f2:	aa 27       	eor	r26, r26
    11f4:	f0 0d       	add	r31, r0
    11f6:	b1 1d       	adc	r27, r1
    11f8:	aa 1f       	adc	r26, r26
    11fa:	64 9f       	mul	r22, r20
    11fc:	66 27       	eor	r22, r22
    11fe:	b0 0d       	add	r27, r0
    1200:	a1 1d       	adc	r26, r1
    1202:	66 1f       	adc	r22, r22
    1204:	82 9f       	mul	r24, r18
    1206:	22 27       	eor	r18, r18
    1208:	b0 0d       	add	r27, r0
    120a:	a1 1d       	adc	r26, r1
    120c:	62 1f       	adc	r22, r18
    120e:	73 9f       	mul	r23, r19
    1210:	b0 0d       	add	r27, r0
    1212:	a1 1d       	adc	r26, r1
    1214:	62 1f       	adc	r22, r18
    1216:	83 9f       	mul	r24, r19
    1218:	a0 0d       	add	r26, r0
    121a:	61 1d       	adc	r22, r1
    121c:	22 1f       	adc	r18, r18
    121e:	74 9f       	mul	r23, r20
    1220:	33 27       	eor	r19, r19
    1222:	a0 0d       	add	r26, r0
    1224:	61 1d       	adc	r22, r1
    1226:	23 1f       	adc	r18, r19
    1228:	84 9f       	mul	r24, r20
    122a:	60 0d       	add	r22, r0
    122c:	21 1d       	adc	r18, r1
    122e:	82 2f       	mov	r24, r18
    1230:	76 2f       	mov	r23, r22
    1232:	6a 2f       	mov	r22, r26
    1234:	11 24       	eor	r1, r1
    1236:	9f 57       	subi	r25, 0x7F	; 127
    1238:	50 40       	sbci	r21, 0x00	; 0
    123a:	8a f0       	brmi	.+34     	; 0x125e <__mulsf3_pse+0x84>
    123c:	e1 f0       	breq	.+56     	; 0x1276 <__mulsf3_pse+0x9c>
    123e:	88 23       	and	r24, r24
    1240:	4a f0       	brmi	.+18     	; 0x1254 <__mulsf3_pse+0x7a>
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	bb 1f       	adc	r27, r27
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	91 50       	subi	r25, 0x01	; 1
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	a9 f7       	brne	.-22     	; 0x123e <__mulsf3_pse+0x64>
    1254:	9e 3f       	cpi	r25, 0xFE	; 254
    1256:	51 05       	cpc	r21, r1
    1258:	70 f0       	brcs	.+28     	; 0x1276 <__mulsf3_pse+0x9c>
    125a:	60 cf       	rjmp	.-320    	; 0x111c <__fp_inf>
    125c:	aa cf       	rjmp	.-172    	; 0x11b2 <__fp_szero>
    125e:	5f 3f       	cpi	r21, 0xFF	; 255
    1260:	ec f3       	brlt	.-6      	; 0x125c <__mulsf3_pse+0x82>
    1262:	98 3e       	cpi	r25, 0xE8	; 232
    1264:	dc f3       	brlt	.-10     	; 0x125c <__mulsf3_pse+0x82>
    1266:	86 95       	lsr	r24
    1268:	77 95       	ror	r23
    126a:	67 95       	ror	r22
    126c:	b7 95       	ror	r27
    126e:	f7 95       	ror	r31
    1270:	e7 95       	ror	r30
    1272:	9f 5f       	subi	r25, 0xFF	; 255
    1274:	c1 f7       	brne	.-16     	; 0x1266 <__mulsf3_pse+0x8c>
    1276:	fe 2b       	or	r31, r30
    1278:	88 0f       	add	r24, r24
    127a:	91 1d       	adc	r25, r1
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret

00001284 <__divmodhi4>:
    1284:	97 fb       	bst	r25, 7
    1286:	07 2e       	mov	r0, r23
    1288:	16 f4       	brtc	.+4      	; 0x128e <__divmodhi4+0xa>
    128a:	00 94       	com	r0
    128c:	06 d0       	rcall	.+12     	; 0x129a <__divmodhi4_neg1>
    128e:	77 fd       	sbrc	r23, 7
    1290:	08 d0       	rcall	.+16     	; 0x12a2 <__divmodhi4_neg2>
    1292:	0b d0       	rcall	.+22     	; 0x12aa <__udivmodhi4>
    1294:	07 fc       	sbrc	r0, 7
    1296:	05 d0       	rcall	.+10     	; 0x12a2 <__divmodhi4_neg2>
    1298:	3e f4       	brtc	.+14     	; 0x12a8 <__divmodhi4_exit>

0000129a <__divmodhi4_neg1>:
    129a:	90 95       	com	r25
    129c:	81 95       	neg	r24
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <__divmodhi4_neg2>:
    12a2:	70 95       	com	r23
    12a4:	61 95       	neg	r22
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255

000012a8 <__divmodhi4_exit>:
    12a8:	08 95       	ret

000012aa <__udivmodhi4>:
    12aa:	aa 1b       	sub	r26, r26
    12ac:	bb 1b       	sub	r27, r27
    12ae:	51 e1       	ldi	r21, 0x11	; 17
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <__udivmodhi4_ep>

000012b2 <__udivmodhi4_loop>:
    12b2:	aa 1f       	adc	r26, r26
    12b4:	bb 1f       	adc	r27, r27
    12b6:	a6 17       	cp	r26, r22
    12b8:	b7 07       	cpc	r27, r23
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <__udivmodhi4_ep>
    12bc:	a6 1b       	sub	r26, r22
    12be:	b7 0b       	sbc	r27, r23

000012c0 <__udivmodhi4_ep>:
    12c0:	88 1f       	adc	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	5a 95       	dec	r21
    12c6:	a9 f7       	brne	.-22     	; 0x12b2 <__udivmodhi4_loop>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	08 95       	ret

000012d2 <strcpy>:
    12d2:	fb 01       	movw	r30, r22
    12d4:	dc 01       	movw	r26, r24
    12d6:	01 90       	ld	r0, Z+
    12d8:	0d 92       	st	X+, r0
    12da:	00 20       	and	r0, r0
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <strcpy+0x4>
    12de:	08 95       	ret

000012e0 <_exit>:
    12e0:	f8 94       	cli

000012e2 <__stop_program>:
    12e2:	ff cf       	rjmp	.-2      	; 0x12e2 <__stop_program>
