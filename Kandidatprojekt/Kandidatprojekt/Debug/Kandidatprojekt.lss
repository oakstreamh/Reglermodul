
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  0000245e  000024f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  008001e6  008001e6  000025d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000373c  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf3  00000000  00000000  00005f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028fa  00000000  00000000  00006b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  0000941c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d92  00000000  00000000  00009a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000183e  00000000  00000000  0001a7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  0001bffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a21  00000000  00000000  0001c19c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_19>
      50:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_22>
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	be c7       	rjmp	.+3964   	; 0xfee <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e5       	ldi	r30, 0x5E	; 94
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3e       	cpi	r26, 0xE6	; 230
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 ee       	ldi	r26, 0xE6	; 230
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 33       	cpi	r26, 0x30	; 48
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e4 d7       	rcall	.+4040   	; 0x108c <main>
      c4:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <count>:



void count(int mode)
{
	if (mode == 1)
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	91 05       	cpc	r25, r1
      ce:	41 f4       	brne	.+16     	; 0xe0 <count+0x16>
	{
		TCNT3 = 0;
      d0:	10 92 95 00 	sts	0x0095, r1
      d4:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      d8:	85 e0       	ldi	r24, 0x05	; 5
      da:	80 93 91 00 	sts	0x0091, r24
      de:	08 95       	ret
	}
	else if (mode == 0)
      e0:	89 2b       	or	r24, r25
      e2:	11 f4       	brne	.+4      	; 0xe8 <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e4:	10 92 91 00 	sts	0x0091, r1
      e8:	08 95       	ret

000000ea <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
	int req_count = (int) req_delay*F_CPU/1024000-1;
	if(TCNT3<req_count)
      ee:	c0 91 94 00 	lds	r28, 0x0094
      f2:	d0 91 95 00 	lds	r29, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024000-1;
      f6:	dc 01       	movw	r26, r24
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	41 ee       	ldi	r20, 0xE1	; 225
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__mulshisi3>
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 ea       	ldi	r19, 0xA0	; 160
     108:	4f e0       	ldi	r20, 0x0F	; 15
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	0e 94 b5 11 	call	0x236a	; 0x236a <__divmodsi4>
     110:	21 50       	subi	r18, 0x01	; 1
     112:	31 09       	sbc	r19, r1
	if(TCNT3<req_count)
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	c2 17       	cp	r28, r18
     11a:	d3 07       	cpc	r29, r19
     11c:	10 f4       	brcc	.+4      	; 0x122 <checkCount+0x38>
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
	{
		return 0;
	}
	return 1;
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange, int currentEsc)
{
     128:	2f 92       	push	r2
     12a:	3f 92       	push	r3
     12c:	4f 92       	push	r4
     12e:	5f 92       	push	r5
     130:	6f 92       	push	r6
     132:	7f 92       	push	r7
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	ca 5b       	subi	r28, 0xBA	; 186
     152:	d2 40       	sbci	r29, 0x02	; 2
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	7b 01       	movw	r14, r22
     160:	6a 01       	movw	r12, r20
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     162:	29 e0       	ldi	r18, 0x09	; 9
     164:	e0 e0       	ldi	r30, 0x00	; 0
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	de 01       	movw	r26, r28
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	01 90       	ld	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	2a 95       	dec	r18
     172:	e1 f7       	brne	.-8      	; 0x16c <FLC_speed+0x44>
	struct io_type steering; strcpy(steering.name, "steering");
     174:	29 e0       	ldi	r18, 0x09	; 9
     176:	e9 e0       	ldi	r30, 0x09	; 9
     178:	f1 e0       	ldi	r31, 0x01	; 1
     17a:	de 01       	movw	r26, r28
     17c:	51 96       	adiw	r26, 0x11	; 17
     17e:	01 90       	ld	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	2a 95       	dec	r18
     184:	e1 f7       	brne	.-8      	; 0x17e <FLC_speed+0x56>
	struct io_type esc; strcpy(esc.name, "esc");
     186:	05 e6       	ldi	r16, 0x65	; 101
     188:	13 e7       	ldi	r17, 0x73	; 115
     18a:	23 e6       	ldi	r18, 0x63	; 99
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	09 a3       	std	Y+33, r16	; 0x21
     190:	1a a3       	std	Y+34, r17	; 0x22
     192:	2b a3       	std	Y+35, r18	; 0x23
     194:	3c a3       	std	Y+36, r19	; 0x24

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     196:	26 e0       	ldi	r18, 0x06	; 6
     198:	e2 e1       	ldi	r30, 0x12	; 18
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	de 01       	movw	r26, r28
     19e:	d1 96       	adiw	r26, 0x31	; 49
     1a0:	01 90       	ld	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	2a 95       	dec	r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <FLC_speed+0x78>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     1a8:	87 3e       	cpi	r24, 0xE7	; 231
     1aa:	07 e0       	ldi	r16, 0x07	; 7
     1ac:	90 07       	cpc	r25, r16
     1ae:	2c f4       	brge	.+10     	; 0x1ba <FLC_speed+0x92>
		steering.value = 202;
     1b0:	8a ec       	ldi	r24, 0xCA	; 202
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 8f       	std	Y+28, r25	; 0x1c
     1b6:	8b 8f       	std	Y+27, r24	; 0x1b
     1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <FLC_speed+0xb0>
	}
	else if (currentServo>=MAXRIGHT)
     1ba:	84 3e       	cpi	r24, 0xE4	; 228
     1bc:	1c e0       	ldi	r17, 0x0C	; 12
     1be:	91 07       	cpc	r25, r17
     1c0:	2c f0       	brlt	.+10     	; 0x1cc <FLC_speed+0xa4>
	{
		steering.value = 330;
     1c2:	8a e4       	ldi	r24, 0x4A	; 74
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	9c 8f       	std	Y+28, r25	; 0x1c
     1c8:	8b 8f       	std	Y+27, r24	; 0x1b
     1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <FLC_speed+0xb0>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     1cc:	6a e0       	ldi	r22, 0x0A	; 10
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	0e 94 a2 11 	call	0x2344	; 0x2344 <__divmodhi4>
     1d4:	7c 8f       	std	Y+28, r23	; 0x1c
     1d6:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// Variable assigned its reference value
	if (currentEsc<2780)
     1d8:	2c ed       	ldi	r18, 0xDC	; 220
     1da:	c2 16       	cp	r12, r18
     1dc:	2a e0       	ldi	r18, 0x0A	; 10
     1de:	d2 06       	cpc	r13, r18
     1e0:	2c f4       	brge	.+10     	; 0x1ec <FLC_speed+0xc4>
	{
		esc.value = 2780;
     1e2:	8c ed       	ldi	r24, 0xDC	; 220
     1e4:	9a e0       	ldi	r25, 0x0A	; 10
     1e6:	9c a7       	std	Y+44, r25	; 0x2c
     1e8:	8b a7       	std	Y+43, r24	; 0x2b
     1ea:	0c c0       	rjmp	.+24     	; 0x204 <FLC_speed+0xdc>
	}
	else if (currentEsc>MAXESC)
     1ec:	43 e2       	ldi	r20, 0x23	; 35
     1ee:	c4 16       	cp	r12, r20
     1f0:	4b e0       	ldi	r20, 0x0B	; 11
     1f2:	d4 06       	cpc	r13, r20
     1f4:	2c f0       	brlt	.+10     	; 0x200 <FLC_speed+0xd8>
	{
		esc.value = MAXESC;
     1f6:	82 e2       	ldi	r24, 0x22	; 34
     1f8:	9b e0       	ldi	r25, 0x0B	; 11
     1fa:	9c a7       	std	Y+44, r25	; 0x2c
     1fc:	8b a7       	std	Y+43, r24	; 0x2b
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <FLC_speed+0xdc>
	}
	else
	{
		esc.value = currentEsc;
     200:	dc a6       	std	Y+44, r13	; 0x2c
     202:	cb a6       	std	Y+43, r12	; 0x2b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     204:	ff 20       	and	r15, r15
     206:	1c f4       	brge	.+6      	; 0x20e <FLC_speed+0xe6>
	{
		distance.value = MIN_DISTANCE;
     208:	1c 86       	std	Y+12, r1	; 0x0c
     20a:	1b 86       	std	Y+11, r1	; 0x0b
     20c:	0b c0       	rjmp	.+22     	; 0x224 <FLC_speed+0xfc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     20e:	6c e4       	ldi	r22, 0x4C	; 76
     210:	e6 16       	cp	r14, r22
     212:	f1 04       	cpc	r15, r1
     214:	2c f0       	brlt	.+10     	; 0x220 <FLC_speed+0xf8>
	{
		distance.value = MAX_DISTANCE;
     216:	8b e4       	ldi	r24, 0x4B	; 75
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	9c 87       	std	Y+12, r25	; 0x0c
     21c:	8b 87       	std	Y+11, r24	; 0x0b
     21e:	02 c0       	rjmp	.+4      	; 0x224 <FLC_speed+0xfc>
	}
	else
	{
		distance.value = midSonicRange;
     220:	fc 86       	std	Y+12, r15	; 0x0c
     222:	eb 86       	std	Y+11, r14	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type maxLeft;
	MATLAB_MF(&maxLeft, "maxLeft", 201, 202, 205, 230);
     224:	0f 2e       	mov	r0, r31
     226:	f6 ee       	ldi	r31, 0xE6	; 230
     228:	ef 2e       	mov	r14, r31
     22a:	f1 2c       	mov	r15, r1
     22c:	f0 2d       	mov	r31, r0
     22e:	0d ec       	ldi	r16, 0xCD	; 205
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	2a ec       	ldi	r18, 0xCA	; 202
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	49 ec       	ldi	r20, 0xC9	; 201
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	68 e1       	ldi	r22, 0x18	; 24
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	ce 01       	movw	r24, r28
     240:	8f 5b       	subi	r24, 0xBF	; 191
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	8a d6       	rcall	.+3348   	; 0xf5a <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 205, 230, 237, 262);
     246:	0f 2e       	mov	r0, r31
     248:	f6 e0       	ldi	r31, 0x06	; 6
     24a:	ef 2e       	mov	r14, r31
     24c:	ff 24       	eor	r15, r15
     24e:	f3 94       	inc	r15
     250:	f0 2d       	mov	r31, r0
     252:	0d ee       	ldi	r16, 0xED	; 237
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	26 ee       	ldi	r18, 0xE6	; 230
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	4d ec       	ldi	r20, 0xCD	; 205
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	60 e2       	ldi	r22, 0x20	; 32
     260:	71 e0       	ldi	r23, 0x01	; 1
     262:	ce 01       	movw	r24, r28
     264:	89 5a       	subi	r24, 0xA9	; 169
     266:	9f 4f       	sbci	r25, 0xFF	; 255
     268:	78 d6       	rcall	.+3312   	; 0xf5a <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 236, 266, 266, 296);
     26a:	0f 2e       	mov	r0, r31
     26c:	f8 e2       	ldi	r31, 0x28	; 40
     26e:	ef 2e       	mov	r14, r31
     270:	ff 24       	eor	r15, r15
     272:	f3 94       	inc	r15
     274:	f0 2d       	mov	r31, r0
     276:	0a e0       	ldi	r16, 0x0A	; 10
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	2a e0       	ldi	r18, 0x0A	; 10
     27c:	31 e0       	ldi	r19, 0x01	; 1
     27e:	4c ee       	ldi	r20, 0xEC	; 236
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	65 e2       	ldi	r22, 0x25	; 37
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	ce 01       	movw	r24, r28
     288:	83 59       	subi	r24, 0x93	; 147
     28a:	9f 4f       	sbci	r25, 0xFF	; 255
     28c:	66 d6       	rcall	.+3276   	; 0xf5a <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 267, 295, 302, 325);
     28e:	0f 2e       	mov	r0, r31
     290:	f5 e4       	ldi	r31, 0x45	; 69
     292:	ef 2e       	mov	r14, r31
     294:	ff 24       	eor	r15, r15
     296:	f3 94       	inc	r15
     298:	f0 2d       	mov	r31, r0
     29a:	0e e2       	ldi	r16, 0x2E	; 46
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	27 e2       	ldi	r18, 0x27	; 39
     2a0:	31 e0       	ldi	r19, 0x01	; 1
     2a2:	4b e0       	ldi	r20, 0x0B	; 11
     2a4:	51 e0       	ldi	r21, 0x01	; 1
     2a6:	6e e2       	ldi	r22, 0x2E	; 46
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	ce 01       	movw	r24, r28
     2ac:	8d 57       	subi	r24, 0x7D	; 125
     2ae:	9f 4f       	sbci	r25, 0xFF	; 255
     2b0:	54 d6       	rcall	.+3240   	; 0xf5a <MATLAB_MF>
	struct mf_type maxRight;
	MATLAB_MF(&maxRight, "maxRight", 301, 325, 330, 331);
     2b2:	0f 2e       	mov	r0, r31
     2b4:	fb e4       	ldi	r31, 0x4B	; 75
     2b6:	ef 2e       	mov	r14, r31
     2b8:	ff 24       	eor	r15, r15
     2ba:	f3 94       	inc	r15
     2bc:	f0 2d       	mov	r31, r0
     2be:	0a e4       	ldi	r16, 0x4A	; 74
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	25 e4       	ldi	r18, 0x45	; 69
     2c4:	31 e0       	ldi	r19, 0x01	; 1
     2c6:	4d e2       	ldi	r20, 0x2D	; 45
     2c8:	51 e0       	ldi	r21, 0x01	; 1
     2ca:	64 e3       	ldi	r22, 0x34	; 52
     2cc:	71 e0       	ldi	r23, 0x01	; 1
     2ce:	ce 01       	movw	r24, r28
     2d0:	87 56       	subi	r24, 0x67	; 103
     2d2:	9f 4f       	sbci	r25, 0xFF	; 255
     2d4:	42 d6       	rcall	.+3204   	; 0xf5a <MATLAB_MF>
	

	// Linked list for MFs
	steering.membership_functions = &maxLeft;
     2d6:	81 e4       	ldi	r24, 0x41	; 65
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8c 0f       	add	r24, r28
     2dc:	9d 1f       	adc	r25, r29
     2de:	9e 8f       	std	Y+30, r25	; 0x1e
     2e0:	8d 8f       	std	Y+29, r24	; 0x1d
	maxLeft.next = &left;
     2e2:	a7 e5       	ldi	r26, 0x57	; 87
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ac 0f       	add	r26, r28
     2e8:	bd 1f       	adc	r27, r29
     2ea:	67 96       	adiw	r28, 0x17	; 23
     2ec:	bf af       	std	Y+63, r27	; 0x3f
     2ee:	ae af       	std	Y+62, r26	; 0x3e
     2f0:	67 97       	sbiw	r28, 0x17	; 23
	left.next = &straight;
     2f2:	ed e6       	ldi	r30, 0x6D	; 109
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	ad 96       	adiw	r28, 0x2d	; 45
     2fc:	ff af       	std	Y+63, r31	; 0x3f
     2fe:	ee af       	std	Y+62, r30	; 0x3e
     300:	ad 97       	sbiw	r28, 0x2d	; 45
	straight.next = &right;
     302:	03 e8       	ldi	r16, 0x83	; 131
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	0c 0f       	add	r16, r28
     308:	1d 1f       	adc	r17, r29
     30a:	cf 57       	subi	r28, 0x7F	; 127
     30c:	df 4f       	sbci	r29, 0xFF	; 255
     30e:	19 83       	std	Y+1, r17	; 0x01
     310:	08 83       	st	Y, r16
     312:	c1 58       	subi	r28, 0x81	; 129
     314:	d0 40       	sbci	r29, 0x00	; 0
	right.next = & maxRight;
     316:	89 e9       	ldi	r24, 0x99	; 153
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8c 0f       	add	r24, r28
     31c:	9d 1f       	adc	r25, r29
     31e:	c9 56       	subi	r28, 0x69	; 105
     320:	df 4f       	sbci	r29, 0xFF	; 255
     322:	99 83       	std	Y+1, r25	; 0x01
     324:	88 83       	st	Y, r24
     326:	c7 59       	subi	r28, 0x97	; 151
     328:	d0 40       	sbci	r29, 0x00	; 0
	maxRight.next = NULL;
     32a:	c3 55       	subi	r28, 0x53	; 83
     32c:	df 4f       	sbci	r29, 0xFF	; 255
     32e:	19 82       	std	Y+1, r1	; 0x01
     330:	18 82       	st	Y, r1
     332:	cd 5a       	subi	r28, 0xAD	; 173
     334:	d0 40       	sbci	r29, 0x00	; 0
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 10, 20);
     336:	0f 2e       	mov	r0, r31
     338:	f4 e1       	ldi	r31, 0x14	; 20
     33a:	ef 2e       	mov	r14, r31
     33c:	f1 2c       	mov	r15, r1
     33e:	f0 2d       	mov	r31, r0
     340:	0a e0       	ldi	r16, 0x0A	; 10
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	4f ef       	ldi	r20, 0xFF	; 255
     34a:	5f ef       	ldi	r21, 0xFF	; 255
     34c:	6d e3       	ldi	r22, 0x3D	; 61
     34e:	71 e0       	ldi	r23, 0x01	; 1
     350:	46 96       	adiw	r24, 0x16	; 22
     352:	03 d6       	rcall	.+3078   	; 0xf5a <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 10, 30, 30, 50);
     354:	5e 01       	movw	r10, r28
     356:	95 ec       	ldi	r25, 0xC5	; 197
     358:	a9 0e       	add	r10, r25
     35a:	b1 1c       	adc	r11, r1
     35c:	0f 2e       	mov	r0, r31
     35e:	f2 e3       	ldi	r31, 0x32	; 50
     360:	ef 2e       	mov	r14, r31
     362:	f1 2c       	mov	r15, r1
     364:	f0 2d       	mov	r31, r0
     366:	0e e1       	ldi	r16, 0x1E	; 30
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	2e e1       	ldi	r18, 0x1E	; 30
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	66 e4       	ldi	r22, 0x46	; 70
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	c5 01       	movw	r24, r10
     378:	f0 d5       	rcall	.+3040   	; 0xf5a <MATLAB_MF>
	struct mf_type distant;
	MATLAB_MF(&distant, "distant", 30, 50, 50, 70);
     37a:	0f 2e       	mov	r0, r31
     37c:	f6 e4       	ldi	r31, 0x46	; 70
     37e:	ef 2e       	mov	r14, r31
     380:	f1 2c       	mov	r15, r1
     382:	f0 2d       	mov	r31, r0
     384:	02 e3       	ldi	r16, 0x32	; 50
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	22 e3       	ldi	r18, 0x32	; 50
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	4e e1       	ldi	r20, 0x1E	; 30
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	6c e4       	ldi	r22, 0x4C	; 76
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	ce 01       	movw	r24, r28
     396:	85 52       	subi	r24, 0x25	; 37
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	df d5       	rcall	.+3006   	; 0xf5a <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 50, 70, 75, MAX_DISTANCE+1);
     39c:	0f 2e       	mov	r0, r31
     39e:	fc e4       	ldi	r31, 0x4C	; 76
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	0b e4       	ldi	r16, 0x4B	; 75
     3a8:	10 e0       	ldi	r17, 0x00	; 0
     3aa:	26 e4       	ldi	r18, 0x46	; 70
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	42 e3       	ldi	r20, 0x32	; 50
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	64 e5       	ldi	r22, 0x54	; 84
     3b4:	71 e0       	ldi	r23, 0x01	; 1
     3b6:	ce 01       	movw	r24, r28
     3b8:	8f 50       	subi	r24, 0x0F	; 15
     3ba:	9f 4f       	sbci	r25, 0xFF	; 255
     3bc:	ce d5       	rcall	.+2972   	; 0xf5a <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     3be:	af ea       	ldi	r26, 0xAF	; 175
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	ac 0f       	add	r26, r28
     3c4:	bd 1f       	adc	r27, r29
     3c6:	be 87       	std	Y+14, r27	; 0x0e
     3c8:	ad 87       	std	Y+13, r26	; 0x0d
	stopDist.next = &close;
     3ca:	cd 53       	subi	r28, 0x3D	; 61
     3cc:	df 4f       	sbci	r29, 0xFF	; 255
     3ce:	b9 82       	std	Y+1, r11	; 0x01
     3d0:	a8 82       	st	Y, r10
     3d2:	c3 5c       	subi	r28, 0xC3	; 195
     3d4:	d0 40       	sbci	r29, 0x00	; 0
	close.next = &distant;
     3d6:	0b ed       	ldi	r16, 0xDB	; 219
     3d8:	10 e0       	ldi	r17, 0x00	; 0
     3da:	0c 0f       	add	r16, r28
     3dc:	1d 1f       	adc	r17, r29
     3de:	f5 01       	movw	r30, r10
     3e0:	15 8b       	std	Z+21, r17	; 0x15
     3e2:	04 8b       	std	Z+20, r16	; 0x14
	distant.next = &faar;
     3e4:	81 ef       	ldi	r24, 0xF1	; 241
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	8c 0f       	add	r24, r28
     3ea:	9d 1f       	adc	r25, r29
     3ec:	c1 51       	subi	r28, 0x11	; 17
     3ee:	df 4f       	sbci	r29, 0xFF	; 255
     3f0:	99 83       	std	Y+1, r25	; 0x01
     3f2:	88 83       	st	Y, r24
     3f4:	cf 5e       	subi	r28, 0xEF	; 239
     3f6:	d0 40       	sbci	r29, 0x00	; 0
	faar.next = NULL;
     3f8:	cb 5f       	subi	r28, 0xFB	; 251
     3fa:	de 4f       	sbci	r29, 0xFE	; 254
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
     400:	c5 50       	subi	r28, 0x05	; 5
     402:	d1 40       	sbci	r29, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2779, 2780, 2800, 2830);
     404:	0f 2e       	mov	r0, r31
     406:	fe e0       	ldi	r31, 0x0E	; 14
     408:	ef 2e       	mov	r14, r31
     40a:	fb e0       	ldi	r31, 0x0B	; 11
     40c:	ff 2e       	mov	r15, r31
     40e:	f0 2d       	mov	r31, r0
     410:	00 ef       	ldi	r16, 0xF0	; 240
     412:	1a e0       	ldi	r17, 0x0A	; 10
     414:	2c ed       	ldi	r18, 0xDC	; 220
     416:	3a e0       	ldi	r19, 0x0A	; 10
     418:	4b ed       	ldi	r20, 0xDB	; 219
     41a:	5a e0       	ldi	r21, 0x0A	; 10
     41c:	69 e5       	ldi	r22, 0x59	; 89
     41e:	71 e0       	ldi	r23, 0x01	; 1
     420:	46 96       	adiw	r24, 0x16	; 22
     422:	9b d5       	rcall	.+2870   	; 0xf5a <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2825, 2835, 2835, 2845);
     424:	0f 2e       	mov	r0, r31
     426:	fd e1       	ldi	r31, 0x1D	; 29
     428:	ef 2e       	mov	r14, r31
     42a:	fb e0       	ldi	r31, 0x0B	; 11
     42c:	ff 2e       	mov	r15, r31
     42e:	f0 2d       	mov	r31, r0
     430:	03 e1       	ldi	r16, 0x13	; 19
     432:	1b e0       	ldi	r17, 0x0B	; 11
     434:	23 e1       	ldi	r18, 0x13	; 19
     436:	3b e0       	ldi	r19, 0x0B	; 11
     438:	49 e0       	ldi	r20, 0x09	; 9
     43a:	5b e0       	ldi	r21, 0x0B	; 11
     43c:	63 e7       	ldi	r22, 0x73	; 115
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	ce 01       	movw	r24, r28
     442:	83 5e       	subi	r24, 0xE3	; 227
     444:	9e 4f       	sbci	r25, 0xFE	; 254
     446:	89 d5       	rcall	.+2834   	; 0xf5a <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2828, 2838, 2838, 2848);
     448:	0f 2e       	mov	r0, r31
     44a:	f0 e2       	ldi	r31, 0x20	; 32
     44c:	ef 2e       	mov	r14, r31
     44e:	fb e0       	ldi	r31, 0x0B	; 11
     450:	ff 2e       	mov	r15, r31
     452:	f0 2d       	mov	r31, r0
     454:	06 e1       	ldi	r16, 0x16	; 22
     456:	1b e0       	ldi	r17, 0x0B	; 11
     458:	26 e1       	ldi	r18, 0x16	; 22
     45a:	3b e0       	ldi	r19, 0x0B	; 11
     45c:	4c e0       	ldi	r20, 0x0C	; 12
     45e:	5b e0       	ldi	r21, 0x0B	; 11
     460:	61 e6       	ldi	r22, 0x61	; 97
     462:	71 e0       	ldi	r23, 0x01	; 1
     464:	ce 01       	movw	r24, r28
     466:	8d 5c       	subi	r24, 0xCD	; 205
     468:	9e 4f       	sbci	r25, 0xFE	; 254
     46a:	77 d5       	rcall	.+2798   	; 0xf5a <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2830, 2840, 2840, 2850);
     46c:	0f 2e       	mov	r0, r31
     46e:	f2 e2       	ldi	r31, 0x22	; 34
     470:	ef 2e       	mov	r14, r31
     472:	fb e0       	ldi	r31, 0x0B	; 11
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
     478:	08 e1       	ldi	r16, 0x18	; 24
     47a:	1b e0       	ldi	r17, 0x0B	; 11
     47c:	28 e1       	ldi	r18, 0x18	; 24
     47e:	3b e0       	ldi	r19, 0x0B	; 11
     480:	4e e0       	ldi	r20, 0x0E	; 14
     482:	5b e0       	ldi	r21, 0x0B	; 11
     484:	68 e6       	ldi	r22, 0x68	; 104
     486:	71 e0       	ldi	r23, 0x01	; 1
     488:	ce 01       	movw	r24, r28
     48a:	87 5b       	subi	r24, 0xB7	; 183
     48c:	9e 4f       	sbci	r25, 0xFE	; 254
     48e:	65 d5       	rcall	.+2762   	; 0xf5a <MATLAB_MF>

	// Linked list for MFs
	esc.membership_functions = &neutral;
     490:	a7 e0       	ldi	r26, 0x07	; 7
     492:	b1 e0       	ldi	r27, 0x01	; 1
     494:	ac 0f       	add	r26, r28
     496:	bd 1f       	adc	r27, r29
     498:	be a7       	std	Y+46, r27	; 0x2e
     49a:	ad a7       	std	Y+45, r26	; 0x2d
	neutral.next = &low;
     49c:	ed e1       	ldi	r30, 0x1D	; 29
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	ec 0f       	add	r30, r28
     4a2:	fd 1f       	adc	r31, r29
     4a4:	c5 5e       	subi	r28, 0xE5	; 229
     4a6:	de 4f       	sbci	r29, 0xFE	; 254
     4a8:	f9 83       	std	Y+1, r31	; 0x01
     4aa:	e8 83       	st	Y, r30
     4ac:	cb 51       	subi	r28, 0x1B	; 27
     4ae:	d1 40       	sbci	r29, 0x01	; 1
	low.next = &medium;
     4b0:	03 e3       	ldi	r16, 0x33	; 51
     4b2:	11 e0       	ldi	r17, 0x01	; 1
     4b4:	0c 0f       	add	r16, r28
     4b6:	1d 1f       	adc	r17, r29
     4b8:	cf 5c       	subi	r28, 0xCF	; 207
     4ba:	de 4f       	sbci	r29, 0xFE	; 254
     4bc:	19 83       	std	Y+1, r17	; 0x01
     4be:	08 83       	st	Y, r16
     4c0:	c1 53       	subi	r28, 0x31	; 49
     4c2:	d1 40       	sbci	r29, 0x01	; 1
	medium.next = &high;
     4c4:	89 e4       	ldi	r24, 0x49	; 73
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	8c 0f       	add	r24, r28
     4ca:	9d 1f       	adc	r25, r29
     4cc:	c9 5b       	subi	r28, 0xB9	; 185
     4ce:	de 4f       	sbci	r29, 0xFE	; 254
     4d0:	99 83       	std	Y+1, r25	; 0x01
     4d2:	88 83       	st	Y, r24
     4d4:	c7 54       	subi	r28, 0x47	; 71
     4d6:	d1 40       	sbci	r29, 0x01	; 1
	high.next = NULL;
     4d8:	c3 5a       	subi	r28, 0xA3	; 163
     4da:	de 4f       	sbci	r29, 0xFE	; 254
     4dc:	19 82       	std	Y+1, r1	; 0x01
     4de:	18 82       	st	Y, r1
     4e0:	cd 55       	subi	r28, 0x5D	; 93
     4e2:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     4e4:	a1 e0       	ldi	r26, 0x01	; 1
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	ac 0f       	add	r26, r28
     4ea:	bd 1f       	adc	r27, r29
     4ec:	b0 93 07 03 	sts	0x0307, r27
     4f0:	a0 93 06 03 	sts	0x0306, r26
	distance.next = &steering;
     4f4:	4e 01       	movw	r8, r28
     4f6:	b1 e1       	ldi	r27, 0x11	; 17
     4f8:	8b 0e       	add	r8, r27
     4fa:	91 1c       	adc	r9, r1
     4fc:	98 8a       	std	Y+16, r9	; 0x10
     4fe:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     500:	3e 01       	movw	r6, r28
     502:	e1 e2       	ldi	r30, 0x21	; 33
     504:	6e 0e       	add	r6, r30
     506:	71 1c       	adc	r7, r1
     508:	78 a2       	std	Y+32, r7	; 0x20
     50a:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     50c:	18 aa       	std	Y+48, r1	; 0x30
     50e:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     510:	6e 01       	movw	r12, r28
     512:	f1 e3       	ldi	r31, 0x31	; 49
     514:	cf 0e       	add	r12, r31
     516:	d1 1c       	adc	r13, r1
     518:	d0 92 05 03 	sts	0x0305, r13
     51c:	c0 92 04 03 	sts	0x0304, r12
	speed.next = NULL;
     520:	21 96       	adiw	r28, 0x01	; 1
     522:	1f ae       	std	Y+63, r1	; 0x3f
     524:	1e ae       	std	Y+62, r1	; 0x3e
     526:	21 97       	sbiw	r28, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type zero;
	MATLAB_MF(&zero, "zero", 2779, 2780, 2802, 2830);
     528:	2e 01       	movw	r4, r28
     52a:	01 ea       	ldi	r16, 0xA1	; 161
     52c:	40 1a       	sub	r4, r16
     52e:	0e ef       	ldi	r16, 0xFE	; 254
     530:	50 0a       	sbc	r5, r16
     532:	0f 2e       	mov	r0, r31
     534:	fe e0       	ldi	r31, 0x0E	; 14
     536:	ef 2e       	mov	r14, r31
     538:	fb e0       	ldi	r31, 0x0B	; 11
     53a:	ff 2e       	mov	r15, r31
     53c:	f0 2d       	mov	r31, r0
     53e:	02 ef       	ldi	r16, 0xF2	; 242
     540:	1a e0       	ldi	r17, 0x0A	; 10
     542:	2c ed       	ldi	r18, 0xDC	; 220
     544:	3a e0       	ldi	r19, 0x0A	; 10
     546:	4b ed       	ldi	r20, 0xDB	; 219
     548:	5a e0       	ldi	r21, 0x0A	; 10
     54a:	6d e6       	ldi	r22, 0x6D	; 109
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	c2 01       	movw	r24, r4
     550:	04 d5       	rcall	.+2568   	; 0xf5a <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2825, 2835, 2835, 2845);
     552:	1e 01       	movw	r2, r28
     554:	1b e8       	ldi	r17, 0x8B	; 139
     556:	21 1a       	sub	r2, r17
     558:	1e ef       	ldi	r17, 0xFE	; 254
     55a:	31 0a       	sbc	r3, r17
     55c:	0f 2e       	mov	r0, r31
     55e:	fd e1       	ldi	r31, 0x1D	; 29
     560:	ef 2e       	mov	r14, r31
     562:	fb e0       	ldi	r31, 0x0B	; 11
     564:	ff 2e       	mov	r15, r31
     566:	f0 2d       	mov	r31, r0
     568:	03 e1       	ldi	r16, 0x13	; 19
     56a:	1b e0       	ldi	r17, 0x0B	; 11
     56c:	23 e1       	ldi	r18, 0x13	; 19
     56e:	3b e0       	ldi	r19, 0x0B	; 11
     570:	49 e0       	ldi	r20, 0x09	; 9
     572:	5b e0       	ldi	r21, 0x0B	; 11
     574:	62 e7       	ldi	r22, 0x72	; 114
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	c1 01       	movw	r24, r2
     57a:	ef d4       	rcall	.+2526   	; 0xf5a <MATLAB_MF>
	struct mf_type average;
	MATLAB_MF(&average, "average", 2828, 2838, 2838, 2848);
     57c:	0f 2e       	mov	r0, r31
     57e:	f0 e2       	ldi	r31, 0x20	; 32
     580:	ef 2e       	mov	r14, r31
     582:	fb e0       	ldi	r31, 0x0B	; 11
     584:	ff 2e       	mov	r15, r31
     586:	f0 2d       	mov	r31, r0
     588:	06 e1       	ldi	r16, 0x16	; 22
     58a:	1b e0       	ldi	r17, 0x0B	; 11
     58c:	26 e1       	ldi	r18, 0x16	; 22
     58e:	3b e0       	ldi	r19, 0x0B	; 11
     590:	4c e0       	ldi	r20, 0x0C	; 12
     592:	5b e0       	ldi	r21, 0x0B	; 11
     594:	67 e7       	ldi	r22, 0x77	; 119
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	ce 01       	movw	r24, r28
     59a:	85 57       	subi	r24, 0x75	; 117
     59c:	9e 4f       	sbci	r25, 0xFE	; 254
     59e:	dd d4       	rcall	.+2490   	; 0xf5a <MATLAB_MF>
	struct mf_type fast;
	MATLAB_MF(&fast, "fast", 2830, 2840, 2840, 2850);
     5a0:	0f 2e       	mov	r0, r31
     5a2:	f2 e2       	ldi	r31, 0x22	; 34
     5a4:	ef 2e       	mov	r14, r31
     5a6:	fb e0       	ldi	r31, 0x0B	; 11
     5a8:	ff 2e       	mov	r15, r31
     5aa:	f0 2d       	mov	r31, r0
     5ac:	08 e1       	ldi	r16, 0x18	; 24
     5ae:	1b e0       	ldi	r17, 0x0B	; 11
     5b0:	28 e1       	ldi	r18, 0x18	; 24
     5b2:	3b e0       	ldi	r19, 0x0B	; 11
     5b4:	4e e0       	ldi	r20, 0x0E	; 14
     5b6:	5b e0       	ldi	r21, 0x0B	; 11
     5b8:	6f e7       	ldi	r22, 0x7F	; 127
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	ce 01       	movw	r24, r28
     5be:	8f 55       	subi	r24, 0x5F	; 95
     5c0:	9e 4f       	sbci	r25, 0xFE	; 254
     5c2:	cb d4       	rcall	.+2454   	; 0xf5a <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &zero;
     5c4:	5e ae       	std	Y+62, r5	; 0x3e
     5c6:	4d ae       	std	Y+61, r4	; 0x3d
	zero.next = &slow;
     5c8:	d2 01       	movw	r26, r4
     5ca:	55 96       	adiw	r26, 0x15	; 21
     5cc:	3c 92       	st	X, r3
     5ce:	2e 92       	st	-X, r2
     5d0:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &average;
     5d2:	0b e8       	ldi	r16, 0x8B	; 139
     5d4:	11 e0       	ldi	r17, 0x01	; 1
     5d6:	0c 0f       	add	r16, r28
     5d8:	1d 1f       	adc	r17, r29
     5da:	f1 01       	movw	r30, r2
     5dc:	15 8b       	std	Z+21, r17	; 0x15
     5de:	04 8b       	std	Z+20, r16	; 0x14
	average.next = &fast;
     5e0:	81 ea       	ldi	r24, 0xA1	; 161
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	8c 0f       	add	r24, r28
     5e6:	9d 1f       	adc	r25, r29
     5e8:	c1 56       	subi	r28, 0x61	; 97
     5ea:	de 4f       	sbci	r29, 0xFE	; 254
     5ec:	99 83       	std	Y+1, r25	; 0x01
     5ee:	88 83       	st	Y, r24
     5f0:	cf 59       	subi	r28, 0x9F	; 159
     5f2:	d1 40       	sbci	r29, 0x01	; 1
	fast.next = NULL;
     5f4:	cb 54       	subi	r28, 0x4B	; 75
     5f6:	de 4f       	sbci	r29, 0xFE	; 254
     5f8:	19 82       	std	Y+1, r1	; 0x01
     5fa:	18 82       	st	Y, r1
     5fc:	c5 5b       	subi	r28, 0xB5	; 181
     5fe:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     600:	a1 e0       	ldi	r26, 0x01	; 1
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	ac 0f       	add	r26, r28
     606:	bd 1f       	adc	r27, r29
     608:	b0 93 07 03 	sts	0x0307, r27
     60c:	a0 93 06 03 	sts	0x0306, r26
	distance.next = &steering;
     610:	98 8a       	std	Y+16, r9	; 0x10
     612:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     614:	78 a2       	std	Y+32, r7	; 0x20
     616:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     618:	18 aa       	std	Y+48, r1	; 0x30
     61a:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     61c:	d0 92 05 03 	sts	0x0305, r13
     620:	c0 92 04 03 	sts	0x0304, r12
	speed.next = NULL;
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	1f ae       	std	Y+63, r1	; 0x3f
     628:	1e ae       	std	Y+62, r1	; 0x3e
     62a:	21 97       	sbiw	r28, 0x01	; 1


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     62c:	be 01       	movw	r22, r28
     62e:	69 54       	subi	r22, 0x49	; 73
     630:	7e 4f       	sbci	r23, 0xFE	; 254
     632:	70 93 09 03 	sts	0x0309, r23
     636:	60 93 08 03 	sts	0x0308, r22
	struct rule_type rule2; rule1.next = &rule2;
     63a:	ae 01       	movw	r20, r28
     63c:	43 54       	subi	r20, 0x43	; 67
     63e:	5e 4f       	sbci	r21, 0xFE	; 254
     640:	fb 01       	movw	r30, r22
     642:	55 83       	std	Z+5, r21	; 0x05
     644:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
     646:	82 96       	adiw	r24, 0x22	; 34
     648:	da 01       	movw	r26, r20
     64a:	15 96       	adiw	r26, 0x05	; 5
     64c:	9c 93       	st	X, r25
     64e:	8e 93       	st	-X, r24
     650:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule4; rule3.next = &rule4;
     652:	9e 01       	movw	r18, r28
     654:	27 53       	subi	r18, 0x37	; 55
     656:	3e 4f       	sbci	r19, 0xFE	; 254
     658:	fc 01       	movw	r30, r24
     65a:	35 83       	std	Z+5, r19	; 0x05
     65c:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5; 
     65e:	52 96       	adiw	r26, 0x12	; 18
     660:	f9 01       	movw	r30, r18
     662:	b5 83       	std	Z+5, r27	; 0x05
     664:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
     666:	05 ed       	ldi	r16, 0xD5	; 213
     668:	11 e0       	ldi	r17, 0x01	; 1
     66a:	0c 0f       	add	r16, r28
     66c:	1d 1f       	adc	r17, r29
     66e:	15 96       	adiw	r26, 0x05	; 5
     670:	1c 93       	st	X, r17
     672:	0e 93       	st	-X, r16
     674:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule7; rule6.next = &rule7;
     676:	6e 01       	movw	r12, r28
     678:	15 e2       	ldi	r17, 0x25	; 37
     67a:	c1 1a       	sub	r12, r17
     67c:	1e ef       	ldi	r17, 0xFE	; 254
     67e:	d1 0a       	sbc	r13, r17
     680:	c7 52       	subi	r28, 0x27	; 39
     682:	de 4f       	sbci	r29, 0xFE	; 254
     684:	d9 82       	std	Y+1, r13	; 0x01
     686:	c8 82       	st	Y, r12
     688:	c9 5d       	subi	r28, 0xD9	; 217
     68a:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule8; rule7.next = &rule8;
     68c:	4e 01       	movw	r8, r28
     68e:	ef e1       	ldi	r30, 0x1F	; 31
     690:	8e 1a       	sub	r8, r30
     692:	ee ef       	ldi	r30, 0xFE	; 254
     694:	9e 0a       	sbc	r9, r30
     696:	f6 01       	movw	r30, r12
     698:	95 82       	std	Z+5, r9	; 0x05
     69a:	84 82       	std	Z+4, r8	; 0x04
	struct rule_type rule9; rule8.next = &rule9;
     69c:	3e 01       	movw	r6, r28
     69e:	f9 e1       	ldi	r31, 0x19	; 25
     6a0:	6f 1a       	sub	r6, r31
     6a2:	fe ef       	ldi	r31, 0xFE	; 254
     6a4:	7f 0a       	sbc	r7, r31
     6a6:	f4 01       	movw	r30, r8
     6a8:	75 82       	std	Z+5, r7	; 0x05
     6aa:	64 82       	std	Z+4, r6	; 0x04
	struct rule_type rule10; rule9.next = &rule10;
     6ac:	0d ee       	ldi	r16, 0xED	; 237
     6ae:	11 e0       	ldi	r17, 0x01	; 1
     6b0:	0c 0f       	add	r16, r28
     6b2:	1d 1f       	adc	r17, r29
     6b4:	f3 01       	movw	r30, r6
     6b6:	15 83       	std	Z+5, r17	; 0x05
     6b8:	04 83       	std	Z+4, r16	; 0x04
	struct rule_type rule11; rule10.next = &rule11;
     6ba:	e3 ef       	ldi	r30, 0xF3	; 243
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	ec 0f       	add	r30, r28
     6c0:	fd 1f       	adc	r31, r29
     6c2:	cf 50       	subi	r28, 0x0F	; 15
     6c4:	de 4f       	sbci	r29, 0xFE	; 254
     6c6:	f9 83       	std	Y+1, r31	; 0x01
     6c8:	e8 83       	st	Y, r30
     6ca:	c1 5f       	subi	r28, 0xF1	; 241
     6cc:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12;
     6ce:	09 ef       	ldi	r16, 0xF9	; 249
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	0c 0f       	add	r16, r28
     6d4:	1d 1f       	adc	r17, r29
     6d6:	c9 50       	subi	r28, 0x09	; 9
     6d8:	de 4f       	sbci	r29, 0xFE	; 254
     6da:	19 83       	std	Y+1, r17	; 0x01
     6dc:	08 83       	st	Y, r16
     6de:	c7 5f       	subi	r28, 0xF7	; 247
     6e0:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule13; rule12.next = &rule13;
     6e2:	ef ef       	ldi	r30, 0xFF	; 255
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	ec 0f       	add	r30, r28
     6e8:	fd 1f       	adc	r31, r29
     6ea:	c3 50       	subi	r28, 0x03	; 3
     6ec:	de 4f       	sbci	r29, 0xFE	; 254
     6ee:	f9 83       	std	Y+1, r31	; 0x01
     6f0:	e8 83       	st	Y, r30
     6f2:	cd 5f       	subi	r28, 0xFD	; 253
     6f4:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule14; rule13.next = &rule14;
     6f6:	05 e0       	ldi	r16, 0x05	; 5
     6f8:	12 e0       	ldi	r17, 0x02	; 2
     6fa:	0c 0f       	add	r16, r28
     6fc:	1d 1f       	adc	r17, r29
     6fe:	cd 5f       	subi	r28, 0xFD	; 253
     700:	dd 4f       	sbci	r29, 0xFD	; 253
     702:	19 83       	std	Y+1, r17	; 0x01
     704:	08 83       	st	Y, r16
     706:	c3 50       	subi	r28, 0x03	; 3
     708:	d2 40       	sbci	r29, 0x02	; 2
	rule14.next = NULL;
     70a:	c7 5f       	subi	r28, 0xF7	; 247
     70c:	dd 4f       	sbci	r29, 0xFD	; 253
     70e:	19 82       	std	Y+1, r1	; 0x01
     710:	18 82       	st	Y, r1
     712:	c9 50       	subi	r28, 0x09	; 9
     714:	d2 40       	sbci	r29, 0x02	; 2
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     716:	7e 01       	movw	r14, r28
     718:	15 ef       	ldi	r17, 0xF5	; 245
     71a:	e1 1a       	sub	r14, r17
     71c:	1d ef       	ldi	r17, 0xFD	; 253
     71e:	f1 0a       	sbc	r15, r17
     720:	fb 01       	movw	r30, r22
     722:	f1 82       	std	Z+1, r15	; 0x01
     724:	e0 82       	st	Z, r14
     726:	f7 01       	movw	r30, r14
     728:	13 82       	std	Z+3, r1	; 0x03
     72a:	12 82       	std	Z+2, r1	; 0x02
     72c:	8e 01       	movw	r16, r28
     72e:	01 5f       	subi	r16, 0xF1	; 241
     730:	1d 4f       	sbci	r17, 0xFD	; 253
     732:	fb 01       	movw	r30, r22
     734:	13 83       	std	Z+3, r17	; 0x03
     736:	02 83       	std	Z+2, r16	; 0x02
     738:	f8 01       	movw	r30, r16
     73a:	13 82       	std	Z+3, r1	; 0x03
     73c:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &zero.value;
     73e:	6f ea       	ldi	r22, 0xAF	; 175
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	6c 0f       	add	r22, r28
     744:	7d 1f       	adc	r23, r29
     746:	66 5f       	subi	r22, 0xF6	; 246
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	f7 01       	movw	r30, r14
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	60 83       	st	Z, r22
     750:	fa e0       	ldi	r31, 0x0A	; 10
     752:	4f 0e       	add	r4, r31
     754:	51 1c       	adc	r5, r1
     756:	f8 01       	movw	r30, r16
     758:	51 82       	std	Z+1, r5	; 0x01
     75a:	40 82       	st	Z, r4

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     75c:	0c 5f       	subi	r16, 0xFC	; 252
     75e:	1f 4f       	sbci	r17, 0xFF	; 255
     760:	fa 01       	movw	r30, r20
     762:	11 83       	std	Z+1, r17	; 0x01
     764:	00 83       	st	Z, r16
     766:	f8 01       	movw	r30, r16
     768:	13 82       	std	Z+3, r1	; 0x03
     76a:	12 82       	std	Z+2, r1	; 0x02
     76c:	62 5a       	subi	r22, 0xA2	; 162
     76e:	7e 4f       	sbci	r23, 0xFE	; 254
     770:	fa 01       	movw	r30, r20
     772:	73 83       	std	Z+3, r23	; 0x03
     774:	62 83       	std	Z+2, r22	; 0x02
     776:	fb 01       	movw	r30, r22
     778:	13 82       	std	Z+3, r1	; 0x03
     77a:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &slow.value;
     77c:	4e 5e       	subi	r20, 0xEE	; 238
     77e:	51 09       	sbc	r21, r1
     780:	f8 01       	movw	r30, r16
     782:	51 83       	std	Z+1, r21	; 0x01
     784:	40 83       	st	Z, r20
     786:	51 01       	movw	r10, r2
     788:	fa e0       	ldi	r31, 0x0A	; 10
     78a:	af 0e       	add	r10, r31
     78c:	b1 1c       	adc	r11, r1
     78e:	fb 01       	movw	r30, r22
     790:	b1 82       	std	Z+1, r11	; 0x01
     792:	a0 82       	st	Z, r10

	// if dist is faar and steering is right then speed is average
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     794:	08 5f       	subi	r16, 0xF8	; 248
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	11 83       	std	Z+1, r17	; 0x01
     79c:	00 83       	st	Z, r16
     79e:	40 5b       	subi	r20, 0xB0	; 176
     7a0:	5e 4f       	sbci	r21, 0xFE	; 254
     7a2:	f8 01       	movw	r30, r16
     7a4:	53 83       	std	Z+3, r21	; 0x03
     7a6:	42 83       	std	Z+2, r20	; 0x02
     7a8:	fa 01       	movw	r30, r20
     7aa:	13 82       	std	Z+3, r1	; 0x03
     7ac:	12 82       	std	Z+2, r1	; 0x02
     7ae:	64 5f       	subi	r22, 0xF4	; 244
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	fc 01       	movw	r30, r24
     7b4:	73 83       	std	Z+3, r23	; 0x03
     7b6:	62 83       	std	Z+2, r22	; 0x02
     7b8:	fb 01       	movw	r30, r22
     7ba:	13 82       	std	Z+3, r1	; 0x03
     7bc:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &average.value;
     7be:	81 ef       	ldi	r24, 0xF1	; 241
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	8c 0f       	add	r24, r28
     7c4:	9d 1f       	adc	r25, r29
     7c6:	0a 96       	adiw	r24, 0x0a	; 10
     7c8:	f8 01       	movw	r30, r16
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	80 83       	st	Z, r24
     7ce:	03 e8       	ldi	r16, 0x83	; 131
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	0c 0f       	add	r16, r28
     7d4:	1d 1f       	adc	r17, r29
     7d6:	06 5f       	subi	r16, 0xF6	; 246
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	fa 01       	movw	r30, r20
     7dc:	11 83       	std	Z+1, r17	; 0x01
     7de:	00 83       	st	Z, r16
     7e0:	4b e8       	ldi	r20, 0x8B	; 139
     7e2:	51 e0       	ldi	r21, 0x01	; 1
     7e4:	4c 0f       	add	r20, r28
     7e6:	5d 1f       	adc	r21, r29
     7e8:	46 5f       	subi	r20, 0xF6	; 246
     7ea:	5f 4f       	sbci	r21, 0xFF	; 255
     7ec:	fb 01       	movw	r30, r22
     7ee:	51 83       	std	Z+1, r21	; 0x01
     7f0:	40 83       	st	Z, r20

	// if dist is faar and steering is left then speed is average
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     7f2:	7e 01       	movw	r14, r28
     7f4:	f9 ed       	ldi	r31, 0xD9	; 217
     7f6:	ef 1a       	sub	r14, r31
     7f8:	fd ef       	ldi	r31, 0xFD	; 253
     7fa:	ff 0a       	sbc	r15, r31
     7fc:	f9 01       	movw	r30, r18
     7fe:	f1 82       	std	Z+1, r15	; 0x01
     800:	e0 82       	st	Z, r14
     802:	02 56       	subi	r16, 0x62	; 98
     804:	1e 4f       	sbci	r17, 0xFE	; 254
     806:	f7 01       	movw	r30, r14
     808:	13 83       	std	Z+3, r17	; 0x03
     80a:	02 83       	std	Z+2, r16	; 0x02
     80c:	f8 01       	movw	r30, r16
     80e:	13 82       	std	Z+3, r1	; 0x03
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	64 5f       	subi	r22, 0xF4	; 244
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	f9 01       	movw	r30, r18
     818:	73 83       	std	Z+3, r23	; 0x03
     81a:	62 83       	std	Z+2, r22	; 0x02
     81c:	fb 01       	movw	r30, r22
     81e:	13 82       	std	Z+3, r1	; 0x03
     820:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &average.value;
     822:	f7 01       	movw	r30, r14
     824:	91 83       	std	Z+1, r25	; 0x01
     826:	80 83       	st	Z, r24
     828:	27 e5       	ldi	r18, 0x57	; 87
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	2c 0f       	add	r18, r28
     82e:	3d 1f       	adc	r19, r29
     830:	26 5f       	subi	r18, 0xF6	; 246
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	f8 01       	movw	r30, r16
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	fb 01       	movw	r30, r22
     83c:	51 83       	std	Z+1, r21	; 0x01
     83e:	40 83       	st	Z, r20

	// if dist is faar and steering is maxRight then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     840:	08 5f       	subi	r16, 0xF8	; 248
     842:	1f 4f       	sbci	r17, 0xFF	; 255
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	1c 93       	st	X, r17
     848:	0e 93       	st	-X, r16
     84a:	68 5f       	subi	r22, 0xF8	; 248
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	f8 01       	movw	r30, r16
     850:	73 83       	std	Z+3, r23	; 0x03
     852:	62 83       	std	Z+2, r22	; 0x02
     854:	fb 01       	movw	r30, r22
     856:	13 82       	std	Z+3, r1	; 0x03
     858:	12 82       	std	Z+2, r1	; 0x02
     85a:	26 52       	subi	r18, 0x26	; 38
     85c:	3e 4f       	sbci	r19, 0xFE	; 254
     85e:	13 96       	adiw	r26, 0x03	; 3
     860:	3c 93       	st	X, r19
     862:	2e 93       	st	-X, r18
     864:	12 97       	sbiw	r26, 0x02	; 2
     866:	d9 01       	movw	r26, r18
     868:	13 96       	adiw	r26, 0x03	; 3
     86a:	1c 92       	st	X, r1
     86c:	1e 92       	st	-X, r1
     86e:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &maxRight.value; then5.value = &slow.value;
     870:	f8 01       	movw	r30, r16
     872:	91 83       	std	Z+1, r25	; 0x01
     874:	80 83       	st	Z, r24
     876:	a9 e9       	ldi	r26, 0x99	; 153
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	ac 0f       	add	r26, r28
     87c:	bd 1f       	adc	r27, r29
     87e:	1a 96       	adiw	r26, 0x0a	; 10
     880:	fb 01       	movw	r30, r22
     882:	b1 83       	std	Z+1, r27	; 0x01
     884:	a0 83       	st	Z, r26
     886:	d9 01       	movw	r26, r18
     888:	ad 92       	st	X+, r10
     88a:	bc 92       	st	X, r11
	
	// if dist is faar and steering is maxLeft then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     88c:	68 5f       	subi	r22, 0xF8	; 248
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	cb 52       	subi	r28, 0x2B	; 43
     892:	de 4f       	sbci	r29, 0xFE	; 254
     894:	79 83       	std	Y+1, r23	; 0x01
     896:	68 83       	st	Y, r22
     898:	c5 5d       	subi	r28, 0xD5	; 213
     89a:	d1 40       	sbci	r29, 0x01	; 1
     89c:	28 5f       	subi	r18, 0xF8	; 248
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	fb 01       	movw	r30, r22
     8a2:	33 83       	std	Z+3, r19	; 0x03
     8a4:	22 83       	std	Z+2, r18	; 0x02
     8a6:	d9 01       	movw	r26, r18
     8a8:	13 96       	adiw	r26, 0x03	; 3
     8aa:	1c 92       	st	X, r1
     8ac:	1e 92       	st	-X, r1
     8ae:	12 97       	sbiw	r26, 0x02	; 2
     8b0:	14 96       	adiw	r26, 0x04	; 4
     8b2:	c9 52       	subi	r28, 0x29	; 41
     8b4:	de 4f       	sbci	r29, 0xFE	; 254
     8b6:	b9 83       	std	Y+1, r27	; 0x01
     8b8:	a8 83       	st	Y, r26
     8ba:	c7 5d       	subi	r28, 0xD7	; 215
     8bc:	d1 40       	sbci	r29, 0x01	; 1
     8be:	13 96       	adiw	r26, 0x03	; 3
     8c0:	1c 92       	st	X, r1
     8c2:	1e 92       	st	-X, r1
     8c4:	12 97       	sbiw	r26, 0x02	; 2
	if61.value = &faar.value; if62.value = &maxLeft.value; then6.value = &slow.value;
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	80 83       	st	Z, r24
     8ca:	61 e4       	ldi	r22, 0x41	; 65
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	6c 0f       	add	r22, r28
     8d0:	7d 1f       	adc	r23, r29
     8d2:	66 5f       	subi	r22, 0xF6	; 246
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	f9 01       	movw	r30, r18
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	60 83       	st	Z, r22
     8dc:	ad 92       	st	X+, r10
     8de:	bc 92       	st	X, r11
	
	// if dist is distant and currentEsc is neutral then speed is slow
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     8e0:	7e 5f       	subi	r23, 0xFE	; 254
     8e2:	d6 01       	movw	r26, r12
     8e4:	6d 93       	st	X+, r22
     8e6:	7c 93       	st	X, r23
     8e8:	04 5e       	subi	r16, 0xE4	; 228
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	fb 01       	movw	r30, r22
     8ee:	13 83       	std	Z+3, r17	; 0x03
     8f0:	02 83       	std	Z+2, r16	; 0x02
     8f2:	d8 01       	movw	r26, r16
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	1c 92       	st	X, r1
     8f8:	1e 92       	st	-X, r1
     8fa:	12 97       	sbiw	r26, 0x02	; 2
     8fc:	38 96       	adiw	r30, 0x08	; 8
     8fe:	d6 01       	movw	r26, r12
     900:	13 96       	adiw	r26, 0x03	; 3
     902:	fc 93       	st	X, r31
     904:	ee 93       	st	-X, r30
     906:	12 97       	sbiw	r26, 0x02	; 2
     908:	13 82       	std	Z+3, r1	; 0x03
     90a:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &distant.value; if72.value = &neutral.value; then7.value = &slow.value;
     90c:	2b ed       	ldi	r18, 0xDB	; 219
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	2c 0f       	add	r18, r28
     912:	3d 1f       	adc	r19, r29
     914:	26 5f       	subi	r18, 0xF6	; 246
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	db 01       	movw	r26, r22
     91a:	2d 93       	st	X+, r18
     91c:	3c 93       	st	X, r19
     91e:	0f 2e       	mov	r0, r31
     920:	f7 e0       	ldi	r31, 0x07	; 7
     922:	cf 2e       	mov	r12, r31
     924:	dd 24       	eor	r13, r13
     926:	d3 94       	inc	r13
     928:	f0 2d       	mov	r31, r0
     92a:	cc 0e       	add	r12, r28
     92c:	dd 1e       	adc	r13, r29
     92e:	ba e0       	ldi	r27, 0x0A	; 10
     930:	cb 0e       	add	r12, r27
     932:	d1 1c       	adc	r13, r1
     934:	d8 01       	movw	r26, r16
     936:	cd 92       	st	X+, r12
     938:	dc 92       	st	X, r13
     93a:	b1 82       	std	Z+1, r11	; 0x01
     93c:	a0 82       	st	Z, r10
	
	// if dist is distant and currentEsc is low then speed is average
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     93e:	64 5f       	subi	r22, 0xF4	; 244
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	f4 01       	movw	r30, r8
     944:	71 83       	std	Z+1, r23	; 0x01
     946:	60 83       	st	Z, r22
     948:	04 5f       	subi	r16, 0xF4	; 244
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	db 01       	movw	r26, r22
     94e:	13 96       	adiw	r26, 0x03	; 3
     950:	1c 93       	st	X, r17
     952:	0e 93       	st	-X, r16
     954:	12 97       	sbiw	r26, 0x02	; 2
     956:	f8 01       	movw	r30, r16
     958:	13 82       	std	Z+3, r1	; 0x03
     95a:	12 82       	std	Z+2, r1	; 0x02
     95c:	34 96       	adiw	r30, 0x04	; 4
     95e:	d4 01       	movw	r26, r8
     960:	13 96       	adiw	r26, 0x03	; 3
     962:	fc 93       	st	X, r31
     964:	ee 93       	st	-X, r30
     966:	12 97       	sbiw	r26, 0x02	; 2
     968:	13 82       	std	Z+3, r1	; 0x03
     96a:	12 82       	std	Z+2, r1	; 0x02
	if81.value = &distant.value; if82.value = &low.value; then8.value = &average.value;
     96c:	db 01       	movw	r26, r22
     96e:	2d 93       	st	X+, r18
     970:	3c 93       	st	X, r19
     972:	0f 2e       	mov	r0, r31
     974:	fd e1       	ldi	r31, 0x1D	; 29
     976:	ef 2e       	mov	r14, r31
     978:	ff 24       	eor	r15, r15
     97a:	f3 94       	inc	r15
     97c:	f0 2d       	mov	r31, r0
     97e:	ec 0e       	add	r14, r28
     980:	fd 1e       	adc	r15, r29
     982:	ba e0       	ldi	r27, 0x0A	; 10
     984:	eb 0e       	add	r14, r27
     986:	f1 1c       	adc	r15, r1
     988:	d8 01       	movw	r26, r16
     98a:	ed 92       	st	X+, r14
     98c:	fc 92       	st	X, r15
     98e:	51 83       	std	Z+1, r21	; 0x01
     990:	40 83       	st	Z, r20
	
	// if dist is distant and currentEsc is medium then speed is average
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     992:	64 5f       	subi	r22, 0xF4	; 244
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	f3 01       	movw	r30, r6
     998:	71 83       	std	Z+1, r23	; 0x01
     99a:	60 83       	st	Z, r22
     99c:	4e 01       	movw	r8, r28
     99e:	f9 e9       	ldi	r31, 0x99	; 153
     9a0:	8f 1a       	sub	r8, r31
     9a2:	fd ef       	ldi	r31, 0xFD	; 253
     9a4:	9f 0a       	sbc	r9, r31
     9a6:	db 01       	movw	r26, r22
     9a8:	13 96       	adiw	r26, 0x03	; 3
     9aa:	9c 92       	st	X, r9
     9ac:	8e 92       	st	-X, r8
     9ae:	12 97       	sbiw	r26, 0x02	; 2
     9b0:	f4 01       	movw	r30, r8
     9b2:	13 82       	std	Z+3, r1	; 0x03
     9b4:	12 82       	std	Z+2, r1	; 0x02
     9b6:	34 96       	adiw	r30, 0x04	; 4
     9b8:	d3 01       	movw	r26, r6
     9ba:	13 96       	adiw	r26, 0x03	; 3
     9bc:	fc 93       	st	X, r31
     9be:	ee 93       	st	-X, r30
     9c0:	12 97       	sbiw	r26, 0x02	; 2
     9c2:	13 82       	std	Z+3, r1	; 0x03
     9c4:	12 82       	std	Z+2, r1	; 0x02
	if91.value = &distant.value; if92.value = &medium.value; then9.value = &average.value;
     9c6:	db 01       	movw	r26, r22
     9c8:	2d 93       	st	X+, r18
     9ca:	3c 93       	st	X, r19
     9cc:	03 e3       	ldi	r16, 0x33	; 51
     9ce:	11 e0       	ldi	r17, 0x01	; 1
     9d0:	0c 0f       	add	r16, r28
     9d2:	1d 1f       	adc	r17, r29
     9d4:	06 5f       	subi	r16, 0xF6	; 246
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	d4 01       	movw	r26, r8
     9da:	0d 93       	st	X+, r16
     9dc:	1c 93       	st	X, r17
     9de:	51 83       	std	Z+1, r21	; 0x01
     9e0:	40 83       	st	Z, r20
	
	// if dist is faar and steering is straight and currentEsc is neutral then speed is average
	struct rule_element_type if101, if102, if103, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = &if103; if103.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     9e2:	26 57       	subi	r18, 0x76	; 118
     9e4:	3e 4f       	sbci	r19, 0xFE	; 254
     9e6:	c3 51       	subi	r28, 0x13	; 19
     9e8:	de 4f       	sbci	r29, 0xFE	; 254
     9ea:	39 83       	std	Y+1, r19	; 0x01
     9ec:	28 83       	st	Y, r18
     9ee:	cd 5e       	subi	r28, 0xED	; 237
     9f0:	d1 40       	sbci	r29, 0x01	; 1
     9f2:	60 5f       	subi	r22, 0xF0	; 240
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	f9 01       	movw	r30, r18
     9f8:	73 83       	std	Z+3, r23	; 0x03
     9fa:	62 83       	std	Z+2, r22	; 0x02
     9fc:	4e 01       	movw	r8, r28
     9fe:	f9 e8       	ldi	r31, 0x89	; 137
     a00:	8f 1a       	sub	r8, r31
     a02:	fd ef       	ldi	r31, 0xFD	; 253
     a04:	9f 0a       	sbc	r9, r31
     a06:	db 01       	movw	r26, r22
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	9c 92       	st	X, r9
     a0c:	8e 92       	st	-X, r8
     a0e:	12 97       	sbiw	r26, 0x02	; 2
     a10:	f4 01       	movw	r30, r8
     a12:	13 82       	std	Z+3, r1	; 0x03
     a14:	12 82       	std	Z+2, r1	; 0x02
     a16:	34 96       	adiw	r30, 0x04	; 4
     a18:	c1 51       	subi	r28, 0x11	; 17
     a1a:	de 4f       	sbci	r29, 0xFE	; 254
     a1c:	f9 83       	std	Y+1, r31	; 0x01
     a1e:	e8 83       	st	Y, r30
     a20:	cf 5e       	subi	r28, 0xEF	; 239
     a22:	d1 40       	sbci	r29, 0x01	; 1
     a24:	13 82       	std	Z+3, r1	; 0x03
     a26:	12 82       	std	Z+2, r1	; 0x02
	if101.value = &faar.value; if102.value = &straight.value; if103.value = &neutral.value; then10.value = &slow.value;
     a28:	d9 01       	movw	r26, r18
     a2a:	8d 93       	st	X+, r24
     a2c:	9c 93       	st	X, r25
     a2e:	2d e6       	ldi	r18, 0x6D	; 109
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	2c 0f       	add	r18, r28
     a34:	3d 1f       	adc	r19, r29
     a36:	26 5f       	subi	r18, 0xF6	; 246
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	db 01       	movw	r26, r22
     a3c:	2d 93       	st	X+, r18
     a3e:	3c 93       	st	X, r19
     a40:	d4 01       	movw	r26, r8
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	dc 92       	st	X, r13
     a46:	ce 92       	st	-X, r12
     a48:	b1 82       	std	Z+1, r11	; 0x01
     a4a:	a0 82       	st	Z, r10

	// if dist is faar and steering is straight and currentEsc is low then speed is average
	struct rule_element_type if111, if112, if113, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = &if113; if113.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     a4c:	6e 01       	movw	r12, r28
     a4e:	b1 e8       	ldi	r27, 0x81	; 129
     a50:	cb 1a       	sub	r12, r27
     a52:	bd ef       	ldi	r27, 0xFD	; 253
     a54:	db 0a       	sbc	r13, r27
     a56:	cd 50       	subi	r28, 0x0D	; 13
     a58:	de 4f       	sbci	r29, 0xFE	; 254
     a5a:	d9 82       	std	Y+1, r13	; 0x01
     a5c:	c8 82       	st	Y, r12
     a5e:	c3 5f       	subi	r28, 0xF3	; 243
     a60:	d1 40       	sbci	r29, 0x01	; 1
     a62:	60 5f       	subi	r22, 0xF0	; 240
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	f6 01       	movw	r30, r12
     a68:	73 83       	std	Z+3, r23	; 0x03
     a6a:	62 83       	std	Z+2, r22	; 0x02
     a6c:	50 96       	adiw	r26, 0x10	; 16
     a6e:	fb 01       	movw	r30, r22
     a70:	b3 83       	std	Z+3, r27	; 0x03
     a72:	a2 83       	std	Z+2, r26	; 0x02
     a74:	13 96       	adiw	r26, 0x03	; 3
     a76:	1c 92       	st	X, r1
     a78:	1e 92       	st	-X, r1
     a7a:	12 97       	sbiw	r26, 0x02	; 2
     a7c:	5e 01       	movw	r10, r28
     a7e:	f5 e7       	ldi	r31, 0x75	; 117
     a80:	af 1a       	sub	r10, r31
     a82:	fd ef       	ldi	r31, 0xFD	; 253
     a84:	bf 0a       	sbc	r11, r31
     a86:	cb 50       	subi	r28, 0x0B	; 11
     a88:	de 4f       	sbci	r29, 0xFE	; 254
     a8a:	b9 82       	std	Y+1, r11	; 0x01
     a8c:	a8 82       	st	Y, r10
     a8e:	c5 5f       	subi	r28, 0xF5	; 245
     a90:	d1 40       	sbci	r29, 0x01	; 1
     a92:	f5 01       	movw	r30, r10
     a94:	13 82       	std	Z+3, r1	; 0x03
     a96:	12 82       	std	Z+2, r1	; 0x02
	if111.value = &faar.value; if112.value = &straight.value; if113.value = &low.value; then11.value = &average.value;
     a98:	f6 01       	movw	r30, r12
     a9a:	91 83       	std	Z+1, r25	; 0x01
     a9c:	80 83       	st	Z, r24
     a9e:	fb 01       	movw	r30, r22
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
     aa4:	ed 92       	st	X+, r14
     aa6:	fc 92       	st	X, r15
     aa8:	d5 01       	movw	r26, r10
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	5c 93       	st	X, r21
     aae:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is medium then speed is fast
	struct rule_element_type if121, if122, if123, then12;
	rule12.if_side = &if121; if121.next = &if122; if122.next = &if123; if123.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     ab0:	64 5f       	subi	r22, 0xF4	; 244
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	c7 50       	subi	r28, 0x07	; 7
     ab6:	de 4f       	sbci	r29, 0xFE	; 254
     ab8:	79 83       	std	Y+1, r23	; 0x01
     aba:	68 83       	st	Y, r22
     abc:	c9 5f       	subi	r28, 0xF9	; 249
     abe:	d1 40       	sbci	r29, 0x01	; 1
     ac0:	42 50       	subi	r20, 0x02	; 2
     ac2:	5f 4f       	sbci	r21, 0xFF	; 255
     ac4:	fb 01       	movw	r30, r22
     ac6:	53 83       	std	Z+3, r21	; 0x03
     ac8:	42 83       	std	Z+2, r20	; 0x02
     aca:	1c 96       	adiw	r26, 0x0c	; 12
     acc:	fa 01       	movw	r30, r20
     ace:	b3 83       	std	Z+3, r27	; 0x03
     ad0:	a2 83       	std	Z+2, r26	; 0x02
     ad2:	13 96       	adiw	r26, 0x03	; 3
     ad4:	1c 92       	st	X, r1
     ad6:	1e 92       	st	-X, r1
     ad8:	12 97       	sbiw	r26, 0x02	; 2
     ada:	7e 01       	movw	r14, r28
     adc:	f5 e6       	ldi	r31, 0x65	; 101
     ade:	ef 1a       	sub	r14, r31
     ae0:	fd ef       	ldi	r31, 0xFD	; 253
     ae2:	ff 0a       	sbc	r15, r31
     ae4:	c5 50       	subi	r28, 0x05	; 5
     ae6:	de 4f       	sbci	r29, 0xFE	; 254
     ae8:	f9 82       	std	Y+1, r15	; 0x01
     aea:	e8 82       	st	Y, r14
     aec:	cb 5f       	subi	r28, 0xFB	; 251
     aee:	d1 40       	sbci	r29, 0x01	; 1
     af0:	f7 01       	movw	r30, r14
     af2:	13 82       	std	Z+3, r1	; 0x03
     af4:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &faar.value; if122.value = &straight.value; if123.value = &medium.value; then12.value = &fast.value;
     af6:	fb 01       	movw	r30, r22
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24
     afc:	fa 01       	movw	r30, r20
     afe:	31 83       	std	Z+1, r19	; 0x01
     b00:	20 83       	st	Z, r18
     b02:	0d 93       	st	X+, r16
     b04:	1c 93       	st	X, r17
     b06:	41 ea       	ldi	r20, 0xA1	; 161
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	4c 0f       	add	r20, r28
     b0c:	5d 1f       	adc	r21, r29
     b0e:	46 5f       	subi	r20, 0xF6	; 246
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	d7 01       	movw	r26, r14
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	5c 93       	st	X, r21
     b18:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is high then speed is fast
	struct rule_element_type if131, if132, if133, then13;
	rule13.if_side = &if131; if131.next = &if132; if132.next = &if133; if133.next = NULL; rule13.then_side = &then13; then13.next = NULL;
     b1a:	0e 59       	subi	r16, 0x9E	; 158
     b1c:	1e 4f       	sbci	r17, 0xFE	; 254
     b1e:	c1 50       	subi	r28, 0x01	; 1
     b20:	de 4f       	sbci	r29, 0xFE	; 254
     b22:	19 83       	std	Y+1, r17	; 0x01
     b24:	08 83       	st	Y, r16
     b26:	cf 5f       	subi	r28, 0xFF	; 255
     b28:	d1 40       	sbci	r29, 0x01	; 1
     b2a:	6c 5e       	subi	r22, 0xEC	; 236
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	f8 01       	movw	r30, r16
     b30:	73 83       	std	Z+3, r23	; 0x03
     b32:	62 83       	std	Z+2, r22	; 0x02
     b34:	1c 96       	adiw	r26, 0x0c	; 12
     b36:	fb 01       	movw	r30, r22
     b38:	b3 83       	std	Z+3, r27	; 0x03
     b3a:	a2 83       	std	Z+2, r26	; 0x02
     b3c:	13 96       	adiw	r26, 0x03	; 3
     b3e:	1c 92       	st	X, r1
     b40:	1e 92       	st	-X, r1
     b42:	12 97       	sbiw	r26, 0x02	; 2
     b44:	7e 01       	movw	r14, r28
     b46:	f5 e5       	ldi	r31, 0x55	; 85
     b48:	ef 1a       	sub	r14, r31
     b4a:	fd ef       	ldi	r31, 0xFD	; 253
     b4c:	ff 0a       	sbc	r15, r31
     b4e:	cf 5f       	subi	r28, 0xFF	; 255
     b50:	dd 4f       	sbci	r29, 0xFD	; 253
     b52:	f9 82       	std	Y+1, r15	; 0x01
     b54:	e8 82       	st	Y, r14
     b56:	c1 50       	subi	r28, 0x01	; 1
     b58:	d2 40       	sbci	r29, 0x02	; 2
     b5a:	f7 01       	movw	r30, r14
     b5c:	13 82       	std	Z+3, r1	; 0x03
     b5e:	12 82       	std	Z+2, r1	; 0x02
	if131.value = &faar.value; if132.value = &straight.value; if133.value = &high.value; then13.value = &fast.value;
     b60:	f8 01       	movw	r30, r16
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	80 83       	st	Z, r24
     b66:	fb 01       	movw	r30, r22
     b68:	31 83       	std	Z+1, r19	; 0x01
     b6a:	20 83       	st	Z, r18
     b6c:	69 e4       	ldi	r22, 0x49	; 73
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	6c 0f       	add	r22, r28
     b72:	7d 1f       	adc	r23, r29
     b74:	66 5f       	subi	r22, 0xF6	; 246
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	6d 93       	st	X+, r22
     b7a:	7c 93       	st	X, r23
     b7c:	d7 01       	movw	r26, r14
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	5c 93       	st	X, r21
     b82:	4e 93       	st	-X, r20

	// if dist is faar and steering is straight then speed is fast
	struct rule_element_type if141, if142, then14;
	rule14.if_side = &if141; if141.next = &if142; if142.next = NULL; rule14.then_side = &then14; then14.next = NULL;
     b84:	64 5a       	subi	r22, 0xA4	; 164
     b86:	7e 4f       	sbci	r23, 0xFE	; 254
     b88:	cb 5f       	subi	r28, 0xFB	; 251
     b8a:	dd 4f       	sbci	r29, 0xFD	; 253
     b8c:	79 83       	std	Y+1, r23	; 0x01
     b8e:	68 83       	st	Y, r22
     b90:	c5 50       	subi	r28, 0x05	; 5
     b92:	d2 40       	sbci	r29, 0x02	; 2
     b94:	18 96       	adiw	r26, 0x08	; 8
     b96:	fb 01       	movw	r30, r22
     b98:	b3 83       	std	Z+3, r27	; 0x03
     b9a:	a2 83       	std	Z+2, r26	; 0x02
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	1c 92       	st	X, r1
     ba0:	1e 92       	st	-X, r1
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	08 5e       	subi	r16, 0xE8	; 232
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
     ba8:	c9 5f       	subi	r28, 0xF9	; 249
     baa:	dd 4f       	sbci	r29, 0xFD	; 253
     bac:	19 83       	std	Y+1, r17	; 0x01
     bae:	08 83       	st	Y, r16
     bb0:	c7 50       	subi	r28, 0x07	; 7
     bb2:	d2 40       	sbci	r29, 0x02	; 2
     bb4:	f8 01       	movw	r30, r16
     bb6:	13 82       	std	Z+3, r1	; 0x03
     bb8:	12 82       	std	Z+2, r1	; 0x02
	if141.value = &faar.value; if142.value = &straight.value; then14.value = &fast.value;
     bba:	fb 01       	movw	r30, r22
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
     bc0:	2d 93       	st	X+, r18
     bc2:	3c 93       	st	X, r19
     bc4:	d8 01       	movw	r26, r16
     bc6:	4d 93       	st	X+, r20
     bc8:	5c 93       	st	X, r21


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     bca:	94 d0       	rcall	.+296    	; 0xcf4 <fuzzification>
	rule_evaluation();
     bcc:	ba d0       	rcall	.+372    	; 0xd42 <rule_evaluation>
	defuzzification();
     bce:	ff d0       	rcall	.+510    	; 0xdce <defuzzification>

	if (speed.value > MAXESC)
     bd0:	8b ad       	ldd	r24, Y+59	; 0x3b
     bd2:	9c ad       	ldd	r25, Y+60	; 0x3c
     bd4:	83 32       	cpi	r24, 0x23	; 35
     bd6:	bb e0       	ldi	r27, 0x0B	; 11
     bd8:	9b 07       	cpc	r25, r27
     bda:	24 f0       	brlt	.+8      	; 0xbe4 <FLC_speed+0xabc>
	{
		setESC(MAXESC);
     bdc:	82 e2       	ldi	r24, 0x22	; 34
     bde:	9b e0       	ldi	r25, 0x0B	; 11
     be0:	9e d7       	rcall	.+3900   	; 0x1b1e <setESC>
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <FLC_speed+0xace>
	}
	else if (speed.value < NEUTRAL)
     be4:	8d 3c       	cpi	r24, 0xCD	; 205
     be6:	ea e0       	ldi	r30, 0x0A	; 10
     be8:	9e 07       	cpc	r25, r30
     bea:	24 f4       	brge	.+8      	; 0xbf4 <FLC_speed+0xacc>
	{
		setESC(NEUTRAL);
     bec:	8d ec       	ldi	r24, 0xCD	; 205
     bee:	9a e0       	ldi	r25, 0x0A	; 10
     bf0:	96 d7       	rcall	.+3884   	; 0x1b1e <setESC>
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <FLC_speed+0xace>
	}
	else
	{
		setESC(speed.value);
     bf4:	94 d7       	rcall	.+3880   	; 0x1b1e <setESC>
	}
    
    
}
     bf6:	c6 54       	subi	r28, 0x46	; 70
     bf8:	dd 4f       	sbci	r29, 0xFD	; 253
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	6f 90       	pop	r6
     c20:	5f 90       	pop	r5
     c22:	4f 90       	pop	r4
     c24:	3f 90       	pop	r3
     c26:	2f 90       	pop	r2
     c28:	08 95       	ret

00000c2a <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c2a:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c2c:	84 85       	ldd	r24, Z+12	; 0x0c
     c2e:	95 85       	ldd	r25, Z+13	; 0x0d
     c30:	9b 01       	movw	r18, r22
     c32:	28 1b       	sub	r18, r24
     c34:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c36:	86 85       	ldd	r24, Z+14	; 0x0e
     c38:	97 85       	ldd	r25, Z+15	; 0x0f
     c3a:	86 1b       	sub	r24, r22
     c3c:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c3e:	12 16       	cp	r1, r18
     c40:	13 06       	cpc	r1, r19
     c42:	f4 f4       	brge	.+60     	; 0xc80 <compute_degree_of_membership+0x56>
     c44:	18 16       	cp	r1, r24
     c46:	19 06       	cpc	r1, r25
     c48:	f4 f4       	brge	.+60     	; 0xc86 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c4a:	60 89       	ldd	r22, Z+16	; 0x10
     c4c:	71 89       	ldd	r23, Z+17	; 0x11
     c4e:	a2 89       	ldd	r26, Z+18	; 0x12
     c50:	b3 89       	ldd	r27, Z+19	; 0x13
     c52:	8a 9f       	mul	r24, r26
     c54:	a0 01       	movw	r20, r0
     c56:	8b 9f       	mul	r24, r27
     c58:	50 0d       	add	r21, r0
     c5a:	9a 9f       	mul	r25, r26
     c5c:	50 0d       	add	r21, r0
     c5e:	11 24       	eor	r1, r1
     c60:	26 9f       	mul	r18, r22
     c62:	c0 01       	movw	r24, r0
     c64:	27 9f       	mul	r18, r23
     c66:	90 0d       	add	r25, r0
     c68:	36 9f       	mul	r19, r22
     c6a:	90 0d       	add	r25, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	48 17       	cp	r20, r24
     c70:	59 07       	cpc	r21, r25
     c72:	0c f4       	brge	.+2      	; 0xc76 <compute_degree_of_membership+0x4c>
     c74:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	91 05       	cpc	r25, r1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <compute_degree_of_membership+0x54>
     c7c:	3c f4       	brge	.+14     	; 0xc8c <compute_degree_of_membership+0x62>
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <compute_degree_of_membership+0x66>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c90:	93 87       	std	Z+11, r25	; 0x0b
     c92:	82 87       	std	Z+10, r24	; 0x0a
     c94:	08 95       	ret

00000c96 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     ca0:	c6 85       	ldd	r28, Z+14	; 0x0e
     ca2:	d7 85       	ldd	r29, Z+15	; 0x0f
     ca4:	84 85       	ldd	r24, Z+12	; 0x0c
     ca6:	95 85       	ldd	r25, Z+13	; 0x0d
     ca8:	c8 1b       	sub	r28, r24
     caa:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     cac:	22 85       	ldd	r18, Z+10	; 0x0a
     cae:	33 85       	ldd	r19, Z+11	; 0x0b
     cb0:	60 89       	ldd	r22, Z+16	; 0x10
     cb2:	71 89       	ldd	r23, Z+17	; 0x11
     cb4:	c9 01       	movw	r24, r18
     cb6:	0e 94 a2 11 	call	0x2344	; 0x2344 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     cba:	8e 01       	movw	r16, r28
     cbc:	06 1b       	sub	r16, r22
     cbe:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     cc0:	62 89       	ldd	r22, Z+18	; 0x12
     cc2:	73 89       	ldd	r23, Z+19	; 0x13
     cc4:	c9 01       	movw	r24, r18
     cc6:	0e 94 a2 11 	call	0x2344	; 0x2344 <__divmodhi4>
    top = base - run_1 - run_2;
     cca:	06 1b       	sub	r16, r22
     ccc:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     cce:	c0 0f       	add	r28, r16
     cd0:	d1 1f       	adc	r29, r17
     cd2:	2c 9f       	mul	r18, r28
     cd4:	c0 01       	movw	r24, r0
     cd6:	2d 9f       	mul	r18, r29
     cd8:	90 0d       	add	r25, r0
     cda:	3c 9f       	mul	r19, r28
     cdc:	90 0d       	add	r25, r0
     cde:	11 24       	eor	r1, r1
     ce0:	99 23       	and	r25, r25
     ce2:	0c f4       	brge	.+2      	; 0xce6 <compute_area_of_trapezoid+0x50>
     ce4:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     ce6:	95 95       	asr	r25
     ce8:	87 95       	ror	r24
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     cfc:	00 91 06 03 	lds	r16, 0x0306
     d00:	10 91 07 03 	lds	r17, 0x0307
     d04:	01 15       	cp	r16, r1
     d06:	11 05       	cpc	r17, r1
     d08:	b9 f0       	breq	.+46     	; 0xd38 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d0a:	f8 01       	movw	r30, r16
     d0c:	c4 85       	ldd	r28, Z+12	; 0x0c
     d0e:	d5 85       	ldd	r29, Z+13	; 0x0d
     d10:	20 97       	sbiw	r28, 0x00	; 0
     d12:	61 f0       	breq	.+24     	; 0xd2c <fuzzification+0x38>
            if (mf!=NULL) {
     d14:	20 97       	sbiw	r28, 0x00	; 0
     d16:	29 f0       	breq	.+10     	; 0xd22 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     d18:	f8 01       	movw	r30, r16
     d1a:	62 85       	ldd	r22, Z+10	; 0x0a
     d1c:	73 85       	ldd	r23, Z+11	; 0x0b
     d1e:	ce 01       	movw	r24, r28
     d20:	84 df       	rcall	.-248    	; 0xc2a <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d22:	0c 88       	ldd	r0, Y+20	; 0x14
     d24:	dd 89       	ldd	r29, Y+21	; 0x15
     d26:	c0 2d       	mov	r28, r0
     d28:	20 97       	sbiw	r28, 0x00	; 0
     d2a:	a1 f7       	brne	.-24     	; 0xd14 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d2c:	f8 01       	movw	r30, r16
     d2e:	06 85       	ldd	r16, Z+14	; 0x0e
     d30:	17 85       	ldd	r17, Z+15	; 0x0f
     d32:	01 15       	cp	r16, r1
     d34:	11 05       	cpc	r17, r1
     d36:	49 f7       	brne	.-46     	; 0xd0a <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d4a:	c0 91 08 03 	lds	r28, 0x0308
     d4e:	d0 91 09 03 	lds	r29, 0x0309
     d52:	20 97       	sbiw	r28, 0x00	; 0
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d5a:	e8 81       	ld	r30, Y
     d5c:	f9 81       	ldd	r31, Y+1	; 0x01
     d5e:	30 97       	sbiw	r30, 0x00	; 0
     d60:	81 f0       	breq	.+32     	; 0xd82 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d62:	20 2f       	mov	r18, r16
     d64:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d66:	a0 81       	ld	r26, Z
     d68:	b1 81       	ldd	r27, Z+1	; 0x01
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	0c f4       	brge	.+2      	; 0xd76 <rule_evaluation+0x34>
     d74:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d76:	02 80       	ldd	r0, Z+2	; 0x02
     d78:	f3 81       	ldd	r31, Z+3	; 0x03
     d7a:	e0 2d       	mov	r30, r0
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	99 f7       	brne	.-26     	; 0xd66 <rule_evaluation+0x24>
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d82:	20 2f       	mov	r18, r16
     d84:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d86:	ea 81       	ldd	r30, Y+2	; 0x02
     d88:	fb 81       	ldd	r31, Y+3	; 0x03
     d8a:	30 97       	sbiw	r30, 0x00	; 0
     d8c:	b1 f0       	breq	.+44     	; 0xdba <rule_evaluation+0x78>
     d8e:	72 2f       	mov	r23, r18
     d90:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d92:	a0 81       	ld	r26, Z
     d94:	b1 81       	ldd	r27, Z+1	; 0x01
     d96:	8d 91       	ld	r24, X+
     d98:	9c 91       	ld	r25, X
     d9a:	11 97       	sbiw	r26, 0x01	; 1
     d9c:	57 2f       	mov	r21, r23
     d9e:	46 2f       	mov	r20, r22
     da0:	28 17       	cp	r18, r24
     da2:	39 07       	cpc	r19, r25
     da4:	14 f4       	brge	.+4      	; 0xdaa <rule_evaluation+0x68>
     da6:	58 2f       	mov	r21, r24
     da8:	49 2f       	mov	r20, r25
     daa:	5c 93       	st	X, r21
     dac:	11 96       	adiw	r26, 0x01	; 1
     dae:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     db0:	02 80       	ldd	r0, Z+2	; 0x02
     db2:	f3 81       	ldd	r31, Z+3	; 0x03
     db4:	e0 2d       	mov	r30, r0
     db6:	30 97       	sbiw	r30, 0x00	; 0
     db8:	61 f7       	brne	.-40     	; 0xd92 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     dba:	0c 80       	ldd	r0, Y+4	; 0x04
     dbc:	dd 81       	ldd	r29, Y+5	; 0x05
     dbe:	c0 2d       	mov	r28, r0
     dc0:	20 97       	sbiw	r28, 0x00	; 0
     dc2:	59 f6       	brne	.-106    	; 0xd5a <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     dce:	2f 92       	push	r2
     dd0:	3f 92       	push	r3
     dd2:	4f 92       	push	r4
     dd4:	5f 92       	push	r5
     dd6:	6f 92       	push	r6
     dd8:	7f 92       	push	r7
     dda:	8f 92       	push	r8
     ddc:	9f 92       	push	r9
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <defuzzification+0x26>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <defuzzification+0x28>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <defuzzification+0x2a>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     dfc:	80 91 04 03 	lds	r24, 0x0304
     e00:	90 91 05 03 	lds	r25, 0x0305
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	89 2b       	or	r24, r25
     e0a:	09 f4       	brne	.+2      	; 0xe0e <defuzzification+0x40>
     e0c:	8d c0       	rjmp	.+282    	; 0xf28 <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     e0e:	eb 81       	ldd	r30, Y+3	; 0x03
     e10:	fc 81       	ldd	r31, Y+4	; 0x04
     e12:	04 84       	ldd	r0, Z+12	; 0x0c
     e14:	f5 85       	ldd	r31, Z+13	; 0x0d
     e16:	e0 2d       	mov	r30, r0
     e18:	fe 83       	std	Y+6, r31	; 0x06
     e1a:	ed 83       	std	Y+5, r30	; 0x05
     e1c:	ef 2b       	or	r30, r31
     e1e:	09 f4       	brne	.+2      	; 0xe22 <defuzzification+0x54>
     e20:	6e c0       	rjmp	.+220    	; 0xefe <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     e22:	51 2c       	mov	r5, r1
     e24:	61 2c       	mov	r6, r1
     e26:	71 2c       	mov	r7, r1
     e28:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e2a:	31 2c       	mov	r3, r1
     e2c:	21 2c       	mov	r2, r1
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	2f df       	rcall	.-418    	; 0xc96 <compute_area_of_trapezoid>
     e38:	bc 01       	movw	r22, r24
     e3a:	88 27       	eor	r24, r24
     e3c:	77 fd       	sbrc	r23, 7
     e3e:	80 95       	com	r24
     e40:	98 2f       	mov	r25, r24
     e42:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatsisf>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e4a:	ed 81       	ldd	r30, Y+5	; 0x05
     e4c:	fe 81       	ldd	r31, Y+6	; 0x06
     e4e:	04 85       	ldd	r16, Z+12	; 0x0c
     e50:	15 85       	ldd	r17, Z+13	; 0x0d
     e52:	b8 01       	movw	r22, r16
     e54:	88 27       	eor	r24, r24
     e56:	77 fd       	sbrc	r23, 7
     e58:	80 95       	com	r24
     e5a:	98 2f       	mov	r25, r24
     e5c:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatsisf>
     e60:	4b 01       	movw	r8, r22
     e62:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e64:	ed 81       	ldd	r30, Y+5	; 0x05
     e66:	fe 81       	ldd	r31, Y+6	; 0x06
     e68:	86 85       	ldd	r24, Z+14	; 0x0e
     e6a:	97 85       	ldd	r25, Z+15	; 0x0f
     e6c:	80 1b       	sub	r24, r16
     e6e:	91 0b       	sbc	r25, r17
     e70:	bc 01       	movw	r22, r24
     e72:	12 f4       	brpl	.+4      	; 0xe78 <defuzzification+0xaa>
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	75 95       	asr	r23
     e7a:	67 95       	ror	r22
            centroid = centroid + intermed;
     e7c:	88 27       	eor	r24, r24
     e7e:	77 fd       	sbrc	r23, 7
     e80:	80 95       	com	r24
     e82:	98 2f       	mov	r25, r24
     e84:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatsisf>
     e88:	a5 01       	movw	r20, r10
     e8a:	94 01       	movw	r18, r8
     e8c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__addsf3>
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 3f 11 	call	0x227e	; 0x227e <__mulsf3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	63 2d       	mov	r22, r3
     ea2:	72 2d       	mov	r23, r2
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__addsf3>
     eac:	36 2e       	mov	r3, r22
     eae:	27 2e       	mov	r2, r23
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     eb4:	a7 01       	movw	r20, r14
     eb6:	96 01       	movw	r18, r12
     eb8:	65 2d       	mov	r22, r5
     eba:	76 2d       	mov	r23, r6
     ebc:	87 2d       	mov	r24, r7
     ebe:	94 2d       	mov	r25, r4
     ec0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__addsf3>
     ec4:	56 2e       	mov	r5, r22
     ec6:	67 2e       	mov	r6, r23
     ec8:	78 2e       	mov	r7, r24
     eca:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     ecc:	ed 81       	ldd	r30, Y+5	; 0x05
     ece:	fe 81       	ldd	r31, Y+6	; 0x06
     ed0:	04 88       	ldd	r0, Z+20	; 0x14
     ed2:	f5 89       	ldd	r31, Z+21	; 0x15
     ed4:	e0 2d       	mov	r30, r0
     ed6:	fe 83       	std	Y+6, r31	; 0x06
     ed8:	ed 83       	std	Y+5, r30	; 0x05
     eda:	ef 2b       	or	r30, r31
     edc:	09 f0       	breq	.+2      	; 0xee0 <defuzzification+0x112>
     ede:	a9 cf       	rjmp	.-174    	; 0xe32 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     ee0:	26 2f       	mov	r18, r22
     ee2:	37 2f       	mov	r19, r23
     ee4:	48 2f       	mov	r20, r24
     ee6:	59 2f       	mov	r21, r25
     ee8:	63 2d       	mov	r22, r3
     eea:	72 2d       	mov	r23, r2
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	0e 94 18 10 	call	0x2030	; 0x2030 <__divsf3>
     ef4:	26 2f       	mov	r18, r22
     ef6:	37 2f       	mov	r19, r23
     ef8:	48 2f       	mov	r20, r24
     efa:	59 2f       	mov	r21, r25
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     f06:	62 2f       	mov	r22, r18
     f08:	73 2f       	mov	r23, r19
     f0a:	84 2f       	mov	r24, r20
     f0c:	95 2f       	mov	r25, r21
     f0e:	0e 94 80 10 	call	0x2100	; 0x2100 <__fixsfsi>
     f12:	eb 81       	ldd	r30, Y+3	; 0x03
     f14:	fc 81       	ldd	r31, Y+4	; 0x04
     f16:	73 87       	std	Z+11, r23	; 0x0b
     f18:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     f1a:	86 85       	ldd	r24, Z+14	; 0x0e
     f1c:	97 85       	ldd	r25, Z+15	; 0x0f
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	89 2b       	or	r24, r25
     f24:	09 f0       	breq	.+2      	; 0xf28 <defuzzification+0x15a>
     f26:	73 cf       	rjmp	.-282    	; 0xe0e <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     f28:	26 96       	adiw	r28, 0x06	; 6
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	cf 90       	pop	r12
     f44:	bf 90       	pop	r11
     f46:	af 90       	pop	r10
     f48:	9f 90       	pop	r9
     f4a:	8f 90       	pop	r8
     f4c:	7f 90       	pop	r7
     f4e:	6f 90       	pop	r6
     f50:	5f 90       	pop	r5
     f52:	4f 90       	pop	r4
     f54:	3f 90       	pop	r3
     f56:	2f 90       	pop	r2
     f58:	08 95       	ret

00000f5a <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
     f70:	6a 01       	movw	r12, r20
     f72:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     f74:	0e 94 26 12 	call	0x244c	; 0x244c <strcpy>
    newMf->value = 0;
     f78:	1b 86       	std	Y+11, r1	; 0x0b
     f7a:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     f7c:	dd 86       	std	Y+13, r13	; 0x0d
     f7e:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     f80:	ff 86       	std	Y+15, r15	; 0x0f
     f82:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     f84:	b5 01       	movw	r22, r10
     f86:	6c 19       	sub	r22, r12
     f88:	7d 09       	sbc	r23, r13
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	31 e0       	ldi	r19, 0x01	; 1
     f8e:	c9 01       	movw	r24, r18
     f90:	0e 94 a2 11 	call	0x2344	; 0x2344 <__divmodhi4>
     f94:	79 8b       	std	Y+17, r23	; 0x11
     f96:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     f98:	b7 01       	movw	r22, r14
     f9a:	60 1b       	sub	r22, r16
     f9c:	71 0b       	sbc	r23, r17
     f9e:	c9 01       	movw	r24, r18
     fa0:	0e 94 a2 11 	call	0x2344	; 0x2344 <__divmodhi4>
     fa4:	7b 8b       	std	Y+19, r23	; 0x13
     fa6:	6a 8b       	std	Y+18, r22	; 0x12
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	08 95       	ret

00000fbe <intersection>:
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
     fbe:	62 37       	cpi	r22, 0x72	; 114
     fc0:	21 f4       	brne	.+8      	; 0xfca <intersection+0xc>
    {
		setServo(MAXRIGHT);
     fc2:	84 ee       	ldi	r24, 0xE4	; 228
     fc4:	9c e0       	ldi	r25, 0x0C	; 12
     fc6:	c6 c5       	rjmp	.+2956   	; 0x1b54 <setServo>
     fc8:	08 95       	ret
    }
	else if (type == 'l')
     fca:	6c 36       	cpi	r22, 0x6C	; 108
     fcc:	79 f4       	brne	.+30     	; 0xfec <intersection+0x2e>
	{
		if (checkCount(1200) == 0) // if count less than 500 ms then, keep straight
     fce:	80 eb       	ldi	r24, 0xB0	; 176
     fd0:	94 e0       	ldi	r25, 0x04	; 4
     fd2:	8b d8       	rcall	.-3818   	; 0xea <checkCount>
     fd4:	89 2b       	or	r24, r25
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <intersection+0x22>
		{
			setServo(STRAIGHT);
     fd8:	84 e6       	ldi	r24, 0x64	; 100
     fda:	9a e0       	ldi	r25, 0x0A	; 10
     fdc:	bb c5       	rjmp	.+2934   	; 0x1b54 <setServo>
     fde:	08 95       	ret
		}
		else
		{
		count(0);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	72 d8       	rcall	.-3868   	; 0xca <count>
		setServo(MAXLEFT);
     fe6:	86 ee       	ldi	r24, 0xE6	; 230
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	b4 c5       	rjmp	.+2920   	; 0x1b54 <setServo>
     fec:	08 95       	ret

00000fee <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	0b b6       	in	r0, 0x3b	; 59
     ffa:	0f 92       	push	r0
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	80 91 ce 00 	lds	r24, 0x00CE
    1008:	8f 3f       	cpi	r24, 0xFF	; 255
    100a:	29 f4       	brne	.+10     	; 0x1016 <__vector_28+0x28>
    100c:	10 92 e7 01 	sts	0x01E7, r1
    1010:	10 92 e6 01 	sts	0x01E6, r1
    1014:	10 c0       	rjmp	.+32     	; 0x1036 <__vector_28+0x48>
    1016:	e0 91 e6 01 	lds	r30, 0x01E6
    101a:	f0 91 e7 01 	lds	r31, 0x01E7
    101e:	e6 5f       	subi	r30, 0xF6	; 246
    1020:	fc 4f       	sbci	r31, 0xFC	; 252
    1022:	80 83       	st	Z, r24
    1024:	80 91 e6 01 	lds	r24, 0x01E6
    1028:	90 91 e7 01 	lds	r25, 0x01E7
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	90 93 e7 01 	sts	0x01E7, r25
    1032:	80 93 e6 01 	sts	0x01E6, r24
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	0f 90       	pop	r0
    1040:	0b be       	out	0x3b, r0	; 59
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <carInit>:
    104c:	59 d5       	rcall	.+2738   	; 0x1b00 <pwmInit>
    104e:	36 d6       	rcall	.+3180   	; 0x1cbc <spi_slave_init>
    1050:	8d ec       	ldi	r24, 0xCD	; 205
    1052:	9a e0       	ldi	r25, 0x0A	; 10
    1054:	90 93 89 00 	sts	0x0089, r25
    1058:	80 93 88 00 	sts	0x0088, r24
    105c:	84 e6       	ldi	r24, 0x64	; 100
    105e:	9a e0       	ldi	r25, 0x0A	; 10
    1060:	90 93 8b 00 	sts	0x008B, r25
    1064:	80 93 8a 00 	sts	0x008A, r24
    1068:	08 95       	ret

0000106a <USART1_init>:
    106a:	ec ec       	ldi	r30, 0xCC	; 204
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	11 82       	std	Z+1, r1	; 0x01
    1070:	10 82       	st	Z, r1
    1072:	20 e9       	ldi	r18, 0x90	; 144
    1074:	20 93 c9 00 	sts	0x00C9, r18
    1078:	2e e0       	ldi	r18, 0x0E	; 14
    107a:	20 93 ca 00 	sts	0x00CA, r18
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	10 92 e7 01 	sts	0x01E7, r1
    1086:	10 92 e6 01 	sts	0x01E6, r1
    108a:	08 95       	ret

0000108c <main>:




int main (void)
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2b 97       	sbiw	r28, 0x0b	; 11
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	nFuzzySteering(120, 0);
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	88 e7       	ldi	r24, 0x78	; 120
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0a d5       	rcall	.+2580   	; 0x1abe <nFuzzySteering>

	
	carInit();
    10aa:	d0 df       	rcall	.-96     	; 0x104c <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	90 ee       	ldi	r25, 0xE0	; 224
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <main+0x26>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <main+0x30>
    10bc:	00 00       	nop
	int k_value_stop_line;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    10be:	87 e0       	ldi	r24, 0x07	; 7
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	d3 df       	rcall	.-90     	; 0x106a <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    10c8:	78 94       	sei
				setServo(STRAIGHT);
			}
			
			else if (control_mode == 1)
			{
				FLC_speed(OCR1A, sF, OCR1B);
    10ca:	0f 2e       	mov	r0, r31
    10cc:	fa e8       	ldi	r31, 0x8A	; 138
    10ce:	af 2e       	mov	r10, r31
    10d0:	b1 2c       	mov	r11, r1
    10d2:	f0 2d       	mov	r31, r0
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f8 e8       	ldi	r31, 0x88	; 136
    10d8:	cf 2e       	mov	r12, r31
    10da:	d1 2c       	mov	r13, r1
    10dc:	f0 2d       	mov	r31, r0
	sei();
	
	

	while (1) {
		if (is_package_recieved()) {
    10de:	4e d6       	rcall	.+3228   	; 0x1d7c <is_package_recieved>
    10e0:	88 23       	and	r24, r24
    10e2:	e9 f3       	breq	.-6      	; 0x10de <main+0x52>
			

			//Reading Information
			prev_control_mode = control_mode;
    10e4:	1b 85       	ldd	r17, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	ce 01       	movw	r24, r28
    10ee:	0b 96       	adiw	r24, 0x0b	; 11
    10f0:	4f d6       	rcall	.+3230   	; 0x1d90 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    10f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	59 f4       	brne	.+22     	; 0x110e <main+0x82>
    10f8:	11 11       	cpse	r17, r1
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <main+0x98>
				onGoingStop = 0;
    10fc:	10 92 e9 01 	sts	0x01E9, r1
    1100:	10 92 e8 01 	sts	0x01E8, r1
				count(1);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 65 00 	call	0xca	; 0xca <count>
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <main+0x98>
			k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
			if(control_mode == 1 && prev_control_mode == 4 && sensor_info.next_turn_decision == 'l'){
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	49 f4       	brne	.+18     	; 0x1124 <main+0x98>
    1112:	14 30       	cpi	r17, 0x04	; 4
    1114:	39 f4       	brne	.+14     	; 0x1124 <main+0x98>
    1116:	8a 85       	ldd	r24, Y+10	; 0x0a
    1118:	8c 36       	cpi	r24, 0x6C	; 108
    111a:	21 f4       	brne	.+8      	; 0x1124 <main+0x98>
				count(1);
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 65 00 	call	0xca	; 0xca <count>
			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1124:	6b 81       	ldd	r22, Y+3	; 0x03
    1126:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
    1128:	09 81       	ldd	r16, Y+1	; 0x01
    112a:	10 e0       	ldi	r17, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
    112c:	ea 80       	ldd	r14, Y+2	; 0x02
    112e:	f1 2c       	mov	r15, r1
			int gyro = (int) sensor_info.angle;
    1130:	98 84       	ldd	r9, Y+8	; 0x08
			unsigned char type = (unsigned) (char) sensor_info.next_turn_decision;
    1132:	8a 84       	ldd	r8, Y+10	; 0x0a
			
			cli();
    1134:	f8 94       	cli
			
			if (control_mode == 0)
    1136:	8b 85       	ldd	r24, Y+11	; 0x0b
    1138:	81 11       	cpse	r24, r1
    113a:	0c c0       	rjmp	.+24     	; 0x1154 <main+0xc8>
			{
				FLC_speed(OCR1A, sF, OCR1B);
    113c:	f5 01       	movw	r30, r10
    113e:	40 81       	ld	r20, Z
    1140:	51 81       	ldd	r21, Z+1	; 0x01
    1142:	f6 01       	movw	r30, r12
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	0e 94 94 00 	call	0x128	; 0x128 <FLC_speed>
				nFuzzySteering(c,v);
    114c:	b7 01       	movw	r22, r14
    114e:	c8 01       	movw	r24, r16
    1150:	b6 d4       	rcall	.+2412   	; 0x1abe <nFuzzySteering>
    1152:	19 c0       	rjmp	.+50     	; 0x1186 <main+0xfa>
			}
			else if (control_mode == 4)
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	39 f4       	brne	.+14     	; 0x1166 <main+0xda>
			{
				setESC(NEUTRAL);
    1158:	8d ec       	ldi	r24, 0xCD	; 205
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	e0 d4       	rcall	.+2496   	; 0x1b1e <setESC>
				setServo(STRAIGHT);
    115e:	84 e6       	ldi	r24, 0x64	; 100
    1160:	9a e0       	ldi	r25, 0x0A	; 10
    1162:	f8 d4       	rcall	.+2544   	; 0x1b54 <setServo>
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <main+0xfa>
			}
			
			else if (control_mode == 1)
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	71 f4       	brne	.+28     	; 0x1186 <main+0xfa>
			{
				FLC_speed(OCR1A, sF, OCR1B);
    116a:	f5 01       	movw	r30, r10
    116c:	40 81       	ld	r20, Z
    116e:	51 81       	ldd	r21, Z+1	; 0x01
    1170:	f6 01       	movw	r30, r12
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	0e 94 94 00 	call	0x128	; 0x128 <FLC_speed>
				intersection(gyro, type, c, v);
    117a:	97 01       	movw	r18, r14
    117c:	a8 01       	movw	r20, r16
    117e:	68 2d       	mov	r22, r8
    1180:	89 2d       	mov	r24, r9
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	1c df       	rcall	.-456    	; 0xfbe <intersection>
			}

			
			sei();
    1186:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1188:	f6 01       	movw	r30, r12
    118a:	e0 80       	ld	r14, Z
    118c:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    118e:	f5 01       	movw	r30, r10
    1190:	00 81       	ld	r16, Z
    1192:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	9b d5       	rcall	.+2870   	; 0x1cce <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1198:	8e 2d       	mov	r24, r14
    119a:	99 d5       	rcall	.+2866   	; 0x1cce <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	97 d5       	rcall	.+2862   	; 0x1cce <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    11a0:	80 2f       	mov	r24, r16
    11a2:	95 d5       	rcall	.+2858   	; 0x1cce <spi_send_byte>
    11a4:	9c cf       	rjmp	.-200    	; 0x10de <main+0x52>

000011a6 <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{
    11a6:	2f 92       	push	r2
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	ce 55       	subi	r28, 0x5E	; 94
    11d0:	d2 40       	sbci	r29, 0x02	; 2
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	c3 5a       	subi	r28, 0xA3	; 163
    11de:	dd 4f       	sbci	r29, 0xFD	; 253
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	88 83       	st	Y, r24
    11e4:	cd 55       	subi	r28, 0x5D	; 93
    11e6:	d2 40       	sbci	r29, 0x02	; 2
    11e8:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    11ea:	88 e0       	ldi	r24, 0x08	; 8
    11ec:	e4 e8       	ldi	r30, 0x84	; 132
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	de 01       	movw	r26, r28
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	01 90       	ld	r0, Z+
    11f6:	0d 92       	st	X+, r0
    11f8:	8a 95       	dec	r24
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 110, 125); // Min_value = 100
    11fc:	3e 01       	movw	r6, r28
    11fe:	21 e1       	ldi	r18, 0x11	; 17
    1200:	62 0e       	add	r6, r18
    1202:	71 1c       	adc	r7, r1
    1204:	0f 2e       	mov	r0, r31
    1206:	fd e7       	ldi	r31, 0x7D	; 125
    1208:	ef 2e       	mov	r14, r31
    120a:	f1 2c       	mov	r15, r1
    120c:	f0 2d       	mov	r31, r0
    120e:	0e e6       	ldi	r16, 0x6E	; 110
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	24 e6       	ldi	r18, 0x64	; 100
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	43 e6       	ldi	r20, 0x63	; 99
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	6c e8       	ldi	r22, 0x8C	; 140
    121c:	71 e0       	ldi	r23, 0x01	; 1
    121e:	c3 01       	movw	r24, r6
    1220:	9c de       	rcall	.-712    	; 0xf5a <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRig", 115, 130, 130, 145);
    1222:	4e 01       	movw	r8, r28
    1224:	47 e2       	ldi	r20, 0x27	; 39
    1226:	84 0e       	add	r8, r20
    1228:	91 1c       	adc	r9, r1
    122a:	0f 2e       	mov	r0, r31
    122c:	f1 e9       	ldi	r31, 0x91	; 145
    122e:	ef 2e       	mov	r14, r31
    1230:	f1 2c       	mov	r15, r1
    1232:	f0 2d       	mov	r31, r0
    1234:	02 e8       	ldi	r16, 0x82	; 130
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	22 e8       	ldi	r18, 0x82	; 130
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	43 e7       	ldi	r20, 0x73	; 115
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	65 e9       	ldi	r22, 0x95	; 149
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	c4 01       	movw	r24, r8
    1246:	89 de       	rcall	.-750    	; 0xf5a <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135, 150, 150, 165);
    1248:	2e 01       	movw	r4, r28
    124a:	5d e3       	ldi	r21, 0x3D	; 61
    124c:	45 0e       	add	r4, r21
    124e:	51 1c       	adc	r5, r1
    1250:	0f 2e       	mov	r0, r31
    1252:	f5 ea       	ldi	r31, 0xA5	; 165
    1254:	ef 2e       	mov	r14, r31
    1256:	f1 2c       	mov	r15, r1
    1258:	f0 2d       	mov	r31, r0
    125a:	06 e9       	ldi	r16, 0x96	; 150
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	26 e9       	ldi	r18, 0x96	; 150
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	47 e8       	ldi	r20, 0x87	; 135
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	6e e9       	ldi	r22, 0x9E	; 158
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	c2 01       	movw	r24, r4
    126c:	76 de       	rcall	.-788    	; 0xf5a <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLe", 155, 170, 170, 185);
    126e:	5e 01       	movw	r10, r28
    1270:	63 e5       	ldi	r22, 0x53	; 83
    1272:	a6 0e       	add	r10, r22
    1274:	b1 1c       	adc	r11, r1
    1276:	0f 2e       	mov	r0, r31
    1278:	f9 eb       	ldi	r31, 0xB9	; 185
    127a:	ef 2e       	mov	r14, r31
    127c:	f1 2c       	mov	r15, r1
    127e:	f0 2d       	mov	r31, r0
    1280:	0a ea       	ldi	r16, 0xAA	; 170
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	2a ea       	ldi	r18, 0xAA	; 170
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4b e9       	ldi	r20, 0x9B	; 155
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	65 ea       	ldi	r22, 0xA5	; 165
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	c5 01       	movw	r24, r10
    1292:	63 de       	rcall	.-826    	; 0xf5a <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 175, 190, 200, 201);  // Max_value = 200
    1294:	6e 01       	movw	r12, r28
    1296:	79 e6       	ldi	r23, 0x69	; 105
    1298:	c7 0e       	add	r12, r23
    129a:	d1 1c       	adc	r13, r1
    129c:	0f 2e       	mov	r0, r31
    129e:	f9 ec       	ldi	r31, 0xC9	; 201
    12a0:	ef 2e       	mov	r14, r31
    12a2:	f1 2c       	mov	r15, r1
    12a4:	f0 2d       	mov	r31, r0
    12a6:	08 ec       	ldi	r16, 0xC8	; 200
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	2e eb       	ldi	r18, 0xBE	; 190
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4f ea       	ldi	r20, 0xAF	; 175
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	6d ea       	ldi	r22, 0xAD	; 173
    12b4:	71 e0       	ldi	r23, 0x01	; 1
    12b6:	c6 01       	movw	r24, r12
    12b8:	50 de       	rcall	.-864    	; 0xf5a <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    12ba:	7e 86       	std	Y+14, r7	; 0x0e
    12bc:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    12be:	9e a2       	std	Y+38, r9	; 0x26
    12c0:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    12c2:	5c ae       	std	Y+60, r5	; 0x3c
    12c4:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    12c6:	63 96       	adiw	r28, 0x13	; 19
    12c8:	bf ae       	std	Y+63, r11	; 0x3f
    12ca:	ae ae       	std	Y+62, r10	; 0x3e
    12cc:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    12ce:	d5 01       	movw	r26, r10
    12d0:	55 96       	adiw	r26, 0x15	; 21
    12d2:	dc 92       	st	X, r13
    12d4:	ce 92       	st	-X, r12
    12d6:	54 97       	sbiw	r26, 0x14	; 20
	farLeft.next = NULL;
    12d8:	f6 01       	movw	r30, r12
    12da:	15 8a       	std	Z+21, r1	; 0x15
    12dc:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    12de:	c3 5a       	subi	r28, 0xA3	; 163
    12e0:	dd 4f       	sbci	r29, 0xFD	; 253
    12e2:	48 81       	ld	r20, Y
    12e4:	59 81       	ldd	r21, Y+1	; 0x01
    12e6:	cd 55       	subi	r28, 0x5D	; 93
    12e8:	d2 40       	sbci	r29, 0x02	; 2
    12ea:	44 36       	cpi	r20, 0x64	; 100
    12ec:	51 05       	cpc	r21, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <nDoFuzzy+0x154>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    12f0:	84 e6       	ldi	r24, 0x64	; 100
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 87       	std	Y+12, r25	; 0x0c
    12f6:	8b 87       	std	Y+11, r24	; 0x0b
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <nDoFuzzy+0x180>
	}
	else if(c>200)			// if sensor value is bigger than delta_C's input set's upper limit
    12fa:	c3 5a       	subi	r28, 0xA3	; 163
    12fc:	dd 4f       	sbci	r29, 0xFD	; 253
    12fe:	68 81       	ld	r22, Y
    1300:	79 81       	ldd	r23, Y+1	; 0x01
    1302:	cd 55       	subi	r28, 0x5D	; 93
    1304:	d2 40       	sbci	r29, 0x02	; 2
    1306:	69 3c       	cpi	r22, 0xC9	; 201
    1308:	71 05       	cpc	r23, r1
    130a:	2c f0       	brlt	.+10     	; 0x1316 <nDoFuzzy+0x170>
	{
		delta_C.value = 200;  // force input value to lowest point in delta_C's input set
    130c:	88 ec       	ldi	r24, 0xC8	; 200
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 87       	std	Y+12, r25	; 0x0c
    1312:	8b 87       	std	Y+11, r24	; 0x0b
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <nDoFuzzy+0x180>
	}
	else
	{
		delta_C.value = c;
    1316:	c3 5a       	subi	r28, 0xA3	; 163
    1318:	dd 4f       	sbci	r29, 0xFD	; 253
    131a:	88 81       	ld	r24, Y
    131c:	99 81       	ldd	r25, Y+1	; 0x01
    131e:	cd 55       	subi	r28, 0x5D	; 93
    1320:	d2 40       	sbci	r29, 0x02	; 2
    1322:	9c 87       	std	Y+12, r25	; 0x0c
    1324:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    1326:	88 e0       	ldi	r24, 0x08	; 8
    1328:	e5 eb       	ldi	r30, 0xB5	; 181
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	de 01       	movw	r26, r28
    132e:	a1 58       	subi	r26, 0x81	; 129
    1330:	bf 4f       	sbci	r27, 0xFF	; 255
    1332:	01 90       	ld	r0, Z+
    1334:	0d 92       	st	X+, r0
    1336:	8a 95       	dec	r24
    1338:	e1 f7       	brne	.-8      	; 0x1332 <nDoFuzzy+0x18c>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOri", -1, 0, 0, 60); // min V is 0
    133a:	4e 01       	movw	r8, r28
    133c:	9f e8       	ldi	r25, 0x8F	; 143
    133e:	89 0e       	add	r8, r25
    1340:	91 1c       	adc	r9, r1
    1342:	0f 2e       	mov	r0, r31
    1344:	fc e3       	ldi	r31, 0x3C	; 60
    1346:	ef 2e       	mov	r14, r31
    1348:	f1 2c       	mov	r15, r1
    134a:	f0 2d       	mov	r31, r0
    134c:	00 e0       	ldi	r16, 0x00	; 0
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	4f ef       	ldi	r20, 0xFF	; 255
    1356:	5f ef       	ldi	r21, 0xFF	; 255
    1358:	6d eb       	ldi	r22, 0xBD	; 189
    135a:	71 e0       	ldi	r23, 0x01	; 1
    135c:	c4 01       	movw	r24, r8
    135e:	fd dd       	rcall	.-1030   	; 0xf5a <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOri", 10, 40, 40, 70);
    1360:	5e 01       	movw	r10, r28
    1362:	a5 ea       	ldi	r26, 0xA5	; 165
    1364:	aa 0e       	add	r10, r26
    1366:	b1 1c       	adc	r11, r1
    1368:	0f 2e       	mov	r0, r31
    136a:	f6 e4       	ldi	r31, 0x46	; 70
    136c:	ef 2e       	mov	r14, r31
    136e:	f1 2c       	mov	r15, r1
    1370:	f0 2d       	mov	r31, r0
    1372:	08 e2       	ldi	r16, 0x28	; 40
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	28 e2       	ldi	r18, 0x28	; 40
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a e0       	ldi	r20, 0x0A	; 10
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	65 ec       	ldi	r22, 0xC5	; 197
    1380:	71 e0       	ldi	r23, 0x01	; 1
    1382:	c5 01       	movw	r24, r10
    1384:	ea dd       	rcall	.-1068   	; 0xf5a <MATLAB_MF>
		
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "rightOri", 20, 80, 80, 81); // max V is 80
    1386:	6e 01       	movw	r12, r28
    1388:	bb eb       	ldi	r27, 0xBB	; 187
    138a:	cb 0e       	add	r12, r27
    138c:	d1 1c       	adc	r13, r1
    138e:	0f 2e       	mov	r0, r31
    1390:	f1 e5       	ldi	r31, 0x51	; 81
    1392:	ef 2e       	mov	r14, r31
    1394:	f1 2c       	mov	r15, r1
    1396:	f0 2d       	mov	r31, r0
    1398:	00 e5       	ldi	r16, 0x50	; 80
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	20 e5       	ldi	r18, 0x50	; 80
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	44 e1       	ldi	r20, 0x14	; 20
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	6d ec       	ldi	r22, 0xCD	; 205
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	c6 01       	movw	r24, r12
    13aa:	d7 dd       	rcall	.-1106   	; 0xf5a <MATLAB_MF>

	delta_V.membership_functions = &leftOriented;
    13ac:	c5 57       	subi	r28, 0x75	; 117
    13ae:	df 4f       	sbci	r29, 0xFF	; 255
    13b0:	99 82       	std	Y+1, r9	; 0x01
    13b2:	88 82       	st	Y, r8
    13b4:	cb 58       	subi	r28, 0x8B	; 139
    13b6:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    13b8:	f4 01       	movw	r30, r8
    13ba:	b5 8a       	std	Z+21, r11	; 0x15
    13bc:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    13be:	d5 01       	movw	r26, r10
    13c0:	55 96       	adiw	r26, 0x15	; 21
    13c2:	dc 92       	st	X, r13
    13c4:	ce 92       	st	-X, r12
    13c6:	54 97       	sbiw	r26, 0x14	; 20
	rightOriented.next = NULL;
    13c8:	f6 01       	movw	r30, r12
    13ca:	15 8a       	std	Z+21, r1	; 0x15
    13cc:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<=0)				// if sensor value is smaller than error's input set lower limit
    13ce:	12 14       	cp	r1, r2
    13d0:	13 04       	cpc	r1, r3
    13d2:	4c f0       	brlt	.+18     	; 0x13e6 <nDoFuzzy+0x240>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	c7 57       	subi	r28, 0x77	; 119
    13da:	df 4f       	sbci	r29, 0xFF	; 255
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	88 83       	st	Y, r24
    13e0:	c9 58       	subi	r28, 0x89	; 137
    13e2:	d0 40       	sbci	r29, 0x00	; 0
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <nDoFuzzy+0x266>
	}
	else if(v>=80)			// if sensor value is bigger than error's input set's upper limit
    13e6:	f0 e5       	ldi	r31, 0x50	; 80
    13e8:	2f 16       	cp	r2, r31
    13ea:	31 04       	cpc	r3, r1
    13ec:	4c f0       	brlt	.+18     	; 0x1400 <nDoFuzzy+0x25a>
	{
		delta_V.value = 79;  // force input value to lowest point in error's input set
    13ee:	8f e4       	ldi	r24, 0x4F	; 79
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	c7 57       	subi	r28, 0x77	; 119
    13f4:	df 4f       	sbci	r29, 0xFF	; 255
    13f6:	99 83       	std	Y+1, r25	; 0x01
    13f8:	88 83       	st	Y, r24
    13fa:	c9 58       	subi	r28, 0x89	; 137
    13fc:	d0 40       	sbci	r29, 0x00	; 0
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <nDoFuzzy+0x266>
	}
	else
	{
		delta_V.value = v;
    1400:	c7 57       	subi	r28, 0x77	; 119
    1402:	df 4f       	sbci	r29, 0xFF	; 255
    1404:	39 82       	std	Y+1, r3	; 0x01
    1406:	28 82       	st	Y, r2
    1408:	c9 58       	subi	r28, 0x89	; 137
    140a:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    140c:	6e 01       	movw	r12, r28
    140e:	21 ed       	ldi	r18, 0xD1	; 209
    1410:	c2 0e       	add	r12, r18
    1412:	d1 1c       	adc	r13, r1
    1414:	89 e0       	ldi	r24, 0x09	; 9
    1416:	e9 e0       	ldi	r30, 0x09	; 9
    1418:	f1 e0       	ldi	r31, 0x01	; 1
    141a:	d6 01       	movw	r26, r12
    141c:	01 90       	ld	r0, Z+
    141e:	0d 92       	st	X+, r0
    1420:	8a 95       	dec	r24
    1422:	e1 f7       	brne	.-8      	; 0x141c <nDoFuzzy+0x276>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLe", 220, 221, 221, 239);
    1424:	5e 01       	movw	r10, r28
    1426:	41 ee       	ldi	r20, 0xE1	; 225
    1428:	a4 0e       	add	r10, r20
    142a:	b1 1c       	adc	r11, r1
    142c:	0f 2e       	mov	r0, r31
    142e:	ff ee       	ldi	r31, 0xEF	; 239
    1430:	ef 2e       	mov	r14, r31
    1432:	f1 2c       	mov	r15, r1
    1434:	f0 2d       	mov	r31, r0
    1436:	0d ed       	ldi	r16, 0xDD	; 221
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	2d ed       	ldi	r18, 0xDD	; 221
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4c ed       	ldi	r20, 0xDC	; 220
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	66 ed       	ldi	r22, 0xD6	; 214
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	c5 01       	movw	r24, r10
    1448:	88 dd       	rcall	.-1264   	; 0xf5a <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 231, 245, 245, 259);
    144a:	4e 01       	movw	r8, r28
    144c:	57 ef       	ldi	r21, 0xF7	; 247
    144e:	85 0e       	add	r8, r21
    1450:	91 1c       	adc	r9, r1
    1452:	0f 2e       	mov	r0, r31
    1454:	f3 e0       	ldi	r31, 0x03	; 3
    1456:	ef 2e       	mov	r14, r31
    1458:	ff 24       	eor	r15, r15
    145a:	f3 94       	inc	r15
    145c:	f0 2d       	mov	r31, r0
    145e:	05 ef       	ldi	r16, 0xF5	; 245
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	25 ef       	ldi	r18, 0xF5	; 245
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	47 ee       	ldi	r20, 0xE7	; 231
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	60 e2       	ldi	r22, 0x20	; 32
    146c:	71 e0       	ldi	r23, 0x01	; 1
    146e:	c4 01       	movw	r24, r8
    1470:	74 dd       	rcall	.-1304   	; 0xf5a <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 251, 266, 266, 281);
    1472:	3e 01       	movw	r6, r28
    1474:	63 ef       	ldi	r22, 0xF3	; 243
    1476:	66 1a       	sub	r6, r22
    1478:	6e ef       	ldi	r22, 0xFE	; 254
    147a:	76 0a       	sbc	r7, r22
    147c:	0f 2e       	mov	r0, r31
    147e:	f9 e1       	ldi	r31, 0x19	; 25
    1480:	ef 2e       	mov	r14, r31
    1482:	ff 24       	eor	r15, r15
    1484:	f3 94       	inc	r15
    1486:	f0 2d       	mov	r31, r0
    1488:	0a e0       	ldi	r16, 0x0A	; 10
    148a:	11 e0       	ldi	r17, 0x01	; 1
    148c:	2a e0       	ldi	r18, 0x0A	; 10
    148e:	31 e0       	ldi	r19, 0x01	; 1
    1490:	4b ef       	ldi	r20, 0xFB	; 251
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	65 e2       	ldi	r22, 0x25	; 37
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	c3 01       	movw	r24, r6
    149a:	5f dd       	rcall	.-1346   	; 0xf5a <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 273, 287, 287, 301);
    149c:	2e 01       	movw	r4, r28
    149e:	7d ed       	ldi	r23, 0xDD	; 221
    14a0:	47 1a       	sub	r4, r23
    14a2:	7e ef       	ldi	r23, 0xFE	; 254
    14a4:	57 0a       	sbc	r5, r23
    14a6:	0f 2e       	mov	r0, r31
    14a8:	fd e2       	ldi	r31, 0x2D	; 45
    14aa:	ef 2e       	mov	r14, r31
    14ac:	ff 24       	eor	r15, r15
    14ae:	f3 94       	inc	r15
    14b0:	f0 2d       	mov	r31, r0
    14b2:	0f e1       	ldi	r16, 0x1F	; 31
    14b4:	11 e0       	ldi	r17, 0x01	; 1
    14b6:	2f e1       	ldi	r18, 0x1F	; 31
    14b8:	31 e0       	ldi	r19, 0x01	; 1
    14ba:	41 e1       	ldi	r20, 0x11	; 17
    14bc:	51 e0       	ldi	r21, 0x01	; 1
    14be:	6e e2       	ldi	r22, 0x2E	; 46
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	c2 01       	movw	r24, r4
    14c4:	4a dd       	rcall	.-1388   	; 0xf5a <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRi", 293, 311, 311, 312);
    14c6:	1e 01       	movw	r2, r28
    14c8:	87 ec       	ldi	r24, 0xC7	; 199
    14ca:	28 1a       	sub	r2, r24
    14cc:	8e ef       	ldi	r24, 0xFE	; 254
    14ce:	38 0a       	sbc	r3, r24
    14d0:	0f 2e       	mov	r0, r31
    14d2:	f8 e3       	ldi	r31, 0x38	; 56
    14d4:	ef 2e       	mov	r14, r31
    14d6:	ff 24       	eor	r15, r15
    14d8:	f3 94       	inc	r15
    14da:	f0 2d       	mov	r31, r0
    14dc:	07 e3       	ldi	r16, 0x37	; 55
    14de:	11 e0       	ldi	r17, 0x01	; 1
    14e0:	27 e3       	ldi	r18, 0x37	; 55
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	45 e2       	ldi	r20, 0x25	; 37
    14e6:	51 e0       	ldi	r21, 0x01	; 1
    14e8:	6e ed       	ldi	r22, 0xDE	; 222
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	c1 01       	movw	r24, r2
    14ee:	35 dd       	rcall	.-1430   	; 0xf5a <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    14f0:	d6 01       	movw	r26, r12
    14f2:	1d 96       	adiw	r26, 0x0d	; 13
    14f4:	3c 92       	st	X, r3
    14f6:	2e 92       	st	-X, r2
    14f8:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
    14fa:	f1 01       	movw	r30, r2
    14fc:	55 8a       	std	Z+21, r5	; 0x15
    14fe:	44 8a       	std	Z+20, r4	; 0x14
	right.next = &straight;
    1500:	d2 01       	movw	r26, r4
    1502:	55 96       	adiw	r26, 0x15	; 21
    1504:	7c 92       	st	X, r7
    1506:	6e 92       	st	-X, r6
    1508:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
    150a:	f3 01       	movw	r30, r6
    150c:	95 8a       	std	Z+21, r9	; 0x15
    150e:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &sharpLeft;
    1510:	d4 01       	movw	r26, r8
    1512:	55 96       	adiw	r26, 0x15	; 21
    1514:	bc 92       	st	X, r11
    1516:	ae 92       	st	-X, r10
    1518:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
    151a:	f5 01       	movw	r30, r10
    151c:	15 8a       	std	Z+21, r1	; 0x15
    151e:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	90 93 07 03 	sts	0x0307, r25
    1528:	80 93 06 03 	sts	0x0306, r24
	delta_C.next = &delta_V;
    152c:	e2 56       	subi	r30, 0x62	; 98
    152e:	f1 09       	sbc	r31, r1
    1530:	f8 8b       	std	Y+16, r31	; 0x10
    1532:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    1534:	17 86       	std	Z+15, r1	; 0x0f
    1536:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    1538:	d0 92 05 03 	sts	0x0305, r13
    153c:	c0 92 04 03 	sts	0x0304, r12
	steering.next = NULL;
    1540:	d6 01       	movw	r26, r12
    1542:	1f 96       	adiw	r26, 0x0f	; 15
    1544:	1c 92       	st	X, r1
    1546:	1e 92       	st	-X, r1
    1548:	1e 97       	sbiw	r26, 0x0e	; 14

	//RULE 15 "if deltaC is farRight and deltaV is leftOriented then steering is straight"
	struct rule_element_type then15;
	then15.value = &straight.value;
    154a:	be 01       	movw	r22, r28
    154c:	61 5b       	subi	r22, 0xB1	; 177
    154e:	7e 4f       	sbci	r23, 0xFE	; 254
    1550:	73 01       	movw	r14, r6
    1552:	ba e0       	ldi	r27, 0x0A	; 10
    1554:	eb 0e       	add	r14, r27
    1556:	f1 1c       	adc	r15, r1
    1558:	fb 01       	movw	r30, r22
    155a:	f1 82       	std	Z+1, r15	; 0x01
    155c:	e0 82       	st	Z, r14
	then15.next = NULL;
    155e:	13 82       	std	Z+3, r1	; 0x03
    1560:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if152;
	if152.value = &leftOriented.value;
    1562:	de 01       	movw	r26, r28
    1564:	ad 5a       	subi	r26, 0xAD	; 173
    1566:	be 4f       	sbci	r27, 0xFE	; 254
    1568:	9e 01       	movw	r18, r28
    156a:	27 56       	subi	r18, 0x67	; 103
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	11 96       	adiw	r26, 0x01	; 1
    1570:	3c 93       	st	X, r19
    1572:	2e 93       	st	-X, r18
	if152.next = NULL;
    1574:	13 96       	adiw	r26, 0x03	; 3
    1576:	1c 92       	st	X, r1
    1578:	1e 92       	st	-X, r1
    157a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if151;
	if151.value = &farRight.value;
    157c:	8a 5a       	subi	r24, 0xAA	; 170
    157e:	9e 4f       	sbci	r25, 0xFE	; 254
    1580:	3e 01       	movw	r6, r28
    1582:	fb e1       	ldi	r31, 0x1B	; 27
    1584:	6f 0e       	add	r6, r31
    1586:	71 1c       	adc	r7, r1
    1588:	fc 01       	movw	r30, r24
    158a:	71 82       	std	Z+1, r7	; 0x01
    158c:	60 82       	st	Z, r6
	if151.next = &if152;
    158e:	b3 83       	std	Z+3, r27	; 0x03
    1590:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule15;
	rule15.if_side = &if151;
    1592:	18 96       	adiw	r26, 0x08	; 8
    1594:	11 96       	adiw	r26, 0x01	; 1
    1596:	9c 93       	st	X, r25
    1598:	8e 93       	st	-X, r24
	rule15.then_side = &then15;
    159a:	13 96       	adiw	r26, 0x03	; 3
    159c:	7c 93       	st	X, r23
    159e:	6e 93       	st	-X, r22
    15a0:	12 97       	sbiw	r26, 0x02	; 2
	rule15.next = NULL;
    15a2:	15 96       	adiw	r26, 0x05	; 5
    15a4:	1c 92       	st	X, r1
    15a6:	1e 92       	st	-X, r1
    15a8:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 14 "if deltaC is farRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then14;
	then14.value = &left.value;
    15aa:	6e 5e       	subi	r22, 0xEE	; 238
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	8f 0e       	add	r8, r31
    15b2:	91 1c       	adc	r9, r1
    15b4:	fb 01       	movw	r30, r22
    15b6:	91 82       	std	Z+1, r9	; 0x01
    15b8:	80 82       	st	Z, r8
	then14.next = NULL;
    15ba:	13 82       	std	Z+3, r1	; 0x03
    15bc:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if142;
	if142.value = &straightOriented.value;
    15be:	8e 01       	movw	r16, r28
    15c0:	0b 59       	subi	r16, 0x9B	; 155
    15c2:	1e 4f       	sbci	r17, 0xFE	; 254
    15c4:	88 5a       	subi	r24, 0xA8	; 168
    15c6:	91 09       	sbc	r25, r1
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
	if142.next = NULL;
    15ce:	13 82       	std	Z+3, r1	; 0x03
    15d0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if141;
	if141.value = &farRight.value;
    15d2:	ae 01       	movw	r20, r28
    15d4:	47 59       	subi	r20, 0x97	; 151
    15d6:	5e 4f       	sbci	r21, 0xFE	; 254
    15d8:	fa 01       	movw	r30, r20
    15da:	71 82       	std	Z+1, r7	; 0x01
    15dc:	60 82       	st	Z, r6
	if141.next = &if142;
    15de:	13 83       	std	Z+3, r17	; 0x03
    15e0:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule14;
	rule14.if_side = &if141;
    15e2:	34 96       	adiw	r30, 0x04	; 4
    15e4:	51 83       	std	Z+1, r21	; 0x01
    15e6:	40 83       	st	Z, r20
	rule14.then_side = &then14;
    15e8:	73 83       	std	Z+3, r23	; 0x03
    15ea:	62 83       	std	Z+2, r22	; 0x02
	rule14.next = &rule15;
    15ec:	b5 83       	std	Z+5, r27	; 0x05
    15ee:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 13 "if deltaC is farRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then13;
	then13.value = &sharpLeft.value;
    15f0:	02 5f       	subi	r16, 0xF2	; 242
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	4e 57       	subi	r20, 0x7E	; 126
    15f6:	51 09       	sbc	r21, r1
    15f8:	c3 5a       	subi	r28, 0xA3	; 163
    15fa:	dd 4f       	sbci	r29, 0xFD	; 253
    15fc:	59 83       	std	Y+1, r21	; 0x01
    15fe:	48 83       	st	Y, r20
    1600:	cd 55       	subi	r28, 0x5D	; 93
    1602:	d2 40       	sbci	r29, 0x02	; 2
    1604:	d8 01       	movw	r26, r16
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	5c 93       	st	X, r21
    160a:	4e 93       	st	-X, r20
	then13.next = NULL;
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	1c 92       	st	X, r1
    1610:	1e 92       	st	-X, r1
    1612:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if132;
	if132.value = &rightOriented.value;
    1614:	5e 01       	movw	r10, r28
    1616:	b9 e8       	ldi	r27, 0x89	; 137
    1618:	ab 1a       	sub	r10, r27
    161a:	be ef       	ldi	r27, 0xFE	; 254
    161c:	bb 0a       	sbc	r11, r27
    161e:	46 52       	subi	r20, 0x26	; 38
    1620:	51 09       	sbc	r21, r1
    1622:	d5 01       	movw	r26, r10
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	5c 93       	st	X, r21
    1628:	4e 93       	st	-X, r20
	if132.next = NULL;
    162a:	13 96       	adiw	r26, 0x03	; 3
    162c:	1c 92       	st	X, r1
    162e:	1e 92       	st	-X, r1
    1630:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if131;
	if131.value = &farRight.value;
    1632:	66 5e       	subi	r22, 0xE6	; 230
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	db 01       	movw	r26, r22
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	7c 92       	st	X, r7
    163c:	6e 92       	st	-X, r6
	if131.next = &if132;
    163e:	13 96       	adiw	r26, 0x03	; 3
    1640:	bc 92       	st	X, r11
    1642:	ae 92       	st	-X, r10
    1644:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule13;
	rule13.if_side = &if131;
    1646:	14 96       	adiw	r26, 0x04	; 4
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	7c 93       	st	X, r23
    164c:	6e 93       	st	-X, r22
	rule13.then_side = &then13;
    164e:	13 96       	adiw	r26, 0x03	; 3
    1650:	1c 93       	st	X, r17
    1652:	0e 93       	st	-X, r16
    1654:	12 97       	sbiw	r26, 0x02	; 2
	rule13.next = &rule14;
    1656:	15 96       	adiw	r26, 0x05	; 5
    1658:	fc 93       	st	X, r31
    165a:	ee 93       	st	-X, r30
    165c:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 12 "if deltaC is smallRight and deltaV is leftOriented then steering is right"
	struct rule_element_type then12;
	then12.value = &right.value;
    165e:	0e 5e       	subi	r16, 0xEE	; 238
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	ea e0       	ldi	r30, 0x0A	; 10
    1664:	4e 0e       	add	r4, r30
    1666:	51 1c       	adc	r5, r1
    1668:	f8 01       	movw	r30, r16
    166a:	51 82       	std	Z+1, r5	; 0x01
    166c:	40 82       	st	Z, r4
	then12.next = NULL;
    166e:	13 82       	std	Z+3, r1	; 0x03
    1670:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if122;
	if122.value = &leftOriented.value;
    1672:	3e 01       	movw	r6, r28
    1674:	f7 e7       	ldi	r31, 0x77	; 119
    1676:	6f 1a       	sub	r6, r31
    1678:	fe ef       	ldi	r31, 0xFE	; 254
    167a:	7f 0a       	sbc	r7, r31
    167c:	f3 01       	movw	r30, r6
    167e:	31 83       	std	Z+1, r19	; 0x01
    1680:	20 83       	st	Z, r18
	if122.next = NULL;
    1682:	13 82       	std	Z+3, r1	; 0x03
    1684:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if121;
	if121.value = &smallRight.value;
    1686:	5e 01       	movw	r10, r28
    1688:	f1 e3       	ldi	r31, 0x31	; 49
    168a:	af 0e       	add	r10, r31
    168c:	b1 1c       	adc	r11, r1
    168e:	c3 57       	subi	r28, 0x73	; 115
    1690:	de 4f       	sbci	r29, 0xFE	; 254
    1692:	b9 82       	std	Y+1, r11	; 0x01
    1694:	a8 82       	st	Y, r10
    1696:	cd 58       	subi	r28, 0x8D	; 141
    1698:	d1 40       	sbci	r29, 0x01	; 1
	if121.next = &if122;
    169a:	c1 57       	subi	r28, 0x71	; 113
    169c:	de 4f       	sbci	r29, 0xFE	; 254
    169e:	79 82       	std	Y+1, r7	; 0x01
    16a0:	68 82       	st	Y, r6
    16a2:	cf 58       	subi	r28, 0x8F	; 143
    16a4:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule12;
	rule12.if_side = &if121;
    16a6:	38 96       	adiw	r30, 0x08	; 8
    16a8:	6d e8       	ldi	r22, 0x8D	; 141
    16aa:	71 e0       	ldi	r23, 0x01	; 1
    16ac:	6c 0f       	add	r22, r28
    16ae:	7d 1f       	adc	r23, r29
    16b0:	71 83       	std	Z+1, r23	; 0x01
    16b2:	60 83       	st	Z, r22
	rule12.then_side = &then12;
    16b4:	13 83       	std	Z+3, r17	; 0x03
    16b6:	02 83       	std	Z+2, r16	; 0x02
	rule12.next = &rule13;
    16b8:	b5 83       	std	Z+5, r27	; 0x05
    16ba:	a4 83       	std	Z+4, r26	; 0x04


	//RULE 11 "if deltaC is smallRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then11;
	then11.value = &left.value;
    16bc:	0e 5e       	subi	r16, 0xEE	; 238
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	d8 01       	movw	r26, r16
    16c2:	11 96       	adiw	r26, 0x01	; 1
    16c4:	9c 92       	st	X, r9
    16c6:	8e 92       	st	-X, r8
	then11.next = NULL;
    16c8:	13 96       	adiw	r26, 0x03	; 3
    16ca:	1c 92       	st	X, r1
    16cc:	1e 92       	st	-X, r1
    16ce:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if112;
	if112.value = &straightOriented.value;
    16d0:	3e 01       	movw	r6, r28
    16d2:	b5 e6       	ldi	r27, 0x65	; 101
    16d4:	6b 1a       	sub	r6, r27
    16d6:	be ef       	ldi	r27, 0xFE	; 254
    16d8:	7b 0a       	sbc	r7, r27
    16da:	d3 01       	movw	r26, r6
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	9c 93       	st	X, r25
    16e0:	8e 93       	st	-X, r24
	if112.next = NULL;
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	1c 92       	st	X, r1
    16e6:	1e 92       	st	-X, r1
    16e8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if111;
	if111.value = &smallRight.value;
    16ea:	6e 5e       	subi	r22, 0xEE	; 238
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	db 01       	movw	r26, r22
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	bc 92       	st	X, r11
    16f4:	ae 92       	st	-X, r10
	if111.next = &if112;
    16f6:	13 96       	adiw	r26, 0x03	; 3
    16f8:	7c 92       	st	X, r7
    16fa:	6e 92       	st	-X, r6
    16fc:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule11;
	rule11.if_side = &if111;
    16fe:	14 96       	adiw	r26, 0x04	; 4
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	7c 93       	st	X, r23
    1704:	6e 93       	st	-X, r22
	rule11.then_side = &then11;
    1706:	13 96       	adiw	r26, 0x03	; 3
    1708:	1c 93       	st	X, r17
    170a:	0e 93       	st	-X, r16
    170c:	12 97       	sbiw	r26, 0x02	; 2
	rule11.next = &rule12;
    170e:	15 96       	adiw	r26, 0x05	; 5
    1710:	fc 93       	st	X, r31
    1712:	ee 93       	st	-X, r30
    1714:	14 97       	sbiw	r26, 0x04	; 4


	//RULE 10 "if deltaC is smallRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then10;
	then10.value = &sharpLeft.value;
    1716:	0e 5e       	subi	r16, 0xEE	; 238
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	c3 5a       	subi	r28, 0xA3	; 163
    171c:	dd 4f       	sbci	r29, 0xFD	; 253
    171e:	68 81       	ld	r22, Y
    1720:	79 81       	ldd	r23, Y+1	; 0x01
    1722:	cd 55       	subi	r28, 0x5D	; 93
    1724:	d2 40       	sbci	r29, 0x02	; 2
    1726:	f8 01       	movw	r30, r16
    1728:	71 83       	std	Z+1, r23	; 0x01
    172a:	60 83       	st	Z, r22
	then10.next = NULL;
    172c:	13 82       	std	Z+3, r1	; 0x03
    172e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if102;
	if102.value = &rightOriented.value;
    1730:	3e 01       	movw	r6, r28
    1732:	73 e5       	ldi	r23, 0x53	; 83
    1734:	67 1a       	sub	r6, r23
    1736:	7e ef       	ldi	r23, 0xFE	; 254
    1738:	77 0a       	sbc	r7, r23
    173a:	f3 01       	movw	r30, r6
    173c:	51 83       	std	Z+1, r21	; 0x01
    173e:	40 83       	st	Z, r20
	if102.next = NULL;
    1740:	13 82       	std	Z+3, r1	; 0x03
    1742:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if101;
	if101.value = &smallRight.value;
    1744:	be 01       	movw	r22, r28
    1746:	6f 54       	subi	r22, 0x4F	; 79
    1748:	7e 4f       	sbci	r23, 0xFE	; 254
    174a:	fb 01       	movw	r30, r22
    174c:	b1 82       	std	Z+1, r11	; 0x01
    174e:	a0 82       	st	Z, r10
	if101.next = &if102;
    1750:	73 82       	std	Z+3, r7	; 0x03
    1752:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule10;
	rule10.if_side = &if101;
    1754:	34 96       	adiw	r30, 0x04	; 4
    1756:	71 83       	std	Z+1, r23	; 0x01
    1758:	60 83       	st	Z, r22
	rule10.then_side = &then10;
    175a:	13 83       	std	Z+3, r17	; 0x03
    175c:	02 83       	std	Z+2, r16	; 0x02
	rule10.next = &rule11;
    175e:	b5 83       	std	Z+5, r27	; 0x05
    1760:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 9 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type then9;
	then9.value = &right.value;
    1762:	0e 5e       	subi	r16, 0xEE	; 238
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	d8 01       	movw	r26, r16
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	5c 92       	st	X, r5
    176c:	4e 92       	st	-X, r4
	then9.next = NULL;
    176e:	13 96       	adiw	r26, 0x03	; 3
    1770:	1c 92       	st	X, r1
    1772:	1e 92       	st	-X, r1
    1774:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &leftOriented.value;
    1776:	3e 01       	movw	r6, r28
    1778:	b1 e4       	ldi	r27, 0x41	; 65
    177a:	6b 1a       	sub	r6, r27
    177c:	be ef       	ldi	r27, 0xFE	; 254
    177e:	7b 0a       	sbc	r7, r27
    1780:	d3 01       	movw	r26, r6
    1782:	11 96       	adiw	r26, 0x01	; 1
    1784:	3c 93       	st	X, r19
    1786:	2e 93       	st	-X, r18
	if92.next = NULL;
    1788:	13 96       	adiw	r26, 0x03	; 3
    178a:	1c 92       	st	X, r1
    178c:	1e 92       	st	-X, r1
    178e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if91;
	if91.value = &centre.value;
    1790:	5e 01       	movw	r10, r28
    1792:	b7 e4       	ldi	r27, 0x47	; 71
    1794:	ab 0e       	add	r10, r27
    1796:	b1 1c       	adc	r11, r1
    1798:	cd 53       	subi	r28, 0x3D	; 61
    179a:	de 4f       	sbci	r29, 0xFE	; 254
    179c:	b9 82       	std	Y+1, r11	; 0x01
    179e:	a8 82       	st	Y, r10
    17a0:	c3 5c       	subi	r28, 0xC3	; 195
    17a2:	d1 40       	sbci	r29, 0x01	; 1
	if91.next = &if92;
    17a4:	cb 53       	subi	r28, 0x3B	; 59
    17a6:	de 4f       	sbci	r29, 0xFE	; 254
    17a8:	79 82       	std	Y+1, r7	; 0x01
    17aa:	68 82       	st	Y, r6
    17ac:	c5 5c       	subi	r28, 0xC5	; 197
    17ae:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule9;
	rule9.if_side = &if91;
    17b0:	18 96       	adiw	r26, 0x08	; 8
    17b2:	63 ec       	ldi	r22, 0xC3	; 195
    17b4:	71 e0       	ldi	r23, 0x01	; 1
    17b6:	6c 0f       	add	r22, r28
    17b8:	7d 1f       	adc	r23, r29
    17ba:	11 96       	adiw	r26, 0x01	; 1
    17bc:	7c 93       	st	X, r23
    17be:	6e 93       	st	-X, r22
	rule9.then_side = &then9;
    17c0:	13 96       	adiw	r26, 0x03	; 3
    17c2:	1c 93       	st	X, r17
    17c4:	0e 93       	st	-X, r16
    17c6:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = &rule10;
    17c8:	15 96       	adiw	r26, 0x05	; 5
    17ca:	fc 93       	st	X, r31
    17cc:	ee 93       	st	-X, r30
    17ce:	14 97       	sbiw	r26, 0x04	; 4

	
	//RULE 8 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type then8;
	then8.value = &straight.value;
    17d0:	0e 5e       	subi	r16, 0xEE	; 238
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	f8 01       	movw	r30, r16
    17d6:	f1 82       	std	Z+1, r15	; 0x01
    17d8:	e0 82       	st	Z, r14
	then8.next = NULL;
    17da:	13 82       	std	Z+3, r1	; 0x03
    17dc:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &straightOriented.value;
    17de:	3e 01       	movw	r6, r28
    17e0:	ff e2       	ldi	r31, 0x2F	; 47
    17e2:	6f 1a       	sub	r6, r31
    17e4:	fe ef       	ldi	r31, 0xFE	; 254
    17e6:	7f 0a       	sbc	r7, r31
    17e8:	f3 01       	movw	r30, r6
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
	if82.next = NULL;
    17ee:	13 82       	std	Z+3, r1	; 0x03
    17f0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if81;
	if81.value = &centre.value;
    17f2:	6e 5e       	subi	r22, 0xEE	; 238
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	fb 01       	movw	r30, r22
    17f8:	b1 82       	std	Z+1, r11	; 0x01
    17fa:	a0 82       	st	Z, r10
	if81.next = &if82;
    17fc:	73 82       	std	Z+3, r7	; 0x03
    17fe:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
    1800:	34 96       	adiw	r30, 0x04	; 4
    1802:	71 83       	std	Z+1, r23	; 0x01
    1804:	60 83       	st	Z, r22
	rule8.then_side = &then8;
    1806:	13 83       	std	Z+3, r17	; 0x03
    1808:	02 83       	std	Z+2, r16	; 0x02
	rule8.next = &rule9;
    180a:	b5 83       	std	Z+5, r27	; 0x05
    180c:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type then7;
	then7.value = &left.value;
    180e:	0e 5e       	subi	r16, 0xEE	; 238
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
    1812:	d8 01       	movw	r26, r16
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	9c 92       	st	X, r9
    1818:	8e 92       	st	-X, r8
	then7.next = NULL;
    181a:	13 96       	adiw	r26, 0x03	; 3
    181c:	1c 92       	st	X, r1
    181e:	1e 92       	st	-X, r1
    1820:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &rightOriented.value;
    1822:	3e 01       	movw	r6, r28
    1824:	bd e1       	ldi	r27, 0x1D	; 29
    1826:	6b 1a       	sub	r6, r27
    1828:	be ef       	ldi	r27, 0xFE	; 254
    182a:	7b 0a       	sbc	r7, r27
    182c:	d3 01       	movw	r26, r6
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	5c 93       	st	X, r21
    1832:	4e 93       	st	-X, r20
	if72.next = NULL;
    1834:	13 96       	adiw	r26, 0x03	; 3
    1836:	1c 92       	st	X, r1
    1838:	1e 92       	st	-X, r1
    183a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &centre.value;
    183c:	6e 5e       	subi	r22, 0xEE	; 238
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	db 01       	movw	r26, r22
    1842:	11 96       	adiw	r26, 0x01	; 1
    1844:	bc 92       	st	X, r11
    1846:	ae 92       	st	-X, r10
	if71.next = &if72;
    1848:	13 96       	adiw	r26, 0x03	; 3
    184a:	7c 92       	st	X, r7
    184c:	6e 92       	st	-X, r6
    184e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
    1850:	14 96       	adiw	r26, 0x04	; 4
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	7c 93       	st	X, r23
    1856:	6e 93       	st	-X, r22
	rule7.then_side = &then7;
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	1c 93       	st	X, r17
    185c:	0e 93       	st	-X, r16
    185e:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
    1860:	15 96       	adiw	r26, 0x05	; 5
    1862:	fc 93       	st	X, r31
    1864:	ee 93       	st	-X, r30
    1866:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 6 "if deltaC is smallLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then6;
	then6.value = &sharpRight.value;
    1868:	0e 5e       	subi	r16, 0xEE	; 238
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	ea e0       	ldi	r30, 0x0A	; 10
    186e:	2e 0e       	add	r2, r30
    1870:	31 1c       	adc	r3, r1
    1872:	f8 01       	movw	r30, r16
    1874:	31 82       	std	Z+1, r3	; 0x01
    1876:	20 82       	st	Z, r2
	then6.next = NULL;
    1878:	13 82       	std	Z+3, r1	; 0x03
    187a:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if62;
	if62.value = &leftOriented.value;
    187c:	3e 01       	movw	r6, r28
    187e:	fb e0       	ldi	r31, 0x0B	; 11
    1880:	6f 1a       	sub	r6, r31
    1882:	fe ef       	ldi	r31, 0xFE	; 254
    1884:	7f 0a       	sbc	r7, r31
    1886:	f3 01       	movw	r30, r6
    1888:	31 83       	std	Z+1, r19	; 0x01
    188a:	20 83       	st	Z, r18
	if62.next = NULL;
    188c:	13 82       	std	Z+3, r1	; 0x03
    188e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if61;
	if61.value = &smallLeft.value;
    1890:	5e 01       	movw	r10, r28
    1892:	fd e5       	ldi	r31, 0x5D	; 93
    1894:	af 0e       	add	r10, r31
    1896:	b1 1c       	adc	r11, r1
    1898:	c7 50       	subi	r28, 0x07	; 7
    189a:	de 4f       	sbci	r29, 0xFE	; 254
    189c:	b9 82       	std	Y+1, r11	; 0x01
    189e:	a8 82       	st	Y, r10
    18a0:	c9 5f       	subi	r28, 0xF9	; 249
    18a2:	d1 40       	sbci	r29, 0x01	; 1
	if61.next = &if62;
    18a4:	c5 50       	subi	r28, 0x05	; 5
    18a6:	de 4f       	sbci	r29, 0xFE	; 254
    18a8:	79 82       	std	Y+1, r7	; 0x01
    18aa:	68 82       	st	Y, r6
    18ac:	cb 5f       	subi	r28, 0xFB	; 251
    18ae:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule6;
	rule6.if_side = &if61;
    18b0:	38 96       	adiw	r30, 0x08	; 8
    18b2:	69 ef       	ldi	r22, 0xF9	; 249
    18b4:	71 e0       	ldi	r23, 0x01	; 1
    18b6:	6c 0f       	add	r22, r28
    18b8:	7d 1f       	adc	r23, r29
    18ba:	71 83       	std	Z+1, r23	; 0x01
    18bc:	60 83       	st	Z, r22
	rule6.then_side = &then6;
    18be:	13 83       	std	Z+3, r17	; 0x03
    18c0:	02 83       	std	Z+2, r16	; 0x02
	rule6.next = &rule7;
    18c2:	b5 83       	std	Z+5, r27	; 0x05
    18c4:	a4 83       	std	Z+4, r26	; 0x04

	

	//RULE 5 "if deltaC is smallLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then5;
	then5.value = &right.value;
    18c6:	0e 5e       	subi	r16, 0xEE	; 238
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	d8 01       	movw	r26, r16
    18cc:	11 96       	adiw	r26, 0x01	; 1
    18ce:	5c 92       	st	X, r5
    18d0:	4e 92       	st	-X, r4
	then5.next = NULL;
    18d2:	13 96       	adiw	r26, 0x03	; 3
    18d4:	1c 92       	st	X, r1
    18d6:	1e 92       	st	-X, r1
    18d8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &straightOriented.value;
    18da:	3e 01       	movw	r6, r28
    18dc:	b9 ef       	ldi	r27, 0xF9	; 249
    18de:	6b 1a       	sub	r6, r27
    18e0:	bd ef       	ldi	r27, 0xFD	; 253
    18e2:	7b 0a       	sbc	r7, r27
    18e4:	d3 01       	movw	r26, r6
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	9c 93       	st	X, r25
    18ea:	8e 93       	st	-X, r24
	if52.next = NULL;
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	1c 92       	st	X, r1
    18f0:	1e 92       	st	-X, r1
    18f2:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if51;
	if51.value = &smallLeft.value;
    18f4:	6e 5e       	subi	r22, 0xEE	; 238
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	db 01       	movw	r26, r22
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	bc 92       	st	X, r11
    18fe:	ae 92       	st	-X, r10
	if51.next = &if52;
    1900:	13 96       	adiw	r26, 0x03	; 3
    1902:	7c 92       	st	X, r7
    1904:	6e 92       	st	-X, r6
    1906:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule5;
	rule5.if_side = &if51;
    1908:	14 96       	adiw	r26, 0x04	; 4
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	7c 93       	st	X, r23
    190e:	6e 93       	st	-X, r22
	rule5.then_side = &then5;
    1910:	13 96       	adiw	r26, 0x03	; 3
    1912:	1c 93       	st	X, r17
    1914:	0e 93       	st	-X, r16
    1916:	12 97       	sbiw	r26, 0x02	; 2
	rule5.next = &rule6;
    1918:	15 96       	adiw	r26, 0x05	; 5
    191a:	fc 93       	st	X, r31
    191c:	ee 93       	st	-X, r30
    191e:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 4 "if deltaC is smallLeft and deltaV is rightOriented then steering is left"
	struct rule_element_type then4;
	then4.value = &left.value;
    1920:	0e 5e       	subi	r16, 0xEE	; 238
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	f8 01       	movw	r30, r16
    1926:	91 82       	std	Z+1, r9	; 0x01
    1928:	80 82       	st	Z, r8
	then4.next = NULL;
    192a:	13 82       	std	Z+3, r1	; 0x03
    192c:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if42;
	if42.value = &rightOriented.value;
    192e:	62 5f       	subi	r22, 0xF2	; 242
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	fb 01       	movw	r30, r22
    1934:	51 83       	std	Z+1, r21	; 0x01
    1936:	40 83       	st	Z, r20
	if42.next = NULL;
    1938:	13 82       	std	Z+3, r1	; 0x03
    193a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if41;
	if41.value = &smallLeft.value;
    193c:	4e 01       	movw	r8, r28
    193e:	f3 ee       	ldi	r31, 0xE3	; 227
    1940:	8f 1a       	sub	r8, r31
    1942:	fd ef       	ldi	r31, 0xFD	; 253
    1944:	9f 0a       	sbc	r9, r31
    1946:	f4 01       	movw	r30, r8
    1948:	b1 82       	std	Z+1, r11	; 0x01
    194a:	a0 82       	st	Z, r10
	if41.next = &if42;
    194c:	73 83       	std	Z+3, r23	; 0x03
    194e:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule4;
	rule4.if_side = &if41;
    1950:	68 5f       	subi	r22, 0xF8	; 248
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	fb 01       	movw	r30, r22
    1956:	91 82       	std	Z+1, r9	; 0x01
    1958:	80 82       	st	Z, r8
	rule4.then_side = &then4;
    195a:	13 83       	std	Z+3, r17	; 0x03
    195c:	02 83       	std	Z+2, r16	; 0x02
	rule4.next = &rule5;
    195e:	b5 83       	std	Z+5, r27	; 0x05
    1960:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 3 "if deltaC is farLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then3;
	then3.value = &sharpRight.value;
    1962:	5e 01       	movw	r10, r28
    1964:	f9 ed       	ldi	r31, 0xD9	; 217
    1966:	af 1a       	sub	r10, r31
    1968:	fd ef       	ldi	r31, 0xFD	; 253
    196a:	bf 0a       	sbc	r11, r31
    196c:	d5 01       	movw	r26, r10
    196e:	11 96       	adiw	r26, 0x01	; 1
    1970:	3c 92       	st	X, r3
    1972:	2e 92       	st	-X, r2
	then3.next = NULL;
    1974:	13 96       	adiw	r26, 0x03	; 3
    1976:	1c 92       	st	X, r1
    1978:	1e 92       	st	-X, r1
    197a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if32;
	if32.value = &leftOriented.value;
    197c:	14 96       	adiw	r26, 0x04	; 4
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	3c 93       	st	X, r19
    1982:	2e 93       	st	-X, r18
	if32.next = NULL;
    1984:	13 96       	adiw	r26, 0x03	; 3
    1986:	1c 92       	st	X, r1
    1988:	1e 92       	st	-X, r1
    198a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &farLeft.value;
    198c:	2a 56       	subi	r18, 0x6A	; 106
    198e:	3e 4f       	sbci	r19, 0xFE	; 254
    1990:	02 5a       	subi	r16, 0xA2	; 162
    1992:	11 40       	sbci	r17, 0x01	; 1
    1994:	f9 01       	movw	r30, r18
    1996:	11 83       	std	Z+1, r17	; 0x01
    1998:	00 83       	st	Z, r16
	if31.next = &if32;
    199a:	b3 83       	std	Z+3, r27	; 0x03
    199c:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
    199e:	18 96       	adiw	r26, 0x08	; 8
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	3c 93       	st	X, r19
    19a4:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
    19a6:	13 96       	adiw	r26, 0x03	; 3
    19a8:	bc 92       	st	X, r11
    19aa:	ae 92       	st	-X, r10
    19ac:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
    19ae:	15 96       	adiw	r26, 0x05	; 5
    19b0:	7c 93       	st	X, r23
    19b2:	6e 93       	st	-X, r22
    19b4:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if deltaC is farLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then2;
	then2.value = &right.value;
    19b6:	5e 01       	movw	r10, r28
    19b8:	f7 ec       	ldi	r31, 0xC7	; 199
    19ba:	af 1a       	sub	r10, r31
    19bc:	fd ef       	ldi	r31, 0xFD	; 253
    19be:	bf 0a       	sbc	r11, r31
    19c0:	f5 01       	movw	r30, r10
    19c2:	51 82       	std	Z+1, r5	; 0x01
    19c4:	40 82       	st	Z, r4
	then2.next = NULL;
    19c6:	13 82       	std	Z+3, r1	; 0x03
    19c8:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &straightOriented.value;
    19ca:	64 5e       	subi	r22, 0xE4	; 228
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	fb 01       	movw	r30, r22
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
	if22.next = NULL;
    19d4:	13 82       	std	Z+3, r1	; 0x03
    19d6:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &farLeft.value;
    19d8:	2e 5e       	subi	r18, 0xEE	; 238
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	f9 01       	movw	r30, r18
    19de:	11 83       	std	Z+1, r17	; 0x01
    19e0:	00 83       	st	Z, r16
	if21.next = &if22;
    19e2:	73 83       	std	Z+3, r23	; 0x03
    19e4:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
    19e6:	8a 56       	subi	r24, 0x6A	; 106
    19e8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ea:	fc 01       	movw	r30, r24
    19ec:	31 83       	std	Z+1, r19	; 0x01
    19ee:	20 83       	st	Z, r18
	rule2.then_side = &then2;
    19f0:	b3 82       	std	Z+3, r11	; 0x03
    19f2:	a2 82       	std	Z+2, r10	; 0x02
	rule2.next = &rule3;
    19f4:	b5 83       	std	Z+5, r27	; 0x05
    19f6:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if deltaC is farLeft and deltaV is rightOriented then steering is straight"
	struct rule_element_type then1;
	then1.value = &straight.value;
    19f8:	58 96       	adiw	r26, 0x18	; 24
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	fc 92       	st	X, r15
    19fe:	ee 92       	st	-X, r14
	then1.next = NULL;
    1a00:	13 96       	adiw	r26, 0x03	; 3
    1a02:	1c 92       	st	X, r1
    1a04:	1e 92       	st	-X, r1
    1a06:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &rightOriented.value;
    1a08:	6e 5e       	subi	r22, 0xEE	; 238
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	51 83       	std	Z+1, r21	; 0x01
    1a10:	40 83       	st	Z, r20
	if12.next = NULL;
    1a12:	13 82       	std	Z+3, r1	; 0x03
    1a14:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &farLeft.value;
    1a16:	2e 5e       	subi	r18, 0xEE	; 238
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	11 83       	std	Z+1, r17	; 0x01
    1a1e:	00 83       	st	Z, r16
	if11.next = &if12;
    1a20:	73 83       	std	Z+3, r23	; 0x03
    1a22:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
    1a24:	34 96       	adiw	r30, 0x04	; 4
    1a26:	31 83       	std	Z+1, r19	; 0x01
    1a28:	20 83       	st	Z, r18
	rule1.then_side = &then1;
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
    1a2c:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
    1a2e:	95 83       	std	Z+5, r25	; 0x05
    1a30:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
    1a32:	f0 93 09 03 	sts	0x0309, r31
    1a36:	e0 93 08 03 	sts	0x0308, r30
	
	
	// the methods performing the FLC
	fuzzification();
    1a3a:	5c d9       	rcall	.-3400   	; 0xcf4 <fuzzification>
	rule_evaluation();
    1a3c:	82 d9       	rcall	.-3324   	; 0xd42 <rule_evaluation>
	defuzzification();
    1a3e:	c7 d9       	rcall	.-3186   	; 0xdce <defuzzification>
	steering.value = steering.value*10;
    1a40:	d6 01       	movw	r26, r12
    1a42:	1a 96       	adiw	r26, 0x0a	; 10
    1a44:	2d 91       	ld	r18, X+
    1a46:	3c 91       	ld	r19, X
    1a48:	1b 97       	sbiw	r26, 0x0b	; 11
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	22 0f       	add	r18, r18
    1a52:	33 1f       	adc	r19, r19
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	82 0f       	add	r24, r18
    1a5e:	93 1f       	adc	r25, r19
    1a60:	1b 96       	adiw	r26, 0x0b	; 11
    1a62:	9c 93       	st	X, r25
    1a64:	8e 93       	st	-X, r24
    1a66:	1a 97       	sbiw	r26, 0x0a	; 10
	if (steering.value < MAXLEFT)
    1a68:	86 3e       	cpi	r24, 0xE6	; 230
    1a6a:	b7 e0       	ldi	r27, 0x07	; 7
    1a6c:	9b 07       	cpc	r25, r27
    1a6e:	24 f4       	brge	.+8      	; 0x1a78 <nDoFuzzy+0x8d2>
	{
		setServo(MAXLEFT);
    1a70:	86 ee       	ldi	r24, 0xE6	; 230
    1a72:	97 e0       	ldi	r25, 0x07	; 7
    1a74:	6f d0       	rcall	.+222    	; 0x1b54 <setServo>
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <nDoFuzzy+0x8e4>
	}
	else if (steering.value >MAXRIGHT)
    1a78:	85 3e       	cpi	r24, 0xE5	; 229
    1a7a:	ec e0       	ldi	r30, 0x0C	; 12
    1a7c:	9e 07       	cpc	r25, r30
    1a7e:	24 f0       	brlt	.+8      	; 0x1a88 <nDoFuzzy+0x8e2>
	{
		setServo(MAXRIGHT);
    1a80:	84 ee       	ldi	r24, 0xE4	; 228
    1a82:	9c e0       	ldi	r25, 0x0C	; 12
    1a84:	67 d0       	rcall	.+206    	; 0x1b54 <setServo>
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <nDoFuzzy+0x8e4>
	}
	else
	{
		setServo(steering.value);
    1a88:	65 d0       	rcall	.+202    	; 0x1b54 <setServo>
	}
    
}
    1a8a:	c2 5a       	subi	r28, 0xA2	; 162
    1a8c:	dd 4f       	sbci	r29, 0xFD	; 253
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	df 90       	pop	r13
    1aa6:	cf 90       	pop	r12
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	9f 90       	pop	r9
    1aae:	8f 90       	pop	r8
    1ab0:	7f 90       	pop	r7
    1ab2:	6f 90       	pop	r6
    1ab4:	5f 90       	pop	r5
    1ab6:	4f 90       	pop	r4
    1ab8:	3f 90       	pop	r3
    1aba:	2f 90       	pop	r2
    1abc:	08 95       	ret

00001abe <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) & (v == 81))        // right curvature, turn right
    1abe:	31 e0       	ldi	r19, 0x01	; 1
    1ac0:	61 35       	cpi	r22, 0x51	; 81
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <nFuzzySteering+0xa>
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <nFuzzySteering+0x14>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	22 23       	and	r18, r18
    1ad4:	31 f0       	breq	.+12     	; 0x1ae2 <nFuzzySteering+0x24>
    1ad6:	33 23       	and	r19, r19
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <nFuzzySteering+0x24>
	{
		setServo(MAXRIGHT);
    1ada:	84 ee       	ldi	r24, 0xE4	; 228
    1adc:	9c e0       	ldi	r25, 0x0C	; 12
    1ade:	3a c0       	rjmp	.+116    	; 0x1b54 <setServo>
    1ae0:	08 95       	ret
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <nFuzzySteering+0x2e>
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	22 23       	and	r18, r18
    1aee:	31 f0       	breq	.+12     	; 0x1afc <nFuzzySteering+0x3e>
    1af0:	33 23       	and	r19, r19
    1af2:	21 f0       	breq	.+8      	; 0x1afc <nFuzzySteering+0x3e>
	{
		setServo(MAXLEFT);
    1af4:	86 ee       	ldi	r24, 0xE6	; 230
    1af6:	97 e0       	ldi	r25, 0x07	; 7
    1af8:	2d c0       	rjmp	.+90     	; 0x1b54 <setServo>
    1afa:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1afc:	54 cb       	rjmp	.-2392   	; 0x11a6 <nDoFuzzy>
    1afe:	08 95       	ret

00001b00 <pwmInit>:
    1b00:	80 e3       	ldi	r24, 0x30	; 48
    1b02:	8a b9       	out	0x0a, r24	; 10
    1b04:	82 ea       	ldi	r24, 0xA2	; 162
    1b06:	80 93 80 00 	sts	0x0080, r24
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	9f e8       	ldi	r25, 0x8F	; 143
    1b0e:	90 93 87 00 	sts	0x0087, r25
    1b12:	80 93 86 00 	sts	0x0086, r24
    1b16:	8a e1       	ldi	r24, 0x1A	; 26
    1b18:	80 93 81 00 	sts	0x0081, r24
    1b1c:	08 95       	ret

00001b1e <setESC>:
    1b1e:	80 36       	cpi	r24, 0x60	; 96
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	92 07       	cpc	r25, r18
    1b24:	3c f4       	brge	.+14     	; 0x1b34 <setESC+0x16>
    1b26:	8f e5       	ldi	r24, 0x5F	; 95
    1b28:	9a e0       	ldi	r25, 0x0A	; 10
    1b2a:	90 93 89 00 	sts	0x0089, r25
    1b2e:	80 93 88 00 	sts	0x0088, r24
    1b32:	08 95       	ret
    1b34:	82 32       	cpi	r24, 0x22	; 34
    1b36:	2b e0       	ldi	r18, 0x0B	; 11
    1b38:	92 07       	cpc	r25, r18
    1b3a:	3c f0       	brlt	.+14     	; 0x1b4a <setESC+0x2c>
    1b3c:	82 e2       	ldi	r24, 0x22	; 34
    1b3e:	9b e0       	ldi	r25, 0x0B	; 11
    1b40:	90 93 89 00 	sts	0x0089, r25
    1b44:	80 93 88 00 	sts	0x0088, r24
    1b48:	08 95       	ret
    1b4a:	90 93 89 00 	sts	0x0089, r25
    1b4e:	80 93 88 00 	sts	0x0088, r24
    1b52:	08 95       	ret

00001b54 <setServo>:
    1b54:	84 3e       	cpi	r24, 0xE4	; 228
    1b56:	2c e0       	ldi	r18, 0x0C	; 12
    1b58:	92 07       	cpc	r25, r18
    1b5a:	3c f0       	brlt	.+14     	; 0x1b6a <setServo+0x16>
    1b5c:	84 ee       	ldi	r24, 0xE4	; 228
    1b5e:	9c e0       	ldi	r25, 0x0C	; 12
    1b60:	90 93 8b 00 	sts	0x008B, r25
    1b64:	80 93 8a 00 	sts	0x008A, r24
    1b68:	08 95       	ret
    1b6a:	87 3e       	cpi	r24, 0xE7	; 231
    1b6c:	27 e0       	ldi	r18, 0x07	; 7
    1b6e:	92 07       	cpc	r25, r18
    1b70:	3c f4       	brge	.+14     	; 0x1b80 <setServo+0x2c>
    1b72:	86 ee       	ldi	r24, 0xE6	; 230
    1b74:	97 e0       	ldi	r25, 0x07	; 7
    1b76:	90 93 8b 00 	sts	0x008B, r25
    1b7a:	80 93 8a 00 	sts	0x008A, r24
    1b7e:	08 95       	ret
    1b80:	90 93 8b 00 	sts	0x008B, r25
    1b84:	80 93 8a 00 	sts	0x008A, r24
    1b88:	08 95       	ret

00001b8a <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1b8a:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1b8c:	20 91 76 02 	lds	r18, 0x0276
    1b90:	30 91 77 02 	lds	r19, 0x0277
    1b94:	21 15       	cp	r18, r1
    1b96:	31 05       	cpc	r19, r1
    1b98:	a9 f0       	breq	.+42     	; 0x1bc4 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1b9a:	e2 e7       	ldi	r30, 0x72	; 114
    1b9c:	f2 e0       	ldi	r31, 0x02	; 2
    1b9e:	40 81       	ld	r20, Z
    1ba0:	51 81       	ldd	r21, Z+1	; 0x01
    1ba2:	da 01       	movw	r26, r20
    1ba4:	ae 5c       	subi	r26, 0xCE	; 206
    1ba6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ba8:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1baa:	4f 5f       	subi	r20, 0xFF	; 255
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	51 83       	std	Z+1, r21	; 0x01
    1bb0:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1bb2:	21 50       	subi	r18, 0x01	; 1
    1bb4:	31 09       	sbc	r19, r1
    1bb6:	30 93 77 02 	sts	0x0277, r19
    1bba:	20 93 76 02 	sts	0x0276, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1bbe:	23 2b       	or	r18, r19
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <spi_get_byte+0x40>
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1bc4:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1bc6:	10 92 ea 01 	sts	0x01EA, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1bca:	20 91 72 02 	lds	r18, 0x0272
    1bce:	30 91 73 02 	lds	r19, 0x0273
    1bd2:	20 34       	cpi	r18, 0x40	; 64
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	21 f4       	brne	.+8      	; 0x1be0 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1bd8:	10 92 73 02 	sts	0x0273, r1
    1bdc:	10 92 72 02 	sts	0x0272, r1
	}
	

	sei();
    1be0:	78 94       	sei
	
	return value;
	
		
}
    1be2:	08 95       	ret

00001be4 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	0b b6       	in	r0, 0x3b	; 59
    1bf0:	0f 92       	push	r0
    1bf2:	2f 93       	push	r18
    1bf4:	3f 93       	push	r19
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1c02:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1c04:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1c06:	2d 3f       	cpi	r18, 0xFD	; 253
    1c08:	a9 f0       	breq	.+42     	; 0x1c34 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1c0a:	e4 e7       	ldi	r30, 0x74	; 116
    1c0c:	f2 e0       	ldi	r31, 0x02	; 2
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	dc 01       	movw	r26, r24
    1c14:	ae 5c       	subi	r26, 0xCE	; 206
    1c16:	bd 4f       	sbci	r27, 0xFD	; 253
    1c18:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1c20:	e6 e7       	ldi	r30, 0x76	; 118
    1c22:	f2 e0       	ldi	r31, 0x02	; 2
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	80 93 ea 01 	sts	0x01EA, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1c34:	80 91 74 02 	lds	r24, 0x0274
    1c38:	90 91 75 02 	lds	r25, 0x0275
    1c3c:	80 34       	cpi	r24, 0x40	; 64
    1c3e:	91 05       	cpc	r25, r1
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1c42:	10 92 75 02 	sts	0x0275, r1
    1c46:	10 92 74 02 	sts	0x0274, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1c4a:	80 91 30 02 	lds	r24, 0x0230
    1c4e:	90 91 31 02 	lds	r25, 0x0231
    1c52:	89 2b       	or	r24, r25
    1c54:	01 f1       	breq	.+64     	; 0x1c96 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1c56:	e0 91 2c 02 	lds	r30, 0x022C
    1c5a:	f0 91 2d 02 	lds	r31, 0x022D
    1c5e:	e4 51       	subi	r30, 0x14	; 20
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    1c62:	80 81       	ld	r24, Z
    1c64:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1c66:	ec e2       	ldi	r30, 0x2C	; 44
    1c68:	f2 e0       	ldi	r31, 0x02	; 2
    1c6a:	80 81       	ld	r24, Z
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1c74:	e0 e3       	ldi	r30, 0x30	; 48
    1c76:	f2 e0       	ldi	r31, 0x02	; 2
    1c78:	20 81       	ld	r18, Z
    1c7a:	31 81       	ldd	r19, Z+1	; 0x01
    1c7c:	21 50       	subi	r18, 0x01	; 1
    1c7e:	31 09       	sbc	r19, r1
    1c80:	31 83       	std	Z+1, r19	; 0x01
    1c82:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1c84:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1c86:	80 34       	cpi	r24, 0x40	; 64
    1c88:	91 05       	cpc	r25, r1
    1c8a:	49 f4       	brne	.+18     	; 0x1c9e <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1c8c:	10 92 2d 02 	sts	0x022D, r1
    1c90:	10 92 2c 02 	sts	0x022C, r1
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1c96:	8d ef       	ldi	r24, 0xFD	; 253
    1c98:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1c9a:	10 92 eb 01 	sts	0x01EB, r1
		
	} 	
	

}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	3f 91       	pop	r19
    1cac:	2f 91       	pop	r18
    1cae:	0f 90       	pop	r0
    1cb0:	0b be       	out	0x3b, r0	; 59
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1cbc:	80 e4       	ldi	r24, 0x40	; 64
    1cbe:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1cc0:	80 ec       	ldi	r24, 0xC0	; 192
    1cc2:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1cc4:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1cc6:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1cc8:	8d ef       	ldi	r24, 0xFD	; 253
    1cca:	8e bd       	out	0x2e, r24	; 46
    1ccc:	08 95       	ret

00001cce <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1cce:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1cd0:	20 91 30 02 	lds	r18, 0x0230
    1cd4:	30 91 31 02 	lds	r19, 0x0231
    1cd8:	20 34       	cpi	r18, 0x40	; 64
    1cda:	31 05       	cpc	r19, r1
    1cdc:	90 f4       	brcc	.+36     	; 0x1d02 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1cde:	ee e2       	ldi	r30, 0x2E	; 46
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
    1ce2:	40 81       	ld	r20, Z
    1ce4:	51 81       	ldd	r21, Z+1	; 0x01
    1ce6:	da 01       	movw	r26, r20
    1ce8:	a4 51       	subi	r26, 0x14	; 20
    1cea:	be 4f       	sbci	r27, 0xFE	; 254
    1cec:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1cee:	4f 5f       	subi	r20, 0xFF	; 255
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	51 83       	std	Z+1, r21	; 0x01
    1cf4:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1cf6:	2f 5f       	subi	r18, 0xFF	; 255
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	30 93 31 02 	sts	0x0231, r19
    1cfe:	20 93 30 02 	sts	0x0230, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1d02:	80 91 2e 02 	lds	r24, 0x022E
    1d06:	90 91 2f 02 	lds	r25, 0x022F
    1d0a:	80 34       	cpi	r24, 0x40	; 64
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1d10:	10 92 2f 02 	sts	0x022F, r1
    1d14:	10 92 2e 02 	sts	0x022E, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1d18:	80 91 30 02 	lds	r24, 0x0230
    1d1c:	90 91 31 02 	lds	r25, 0x0231
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f9 f4       	brne	.+62     	; 0x1d62 <spi_send_byte+0x94>
    1d24:	80 91 eb 01 	lds	r24, 0x01EB
    1d28:	81 11       	cpse	r24, r1
    1d2a:	1b c0       	rjmp	.+54     	; 0x1d62 <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    1d2c:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1d2e:	e0 91 2c 02 	lds	r30, 0x022C
    1d32:	f0 91 2d 02 	lds	r31, 0x022D
    1d36:	e4 51       	subi	r30, 0x14	; 20
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1d3e:	ec e2       	ldi	r30, 0x2C	; 44
    1d40:	f2 e0       	ldi	r31, 0x02	; 2
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1d4c:	e0 e3       	ldi	r30, 0x30	; 48
    1d4e:	f2 e0       	ldi	r31, 0x02	; 2
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1d5a:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 eb 01 	sts	0x01EB, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1d62:	80 91 2c 02 	lds	r24, 0x022C
    1d66:	90 91 2d 02 	lds	r25, 0x022D
    1d6a:	80 34       	cpi	r24, 0x40	; 64
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	21 f4       	brne	.+8      	; 0x1d78 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1d70:	10 92 2d 02 	sts	0x022D, r1
    1d74:	10 92 2c 02 	sts	0x022C, r1
	}
			
			

	sei();
    1d78:	78 94       	sei
    1d7a:	08 95       	ret

00001d7c <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	20 91 76 02 	lds	r18, 0x0276
    1d82:	30 91 77 02 	lds	r19, 0x0277
    1d86:	2b 30       	cpi	r18, 0x0B	; 11
    1d88:	31 05       	cpc	r19, r1
    1d8a:	08 f4       	brcc	.+2      	; 0x1d8e <is_package_recieved+0x12>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1d8e:	08 95       	ret

00001d90 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	8c 01       	movw	r16, r24
    1d9a:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1d9c:	20 91 76 02 	lds	r18, 0x0276
    1da0:	30 91 77 02 	lds	r19, 0x0277
    1da4:	23 2b       	or	r18, r19
    1da6:	69 f1       	breq	.+90     	; 0x1e02 <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1da8:	e0 91 72 02 	lds	r30, 0x0272
    1dac:	f0 91 73 02 	lds	r31, 0x0273
    1db0:	ee 5c       	subi	r30, 0xCE	; 206
    1db2:	fd 4f       	sbci	r31, 0xFD	; 253
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 3f       	cpi	r24, 0xFF	; 255
    1db8:	e1 f4       	brne	.+56     	; 0x1df2 <read_sensor_info+0x62>
    1dba:	e0 df       	rcall	.-64     	; 0x1d7c <is_package_recieved>
    1dbc:	88 23       	and	r24, r24
    1dbe:	11 f1       	breq	.+68     	; 0x1e04 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1dc0:	e4 de       	rcall	.-568    	; 0x1b8a <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1dc2:	e3 de       	rcall	.-570    	; 0x1b8a <spi_get_byte>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1dc8:	e0 de       	rcall	.-576    	; 0x1b8a <spi_get_byte>
    1dca:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1dcc:	de de       	rcall	.-580    	; 0x1b8a <spi_get_byte>
    1dce:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1dd0:	dc de       	rcall	.-584    	; 0x1b8a <spi_get_byte>
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1dd4:	da de       	rcall	.-588    	; 0x1b8a <spi_get_byte>
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1dd8:	d8 de       	rcall	.-592    	; 0x1b8a <spi_get_byte>
    1dda:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1ddc:	d6 de       	rcall	.-596    	; 0x1b8a <spi_get_byte>
    1dde:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1de0:	85 ec       	ldi	r24, 0xC5	; 197
    1de2:	9d e0       	ldi	r25, 0x0D	; 13
    1de4:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1de6:	d1 de       	rcall	.-606    	; 0x1b8a <spi_get_byte>
    1de8:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1dea:	cf de       	rcall	.-610    	; 0x1b8a <spi_get_byte>
    1dec:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    1df2:	c4 df       	rcall	.-120    	; 0x1d7c <is_package_recieved>
    1df4:	88 23       	and	r24, r24
    1df6:	31 f0       	breq	.+12     	; 0x1e04 <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1df8:	c8 de       	rcall	.-624    	; 0x1b8a <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1dfa:	be 01       	movw	r22, r28
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	c8 df       	rcall	.-112    	; 0x1d90 <read_sensor_info>
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	08 95       	ret

00001e0e <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	0b b6       	in	r0, 0x3b	; 59
    1e1a:	0f 92       	push	r0
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1e2e:	80 91 02 03 	lds	r24, 0x0302
    1e32:	90 91 03 03 	lds	r25, 0x0303
    1e36:	80 34       	cpi	r24, 0x40	; 64
    1e38:	91 05       	cpc	r25, r1
    1e3a:	31 f4       	brne	.+12     	; 0x1e48 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 2e 03 	sts	0x032E, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1e42:	80 91 c6 00 	lds	r24, 0x00C6
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1e48:	80 34       	cpi	r24, 0x40	; 64
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	e8 f4       	brcc	.+58     	; 0x1e88 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1e4e:	e0 e0       	ldi	r30, 0x00	; 0
    1e50:	f3 e0       	ldi	r31, 0x03	; 3
    1e52:	20 81       	ld	r18, Z
    1e54:	31 81       	ldd	r19, Z+1	; 0x01
    1e56:	40 91 c6 00 	lds	r20, 0x00C6
    1e5a:	d9 01       	movw	r26, r18
    1e5c:	a2 54       	subi	r26, 0x42	; 66
    1e5e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e60:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	31 83       	std	Z+1, r19	; 0x01
    1e68:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	90 93 03 03 	sts	0x0303, r25
    1e70:	80 93 02 03 	sts	0x0302, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1e74:	80 91 02 03 	lds	r24, 0x0302
    1e78:	90 91 03 03 	lds	r25, 0x0303
    1e7c:	80 34       	cpi	r24, 0x40	; 64
    1e7e:	91 05       	cpc	r25, r1
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	80 93 2c 03 	sts	0x032C, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1e88:	80 91 00 03 	lds	r24, 0x0300
    1e8c:	90 91 01 03 	lds	r25, 0x0301
    1e90:	80 34       	cpi	r24, 0x40	; 64
    1e92:	91 05       	cpc	r25, r1
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1e96:	10 92 01 03 	sts	0x0301, r1
    1e9a:	10 92 00 03 	sts	0x0300, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 2b 03 	sts	0x032B, r24
}
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0b be       	out	0x3b, r0	; 59
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0f 90       	pop	r0
    1ec0:	1f 90       	pop	r1
    1ec2:	18 95       	reti

00001ec4 <__vector_22>:




ISR(USART0_TX_vect)
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	0b b6       	in	r0, 0x3b	; 59
    1ed0:	0f 92       	push	r0
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1eda:	80 91 bc 02 	lds	r24, 0x02BC
    1ede:	90 91 bd 02 	lds	r25, 0x02BD
    1ee2:	80 34       	cpi	r24, 0x40	; 64
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	19 f4       	brne	.+6      	; 0x1eee <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1ee8:	10 92 2a 03 	sts	0x032A, r1
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1eee:	89 2b       	or	r24, r25
    1ef0:	b9 f0       	breq	.+46     	; 0x1f20 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1ef2:	e0 91 b8 02 	lds	r30, 0x02B8
    1ef6:	f0 91 b9 02 	lds	r31, 0x02B9
    1efa:	e8 58       	subi	r30, 0x88	; 136
    1efc:	fd 4f       	sbci	r31, 0xFD	; 253
    1efe:	80 81       	ld	r24, Z
    1f00:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1f04:	e8 eb       	ldi	r30, 0xB8	; 184
    1f06:	f2 e0       	ldi	r31, 0x02	; 2
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1f12:	ec eb       	ldi	r30, 0xBC	; 188
    1f14:	f2 e0       	ldi	r31, 0x02	; 2
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1f20:	80 91 b8 02 	lds	r24, 0x02B8
    1f24:	90 91 b9 02 	lds	r25, 0x02B9
    1f28:	80 34       	cpi	r24, 0x40	; 64
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1f2e:	10 92 b9 02 	sts	0x02B9, r1
    1f32:	10 92 b8 02 	sts	0x02B8, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1f36:	80 91 bc 02 	lds	r24, 0x02BC
    1f3a:	90 91 bd 02 	lds	r25, 0x02BD
    1f3e:	89 2b       	or	r24, r25
    1f40:	39 f4       	brne	.+14     	; 0x1f50 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1f42:	10 92 2d 03 	sts	0x032D, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1f46:	e1 ec       	ldi	r30, 0xC1	; 193
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 7b       	andi	r24, 0xBF	; 191
    1f4e:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1f50:	ff 91       	pop	r31
    1f52:	ef 91       	pop	r30
    1f54:	9f 91       	pop	r25
    1f56:	8f 91       	pop	r24
    1f58:	0f 90       	pop	r0
    1f5a:	0b be       	out	0x3b, r0	; 59
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__subsf3>:
    1f66:	50 58       	subi	r21, 0x80	; 128

00001f68 <__addsf3>:
    1f68:	bb 27       	eor	r27, r27
    1f6a:	aa 27       	eor	r26, r26
    1f6c:	0e d0       	rcall	.+28     	; 0x1f8a <__addsf3x>
    1f6e:	4d c1       	rjmp	.+666    	; 0x220a <__fp_round>
    1f70:	3e d1       	rcall	.+636    	; 0x21ee <__fp_pscA>
    1f72:	30 f0       	brcs	.+12     	; 0x1f80 <__addsf3+0x18>
    1f74:	43 d1       	rcall	.+646    	; 0x21fc <__fp_pscB>
    1f76:	20 f0       	brcs	.+8      	; 0x1f80 <__addsf3+0x18>
    1f78:	31 f4       	brne	.+12     	; 0x1f86 <__addsf3+0x1e>
    1f7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <__addsf3+0x1a>
    1f7e:	1e f4       	brtc	.+6      	; 0x1f86 <__addsf3+0x1e>
    1f80:	33 c1       	rjmp	.+614    	; 0x21e8 <__fp_nan>
    1f82:	0e f4       	brtc	.+2      	; 0x1f86 <__addsf3+0x1e>
    1f84:	e0 95       	com	r30
    1f86:	e7 fb       	bst	r30, 7
    1f88:	29 c1       	rjmp	.+594    	; 0x21dc <__fp_inf>

00001f8a <__addsf3x>:
    1f8a:	e9 2f       	mov	r30, r25
    1f8c:	4f d1       	rcall	.+670    	; 0x222c <__fp_split3>
    1f8e:	80 f3       	brcs	.-32     	; 0x1f70 <__addsf3+0x8>
    1f90:	ba 17       	cp	r27, r26
    1f92:	62 07       	cpc	r22, r18
    1f94:	73 07       	cpc	r23, r19
    1f96:	84 07       	cpc	r24, r20
    1f98:	95 07       	cpc	r25, r21
    1f9a:	18 f0       	brcs	.+6      	; 0x1fa2 <__addsf3x+0x18>
    1f9c:	71 f4       	brne	.+28     	; 0x1fba <__addsf3x+0x30>
    1f9e:	9e f5       	brtc	.+102    	; 0x2006 <__addsf3x+0x7c>
    1fa0:	67 c1       	rjmp	.+718    	; 0x2270 <__fp_zero>
    1fa2:	0e f4       	brtc	.+2      	; 0x1fa6 <__addsf3x+0x1c>
    1fa4:	e0 95       	com	r30
    1fa6:	0b 2e       	mov	r0, r27
    1fa8:	ba 2f       	mov	r27, r26
    1faa:	a0 2d       	mov	r26, r0
    1fac:	0b 01       	movw	r0, r22
    1fae:	b9 01       	movw	r22, r18
    1fb0:	90 01       	movw	r18, r0
    1fb2:	0c 01       	movw	r0, r24
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	a0 01       	movw	r20, r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	ff 27       	eor	r31, r31
    1fbc:	59 1b       	sub	r21, r25
    1fbe:	99 f0       	breq	.+38     	; 0x1fe6 <__addsf3x+0x5c>
    1fc0:	59 3f       	cpi	r21, 0xF9	; 249
    1fc2:	50 f4       	brcc	.+20     	; 0x1fd8 <__addsf3x+0x4e>
    1fc4:	50 3e       	cpi	r21, 0xE0	; 224
    1fc6:	68 f1       	brcs	.+90     	; 0x2022 <__addsf3x+0x98>
    1fc8:	1a 16       	cp	r1, r26
    1fca:	f0 40       	sbci	r31, 0x00	; 0
    1fcc:	a2 2f       	mov	r26, r18
    1fce:	23 2f       	mov	r18, r19
    1fd0:	34 2f       	mov	r19, r20
    1fd2:	44 27       	eor	r20, r20
    1fd4:	58 5f       	subi	r21, 0xF8	; 248
    1fd6:	f3 cf       	rjmp	.-26     	; 0x1fbe <__addsf3x+0x34>
    1fd8:	46 95       	lsr	r20
    1fda:	37 95       	ror	r19
    1fdc:	27 95       	ror	r18
    1fde:	a7 95       	ror	r26
    1fe0:	f0 40       	sbci	r31, 0x00	; 0
    1fe2:	53 95       	inc	r21
    1fe4:	c9 f7       	brne	.-14     	; 0x1fd8 <__addsf3x+0x4e>
    1fe6:	7e f4       	brtc	.+30     	; 0x2006 <__addsf3x+0x7c>
    1fe8:	1f 16       	cp	r1, r31
    1fea:	ba 0b       	sbc	r27, r26
    1fec:	62 0b       	sbc	r22, r18
    1fee:	73 0b       	sbc	r23, r19
    1ff0:	84 0b       	sbc	r24, r20
    1ff2:	ba f0       	brmi	.+46     	; 0x2022 <__addsf3x+0x98>
    1ff4:	91 50       	subi	r25, 0x01	; 1
    1ff6:	a1 f0       	breq	.+40     	; 0x2020 <__addsf3x+0x96>
    1ff8:	ff 0f       	add	r31, r31
    1ffa:	bb 1f       	adc	r27, r27
    1ffc:	66 1f       	adc	r22, r22
    1ffe:	77 1f       	adc	r23, r23
    2000:	88 1f       	adc	r24, r24
    2002:	c2 f7       	brpl	.-16     	; 0x1ff4 <__addsf3x+0x6a>
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <__addsf3x+0x98>
    2006:	ba 0f       	add	r27, r26
    2008:	62 1f       	adc	r22, r18
    200a:	73 1f       	adc	r23, r19
    200c:	84 1f       	adc	r24, r20
    200e:	48 f4       	brcc	.+18     	; 0x2022 <__addsf3x+0x98>
    2010:	87 95       	ror	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	b7 95       	ror	r27
    2018:	f7 95       	ror	r31
    201a:	9e 3f       	cpi	r25, 0xFE	; 254
    201c:	08 f0       	brcs	.+2      	; 0x2020 <__addsf3x+0x96>
    201e:	b3 cf       	rjmp	.-154    	; 0x1f86 <__addsf3+0x1e>
    2020:	93 95       	inc	r25
    2022:	88 0f       	add	r24, r24
    2024:	08 f0       	brcs	.+2      	; 0x2028 <__addsf3x+0x9e>
    2026:	99 27       	eor	r25, r25
    2028:	ee 0f       	add	r30, r30
    202a:	97 95       	ror	r25
    202c:	87 95       	ror	r24
    202e:	08 95       	ret

00002030 <__divsf3>:
    2030:	0c d0       	rcall	.+24     	; 0x204a <__divsf3x>
    2032:	eb c0       	rjmp	.+470    	; 0x220a <__fp_round>
    2034:	e3 d0       	rcall	.+454    	; 0x21fc <__fp_pscB>
    2036:	40 f0       	brcs	.+16     	; 0x2048 <__divsf3+0x18>
    2038:	da d0       	rcall	.+436    	; 0x21ee <__fp_pscA>
    203a:	30 f0       	brcs	.+12     	; 0x2048 <__divsf3+0x18>
    203c:	21 f4       	brne	.+8      	; 0x2046 <__divsf3+0x16>
    203e:	5f 3f       	cpi	r21, 0xFF	; 255
    2040:	19 f0       	breq	.+6      	; 0x2048 <__divsf3+0x18>
    2042:	cc c0       	rjmp	.+408    	; 0x21dc <__fp_inf>
    2044:	51 11       	cpse	r21, r1
    2046:	15 c1       	rjmp	.+554    	; 0x2272 <__fp_szero>
    2048:	cf c0       	rjmp	.+414    	; 0x21e8 <__fp_nan>

0000204a <__divsf3x>:
    204a:	f0 d0       	rcall	.+480    	; 0x222c <__fp_split3>
    204c:	98 f3       	brcs	.-26     	; 0x2034 <__divsf3+0x4>

0000204e <__divsf3_pse>:
    204e:	99 23       	and	r25, r25
    2050:	c9 f3       	breq	.-14     	; 0x2044 <__divsf3+0x14>
    2052:	55 23       	and	r21, r21
    2054:	b1 f3       	breq	.-20     	; 0x2042 <__divsf3+0x12>
    2056:	95 1b       	sub	r25, r21
    2058:	55 0b       	sbc	r21, r21
    205a:	bb 27       	eor	r27, r27
    205c:	aa 27       	eor	r26, r26
    205e:	62 17       	cp	r22, r18
    2060:	73 07       	cpc	r23, r19
    2062:	84 07       	cpc	r24, r20
    2064:	38 f0       	brcs	.+14     	; 0x2074 <__divsf3_pse+0x26>
    2066:	9f 5f       	subi	r25, 0xFF	; 255
    2068:	5f 4f       	sbci	r21, 0xFF	; 255
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	44 1f       	adc	r20, r20
    2070:	aa 1f       	adc	r26, r26
    2072:	a9 f3       	breq	.-22     	; 0x205e <__divsf3_pse+0x10>
    2074:	33 d0       	rcall	.+102    	; 0x20dc <__divsf3_pse+0x8e>
    2076:	0e 2e       	mov	r0, r30
    2078:	3a f0       	brmi	.+14     	; 0x2088 <__divsf3_pse+0x3a>
    207a:	e0 e8       	ldi	r30, 0x80	; 128
    207c:	30 d0       	rcall	.+96     	; 0x20de <__divsf3_pse+0x90>
    207e:	91 50       	subi	r25, 0x01	; 1
    2080:	50 40       	sbci	r21, 0x00	; 0
    2082:	e6 95       	lsr	r30
    2084:	00 1c       	adc	r0, r0
    2086:	ca f7       	brpl	.-14     	; 0x207a <__divsf3_pse+0x2c>
    2088:	29 d0       	rcall	.+82     	; 0x20dc <__divsf3_pse+0x8e>
    208a:	fe 2f       	mov	r31, r30
    208c:	27 d0       	rcall	.+78     	; 0x20dc <__divsf3_pse+0x8e>
    208e:	66 0f       	add	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	bb 1f       	adc	r27, r27
    2096:	26 17       	cp	r18, r22
    2098:	37 07       	cpc	r19, r23
    209a:	48 07       	cpc	r20, r24
    209c:	ab 07       	cpc	r26, r27
    209e:	b0 e8       	ldi	r27, 0x80	; 128
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <__divsf3_pse+0x56>
    20a2:	bb 0b       	sbc	r27, r27
    20a4:	80 2d       	mov	r24, r0
    20a6:	bf 01       	movw	r22, r30
    20a8:	ff 27       	eor	r31, r31
    20aa:	93 58       	subi	r25, 0x83	; 131
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	2a f0       	brmi	.+10     	; 0x20ba <__divsf3_pse+0x6c>
    20b0:	9e 3f       	cpi	r25, 0xFE	; 254
    20b2:	51 05       	cpc	r21, r1
    20b4:	68 f0       	brcs	.+26     	; 0x20d0 <__divsf3_pse+0x82>
    20b6:	92 c0       	rjmp	.+292    	; 0x21dc <__fp_inf>
    20b8:	dc c0       	rjmp	.+440    	; 0x2272 <__fp_szero>
    20ba:	5f 3f       	cpi	r21, 0xFF	; 255
    20bc:	ec f3       	brlt	.-6      	; 0x20b8 <__divsf3_pse+0x6a>
    20be:	98 3e       	cpi	r25, 0xE8	; 232
    20c0:	dc f3       	brlt	.-10     	; 0x20b8 <__divsf3_pse+0x6a>
    20c2:	86 95       	lsr	r24
    20c4:	77 95       	ror	r23
    20c6:	67 95       	ror	r22
    20c8:	b7 95       	ror	r27
    20ca:	f7 95       	ror	r31
    20cc:	9f 5f       	subi	r25, 0xFF	; 255
    20ce:	c9 f7       	brne	.-14     	; 0x20c2 <__divsf3_pse+0x74>
    20d0:	88 0f       	add	r24, r24
    20d2:	91 1d       	adc	r25, r1
    20d4:	96 95       	lsr	r25
    20d6:	87 95       	ror	r24
    20d8:	97 f9       	bld	r25, 7
    20da:	08 95       	ret
    20dc:	e1 e0       	ldi	r30, 0x01	; 1
    20de:	66 0f       	add	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	bb 1f       	adc	r27, r27
    20e6:	62 17       	cp	r22, r18
    20e8:	73 07       	cpc	r23, r19
    20ea:	84 07       	cpc	r24, r20
    20ec:	ba 07       	cpc	r27, r26
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__divsf3_pse+0xaa>
    20f0:	62 1b       	sub	r22, r18
    20f2:	73 0b       	sbc	r23, r19
    20f4:	84 0b       	sbc	r24, r20
    20f6:	ba 0b       	sbc	r27, r26
    20f8:	ee 1f       	adc	r30, r30
    20fa:	88 f7       	brcc	.-30     	; 0x20de <__divsf3_pse+0x90>
    20fc:	e0 95       	com	r30
    20fe:	08 95       	ret

00002100 <__fixsfsi>:
    2100:	04 d0       	rcall	.+8      	; 0x210a <__fixunssfsi>
    2102:	68 94       	set
    2104:	b1 11       	cpse	r27, r1
    2106:	b5 c0       	rjmp	.+362    	; 0x2272 <__fp_szero>
    2108:	08 95       	ret

0000210a <__fixunssfsi>:
    210a:	98 d0       	rcall	.+304    	; 0x223c <__fp_splitA>
    210c:	88 f0       	brcs	.+34     	; 0x2130 <__fixunssfsi+0x26>
    210e:	9f 57       	subi	r25, 0x7F	; 127
    2110:	90 f0       	brcs	.+36     	; 0x2136 <__fixunssfsi+0x2c>
    2112:	b9 2f       	mov	r27, r25
    2114:	99 27       	eor	r25, r25
    2116:	b7 51       	subi	r27, 0x17	; 23
    2118:	a0 f0       	brcs	.+40     	; 0x2142 <__fixunssfsi+0x38>
    211a:	d1 f0       	breq	.+52     	; 0x2150 <__fixunssfsi+0x46>
    211c:	66 0f       	add	r22, r22
    211e:	77 1f       	adc	r23, r23
    2120:	88 1f       	adc	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	1a f0       	brmi	.+6      	; 0x212c <__fixunssfsi+0x22>
    2126:	ba 95       	dec	r27
    2128:	c9 f7       	brne	.-14     	; 0x211c <__fixunssfsi+0x12>
    212a:	12 c0       	rjmp	.+36     	; 0x2150 <__fixunssfsi+0x46>
    212c:	b1 30       	cpi	r27, 0x01	; 1
    212e:	81 f0       	breq	.+32     	; 0x2150 <__fixunssfsi+0x46>
    2130:	9f d0       	rcall	.+318    	; 0x2270 <__fp_zero>
    2132:	b1 e0       	ldi	r27, 0x01	; 1
    2134:	08 95       	ret
    2136:	9c c0       	rjmp	.+312    	; 0x2270 <__fp_zero>
    2138:	67 2f       	mov	r22, r23
    213a:	78 2f       	mov	r23, r24
    213c:	88 27       	eor	r24, r24
    213e:	b8 5f       	subi	r27, 0xF8	; 248
    2140:	39 f0       	breq	.+14     	; 0x2150 <__fixunssfsi+0x46>
    2142:	b9 3f       	cpi	r27, 0xF9	; 249
    2144:	cc f3       	brlt	.-14     	; 0x2138 <__fixunssfsi+0x2e>
    2146:	86 95       	lsr	r24
    2148:	77 95       	ror	r23
    214a:	67 95       	ror	r22
    214c:	b3 95       	inc	r27
    214e:	d9 f7       	brne	.-10     	; 0x2146 <__fixunssfsi+0x3c>
    2150:	3e f4       	brtc	.+14     	; 0x2160 <__fixunssfsi+0x56>
    2152:	90 95       	com	r25
    2154:	80 95       	com	r24
    2156:	70 95       	com	r23
    2158:	61 95       	neg	r22
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__floatunsisf>:
    2162:	e8 94       	clt
    2164:	09 c0       	rjmp	.+18     	; 0x2178 <__floatsisf+0x12>

00002166 <__floatsisf>:
    2166:	97 fb       	bst	r25, 7
    2168:	3e f4       	brtc	.+14     	; 0x2178 <__floatsisf+0x12>
    216a:	90 95       	com	r25
    216c:	80 95       	com	r24
    216e:	70 95       	com	r23
    2170:	61 95       	neg	r22
    2172:	7f 4f       	sbci	r23, 0xFF	; 255
    2174:	8f 4f       	sbci	r24, 0xFF	; 255
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	99 23       	and	r25, r25
    217a:	a9 f0       	breq	.+42     	; 0x21a6 <__floatsisf+0x40>
    217c:	f9 2f       	mov	r31, r25
    217e:	96 e9       	ldi	r25, 0x96	; 150
    2180:	bb 27       	eor	r27, r27
    2182:	93 95       	inc	r25
    2184:	f6 95       	lsr	r31
    2186:	87 95       	ror	r24
    2188:	77 95       	ror	r23
    218a:	67 95       	ror	r22
    218c:	b7 95       	ror	r27
    218e:	f1 11       	cpse	r31, r1
    2190:	f8 cf       	rjmp	.-16     	; 0x2182 <__floatsisf+0x1c>
    2192:	fa f4       	brpl	.+62     	; 0x21d2 <__floatsisf+0x6c>
    2194:	bb 0f       	add	r27, r27
    2196:	11 f4       	brne	.+4      	; 0x219c <__floatsisf+0x36>
    2198:	60 ff       	sbrs	r22, 0
    219a:	1b c0       	rjmp	.+54     	; 0x21d2 <__floatsisf+0x6c>
    219c:	6f 5f       	subi	r22, 0xFF	; 255
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	8f 4f       	sbci	r24, 0xFF	; 255
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	16 c0       	rjmp	.+44     	; 0x21d2 <__floatsisf+0x6c>
    21a6:	88 23       	and	r24, r24
    21a8:	11 f0       	breq	.+4      	; 0x21ae <__floatsisf+0x48>
    21aa:	96 e9       	ldi	r25, 0x96	; 150
    21ac:	11 c0       	rjmp	.+34     	; 0x21d0 <__floatsisf+0x6a>
    21ae:	77 23       	and	r23, r23
    21b0:	21 f0       	breq	.+8      	; 0x21ba <__floatsisf+0x54>
    21b2:	9e e8       	ldi	r25, 0x8E	; 142
    21b4:	87 2f       	mov	r24, r23
    21b6:	76 2f       	mov	r23, r22
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <__floatsisf+0x5e>
    21ba:	66 23       	and	r22, r22
    21bc:	71 f0       	breq	.+28     	; 0x21da <__floatsisf+0x74>
    21be:	96 e8       	ldi	r25, 0x86	; 134
    21c0:	86 2f       	mov	r24, r22
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	2a f0       	brmi	.+10     	; 0x21d2 <__floatsisf+0x6c>
    21c8:	9a 95       	dec	r25
    21ca:	66 0f       	add	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	88 1f       	adc	r24, r24
    21d0:	da f7       	brpl	.-10     	; 0x21c8 <__floatsisf+0x62>
    21d2:	88 0f       	add	r24, r24
    21d4:	96 95       	lsr	r25
    21d6:	87 95       	ror	r24
    21d8:	97 f9       	bld	r25, 7
    21da:	08 95       	ret

000021dc <__fp_inf>:
    21dc:	97 f9       	bld	r25, 7
    21de:	9f 67       	ori	r25, 0x7F	; 127
    21e0:	80 e8       	ldi	r24, 0x80	; 128
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	08 95       	ret

000021e8 <__fp_nan>:
    21e8:	9f ef       	ldi	r25, 0xFF	; 255
    21ea:	80 ec       	ldi	r24, 0xC0	; 192
    21ec:	08 95       	ret

000021ee <__fp_pscA>:
    21ee:	00 24       	eor	r0, r0
    21f0:	0a 94       	dec	r0
    21f2:	16 16       	cp	r1, r22
    21f4:	17 06       	cpc	r1, r23
    21f6:	18 06       	cpc	r1, r24
    21f8:	09 06       	cpc	r0, r25
    21fa:	08 95       	ret

000021fc <__fp_pscB>:
    21fc:	00 24       	eor	r0, r0
    21fe:	0a 94       	dec	r0
    2200:	12 16       	cp	r1, r18
    2202:	13 06       	cpc	r1, r19
    2204:	14 06       	cpc	r1, r20
    2206:	05 06       	cpc	r0, r21
    2208:	08 95       	ret

0000220a <__fp_round>:
    220a:	09 2e       	mov	r0, r25
    220c:	03 94       	inc	r0
    220e:	00 0c       	add	r0, r0
    2210:	11 f4       	brne	.+4      	; 0x2216 <__fp_round+0xc>
    2212:	88 23       	and	r24, r24
    2214:	52 f0       	brmi	.+20     	; 0x222a <__fp_round+0x20>
    2216:	bb 0f       	add	r27, r27
    2218:	40 f4       	brcc	.+16     	; 0x222a <__fp_round+0x20>
    221a:	bf 2b       	or	r27, r31
    221c:	11 f4       	brne	.+4      	; 0x2222 <__fp_round+0x18>
    221e:	60 ff       	sbrs	r22, 0
    2220:	04 c0       	rjmp	.+8      	; 0x222a <__fp_round+0x20>
    2222:	6f 5f       	subi	r22, 0xFF	; 255
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	8f 4f       	sbci	r24, 0xFF	; 255
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	08 95       	ret

0000222c <__fp_split3>:
    222c:	57 fd       	sbrc	r21, 7
    222e:	90 58       	subi	r25, 0x80	; 128
    2230:	44 0f       	add	r20, r20
    2232:	55 1f       	adc	r21, r21
    2234:	59 f0       	breq	.+22     	; 0x224c <__fp_splitA+0x10>
    2236:	5f 3f       	cpi	r21, 0xFF	; 255
    2238:	71 f0       	breq	.+28     	; 0x2256 <__fp_splitA+0x1a>
    223a:	47 95       	ror	r20

0000223c <__fp_splitA>:
    223c:	88 0f       	add	r24, r24
    223e:	97 fb       	bst	r25, 7
    2240:	99 1f       	adc	r25, r25
    2242:	61 f0       	breq	.+24     	; 0x225c <__fp_splitA+0x20>
    2244:	9f 3f       	cpi	r25, 0xFF	; 255
    2246:	79 f0       	breq	.+30     	; 0x2266 <__fp_splitA+0x2a>
    2248:	87 95       	ror	r24
    224a:	08 95       	ret
    224c:	12 16       	cp	r1, r18
    224e:	13 06       	cpc	r1, r19
    2250:	14 06       	cpc	r1, r20
    2252:	55 1f       	adc	r21, r21
    2254:	f2 cf       	rjmp	.-28     	; 0x223a <__fp_split3+0xe>
    2256:	46 95       	lsr	r20
    2258:	f1 df       	rcall	.-30     	; 0x223c <__fp_splitA>
    225a:	08 c0       	rjmp	.+16     	; 0x226c <__fp_splitA+0x30>
    225c:	16 16       	cp	r1, r22
    225e:	17 06       	cpc	r1, r23
    2260:	18 06       	cpc	r1, r24
    2262:	99 1f       	adc	r25, r25
    2264:	f1 cf       	rjmp	.-30     	; 0x2248 <__fp_splitA+0xc>
    2266:	86 95       	lsr	r24
    2268:	71 05       	cpc	r23, r1
    226a:	61 05       	cpc	r22, r1
    226c:	08 94       	sec
    226e:	08 95       	ret

00002270 <__fp_zero>:
    2270:	e8 94       	clt

00002272 <__fp_szero>:
    2272:	bb 27       	eor	r27, r27
    2274:	66 27       	eor	r22, r22
    2276:	77 27       	eor	r23, r23
    2278:	cb 01       	movw	r24, r22
    227a:	97 f9       	bld	r25, 7
    227c:	08 95       	ret

0000227e <__mulsf3>:
    227e:	0b d0       	rcall	.+22     	; 0x2296 <__mulsf3x>
    2280:	c4 cf       	rjmp	.-120    	; 0x220a <__fp_round>
    2282:	b5 df       	rcall	.-150    	; 0x21ee <__fp_pscA>
    2284:	28 f0       	brcs	.+10     	; 0x2290 <__mulsf3+0x12>
    2286:	ba df       	rcall	.-140    	; 0x21fc <__fp_pscB>
    2288:	18 f0       	brcs	.+6      	; 0x2290 <__mulsf3+0x12>
    228a:	95 23       	and	r25, r21
    228c:	09 f0       	breq	.+2      	; 0x2290 <__mulsf3+0x12>
    228e:	a6 cf       	rjmp	.-180    	; 0x21dc <__fp_inf>
    2290:	ab cf       	rjmp	.-170    	; 0x21e8 <__fp_nan>
    2292:	11 24       	eor	r1, r1
    2294:	ee cf       	rjmp	.-36     	; 0x2272 <__fp_szero>

00002296 <__mulsf3x>:
    2296:	ca df       	rcall	.-108    	; 0x222c <__fp_split3>
    2298:	a0 f3       	brcs	.-24     	; 0x2282 <__mulsf3+0x4>

0000229a <__mulsf3_pse>:
    229a:	95 9f       	mul	r25, r21
    229c:	d1 f3       	breq	.-12     	; 0x2292 <__mulsf3+0x14>
    229e:	95 0f       	add	r25, r21
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	55 1f       	adc	r21, r21
    22a4:	62 9f       	mul	r22, r18
    22a6:	f0 01       	movw	r30, r0
    22a8:	72 9f       	mul	r23, r18
    22aa:	bb 27       	eor	r27, r27
    22ac:	f0 0d       	add	r31, r0
    22ae:	b1 1d       	adc	r27, r1
    22b0:	63 9f       	mul	r22, r19
    22b2:	aa 27       	eor	r26, r26
    22b4:	f0 0d       	add	r31, r0
    22b6:	b1 1d       	adc	r27, r1
    22b8:	aa 1f       	adc	r26, r26
    22ba:	64 9f       	mul	r22, r20
    22bc:	66 27       	eor	r22, r22
    22be:	b0 0d       	add	r27, r0
    22c0:	a1 1d       	adc	r26, r1
    22c2:	66 1f       	adc	r22, r22
    22c4:	82 9f       	mul	r24, r18
    22c6:	22 27       	eor	r18, r18
    22c8:	b0 0d       	add	r27, r0
    22ca:	a1 1d       	adc	r26, r1
    22cc:	62 1f       	adc	r22, r18
    22ce:	73 9f       	mul	r23, r19
    22d0:	b0 0d       	add	r27, r0
    22d2:	a1 1d       	adc	r26, r1
    22d4:	62 1f       	adc	r22, r18
    22d6:	83 9f       	mul	r24, r19
    22d8:	a0 0d       	add	r26, r0
    22da:	61 1d       	adc	r22, r1
    22dc:	22 1f       	adc	r18, r18
    22de:	74 9f       	mul	r23, r20
    22e0:	33 27       	eor	r19, r19
    22e2:	a0 0d       	add	r26, r0
    22e4:	61 1d       	adc	r22, r1
    22e6:	23 1f       	adc	r18, r19
    22e8:	84 9f       	mul	r24, r20
    22ea:	60 0d       	add	r22, r0
    22ec:	21 1d       	adc	r18, r1
    22ee:	82 2f       	mov	r24, r18
    22f0:	76 2f       	mov	r23, r22
    22f2:	6a 2f       	mov	r22, r26
    22f4:	11 24       	eor	r1, r1
    22f6:	9f 57       	subi	r25, 0x7F	; 127
    22f8:	50 40       	sbci	r21, 0x00	; 0
    22fa:	8a f0       	brmi	.+34     	; 0x231e <__mulsf3_pse+0x84>
    22fc:	e1 f0       	breq	.+56     	; 0x2336 <__mulsf3_pse+0x9c>
    22fe:	88 23       	and	r24, r24
    2300:	4a f0       	brmi	.+18     	; 0x2314 <__mulsf3_pse+0x7a>
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	bb 1f       	adc	r27, r27
    2308:	66 1f       	adc	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	91 50       	subi	r25, 0x01	; 1
    2310:	50 40       	sbci	r21, 0x00	; 0
    2312:	a9 f7       	brne	.-22     	; 0x22fe <__mulsf3_pse+0x64>
    2314:	9e 3f       	cpi	r25, 0xFE	; 254
    2316:	51 05       	cpc	r21, r1
    2318:	70 f0       	brcs	.+28     	; 0x2336 <__mulsf3_pse+0x9c>
    231a:	60 cf       	rjmp	.-320    	; 0x21dc <__fp_inf>
    231c:	aa cf       	rjmp	.-172    	; 0x2272 <__fp_szero>
    231e:	5f 3f       	cpi	r21, 0xFF	; 255
    2320:	ec f3       	brlt	.-6      	; 0x231c <__mulsf3_pse+0x82>
    2322:	98 3e       	cpi	r25, 0xE8	; 232
    2324:	dc f3       	brlt	.-10     	; 0x231c <__mulsf3_pse+0x82>
    2326:	86 95       	lsr	r24
    2328:	77 95       	ror	r23
    232a:	67 95       	ror	r22
    232c:	b7 95       	ror	r27
    232e:	f7 95       	ror	r31
    2330:	e7 95       	ror	r30
    2332:	9f 5f       	subi	r25, 0xFF	; 255
    2334:	c1 f7       	brne	.-16     	; 0x2326 <__mulsf3_pse+0x8c>
    2336:	fe 2b       	or	r31, r30
    2338:	88 0f       	add	r24, r24
    233a:	91 1d       	adc	r25, r1
    233c:	96 95       	lsr	r25
    233e:	87 95       	ror	r24
    2340:	97 f9       	bld	r25, 7
    2342:	08 95       	ret

00002344 <__divmodhi4>:
    2344:	97 fb       	bst	r25, 7
    2346:	07 2e       	mov	r0, r23
    2348:	16 f4       	brtc	.+4      	; 0x234e <__divmodhi4+0xa>
    234a:	00 94       	com	r0
    234c:	06 d0       	rcall	.+12     	; 0x235a <__divmodhi4_neg1>
    234e:	77 fd       	sbrc	r23, 7
    2350:	08 d0       	rcall	.+16     	; 0x2362 <__divmodhi4_neg2>
    2352:	2d d0       	rcall	.+90     	; 0x23ae <__udivmodhi4>
    2354:	07 fc       	sbrc	r0, 7
    2356:	05 d0       	rcall	.+10     	; 0x2362 <__divmodhi4_neg2>
    2358:	3e f4       	brtc	.+14     	; 0x2368 <__divmodhi4_exit>

0000235a <__divmodhi4_neg1>:
    235a:	90 95       	com	r25
    235c:	81 95       	neg	r24
    235e:	9f 4f       	sbci	r25, 0xFF	; 255
    2360:	08 95       	ret

00002362 <__divmodhi4_neg2>:
    2362:	70 95       	com	r23
    2364:	61 95       	neg	r22
    2366:	7f 4f       	sbci	r23, 0xFF	; 255

00002368 <__divmodhi4_exit>:
    2368:	08 95       	ret

0000236a <__divmodsi4>:
    236a:	05 2e       	mov	r0, r21
    236c:	97 fb       	bst	r25, 7
    236e:	16 f4       	brtc	.+4      	; 0x2374 <__divmodsi4+0xa>
    2370:	00 94       	com	r0
    2372:	0f d0       	rcall	.+30     	; 0x2392 <__negsi2>
    2374:	57 fd       	sbrc	r21, 7
    2376:	05 d0       	rcall	.+10     	; 0x2382 <__divmodsi4_neg2>
    2378:	2e d0       	rcall	.+92     	; 0x23d6 <__udivmodsi4>
    237a:	07 fc       	sbrc	r0, 7
    237c:	02 d0       	rcall	.+4      	; 0x2382 <__divmodsi4_neg2>
    237e:	46 f4       	brtc	.+16     	; 0x2390 <__divmodsi4_exit>
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <__negsi2>

00002382 <__divmodsi4_neg2>:
    2382:	50 95       	com	r21
    2384:	40 95       	com	r20
    2386:	30 95       	com	r19
    2388:	21 95       	neg	r18
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	4f 4f       	sbci	r20, 0xFF	; 255
    238e:	5f 4f       	sbci	r21, 0xFF	; 255

00002390 <__divmodsi4_exit>:
    2390:	08 95       	ret

00002392 <__negsi2>:
    2392:	90 95       	com	r25
    2394:	80 95       	com	r24
    2396:	70 95       	com	r23
    2398:	61 95       	neg	r22
    239a:	7f 4f       	sbci	r23, 0xFF	; 255
    239c:	8f 4f       	sbci	r24, 0xFF	; 255
    239e:	9f 4f       	sbci	r25, 0xFF	; 255
    23a0:	08 95       	ret

000023a2 <__mulshisi3>:
    23a2:	b7 ff       	sbrs	r27, 7
    23a4:	3a c0       	rjmp	.+116    	; 0x241a <__muluhisi3>

000023a6 <__mulohisi3>:
    23a6:	39 d0       	rcall	.+114    	; 0x241a <__muluhisi3>
    23a8:	82 1b       	sub	r24, r18
    23aa:	93 0b       	sbc	r25, r19
    23ac:	08 95       	ret

000023ae <__udivmodhi4>:
    23ae:	aa 1b       	sub	r26, r26
    23b0:	bb 1b       	sub	r27, r27
    23b2:	51 e1       	ldi	r21, 0x11	; 17
    23b4:	07 c0       	rjmp	.+14     	; 0x23c4 <__udivmodhi4_ep>

000023b6 <__udivmodhi4_loop>:
    23b6:	aa 1f       	adc	r26, r26
    23b8:	bb 1f       	adc	r27, r27
    23ba:	a6 17       	cp	r26, r22
    23bc:	b7 07       	cpc	r27, r23
    23be:	10 f0       	brcs	.+4      	; 0x23c4 <__udivmodhi4_ep>
    23c0:	a6 1b       	sub	r26, r22
    23c2:	b7 0b       	sbc	r27, r23

000023c4 <__udivmodhi4_ep>:
    23c4:	88 1f       	adc	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	5a 95       	dec	r21
    23ca:	a9 f7       	brne	.-22     	; 0x23b6 <__udivmodhi4_loop>
    23cc:	80 95       	com	r24
    23ce:	90 95       	com	r25
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	08 95       	ret

000023d6 <__udivmodsi4>:
    23d6:	a1 e2       	ldi	r26, 0x21	; 33
    23d8:	1a 2e       	mov	r1, r26
    23da:	aa 1b       	sub	r26, r26
    23dc:	bb 1b       	sub	r27, r27
    23de:	fd 01       	movw	r30, r26
    23e0:	0d c0       	rjmp	.+26     	; 0x23fc <__udivmodsi4_ep>

000023e2 <__udivmodsi4_loop>:
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	ee 1f       	adc	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	a2 17       	cp	r26, r18
    23ec:	b3 07       	cpc	r27, r19
    23ee:	e4 07       	cpc	r30, r20
    23f0:	f5 07       	cpc	r31, r21
    23f2:	20 f0       	brcs	.+8      	; 0x23fc <__udivmodsi4_ep>
    23f4:	a2 1b       	sub	r26, r18
    23f6:	b3 0b       	sbc	r27, r19
    23f8:	e4 0b       	sbc	r30, r20
    23fa:	f5 0b       	sbc	r31, r21

000023fc <__udivmodsi4_ep>:
    23fc:	66 1f       	adc	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	1a 94       	dec	r1
    2406:	69 f7       	brne	.-38     	; 0x23e2 <__udivmodsi4_loop>
    2408:	60 95       	com	r22
    240a:	70 95       	com	r23
    240c:	80 95       	com	r24
    240e:	90 95       	com	r25
    2410:	9b 01       	movw	r18, r22
    2412:	ac 01       	movw	r20, r24
    2414:	bd 01       	movw	r22, r26
    2416:	cf 01       	movw	r24, r30
    2418:	08 95       	ret

0000241a <__muluhisi3>:
    241a:	09 d0       	rcall	.+18     	; 0x242e <__umulhisi3>
    241c:	a5 9f       	mul	r26, r21
    241e:	90 0d       	add	r25, r0
    2420:	b4 9f       	mul	r27, r20
    2422:	90 0d       	add	r25, r0
    2424:	a4 9f       	mul	r26, r20
    2426:	80 0d       	add	r24, r0
    2428:	91 1d       	adc	r25, r1
    242a:	11 24       	eor	r1, r1
    242c:	08 95       	ret

0000242e <__umulhisi3>:
    242e:	a2 9f       	mul	r26, r18
    2430:	b0 01       	movw	r22, r0
    2432:	b3 9f       	mul	r27, r19
    2434:	c0 01       	movw	r24, r0
    2436:	a3 9f       	mul	r26, r19
    2438:	70 0d       	add	r23, r0
    243a:	81 1d       	adc	r24, r1
    243c:	11 24       	eor	r1, r1
    243e:	91 1d       	adc	r25, r1
    2440:	b2 9f       	mul	r27, r18
    2442:	70 0d       	add	r23, r0
    2444:	81 1d       	adc	r24, r1
    2446:	11 24       	eor	r1, r1
    2448:	91 1d       	adc	r25, r1
    244a:	08 95       	ret

0000244c <strcpy>:
    244c:	fb 01       	movw	r30, r22
    244e:	dc 01       	movw	r26, r24
    2450:	01 90       	ld	r0, Z+
    2452:	0d 92       	st	X+, r0
    2454:	00 20       	and	r0, r0
    2456:	e1 f7       	brne	.-8      	; 0x2450 <strcpy+0x4>
    2458:	08 95       	ret

0000245a <_exit>:
    245a:	f8 94       	cli

0000245c <__stop_program>:
    245c:	ff cf       	rjmp	.-2      	; 0x245c <__stop_program>
