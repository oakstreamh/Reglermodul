
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00002500  00002594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000127  008001fe  008001fe  00002692  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000347b  00000000  00000000  000028d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d50  00000000  00000000  00005d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d41  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005bc  00000000  00000000  000097e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d13  00000000  00000000  00009d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018aa  00000000  00000000  0001aaaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  0001c359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004090  00000000  00000000  0001c501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_19>
      50:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c0       	rjmp	.+74     	; 0xcc <__vector_32>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e0       	ldi	r30, 0x00	; 0
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3f       	cpi	r26, 0xFE	; 254
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ef       	ldi	r26, 0xFE	; 254
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 32       	cpi	r26, 0x25	; 37
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 9c 09 	call	0x1338	; 0x1338 <main>
      c6:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_32>:
#include <stdint.h>
#include <string.h>


ISR(TIMER3_COMPA_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	8f 93       	push	r24
    step=step+1;
      d8:	80 91 18 03 	lds	r24, 0x0318
      dc:	8f 5f       	subi	r24, 0xFF	; 255
      de:	80 93 18 03 	sts	0x0318, r24
}
      e2:	8f 91       	pop	r24
      e4:	0f 90       	pop	r0
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	0f 90       	pop	r0
      ea:	1f 90       	pop	r1
      ec:	18 95       	reti

000000ee <countInit>:


void countInit(int req_delay)
{
    OCR3A =  req_delay;
      ee:	90 93 99 00 	sts	0x0099, r25
      f2:	80 93 98 00 	sts	0x0098, r24
	TCNT3 = 0;
      f6:	10 92 95 00 	sts	0x0095, r1
      fa:	10 92 94 00 	sts	0x0094, r1
    TIMSK3 = (1<<OCIE3A);
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	80 93 71 00 	sts	0x0071, r24
	TCCR3B = (1<<WGM32)|(1<<CS32)|(1<<CS30); // CTC-mode 4 to compare with OCR1A, 
     104:	8d e0       	ldi	r24, 0x0D	; 13
     106:	80 93 91 00 	sts	0x0091, r24
	
    
	step = 0;
     10a:	10 92 18 03 	sts	0x0318, r1
     10e:	08 95       	ret

00000110 <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange, int currentEsc)
{
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	ca 5b       	subi	r28, 0xBA	; 186
     13a:	d2 40       	sbci	r29, 0x02	; 2
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
     146:	7b 01       	movw	r14, r22
     148:	6a 01       	movw	r12, r20
	
	int fullBatteryAdjust = 10;
	
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     14a:	29 e0       	ldi	r18, 0x09	; 9
     14c:	e0 e0       	ldi	r30, 0x00	; 0
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	de 01       	movw	r26, r28
     152:	11 96       	adiw	r26, 0x01	; 1
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	2a 95       	dec	r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <FLC_speed+0x44>
	struct io_type steering; strcpy(steering.name, "steering");
     15c:	29 e0       	ldi	r18, 0x09	; 9
     15e:	e9 e0       	ldi	r30, 0x09	; 9
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	de 01       	movw	r26, r28
     164:	51 96       	adiw	r26, 0x11	; 17
     166:	01 90       	ld	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	2a 95       	dec	r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <FLC_speed+0x56>
	struct io_type esc; strcpy(esc.name, "esc");
     16e:	05 e6       	ldi	r16, 0x65	; 101
     170:	13 e7       	ldi	r17, 0x73	; 115
     172:	23 e6       	ldi	r18, 0x63	; 99
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	09 a3       	std	Y+33, r16	; 0x21
     178:	1a a3       	std	Y+34, r17	; 0x22
     17a:	2b a3       	std	Y+35, r18	; 0x23
     17c:	3c a3       	std	Y+36, r19	; 0x24

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     17e:	26 e0       	ldi	r18, 0x06	; 6
     180:	e2 e1       	ldi	r30, 0x12	; 18
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	de 01       	movw	r26, r28
     186:	d1 96       	adiw	r26, 0x31	; 49
     188:	01 90       	ld	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	2a 95       	dec	r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <FLC_speed+0x78>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     190:	87 3e       	cpi	r24, 0xE7	; 231
     192:	07 e0       	ldi	r16, 0x07	; 7
     194:	90 07       	cpc	r25, r16
     196:	2c f4       	brge	.+10     	; 0x1a2 <FLC_speed+0x92>
		steering.value = 202;
     198:	8a ec       	ldi	r24, 0xCA	; 202
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9c 8f       	std	Y+28, r25	; 0x1c
     19e:	8b 8f       	std	Y+27, r24	; 0x1b
     1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <FLC_speed+0xb0>
	}
	else if (currentServo>=MAXRIGHT)
     1a2:	84 3e       	cpi	r24, 0xE4	; 228
     1a4:	1c e0       	ldi	r17, 0x0C	; 12
     1a6:	91 07       	cpc	r25, r17
     1a8:	2c f0       	brlt	.+10     	; 0x1b4 <FLC_speed+0xa4>
	{
		steering.value = 330;
     1aa:	8a e4       	ldi	r24, 0x4A	; 74
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	9c 8f       	std	Y+28, r25	; 0x1c
     1b0:	8b 8f       	std	Y+27, r24	; 0x1b
     1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <FLC_speed+0xb0>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     1b4:	6a e0       	ldi	r22, 0x0A	; 10
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__divmodhi4>
     1bc:	7c 8f       	std	Y+28, r23	; 0x1c
     1be:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// Variable assigned its reference value
	if (currentEsc<2780)
     1c0:	2c ed       	ldi	r18, 0xDC	; 220
     1c2:	c2 16       	cp	r12, r18
     1c4:	2a e0       	ldi	r18, 0x0A	; 10
     1c6:	d2 06       	cpc	r13, r18
     1c8:	2c f4       	brge	.+10     	; 0x1d4 <FLC_speed+0xc4>
	{
		esc.value = 2780;
     1ca:	8c ed       	ldi	r24, 0xDC	; 220
     1cc:	9a e0       	ldi	r25, 0x0A	; 10
     1ce:	9c a7       	std	Y+44, r25	; 0x2c
     1d0:	8b a7       	std	Y+43, r24	; 0x2b
     1d2:	0c c0       	rjmp	.+24     	; 0x1ec <FLC_speed+0xdc>
	}
	else if (currentEsc>MAXESC)
     1d4:	43 e2       	ldi	r20, 0x23	; 35
     1d6:	c4 16       	cp	r12, r20
     1d8:	4b e0       	ldi	r20, 0x0B	; 11
     1da:	d4 06       	cpc	r13, r20
     1dc:	2c f0       	brlt	.+10     	; 0x1e8 <FLC_speed+0xd8>
	{
		esc.value = MAXESC;
     1de:	82 e2       	ldi	r24, 0x22	; 34
     1e0:	9b e0       	ldi	r25, 0x0B	; 11
     1e2:	9c a7       	std	Y+44, r25	; 0x2c
     1e4:	8b a7       	std	Y+43, r24	; 0x2b
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <FLC_speed+0xdc>
	}
	else
	{
		esc.value = currentEsc;
     1e8:	dc a6       	std	Y+44, r13	; 0x2c
     1ea:	cb a6       	std	Y+43, r12	; 0x2b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     1ec:	ff 20       	and	r15, r15
     1ee:	1c f4       	brge	.+6      	; 0x1f6 <FLC_speed+0xe6>
	{
		distance.value = MIN_DISTANCE;
     1f0:	1c 86       	std	Y+12, r1	; 0x0c
     1f2:	1b 86       	std	Y+11, r1	; 0x0b
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <FLC_speed+0xfc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     1f6:	6c e4       	ldi	r22, 0x4C	; 76
     1f8:	e6 16       	cp	r14, r22
     1fa:	f1 04       	cpc	r15, r1
     1fc:	2c f0       	brlt	.+10     	; 0x208 <FLC_speed+0xf8>
	{
		distance.value = MAX_DISTANCE;
     1fe:	8b e4       	ldi	r24, 0x4B	; 75
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	9c 87       	std	Y+12, r25	; 0x0c
     204:	8b 87       	std	Y+11, r24	; 0x0b
     206:	02 c0       	rjmp	.+4      	; 0x20c <FLC_speed+0xfc>
	}
	else
	{
		distance.value = midSonicRange;
     208:	fc 86       	std	Y+12, r15	; 0x0c
     20a:	eb 86       	std	Y+11, r14	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type maxLeft;
	MATLAB_MF(&maxLeft, "maxLeft", 201, 202, 205, 230);
     20c:	0f 2e       	mov	r0, r31
     20e:	f6 ee       	ldi	r31, 0xE6	; 230
     210:	ef 2e       	mov	r14, r31
     212:	f1 2c       	mov	r15, r1
     214:	f0 2d       	mov	r31, r0
     216:	0d ec       	ldi	r16, 0xCD	; 205
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	2a ec       	ldi	r18, 0xCA	; 202
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	49 ec       	ldi	r20, 0xC9	; 201
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	68 e1       	ldi	r22, 0x18	; 24
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	ce 01       	movw	r24, r28
     228:	8f 5b       	subi	r24, 0xBF	; 191
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	8a d6       	rcall	.+3348   	; 0xf42 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 205, 230, 237, 262);
     22e:	0f 2e       	mov	r0, r31
     230:	f6 e0       	ldi	r31, 0x06	; 6
     232:	ef 2e       	mov	r14, r31
     234:	ff 24       	eor	r15, r15
     236:	f3 94       	inc	r15
     238:	f0 2d       	mov	r31, r0
     23a:	0d ee       	ldi	r16, 0xED	; 237
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	26 ee       	ldi	r18, 0xE6	; 230
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	4d ec       	ldi	r20, 0xCD	; 205
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	60 e2       	ldi	r22, 0x20	; 32
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	ce 01       	movw	r24, r28
     24c:	89 5a       	subi	r24, 0xA9	; 169
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	78 d6       	rcall	.+3312   	; 0xf42 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 236, 266, 266, 296);
     252:	0f 2e       	mov	r0, r31
     254:	f8 e2       	ldi	r31, 0x28	; 40
     256:	ef 2e       	mov	r14, r31
     258:	ff 24       	eor	r15, r15
     25a:	f3 94       	inc	r15
     25c:	f0 2d       	mov	r31, r0
     25e:	0a e0       	ldi	r16, 0x0A	; 10
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	2a e0       	ldi	r18, 0x0A	; 10
     264:	31 e0       	ldi	r19, 0x01	; 1
     266:	4c ee       	ldi	r20, 0xEC	; 236
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	65 e2       	ldi	r22, 0x25	; 37
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	ce 01       	movw	r24, r28
     270:	83 59       	subi	r24, 0x93	; 147
     272:	9f 4f       	sbci	r25, 0xFF	; 255
     274:	66 d6       	rcall	.+3276   	; 0xf42 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 267, 295, 302, 325);
     276:	0f 2e       	mov	r0, r31
     278:	f5 e4       	ldi	r31, 0x45	; 69
     27a:	ef 2e       	mov	r14, r31
     27c:	ff 24       	eor	r15, r15
     27e:	f3 94       	inc	r15
     280:	f0 2d       	mov	r31, r0
     282:	0e e2       	ldi	r16, 0x2E	; 46
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	27 e2       	ldi	r18, 0x27	; 39
     288:	31 e0       	ldi	r19, 0x01	; 1
     28a:	4b e0       	ldi	r20, 0x0B	; 11
     28c:	51 e0       	ldi	r21, 0x01	; 1
     28e:	6e e2       	ldi	r22, 0x2E	; 46
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	ce 01       	movw	r24, r28
     294:	8d 57       	subi	r24, 0x7D	; 125
     296:	9f 4f       	sbci	r25, 0xFF	; 255
     298:	54 d6       	rcall	.+3240   	; 0xf42 <MATLAB_MF>
	struct mf_type maxRight;
	MATLAB_MF(&maxRight, "maxRight", 301, 325, 330, 331);
     29a:	0f 2e       	mov	r0, r31
     29c:	fb e4       	ldi	r31, 0x4B	; 75
     29e:	ef 2e       	mov	r14, r31
     2a0:	ff 24       	eor	r15, r15
     2a2:	f3 94       	inc	r15
     2a4:	f0 2d       	mov	r31, r0
     2a6:	0a e4       	ldi	r16, 0x4A	; 74
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	25 e4       	ldi	r18, 0x45	; 69
     2ac:	31 e0       	ldi	r19, 0x01	; 1
     2ae:	4d e2       	ldi	r20, 0x2D	; 45
     2b0:	51 e0       	ldi	r21, 0x01	; 1
     2b2:	64 e3       	ldi	r22, 0x34	; 52
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	ce 01       	movw	r24, r28
     2b8:	87 56       	subi	r24, 0x67	; 103
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	42 d6       	rcall	.+3204   	; 0xf42 <MATLAB_MF>
	

	// Linked list for MFs
	steering.membership_functions = &maxLeft;
     2be:	81 e4       	ldi	r24, 0x41	; 65
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	8c 0f       	add	r24, r28
     2c4:	9d 1f       	adc	r25, r29
     2c6:	9e 8f       	std	Y+30, r25	; 0x1e
     2c8:	8d 8f       	std	Y+29, r24	; 0x1d
	maxLeft.next = &left;
     2ca:	a7 e5       	ldi	r26, 0x57	; 87
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	ac 0f       	add	r26, r28
     2d0:	bd 1f       	adc	r27, r29
     2d2:	67 96       	adiw	r28, 0x17	; 23
     2d4:	bf af       	std	Y+63, r27	; 0x3f
     2d6:	ae af       	std	Y+62, r26	; 0x3e
     2d8:	67 97       	sbiw	r28, 0x17	; 23
	left.next = &straight;
     2da:	ed e6       	ldi	r30, 0x6D	; 109
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	ad 96       	adiw	r28, 0x2d	; 45
     2e4:	ff af       	std	Y+63, r31	; 0x3f
     2e6:	ee af       	std	Y+62, r30	; 0x3e
     2e8:	ad 97       	sbiw	r28, 0x2d	; 45
	straight.next = &right;
     2ea:	03 e8       	ldi	r16, 0x83	; 131
     2ec:	10 e0       	ldi	r17, 0x00	; 0
     2ee:	0c 0f       	add	r16, r28
     2f0:	1d 1f       	adc	r17, r29
     2f2:	cf 57       	subi	r28, 0x7F	; 127
     2f4:	df 4f       	sbci	r29, 0xFF	; 255
     2f6:	19 83       	std	Y+1, r17	; 0x01
     2f8:	08 83       	st	Y, r16
     2fa:	c1 58       	subi	r28, 0x81	; 129
     2fc:	d0 40       	sbci	r29, 0x00	; 0
	right.next = & maxRight;
     2fe:	89 e9       	ldi	r24, 0x99	; 153
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	8c 0f       	add	r24, r28
     304:	9d 1f       	adc	r25, r29
     306:	c9 56       	subi	r28, 0x69	; 105
     308:	df 4f       	sbci	r29, 0xFF	; 255
     30a:	99 83       	std	Y+1, r25	; 0x01
     30c:	88 83       	st	Y, r24
     30e:	c7 59       	subi	r28, 0x97	; 151
     310:	d0 40       	sbci	r29, 0x00	; 0
	maxRight.next = NULL;
     312:	c3 55       	subi	r28, 0x53	; 83
     314:	df 4f       	sbci	r29, 0xFF	; 255
     316:	19 82       	std	Y+1, r1	; 0x01
     318:	18 82       	st	Y, r1
     31a:	cd 5a       	subi	r28, 0xAD	; 173
     31c:	d0 40       	sbci	r29, 0x00	; 0
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 10, 20);
     31e:	0f 2e       	mov	r0, r31
     320:	f4 e1       	ldi	r31, 0x14	; 20
     322:	ef 2e       	mov	r14, r31
     324:	f1 2c       	mov	r15, r1
     326:	f0 2d       	mov	r31, r0
     328:	0a e0       	ldi	r16, 0x0A	; 10
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	4f ef       	ldi	r20, 0xFF	; 255
     332:	5f ef       	ldi	r21, 0xFF	; 255
     334:	6d e3       	ldi	r22, 0x3D	; 61
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	46 96       	adiw	r24, 0x16	; 22
     33a:	03 d6       	rcall	.+3078   	; 0xf42 <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 10, 30, 30, 50);
     33c:	5e 01       	movw	r10, r28
     33e:	95 ec       	ldi	r25, 0xC5	; 197
     340:	a9 0e       	add	r10, r25
     342:	b1 1c       	adc	r11, r1
     344:	0f 2e       	mov	r0, r31
     346:	f2 e3       	ldi	r31, 0x32	; 50
     348:	ef 2e       	mov	r14, r31
     34a:	f1 2c       	mov	r15, r1
     34c:	f0 2d       	mov	r31, r0
     34e:	0e e1       	ldi	r16, 0x1E	; 30
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	2e e1       	ldi	r18, 0x1E	; 30
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4a e0       	ldi	r20, 0x0A	; 10
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	66 e4       	ldi	r22, 0x46	; 70
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	c5 01       	movw	r24, r10
     360:	f0 d5       	rcall	.+3040   	; 0xf42 <MATLAB_MF>
	struct mf_type distant;
	MATLAB_MF(&distant, "distant", 30, 50, 50, 70);
     362:	0f 2e       	mov	r0, r31
     364:	f6 e4       	ldi	r31, 0x46	; 70
     366:	ef 2e       	mov	r14, r31
     368:	f1 2c       	mov	r15, r1
     36a:	f0 2d       	mov	r31, r0
     36c:	02 e3       	ldi	r16, 0x32	; 50
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	22 e3       	ldi	r18, 0x32	; 50
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	4e e1       	ldi	r20, 0x1E	; 30
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	6c e4       	ldi	r22, 0x4C	; 76
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	ce 01       	movw	r24, r28
     37e:	85 52       	subi	r24, 0x25	; 37
     380:	9f 4f       	sbci	r25, 0xFF	; 255
     382:	df d5       	rcall	.+3006   	; 0xf42 <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 50, 70, 75, MAX_DISTANCE+1);
     384:	0f 2e       	mov	r0, r31
     386:	fc e4       	ldi	r31, 0x4C	; 76
     388:	ef 2e       	mov	r14, r31
     38a:	f1 2c       	mov	r15, r1
     38c:	f0 2d       	mov	r31, r0
     38e:	0b e4       	ldi	r16, 0x4B	; 75
     390:	10 e0       	ldi	r17, 0x00	; 0
     392:	26 e4       	ldi	r18, 0x46	; 70
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	42 e3       	ldi	r20, 0x32	; 50
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	64 e5       	ldi	r22, 0x54	; 84
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	ce 01       	movw	r24, r28
     3a0:	8f 50       	subi	r24, 0x0F	; 15
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	ce d5       	rcall	.+2972   	; 0xf42 <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     3a6:	af ea       	ldi	r26, 0xAF	; 175
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	ac 0f       	add	r26, r28
     3ac:	bd 1f       	adc	r27, r29
     3ae:	be 87       	std	Y+14, r27	; 0x0e
     3b0:	ad 87       	std	Y+13, r26	; 0x0d
	stopDist.next = &close;
     3b2:	cd 53       	subi	r28, 0x3D	; 61
     3b4:	df 4f       	sbci	r29, 0xFF	; 255
     3b6:	b9 82       	std	Y+1, r11	; 0x01
     3b8:	a8 82       	st	Y, r10
     3ba:	c3 5c       	subi	r28, 0xC3	; 195
     3bc:	d0 40       	sbci	r29, 0x00	; 0
	close.next = &distant;
     3be:	0b ed       	ldi	r16, 0xDB	; 219
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	0c 0f       	add	r16, r28
     3c4:	1d 1f       	adc	r17, r29
     3c6:	f5 01       	movw	r30, r10
     3c8:	15 8b       	std	Z+21, r17	; 0x15
     3ca:	04 8b       	std	Z+20, r16	; 0x14
	distant.next = &faar;
     3cc:	81 ef       	ldi	r24, 0xF1	; 241
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	8c 0f       	add	r24, r28
     3d2:	9d 1f       	adc	r25, r29
     3d4:	c1 51       	subi	r28, 0x11	; 17
     3d6:	df 4f       	sbci	r29, 0xFF	; 255
     3d8:	99 83       	std	Y+1, r25	; 0x01
     3da:	88 83       	st	Y, r24
     3dc:	cf 5e       	subi	r28, 0xEF	; 239
     3de:	d0 40       	sbci	r29, 0x00	; 0
	faar.next = NULL;
     3e0:	cb 5f       	subi	r28, 0xFB	; 251
     3e2:	de 4f       	sbci	r29, 0xFE	; 254
     3e4:	19 82       	std	Y+1, r1	; 0x01
     3e6:	18 82       	st	Y, r1
     3e8:	c5 50       	subi	r28, 0x05	; 5
     3ea:	d1 40       	sbci	r29, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2779, 2780, 2800, 2830);
     3ec:	0f 2e       	mov	r0, r31
     3ee:	fe e0       	ldi	r31, 0x0E	; 14
     3f0:	ef 2e       	mov	r14, r31
     3f2:	fb e0       	ldi	r31, 0x0B	; 11
     3f4:	ff 2e       	mov	r15, r31
     3f6:	f0 2d       	mov	r31, r0
     3f8:	00 ef       	ldi	r16, 0xF0	; 240
     3fa:	1a e0       	ldi	r17, 0x0A	; 10
     3fc:	2c ed       	ldi	r18, 0xDC	; 220
     3fe:	3a e0       	ldi	r19, 0x0A	; 10
     400:	4b ed       	ldi	r20, 0xDB	; 219
     402:	5a e0       	ldi	r21, 0x0A	; 10
     404:	69 e5       	ldi	r22, 0x59	; 89
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	46 96       	adiw	r24, 0x16	; 22
     40a:	9b d5       	rcall	.+2870   	; 0xf42 <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2825, 2835, 2835, 2845);
     40c:	0f 2e       	mov	r0, r31
     40e:	fd e1       	ldi	r31, 0x1D	; 29
     410:	ef 2e       	mov	r14, r31
     412:	fb e0       	ldi	r31, 0x0B	; 11
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	03 e1       	ldi	r16, 0x13	; 19
     41a:	1b e0       	ldi	r17, 0x0B	; 11
     41c:	23 e1       	ldi	r18, 0x13	; 19
     41e:	3b e0       	ldi	r19, 0x0B	; 11
     420:	49 e0       	ldi	r20, 0x09	; 9
     422:	5b e0       	ldi	r21, 0x0B	; 11
     424:	63 e7       	ldi	r22, 0x73	; 115
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	83 5e       	subi	r24, 0xE3	; 227
     42c:	9e 4f       	sbci	r25, 0xFE	; 254
     42e:	89 d5       	rcall	.+2834   	; 0xf42 <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     430:	0f 2e       	mov	r0, r31
     432:	f2 e2       	ldi	r31, 0x22	; 34
     434:	ef 2e       	mov	r14, r31
     436:	fb e0       	ldi	r31, 0x0B	; 11
     438:	ff 2e       	mov	r15, r31
     43a:	f0 2d       	mov	r31, r0
     43c:	08 e1       	ldi	r16, 0x18	; 24
     43e:	1b e0       	ldi	r17, 0x0B	; 11
     440:	28 e1       	ldi	r18, 0x18	; 24
     442:	3b e0       	ldi	r19, 0x0B	; 11
     444:	4e e0       	ldi	r20, 0x0E	; 14
     446:	5b e0       	ldi	r21, 0x0B	; 11
     448:	61 e6       	ldi	r22, 0x61	; 97
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	ce 01       	movw	r24, r28
     44e:	8d 5c       	subi	r24, 0xCD	; 205
     450:	9e 4f       	sbci	r25, 0xFE	; 254
     452:	77 d5       	rcall	.+2798   	; 0xf42 <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2835, 2845, 2845, 2855);
     454:	0f 2e       	mov	r0, r31
     456:	f7 e2       	ldi	r31, 0x27	; 39
     458:	ef 2e       	mov	r14, r31
     45a:	fb e0       	ldi	r31, 0x0B	; 11
     45c:	ff 2e       	mov	r15, r31
     45e:	f0 2d       	mov	r31, r0
     460:	0d e1       	ldi	r16, 0x1D	; 29
     462:	1b e0       	ldi	r17, 0x0B	; 11
     464:	2d e1       	ldi	r18, 0x1D	; 29
     466:	3b e0       	ldi	r19, 0x0B	; 11
     468:	43 e1       	ldi	r20, 0x13	; 19
     46a:	5b e0       	ldi	r21, 0x0B	; 11
     46c:	68 e6       	ldi	r22, 0x68	; 104
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	ce 01       	movw	r24, r28
     472:	87 5b       	subi	r24, 0xB7	; 183
     474:	9e 4f       	sbci	r25, 0xFE	; 254
     476:	65 d5       	rcall	.+2762   	; 0xf42 <MATLAB_MF>

	// Linked list for MFs
	esc.membership_functions = &neutral;
     478:	a7 e0       	ldi	r26, 0x07	; 7
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	ac 0f       	add	r26, r28
     47e:	bd 1f       	adc	r27, r29
     480:	be a7       	std	Y+46, r27	; 0x2e
     482:	ad a7       	std	Y+45, r26	; 0x2d
	neutral.next = &low;
     484:	ed e1       	ldi	r30, 0x1D	; 29
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	ec 0f       	add	r30, r28
     48a:	fd 1f       	adc	r31, r29
     48c:	c5 5e       	subi	r28, 0xE5	; 229
     48e:	de 4f       	sbci	r29, 0xFE	; 254
     490:	f9 83       	std	Y+1, r31	; 0x01
     492:	e8 83       	st	Y, r30
     494:	cb 51       	subi	r28, 0x1B	; 27
     496:	d1 40       	sbci	r29, 0x01	; 1
	low.next = &medium;
     498:	03 e3       	ldi	r16, 0x33	; 51
     49a:	11 e0       	ldi	r17, 0x01	; 1
     49c:	0c 0f       	add	r16, r28
     49e:	1d 1f       	adc	r17, r29
     4a0:	cf 5c       	subi	r28, 0xCF	; 207
     4a2:	de 4f       	sbci	r29, 0xFE	; 254
     4a4:	19 83       	std	Y+1, r17	; 0x01
     4a6:	08 83       	st	Y, r16
     4a8:	c1 53       	subi	r28, 0x31	; 49
     4aa:	d1 40       	sbci	r29, 0x01	; 1
	medium.next = &high;
     4ac:	89 e4       	ldi	r24, 0x49	; 73
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	8c 0f       	add	r24, r28
     4b2:	9d 1f       	adc	r25, r29
     4b4:	c9 5b       	subi	r28, 0xB9	; 185
     4b6:	de 4f       	sbci	r29, 0xFE	; 254
     4b8:	99 83       	std	Y+1, r25	; 0x01
     4ba:	88 83       	st	Y, r24
     4bc:	c7 54       	subi	r28, 0x47	; 71
     4be:	d1 40       	sbci	r29, 0x01	; 1
	high.next = NULL;
     4c0:	c3 5a       	subi	r28, 0xA3	; 163
     4c2:	de 4f       	sbci	r29, 0xFE	; 254
     4c4:	19 82       	std	Y+1, r1	; 0x01
     4c6:	18 82       	st	Y, r1
     4c8:	cd 55       	subi	r28, 0x5D	; 93
     4ca:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     4cc:	a1 e0       	ldi	r26, 0x01	; 1
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	ac 0f       	add	r26, r28
     4d2:	bd 1f       	adc	r27, r29
     4d4:	b0 93 1c 03 	sts	0x031C, r27
     4d8:	a0 93 1b 03 	sts	0x031B, r26
	distance.next = &steering;
     4dc:	4e 01       	movw	r8, r28
     4de:	b1 e1       	ldi	r27, 0x11	; 17
     4e0:	8b 0e       	add	r8, r27
     4e2:	91 1c       	adc	r9, r1
     4e4:	98 8a       	std	Y+16, r9	; 0x10
     4e6:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     4e8:	3e 01       	movw	r6, r28
     4ea:	e1 e2       	ldi	r30, 0x21	; 33
     4ec:	6e 0e       	add	r6, r30
     4ee:	71 1c       	adc	r7, r1
     4f0:	78 a2       	std	Y+32, r7	; 0x20
     4f2:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     4f4:	18 aa       	std	Y+48, r1	; 0x30
     4f6:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     4f8:	6e 01       	movw	r12, r28
     4fa:	f1 e3       	ldi	r31, 0x31	; 49
     4fc:	cf 0e       	add	r12, r31
     4fe:	d1 1c       	adc	r13, r1
     500:	d0 92 1a 03 	sts	0x031A, r13
     504:	c0 92 19 03 	sts	0x0319, r12
	speed.next = NULL;
     508:	21 96       	adiw	r28, 0x01	; 1
     50a:	1f ae       	std	Y+63, r1	; 0x3f
     50c:	1e ae       	std	Y+62, r1	; 0x3e
     50e:	21 97       	sbiw	r28, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type zero;
	MATLAB_MF(&zero, "zero", 2779-fullBatteryAdjust, 2780-fullBatteryAdjust, 2802-fullBatteryAdjust, 2830-fullBatteryAdjust);
     510:	2e 01       	movw	r4, r28
     512:	01 ea       	ldi	r16, 0xA1	; 161
     514:	40 1a       	sub	r4, r16
     516:	0e ef       	ldi	r16, 0xFE	; 254
     518:	50 0a       	sbc	r5, r16
     51a:	0f 2e       	mov	r0, r31
     51c:	f4 e0       	ldi	r31, 0x04	; 4
     51e:	ef 2e       	mov	r14, r31
     520:	fb e0       	ldi	r31, 0x0B	; 11
     522:	ff 2e       	mov	r15, r31
     524:	f0 2d       	mov	r31, r0
     526:	08 ee       	ldi	r16, 0xE8	; 232
     528:	1a e0       	ldi	r17, 0x0A	; 10
     52a:	22 ed       	ldi	r18, 0xD2	; 210
     52c:	3a e0       	ldi	r19, 0x0A	; 10
     52e:	41 ed       	ldi	r20, 0xD1	; 209
     530:	5a e0       	ldi	r21, 0x0A	; 10
     532:	6d e6       	ldi	r22, 0x6D	; 109
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	c2 01       	movw	r24, r4
     538:	04 d5       	rcall	.+2568   	; 0xf42 <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2825-fullBatteryAdjust, 2835-fullBatteryAdjust, 2835-fullBatteryAdjust, 2845-fullBatteryAdjust);
     53a:	1e 01       	movw	r2, r28
     53c:	1b e8       	ldi	r17, 0x8B	; 139
     53e:	21 1a       	sub	r2, r17
     540:	1e ef       	ldi	r17, 0xFE	; 254
     542:	31 0a       	sbc	r3, r17
     544:	0f 2e       	mov	r0, r31
     546:	f3 e1       	ldi	r31, 0x13	; 19
     548:	ef 2e       	mov	r14, r31
     54a:	fb e0       	ldi	r31, 0x0B	; 11
     54c:	ff 2e       	mov	r15, r31
     54e:	f0 2d       	mov	r31, r0
     550:	09 e0       	ldi	r16, 0x09	; 9
     552:	1b e0       	ldi	r17, 0x0B	; 11
     554:	29 e0       	ldi	r18, 0x09	; 9
     556:	3b e0       	ldi	r19, 0x0B	; 11
     558:	4f ef       	ldi	r20, 0xFF	; 255
     55a:	5a e0       	ldi	r21, 0x0A	; 10
     55c:	62 e7       	ldi	r22, 0x72	; 114
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	c1 01       	movw	r24, r2
     562:	ef d4       	rcall	.+2526   	; 0xf42 <MATLAB_MF>
	struct mf_type average;
	MATLAB_MF(&average, "average", 2828-fullBatteryAdjust, 2838-fullBatteryAdjust, 2838-fullBatteryAdjust, 2848-fullBatteryAdjust);
     564:	0f 2e       	mov	r0, r31
     566:	f6 e1       	ldi	r31, 0x16	; 22
     568:	ef 2e       	mov	r14, r31
     56a:	fb e0       	ldi	r31, 0x0B	; 11
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	0c e0       	ldi	r16, 0x0C	; 12
     572:	1b e0       	ldi	r17, 0x0B	; 11
     574:	2c e0       	ldi	r18, 0x0C	; 12
     576:	3b e0       	ldi	r19, 0x0B	; 11
     578:	42 e0       	ldi	r20, 0x02	; 2
     57a:	5b e0       	ldi	r21, 0x0B	; 11
     57c:	67 e7       	ldi	r22, 0x77	; 119
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	ce 01       	movw	r24, r28
     582:	85 57       	subi	r24, 0x75	; 117
     584:	9e 4f       	sbci	r25, 0xFE	; 254
     586:	dd d4       	rcall	.+2490   	; 0xf42 <MATLAB_MF>
	struct mf_type fast;
	MATLAB_MF(&fast, "fast", 2830-fullBatteryAdjust, 2840-fullBatteryAdjust, 2840-fullBatteryAdjust, 2850-fullBatteryAdjust);
     588:	0f 2e       	mov	r0, r31
     58a:	f8 e1       	ldi	r31, 0x18	; 24
     58c:	ef 2e       	mov	r14, r31
     58e:	fb e0       	ldi	r31, 0x0B	; 11
     590:	ff 2e       	mov	r15, r31
     592:	f0 2d       	mov	r31, r0
     594:	0e e0       	ldi	r16, 0x0E	; 14
     596:	1b e0       	ldi	r17, 0x0B	; 11
     598:	2e e0       	ldi	r18, 0x0E	; 14
     59a:	3b e0       	ldi	r19, 0x0B	; 11
     59c:	44 e0       	ldi	r20, 0x04	; 4
     59e:	5b e0       	ldi	r21, 0x0B	; 11
     5a0:	6f e7       	ldi	r22, 0x7F	; 127
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	ce 01       	movw	r24, r28
     5a6:	8f 55       	subi	r24, 0x5F	; 95
     5a8:	9e 4f       	sbci	r25, 0xFE	; 254
     5aa:	cb d4       	rcall	.+2454   	; 0xf42 <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &zero;
     5ac:	5e ae       	std	Y+62, r5	; 0x3e
     5ae:	4d ae       	std	Y+61, r4	; 0x3d
	zero.next = &slow;
     5b0:	d2 01       	movw	r26, r4
     5b2:	55 96       	adiw	r26, 0x15	; 21
     5b4:	3c 92       	st	X, r3
     5b6:	2e 92       	st	-X, r2
     5b8:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &average;
     5ba:	0b e8       	ldi	r16, 0x8B	; 139
     5bc:	11 e0       	ldi	r17, 0x01	; 1
     5be:	0c 0f       	add	r16, r28
     5c0:	1d 1f       	adc	r17, r29
     5c2:	f1 01       	movw	r30, r2
     5c4:	15 8b       	std	Z+21, r17	; 0x15
     5c6:	04 8b       	std	Z+20, r16	; 0x14
	average.next = &fast;
     5c8:	81 ea       	ldi	r24, 0xA1	; 161
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	8c 0f       	add	r24, r28
     5ce:	9d 1f       	adc	r25, r29
     5d0:	c1 56       	subi	r28, 0x61	; 97
     5d2:	de 4f       	sbci	r29, 0xFE	; 254
     5d4:	99 83       	std	Y+1, r25	; 0x01
     5d6:	88 83       	st	Y, r24
     5d8:	cf 59       	subi	r28, 0x9F	; 159
     5da:	d1 40       	sbci	r29, 0x01	; 1
	fast.next = NULL;
     5dc:	cb 54       	subi	r28, 0x4B	; 75
     5de:	de 4f       	sbci	r29, 0xFE	; 254
     5e0:	19 82       	std	Y+1, r1	; 0x01
     5e2:	18 82       	st	Y, r1
     5e4:	c5 5b       	subi	r28, 0xB5	; 181
     5e6:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     5e8:	a1 e0       	ldi	r26, 0x01	; 1
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	ac 0f       	add	r26, r28
     5ee:	bd 1f       	adc	r27, r29
     5f0:	b0 93 1c 03 	sts	0x031C, r27
     5f4:	a0 93 1b 03 	sts	0x031B, r26
	distance.next = &steering;
     5f8:	98 8a       	std	Y+16, r9	; 0x10
     5fa:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     5fc:	78 a2       	std	Y+32, r7	; 0x20
     5fe:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     600:	18 aa       	std	Y+48, r1	; 0x30
     602:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     604:	d0 92 1a 03 	sts	0x031A, r13
     608:	c0 92 19 03 	sts	0x0319, r12
	speed.next = NULL;
     60c:	21 96       	adiw	r28, 0x01	; 1
     60e:	1f ae       	std	Y+63, r1	; 0x3f
     610:	1e ae       	std	Y+62, r1	; 0x3e
     612:	21 97       	sbiw	r28, 0x01	; 1


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     614:	be 01       	movw	r22, r28
     616:	69 54       	subi	r22, 0x49	; 73
     618:	7e 4f       	sbci	r23, 0xFE	; 254
     61a:	70 93 1e 03 	sts	0x031E, r23
     61e:	60 93 1d 03 	sts	0x031D, r22
	struct rule_type rule2; rule1.next = &rule2;
     622:	ae 01       	movw	r20, r28
     624:	43 54       	subi	r20, 0x43	; 67
     626:	5e 4f       	sbci	r21, 0xFE	; 254
     628:	fb 01       	movw	r30, r22
     62a:	55 83       	std	Z+5, r21	; 0x05
     62c:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
     62e:	82 96       	adiw	r24, 0x22	; 34
     630:	da 01       	movw	r26, r20
     632:	15 96       	adiw	r26, 0x05	; 5
     634:	9c 93       	st	X, r25
     636:	8e 93       	st	-X, r24
     638:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule4; rule3.next = &rule4;
     63a:	9e 01       	movw	r18, r28
     63c:	27 53       	subi	r18, 0x37	; 55
     63e:	3e 4f       	sbci	r19, 0xFE	; 254
     640:	fc 01       	movw	r30, r24
     642:	35 83       	std	Z+5, r19	; 0x05
     644:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5; 
     646:	52 96       	adiw	r26, 0x12	; 18
     648:	f9 01       	movw	r30, r18
     64a:	b5 83       	std	Z+5, r27	; 0x05
     64c:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
     64e:	05 ed       	ldi	r16, 0xD5	; 213
     650:	11 e0       	ldi	r17, 0x01	; 1
     652:	0c 0f       	add	r16, r28
     654:	1d 1f       	adc	r17, r29
     656:	15 96       	adiw	r26, 0x05	; 5
     658:	1c 93       	st	X, r17
     65a:	0e 93       	st	-X, r16
     65c:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule7; rule6.next = &rule7;
     65e:	6e 01       	movw	r12, r28
     660:	15 e2       	ldi	r17, 0x25	; 37
     662:	c1 1a       	sub	r12, r17
     664:	1e ef       	ldi	r17, 0xFE	; 254
     666:	d1 0a       	sbc	r13, r17
     668:	c7 52       	subi	r28, 0x27	; 39
     66a:	de 4f       	sbci	r29, 0xFE	; 254
     66c:	d9 82       	std	Y+1, r13	; 0x01
     66e:	c8 82       	st	Y, r12
     670:	c9 5d       	subi	r28, 0xD9	; 217
     672:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule8; rule7.next = &rule8;
     674:	4e 01       	movw	r8, r28
     676:	ef e1       	ldi	r30, 0x1F	; 31
     678:	8e 1a       	sub	r8, r30
     67a:	ee ef       	ldi	r30, 0xFE	; 254
     67c:	9e 0a       	sbc	r9, r30
     67e:	f6 01       	movw	r30, r12
     680:	95 82       	std	Z+5, r9	; 0x05
     682:	84 82       	std	Z+4, r8	; 0x04
	struct rule_type rule9; rule8.next = &rule9;
     684:	3e 01       	movw	r6, r28
     686:	f9 e1       	ldi	r31, 0x19	; 25
     688:	6f 1a       	sub	r6, r31
     68a:	fe ef       	ldi	r31, 0xFE	; 254
     68c:	7f 0a       	sbc	r7, r31
     68e:	f4 01       	movw	r30, r8
     690:	75 82       	std	Z+5, r7	; 0x05
     692:	64 82       	std	Z+4, r6	; 0x04
	struct rule_type rule10; rule9.next = &rule10;
     694:	0d ee       	ldi	r16, 0xED	; 237
     696:	11 e0       	ldi	r17, 0x01	; 1
     698:	0c 0f       	add	r16, r28
     69a:	1d 1f       	adc	r17, r29
     69c:	f3 01       	movw	r30, r6
     69e:	15 83       	std	Z+5, r17	; 0x05
     6a0:	04 83       	std	Z+4, r16	; 0x04
	struct rule_type rule11; rule10.next = &rule11;
     6a2:	e3 ef       	ldi	r30, 0xF3	; 243
     6a4:	f1 e0       	ldi	r31, 0x01	; 1
     6a6:	ec 0f       	add	r30, r28
     6a8:	fd 1f       	adc	r31, r29
     6aa:	cf 50       	subi	r28, 0x0F	; 15
     6ac:	de 4f       	sbci	r29, 0xFE	; 254
     6ae:	f9 83       	std	Y+1, r31	; 0x01
     6b0:	e8 83       	st	Y, r30
     6b2:	c1 5f       	subi	r28, 0xF1	; 241
     6b4:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12;
     6b6:	09 ef       	ldi	r16, 0xF9	; 249
     6b8:	11 e0       	ldi	r17, 0x01	; 1
     6ba:	0c 0f       	add	r16, r28
     6bc:	1d 1f       	adc	r17, r29
     6be:	c9 50       	subi	r28, 0x09	; 9
     6c0:	de 4f       	sbci	r29, 0xFE	; 254
     6c2:	19 83       	std	Y+1, r17	; 0x01
     6c4:	08 83       	st	Y, r16
     6c6:	c7 5f       	subi	r28, 0xF7	; 247
     6c8:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule13; rule12.next = &rule13;
     6ca:	ef ef       	ldi	r30, 0xFF	; 255
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	ec 0f       	add	r30, r28
     6d0:	fd 1f       	adc	r31, r29
     6d2:	c3 50       	subi	r28, 0x03	; 3
     6d4:	de 4f       	sbci	r29, 0xFE	; 254
     6d6:	f9 83       	std	Y+1, r31	; 0x01
     6d8:	e8 83       	st	Y, r30
     6da:	cd 5f       	subi	r28, 0xFD	; 253
     6dc:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule14; rule13.next = &rule14;
     6de:	05 e0       	ldi	r16, 0x05	; 5
     6e0:	12 e0       	ldi	r17, 0x02	; 2
     6e2:	0c 0f       	add	r16, r28
     6e4:	1d 1f       	adc	r17, r29
     6e6:	cd 5f       	subi	r28, 0xFD	; 253
     6e8:	dd 4f       	sbci	r29, 0xFD	; 253
     6ea:	19 83       	std	Y+1, r17	; 0x01
     6ec:	08 83       	st	Y, r16
     6ee:	c3 50       	subi	r28, 0x03	; 3
     6f0:	d2 40       	sbci	r29, 0x02	; 2
	rule14.next = NULL;
     6f2:	c7 5f       	subi	r28, 0xF7	; 247
     6f4:	dd 4f       	sbci	r29, 0xFD	; 253
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	18 82       	st	Y, r1
     6fa:	c9 50       	subi	r28, 0x09	; 9
     6fc:	d2 40       	sbci	r29, 0x02	; 2
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     6fe:	7e 01       	movw	r14, r28
     700:	15 ef       	ldi	r17, 0xF5	; 245
     702:	e1 1a       	sub	r14, r17
     704:	1d ef       	ldi	r17, 0xFD	; 253
     706:	f1 0a       	sbc	r15, r17
     708:	fb 01       	movw	r30, r22
     70a:	f1 82       	std	Z+1, r15	; 0x01
     70c:	e0 82       	st	Z, r14
     70e:	f7 01       	movw	r30, r14
     710:	13 82       	std	Z+3, r1	; 0x03
     712:	12 82       	std	Z+2, r1	; 0x02
     714:	8e 01       	movw	r16, r28
     716:	01 5f       	subi	r16, 0xF1	; 241
     718:	1d 4f       	sbci	r17, 0xFD	; 253
     71a:	fb 01       	movw	r30, r22
     71c:	13 83       	std	Z+3, r17	; 0x03
     71e:	02 83       	std	Z+2, r16	; 0x02
     720:	f8 01       	movw	r30, r16
     722:	13 82       	std	Z+3, r1	; 0x03
     724:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &zero.value;
     726:	6f ea       	ldi	r22, 0xAF	; 175
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	6c 0f       	add	r22, r28
     72c:	7d 1f       	adc	r23, r29
     72e:	66 5f       	subi	r22, 0xF6	; 246
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	f7 01       	movw	r30, r14
     734:	71 83       	std	Z+1, r23	; 0x01
     736:	60 83       	st	Z, r22
     738:	fa e0       	ldi	r31, 0x0A	; 10
     73a:	4f 0e       	add	r4, r31
     73c:	51 1c       	adc	r5, r1
     73e:	f8 01       	movw	r30, r16
     740:	51 82       	std	Z+1, r5	; 0x01
     742:	40 82       	st	Z, r4

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     744:	0c 5f       	subi	r16, 0xFC	; 252
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	fa 01       	movw	r30, r20
     74a:	11 83       	std	Z+1, r17	; 0x01
     74c:	00 83       	st	Z, r16
     74e:	f8 01       	movw	r30, r16
     750:	13 82       	std	Z+3, r1	; 0x03
     752:	12 82       	std	Z+2, r1	; 0x02
     754:	62 5a       	subi	r22, 0xA2	; 162
     756:	7e 4f       	sbci	r23, 0xFE	; 254
     758:	fa 01       	movw	r30, r20
     75a:	73 83       	std	Z+3, r23	; 0x03
     75c:	62 83       	std	Z+2, r22	; 0x02
     75e:	fb 01       	movw	r30, r22
     760:	13 82       	std	Z+3, r1	; 0x03
     762:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &slow.value;
     764:	4e 5e       	subi	r20, 0xEE	; 238
     766:	51 09       	sbc	r21, r1
     768:	f8 01       	movw	r30, r16
     76a:	51 83       	std	Z+1, r21	; 0x01
     76c:	40 83       	st	Z, r20
     76e:	51 01       	movw	r10, r2
     770:	fa e0       	ldi	r31, 0x0A	; 10
     772:	af 0e       	add	r10, r31
     774:	b1 1c       	adc	r11, r1
     776:	fb 01       	movw	r30, r22
     778:	b1 82       	std	Z+1, r11	; 0x01
     77a:	a0 82       	st	Z, r10

	// if dist is faar and steering is right then speed is average
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     77c:	08 5f       	subi	r16, 0xF8	; 248
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	fc 01       	movw	r30, r24
     782:	11 83       	std	Z+1, r17	; 0x01
     784:	00 83       	st	Z, r16
     786:	40 5b       	subi	r20, 0xB0	; 176
     788:	5e 4f       	sbci	r21, 0xFE	; 254
     78a:	f8 01       	movw	r30, r16
     78c:	53 83       	std	Z+3, r21	; 0x03
     78e:	42 83       	std	Z+2, r20	; 0x02
     790:	fa 01       	movw	r30, r20
     792:	13 82       	std	Z+3, r1	; 0x03
     794:	12 82       	std	Z+2, r1	; 0x02
     796:	64 5f       	subi	r22, 0xF4	; 244
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	73 83       	std	Z+3, r23	; 0x03
     79e:	62 83       	std	Z+2, r22	; 0x02
     7a0:	fb 01       	movw	r30, r22
     7a2:	13 82       	std	Z+3, r1	; 0x03
     7a4:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &average.value;
     7a6:	81 ef       	ldi	r24, 0xF1	; 241
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	8c 0f       	add	r24, r28
     7ac:	9d 1f       	adc	r25, r29
     7ae:	0a 96       	adiw	r24, 0x0a	; 10
     7b0:	f8 01       	movw	r30, r16
     7b2:	91 83       	std	Z+1, r25	; 0x01
     7b4:	80 83       	st	Z, r24
     7b6:	03 e8       	ldi	r16, 0x83	; 131
     7b8:	10 e0       	ldi	r17, 0x00	; 0
     7ba:	0c 0f       	add	r16, r28
     7bc:	1d 1f       	adc	r17, r29
     7be:	06 5f       	subi	r16, 0xF6	; 246
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	fa 01       	movw	r30, r20
     7c4:	11 83       	std	Z+1, r17	; 0x01
     7c6:	00 83       	st	Z, r16
     7c8:	4b e8       	ldi	r20, 0x8B	; 139
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	4c 0f       	add	r20, r28
     7ce:	5d 1f       	adc	r21, r29
     7d0:	46 5f       	subi	r20, 0xF6	; 246
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	fb 01       	movw	r30, r22
     7d6:	51 83       	std	Z+1, r21	; 0x01
     7d8:	40 83       	st	Z, r20

	// if dist is faar and steering is left then speed is average
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     7da:	7e 01       	movw	r14, r28
     7dc:	f9 ed       	ldi	r31, 0xD9	; 217
     7de:	ef 1a       	sub	r14, r31
     7e0:	fd ef       	ldi	r31, 0xFD	; 253
     7e2:	ff 0a       	sbc	r15, r31
     7e4:	f9 01       	movw	r30, r18
     7e6:	f1 82       	std	Z+1, r15	; 0x01
     7e8:	e0 82       	st	Z, r14
     7ea:	02 56       	subi	r16, 0x62	; 98
     7ec:	1e 4f       	sbci	r17, 0xFE	; 254
     7ee:	f7 01       	movw	r30, r14
     7f0:	13 83       	std	Z+3, r17	; 0x03
     7f2:	02 83       	std	Z+2, r16	; 0x02
     7f4:	f8 01       	movw	r30, r16
     7f6:	13 82       	std	Z+3, r1	; 0x03
     7f8:	12 82       	std	Z+2, r1	; 0x02
     7fa:	64 5f       	subi	r22, 0xF4	; 244
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	f9 01       	movw	r30, r18
     800:	73 83       	std	Z+3, r23	; 0x03
     802:	62 83       	std	Z+2, r22	; 0x02
     804:	fb 01       	movw	r30, r22
     806:	13 82       	std	Z+3, r1	; 0x03
     808:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &average.value;
     80a:	f7 01       	movw	r30, r14
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
     810:	27 e5       	ldi	r18, 0x57	; 87
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	2c 0f       	add	r18, r28
     816:	3d 1f       	adc	r19, r29
     818:	26 5f       	subi	r18, 0xF6	; 246
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	f8 01       	movw	r30, r16
     81e:	31 83       	std	Z+1, r19	; 0x01
     820:	20 83       	st	Z, r18
     822:	fb 01       	movw	r30, r22
     824:	51 83       	std	Z+1, r21	; 0x01
     826:	40 83       	st	Z, r20

	// if dist is faar and steering is maxRight then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     828:	08 5f       	subi	r16, 0xF8	; 248
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	1c 93       	st	X, r17
     830:	0e 93       	st	-X, r16
     832:	68 5f       	subi	r22, 0xF8	; 248
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	f8 01       	movw	r30, r16
     838:	73 83       	std	Z+3, r23	; 0x03
     83a:	62 83       	std	Z+2, r22	; 0x02
     83c:	fb 01       	movw	r30, r22
     83e:	13 82       	std	Z+3, r1	; 0x03
     840:	12 82       	std	Z+2, r1	; 0x02
     842:	26 52       	subi	r18, 0x26	; 38
     844:	3e 4f       	sbci	r19, 0xFE	; 254
     846:	13 96       	adiw	r26, 0x03	; 3
     848:	3c 93       	st	X, r19
     84a:	2e 93       	st	-X, r18
     84c:	12 97       	sbiw	r26, 0x02	; 2
     84e:	d9 01       	movw	r26, r18
     850:	13 96       	adiw	r26, 0x03	; 3
     852:	1c 92       	st	X, r1
     854:	1e 92       	st	-X, r1
     856:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &maxRight.value; then5.value = &slow.value;
     858:	f8 01       	movw	r30, r16
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
     85e:	a9 e9       	ldi	r26, 0x99	; 153
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	ac 0f       	add	r26, r28
     864:	bd 1f       	adc	r27, r29
     866:	1a 96       	adiw	r26, 0x0a	; 10
     868:	fb 01       	movw	r30, r22
     86a:	b1 83       	std	Z+1, r27	; 0x01
     86c:	a0 83       	st	Z, r26
     86e:	d9 01       	movw	r26, r18
     870:	ad 92       	st	X+, r10
     872:	bc 92       	st	X, r11
	
	// if dist is faar and steering is maxLeft then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     874:	68 5f       	subi	r22, 0xF8	; 248
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	cb 52       	subi	r28, 0x2B	; 43
     87a:	de 4f       	sbci	r29, 0xFE	; 254
     87c:	79 83       	std	Y+1, r23	; 0x01
     87e:	68 83       	st	Y, r22
     880:	c5 5d       	subi	r28, 0xD5	; 213
     882:	d1 40       	sbci	r29, 0x01	; 1
     884:	28 5f       	subi	r18, 0xF8	; 248
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	fb 01       	movw	r30, r22
     88a:	33 83       	std	Z+3, r19	; 0x03
     88c:	22 83       	std	Z+2, r18	; 0x02
     88e:	d9 01       	movw	r26, r18
     890:	13 96       	adiw	r26, 0x03	; 3
     892:	1c 92       	st	X, r1
     894:	1e 92       	st	-X, r1
     896:	12 97       	sbiw	r26, 0x02	; 2
     898:	14 96       	adiw	r26, 0x04	; 4
     89a:	c9 52       	subi	r28, 0x29	; 41
     89c:	de 4f       	sbci	r29, 0xFE	; 254
     89e:	b9 83       	std	Y+1, r27	; 0x01
     8a0:	a8 83       	st	Y, r26
     8a2:	c7 5d       	subi	r28, 0xD7	; 215
     8a4:	d1 40       	sbci	r29, 0x01	; 1
     8a6:	13 96       	adiw	r26, 0x03	; 3
     8a8:	1c 92       	st	X, r1
     8aa:	1e 92       	st	-X, r1
     8ac:	12 97       	sbiw	r26, 0x02	; 2
	if61.value = &faar.value; if62.value = &maxLeft.value; then6.value = &slow.value;
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
     8b2:	61 e4       	ldi	r22, 0x41	; 65
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	6c 0f       	add	r22, r28
     8b8:	7d 1f       	adc	r23, r29
     8ba:	66 5f       	subi	r22, 0xF6	; 246
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	f9 01       	movw	r30, r18
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	60 83       	st	Z, r22
     8c4:	ad 92       	st	X+, r10
     8c6:	bc 92       	st	X, r11
	
	// if dist is distant and currentEsc is neutral then speed is slow
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     8c8:	7e 5f       	subi	r23, 0xFE	; 254
     8ca:	d6 01       	movw	r26, r12
     8cc:	6d 93       	st	X+, r22
     8ce:	7c 93       	st	X, r23
     8d0:	04 5e       	subi	r16, 0xE4	; 228
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	fb 01       	movw	r30, r22
     8d6:	13 83       	std	Z+3, r17	; 0x03
     8d8:	02 83       	std	Z+2, r16	; 0x02
     8da:	d8 01       	movw	r26, r16
     8dc:	13 96       	adiw	r26, 0x03	; 3
     8de:	1c 92       	st	X, r1
     8e0:	1e 92       	st	-X, r1
     8e2:	12 97       	sbiw	r26, 0x02	; 2
     8e4:	38 96       	adiw	r30, 0x08	; 8
     8e6:	d6 01       	movw	r26, r12
     8e8:	13 96       	adiw	r26, 0x03	; 3
     8ea:	fc 93       	st	X, r31
     8ec:	ee 93       	st	-X, r30
     8ee:	12 97       	sbiw	r26, 0x02	; 2
     8f0:	13 82       	std	Z+3, r1	; 0x03
     8f2:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &distant.value; if72.value = &neutral.value; then7.value = &slow.value;
     8f4:	2b ed       	ldi	r18, 0xDB	; 219
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	2c 0f       	add	r18, r28
     8fa:	3d 1f       	adc	r19, r29
     8fc:	26 5f       	subi	r18, 0xF6	; 246
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	db 01       	movw	r26, r22
     902:	2d 93       	st	X+, r18
     904:	3c 93       	st	X, r19
     906:	0f 2e       	mov	r0, r31
     908:	f7 e0       	ldi	r31, 0x07	; 7
     90a:	cf 2e       	mov	r12, r31
     90c:	dd 24       	eor	r13, r13
     90e:	d3 94       	inc	r13
     910:	f0 2d       	mov	r31, r0
     912:	cc 0e       	add	r12, r28
     914:	dd 1e       	adc	r13, r29
     916:	ba e0       	ldi	r27, 0x0A	; 10
     918:	cb 0e       	add	r12, r27
     91a:	d1 1c       	adc	r13, r1
     91c:	d8 01       	movw	r26, r16
     91e:	cd 92       	st	X+, r12
     920:	dc 92       	st	X, r13
     922:	b1 82       	std	Z+1, r11	; 0x01
     924:	a0 82       	st	Z, r10
	
	// if dist is distant and currentEsc is low then speed is average
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     926:	64 5f       	subi	r22, 0xF4	; 244
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	f4 01       	movw	r30, r8
     92c:	71 83       	std	Z+1, r23	; 0x01
     92e:	60 83       	st	Z, r22
     930:	04 5f       	subi	r16, 0xF4	; 244
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	db 01       	movw	r26, r22
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	1c 93       	st	X, r17
     93a:	0e 93       	st	-X, r16
     93c:	12 97       	sbiw	r26, 0x02	; 2
     93e:	f8 01       	movw	r30, r16
     940:	13 82       	std	Z+3, r1	; 0x03
     942:	12 82       	std	Z+2, r1	; 0x02
     944:	34 96       	adiw	r30, 0x04	; 4
     946:	d4 01       	movw	r26, r8
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	fc 93       	st	X, r31
     94c:	ee 93       	st	-X, r30
     94e:	12 97       	sbiw	r26, 0x02	; 2
     950:	13 82       	std	Z+3, r1	; 0x03
     952:	12 82       	std	Z+2, r1	; 0x02
	if81.value = &distant.value; if82.value = &low.value; then8.value = &average.value;
     954:	db 01       	movw	r26, r22
     956:	2d 93       	st	X+, r18
     958:	3c 93       	st	X, r19
     95a:	0f 2e       	mov	r0, r31
     95c:	fd e1       	ldi	r31, 0x1D	; 29
     95e:	ef 2e       	mov	r14, r31
     960:	ff 24       	eor	r15, r15
     962:	f3 94       	inc	r15
     964:	f0 2d       	mov	r31, r0
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ba e0       	ldi	r27, 0x0A	; 10
     96c:	eb 0e       	add	r14, r27
     96e:	f1 1c       	adc	r15, r1
     970:	d8 01       	movw	r26, r16
     972:	ed 92       	st	X+, r14
     974:	fc 92       	st	X, r15
     976:	51 83       	std	Z+1, r21	; 0x01
     978:	40 83       	st	Z, r20
	
	// if dist is distant and currentEsc is medium then speed is average
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     97a:	64 5f       	subi	r22, 0xF4	; 244
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	f3 01       	movw	r30, r6
     980:	71 83       	std	Z+1, r23	; 0x01
     982:	60 83       	st	Z, r22
     984:	4e 01       	movw	r8, r28
     986:	f9 e9       	ldi	r31, 0x99	; 153
     988:	8f 1a       	sub	r8, r31
     98a:	fd ef       	ldi	r31, 0xFD	; 253
     98c:	9f 0a       	sbc	r9, r31
     98e:	db 01       	movw	r26, r22
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	9c 92       	st	X, r9
     994:	8e 92       	st	-X, r8
     996:	12 97       	sbiw	r26, 0x02	; 2
     998:	f4 01       	movw	r30, r8
     99a:	13 82       	std	Z+3, r1	; 0x03
     99c:	12 82       	std	Z+2, r1	; 0x02
     99e:	34 96       	adiw	r30, 0x04	; 4
     9a0:	d3 01       	movw	r26, r6
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	fc 93       	st	X, r31
     9a6:	ee 93       	st	-X, r30
     9a8:	12 97       	sbiw	r26, 0x02	; 2
     9aa:	13 82       	std	Z+3, r1	; 0x03
     9ac:	12 82       	std	Z+2, r1	; 0x02
	if91.value = &distant.value; if92.value = &medium.value; then9.value = &average.value;
     9ae:	db 01       	movw	r26, r22
     9b0:	2d 93       	st	X+, r18
     9b2:	3c 93       	st	X, r19
     9b4:	03 e3       	ldi	r16, 0x33	; 51
     9b6:	11 e0       	ldi	r17, 0x01	; 1
     9b8:	0c 0f       	add	r16, r28
     9ba:	1d 1f       	adc	r17, r29
     9bc:	06 5f       	subi	r16, 0xF6	; 246
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	d4 01       	movw	r26, r8
     9c2:	0d 93       	st	X+, r16
     9c4:	1c 93       	st	X, r17
     9c6:	51 83       	std	Z+1, r21	; 0x01
     9c8:	40 83       	st	Z, r20
	
	// if dist is faar and steering is straight and currentEsc is neutral then speed is average
	struct rule_element_type if101, if102, if103, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = &if103; if103.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     9ca:	26 57       	subi	r18, 0x76	; 118
     9cc:	3e 4f       	sbci	r19, 0xFE	; 254
     9ce:	c3 51       	subi	r28, 0x13	; 19
     9d0:	de 4f       	sbci	r29, 0xFE	; 254
     9d2:	39 83       	std	Y+1, r19	; 0x01
     9d4:	28 83       	st	Y, r18
     9d6:	cd 5e       	subi	r28, 0xED	; 237
     9d8:	d1 40       	sbci	r29, 0x01	; 1
     9da:	60 5f       	subi	r22, 0xF0	; 240
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	f9 01       	movw	r30, r18
     9e0:	73 83       	std	Z+3, r23	; 0x03
     9e2:	62 83       	std	Z+2, r22	; 0x02
     9e4:	4e 01       	movw	r8, r28
     9e6:	f9 e8       	ldi	r31, 0x89	; 137
     9e8:	8f 1a       	sub	r8, r31
     9ea:	fd ef       	ldi	r31, 0xFD	; 253
     9ec:	9f 0a       	sbc	r9, r31
     9ee:	db 01       	movw	r26, r22
     9f0:	13 96       	adiw	r26, 0x03	; 3
     9f2:	9c 92       	st	X, r9
     9f4:	8e 92       	st	-X, r8
     9f6:	12 97       	sbiw	r26, 0x02	; 2
     9f8:	f4 01       	movw	r30, r8
     9fa:	13 82       	std	Z+3, r1	; 0x03
     9fc:	12 82       	std	Z+2, r1	; 0x02
     9fe:	34 96       	adiw	r30, 0x04	; 4
     a00:	c1 51       	subi	r28, 0x11	; 17
     a02:	de 4f       	sbci	r29, 0xFE	; 254
     a04:	f9 83       	std	Y+1, r31	; 0x01
     a06:	e8 83       	st	Y, r30
     a08:	cf 5e       	subi	r28, 0xEF	; 239
     a0a:	d1 40       	sbci	r29, 0x01	; 1
     a0c:	13 82       	std	Z+3, r1	; 0x03
     a0e:	12 82       	std	Z+2, r1	; 0x02
	if101.value = &faar.value; if102.value = &straight.value; if103.value = &neutral.value; then10.value = &slow.value;
     a10:	d9 01       	movw	r26, r18
     a12:	8d 93       	st	X+, r24
     a14:	9c 93       	st	X, r25
     a16:	2d e6       	ldi	r18, 0x6D	; 109
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	2c 0f       	add	r18, r28
     a1c:	3d 1f       	adc	r19, r29
     a1e:	26 5f       	subi	r18, 0xF6	; 246
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	db 01       	movw	r26, r22
     a24:	2d 93       	st	X+, r18
     a26:	3c 93       	st	X, r19
     a28:	d4 01       	movw	r26, r8
     a2a:	11 96       	adiw	r26, 0x01	; 1
     a2c:	dc 92       	st	X, r13
     a2e:	ce 92       	st	-X, r12
     a30:	b1 82       	std	Z+1, r11	; 0x01
     a32:	a0 82       	st	Z, r10

	// if dist is faar and steering is straight and currentEsc is low then speed is average
	struct rule_element_type if111, if112, if113, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = &if113; if113.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     a34:	6e 01       	movw	r12, r28
     a36:	b1 e8       	ldi	r27, 0x81	; 129
     a38:	cb 1a       	sub	r12, r27
     a3a:	bd ef       	ldi	r27, 0xFD	; 253
     a3c:	db 0a       	sbc	r13, r27
     a3e:	cd 50       	subi	r28, 0x0D	; 13
     a40:	de 4f       	sbci	r29, 0xFE	; 254
     a42:	d9 82       	std	Y+1, r13	; 0x01
     a44:	c8 82       	st	Y, r12
     a46:	c3 5f       	subi	r28, 0xF3	; 243
     a48:	d1 40       	sbci	r29, 0x01	; 1
     a4a:	60 5f       	subi	r22, 0xF0	; 240
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	f6 01       	movw	r30, r12
     a50:	73 83       	std	Z+3, r23	; 0x03
     a52:	62 83       	std	Z+2, r22	; 0x02
     a54:	50 96       	adiw	r26, 0x10	; 16
     a56:	fb 01       	movw	r30, r22
     a58:	b3 83       	std	Z+3, r27	; 0x03
     a5a:	a2 83       	std	Z+2, r26	; 0x02
     a5c:	13 96       	adiw	r26, 0x03	; 3
     a5e:	1c 92       	st	X, r1
     a60:	1e 92       	st	-X, r1
     a62:	12 97       	sbiw	r26, 0x02	; 2
     a64:	5e 01       	movw	r10, r28
     a66:	f5 e7       	ldi	r31, 0x75	; 117
     a68:	af 1a       	sub	r10, r31
     a6a:	fd ef       	ldi	r31, 0xFD	; 253
     a6c:	bf 0a       	sbc	r11, r31
     a6e:	cb 50       	subi	r28, 0x0B	; 11
     a70:	de 4f       	sbci	r29, 0xFE	; 254
     a72:	b9 82       	std	Y+1, r11	; 0x01
     a74:	a8 82       	st	Y, r10
     a76:	c5 5f       	subi	r28, 0xF5	; 245
     a78:	d1 40       	sbci	r29, 0x01	; 1
     a7a:	f5 01       	movw	r30, r10
     a7c:	13 82       	std	Z+3, r1	; 0x03
     a7e:	12 82       	std	Z+2, r1	; 0x02
	if111.value = &faar.value; if112.value = &straight.value; if113.value = &low.value; then11.value = &average.value;
     a80:	f6 01       	movw	r30, r12
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
     a86:	fb 01       	movw	r30, r22
     a88:	31 83       	std	Z+1, r19	; 0x01
     a8a:	20 83       	st	Z, r18
     a8c:	ed 92       	st	X+, r14
     a8e:	fc 92       	st	X, r15
     a90:	d5 01       	movw	r26, r10
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	5c 93       	st	X, r21
     a96:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is medium then speed is fast
	struct rule_element_type if121, if122, if123, then12;
	rule12.if_side = &if121; if121.next = &if122; if122.next = &if123; if123.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     a98:	64 5f       	subi	r22, 0xF4	; 244
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	c7 50       	subi	r28, 0x07	; 7
     a9e:	de 4f       	sbci	r29, 0xFE	; 254
     aa0:	79 83       	std	Y+1, r23	; 0x01
     aa2:	68 83       	st	Y, r22
     aa4:	c9 5f       	subi	r28, 0xF9	; 249
     aa6:	d1 40       	sbci	r29, 0x01	; 1
     aa8:	42 50       	subi	r20, 0x02	; 2
     aaa:	5f 4f       	sbci	r21, 0xFF	; 255
     aac:	fb 01       	movw	r30, r22
     aae:	53 83       	std	Z+3, r21	; 0x03
     ab0:	42 83       	std	Z+2, r20	; 0x02
     ab2:	1c 96       	adiw	r26, 0x0c	; 12
     ab4:	fa 01       	movw	r30, r20
     ab6:	b3 83       	std	Z+3, r27	; 0x03
     ab8:	a2 83       	std	Z+2, r26	; 0x02
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	1c 92       	st	X, r1
     abe:	1e 92       	st	-X, r1
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	7e 01       	movw	r14, r28
     ac4:	f5 e6       	ldi	r31, 0x65	; 101
     ac6:	ef 1a       	sub	r14, r31
     ac8:	fd ef       	ldi	r31, 0xFD	; 253
     aca:	ff 0a       	sbc	r15, r31
     acc:	c5 50       	subi	r28, 0x05	; 5
     ace:	de 4f       	sbci	r29, 0xFE	; 254
     ad0:	f9 82       	std	Y+1, r15	; 0x01
     ad2:	e8 82       	st	Y, r14
     ad4:	cb 5f       	subi	r28, 0xFB	; 251
     ad6:	d1 40       	sbci	r29, 0x01	; 1
     ad8:	f7 01       	movw	r30, r14
     ada:	13 82       	std	Z+3, r1	; 0x03
     adc:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &faar.value; if122.value = &straight.value; if123.value = &medium.value; then12.value = &fast.value;
     ade:	fb 01       	movw	r30, r22
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24
     ae4:	fa 01       	movw	r30, r20
     ae6:	31 83       	std	Z+1, r19	; 0x01
     ae8:	20 83       	st	Z, r18
     aea:	0d 93       	st	X+, r16
     aec:	1c 93       	st	X, r17
     aee:	41 ea       	ldi	r20, 0xA1	; 161
     af0:	51 e0       	ldi	r21, 0x01	; 1
     af2:	4c 0f       	add	r20, r28
     af4:	5d 1f       	adc	r21, r29
     af6:	46 5f       	subi	r20, 0xF6	; 246
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	d7 01       	movw	r26, r14
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	5c 93       	st	X, r21
     b00:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is high then speed is fast
	struct rule_element_type if131, if132, if133, then13;
	rule13.if_side = &if131; if131.next = &if132; if132.next = &if133; if133.next = NULL; rule13.then_side = &then13; then13.next = NULL;
     b02:	0e 59       	subi	r16, 0x9E	; 158
     b04:	1e 4f       	sbci	r17, 0xFE	; 254
     b06:	c1 50       	subi	r28, 0x01	; 1
     b08:	de 4f       	sbci	r29, 0xFE	; 254
     b0a:	19 83       	std	Y+1, r17	; 0x01
     b0c:	08 83       	st	Y, r16
     b0e:	cf 5f       	subi	r28, 0xFF	; 255
     b10:	d1 40       	sbci	r29, 0x01	; 1
     b12:	6c 5e       	subi	r22, 0xEC	; 236
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	f8 01       	movw	r30, r16
     b18:	73 83       	std	Z+3, r23	; 0x03
     b1a:	62 83       	std	Z+2, r22	; 0x02
     b1c:	1c 96       	adiw	r26, 0x0c	; 12
     b1e:	fb 01       	movw	r30, r22
     b20:	b3 83       	std	Z+3, r27	; 0x03
     b22:	a2 83       	std	Z+2, r26	; 0x02
     b24:	13 96       	adiw	r26, 0x03	; 3
     b26:	1c 92       	st	X, r1
     b28:	1e 92       	st	-X, r1
     b2a:	12 97       	sbiw	r26, 0x02	; 2
     b2c:	7e 01       	movw	r14, r28
     b2e:	f5 e5       	ldi	r31, 0x55	; 85
     b30:	ef 1a       	sub	r14, r31
     b32:	fd ef       	ldi	r31, 0xFD	; 253
     b34:	ff 0a       	sbc	r15, r31
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	dd 4f       	sbci	r29, 0xFD	; 253
     b3a:	f9 82       	std	Y+1, r15	; 0x01
     b3c:	e8 82       	st	Y, r14
     b3e:	c1 50       	subi	r28, 0x01	; 1
     b40:	d2 40       	sbci	r29, 0x02	; 2
     b42:	f7 01       	movw	r30, r14
     b44:	13 82       	std	Z+3, r1	; 0x03
     b46:	12 82       	std	Z+2, r1	; 0x02
	if131.value = &faar.value; if132.value = &straight.value; if133.value = &high.value; then13.value = &fast.value;
     b48:	f8 01       	movw	r30, r16
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
     b4e:	fb 01       	movw	r30, r22
     b50:	31 83       	std	Z+1, r19	; 0x01
     b52:	20 83       	st	Z, r18
     b54:	69 e4       	ldi	r22, 0x49	; 73
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	6c 0f       	add	r22, r28
     b5a:	7d 1f       	adc	r23, r29
     b5c:	66 5f       	subi	r22, 0xF6	; 246
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	6d 93       	st	X+, r22
     b62:	7c 93       	st	X, r23
     b64:	d7 01       	movw	r26, r14
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	5c 93       	st	X, r21
     b6a:	4e 93       	st	-X, r20

	// if dist is faar and steering is straight then speed is fast
	struct rule_element_type if141, if142, then14;
	rule14.if_side = &if141; if141.next = &if142; if142.next = NULL; rule14.then_side = &then14; then14.next = NULL;
     b6c:	64 5a       	subi	r22, 0xA4	; 164
     b6e:	7e 4f       	sbci	r23, 0xFE	; 254
     b70:	cb 5f       	subi	r28, 0xFB	; 251
     b72:	dd 4f       	sbci	r29, 0xFD	; 253
     b74:	79 83       	std	Y+1, r23	; 0x01
     b76:	68 83       	st	Y, r22
     b78:	c5 50       	subi	r28, 0x05	; 5
     b7a:	d2 40       	sbci	r29, 0x02	; 2
     b7c:	18 96       	adiw	r26, 0x08	; 8
     b7e:	fb 01       	movw	r30, r22
     b80:	b3 83       	std	Z+3, r27	; 0x03
     b82:	a2 83       	std	Z+2, r26	; 0x02
     b84:	13 96       	adiw	r26, 0x03	; 3
     b86:	1c 92       	st	X, r1
     b88:	1e 92       	st	-X, r1
     b8a:	12 97       	sbiw	r26, 0x02	; 2
     b8c:	08 5e       	subi	r16, 0xE8	; 232
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	c9 5f       	subi	r28, 0xF9	; 249
     b92:	dd 4f       	sbci	r29, 0xFD	; 253
     b94:	19 83       	std	Y+1, r17	; 0x01
     b96:	08 83       	st	Y, r16
     b98:	c7 50       	subi	r28, 0x07	; 7
     b9a:	d2 40       	sbci	r29, 0x02	; 2
     b9c:	f8 01       	movw	r30, r16
     b9e:	13 82       	std	Z+3, r1	; 0x03
     ba0:	12 82       	std	Z+2, r1	; 0x02
	if141.value = &faar.value; if142.value = &straight.value; then14.value = &fast.value;
     ba2:	fb 01       	movw	r30, r22
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24
     ba8:	2d 93       	st	X+, r18
     baa:	3c 93       	st	X, r19
     bac:	d8 01       	movw	r26, r16
     bae:	4d 93       	st	X+, r20
     bb0:	5c 93       	st	X, r21


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     bb2:	94 d0       	rcall	.+296    	; 0xcdc <fuzzification>
	rule_evaluation();
     bb4:	ba d0       	rcall	.+372    	; 0xd2a <rule_evaluation>
	defuzzification();
     bb6:	ff d0       	rcall	.+510    	; 0xdb6 <defuzzification>

	if (speed.value > MAXESC)
     bb8:	8b ad       	ldd	r24, Y+59	; 0x3b
     bba:	9c ad       	ldd	r25, Y+60	; 0x3c
     bbc:	83 32       	cpi	r24, 0x23	; 35
     bbe:	bb e0       	ldi	r27, 0x0B	; 11
     bc0:	9b 07       	cpc	r25, r27
     bc2:	24 f0       	brlt	.+8      	; 0xbcc <FLC_speed+0xabc>
	{
		setESC(MAXESC);
     bc4:	82 e2       	ldi	r24, 0x22	; 34
     bc6:	9b e0       	ldi	r25, 0x0B	; 11
     bc8:	e8 d7       	rcall	.+4048   	; 0x1b9a <setESC>
     bca:	09 c0       	rjmp	.+18     	; 0xbde <FLC_speed+0xace>
	}
	else if (speed.value < NEUTRAL)
     bcc:	8d 3c       	cpi	r24, 0xCD	; 205
     bce:	ea e0       	ldi	r30, 0x0A	; 10
     bd0:	9e 07       	cpc	r25, r30
     bd2:	24 f4       	brge	.+8      	; 0xbdc <FLC_speed+0xacc>
	{
		setESC(NEUTRAL);
     bd4:	8d ec       	ldi	r24, 0xCD	; 205
     bd6:	9a e0       	ldi	r25, 0x0A	; 10
     bd8:	e0 d7       	rcall	.+4032   	; 0x1b9a <setESC>
     bda:	01 c0       	rjmp	.+2      	; 0xbde <FLC_speed+0xace>
	}
	else
	{
	
		setESC(speed.value);
     bdc:	de d7       	rcall	.+4028   	; 0x1b9a <setESC>
	}
    
    
}
     bde:	c6 54       	subi	r28, 0x46	; 70
     be0:	dd 4f       	sbci	r29, 0xFD	; 253
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	4f 90       	pop	r4
     c0c:	3f 90       	pop	r3
     c0e:	2f 90       	pop	r2
     c10:	08 95       	ret

00000c12 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c12:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c14:	84 85       	ldd	r24, Z+12	; 0x0c
     c16:	95 85       	ldd	r25, Z+13	; 0x0d
     c18:	9b 01       	movw	r18, r22
     c1a:	28 1b       	sub	r18, r24
     c1c:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c1e:	86 85       	ldd	r24, Z+14	; 0x0e
     c20:	97 85       	ldd	r25, Z+15	; 0x0f
     c22:	86 1b       	sub	r24, r22
     c24:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c26:	12 16       	cp	r1, r18
     c28:	13 06       	cpc	r1, r19
     c2a:	f4 f4       	brge	.+60     	; 0xc68 <compute_degree_of_membership+0x56>
     c2c:	18 16       	cp	r1, r24
     c2e:	19 06       	cpc	r1, r25
     c30:	f4 f4       	brge	.+60     	; 0xc6e <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c32:	60 89       	ldd	r22, Z+16	; 0x10
     c34:	71 89       	ldd	r23, Z+17	; 0x11
     c36:	a2 89       	ldd	r26, Z+18	; 0x12
     c38:	b3 89       	ldd	r27, Z+19	; 0x13
     c3a:	8a 9f       	mul	r24, r26
     c3c:	a0 01       	movw	r20, r0
     c3e:	8b 9f       	mul	r24, r27
     c40:	50 0d       	add	r21, r0
     c42:	9a 9f       	mul	r25, r26
     c44:	50 0d       	add	r21, r0
     c46:	11 24       	eor	r1, r1
     c48:	26 9f       	mul	r18, r22
     c4a:	c0 01       	movw	r24, r0
     c4c:	27 9f       	mul	r18, r23
     c4e:	90 0d       	add	r25, r0
     c50:	36 9f       	mul	r19, r22
     c52:	90 0d       	add	r25, r0
     c54:	11 24       	eor	r1, r1
     c56:	48 17       	cp	r20, r24
     c58:	59 07       	cpc	r21, r25
     c5a:	0c f4       	brge	.+2      	; 0xc5e <compute_degree_of_membership+0x4c>
     c5c:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	91 05       	cpc	r25, r1
     c62:	09 f0       	breq	.+2      	; 0xc66 <compute_degree_of_membership+0x54>
     c64:	3c f4       	brge	.+14     	; 0xc74 <compute_degree_of_membership+0x62>
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <compute_degree_of_membership+0x66>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c78:	93 87       	std	Z+11, r25	; 0x0b
     c7a:	82 87       	std	Z+10, r24	; 0x0a
     c7c:	08 95       	ret

00000c7e <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     c88:	c6 85       	ldd	r28, Z+14	; 0x0e
     c8a:	d7 85       	ldd	r29, Z+15	; 0x0f
     c8c:	84 85       	ldd	r24, Z+12	; 0x0c
     c8e:	95 85       	ldd	r25, Z+13	; 0x0d
     c90:	c8 1b       	sub	r28, r24
     c92:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     c94:	22 85       	ldd	r18, Z+10	; 0x0a
     c96:	33 85       	ldd	r19, Z+11	; 0x0b
     c98:	60 89       	ldd	r22, Z+16	; 0x10
     c9a:	71 89       	ldd	r23, Z+17	; 0x11
     c9c:	c9 01       	movw	r24, r18
     c9e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     ca2:	8e 01       	movw	r16, r28
     ca4:	06 1b       	sub	r16, r22
     ca6:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     ca8:	62 89       	ldd	r22, Z+18	; 0x12
     caa:	73 89       	ldd	r23, Z+19	; 0x13
     cac:	c9 01       	movw	r24, r18
     cae:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__divmodhi4>
    top = base - run_1 - run_2;
     cb2:	06 1b       	sub	r16, r22
     cb4:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     cb6:	c0 0f       	add	r28, r16
     cb8:	d1 1f       	adc	r29, r17
     cba:	2c 9f       	mul	r18, r28
     cbc:	c0 01       	movw	r24, r0
     cbe:	2d 9f       	mul	r18, r29
     cc0:	90 0d       	add	r25, r0
     cc2:	3c 9f       	mul	r19, r28
     cc4:	90 0d       	add	r25, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	99 23       	and	r25, r25
     cca:	0c f4       	brge	.+2      	; 0xcce <compute_area_of_trapezoid+0x50>
     ccc:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     ce4:	00 91 1b 03 	lds	r16, 0x031B
     ce8:	10 91 1c 03 	lds	r17, 0x031C
     cec:	01 15       	cp	r16, r1
     cee:	11 05       	cpc	r17, r1
     cf0:	b9 f0       	breq	.+46     	; 0xd20 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     cf2:	f8 01       	movw	r30, r16
     cf4:	c4 85       	ldd	r28, Z+12	; 0x0c
     cf6:	d5 85       	ldd	r29, Z+13	; 0x0d
     cf8:	20 97       	sbiw	r28, 0x00	; 0
     cfa:	61 f0       	breq	.+24     	; 0xd14 <fuzzification+0x38>
            if (mf!=NULL) {
     cfc:	20 97       	sbiw	r28, 0x00	; 0
     cfe:	29 f0       	breq	.+10     	; 0xd0a <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     d00:	f8 01       	movw	r30, r16
     d02:	62 85       	ldd	r22, Z+10	; 0x0a
     d04:	73 85       	ldd	r23, Z+11	; 0x0b
     d06:	ce 01       	movw	r24, r28
     d08:	84 df       	rcall	.-248    	; 0xc12 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     d0a:	0c 88       	ldd	r0, Y+20	; 0x14
     d0c:	dd 89       	ldd	r29, Y+21	; 0x15
     d0e:	c0 2d       	mov	r28, r0
     d10:	20 97       	sbiw	r28, 0x00	; 0
     d12:	a1 f7       	brne	.-24     	; 0xcfc <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d14:	f8 01       	movw	r30, r16
     d16:	06 85       	ldd	r16, Z+14	; 0x0e
     d18:	17 85       	ldd	r17, Z+15	; 0x0f
     d1a:	01 15       	cp	r16, r1
     d1c:	11 05       	cpc	r17, r1
     d1e:	49 f7       	brne	.-46     	; 0xcf2 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d32:	c0 91 1d 03 	lds	r28, 0x031D
     d36:	d0 91 1e 03 	lds	r29, 0x031E
     d3a:	20 97       	sbiw	r28, 0x00	; 0
     d3c:	b9 f1       	breq	.+110    	; 0xdac <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d3e:	00 e0       	ldi	r16, 0x00	; 0
     d40:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d42:	e8 81       	ld	r30, Y
     d44:	f9 81       	ldd	r31, Y+1	; 0x01
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	81 f0       	breq	.+32     	; 0xd6a <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d4a:	20 2f       	mov	r18, r16
     d4c:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d4e:	a0 81       	ld	r26, Z
     d50:	b1 81       	ldd	r27, Z+1	; 0x01
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	82 17       	cp	r24, r18
     d58:	93 07       	cpc	r25, r19
     d5a:	0c f4       	brge	.+2      	; 0xd5e <rule_evaluation+0x34>
     d5c:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d5e:	02 80       	ldd	r0, Z+2	; 0x02
     d60:	f3 81       	ldd	r31, Z+3	; 0x03
     d62:	e0 2d       	mov	r30, r0
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	99 f7       	brne	.-26     	; 0xd4e <rule_evaluation+0x24>
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d6a:	20 2f       	mov	r18, r16
     d6c:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d6e:	ea 81       	ldd	r30, Y+2	; 0x02
     d70:	fb 81       	ldd	r31, Y+3	; 0x03
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	b1 f0       	breq	.+44     	; 0xda2 <rule_evaluation+0x78>
     d76:	72 2f       	mov	r23, r18
     d78:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d7a:	a0 81       	ld	r26, Z
     d7c:	b1 81       	ldd	r27, Z+1	; 0x01
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	57 2f       	mov	r21, r23
     d86:	46 2f       	mov	r20, r22
     d88:	28 17       	cp	r18, r24
     d8a:	39 07       	cpc	r19, r25
     d8c:	14 f4       	brge	.+4      	; 0xd92 <rule_evaluation+0x68>
     d8e:	58 2f       	mov	r21, r24
     d90:	49 2f       	mov	r20, r25
     d92:	5c 93       	st	X, r21
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d98:	02 80       	ldd	r0, Z+2	; 0x02
     d9a:	f3 81       	ldd	r31, Z+3	; 0x03
     d9c:	e0 2d       	mov	r30, r0
     d9e:	30 97       	sbiw	r30, 0x00	; 0
     da0:	61 f7       	brne	.-40     	; 0xd7a <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     da2:	0c 80       	ldd	r0, Y+4	; 0x04
     da4:	dd 81       	ldd	r29, Y+5	; 0x05
     da6:	c0 2d       	mov	r28, r0
     da8:	20 97       	sbiw	r28, 0x00	; 0
     daa:	59 f6       	brne	.-106    	; 0xd42 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     db6:	2f 92       	push	r2
     db8:	3f 92       	push	r3
     dba:	4f 92       	push	r4
     dbc:	5f 92       	push	r5
     dbe:	6f 92       	push	r6
     dc0:	7f 92       	push	r7
     dc2:	8f 92       	push	r8
     dc4:	9f 92       	push	r9
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <defuzzification+0x26>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <defuzzification+0x28>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <defuzzification+0x2a>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     de4:	80 91 19 03 	lds	r24, 0x0319
     de8:	90 91 1a 03 	lds	r25, 0x031A
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
     df0:	89 2b       	or	r24, r25
     df2:	09 f4       	brne	.+2      	; 0xdf6 <defuzzification+0x40>
     df4:	8d c0       	rjmp	.+282    	; 0xf10 <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     df6:	eb 81       	ldd	r30, Y+3	; 0x03
     df8:	fc 81       	ldd	r31, Y+4	; 0x04
     dfa:	04 84       	ldd	r0, Z+12	; 0x0c
     dfc:	f5 85       	ldd	r31, Z+13	; 0x0d
     dfe:	e0 2d       	mov	r30, r0
     e00:	fe 83       	std	Y+6, r31	; 0x06
     e02:	ed 83       	std	Y+5, r30	; 0x05
     e04:	ef 2b       	or	r30, r31
     e06:	09 f4       	brne	.+2      	; 0xe0a <defuzzification+0x54>
     e08:	6e c0       	rjmp	.+220    	; 0xee6 <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     e0a:	51 2c       	mov	r5, r1
     e0c:	61 2c       	mov	r6, r1
     e0e:	71 2c       	mov	r7, r1
     e10:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e12:	31 2c       	mov	r3, r1
     e14:	21 2c       	mov	r2, r1
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	2f df       	rcall	.-418    	; 0xc7e <compute_area_of_trapezoid>
     e20:	bc 01       	movw	r22, r24
     e22:	88 27       	eor	r24, r24
     e24:	77 fd       	sbrc	r23, 7
     e26:	80 95       	com	r24
     e28:	98 2f       	mov	r25, r24
     e2a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__floatsisf>
     e2e:	6b 01       	movw	r12, r22
     e30:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e32:	ed 81       	ldd	r30, Y+5	; 0x05
     e34:	fe 81       	ldd	r31, Y+6	; 0x06
     e36:	04 85       	ldd	r16, Z+12	; 0x0c
     e38:	15 85       	ldd	r17, Z+13	; 0x0d
     e3a:	b8 01       	movw	r22, r16
     e3c:	88 27       	eor	r24, r24
     e3e:	77 fd       	sbrc	r23, 7
     e40:	80 95       	com	r24
     e42:	98 2f       	mov	r25, r24
     e44:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__floatsisf>
     e48:	4b 01       	movw	r8, r22
     e4a:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e4c:	ed 81       	ldd	r30, Y+5	; 0x05
     e4e:	fe 81       	ldd	r31, Y+6	; 0x06
     e50:	86 85       	ldd	r24, Z+14	; 0x0e
     e52:	97 85       	ldd	r25, Z+15	; 0x0f
     e54:	80 1b       	sub	r24, r16
     e56:	91 0b       	sbc	r25, r17
     e58:	bc 01       	movw	r22, r24
     e5a:	12 f4       	brpl	.+4      	; 0xe60 <defuzzification+0xaa>
     e5c:	6f 5f       	subi	r22, 0xFF	; 255
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	75 95       	asr	r23
     e62:	67 95       	ror	r22
            centroid = centroid + intermed;
     e64:	88 27       	eor	r24, r24
     e66:	77 fd       	sbrc	r23, 7
     e68:	80 95       	com	r24
     e6a:	98 2f       	mov	r25, r24
     e6c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__floatsisf>
     e70:	a5 01       	movw	r20, r10
     e72:	94 01       	movw	r18, r8
     e74:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__addsf3>
     e78:	9b 01       	movw	r18, r22
     e7a:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e7c:	c7 01       	movw	r24, r14
     e7e:	b6 01       	movw	r22, r12
     e80:	0e 94 ed 11 	call	0x23da	; 0x23da <__mulsf3>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	63 2d       	mov	r22, r3
     e8a:	72 2d       	mov	r23, r2
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__addsf3>
     e94:	36 2e       	mov	r3, r22
     e96:	27 2e       	mov	r2, r23
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     e9c:	a7 01       	movw	r20, r14
     e9e:	96 01       	movw	r18, r12
     ea0:	65 2d       	mov	r22, r5
     ea2:	76 2d       	mov	r23, r6
     ea4:	87 2d       	mov	r24, r7
     ea6:	94 2d       	mov	r25, r4
     ea8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__addsf3>
     eac:	56 2e       	mov	r5, r22
     eae:	67 2e       	mov	r6, r23
     eb0:	78 2e       	mov	r7, r24
     eb2:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     eb4:	ed 81       	ldd	r30, Y+5	; 0x05
     eb6:	fe 81       	ldd	r31, Y+6	; 0x06
     eb8:	04 88       	ldd	r0, Z+20	; 0x14
     eba:	f5 89       	ldd	r31, Z+21	; 0x15
     ebc:	e0 2d       	mov	r30, r0
     ebe:	fe 83       	std	Y+6, r31	; 0x06
     ec0:	ed 83       	std	Y+5, r30	; 0x05
     ec2:	ef 2b       	or	r30, r31
     ec4:	09 f0       	breq	.+2      	; 0xec8 <defuzzification+0x112>
     ec6:	a9 cf       	rjmp	.-174    	; 0xe1a <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     ec8:	26 2f       	mov	r18, r22
     eca:	37 2f       	mov	r19, r23
     ecc:	48 2f       	mov	r20, r24
     ece:	59 2f       	mov	r21, r25
     ed0:	63 2d       	mov	r22, r3
     ed2:	72 2d       	mov	r23, r2
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	0e 94 c6 10 	call	0x218c	; 0x218c <__divsf3>
     edc:	26 2f       	mov	r18, r22
     ede:	37 2f       	mov	r19, r23
     ee0:	48 2f       	mov	r20, r24
     ee2:	59 2f       	mov	r21, r25
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     eee:	62 2f       	mov	r22, r18
     ef0:	73 2f       	mov	r23, r19
     ef2:	84 2f       	mov	r24, r20
     ef4:	95 2f       	mov	r25, r21
     ef6:	0e 94 2e 11 	call	0x225c	; 0x225c <__fixsfsi>
     efa:	eb 81       	ldd	r30, Y+3	; 0x03
     efc:	fc 81       	ldd	r31, Y+4	; 0x04
     efe:	73 87       	std	Z+11, r23	; 0x0b
     f00:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     f02:	86 85       	ldd	r24, Z+14	; 0x0e
     f04:	97 85       	ldd	r25, Z+15	; 0x0f
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	89 2b       	or	r24, r25
     f0c:	09 f0       	breq	.+2      	; 0xf10 <defuzzification+0x15a>
     f0e:	73 cf       	rjmp	.-282    	; 0xdf6 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     f10:	26 96       	adiw	r28, 0x06	; 6
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	6a 01       	movw	r12, r20
     f5a:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     f5c:	0e 94 77 12 	call	0x24ee	; 0x24ee <strcpy>
    newMf->value = 0;
     f60:	1b 86       	std	Y+11, r1	; 0x0b
     f62:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     f64:	dd 86       	std	Y+13, r13	; 0x0d
     f66:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     f68:	ff 86       	std	Y+15, r15	; 0x0f
     f6a:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     f6c:	b5 01       	movw	r22, r10
     f6e:	6c 19       	sub	r22, r12
     f70:	7d 09       	sbc	r23, r13
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	31 e0       	ldi	r19, 0x01	; 1
     f76:	c9 01       	movw	r24, r18
     f78:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__divmodhi4>
     f7c:	79 8b       	std	Y+17, r23	; 0x11
     f7e:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     f80:	b7 01       	movw	r22, r14
     f82:	60 1b       	sub	r22, r16
     f84:	71 0b       	sbc	r23, r17
     f86:	c9 01       	movw	r24, r18
     f88:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__divmodhi4>
     f8c:	7b 8b       	std	Y+19, r23	; 0x13
     f8e:	6a 8b       	std	Y+18, r22	; 0x12
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	08 95       	ret

00000fa6 <straightIntersection>:
void straightIntersection(int c1);



void straightIntersection(int c1)
{
     fa6:	4f 92       	push	r4
     fa8:	5f 92       	push	r5
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	ce 5c       	subi	r28, 0xCE	; 206
     fcc:	d1 09       	sbc	r29, r1
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
	

	
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	//
	struct io_type cPosition; strcpy(cPosition.name, "cPosition");
     fd8:	2a e0       	ldi	r18, 0x0A	; 10
     fda:	e8 e9       	ldi	r30, 0x98	; 152
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	de 01       	movw	r26, r28
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	01 90       	ld	r0, Z+
     fe4:	0d 92       	st	X+, r0
     fe6:	2a 95       	dec	r18
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <straightIntersection+0x3c>


	// set iErr's input value to measErr value
	if(c1<50)				// if sensor value is smaller than cPosition's input set's lower limit
     fea:	82 33       	cpi	r24, 0x32	; 50
     fec:	91 05       	cpc	r25, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <straightIntersection+0x54>
	{
		cPosition.value = 50;  // force input value to lowest point in cPosition's input set
     ff0:	82 e3       	ldi	r24, 0x32	; 50
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9c 87       	std	Y+12, r25	; 0x0c
     ff6:	8b 87       	std	Y+11, r24	; 0x0b
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <straightIntersection+0x68>
	}
	else if(c1>200)			// if sensor value is bigger than cPosition's input set's upper limit
     ffa:	89 3c       	cpi	r24, 0xC9	; 201
     ffc:	91 05       	cpc	r25, r1
     ffe:	2c f0       	brlt	.+10     	; 0x100a <straightIntersection+0x64>
	{
		cPosition.value = 200;  // force input value to lowest point in cPosition's input set
    1000:	88 ec       	ldi	r24, 0xC8	; 200
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9c 87       	std	Y+12, r25	; 0x0c
    1006:	8b 87       	std	Y+11, r24	; 0x0b
    1008:	02 c0       	rjmp	.+4      	; 0x100e <straightIntersection+0x68>
	}
	else
	{
		cPosition.value = c1;
    100a:	9c 87       	std	Y+12, r25	; 0x0c
    100c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	struct mf_type cRight;
	MATLAB_MF(&cRight, "cRight", 49, 50, 80, 100); // Min_value = 160
    100e:	5e 01       	movw	r10, r28
    1010:	21 e1       	ldi	r18, 0x11	; 17
    1012:	a2 0e       	add	r10, r18
    1014:	b1 1c       	adc	r11, r1
    1016:	0f 2e       	mov	r0, r31
    1018:	f4 e6       	ldi	r31, 0x64	; 100
    101a:	ef 2e       	mov	r14, r31
    101c:	f1 2c       	mov	r15, r1
    101e:	f0 2d       	mov	r31, r0
    1020:	00 e5       	ldi	r16, 0x50	; 80
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	22 e3       	ldi	r18, 0x32	; 50
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	41 e3       	ldi	r20, 0x31	; 49
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	64 e8       	ldi	r22, 0x84	; 132
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	c5 01       	movw	r24, r10
    1032:	87 df       	rcall	.-242    	; 0xf42 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 80, 120, 120, 160);
    1034:	6e 01       	movw	r12, r28
    1036:	47 e2       	ldi	r20, 0x27	; 39
    1038:	c4 0e       	add	r12, r20
    103a:	d1 1c       	adc	r13, r1
    103c:	0f 2e       	mov	r0, r31
    103e:	f0 ea       	ldi	r31, 0xA0	; 160
    1040:	ef 2e       	mov	r14, r31
    1042:	f1 2c       	mov	r15, r1
    1044:	f0 2d       	mov	r31, r0
    1046:	08 e7       	ldi	r16, 0x78	; 120
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	28 e7       	ldi	r18, 0x78	; 120
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e5       	ldi	r20, 0x50	; 80
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	6b e8       	ldi	r22, 0x8B	; 139
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	c6 01       	movw	r24, r12
    1058:	74 df       	rcall	.-280    	; 0xf42 <MATLAB_MF>
	struct mf_type cLeft;
	MATLAB_MF(&cLeft, "cLeft", 140, 300, 400, 401); // Max_value = 370
    105a:	2e 01       	movw	r4, r28
    105c:	8d e3       	ldi	r24, 0x3D	; 61
    105e:	48 0e       	add	r4, r24
    1060:	51 1c       	adc	r5, r1
    1062:	0f 2e       	mov	r0, r31
    1064:	f1 e9       	ldi	r31, 0x91	; 145
    1066:	ef 2e       	mov	r14, r31
    1068:	ff 24       	eor	r15, r15
    106a:	f3 94       	inc	r15
    106c:	f0 2d       	mov	r31, r0
    106e:	00 e9       	ldi	r16, 0x90	; 144
    1070:	11 e0       	ldi	r17, 0x01	; 1
    1072:	2c e2       	ldi	r18, 0x2C	; 44
    1074:	31 e0       	ldi	r19, 0x01	; 1
    1076:	4c e8       	ldi	r20, 0x8C	; 140
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	62 e9       	ldi	r22, 0x92	; 146
    107c:	71 e0       	ldi	r23, 0x01	; 1
    107e:	c2 01       	movw	r24, r4
    1080:	60 df       	rcall	.-320    	; 0xf42 <MATLAB_MF>


	cPosition.membership_functions = &cRight;
    1082:	be 86       	std	Y+14, r11	; 0x0e
    1084:	ad 86       	std	Y+13, r10	; 0x0d
	cRight.next = &centre;
    1086:	de a2       	std	Y+38, r13	; 0x26
    1088:	cd a2       	std	Y+37, r12	; 0x25
	centre.next = &cLeft;
    108a:	5c ae       	std	Y+60, r5	; 0x3c
    108c:	4b ae       	std	Y+59, r4	; 0x3b
	cLeft.next = NULL;
    108e:	63 96       	adiw	r28, 0x13	; 19
    1090:	1f ae       	std	Y+63, r1	; 0x3f
    1092:	1e ae       	std	Y+62, r1	; 0x3e
    1094:	63 97       	sbiw	r28, 0x13	; 19

	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////
	//
	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    1096:	6e 01       	movw	r12, r28
    1098:	e3 e5       	ldi	r30, 0x53	; 83
    109a:	ce 0e       	add	r12, r30
    109c:	d1 1c       	adc	r13, r1
    109e:	89 e0       	ldi	r24, 0x09	; 9
    10a0:	e9 e0       	ldi	r30, 0x09	; 9
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	d6 01       	movw	r26, r12
    10a6:	01 90       	ld	r0, Z+
    10a8:	0d 92       	st	X+, r0
    10aa:	8a 95       	dec	r24
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <straightIntersection+0x100>

	struct mf_type left;
	MATLAB_MF(&left, "left", 223, 224, 228, 252);           // TODO: needs to be tuned
    10ae:	3e 01       	movw	r6, r28
    10b0:	f3 e6       	ldi	r31, 0x63	; 99
    10b2:	6f 0e       	add	r6, r31
    10b4:	71 1c       	adc	r7, r1
    10b6:	0f 2e       	mov	r0, r31
    10b8:	fc ef       	ldi	r31, 0xFC	; 252
    10ba:	ef 2e       	mov	r14, r31
    10bc:	f1 2c       	mov	r15, r1
    10be:	f0 2d       	mov	r31, r0
    10c0:	04 ee       	ldi	r16, 0xE4	; 228
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	20 ee       	ldi	r18, 0xE0	; 224
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4f ed       	ldi	r20, 0xDF	; 223
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	60 e2       	ldi	r22, 0x20	; 32
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	c3 01       	movw	r24, r6
    10d2:	37 df       	rcall	.-402    	; 0xf42 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 248, 259, 259, 270);
    10d4:	5e 01       	movw	r10, r28
    10d6:	29 e7       	ldi	r18, 0x79	; 121
    10d8:	a2 0e       	add	r10, r18
    10da:	b1 1c       	adc	r11, r1
    10dc:	0f 2e       	mov	r0, r31
    10de:	fe e0       	ldi	r31, 0x0E	; 14
    10e0:	ef 2e       	mov	r14, r31
    10e2:	ff 24       	eor	r15, r15
    10e4:	f3 94       	inc	r15
    10e6:	f0 2d       	mov	r31, r0
    10e8:	03 e0       	ldi	r16, 0x03	; 3
    10ea:	11 e0       	ldi	r17, 0x01	; 1
    10ec:	23 e0       	ldi	r18, 0x03	; 3
    10ee:	31 e0       	ldi	r19, 0x01	; 1
    10f0:	48 ef       	ldi	r20, 0xF8	; 248
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	65 e2       	ldi	r22, 0x25	; 37
    10f6:	71 e0       	ldi	r23, 0x01	; 1
    10f8:	c5 01       	movw	r24, r10
    10fa:	23 df       	rcall	.-442    	; 0xf42 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 266, 305, 309, 310);         // TODO: needs to be tuned
    10fc:	4e 01       	movw	r8, r28
    10fe:	4f e8       	ldi	r20, 0x8F	; 143
    1100:	84 0e       	add	r8, r20
    1102:	91 1c       	adc	r9, r1
    1104:	0f 2e       	mov	r0, r31
    1106:	f6 e3       	ldi	r31, 0x36	; 54
    1108:	ef 2e       	mov	r14, r31
    110a:	ff 24       	eor	r15, r15
    110c:	f3 94       	inc	r15
    110e:	f0 2d       	mov	r31, r0
    1110:	05 e3       	ldi	r16, 0x35	; 53
    1112:	11 e0       	ldi	r17, 0x01	; 1
    1114:	21 e3       	ldi	r18, 0x31	; 49
    1116:	31 e0       	ldi	r19, 0x01	; 1
    1118:	4a e0       	ldi	r20, 0x0A	; 10
    111a:	51 e0       	ldi	r21, 0x01	; 1
    111c:	6e e2       	ldi	r22, 0x2E	; 46
    111e:	71 e0       	ldi	r23, 0x01	; 1
    1120:	c4 01       	movw	r24, r8
    1122:	0f df       	rcall	.-482    	; 0xf42 <MATLAB_MF>


	steering.membership_functions = &right;
    1124:	f6 01       	movw	r30, r12
    1126:	95 86       	std	Z+13, r9	; 0x0d
    1128:	84 86       	std	Z+12, r8	; 0x0c
	right.next = &straight;
    112a:	f4 01       	movw	r30, r8
    112c:	b5 8a       	std	Z+21, r11	; 0x15
    112e:	a4 8a       	std	Z+20, r10	; 0x14
	straight.next = &left;
    1130:	f5 01       	movw	r30, r10
    1132:	75 8a       	std	Z+21, r7	; 0x15
    1134:	64 8a       	std	Z+20, r6	; 0x14
	left.next = NULL;
    1136:	f3 01       	movw	r30, r6
    1138:	15 8a       	std	Z+21, r1	; 0x15
    113a:	14 8a       	std	Z+20, r1	; 0x14



	// pointers to top of lists
	//
	System_Inputs = &cPosition;
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	90 93 1c 03 	sts	0x031C, r25
    1144:	80 93 1b 03 	sts	0x031B, r24
	cPosition.next = NULL;
    1148:	18 8a       	std	Y+16, r1	; 0x10
    114a:	1f 86       	std	Y+15, r1	; 0x0f
	System_Outputs = &steering;
    114c:	d0 92 1a 03 	sts	0x031A, r13
    1150:	c0 92 19 03 	sts	0x0319, r12
	steering.next = NULL;
    1154:	f6 01       	movw	r30, r12
    1156:	17 86       	std	Z+15, r1	; 0x0f
    1158:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    115a:	8c 55       	subi	r24, 0x5C	; 92
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	90 93 1e 03 	sts	0x031E, r25
    1162:	80 93 1d 03 	sts	0x031D, r24
	struct rule_type rule2; rule1.next = &rule2;
    1166:	de 01       	movw	r26, r28
    1168:	a5 55       	subi	r26, 0x55	; 85
    116a:	bf 4f       	sbci	r27, 0xFF	; 255
    116c:	fc 01       	movw	r30, r24
    116e:	b5 83       	std	Z+5, r27	; 0x05
    1170:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1172:	be 01       	movw	r22, r28
    1174:	6f 54       	subi	r22, 0x4F	; 79
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	15 96       	adiw	r26, 0x05	; 5
    117a:	7c 93       	st	X, r23
    117c:	6e 93       	st	-X, r22
    117e:	14 97       	sbiw	r26, 0x04	; 4
    1180:	fb 01       	movw	r30, r22
    1182:	15 82       	std	Z+5, r1	; 0x05
    1184:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if cPosition is cRight then steering is left"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1186:	ae 01       	movw	r20, r28
    1188:	49 54       	subi	r20, 0x49	; 73
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	fc 01       	movw	r30, r24
    118e:	51 83       	std	Z+1, r21	; 0x01
    1190:	40 83       	st	Z, r20
    1192:	fa 01       	movw	r30, r20
    1194:	13 82       	std	Z+3, r1	; 0x03
    1196:	12 82       	std	Z+2, r1	; 0x02
    1198:	9e 01       	movw	r18, r28
    119a:	25 54       	subi	r18, 0x45	; 69
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	fc 01       	movw	r30, r24
    11a0:	33 83       	std	Z+3, r19	; 0x03
    11a2:	22 83       	std	Z+2, r18	; 0x02
    11a4:	f9 01       	movw	r30, r18
    11a6:	13 82       	std	Z+3, r1	; 0x03
    11a8:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &cRight.value; then1.value = &left.value;
    11aa:	8a 58       	subi	r24, 0x8A	; 138
    11ac:	91 09       	sbc	r25, r1
    11ae:	fa 01       	movw	r30, r20
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
    11b4:	fa e0       	ldi	r31, 0x0A	; 10
    11b6:	6f 0e       	add	r6, r31
    11b8:	71 1c       	adc	r7, r1
    11ba:	f9 01       	movw	r30, r18
    11bc:	71 82       	std	Z+1, r7	; 0x01
    11be:	60 82       	st	Z, r6

	////RULE 2 "if cPosition is cLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    11c0:	2c 5f       	subi	r18, 0xFC	; 252
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	3c 93       	st	X, r19
    11c8:	2e 93       	st	-X, r18
    11ca:	f9 01       	movw	r30, r18
    11cc:	13 82       	std	Z+3, r1	; 0x03
    11ce:	12 82       	std	Z+2, r1	; 0x02
    11d0:	88 55       	subi	r24, 0x58	; 88
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	13 96       	adiw	r26, 0x03	; 3
    11d6:	9c 93       	st	X, r25
    11d8:	8e 93       	st	-X, r24
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	fc 01       	movw	r30, r24
    11de:	13 82       	std	Z+3, r1	; 0x03
    11e0:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &cLeft.value; then2.value = &right.value;
    11e2:	fa e0       	ldi	r31, 0x0A	; 10
    11e4:	4f 0e       	add	r4, r31
    11e6:	51 1c       	adc	r5, r1
    11e8:	f9 01       	movw	r30, r18
    11ea:	51 82       	std	Z+1, r5	; 0x01
    11ec:	40 82       	st	Z, r4
    11ee:	fa e0       	ldi	r31, 0x0A	; 10
    11f0:	8f 0e       	add	r8, r31
    11f2:	91 1c       	adc	r9, r1
    11f4:	fc 01       	movw	r30, r24
    11f6:	91 82       	std	Z+1, r9	; 0x01
    11f8:	80 82       	st	Z, r8

	////RULE 3 "if cPosition is centre and vOrientation is rightOriented then steering is left"
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    11fa:	04 96       	adiw	r24, 0x04	; 4
    11fc:	fb 01       	movw	r30, r22
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	fc 01       	movw	r30, r24
    1204:	13 82       	std	Z+3, r1	; 0x03
    1206:	12 82       	std	Z+2, r1	; 0x02
    1208:	90 96       	adiw	r26, 0x20	; 32
    120a:	fb 01       	movw	r30, r22
    120c:	b3 83       	std	Z+3, r27	; 0x03
    120e:	a2 83       	std	Z+2, r26	; 0x02
    1210:	13 96       	adiw	r26, 0x03	; 3
    1212:	1c 92       	st	X, r1
    1214:	1e 92       	st	-X, r1
    1216:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &centre.value; then3.value = &straight.value;
    1218:	2e 58       	subi	r18, 0x8E	; 142
    121a:	31 09       	sbc	r19, r1
    121c:	fc 01       	movw	r30, r24
    121e:	31 83       	std	Z+1, r19	; 0x01
    1220:	20 83       	st	Z, r18
    1222:	fa e0       	ldi	r31, 0x0A	; 10
    1224:	af 0e       	add	r10, r31
    1226:	b1 1c       	adc	r11, r1
    1228:	ad 92       	st	X+, r10
    122a:	bc 92       	st	X, r11


	// the methods performing the FLC
	fuzzification();
    122c:	57 dd       	rcall	.-1362   	; 0xcdc <fuzzification>
	rule_evaluation();
    122e:	7d dd       	rcall	.-1286   	; 0xd2a <rule_evaluation>
	defuzzification();
    1230:	c2 dd       	rcall	.-1148   	; 0xdb6 <defuzzification>
	
	steering.value = steering.value*10;
    1232:	f6 01       	movw	r30, r12
    1234:	22 85       	ldd	r18, Z+10	; 0x0a
    1236:	33 85       	ldd	r19, Z+11	; 0x0b
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	93 87       	std	Z+11, r25	; 0x0b
    1250:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1252:	86 3e       	cpi	r24, 0xE6	; 230
    1254:	f7 e0       	ldi	r31, 0x07	; 7
    1256:	9f 07       	cpc	r25, r31
    1258:	24 f4       	brge	.+8      	; 0x1262 <straightIntersection+0x2bc>
	{
		setServo(MAXLEFT);
    125a:	86 ee       	ldi	r24, 0xE6	; 230
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	b8 d4       	rcall	.+2416   	; 0x1bd0 <setServo>
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <straightIntersection+0x2ce>
	}
	else if (steering.value >MAXRIGHT)
    1262:	85 3e       	cpi	r24, 0xE5	; 229
    1264:	2c e0       	ldi	r18, 0x0C	; 12
    1266:	92 07       	cpc	r25, r18
    1268:	24 f0       	brlt	.+8      	; 0x1272 <straightIntersection+0x2cc>
	{
		setServo(MAXRIGHT);
    126a:	84 ee       	ldi	r24, 0xE4	; 228
    126c:	9c e0       	ldi	r25, 0x0C	; 12
    126e:	b0 d4       	rcall	.+2400   	; 0x1bd0 <setServo>
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <straightIntersection+0x2ce>
	}
	else
	{
		setServo(steering.value);
    1272:	ae d4       	rcall	.+2396   	; 0x1bd0 <setServo>
	}

}
    1274:	c2 53       	subi	r28, 0x32	; 50
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	8f 90       	pop	r8
    129a:	7f 90       	pop	r7
    129c:	6f 90       	pop	r6
    129e:	5f 90       	pop	r5
    12a0:	4f 90       	pop	r4
    12a2:	08 95       	ret

000012a4 <intersection>:


void intersection(int gyro, unsigned char type, int c, int v)
{
	if (gyro<0)
    12a4:	99 23       	and	r25, r25
    12a6:	24 f4       	brge	.+8      	; 0x12b0 <intersection+0xc>
	{
		gyro = -gyro;
    12a8:	91 95       	neg	r25
    12aa:	81 95       	neg	r24
    12ac:	91 09       	sbc	r25, r1
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <intersection+0x16>
    12b0:	8e 37       	cpi	r24, 0x7E	; 126
    12b2:	91 05       	cpc	r25, r1
    12b4:	14 f0       	brlt	.+4      	; 0x12ba <intersection+0x16>
    12b6:	8d e7       	ldi	r24, 0x7D	; 125
    12b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		gyro = maxGyro;
	}
	
	
	if (type == 'r')
    12ba:	62 37       	cpi	r22, 0x72	; 114
    12bc:	51 f4       	brne	.+20     	; 0x12d2 <intersection+0x2e>
	{
		// rightTurn(gyro);
		if (gyro<25)
    12be:	49 97       	sbiw	r24, 0x19	; 25
    12c0:	24 f4       	brge	.+8      	; 0x12ca <intersection+0x26>
		{
			setServo(MAXRIGHT-400);
    12c2:	84 e5       	ldi	r24, 0x54	; 84
    12c4:	9b e0       	ldi	r25, 0x0B	; 11
    12c6:	84 c4       	rjmp	.+2312   	; 0x1bd0 <setServo>
    12c8:	08 95       	ret
		}
		else
		{
			setServo(MAXRIGHT); // maxright-180
    12ca:	84 ee       	ldi	r24, 0xE4	; 228
    12cc:	9c e0       	ldi	r25, 0x0C	; 12
    12ce:	80 c4       	rjmp	.+2304   	; 0x1bd0 <setServo>
    12d0:	08 95       	ret
		}
	}
	else if (type == 'l')
    12d2:	6c 36       	cpi	r22, 0x6C	; 108
    12d4:	51 f4       	brne	.+20     	; 0x12ea <intersection+0x46>
	{
		// leftTurn(gyro);               // original plan
		if (gyro < 6)                  // hard coded
    12d6:	06 97       	sbiw	r24, 0x06	; 6
    12d8:	24 f4       	brge	.+8      	; 0x12e2 <intersection+0x3e>
		{
			setServo(STRAIGHT-150);
    12da:	88 e8       	ldi	r24, 0x88	; 136
    12dc:	99 e0       	ldi	r25, 0x09	; 9
    12de:	78 c4       	rjmp	.+2288   	; 0x1bd0 <setServo>
    12e0:	08 95       	ret
		}
		else
		{
			setServo(MAXLEFT);
    12e2:	86 ee       	ldi	r24, 0xE6	; 230
    12e4:	97 e0       	ldi	r25, 0x07	; 7
    12e6:	74 c4       	rjmp	.+2280   	; 0x1bd0 <setServo>
    12e8:	08 95       	ret
		}
	}
	else if (type == 'F')
    12ea:	66 34       	cpi	r22, 0x46	; 70
    12ec:	61 f4       	brne	.+24     	; 0x1306 <intersection+0x62>
	{
		if (v==81 && c == 2)             // State "no left side"
    12ee:	21 35       	cpi	r18, 0x51	; 81
    12f0:	31 05       	cpc	r19, r1
    12f2:	39 f4       	brne	.+14     	; 0x1302 <intersection+0x5e>
    12f4:	42 30       	cpi	r20, 0x02	; 2
    12f6:	51 05       	cpc	r21, r1
    12f8:	21 f4       	brne	.+8      	; 0x1302 <intersection+0x5e>
		{
			setServo(STRAIGHT-100);
    12fa:	8a eb       	ldi	r24, 0xBA	; 186
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	68 c4       	rjmp	.+2256   	; 0x1bd0 <setServo>
    1300:	08 95       	ret
		}
		else
		{
			//setServo(STRAIGHT);
			straightIntersection(c);
    1302:	ca 01       	movw	r24, r20
    1304:	50 ce       	rjmp	.-864    	; 0xfa6 <straightIntersection>
    1306:	08 95       	ret

00001308 <carInit>:
* to allow the operator to turn on the ESC manually
* and thus set the neutral
*/
void carInit(void)
{
	pwmInit();
    1308:	39 d4       	rcall	.+2162   	; 0x1b7c <pwmInit>
	spi_slave_init();
    130a:	e9 d4       	rcall	.+2514   	; 0x1cde <spi_slave_init>
	OCR1A = NEUTRAL;
    130c:	8d ec       	ldi	r24, 0xCD	; 205
    130e:	9a e0       	ldi	r25, 0x0A	; 10
    1310:	90 93 89 00 	sts	0x0089, r25
    1314:	80 93 88 00 	sts	0x0088, r24
	OCR1B = STRAIGHT;
    1318:	8e e1       	ldi	r24, 0x1E	; 30
    131a:	9a e0       	ldi	r25, 0x0A	; 10
    131c:	90 93 8b 00 	sts	0x008B, r25
    1320:	80 93 8a 00 	sts	0x008A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1324:	2f ef       	ldi	r18, 0xFF	; 255
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	90 ee       	ldi	r25, 0xE0	; 224
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	80 40       	sbci	r24, 0x00	; 0
    132e:	90 40       	sbci	r25, 0x00	; 0
    1330:	e1 f7       	brne	.-8      	; 0x132a <carInit+0x22>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <carInit+0x2c>
    1334:	00 00       	nop
    1336:	08 95       	ret

00001338 <main>:



//////////////// MAIN /////////////////////////////////////////////////////////////
int main (void)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2f 97       	sbiw	r28, 0x0f	; 15
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
	
	int man_velocity = 0;
    134c:	1a 82       	std	Y+2, r1	; 0x02
    134e:	19 82       	std	Y+1, r1	; 0x01
	int man_steering = 0;
    1350:	1c 82       	std	Y+4, r1	; 0x04
    1352:	1b 82       	std	Y+3, r1	; 0x03
	carInit();
    1354:	d9 df       	rcall	.-78     	; 0x1308 <carInit>
	volatile struct Sensor_information sensor_info;
	struct Sensor_information* sens_info_ptr;
	sens_info_ptr = &sensor_info;
	volatile unsigned char control_mode;
	unsigned char prev_control_mode;
	sei();
    1356:	78 94       	sei
			}
			
			else if (control_mode == 1)
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
    1358:	0f 2e       	mov	r0, r31
    135a:	fa e8       	ldi	r31, 0x8A	; 138
    135c:	af 2e       	mov	r10, r31
    135e:	b1 2c       	mov	r11, r1
    1360:	f0 2d       	mov	r31, r0
    1362:	0f 2e       	mov	r0, r31
    1364:	f8 e8       	ldi	r31, 0x88	; 136
    1366:	cf 2e       	mov	r12, r31
    1368:	d1 2c       	mov	r13, r1
    136a:	f0 2d       	mov	r31, r0
	sei();
	

	while (1)
	{
		if (is_package_recieved())
    136c:	45 d5       	rcall	.+2698   	; 0x1df8 <is_package_recieved>
    136e:	88 23       	and	r24, r24
    1370:	e9 f3       	breq	.-6      	; 0x136c <main+0x34>
		{
			
			//Reading Information
			prev_control_mode = control_mode;
    1372:	4f 84       	ldd	r4, Y+15	; 0x0f
			read_sensor_info(&control_mode, sens_info_ptr);
    1374:	be 01       	movw	r22, r28
    1376:	6b 5f       	subi	r22, 0xFB	; 251
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	ce 01       	movw	r24, r28
    137c:	0f 96       	adiw	r24, 0x0f	; 15
    137e:	46 d5       	rcall	.+2700   	; 0x1e0c <read_sensor_info>
			
			int sF = (int) sensor_info.dist_sonic_middle;
    1380:	ef 80       	ldd	r14, Y+7	; 0x07
    1382:	f1 2c       	mov	r15, r1
			int sB = (int) sensor_info.dist_sonic_back;
    1384:	5a 84       	ldd	r5, Y+10	; 0x0a
			int c = (int) sensor_info.dist_right_line;
    1386:	0d 81       	ldd	r16, Y+5	; 0x05
    1388:	10 e0       	ldi	r17, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
    138a:	8e 80       	ldd	r8, Y+6	; 0x06
    138c:	91 2c       	mov	r9, r1
			int gyro = (int) sensor_info.angle - 125;
    138e:	7c 84       	ldd	r7, Y+12	; 0x0c
			unsigned char type = (unsigned) (char) sensor_info.next_turn_decision;
    1390:	8e 85       	ldd	r24, Y+14	; 0x0e
			int manualInstruction = (int) sensor_info.dist_right_line;
    1392:	6d 80       	ldd	r6, Y+5	; 0x05
			
			if(control_mode == 0x02 && prev_control_mode == 0x04){
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	39 f4       	brne	.+14     	; 0x13a8 <main+0x70>
    139a:	84 e0       	ldi	r24, 0x04	; 4
    139c:	48 12       	cpse	r4, r24
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <main+0x70>
				countInit(28000);
    13a0:	80 e6       	ldi	r24, 0x60	; 96
    13a2:	9d e6       	ldi	r25, 0x6D	; 109
    13a4:	0e 94 77 00 	call	0xee	; 0xee <countInit>
			}
			
			cli();
    13a8:	f8 94       	cli
			
			if (control_mode == 0)
    13aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ac:	81 11       	cpse	r24, r1
    13ae:	0d c0       	rjmp	.+26     	; 0x13ca <main+0x92>
			{
				FLC_speed(OCR1A, sF, OCR1B);
    13b0:	f5 01       	movw	r30, r10
    13b2:	40 81       	ld	r20, Z
    13b4:	51 81       	ldd	r21, Z+1	; 0x01
    13b6:	f6 01       	movw	r30, r12
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	b7 01       	movw	r22, r14
    13be:	0e 94 88 00 	call	0x110	; 0x110 <FLC_speed>
				nFuzzySteering(c,v);
    13c2:	b4 01       	movw	r22, r8
    13c4:	c8 01       	movw	r24, r16
    13c6:	c4 d3       	rcall	.+1928   	; 0x1b50 <nFuzzySteering>
    13c8:	32 c0       	rjmp	.+100    	; 0x142e <main+0xf6>
			}
			else if (control_mode == 4)
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	39 f4       	brne	.+14     	; 0x13de <main+0xa6>
			{
				setESC(NEUTRAL);
    13d0:	8d ec       	ldi	r24, 0xCD	; 205
    13d2:	9a e0       	ldi	r25, 0x0A	; 10
    13d4:	e2 d3       	rcall	.+1988   	; 0x1b9a <setESC>
				setServo(STRAIGHT);
    13d6:	8e e1       	ldi	r24, 0x1E	; 30
    13d8:	9a e0       	ldi	r25, 0x0A	; 10
    13da:	fa d3       	rcall	.+2036   	; 0x1bd0 <setServo>
    13dc:	28 c0       	rjmp	.+80     	; 0x142e <main+0xf6>
			}
			
			else if (control_mode == 1)
    13de:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 f4       	brne	.+36     	; 0x1408 <main+0xd0>
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
    13e4:	f5 01       	movw	r30, r10
    13e6:	40 81       	ld	r20, Z
    13e8:	51 81       	ldd	r21, Z+1	; 0x01
    13ea:	f6 01       	movw	r30, r12
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	b7 01       	movw	r22, r14
    13f2:	0e 94 88 00 	call	0x110	; 0x110 <FLC_speed>
				
			intersection(gyro, sensor_info.next_turn_decision, c, v);
    13f6:	6e 85       	ldd	r22, Y+14	; 0x0e
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro = (int) sensor_info.angle - 125;
    13f8:	87 2d       	mov	r24, r7
    13fa:	90 e0       	ldi	r25, 0x00	; 0
			else if (control_mode == 1)
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
				
			intersection(gyro, sensor_info.next_turn_decision, c, v);
    13fc:	94 01       	movw	r18, r8
    13fe:	a8 01       	movw	r20, r16
    1400:	8d 57       	subi	r24, 0x7D	; 125
    1402:	91 09       	sbc	r25, r1
    1404:	4f df       	rcall	.-354    	; 0x12a4 <intersection>
    1406:	13 c0       	rjmp	.+38     	; 0x142e <main+0xf6>
	

			}
			else if (control_mode == 6)
    1408:	8f 85       	ldd	r24, Y+15	; 0x0f
    140a:	86 30       	cpi	r24, 0x06	; 6
    140c:	61 f4       	brne	.+24     	; 0x1426 <main+0xee>
			//Reading Information
			prev_control_mode = control_mode;
			read_sensor_info(&control_mode, sens_info_ptr);
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
    140e:	45 2d       	mov	r20, r5
    1410:	50 e0       	ldi	r21, 0x00	; 0
	

			}
			else if (control_mode == 6)
			{
				manualMode(manualInstruction, sF, sB, &man_velocity, &man_steering);
    1412:	8e 01       	movw	r16, r28
    1414:	0d 5f       	subi	r16, 0xFD	; 253
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	9e 01       	movw	r18, r28
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	b7 01       	movw	r22, r14
    1420:	86 2d       	mov	r24, r6
    1422:	15 d0       	rcall	.+42     	; 0x144e <manualMode>
    1424:	04 c0       	rjmp	.+8      	; 0x142e <main+0xf6>
			}
			else if (control_mode == 2)
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	09 f4       	brne	.+2      	; 0x142e <main+0xf6>
			{
				stop();
    142c:	31 d5       	rcall	.+2658   	; 0x1e90 <stop>
			}

			
			sei();
    142e:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1430:	f6 01       	movw	r30, r12
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1436:	f5 01       	movw	r30, r10
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte(0x05);
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	85 d4       	rcall	.+2314   	; 0x1d4a <spi_send_byte>
			spi_send_byte(0x06);
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	83 d4       	rcall	.+2310   	; 0x1d4a <spi_send_byte>
			spi_send_byte(0x07);
    1444:	87 e0       	ldi	r24, 0x07	; 7
    1446:	81 d4       	rcall	.+2306   	; 0x1d4a <spi_send_byte>
			spi_send_byte(0x08);
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	7f d4       	rcall	.+2302   	; 0x1d4a <spi_send_byte>
    144c:	8f cf       	rjmp	.-226    	; 0x136c <main+0x34>

0000144e <manualMode>:
 * This method performs the manual mode of driving
 * The manual instructions are forward, left, right, reverse stored in array manualInstruction
 *
 */
void manualMode(char manualInstructions, int sF, int sB, int* man_velocity, int* man_steering)
{
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	e9 01       	movw	r28, r18
	cli(); //disable interrupts	
    1458:	f8 94       	cli
	
	if (manualInstructions & (1<<4))
    145a:	84 ff       	sbrs	r24, 4
    145c:	06 c0       	rjmp	.+12     	; 0x146a <manualMode+0x1c>
	{
		*man_velocity = *man_velocity +  5;
    145e:	28 81       	ld	r18, Y
    1460:	39 81       	ldd	r19, Y+1	; 0x01
    1462:	2b 5f       	subi	r18, 0xFB	; 251
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	39 83       	std	Y+1, r19	; 0x01
    1468:	28 83       	st	Y, r18
	} 
	if (manualInstructions & (1<<5))
    146a:	85 ff       	sbrs	r24, 5
    146c:	06 c0       	rjmp	.+12     	; 0x147a <manualMode+0x2c>
	{
		*man_velocity = *man_velocity - 5;
    146e:	28 81       	ld	r18, Y
    1470:	39 81       	ldd	r19, Y+1	; 0x01
    1472:	25 50       	subi	r18, 0x05	; 5
    1474:	31 09       	sbc	r19, r1
    1476:	39 83       	std	Y+1, r19	; 0x01
    1478:	28 83       	st	Y, r18
	}
	if (manualInstructions & (1<<0))
    147a:	80 ff       	sbrs	r24, 0
    147c:	07 c0       	rjmp	.+14     	; 0x148c <manualMode+0x3e>
	{
		*man_steering = *man_steering - 100;
    147e:	f8 01       	movw	r30, r16
    1480:	20 81       	ld	r18, Z
    1482:	31 81       	ldd	r19, Z+1	; 0x01
    1484:	24 56       	subi	r18, 0x64	; 100
    1486:	31 09       	sbc	r19, r1
    1488:	31 83       	std	Z+1, r19	; 0x01
    148a:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<1))
    148c:	81 ff       	sbrs	r24, 1
    148e:	07 c0       	rjmp	.+14     	; 0x149e <manualMode+0x50>
	{
		*man_steering = *man_steering + 100;
    1490:	f8 01       	movw	r30, r16
    1492:	20 81       	ld	r18, Z
    1494:	31 81       	ldd	r19, Z+1	; 0x01
    1496:	2c 59       	subi	r18, 0x9C	; 156
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	31 83       	std	Z+1, r19	; 0x01
    149c:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<2))
    149e:	82 ff       	sbrs	r24, 2
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <manualMode+0x5a>
	{
		*man_steering = 0;
    14a2:	f8 01       	movw	r30, r16
    14a4:	11 82       	std	Z+1, r1	; 0x01
    14a6:	10 82       	st	Z, r1
	}
	if (manualInstructions & (1<<3))
    14a8:	83 ff       	sbrs	r24, 3
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <manualMode+0x68>
	{
		*man_steering = 0;
    14ac:	f8 01       	movw	r30, r16
    14ae:	11 82       	std	Z+1, r1	; 0x01
    14b0:	10 82       	st	Z, r1
		*man_velocity = 0;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	18 82       	st	Y, r1
	}
	
	if (sF<30 && (*man_velocity > 0))
    14b6:	6e 31       	cpi	r22, 0x1E	; 30
    14b8:	71 05       	cpc	r23, r1
    14ba:	5c f4       	brge	.+22     	; 0x14d2 <manualMode+0x84>
    14bc:	88 81       	ld	r24, Y
    14be:	99 81       	ldd	r25, Y+1	; 0x01
    14c0:	18 16       	cp	r1, r24
    14c2:	19 06       	cpc	r1, r25
    14c4:	34 f4       	brge	.+12     	; 0x14d2 <manualMode+0x84>
	{
		setESC(NEUTRAL);
    14c6:	8d ec       	ldi	r24, 0xCD	; 205
    14c8:	9a e0       	ldi	r25, 0x0A	; 10
    14ca:	67 d3       	rcall	.+1742   	; 0x1b9a <setESC>
		*man_velocity = 0;
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	18 82       	st	Y, r1
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <manualMode+0xa8>
	} 
	else if(sB<30 && (*man_velocity < 0))
    14d2:	4e 31       	cpi	r20, 0x1E	; 30
    14d4:	51 05       	cpc	r21, r1
    14d6:	54 f4       	brge	.+20     	; 0x14ec <manualMode+0x9e>
    14d8:	88 81       	ld	r24, Y
    14da:	99 81       	ldd	r25, Y+1	; 0x01
    14dc:	99 23       	and	r25, r25
    14de:	34 f4       	brge	.+12     	; 0x14ec <manualMode+0x9e>
	{
		setESC(NEUTRAL);
    14e0:	8d ec       	ldi	r24, 0xCD	; 205
    14e2:	9a e0       	ldi	r25, 0x0A	; 10
    14e4:	5a d3       	rcall	.+1716   	; 0x1b9a <setESC>
		*man_velocity = 0;
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	18 82       	st	Y, r1
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <manualMode+0xa8>
	}
	else
	{
		setESC(NEUTRAL + *man_velocity);	
    14ec:	88 81       	ld	r24, Y
    14ee:	99 81       	ldd	r25, Y+1	; 0x01
    14f0:	83 53       	subi	r24, 0x33	; 51
    14f2:	95 4f       	sbci	r25, 0xF5	; 245
    14f4:	52 d3       	rcall	.+1700   	; 0x1b9a <setESC>
	}
	
	setServo(STRAIGHT + *man_steering);
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	82 5e       	subi	r24, 0xE2	; 226
    14fe:	95 4f       	sbci	r25, 0xF5	; 245
    1500:	67 d3       	rcall	.+1742   	; 0x1bd0 <setServo>
	
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{      
    150c:	2f 92       	push	r2
    150e:	3f 92       	push	r3
    1510:	4f 92       	push	r4
    1512:	5f 92       	push	r5
    1514:	6f 92       	push	r6
    1516:	7f 92       	push	r7
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	ce 5b       	subi	r28, 0xBE	; 190
    1536:	d1 40       	sbci	r29, 0x01	; 1
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	c3 54       	subi	r28, 0x43	; 67
    1544:	de 4f       	sbci	r29, 0xFE	; 254
    1546:	99 83       	std	Y+1, r25	; 0x01
    1548:	88 83       	st	Y, r24
    154a:	cd 5b       	subi	r28, 0xBD	; 189
    154c:	d1 40       	sbci	r29, 0x01	; 1
    154e:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	
	int adjustC = 10;
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    1550:	88 e0       	ldi	r24, 0x08	; 8
    1552:	e2 ea       	ldi	r30, 0xA2	; 162
    1554:	f1 e0       	ldi	r31, 0x01	; 1
    1556:	de 01       	movw	r26, r28
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	01 90       	ld	r0, Z+
    155c:	0d 92       	st	X+, r0
    155e:	8a 95       	dec	r24
    1560:	e1 f7       	brne	.-8      	; 0x155a <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 120+adjustC, 130+adjustC); // Min_value = 100
    1562:	3e 01       	movw	r6, r28
    1564:	21 e1       	ldi	r18, 0x11	; 17
    1566:	62 0e       	add	r6, r18
    1568:	71 1c       	adc	r7, r1
    156a:	0f 2e       	mov	r0, r31
    156c:	fc e8       	ldi	r31, 0x8C	; 140
    156e:	ef 2e       	mov	r14, r31
    1570:	f1 2c       	mov	r15, r1
    1572:	f0 2d       	mov	r31, r0
    1574:	02 e8       	ldi	r16, 0x82	; 130
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	24 e6       	ldi	r18, 0x64	; 100
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	43 e6       	ldi	r20, 0x63	; 99
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	6a ea       	ldi	r22, 0xAA	; 170
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	c3 01       	movw	r24, r6
    1586:	dd dc       	rcall	.-1606   	; 0xf42 <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRig", 120+adjustC, 130+adjustC, 140+adjustC, 145+adjustC);
    1588:	4e 01       	movw	r8, r28
    158a:	47 e2       	ldi	r20, 0x27	; 39
    158c:	84 0e       	add	r8, r20
    158e:	91 1c       	adc	r9, r1
    1590:	0f 2e       	mov	r0, r31
    1592:	fb e9       	ldi	r31, 0x9B	; 155
    1594:	ef 2e       	mov	r14, r31
    1596:	f1 2c       	mov	r15, r1
    1598:	f0 2d       	mov	r31, r0
    159a:	06 e9       	ldi	r16, 0x96	; 150
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	2c e8       	ldi	r18, 0x8C	; 140
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	42 e8       	ldi	r20, 0x82	; 130
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	63 eb       	ldi	r22, 0xB3	; 179
    15a8:	71 e0       	ldi	r23, 0x01	; 1
    15aa:	c4 01       	movw	r24, r8
    15ac:	ca dc       	rcall	.-1644   	; 0xf42 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135+adjustC, 150+adjustC, 150+adjustC, 165+adjustC);
    15ae:	2e 01       	movw	r4, r28
    15b0:	6d e3       	ldi	r22, 0x3D	; 61
    15b2:	46 0e       	add	r4, r22
    15b4:	51 1c       	adc	r5, r1
    15b6:	0f 2e       	mov	r0, r31
    15b8:	ff ea       	ldi	r31, 0xAF	; 175
    15ba:	ef 2e       	mov	r14, r31
    15bc:	f1 2c       	mov	r15, r1
    15be:	f0 2d       	mov	r31, r0
    15c0:	00 ea       	ldi	r16, 0xA0	; 160
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	20 ea       	ldi	r18, 0xA0	; 160
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	41 e9       	ldi	r20, 0x91	; 145
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	6b e8       	ldi	r22, 0x8B	; 139
    15ce:	71 e0       	ldi	r23, 0x01	; 1
    15d0:	c2 01       	movw	r24, r4
    15d2:	b7 dc       	rcall	.-1682   	; 0xf42 <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLe", 155+adjustC, 160+adjustC, 170+adjustC, 180+adjustC);
    15d4:	5e 01       	movw	r10, r28
    15d6:	83 e5       	ldi	r24, 0x53	; 83
    15d8:	a8 0e       	add	r10, r24
    15da:	b1 1c       	adc	r11, r1
    15dc:	0f 2e       	mov	r0, r31
    15de:	fe eb       	ldi	r31, 0xBE	; 190
    15e0:	ef 2e       	mov	r14, r31
    15e2:	f1 2c       	mov	r15, r1
    15e4:	f0 2d       	mov	r31, r0
    15e6:	04 eb       	ldi	r16, 0xB4	; 180
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	2a ea       	ldi	r18, 0xAA	; 170
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	45 ea       	ldi	r20, 0xA5	; 165
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	6c eb       	ldi	r22, 0xBC	; 188
    15f4:	71 e0       	ldi	r23, 0x01	; 1
    15f6:	c5 01       	movw	r24, r10
    15f8:	a4 dc       	rcall	.-1720   	; 0xf42 <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 170+adjustC, 180+adjustC, 200+adjustC, 201+adjustC);  // Max_value = 200
    15fa:	6e 01       	movw	r12, r28
    15fc:	99 e6       	ldi	r25, 0x69	; 105
    15fe:	c9 0e       	add	r12, r25
    1600:	d1 1c       	adc	r13, r1
    1602:	0f 2e       	mov	r0, r31
    1604:	f3 ed       	ldi	r31, 0xD3	; 211
    1606:	ef 2e       	mov	r14, r31
    1608:	f1 2c       	mov	r15, r1
    160a:	f0 2d       	mov	r31, r0
    160c:	02 ed       	ldi	r16, 0xD2	; 210
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	2e eb       	ldi	r18, 0xBE	; 190
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	44 eb       	ldi	r20, 0xB4	; 180
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	64 ec       	ldi	r22, 0xC4	; 196
    161a:	71 e0       	ldi	r23, 0x01	; 1
    161c:	c6 01       	movw	r24, r12
    161e:	91 dc       	rcall	.-1758   	; 0xf42 <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    1620:	7e 86       	std	Y+14, r7	; 0x0e
    1622:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    1624:	9e a2       	std	Y+38, r9	; 0x26
    1626:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    1628:	5c ae       	std	Y+60, r5	; 0x3c
    162a:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    162c:	63 96       	adiw	r28, 0x13	; 19
    162e:	bf ae       	std	Y+63, r11	; 0x3f
    1630:	ae ae       	std	Y+62, r10	; 0x3e
    1632:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    1634:	f5 01       	movw	r30, r10
    1636:	d5 8a       	std	Z+21, r13	; 0x15
    1638:	c4 8a       	std	Z+20, r12	; 0x14
	farLeft.next = NULL;
    163a:	f6 01       	movw	r30, r12
    163c:	15 8a       	std	Z+21, r1	; 0x15
    163e:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    1640:	c3 54       	subi	r28, 0x43	; 67
    1642:	de 4f       	sbci	r29, 0xFE	; 254
    1644:	88 81       	ld	r24, Y
    1646:	99 81       	ldd	r25, Y+1	; 0x01
    1648:	cd 5b       	subi	r28, 0xBD	; 189
    164a:	d1 40       	sbci	r29, 0x01	; 1
    164c:	84 36       	cpi	r24, 0x64	; 100
    164e:	91 05       	cpc	r25, r1
    1650:	2c f4       	brge	.+10     	; 0x165c <nDoFuzzy+0x150>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    1652:	84 e6       	ldi	r24, 0x64	; 100
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c 87       	std	Y+12, r25	; 0x0c
    1658:	8b 87       	std	Y+11, r24	; 0x0b
    165a:	16 c0       	rjmp	.+44     	; 0x1688 <nDoFuzzy+0x17c>
	}
	else if(c>200+adjustC)			// if sensor value is bigger than delta_C's input set's upper limit
    165c:	c3 54       	subi	r28, 0x43	; 67
    165e:	de 4f       	sbci	r29, 0xFE	; 254
    1660:	e8 81       	ld	r30, Y
    1662:	f9 81       	ldd	r31, Y+1	; 0x01
    1664:	cd 5b       	subi	r28, 0xBD	; 189
    1666:	d1 40       	sbci	r29, 0x01	; 1
    1668:	e3 3d       	cpi	r30, 0xD3	; 211
    166a:	f1 05       	cpc	r31, r1
    166c:	2c f0       	brlt	.+10     	; 0x1678 <nDoFuzzy+0x16c>
	{
		delta_C.value = 200+adjustC;  // force input value to lowest point in delta_C's input set
    166e:	82 ed       	ldi	r24, 0xD2	; 210
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	8b 87       	std	Y+11, r24	; 0x0b
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <nDoFuzzy+0x17c>
	}
	else
	{
		delta_C.value = c;
    1678:	c3 54       	subi	r28, 0x43	; 67
    167a:	de 4f       	sbci	r29, 0xFE	; 254
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	cd 5b       	subi	r28, 0xBD	; 189
    1682:	d1 40       	sbci	r29, 0x01	; 1
    1684:	9c 87       	std	Y+12, r25	; 0x0c
    1686:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    1688:	88 e0       	ldi	r24, 0x08	; 8
    168a:	ec ec       	ldi	r30, 0xCC	; 204
    168c:	f1 e0       	ldi	r31, 0x01	; 1
    168e:	de 01       	movw	r26, r28
    1690:	a1 58       	subi	r26, 0x81	; 129
    1692:	bf 4f       	sbci	r27, 0xFF	; 255
    1694:	01 90       	ld	r0, Z+
    1696:	0d 92       	st	X+, r0
    1698:	8a 95       	dec	r24
    169a:	e1 f7       	brne	.-8      	; 0x1694 <nDoFuzzy+0x188>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOri", -1, 0, 0, 60); // min V is 0
    169c:	4e 01       	movw	r8, r28
    169e:	9f e8       	ldi	r25, 0x8F	; 143
    16a0:	89 0e       	add	r8, r25
    16a2:	91 1c       	adc	r9, r1
    16a4:	0f 2e       	mov	r0, r31
    16a6:	fc e3       	ldi	r31, 0x3C	; 60
    16a8:	ef 2e       	mov	r14, r31
    16aa:	f1 2c       	mov	r15, r1
    16ac:	f0 2d       	mov	r31, r0
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4f ef       	ldi	r20, 0xFF	; 255
    16b8:	5f ef       	ldi	r21, 0xFF	; 255
    16ba:	64 ed       	ldi	r22, 0xD4	; 212
    16bc:	71 e0       	ldi	r23, 0x01	; 1
    16be:	c4 01       	movw	r24, r8
    16c0:	40 dc       	rcall	.-1920   	; 0xf42 <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOri", 10, 40, 40, 70);
    16c2:	5e 01       	movw	r10, r28
    16c4:	e5 ea       	ldi	r30, 0xA5	; 165
    16c6:	ae 0e       	add	r10, r30
    16c8:	b1 1c       	adc	r11, r1
    16ca:	0f 2e       	mov	r0, r31
    16cc:	f6 e4       	ldi	r31, 0x46	; 70
    16ce:	ef 2e       	mov	r14, r31
    16d0:	f1 2c       	mov	r15, r1
    16d2:	f0 2d       	mov	r31, r0
    16d4:	08 e2       	ldi	r16, 0x28	; 40
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	28 e2       	ldi	r18, 0x28	; 40
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e0       	ldi	r20, 0x0A	; 10
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	6c ed       	ldi	r22, 0xDC	; 220
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	c5 01       	movw	r24, r10
    16e6:	2d dc       	rcall	.-1958   	; 0xf42 <MATLAB_MF>
		
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "rightOri", 20, 80, 80, 81); // max V is 80
    16e8:	6e 01       	movw	r12, r28
    16ea:	fb eb       	ldi	r31, 0xBB	; 187
    16ec:	cf 0e       	add	r12, r31
    16ee:	d1 1c       	adc	r13, r1
    16f0:	0f 2e       	mov	r0, r31
    16f2:	f1 e5       	ldi	r31, 0x51	; 81
    16f4:	ef 2e       	mov	r14, r31
    16f6:	f1 2c       	mov	r15, r1
    16f8:	f0 2d       	mov	r31, r0
    16fa:	00 e5       	ldi	r16, 0x50	; 80
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	20 e5       	ldi	r18, 0x50	; 80
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	44 e1       	ldi	r20, 0x14	; 20
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	64 ee       	ldi	r22, 0xE4	; 228
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	c6 01       	movw	r24, r12
    170c:	1a dc       	rcall	.-1996   	; 0xf42 <MATLAB_MF>

	delta_V.membership_functions = &leftOriented;
    170e:	c5 57       	subi	r28, 0x75	; 117
    1710:	df 4f       	sbci	r29, 0xFF	; 255
    1712:	99 82       	std	Y+1, r9	; 0x01
    1714:	88 82       	st	Y, r8
    1716:	cb 58       	subi	r28, 0x8B	; 139
    1718:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    171a:	f4 01       	movw	r30, r8
    171c:	b5 8a       	std	Z+21, r11	; 0x15
    171e:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    1720:	f5 01       	movw	r30, r10
    1722:	d5 8a       	std	Z+21, r13	; 0x15
    1724:	c4 8a       	std	Z+20, r12	; 0x14
	rightOriented.next = NULL;
    1726:	f6 01       	movw	r30, r12
    1728:	15 8a       	std	Z+21, r1	; 0x15
    172a:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<=0)				// if sensor value is smaller than error's input set lower limit
    172c:	12 14       	cp	r1, r2
    172e:	13 04       	cpc	r1, r3
    1730:	4c f0       	brlt	.+18     	; 0x1744 <nDoFuzzy+0x238>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	c7 57       	subi	r28, 0x77	; 119
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	99 83       	std	Y+1, r25	; 0x01
    173c:	88 83       	st	Y, r24
    173e:	c9 58       	subi	r28, 0x89	; 137
    1740:	d0 40       	sbci	r29, 0x00	; 0
    1742:	13 c0       	rjmp	.+38     	; 0x176a <nDoFuzzy+0x25e>
	}
	else if(v>=80)			// if sensor value is bigger than error's input set's upper limit
    1744:	f0 e5       	ldi	r31, 0x50	; 80
    1746:	2f 16       	cp	r2, r31
    1748:	31 04       	cpc	r3, r1
    174a:	4c f0       	brlt	.+18     	; 0x175e <nDoFuzzy+0x252>
	{
		delta_V.value = 79;  // force input value to lowest point in error's input set
    174c:	8f e4       	ldi	r24, 0x4F	; 79
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	c7 57       	subi	r28, 0x77	; 119
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	88 83       	st	Y, r24
    1758:	c9 58       	subi	r28, 0x89	; 137
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	06 c0       	rjmp	.+12     	; 0x176a <nDoFuzzy+0x25e>
	}
	else
	{
		delta_V.value = v;
    175e:	c7 57       	subi	r28, 0x77	; 119
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	39 82       	std	Y+1, r3	; 0x01
    1764:	28 82       	st	Y, r2
    1766:	c9 58       	subi	r28, 0x89	; 137
    1768:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    176a:	6e 01       	movw	r12, r28
    176c:	21 ed       	ldi	r18, 0xD1	; 209
    176e:	c2 0e       	add	r12, r18
    1770:	d1 1c       	adc	r13, r1
    1772:	89 e0       	ldi	r24, 0x09	; 9
    1774:	e9 e0       	ldi	r30, 0x09	; 9
    1776:	f1 e0       	ldi	r31, 0x01	; 1
    1778:	d6 01       	movw	r26, r12
    177a:	01 90       	ld	r0, Z+
    177c:	0d 92       	st	X+, r0
    177e:	8a 95       	dec	r24
    1780:	e1 f7       	brne	.-8      	; 0x177a <nDoFuzzy+0x26e>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLe", 216, 217, 217, 235);
    1782:	0f 2e       	mov	r0, r31
    1784:	fb ee       	ldi	r31, 0xEB	; 235
    1786:	ef 2e       	mov	r14, r31
    1788:	f1 2c       	mov	r15, r1
    178a:	f0 2d       	mov	r31, r0
    178c:	09 ed       	ldi	r16, 0xD9	; 217
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	29 ed       	ldi	r18, 0xD9	; 217
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	48 ed       	ldi	r20, 0xD8	; 216
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	6d ee       	ldi	r22, 0xED	; 237
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	ce 01       	movw	r24, r28
    179e:	8f 51       	subi	r24, 0x1F	; 31
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	cf db       	rcall	.-2146   	; 0xf42 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 224, 239, 239, 254);
    17a4:	2e 01       	movw	r4, r28
    17a6:	47 ef       	ldi	r20, 0xF7	; 247
    17a8:	44 0e       	add	r4, r20
    17aa:	51 1c       	adc	r5, r1
    17ac:	0f 2e       	mov	r0, r31
    17ae:	fe ef       	ldi	r31, 0xFE	; 254
    17b0:	ef 2e       	mov	r14, r31
    17b2:	f1 2c       	mov	r15, r1
    17b4:	f0 2d       	mov	r31, r0
    17b6:	0f ee       	ldi	r16, 0xEF	; 239
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	2f ee       	ldi	r18, 0xEF	; 239
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 ee       	ldi	r20, 0xE0	; 224
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	60 e2       	ldi	r22, 0x20	; 32
    17c4:	71 e0       	ldi	r23, 0x01	; 1
    17c6:	c2 01       	movw	r24, r4
    17c8:	bc db       	rcall	.-2184   	; 0xf42 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 244, 259, 259, 274);
    17ca:	1e 01       	movw	r2, r28
    17cc:	63 ef       	ldi	r22, 0xF3	; 243
    17ce:	26 1a       	sub	r2, r22
    17d0:	6e ef       	ldi	r22, 0xFE	; 254
    17d2:	36 0a       	sbc	r3, r22
    17d4:	0f 2e       	mov	r0, r31
    17d6:	f2 e1       	ldi	r31, 0x12	; 18
    17d8:	ef 2e       	mov	r14, r31
    17da:	ff 24       	eor	r15, r15
    17dc:	f3 94       	inc	r15
    17de:	f0 2d       	mov	r31, r0
    17e0:	03 e0       	ldi	r16, 0x03	; 3
    17e2:	11 e0       	ldi	r17, 0x01	; 1
    17e4:	23 e0       	ldi	r18, 0x03	; 3
    17e6:	31 e0       	ldi	r19, 0x01	; 1
    17e8:	44 ef       	ldi	r20, 0xF4	; 244
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	65 e2       	ldi	r22, 0x25	; 37
    17ee:	71 e0       	ldi	r23, 0x01	; 1
    17f0:	c1 01       	movw	r24, r2
    17f2:	a7 db       	rcall	.-2226   	; 0xf42 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 264, 279, 279, 294);
    17f4:	3e 01       	movw	r6, r28
    17f6:	8d ed       	ldi	r24, 0xDD	; 221
    17f8:	68 1a       	sub	r6, r24
    17fa:	8e ef       	ldi	r24, 0xFE	; 254
    17fc:	78 0a       	sbc	r7, r24
    17fe:	0f 2e       	mov	r0, r31
    1800:	f6 e2       	ldi	r31, 0x26	; 38
    1802:	ef 2e       	mov	r14, r31
    1804:	ff 24       	eor	r15, r15
    1806:	f3 94       	inc	r15
    1808:	f0 2d       	mov	r31, r0
    180a:	07 e1       	ldi	r16, 0x17	; 23
    180c:	11 e0       	ldi	r17, 0x01	; 1
    180e:	27 e1       	ldi	r18, 0x17	; 23
    1810:	31 e0       	ldi	r19, 0x01	; 1
    1812:	48 e0       	ldi	r20, 0x08	; 8
    1814:	51 e0       	ldi	r21, 0x01	; 1
    1816:	6e e2       	ldi	r22, 0x2E	; 46
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	c3 01       	movw	r24, r6
    181c:	92 db       	rcall	.-2268   	; 0xf42 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRi", 285, 302, 302, 303);
    181e:	5e 01       	movw	r10, r28
    1820:	97 ec       	ldi	r25, 0xC7	; 199
    1822:	a9 1a       	sub	r10, r25
    1824:	9e ef       	ldi	r25, 0xFE	; 254
    1826:	b9 0a       	sbc	r11, r25
    1828:	0f 2e       	mov	r0, r31
    182a:	ff e2       	ldi	r31, 0x2F	; 47
    182c:	ef 2e       	mov	r14, r31
    182e:	ff 24       	eor	r15, r15
    1830:	f3 94       	inc	r15
    1832:	f0 2d       	mov	r31, r0
    1834:	0e e2       	ldi	r16, 0x2E	; 46
    1836:	11 e0       	ldi	r17, 0x01	; 1
    1838:	2e e2       	ldi	r18, 0x2E	; 46
    183a:	31 e0       	ldi	r19, 0x01	; 1
    183c:	4d e1       	ldi	r20, 0x1D	; 29
    183e:	51 e0       	ldi	r21, 0x01	; 1
    1840:	65 ef       	ldi	r22, 0xF5	; 245
    1842:	71 e0       	ldi	r23, 0x01	; 1
    1844:	c5 01       	movw	r24, r10
    1846:	7d db       	rcall	.-2310   	; 0xf42 <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    1848:	f6 01       	movw	r30, r12
    184a:	b5 86       	std	Z+13, r11	; 0x0d
    184c:	a4 86       	std	Z+12, r10	; 0x0c
	sharpRight.next = &right;
    184e:	f5 01       	movw	r30, r10
    1850:	75 8a       	std	Z+21, r7	; 0x15
    1852:	64 8a       	std	Z+20, r6	; 0x14
	right.next = &straight;
    1854:	f3 01       	movw	r30, r6
    1856:	35 8a       	std	Z+21, r3	; 0x15
    1858:	24 8a       	std	Z+20, r2	; 0x14
	straight.next = &left;
    185a:	f1 01       	movw	r30, r2
    185c:	55 8a       	std	Z+21, r5	; 0x15
    185e:	44 8a       	std	Z+20, r4	; 0x14
	left.next = &sharpLeft;
    1860:	81 ee       	ldi	r24, 0xE1	; 225
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	8c 0f       	add	r24, r28
    1866:	9d 1f       	adc	r25, r29
    1868:	f2 01       	movw	r30, r4
    186a:	95 8b       	std	Z+21, r25	; 0x15
    186c:	84 8b       	std	Z+20, r24	; 0x14
	sharpLeft.next = NULL;
    186e:	cb 50       	subi	r28, 0x0B	; 11
    1870:	df 4f       	sbci	r29, 0xFF	; 255
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	18 82       	st	Y, r1
    1876:	c5 5f       	subi	r28, 0xF5	; 245
    1878:	d0 40       	sbci	r29, 0x00	; 0
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    187a:	80 5e       	subi	r24, 0xE0	; 224
    187c:	91 09       	sbc	r25, r1
    187e:	90 93 1c 03 	sts	0x031C, r25
    1882:	80 93 1b 03 	sts	0x031B, r24
	delta_C.next = &delta_V;
    1886:	e8 57       	subi	r30, 0x78	; 120
    1888:	f1 09       	sbc	r31, r1
    188a:	f8 8b       	std	Y+16, r31	; 0x10
    188c:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    188e:	17 86       	std	Z+15, r1	; 0x0f
    1890:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    1892:	d0 92 1a 03 	sts	0x031A, r13
    1896:	c0 92 19 03 	sts	0x0319, r12
	steering.next = NULL;
    189a:	f6 01       	movw	r30, r12
    189c:	17 86       	std	Z+15, r1	; 0x0f
    189e:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    18a0:	4e 01       	movw	r8, r28
    18a2:	f1 eb       	ldi	r31, 0xB1	; 177
    18a4:	8f 1a       	sub	r8, r31
    18a6:	fe ef       	ldi	r31, 0xFE	; 254
    18a8:	9f 0a       	sbc	r9, r31
    18aa:	90 92 1e 03 	sts	0x031E, r9
    18ae:	80 92 1d 03 	sts	0x031D, r8
	struct rule_type rule2; rule1.next = &rule2;
    18b2:	be 01       	movw	r22, r28
    18b4:	6b 5a       	subi	r22, 0xAB	; 171
    18b6:	7e 4f       	sbci	r23, 0xFE	; 254
    18b8:	f4 01       	movw	r30, r8
    18ba:	75 83       	std	Z+5, r23	; 0x05
    18bc:	64 83       	std	Z+4, r22	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
    18be:	ae 01       	movw	r20, r28
    18c0:	45 5a       	subi	r20, 0xA5	; 165
    18c2:	5e 4f       	sbci	r21, 0xFE	; 254
    18c4:	fb 01       	movw	r30, r22
    18c6:	55 83       	std	Z+5, r21	; 0x05
    18c8:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
    18ca:	9e 01       	movw	r18, r28
    18cc:	2f 59       	subi	r18, 0x9F	; 159
    18ce:	3e 4f       	sbci	r19, 0xFE	; 254
    18d0:	fa 01       	movw	r30, r20
    18d2:	35 83       	std	Z+5, r19	; 0x05
    18d4:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5;
    18d6:	8a 59       	subi	r24, 0x9A	; 154
    18d8:	9e 4f       	sbci	r25, 0xFE	; 254
    18da:	f9 01       	movw	r30, r18
    18dc:	95 83       	std	Z+5, r25	; 0x05
    18de:	84 83       	std	Z+4, r24	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
    18e0:	de 01       	movw	r26, r28
    18e2:	a3 59       	subi	r26, 0x93	; 147
    18e4:	be 4f       	sbci	r27, 0xFE	; 254
    18e6:	fc 01       	movw	r30, r24
    18e8:	b5 83       	std	Z+5, r27	; 0x05
    18ea:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule7; rule6.next = &rule7;
    18ec:	e3 e7       	ldi	r30, 0x73	; 115
    18ee:	f1 e0       	ldi	r31, 0x01	; 1
    18f0:	ec 0f       	add	r30, r28
    18f2:	fd 1f       	adc	r31, r29
    18f4:	15 96       	adiw	r26, 0x05	; 5
    18f6:	fc 93       	st	X, r31
    18f8:	ee 93       	st	-X, r30
    18fa:	14 97       	sbiw	r26, 0x04	; 4
	rule7.next = NULL;
    18fc:	c9 58       	subi	r28, 0x89	; 137
    18fe:	de 4f       	sbci	r29, 0xFE	; 254
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	18 82       	st	Y, r1
    1904:	c7 57       	subi	r28, 0x77	; 119
    1906:	d1 40       	sbci	r29, 0x01	; 1
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if deltaC is farLeft then steering is SharpRight"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1908:	8e 01       	movw	r16, r28
    190a:	07 58       	subi	r16, 0x87	; 135
    190c:	1e 4f       	sbci	r17, 0xFE	; 254
    190e:	f4 01       	movw	r30, r8
    1910:	11 83       	std	Z+1, r17	; 0x01
    1912:	00 83       	st	Z, r16
    1914:	f8 01       	movw	r30, r16
    1916:	13 82       	std	Z+3, r1	; 0x03
    1918:	12 82       	std	Z+2, r1	; 0x02
    191a:	7e 01       	movw	r14, r28
    191c:	f3 e8       	ldi	r31, 0x83	; 131
    191e:	ef 1a       	sub	r14, r31
    1920:	fe ef       	ldi	r31, 0xFE	; 254
    1922:	ff 0a       	sbc	r15, r31
    1924:	f4 01       	movw	r30, r8
    1926:	f3 82       	std	Z+3, r15	; 0x03
    1928:	e2 82       	std	Z+2, r14	; 0x02
    192a:	f7 01       	movw	r30, r14
    192c:	13 82       	std	Z+3, r1	; 0x03
    192e:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &farLeft.value; then1.value = &sharpRight.value;
    1930:	4e 01       	movw	r8, r28
    1932:	f3 e7       	ldi	r31, 0x73	; 115
    1934:	8f 0e       	add	r8, r31
    1936:	91 1c       	adc	r9, r1
    1938:	f8 01       	movw	r30, r16
    193a:	91 82       	std	Z+1, r9	; 0x01
    193c:	80 82       	st	Z, r8
    193e:	fa e0       	ldi	r31, 0x0A	; 10
    1940:	af 0e       	add	r10, r31
    1942:	b1 1c       	adc	r11, r1
    1944:	f7 01       	movw	r30, r14
    1946:	b1 82       	std	Z+1, r11	; 0x01
    1948:	a0 82       	st	Z, r10

	////RULE 2 "if deltaC is smallLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    194a:	08 5f       	subi	r16, 0xF8	; 248
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fb 01       	movw	r30, r22
    1950:	11 83       	std	Z+1, r17	; 0x01
    1952:	00 83       	st	Z, r16
    1954:	f8 01       	movw	r30, r16
    1956:	13 82       	std	Z+3, r1	; 0x03
    1958:	12 82       	std	Z+2, r1	; 0x02
    195a:	7e 01       	movw	r14, r28
    195c:	fb e7       	ldi	r31, 0x7B	; 123
    195e:	ef 1a       	sub	r14, r31
    1960:	fe ef       	ldi	r31, 0xFE	; 254
    1962:	ff 0a       	sbc	r15, r31
    1964:	fb 01       	movw	r30, r22
    1966:	f3 82       	std	Z+3, r15	; 0x03
    1968:	e2 82       	std	Z+2, r14	; 0x02
    196a:	f7 01       	movw	r30, r14
    196c:	13 82       	std	Z+3, r1	; 0x03
    196e:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &smallLeft.value; then2.value = &right.value;
    1970:	68 5f       	subi	r22, 0xF8	; 248
    1972:	71 09       	sbc	r23, r1
    1974:	f8 01       	movw	r30, r16
    1976:	71 83       	std	Z+1, r23	; 0x01
    1978:	60 83       	st	Z, r22
    197a:	fa e0       	ldi	r31, 0x0A	; 10
    197c:	6f 0e       	add	r6, r31
    197e:	71 1c       	adc	r7, r1
    1980:	f7 01       	movw	r30, r14
    1982:	71 82       	std	Z+1, r7	; 0x01
    1984:	60 82       	st	Z, r6

	////RULE 5 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1986:	64 5d       	subi	r22, 0xD4	; 212
    1988:	7e 4f       	sbci	r23, 0xFE	; 254
    198a:	fa 01       	movw	r30, r20
    198c:	71 83       	std	Z+1, r23	; 0x01
    198e:	60 83       	st	Z, r22
    1990:	04 5f       	subi	r16, 0xF4	; 244
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	fb 01       	movw	r30, r22
    1996:	13 83       	std	Z+3, r17	; 0x03
    1998:	02 83       	std	Z+2, r16	; 0x02
    199a:	f8 01       	movw	r30, r16
    199c:	13 82       	std	Z+3, r1	; 0x03
    199e:	12 82       	std	Z+2, r1	; 0x02
    19a0:	7e 01       	movw	r14, r28
    19a2:	ff e6       	ldi	r31, 0x6F	; 111
    19a4:	ef 1a       	sub	r14, r31
    19a6:	fe ef       	ldi	r31, 0xFE	; 254
    19a8:	ff 0a       	sbc	r15, r31
    19aa:	fa 01       	movw	r30, r20
    19ac:	f3 82       	std	Z+3, r15	; 0x03
    19ae:	e2 82       	std	Z+2, r14	; 0x02
    19b0:	f7 01       	movw	r30, r14
    19b2:	13 82       	std	Z+3, r1	; 0x03
    19b4:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &centre.value; if32.value = &rightOriented.value; then3.value = &left.value;
    19b6:	5e 01       	movw	r10, r28
    19b8:	f7 e4       	ldi	r31, 0x47	; 71
    19ba:	af 0e       	add	r10, r31
    19bc:	b1 1c       	adc	r11, r1
    19be:	fb 01       	movw	r30, r22
    19c0:	b1 82       	std	Z+1, r11	; 0x01
    19c2:	a0 82       	st	Z, r10
    19c4:	46 59       	subi	r20, 0x96	; 150
    19c6:	51 09       	sbc	r21, r1
    19c8:	f8 01       	movw	r30, r16
    19ca:	51 83       	std	Z+1, r21	; 0x01
    19cc:	40 83       	st	Z, r20
    19ce:	fa e0       	ldi	r31, 0x0A	; 10
    19d0:	4f 0e       	add	r4, r31
    19d2:	51 1c       	adc	r5, r1
    19d4:	f7 01       	movw	r30, r14
    19d6:	51 82       	std	Z+1, r5	; 0x01
    19d8:	40 82       	st	Z, r4
	
	////RULE 6 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
    19da:	64 5f       	subi	r22, 0xF4	; 244
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	f9 01       	movw	r30, r18
    19e0:	71 83       	std	Z+1, r23	; 0x01
    19e2:	60 83       	st	Z, r22
    19e4:	4c 52       	subi	r20, 0x2C	; 44
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	fb 01       	movw	r30, r22
    19ea:	53 83       	std	Z+3, r21	; 0x03
    19ec:	42 83       	std	Z+2, r20	; 0x02
    19ee:	fa 01       	movw	r30, r20
    19f0:	13 82       	std	Z+3, r1	; 0x03
    19f2:	12 82       	std	Z+2, r1	; 0x02
    19f4:	00 5f       	subi	r16, 0xF0	; 240
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	f9 01       	movw	r30, r18
    19fa:	13 83       	std	Z+3, r17	; 0x03
    19fc:	02 83       	std	Z+2, r16	; 0x02
    19fe:	f8 01       	movw	r30, r16
    1a00:	13 82       	std	Z+3, r1	; 0x03
    1a02:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &centre.value; if42.value = &straightOriented.value; then4.value = &straight.value;
    1a04:	fb 01       	movw	r30, r22
    1a06:	b1 82       	std	Z+1, r11	; 0x01
    1a08:	a0 82       	st	Z, r10
    1a0a:	22 5b       	subi	r18, 0xB2	; 178
    1a0c:	31 09       	sbc	r19, r1
    1a0e:	fa 01       	movw	r30, r20
    1a10:	31 83       	std	Z+1, r19	; 0x01
    1a12:	20 83       	st	Z, r18
    1a14:	fa e0       	ldi	r31, 0x0A	; 10
    1a16:	2f 0e       	add	r2, r31
    1a18:	31 1c       	adc	r3, r1
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	31 82       	std	Z+1, r3	; 0x01
    1a1e:	20 82       	st	Z, r2
	
	////RULE 5 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
    1a20:	64 5f       	subi	r22, 0xF4	; 244
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	fc 01       	movw	r30, r24
    1a26:	71 83       	std	Z+1, r23	; 0x01
    1a28:	60 83       	st	Z, r22
    1a2a:	44 5f       	subi	r20, 0xF4	; 244
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	fb 01       	movw	r30, r22
    1a30:	53 83       	std	Z+3, r21	; 0x03
    1a32:	42 83       	std	Z+2, r20	; 0x02
    1a34:	fa 01       	movw	r30, r20
    1a36:	13 82       	std	Z+3, r1	; 0x03
    1a38:	12 82       	std	Z+2, r1	; 0x02
    1a3a:	26 50       	subi	r18, 0x06	; 6
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	fc 01       	movw	r30, r24
    1a40:	33 83       	std	Z+3, r19	; 0x03
    1a42:	22 83       	std	Z+2, r18	; 0x02
    1a44:	f9 01       	movw	r30, r18
    1a46:	13 82       	std	Z+3, r1	; 0x03
    1a48:	12 82       	std	Z+2, r1	; 0x02
	if51.value = &centre.value; if52.value = &leftOriented.value; then5.value = &right.value;
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	b1 82       	std	Z+1, r11	; 0x01
    1a4e:	a0 82       	st	Z, r10
    1a50:	8e 5c       	subi	r24, 0xCE	; 206
    1a52:	91 09       	sbc	r25, r1
    1a54:	fa 01       	movw	r30, r20
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	71 82       	std	Z+1, r7	; 0x01
    1a5e:	60 82       	st	Z, r6
	
	////RULE 6 "if deltaC is smallRight then steering is Left"
	struct rule_element_type if61, then6;
	rule6.if_side = &if61; if61.next = NULL; rule6.then_side = &then6; then6.next = NULL;
    1a60:	2c 5f       	subi	r18, 0xFC	; 252
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	3c 93       	st	X, r19
    1a68:	2e 93       	st	-X, r18
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	13 82       	std	Z+3, r1	; 0x03
    1a6e:	12 82       	std	Z+2, r1	; 0x02
    1a70:	88 5e       	subi	r24, 0xE8	; 232
    1a72:	9e 4f       	sbci	r25, 0xFE	; 254
    1a74:	13 96       	adiw	r26, 0x03	; 3
    1a76:	9c 93       	st	X, r25
    1a78:	8e 93       	st	-X, r24
    1a7a:	12 97       	sbiw	r26, 0x02	; 2
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	13 82       	std	Z+3, r1	; 0x03
    1a80:	12 82       	std	Z+2, r1	; 0x02
	if61.value = &smallRight.value; then6.value = &left.value;
    1a82:	44 57       	subi	r20, 0x74	; 116
    1a84:	51 40       	sbci	r21, 0x01	; 1
    1a86:	f9 01       	movw	r30, r18
    1a88:	51 83       	std	Z+1, r21	; 0x01
    1a8a:	40 83       	st	Z, r20
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	51 82       	std	Z+1, r5	; 0x01
    1a90:	40 82       	st	Z, r4
	
	////RULE 7 "if deltaC is farRight then steering is sharpLeft"
	struct rule_element_type if71, then7;
	rule7.if_side = &if71; if71.next = NULL; rule7.then_side = &then7; then7.next = NULL;
    1a92:	04 96       	adiw	r24, 0x04	; 4
    1a94:	cd 58       	subi	r28, 0x8D	; 141
    1a96:	de 4f       	sbci	r29, 0xFE	; 254
    1a98:	99 83       	std	Y+1, r25	; 0x01
    1a9a:	88 83       	st	Y, r24
    1a9c:	c3 57       	subi	r28, 0x73	; 115
    1a9e:	d1 40       	sbci	r29, 0x01	; 1
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	13 82       	std	Z+3, r1	; 0x03
    1aa4:	12 82       	std	Z+2, r1	; 0x02
    1aa6:	a4 5b       	subi	r26, 0xB4	; 180
    1aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aaa:	cb 58       	subi	r28, 0x8B	; 139
    1aac:	de 4f       	sbci	r29, 0xFE	; 254
    1aae:	b9 83       	std	Y+1, r27	; 0x01
    1ab0:	a8 83       	st	Y, r26
    1ab2:	c5 57       	subi	r28, 0x75	; 117
    1ab4:	d1 40       	sbci	r29, 0x01	; 1
    1ab6:	13 96       	adiw	r26, 0x03	; 3
    1ab8:	1c 92       	st	X, r1
    1aba:	1e 92       	st	-X, r1
    1abc:	12 97       	sbiw	r26, 0x02	; 2
	if71.value = &farRight.value;  then7.value = &sharpLeft.value;
    1abe:	22 59       	subi	r18, 0x92	; 146
    1ac0:	31 40       	sbci	r19, 0x01	; 1
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	20 83       	st	Z, r18
    1ac6:	81 ee       	ldi	r24, 0xE1	; 225
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	8c 0f       	add	r24, r28
    1acc:	9d 1f       	adc	r25, r29
    1ace:	0a 96       	adiw	r24, 0x0a	; 10
    1ad0:	8d 93       	st	X+, r24
    1ad2:	9c 93       	st	X, r25
	

	
	
	// the methods performing the FLC
	fuzzification();
    1ad4:	03 d9       	rcall	.-3578   	; 0xcdc <fuzzification>
	rule_evaluation();
    1ad6:	29 d9       	rcall	.-3502   	; 0xd2a <rule_evaluation>
	defuzzification();
    1ad8:	6e d9       	rcall	.-3364   	; 0xdb6 <defuzzification>
	steering.value = steering.value*10;
    1ada:	f6 01       	movw	r30, r12
    1adc:	22 85       	ldd	r18, Z+10	; 0x0a
    1ade:	33 85       	ldd	r19, Z+11	; 0x0b
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	22 0f       	add	r18, r18
    1aec:	33 1f       	adc	r19, r19
    1aee:	22 0f       	add	r18, r18
    1af0:	33 1f       	adc	r19, r19
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	93 87       	std	Z+11, r25	; 0x0b
    1af8:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1afa:	86 3e       	cpi	r24, 0xE6	; 230
    1afc:	f7 e0       	ldi	r31, 0x07	; 7
    1afe:	9f 07       	cpc	r25, r31
    1b00:	24 f4       	brge	.+8      	; 0x1b0a <nDoFuzzy+0x5fe>
	{
		setServo(MAXLEFT);
    1b02:	86 ee       	ldi	r24, 0xE6	; 230
    1b04:	97 e0       	ldi	r25, 0x07	; 7
    1b06:	64 d0       	rcall	.+200    	; 0x1bd0 <setServo>
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <nDoFuzzy+0x610>
	}
	else if (steering.value >MAXRIGHT)
    1b0a:	85 3e       	cpi	r24, 0xE5	; 229
    1b0c:	2c e0       	ldi	r18, 0x0C	; 12
    1b0e:	92 07       	cpc	r25, r18
    1b10:	24 f0       	brlt	.+8      	; 0x1b1a <nDoFuzzy+0x60e>
	{
		setServo(MAXRIGHT);
    1b12:	84 ee       	ldi	r24, 0xE4	; 228
    1b14:	9c e0       	ldi	r25, 0x0C	; 12
    1b16:	5c d0       	rcall	.+184    	; 0x1bd0 <setServo>
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <nDoFuzzy+0x610>
	}
	else
	{
		setServo(steering.value);
    1b1a:	5a d0       	rcall	.+180    	; 0x1bd0 <setServo>
	}
    
}
    1b1c:	c2 54       	subi	r28, 0x42	; 66
    1b1e:	de 4f       	sbci	r29, 0xFE	; 254
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
    1b42:	7f 90       	pop	r7
    1b44:	6f 90       	pop	r6
    1b46:	5f 90       	pop	r5
    1b48:	4f 90       	pop	r4
    1b4a:	3f 90       	pop	r3
    1b4c:	2f 90       	pop	r2
    1b4e:	08 95       	ret

00001b50 <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) && (v == 81))        // right curvature, turn right
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	39 f4       	brne	.+14     	; 0x1b64 <nFuzzySteering+0x14>
    1b56:	61 35       	cpi	r22, 0x51	; 81
    1b58:	71 05       	cpc	r23, r1
    1b5a:	71 f4       	brne	.+28     	; 0x1b78 <nFuzzySteering+0x28>
	{
		setServo(MAXRIGHT);
    1b5c:	84 ee       	ldi	r24, 0xE4	; 228
    1b5e:	9c e0       	ldi	r25, 0x0C	; 12
    1b60:	37 c0       	rjmp	.+110    	; 0x1bd0 <setServo>
    1b62:	08 95       	ret
	}
	else if ((c == 2) && (v == 81))       // left curvature, turn left
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	91 05       	cpc	r25, r1
    1b68:	39 f4       	brne	.+14     	; 0x1b78 <nFuzzySteering+0x28>
    1b6a:	61 35       	cpi	r22, 0x51	; 81
    1b6c:	71 05       	cpc	r23, r1
    1b6e:	21 f4       	brne	.+8      	; 0x1b78 <nFuzzySteering+0x28>
	{
		setServo(MAXLEFT);
    1b70:	86 ee       	ldi	r24, 0xE6	; 230
    1b72:	97 e0       	ldi	r25, 0x07	; 7
    1b74:	2d c0       	rjmp	.+90     	; 0x1bd0 <setServo>
    1b76:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1b78:	c9 cc       	rjmp	.-1646   	; 0x150c <nDoFuzzy>
    1b7a:	08 95       	ret

00001b7c <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1b80:	82 ea       	ldi	r24, 0xA2	; 162
    1b82:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	9f e8       	ldi	r25, 0x8F	; 143
    1b8a:	90 93 87 00 	sts	0x0087, r25
    1b8e:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1b92:	8a e1       	ldi	r24, 0x1A	; 26
    1b94:	80 93 81 00 	sts	0x0081, r24
    1b98:	08 95       	ret

00001b9a <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1b9a:	80 36       	cpi	r24, 0x60	; 96
    1b9c:	2a e0       	ldi	r18, 0x0A	; 10
    1b9e:	92 07       	cpc	r25, r18
    1ba0:	3c f4       	brge	.+14     	; 0x1bb0 <setESC+0x16>
	{
		OCR1A = MINESC;
    1ba2:	8f e5       	ldi	r24, 0x5F	; 95
    1ba4:	9a e0       	ldi	r25, 0x0A	; 10
    1ba6:	90 93 89 00 	sts	0x0089, r25
    1baa:	80 93 88 00 	sts	0x0088, r24
    1bae:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1bb0:	82 32       	cpi	r24, 0x22	; 34
    1bb2:	2b e0       	ldi	r18, 0x0B	; 11
    1bb4:	92 07       	cpc	r25, r18
    1bb6:	3c f0       	brlt	.+14     	; 0x1bc6 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1bb8:	82 e2       	ldi	r24, 0x22	; 34
    1bba:	9b e0       	ldi	r25, 0x0B	; 11
    1bbc:	90 93 89 00 	sts	0x0089, r25
    1bc0:	80 93 88 00 	sts	0x0088, r24
    1bc4:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1bc6:	90 93 89 00 	sts	0x0089, r25
    1bca:	80 93 88 00 	sts	0x0088, r24
    1bce:	08 95       	ret

00001bd0 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1bd0:	84 3e       	cpi	r24, 0xE4	; 228
    1bd2:	2c e0       	ldi	r18, 0x0C	; 12
    1bd4:	92 07       	cpc	r25, r18
    1bd6:	3c f0       	brlt	.+14     	; 0x1be6 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1bd8:	84 ee       	ldi	r24, 0xE4	; 228
    1bda:	9c e0       	ldi	r25, 0x0C	; 12
    1bdc:	90 93 8b 00 	sts	0x008B, r25
    1be0:	80 93 8a 00 	sts	0x008A, r24
    1be4:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1be6:	87 3e       	cpi	r24, 0xE7	; 231
    1be8:	27 e0       	ldi	r18, 0x07	; 7
    1bea:	92 07       	cpc	r25, r18
    1bec:	3c f4       	brge	.+14     	; 0x1bfc <setServo+0x2c>

		OCR1B = MAXLEFT;
    1bee:	86 ee       	ldi	r24, 0xE6	; 230
    1bf0:	97 e0       	ldi	r25, 0x07	; 7
    1bf2:	90 93 8b 00 	sts	0x008B, r25
    1bf6:	80 93 8a 00 	sts	0x008A, r24
    1bfa:	08 95       	ret
		
	} else {
		OCR1B = counterServo;
    1bfc:	90 93 8b 00 	sts	0x008B, r25
    1c00:	80 93 8a 00 	sts	0x008A, r24
    1c04:	08 95       	ret

00001c06 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1c24:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1c26:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1c28:	2d 3f       	cpi	r18, 0xFD	; 253
    1c2a:	a9 f0       	breq	.+42     	; 0x1c56 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1c2c:	e8 e8       	ldi	r30, 0x88	; 136
    1c2e:	f2 e0       	ldi	r31, 0x02	; 2
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	dc 01       	movw	r26, r24
    1c36:	aa 5b       	subi	r26, 0xBA	; 186
    1c38:	bd 4f       	sbci	r27, 0xFD	; 253
    1c3a:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1c42:	ea e8       	ldi	r30, 0x8A	; 138
    1c44:	f2 e0       	ldi	r31, 0x02	; 2
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 fe 01 	sts	0x01FE, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1c56:	80 91 88 02 	lds	r24, 0x0288
    1c5a:	90 91 89 02 	lds	r25, 0x0289
    1c5e:	80 34       	cpi	r24, 0x40	; 64
    1c60:	91 05       	cpc	r25, r1
    1c62:	21 f4       	brne	.+8      	; 0x1c6c <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1c64:	10 92 89 02 	sts	0x0289, r1
    1c68:	10 92 88 02 	sts	0x0288, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1c6c:	80 91 44 02 	lds	r24, 0x0244
    1c70:	90 91 45 02 	lds	r25, 0x0245
    1c74:	89 2b       	or	r24, r25
    1c76:	01 f1       	breq	.+64     	; 0x1cb8 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1c78:	e0 91 40 02 	lds	r30, 0x0240
    1c7c:	f0 91 41 02 	lds	r31, 0x0241
    1c80:	e0 50       	subi	r30, 0x00	; 0
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	80 81       	ld	r24, Z
    1c86:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1c88:	e0 e4       	ldi	r30, 0x40	; 64
    1c8a:	f2 e0       	ldi	r31, 0x02	; 2
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1c96:	e4 e4       	ldi	r30, 0x44	; 68
    1c98:	f2 e0       	ldi	r31, 0x02	; 2
    1c9a:	20 81       	ld	r18, Z
    1c9c:	31 81       	ldd	r19, Z+1	; 0x01
    1c9e:	21 50       	subi	r18, 0x01	; 1
    1ca0:	31 09       	sbc	r19, r1
    1ca2:	31 83       	std	Z+1, r19	; 0x01
    1ca4:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1ca6:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1ca8:	80 34       	cpi	r24, 0x40	; 64
    1caa:	91 05       	cpc	r25, r1
    1cac:	49 f4       	brne	.+18     	; 0x1cc0 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1cae:	10 92 41 02 	sts	0x0241, r1
    1cb2:	10 92 40 02 	sts	0x0240, r1
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1cb8:	8d ef       	ldi	r24, 0xFD	; 253
    1cba:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1cbc:	10 92 ff 01 	sts	0x01FF, r1
		
	} 	
	

}
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0b be       	out	0x3b, r0	; 59
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1cde:	80 e4       	ldi	r24, 0x40	; 64
    1ce0:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1ce2:	80 ec       	ldi	r24, 0xC0	; 192
    1ce4:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1ce6:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1ce8:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1cea:	8d ef       	ldi	r24, 0xFD	; 253
    1cec:	8e bd       	out	0x2e, r24	; 46
    1cee:	08 95       	ret

00001cf0 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1cf0:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1cf2:	20 91 8a 02 	lds	r18, 0x028A
    1cf6:	30 91 8b 02 	lds	r19, 0x028B
    1cfa:	21 15       	cp	r18, r1
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	a9 f0       	breq	.+42     	; 0x1d2a <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1d00:	e6 e8       	ldi	r30, 0x86	; 134
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	40 81       	ld	r20, Z
    1d06:	51 81       	ldd	r21, Z+1	; 0x01
    1d08:	da 01       	movw	r26, r20
    1d0a:	aa 5b       	subi	r26, 0xBA	; 186
    1d0c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d0e:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1d10:	4f 5f       	subi	r20, 0xFF	; 255
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	51 83       	std	Z+1, r21	; 0x01
    1d16:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1d18:	21 50       	subi	r18, 0x01	; 1
    1d1a:	31 09       	sbc	r19, r1
    1d1c:	30 93 8b 02 	sts	0x028B, r19
    1d20:	20 93 8a 02 	sts	0x028A, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1d24:	23 2b       	or	r18, r19
    1d26:	21 f4       	brne	.+8      	; 0x1d30 <spi_get_byte+0x40>
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1d2a:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1d2c:	10 92 fe 01 	sts	0x01FE, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1d30:	20 91 86 02 	lds	r18, 0x0286
    1d34:	30 91 87 02 	lds	r19, 0x0287
    1d38:	20 34       	cpi	r18, 0x40	; 64
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1d3e:	10 92 87 02 	sts	0x0287, r1
    1d42:	10 92 86 02 	sts	0x0286, r1
	}
	

	sei();
    1d46:	78 94       	sei
	
	return value;
	
		
}
    1d48:	08 95       	ret

00001d4a <spi_send_byte>:

void spi_send_byte(unsigned char value){
	
	cli();
    1d4a:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1d4c:	20 91 44 02 	lds	r18, 0x0244
    1d50:	30 91 45 02 	lds	r19, 0x0245
    1d54:	20 34       	cpi	r18, 0x40	; 64
    1d56:	31 05       	cpc	r19, r1
    1d58:	90 f4       	brcc	.+36     	; 0x1d7e <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1d5a:	e2 e4       	ldi	r30, 0x42	; 66
    1d5c:	f2 e0       	ldi	r31, 0x02	; 2
    1d5e:	40 81       	ld	r20, Z
    1d60:	51 81       	ldd	r21, Z+1	; 0x01
    1d62:	da 01       	movw	r26, r20
    1d64:	a0 50       	subi	r26, 0x00	; 0
    1d66:	be 4f       	sbci	r27, 0xFE	; 254
    1d68:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1d6a:	4f 5f       	subi	r20, 0xFF	; 255
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	51 83       	std	Z+1, r21	; 0x01
    1d70:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	30 93 45 02 	sts	0x0245, r19
    1d7a:	20 93 44 02 	sts	0x0244, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1d7e:	80 91 42 02 	lds	r24, 0x0242
    1d82:	90 91 43 02 	lds	r25, 0x0243
    1d86:	80 34       	cpi	r24, 0x40	; 64
    1d88:	91 05       	cpc	r25, r1
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1d8c:	10 92 43 02 	sts	0x0243, r1
    1d90:	10 92 42 02 	sts	0x0242, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1d94:	80 91 44 02 	lds	r24, 0x0244
    1d98:	90 91 45 02 	lds	r25, 0x0245
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f9 f4       	brne	.+62     	; 0x1dde <spi_send_byte+0x94>
    1da0:	80 91 ff 01 	lds	r24, 0x01FF
    1da4:	81 11       	cpse	r24, r1
    1da6:	1b c0       	rjmp	.+54     	; 0x1dde <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    1da8:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1daa:	e0 91 40 02 	lds	r30, 0x0240
    1dae:	f0 91 41 02 	lds	r31, 0x0241
    1db2:	e0 50       	subi	r30, 0x00	; 0
    1db4:	fe 4f       	sbci	r31, 0xFE	; 254
    1db6:	80 81       	ld	r24, Z
    1db8:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1dba:	e0 e4       	ldi	r30, 0x40	; 64
    1dbc:	f2 e0       	ldi	r31, 0x02	; 2
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1dc8:	e4 e4       	ldi	r30, 0x44	; 68
    1dca:	f2 e0       	ldi	r31, 0x02	; 2
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1dd6:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 ff 01 	sts	0x01FF, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1dde:	80 91 40 02 	lds	r24, 0x0240
    1de2:	90 91 41 02 	lds	r25, 0x0241
    1de6:	80 34       	cpi	r24, 0x40	; 64
    1de8:	91 05       	cpc	r25, r1
    1dea:	21 f4       	brne	.+8      	; 0x1df4 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1dec:	10 92 41 02 	sts	0x0241, r1
    1df0:	10 92 40 02 	sts	0x0240, r1
	}
			
			

	sei();
    1df4:	78 94       	sei
    1df6:	08 95       	ret

00001df8 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	20 91 8a 02 	lds	r18, 0x028A
    1dfe:	30 91 8b 02 	lds	r19, 0x028B
    1e02:	2b 30       	cpi	r18, 0x0B	; 11
    1e04:	31 05       	cpc	r19, r1
    1e06:	08 f4       	brcc	.+2      	; 0x1e0a <is_package_recieved+0x12>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1e0a:	08 95       	ret

00001e0c <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	8c 01       	movw	r16, r24
    1e16:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1e18:	20 91 8a 02 	lds	r18, 0x028A
    1e1c:	30 91 8b 02 	lds	r19, 0x028B
    1e20:	23 2b       	or	r18, r19
    1e22:	61 f1       	breq	.+88     	; 0x1e7c <read_sensor_info+0x70>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1e24:	e0 91 86 02 	lds	r30, 0x0286
    1e28:	f0 91 87 02 	lds	r31, 0x0287
    1e2c:	ea 5b       	subi	r30, 0xBA	; 186
    1e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 3f       	cpi	r24, 0xFF	; 255
    1e34:	d9 f4       	brne	.+54     	; 0x1e6c <read_sensor_info+0x60>
    1e36:	e0 df       	rcall	.-64     	; 0x1df8 <is_package_recieved>
    1e38:	88 23       	and	r24, r24
    1e3a:	11 f1       	breq	.+68     	; 0x1e80 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1e3c:	59 df       	rcall	.-334    	; 0x1cf0 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1e3e:	58 df       	rcall	.-336    	; 0x1cf0 <spi_get_byte>
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1e44:	55 df       	rcall	.-342    	; 0x1cf0 <spi_get_byte>
    1e46:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1e48:	53 df       	rcall	.-346    	; 0x1cf0 <spi_get_byte>
    1e4a:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1e4c:	51 df       	rcall	.-350    	; 0x1cf0 <spi_get_byte>
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1e50:	4f df       	rcall	.-354    	; 0x1cf0 <spi_get_byte>
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1e54:	4d df       	rcall	.-358    	; 0x1cf0 <spi_get_byte>
    1e56:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1e58:	4b df       	rcall	.-362    	; 0x1cf0 <spi_get_byte>
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte();
    1e5c:	49 df       	rcall	.-366    	; 0x1cf0 <spi_get_byte>
    1e5e:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1e60:	47 df       	rcall	.-370    	; 0x1cf0 <spi_get_byte>
    1e62:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1e64:	45 df       	rcall	.-374    	; 0x1cf0 <spi_get_byte>
    1e66:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	0d c0       	rjmp	.+26     	; 0x1e86 <read_sensor_info+0x7a>
	} else if (is_package_recieved()){
    1e6c:	c5 df       	rcall	.-118    	; 0x1df8 <is_package_recieved>
    1e6e:	88 23       	and	r24, r24
    1e70:	49 f0       	breq	.+18     	; 0x1e84 <read_sensor_info+0x78>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1e72:	3e df       	rcall	.-388    	; 0x1cf0 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1e74:	be 01       	movw	r22, r28
    1e76:	c8 01       	movw	r24, r16
    1e78:	c9 df       	rcall	.-110    	; 0x1e0c <read_sensor_info>
    1e7a:	05 c0       	rjmp	.+10     	; 0x1e86 <read_sensor_info+0x7a>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <read_sensor_info+0x7a>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
	}
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <read_sensor_info+0x7a>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
	
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret

00001e90 <stop>:


void stop()
{
    
    if (step==0)
    1e90:	80 91 18 03 	lds	r24, 0x0318
    1e94:	81 11       	cpse	r24, r1
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <stop+0x16>
    {
        setESC(2840);
    1e98:	88 e1       	ldi	r24, 0x18	; 24
    1e9a:	9b e0       	ldi	r25, 0x0B	; 11
    1e9c:	7e de       	rcall	.-772    	; 0x1b9a <setESC>
        setServo(MAXRIGHT);
    1e9e:	84 ee       	ldi	r24, 0xE4	; 228
    1ea0:	9c e0       	ldi	r25, 0x0C	; 12
    1ea2:	96 ce       	rjmp	.-724    	; 0x1bd0 <setServo>
    1ea4:	08 95       	ret
    }
    else if (step==1)
    1ea6:	80 91 18 03 	lds	r24, 0x0318
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	51 f4       	brne	.+20     	; 0x1ec2 <stop+0x32>
    {
		OCR3A = 1000;
    1eae:	88 ee       	ldi	r24, 0xE8	; 232
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	90 93 99 00 	sts	0x0099, r25
    1eb6:	80 93 98 00 	sts	0x0098, r24
		setServo(STRAIGHT);
    1eba:	8e e1       	ldi	r24, 0x1E	; 30
    1ebc:	9a e0       	ldi	r25, 0x0A	; 10
    1ebe:	88 ce       	rjmp	.-752    	; 0x1bd0 <setServo>
    1ec0:	08 95       	ret
	}
	else if (step ==2)
    1ec2:	80 91 18 03 	lds	r24, 0x0318
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	51 f4       	brne	.+20     	; 0x1ede <stop+0x4e>
	{
		OCR3A = 28000;
    1eca:	80 e6       	ldi	r24, 0x60	; 96
    1ecc:	9d e6       	ldi	r25, 0x6D	; 109
    1ece:	90 93 99 00 	sts	0x0099, r25
    1ed2:	80 93 98 00 	sts	0x0098, r24
        setServo(MAXLEFT);
    1ed6:	86 ee       	ldi	r24, 0xE6	; 230
    1ed8:	97 e0       	ldi	r25, 0x07	; 7
    1eda:	7a ce       	rjmp	.-780    	; 0x1bd0 <setServo>
    1edc:	08 95       	ret
    }
    else if (step==3)
    1ede:	80 91 18 03 	lds	r24, 0x0318
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	69 f4       	brne	.+26     	; 0x1f00 <stop+0x70>
    {
        setESC(NEUTRAL);
    1ee6:	8d ec       	ldi	r24, 0xCD	; 205
    1ee8:	9a e0       	ldi	r25, 0x0A	; 10
    1eea:	57 de       	rcall	.-850    	; 0x1b9a <setESC>
        setServo(STRAIGHT);
    1eec:	8e e1       	ldi	r24, 0x1E	; 30
    1eee:	9a e0       	ldi	r25, 0x0A	; 10
    1ef0:	6f de       	rcall	.-802    	; 0x1bd0 <setServo>
		OCR3A = 14399;
    1ef2:	8f e3       	ldi	r24, 0x3F	; 63
    1ef4:	98 e3       	ldi	r25, 0x38	; 56
    1ef6:	90 93 99 00 	sts	0x0099, r25
    1efa:	80 93 98 00 	sts	0x0098, r24
    1efe:	08 95       	ret
    }
    else if (step==4)
    1f00:	80 91 18 03 	lds	r24, 0x0318
    1f04:	84 30       	cpi	r24, 0x04	; 4
    1f06:	69 f4       	brne	.+26     	; 0x1f22 <stop+0x92>
    {
		OCR3A = 33000;
    1f08:	88 ee       	ldi	r24, 0xE8	; 232
    1f0a:	90 e8       	ldi	r25, 0x80	; 128
    1f0c:	90 93 99 00 	sts	0x0099, r25
    1f10:	80 93 98 00 	sts	0x0098, r24
        setESC(2840);
    1f14:	88 e1       	ldi	r24, 0x18	; 24
    1f16:	9b e0       	ldi	r25, 0x0B	; 11
    1f18:	40 de       	rcall	.-896    	; 0x1b9a <setESC>
        setServo(MAXLEFT);
    1f1a:	86 ee       	ldi	r24, 0xE6	; 230
    1f1c:	97 e0       	ldi	r25, 0x07	; 7
    1f1e:	58 ce       	rjmp	.-848    	; 0x1bd0 <setServo>
    1f20:	08 95       	ret
    }
	else if (step==5)
    1f22:	80 91 18 03 	lds	r24, 0x0318
    1f26:	85 30       	cpi	r24, 0x05	; 5
    1f28:	51 f4       	brne	.+20     	; 0x1f3e <stop+0xae>
	{
		OCR3A = 28000;
    1f2a:	80 e6       	ldi	r24, 0x60	; 96
    1f2c:	9d e6       	ldi	r25, 0x6D	; 109
    1f2e:	90 93 99 00 	sts	0x0099, r25
    1f32:	80 93 98 00 	sts	0x0098, r24
		setServo(MAXRIGHT);
    1f36:	84 ee       	ldi	r24, 0xE4	; 228
    1f38:	9c e0       	ldi	r25, 0x0C	; 12
    1f3a:	4a ce       	rjmp	.-876    	; 0x1bd0 <setServo>
    1f3c:	08 95       	ret
	}
	else if (step==6)
    1f3e:	80 91 18 03 	lds	r24, 0x0318
    1f42:	86 30       	cpi	r24, 0x06	; 6
    1f44:	51 f4       	brne	.+20     	; 0x1f5a <stop+0xca>
	{
		setServo(STRAIGHT);
    1f46:	8e e1       	ldi	r24, 0x1E	; 30
    1f48:	9a e0       	ldi	r25, 0x0A	; 10
    1f4a:	42 de       	rcall	.-892    	; 0x1bd0 <setServo>
		OCR3A = 28799;
    1f4c:	8f e7       	ldi	r24, 0x7F	; 127
    1f4e:	90 e7       	ldi	r25, 0x70	; 112
    1f50:	90 93 99 00 	sts	0x0099, r25
    1f54:	80 93 98 00 	sts	0x0098, r24
    1f58:	08 95       	ret
	}
	else if (step==7)
    1f5a:	80 91 18 03 	lds	r24, 0x0318
    1f5e:	87 30       	cpi	r24, 0x07	; 7
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <stop+0xd8>
	{
		setESC(NEUTRAL);
    1f62:	8d ec       	ldi	r24, 0xCD	; 205
    1f64:	9a e0       	ldi	r25, 0x0A	; 10
    1f66:	19 ce       	rjmp	.-974    	; 0x1b9a <setESC>
    1f68:	08 95       	ret

00001f6a <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	0b b6       	in	r0, 0x3b	; 59
    1f76:	0f 92       	push	r0
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	8f 93       	push	r24
    1f80:	9f 93       	push	r25
    1f82:	af 93       	push	r26
    1f84:	bf 93       	push	r27
    1f86:	ef 93       	push	r30
    1f88:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1f8a:	80 91 16 03 	lds	r24, 0x0316
    1f8e:	90 91 17 03 	lds	r25, 0x0317
    1f92:	80 34       	cpi	r24, 0x40	; 64
    1f94:	91 05       	cpc	r25, r1
    1f96:	31 f4       	brne	.+12     	; 0x1fa4 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 93 23 03 	sts	0x0323, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1f9e:	80 91 c6 00 	lds	r24, 0x00C6
    1fa2:	16 c0       	rjmp	.+44     	; 0x1fd0 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1fa4:	80 34       	cpi	r24, 0x40	; 64
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	e8 f4       	brcc	.+58     	; 0x1fe4 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1faa:	e4 e1       	ldi	r30, 0x14	; 20
    1fac:	f3 e0       	ldi	r31, 0x03	; 3
    1fae:	20 81       	ld	r18, Z
    1fb0:	31 81       	ldd	r19, Z+1	; 0x01
    1fb2:	40 91 c6 00 	lds	r20, 0x00C6
    1fb6:	d9 01       	movw	r26, r18
    1fb8:	ae 52       	subi	r26, 0x2E	; 46
    1fba:	bd 4f       	sbci	r27, 0xFD	; 253
    1fbc:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	31 83       	std	Z+1, r19	; 0x01
    1fc4:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	90 93 17 03 	sts	0x0317, r25
    1fcc:	80 93 16 03 	sts	0x0316, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1fd0:	80 91 16 03 	lds	r24, 0x0316
    1fd4:	90 91 17 03 	lds	r25, 0x0317
    1fd8:	80 34       	cpi	r24, 0x40	; 64
    1fda:	91 05       	cpc	r25, r1
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	80 93 21 03 	sts	0x0321, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1fe4:	80 91 14 03 	lds	r24, 0x0314
    1fe8:	90 91 15 03 	lds	r25, 0x0315
    1fec:	80 34       	cpi	r24, 0x40	; 64
    1fee:	91 05       	cpc	r25, r1
    1ff0:	21 f4       	brne	.+8      	; 0x1ffa <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1ff2:	10 92 15 03 	sts	0x0315, r1
    1ff6:	10 92 14 03 	sts	0x0314, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	80 93 20 03 	sts	0x0320, r24
}
    2000:	ff 91       	pop	r31
    2002:	ef 91       	pop	r30
    2004:	bf 91       	pop	r27
    2006:	af 91       	pop	r26
    2008:	9f 91       	pop	r25
    200a:	8f 91       	pop	r24
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0b be       	out	0x3b, r0	; 59
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <__vector_22>:




ISR(USART0_TX_vect)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	0b b6       	in	r0, 0x3b	; 59
    202c:	0f 92       	push	r0
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    2036:	80 91 d0 02 	lds	r24, 0x02D0
    203a:	90 91 d1 02 	lds	r25, 0x02D1
    203e:	80 34       	cpi	r24, 0x40	; 64
    2040:	91 05       	cpc	r25, r1
    2042:	19 f4       	brne	.+6      	; 0x204a <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    2044:	10 92 1f 03 	sts	0x031F, r1
    2048:	02 c0       	rjmp	.+4      	; 0x204e <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    204a:	89 2b       	or	r24, r25
    204c:	b9 f0       	breq	.+46     	; 0x207c <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    204e:	e0 91 cc 02 	lds	r30, 0x02CC
    2052:	f0 91 cd 02 	lds	r31, 0x02CD
    2056:	e4 57       	subi	r30, 0x74	; 116
    2058:	fd 4f       	sbci	r31, 0xFD	; 253
    205a:	80 81       	ld	r24, Z
    205c:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    2060:	ec ec       	ldi	r30, 0xCC	; 204
    2062:	f2 e0       	ldi	r31, 0x02	; 2
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    206e:	e0 ed       	ldi	r30, 0xD0	; 208
    2070:	f2 e0       	ldi	r31, 0x02	; 2
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    207c:	80 91 cc 02 	lds	r24, 0x02CC
    2080:	90 91 cd 02 	lds	r25, 0x02CD
    2084:	80 34       	cpi	r24, 0x40	; 64
    2086:	91 05       	cpc	r25, r1
    2088:	21 f4       	brne	.+8      	; 0x2092 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    208a:	10 92 cd 02 	sts	0x02CD, r1
    208e:	10 92 cc 02 	sts	0x02CC, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    2092:	80 91 d0 02 	lds	r24, 0x02D0
    2096:	90 91 d1 02 	lds	r25, 0x02D1
    209a:	89 2b       	or	r24, r25
    209c:	39 f4       	brne	.+14     	; 0x20ac <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    209e:	10 92 22 03 	sts	0x0322, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    20a2:	e1 ec       	ldi	r30, 0xC1	; 193
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 7b       	andi	r24, 0xBF	; 191
    20aa:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    20ac:	ff 91       	pop	r31
    20ae:	ef 91       	pop	r30
    20b0:	9f 91       	pop	r25
    20b2:	8f 91       	pop	r24
    20b4:	0f 90       	pop	r0
    20b6:	0b be       	out	0x3b, r0	; 59
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	0f 90       	pop	r0
    20be:	1f 90       	pop	r1
    20c0:	18 95       	reti

000020c2 <__subsf3>:
    20c2:	50 58       	subi	r21, 0x80	; 128

000020c4 <__addsf3>:
    20c4:	bb 27       	eor	r27, r27
    20c6:	aa 27       	eor	r26, r26
    20c8:	0e d0       	rcall	.+28     	; 0x20e6 <__addsf3x>
    20ca:	4d c1       	rjmp	.+666    	; 0x2366 <__fp_round>
    20cc:	3e d1       	rcall	.+636    	; 0x234a <__fp_pscA>
    20ce:	30 f0       	brcs	.+12     	; 0x20dc <__addsf3+0x18>
    20d0:	43 d1       	rcall	.+646    	; 0x2358 <__fp_pscB>
    20d2:	20 f0       	brcs	.+8      	; 0x20dc <__addsf3+0x18>
    20d4:	31 f4       	brne	.+12     	; 0x20e2 <__addsf3+0x1e>
    20d6:	9f 3f       	cpi	r25, 0xFF	; 255
    20d8:	11 f4       	brne	.+4      	; 0x20de <__addsf3+0x1a>
    20da:	1e f4       	brtc	.+6      	; 0x20e2 <__addsf3+0x1e>
    20dc:	33 c1       	rjmp	.+614    	; 0x2344 <__fp_nan>
    20de:	0e f4       	brtc	.+2      	; 0x20e2 <__addsf3+0x1e>
    20e0:	e0 95       	com	r30
    20e2:	e7 fb       	bst	r30, 7
    20e4:	29 c1       	rjmp	.+594    	; 0x2338 <__fp_inf>

000020e6 <__addsf3x>:
    20e6:	e9 2f       	mov	r30, r25
    20e8:	4f d1       	rcall	.+670    	; 0x2388 <__fp_split3>
    20ea:	80 f3       	brcs	.-32     	; 0x20cc <__addsf3+0x8>
    20ec:	ba 17       	cp	r27, r26
    20ee:	62 07       	cpc	r22, r18
    20f0:	73 07       	cpc	r23, r19
    20f2:	84 07       	cpc	r24, r20
    20f4:	95 07       	cpc	r25, r21
    20f6:	18 f0       	brcs	.+6      	; 0x20fe <__addsf3x+0x18>
    20f8:	71 f4       	brne	.+28     	; 0x2116 <__addsf3x+0x30>
    20fa:	9e f5       	brtc	.+102    	; 0x2162 <__addsf3x+0x7c>
    20fc:	67 c1       	rjmp	.+718    	; 0x23cc <__fp_zero>
    20fe:	0e f4       	brtc	.+2      	; 0x2102 <__addsf3x+0x1c>
    2100:	e0 95       	com	r30
    2102:	0b 2e       	mov	r0, r27
    2104:	ba 2f       	mov	r27, r26
    2106:	a0 2d       	mov	r26, r0
    2108:	0b 01       	movw	r0, r22
    210a:	b9 01       	movw	r22, r18
    210c:	90 01       	movw	r18, r0
    210e:	0c 01       	movw	r0, r24
    2110:	ca 01       	movw	r24, r20
    2112:	a0 01       	movw	r20, r0
    2114:	11 24       	eor	r1, r1
    2116:	ff 27       	eor	r31, r31
    2118:	59 1b       	sub	r21, r25
    211a:	99 f0       	breq	.+38     	; 0x2142 <__addsf3x+0x5c>
    211c:	59 3f       	cpi	r21, 0xF9	; 249
    211e:	50 f4       	brcc	.+20     	; 0x2134 <__addsf3x+0x4e>
    2120:	50 3e       	cpi	r21, 0xE0	; 224
    2122:	68 f1       	brcs	.+90     	; 0x217e <__addsf3x+0x98>
    2124:	1a 16       	cp	r1, r26
    2126:	f0 40       	sbci	r31, 0x00	; 0
    2128:	a2 2f       	mov	r26, r18
    212a:	23 2f       	mov	r18, r19
    212c:	34 2f       	mov	r19, r20
    212e:	44 27       	eor	r20, r20
    2130:	58 5f       	subi	r21, 0xF8	; 248
    2132:	f3 cf       	rjmp	.-26     	; 0x211a <__addsf3x+0x34>
    2134:	46 95       	lsr	r20
    2136:	37 95       	ror	r19
    2138:	27 95       	ror	r18
    213a:	a7 95       	ror	r26
    213c:	f0 40       	sbci	r31, 0x00	; 0
    213e:	53 95       	inc	r21
    2140:	c9 f7       	brne	.-14     	; 0x2134 <__addsf3x+0x4e>
    2142:	7e f4       	brtc	.+30     	; 0x2162 <__addsf3x+0x7c>
    2144:	1f 16       	cp	r1, r31
    2146:	ba 0b       	sbc	r27, r26
    2148:	62 0b       	sbc	r22, r18
    214a:	73 0b       	sbc	r23, r19
    214c:	84 0b       	sbc	r24, r20
    214e:	ba f0       	brmi	.+46     	; 0x217e <__addsf3x+0x98>
    2150:	91 50       	subi	r25, 0x01	; 1
    2152:	a1 f0       	breq	.+40     	; 0x217c <__addsf3x+0x96>
    2154:	ff 0f       	add	r31, r31
    2156:	bb 1f       	adc	r27, r27
    2158:	66 1f       	adc	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	c2 f7       	brpl	.-16     	; 0x2150 <__addsf3x+0x6a>
    2160:	0e c0       	rjmp	.+28     	; 0x217e <__addsf3x+0x98>
    2162:	ba 0f       	add	r27, r26
    2164:	62 1f       	adc	r22, r18
    2166:	73 1f       	adc	r23, r19
    2168:	84 1f       	adc	r24, r20
    216a:	48 f4       	brcc	.+18     	; 0x217e <__addsf3x+0x98>
    216c:	87 95       	ror	r24
    216e:	77 95       	ror	r23
    2170:	67 95       	ror	r22
    2172:	b7 95       	ror	r27
    2174:	f7 95       	ror	r31
    2176:	9e 3f       	cpi	r25, 0xFE	; 254
    2178:	08 f0       	brcs	.+2      	; 0x217c <__addsf3x+0x96>
    217a:	b3 cf       	rjmp	.-154    	; 0x20e2 <__addsf3+0x1e>
    217c:	93 95       	inc	r25
    217e:	88 0f       	add	r24, r24
    2180:	08 f0       	brcs	.+2      	; 0x2184 <__addsf3x+0x9e>
    2182:	99 27       	eor	r25, r25
    2184:	ee 0f       	add	r30, r30
    2186:	97 95       	ror	r25
    2188:	87 95       	ror	r24
    218a:	08 95       	ret

0000218c <__divsf3>:
    218c:	0c d0       	rcall	.+24     	; 0x21a6 <__divsf3x>
    218e:	eb c0       	rjmp	.+470    	; 0x2366 <__fp_round>
    2190:	e3 d0       	rcall	.+454    	; 0x2358 <__fp_pscB>
    2192:	40 f0       	brcs	.+16     	; 0x21a4 <__divsf3+0x18>
    2194:	da d0       	rcall	.+436    	; 0x234a <__fp_pscA>
    2196:	30 f0       	brcs	.+12     	; 0x21a4 <__divsf3+0x18>
    2198:	21 f4       	brne	.+8      	; 0x21a2 <__divsf3+0x16>
    219a:	5f 3f       	cpi	r21, 0xFF	; 255
    219c:	19 f0       	breq	.+6      	; 0x21a4 <__divsf3+0x18>
    219e:	cc c0       	rjmp	.+408    	; 0x2338 <__fp_inf>
    21a0:	51 11       	cpse	r21, r1
    21a2:	15 c1       	rjmp	.+554    	; 0x23ce <__fp_szero>
    21a4:	cf c0       	rjmp	.+414    	; 0x2344 <__fp_nan>

000021a6 <__divsf3x>:
    21a6:	f0 d0       	rcall	.+480    	; 0x2388 <__fp_split3>
    21a8:	98 f3       	brcs	.-26     	; 0x2190 <__divsf3+0x4>

000021aa <__divsf3_pse>:
    21aa:	99 23       	and	r25, r25
    21ac:	c9 f3       	breq	.-14     	; 0x21a0 <__divsf3+0x14>
    21ae:	55 23       	and	r21, r21
    21b0:	b1 f3       	breq	.-20     	; 0x219e <__divsf3+0x12>
    21b2:	95 1b       	sub	r25, r21
    21b4:	55 0b       	sbc	r21, r21
    21b6:	bb 27       	eor	r27, r27
    21b8:	aa 27       	eor	r26, r26
    21ba:	62 17       	cp	r22, r18
    21bc:	73 07       	cpc	r23, r19
    21be:	84 07       	cpc	r24, r20
    21c0:	38 f0       	brcs	.+14     	; 0x21d0 <__divsf3_pse+0x26>
    21c2:	9f 5f       	subi	r25, 0xFF	; 255
    21c4:	5f 4f       	sbci	r21, 0xFF	; 255
    21c6:	22 0f       	add	r18, r18
    21c8:	33 1f       	adc	r19, r19
    21ca:	44 1f       	adc	r20, r20
    21cc:	aa 1f       	adc	r26, r26
    21ce:	a9 f3       	breq	.-22     	; 0x21ba <__divsf3_pse+0x10>
    21d0:	33 d0       	rcall	.+102    	; 0x2238 <__divsf3_pse+0x8e>
    21d2:	0e 2e       	mov	r0, r30
    21d4:	3a f0       	brmi	.+14     	; 0x21e4 <__divsf3_pse+0x3a>
    21d6:	e0 e8       	ldi	r30, 0x80	; 128
    21d8:	30 d0       	rcall	.+96     	; 0x223a <__divsf3_pse+0x90>
    21da:	91 50       	subi	r25, 0x01	; 1
    21dc:	50 40       	sbci	r21, 0x00	; 0
    21de:	e6 95       	lsr	r30
    21e0:	00 1c       	adc	r0, r0
    21e2:	ca f7       	brpl	.-14     	; 0x21d6 <__divsf3_pse+0x2c>
    21e4:	29 d0       	rcall	.+82     	; 0x2238 <__divsf3_pse+0x8e>
    21e6:	fe 2f       	mov	r31, r30
    21e8:	27 d0       	rcall	.+78     	; 0x2238 <__divsf3_pse+0x8e>
    21ea:	66 0f       	add	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	bb 1f       	adc	r27, r27
    21f2:	26 17       	cp	r18, r22
    21f4:	37 07       	cpc	r19, r23
    21f6:	48 07       	cpc	r20, r24
    21f8:	ab 07       	cpc	r26, r27
    21fa:	b0 e8       	ldi	r27, 0x80	; 128
    21fc:	09 f0       	breq	.+2      	; 0x2200 <__divsf3_pse+0x56>
    21fe:	bb 0b       	sbc	r27, r27
    2200:	80 2d       	mov	r24, r0
    2202:	bf 01       	movw	r22, r30
    2204:	ff 27       	eor	r31, r31
    2206:	93 58       	subi	r25, 0x83	; 131
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	2a f0       	brmi	.+10     	; 0x2216 <__divsf3_pse+0x6c>
    220c:	9e 3f       	cpi	r25, 0xFE	; 254
    220e:	51 05       	cpc	r21, r1
    2210:	68 f0       	brcs	.+26     	; 0x222c <__divsf3_pse+0x82>
    2212:	92 c0       	rjmp	.+292    	; 0x2338 <__fp_inf>
    2214:	dc c0       	rjmp	.+440    	; 0x23ce <__fp_szero>
    2216:	5f 3f       	cpi	r21, 0xFF	; 255
    2218:	ec f3       	brlt	.-6      	; 0x2214 <__divsf3_pse+0x6a>
    221a:	98 3e       	cpi	r25, 0xE8	; 232
    221c:	dc f3       	brlt	.-10     	; 0x2214 <__divsf3_pse+0x6a>
    221e:	86 95       	lsr	r24
    2220:	77 95       	ror	r23
    2222:	67 95       	ror	r22
    2224:	b7 95       	ror	r27
    2226:	f7 95       	ror	r31
    2228:	9f 5f       	subi	r25, 0xFF	; 255
    222a:	c9 f7       	brne	.-14     	; 0x221e <__divsf3_pse+0x74>
    222c:	88 0f       	add	r24, r24
    222e:	91 1d       	adc	r25, r1
    2230:	96 95       	lsr	r25
    2232:	87 95       	ror	r24
    2234:	97 f9       	bld	r25, 7
    2236:	08 95       	ret
    2238:	e1 e0       	ldi	r30, 0x01	; 1
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	bb 1f       	adc	r27, r27
    2242:	62 17       	cp	r22, r18
    2244:	73 07       	cpc	r23, r19
    2246:	84 07       	cpc	r24, r20
    2248:	ba 07       	cpc	r27, r26
    224a:	20 f0       	brcs	.+8      	; 0x2254 <__divsf3_pse+0xaa>
    224c:	62 1b       	sub	r22, r18
    224e:	73 0b       	sbc	r23, r19
    2250:	84 0b       	sbc	r24, r20
    2252:	ba 0b       	sbc	r27, r26
    2254:	ee 1f       	adc	r30, r30
    2256:	88 f7       	brcc	.-30     	; 0x223a <__divsf3_pse+0x90>
    2258:	e0 95       	com	r30
    225a:	08 95       	ret

0000225c <__fixsfsi>:
    225c:	04 d0       	rcall	.+8      	; 0x2266 <__fixunssfsi>
    225e:	68 94       	set
    2260:	b1 11       	cpse	r27, r1
    2262:	b5 c0       	rjmp	.+362    	; 0x23ce <__fp_szero>
    2264:	08 95       	ret

00002266 <__fixunssfsi>:
    2266:	98 d0       	rcall	.+304    	; 0x2398 <__fp_splitA>
    2268:	88 f0       	brcs	.+34     	; 0x228c <__fixunssfsi+0x26>
    226a:	9f 57       	subi	r25, 0x7F	; 127
    226c:	90 f0       	brcs	.+36     	; 0x2292 <__fixunssfsi+0x2c>
    226e:	b9 2f       	mov	r27, r25
    2270:	99 27       	eor	r25, r25
    2272:	b7 51       	subi	r27, 0x17	; 23
    2274:	a0 f0       	brcs	.+40     	; 0x229e <__fixunssfsi+0x38>
    2276:	d1 f0       	breq	.+52     	; 0x22ac <__fixunssfsi+0x46>
    2278:	66 0f       	add	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	88 1f       	adc	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	1a f0       	brmi	.+6      	; 0x2288 <__fixunssfsi+0x22>
    2282:	ba 95       	dec	r27
    2284:	c9 f7       	brne	.-14     	; 0x2278 <__fixunssfsi+0x12>
    2286:	12 c0       	rjmp	.+36     	; 0x22ac <__fixunssfsi+0x46>
    2288:	b1 30       	cpi	r27, 0x01	; 1
    228a:	81 f0       	breq	.+32     	; 0x22ac <__fixunssfsi+0x46>
    228c:	9f d0       	rcall	.+318    	; 0x23cc <__fp_zero>
    228e:	b1 e0       	ldi	r27, 0x01	; 1
    2290:	08 95       	ret
    2292:	9c c0       	rjmp	.+312    	; 0x23cc <__fp_zero>
    2294:	67 2f       	mov	r22, r23
    2296:	78 2f       	mov	r23, r24
    2298:	88 27       	eor	r24, r24
    229a:	b8 5f       	subi	r27, 0xF8	; 248
    229c:	39 f0       	breq	.+14     	; 0x22ac <__fixunssfsi+0x46>
    229e:	b9 3f       	cpi	r27, 0xF9	; 249
    22a0:	cc f3       	brlt	.-14     	; 0x2294 <__fixunssfsi+0x2e>
    22a2:	86 95       	lsr	r24
    22a4:	77 95       	ror	r23
    22a6:	67 95       	ror	r22
    22a8:	b3 95       	inc	r27
    22aa:	d9 f7       	brne	.-10     	; 0x22a2 <__fixunssfsi+0x3c>
    22ac:	3e f4       	brtc	.+14     	; 0x22bc <__fixunssfsi+0x56>
    22ae:	90 95       	com	r25
    22b0:	80 95       	com	r24
    22b2:	70 95       	com	r23
    22b4:	61 95       	neg	r22
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	08 95       	ret

000022be <__floatunsisf>:
    22be:	e8 94       	clt
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <__floatsisf+0x12>

000022c2 <__floatsisf>:
    22c2:	97 fb       	bst	r25, 7
    22c4:	3e f4       	brtc	.+14     	; 0x22d4 <__floatsisf+0x12>
    22c6:	90 95       	com	r25
    22c8:	80 95       	com	r24
    22ca:	70 95       	com	r23
    22cc:	61 95       	neg	r22
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	99 23       	and	r25, r25
    22d6:	a9 f0       	breq	.+42     	; 0x2302 <__floatsisf+0x40>
    22d8:	f9 2f       	mov	r31, r25
    22da:	96 e9       	ldi	r25, 0x96	; 150
    22dc:	bb 27       	eor	r27, r27
    22de:	93 95       	inc	r25
    22e0:	f6 95       	lsr	r31
    22e2:	87 95       	ror	r24
    22e4:	77 95       	ror	r23
    22e6:	67 95       	ror	r22
    22e8:	b7 95       	ror	r27
    22ea:	f1 11       	cpse	r31, r1
    22ec:	f8 cf       	rjmp	.-16     	; 0x22de <__floatsisf+0x1c>
    22ee:	fa f4       	brpl	.+62     	; 0x232e <__floatsisf+0x6c>
    22f0:	bb 0f       	add	r27, r27
    22f2:	11 f4       	brne	.+4      	; 0x22f8 <__floatsisf+0x36>
    22f4:	60 ff       	sbrs	r22, 0
    22f6:	1b c0       	rjmp	.+54     	; 0x232e <__floatsisf+0x6c>
    22f8:	6f 5f       	subi	r22, 0xFF	; 255
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	8f 4f       	sbci	r24, 0xFF	; 255
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	16 c0       	rjmp	.+44     	; 0x232e <__floatsisf+0x6c>
    2302:	88 23       	and	r24, r24
    2304:	11 f0       	breq	.+4      	; 0x230a <__floatsisf+0x48>
    2306:	96 e9       	ldi	r25, 0x96	; 150
    2308:	11 c0       	rjmp	.+34     	; 0x232c <__floatsisf+0x6a>
    230a:	77 23       	and	r23, r23
    230c:	21 f0       	breq	.+8      	; 0x2316 <__floatsisf+0x54>
    230e:	9e e8       	ldi	r25, 0x8E	; 142
    2310:	87 2f       	mov	r24, r23
    2312:	76 2f       	mov	r23, r22
    2314:	05 c0       	rjmp	.+10     	; 0x2320 <__floatsisf+0x5e>
    2316:	66 23       	and	r22, r22
    2318:	71 f0       	breq	.+28     	; 0x2336 <__floatsisf+0x74>
    231a:	96 e8       	ldi	r25, 0x86	; 134
    231c:	86 2f       	mov	r24, r22
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	2a f0       	brmi	.+10     	; 0x232e <__floatsisf+0x6c>
    2324:	9a 95       	dec	r25
    2326:	66 0f       	add	r22, r22
    2328:	77 1f       	adc	r23, r23
    232a:	88 1f       	adc	r24, r24
    232c:	da f7       	brpl	.-10     	; 0x2324 <__floatsisf+0x62>
    232e:	88 0f       	add	r24, r24
    2330:	96 95       	lsr	r25
    2332:	87 95       	ror	r24
    2334:	97 f9       	bld	r25, 7
    2336:	08 95       	ret

00002338 <__fp_inf>:
    2338:	97 f9       	bld	r25, 7
    233a:	9f 67       	ori	r25, 0x7F	; 127
    233c:	80 e8       	ldi	r24, 0x80	; 128
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	08 95       	ret

00002344 <__fp_nan>:
    2344:	9f ef       	ldi	r25, 0xFF	; 255
    2346:	80 ec       	ldi	r24, 0xC0	; 192
    2348:	08 95       	ret

0000234a <__fp_pscA>:
    234a:	00 24       	eor	r0, r0
    234c:	0a 94       	dec	r0
    234e:	16 16       	cp	r1, r22
    2350:	17 06       	cpc	r1, r23
    2352:	18 06       	cpc	r1, r24
    2354:	09 06       	cpc	r0, r25
    2356:	08 95       	ret

00002358 <__fp_pscB>:
    2358:	00 24       	eor	r0, r0
    235a:	0a 94       	dec	r0
    235c:	12 16       	cp	r1, r18
    235e:	13 06       	cpc	r1, r19
    2360:	14 06       	cpc	r1, r20
    2362:	05 06       	cpc	r0, r21
    2364:	08 95       	ret

00002366 <__fp_round>:
    2366:	09 2e       	mov	r0, r25
    2368:	03 94       	inc	r0
    236a:	00 0c       	add	r0, r0
    236c:	11 f4       	brne	.+4      	; 0x2372 <__fp_round+0xc>
    236e:	88 23       	and	r24, r24
    2370:	52 f0       	brmi	.+20     	; 0x2386 <__fp_round+0x20>
    2372:	bb 0f       	add	r27, r27
    2374:	40 f4       	brcc	.+16     	; 0x2386 <__fp_round+0x20>
    2376:	bf 2b       	or	r27, r31
    2378:	11 f4       	brne	.+4      	; 0x237e <__fp_round+0x18>
    237a:	60 ff       	sbrs	r22, 0
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <__fp_round+0x20>
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	8f 4f       	sbci	r24, 0xFF	; 255
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	08 95       	ret

00002388 <__fp_split3>:
    2388:	57 fd       	sbrc	r21, 7
    238a:	90 58       	subi	r25, 0x80	; 128
    238c:	44 0f       	add	r20, r20
    238e:	55 1f       	adc	r21, r21
    2390:	59 f0       	breq	.+22     	; 0x23a8 <__fp_splitA+0x10>
    2392:	5f 3f       	cpi	r21, 0xFF	; 255
    2394:	71 f0       	breq	.+28     	; 0x23b2 <__fp_splitA+0x1a>
    2396:	47 95       	ror	r20

00002398 <__fp_splitA>:
    2398:	88 0f       	add	r24, r24
    239a:	97 fb       	bst	r25, 7
    239c:	99 1f       	adc	r25, r25
    239e:	61 f0       	breq	.+24     	; 0x23b8 <__fp_splitA+0x20>
    23a0:	9f 3f       	cpi	r25, 0xFF	; 255
    23a2:	79 f0       	breq	.+30     	; 0x23c2 <__fp_splitA+0x2a>
    23a4:	87 95       	ror	r24
    23a6:	08 95       	ret
    23a8:	12 16       	cp	r1, r18
    23aa:	13 06       	cpc	r1, r19
    23ac:	14 06       	cpc	r1, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	f2 cf       	rjmp	.-28     	; 0x2396 <__fp_split3+0xe>
    23b2:	46 95       	lsr	r20
    23b4:	f1 df       	rcall	.-30     	; 0x2398 <__fp_splitA>
    23b6:	08 c0       	rjmp	.+16     	; 0x23c8 <__fp_splitA+0x30>
    23b8:	16 16       	cp	r1, r22
    23ba:	17 06       	cpc	r1, r23
    23bc:	18 06       	cpc	r1, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	f1 cf       	rjmp	.-30     	; 0x23a4 <__fp_splitA+0xc>
    23c2:	86 95       	lsr	r24
    23c4:	71 05       	cpc	r23, r1
    23c6:	61 05       	cpc	r22, r1
    23c8:	08 94       	sec
    23ca:	08 95       	ret

000023cc <__fp_zero>:
    23cc:	e8 94       	clt

000023ce <__fp_szero>:
    23ce:	bb 27       	eor	r27, r27
    23d0:	66 27       	eor	r22, r22
    23d2:	77 27       	eor	r23, r23
    23d4:	cb 01       	movw	r24, r22
    23d6:	97 f9       	bld	r25, 7
    23d8:	08 95       	ret

000023da <__mulsf3>:
    23da:	0b d0       	rcall	.+22     	; 0x23f2 <__mulsf3x>
    23dc:	c4 cf       	rjmp	.-120    	; 0x2366 <__fp_round>
    23de:	b5 df       	rcall	.-150    	; 0x234a <__fp_pscA>
    23e0:	28 f0       	brcs	.+10     	; 0x23ec <__mulsf3+0x12>
    23e2:	ba df       	rcall	.-140    	; 0x2358 <__fp_pscB>
    23e4:	18 f0       	brcs	.+6      	; 0x23ec <__mulsf3+0x12>
    23e6:	95 23       	and	r25, r21
    23e8:	09 f0       	breq	.+2      	; 0x23ec <__mulsf3+0x12>
    23ea:	a6 cf       	rjmp	.-180    	; 0x2338 <__fp_inf>
    23ec:	ab cf       	rjmp	.-170    	; 0x2344 <__fp_nan>
    23ee:	11 24       	eor	r1, r1
    23f0:	ee cf       	rjmp	.-36     	; 0x23ce <__fp_szero>

000023f2 <__mulsf3x>:
    23f2:	ca df       	rcall	.-108    	; 0x2388 <__fp_split3>
    23f4:	a0 f3       	brcs	.-24     	; 0x23de <__mulsf3+0x4>

000023f6 <__mulsf3_pse>:
    23f6:	95 9f       	mul	r25, r21
    23f8:	d1 f3       	breq	.-12     	; 0x23ee <__mulsf3+0x14>
    23fa:	95 0f       	add	r25, r21
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	55 1f       	adc	r21, r21
    2400:	62 9f       	mul	r22, r18
    2402:	f0 01       	movw	r30, r0
    2404:	72 9f       	mul	r23, r18
    2406:	bb 27       	eor	r27, r27
    2408:	f0 0d       	add	r31, r0
    240a:	b1 1d       	adc	r27, r1
    240c:	63 9f       	mul	r22, r19
    240e:	aa 27       	eor	r26, r26
    2410:	f0 0d       	add	r31, r0
    2412:	b1 1d       	adc	r27, r1
    2414:	aa 1f       	adc	r26, r26
    2416:	64 9f       	mul	r22, r20
    2418:	66 27       	eor	r22, r22
    241a:	b0 0d       	add	r27, r0
    241c:	a1 1d       	adc	r26, r1
    241e:	66 1f       	adc	r22, r22
    2420:	82 9f       	mul	r24, r18
    2422:	22 27       	eor	r18, r18
    2424:	b0 0d       	add	r27, r0
    2426:	a1 1d       	adc	r26, r1
    2428:	62 1f       	adc	r22, r18
    242a:	73 9f       	mul	r23, r19
    242c:	b0 0d       	add	r27, r0
    242e:	a1 1d       	adc	r26, r1
    2430:	62 1f       	adc	r22, r18
    2432:	83 9f       	mul	r24, r19
    2434:	a0 0d       	add	r26, r0
    2436:	61 1d       	adc	r22, r1
    2438:	22 1f       	adc	r18, r18
    243a:	74 9f       	mul	r23, r20
    243c:	33 27       	eor	r19, r19
    243e:	a0 0d       	add	r26, r0
    2440:	61 1d       	adc	r22, r1
    2442:	23 1f       	adc	r18, r19
    2444:	84 9f       	mul	r24, r20
    2446:	60 0d       	add	r22, r0
    2448:	21 1d       	adc	r18, r1
    244a:	82 2f       	mov	r24, r18
    244c:	76 2f       	mov	r23, r22
    244e:	6a 2f       	mov	r22, r26
    2450:	11 24       	eor	r1, r1
    2452:	9f 57       	subi	r25, 0x7F	; 127
    2454:	50 40       	sbci	r21, 0x00	; 0
    2456:	8a f0       	brmi	.+34     	; 0x247a <__mulsf3_pse+0x84>
    2458:	e1 f0       	breq	.+56     	; 0x2492 <__mulsf3_pse+0x9c>
    245a:	88 23       	and	r24, r24
    245c:	4a f0       	brmi	.+18     	; 0x2470 <__mulsf3_pse+0x7a>
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	bb 1f       	adc	r27, r27
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	91 50       	subi	r25, 0x01	; 1
    246c:	50 40       	sbci	r21, 0x00	; 0
    246e:	a9 f7       	brne	.-22     	; 0x245a <__mulsf3_pse+0x64>
    2470:	9e 3f       	cpi	r25, 0xFE	; 254
    2472:	51 05       	cpc	r21, r1
    2474:	70 f0       	brcs	.+28     	; 0x2492 <__mulsf3_pse+0x9c>
    2476:	60 cf       	rjmp	.-320    	; 0x2338 <__fp_inf>
    2478:	aa cf       	rjmp	.-172    	; 0x23ce <__fp_szero>
    247a:	5f 3f       	cpi	r21, 0xFF	; 255
    247c:	ec f3       	brlt	.-6      	; 0x2478 <__mulsf3_pse+0x82>
    247e:	98 3e       	cpi	r25, 0xE8	; 232
    2480:	dc f3       	brlt	.-10     	; 0x2478 <__mulsf3_pse+0x82>
    2482:	86 95       	lsr	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	b7 95       	ror	r27
    248a:	f7 95       	ror	r31
    248c:	e7 95       	ror	r30
    248e:	9f 5f       	subi	r25, 0xFF	; 255
    2490:	c1 f7       	brne	.-16     	; 0x2482 <__mulsf3_pse+0x8c>
    2492:	fe 2b       	or	r31, r30
    2494:	88 0f       	add	r24, r24
    2496:	91 1d       	adc	r25, r1
    2498:	96 95       	lsr	r25
    249a:	87 95       	ror	r24
    249c:	97 f9       	bld	r25, 7
    249e:	08 95       	ret

000024a0 <__divmodhi4>:
    24a0:	97 fb       	bst	r25, 7
    24a2:	07 2e       	mov	r0, r23
    24a4:	16 f4       	brtc	.+4      	; 0x24aa <__divmodhi4+0xa>
    24a6:	00 94       	com	r0
    24a8:	06 d0       	rcall	.+12     	; 0x24b6 <__divmodhi4_neg1>
    24aa:	77 fd       	sbrc	r23, 7
    24ac:	08 d0       	rcall	.+16     	; 0x24be <__divmodhi4_neg2>
    24ae:	0b d0       	rcall	.+22     	; 0x24c6 <__udivmodhi4>
    24b0:	07 fc       	sbrc	r0, 7
    24b2:	05 d0       	rcall	.+10     	; 0x24be <__divmodhi4_neg2>
    24b4:	3e f4       	brtc	.+14     	; 0x24c4 <__divmodhi4_exit>

000024b6 <__divmodhi4_neg1>:
    24b6:	90 95       	com	r25
    24b8:	81 95       	neg	r24
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	08 95       	ret

000024be <__divmodhi4_neg2>:
    24be:	70 95       	com	r23
    24c0:	61 95       	neg	r22
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255

000024c4 <__divmodhi4_exit>:
    24c4:	08 95       	ret

000024c6 <__udivmodhi4>:
    24c6:	aa 1b       	sub	r26, r26
    24c8:	bb 1b       	sub	r27, r27
    24ca:	51 e1       	ldi	r21, 0x11	; 17
    24cc:	07 c0       	rjmp	.+14     	; 0x24dc <__udivmodhi4_ep>

000024ce <__udivmodhi4_loop>:
    24ce:	aa 1f       	adc	r26, r26
    24d0:	bb 1f       	adc	r27, r27
    24d2:	a6 17       	cp	r26, r22
    24d4:	b7 07       	cpc	r27, r23
    24d6:	10 f0       	brcs	.+4      	; 0x24dc <__udivmodhi4_ep>
    24d8:	a6 1b       	sub	r26, r22
    24da:	b7 0b       	sbc	r27, r23

000024dc <__udivmodhi4_ep>:
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	5a 95       	dec	r21
    24e2:	a9 f7       	brne	.-22     	; 0x24ce <__udivmodhi4_loop>
    24e4:	80 95       	com	r24
    24e6:	90 95       	com	r25
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	08 95       	ret

000024ee <strcpy>:
    24ee:	fb 01       	movw	r30, r22
    24f0:	dc 01       	movw	r26, r24
    24f2:	01 90       	ld	r0, Z+
    24f4:	0d 92       	st	X+, r0
    24f6:	00 20       	and	r0, r0
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <strcpy+0x4>
    24fa:	08 95       	ret

000024fc <_exit>:
    24fc:	f8 94       	cli

000024fe <__stop_program>:
    24fe:	ff cf       	rjmp	.-2      	; 0x24fe <__stop_program>
