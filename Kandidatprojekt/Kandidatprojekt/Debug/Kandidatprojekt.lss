
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000016b0  00001744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080019c  0080019c  000017e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014f5  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00002e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018df  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00004e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010a89  00000000  00000000  000051b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cd8  00000000  00000000  00015c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00016911  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000380b  00000000  00000000  00016a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	d0 c7       	rjmp	.+4000   	; 0xfea <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_22>
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c7       	rjmp	.+3760   	; 0xf22 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 eb       	ldi	r30, 0xB0	; 176
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 39       	cpi	r26, 0x9C	; 156
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac e9       	ldi	r26, 0x9C	; 156
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 36       	cpi	r26, 0x61	; 97
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ba d7       	rcall	.+3956   	; 0x1038 <main>
      c4:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_steering>:
 * Output: speed, (PWM counter)
 */
void FLC_steering(a, e)
int a;
int e;
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c0 59       	subi	r28, 0x90	; 144
      f4:	d2 40       	sbci	r29, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
	// Declaration of I/Os
	struct io_type error;		// input 1
	struct io_type angle;       // input 2
	struct io_type servo;         // output
	struct rule_type rule1;		// first rule in rule base
    strcpy(error.name, "error");
     100:	26 e0       	ldi	r18, 0x06	; 6
     102:	e0 e0       	ldi	r30, 0x00	; 0
     104:	f1 e0       	ldi	r31, 0x01	; 1
     106:	de 01       	movw	r26, r28
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	01 90       	ld	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	2a 95       	dec	r18
     110:	e1 f7       	brne	.-8      	; 0x10a <FLC_steering+0x40>
    strcpy(angle.name, "angle");
     112:	7e 01       	movw	r14, r28
     114:	11 e1       	ldi	r17, 0x11	; 17
     116:	e1 0e       	add	r14, r17
     118:	f1 1c       	adc	r15, r1
     11a:	26 e0       	ldi	r18, 0x06	; 6
     11c:	e6 e0       	ldi	r30, 0x06	; 6
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	d7 01       	movw	r26, r14
     122:	01 90       	ld	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	2a 95       	dec	r18
     128:	e1 f7       	brne	.-8      	; 0x122 <FLC_steering+0x58>
    strcpy(servo.name, "servo");
     12a:	26 e0       	ldi	r18, 0x06	; 6
     12c:	ec e0       	ldi	r30, 0x0C	; 12
     12e:	f1 e0       	ldi	r31, 0x01	; 1
     130:	de 01       	movw	r26, r28
     132:	91 96       	adiw	r26, 0x21	; 33
     134:	01 90       	ld	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	2a 95       	dec	r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <FLC_steering+0x6a>
	
	error.value = e;
     13c:	7c 87       	std	Y+12, r23	; 0x0c
     13e:	6b 87       	std	Y+11, r22	; 0x0b
	angle.value = a;
     140:	9c 8f       	std	Y+28, r25	; 0x1c
     142:	8b 8f       	std	Y+27, r24	; 0x1b
     * MF SlLeft:				[2670 2770 2820 2920]
     * MF left:				    [2840 2940 2950 3050]
	 * MF shLeft:				[2950 3050 3060 3061]
     */
    struct mf_type shLeft;
    strcpy(shLeft.name, "shLeft");
     144:	87 e0       	ldi	r24, 0x07	; 7
     146:	e2 e1       	ldi	r30, 0x12	; 18
     148:	f1 e0       	ldi	r31, 0x01	; 1
     14a:	de 01       	movw	r26, r28
     14c:	d7 96       	adiw	r26, 0x37	; 55
     14e:	01 90       	ld	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	8a 95       	dec	r24
     154:	e1 f7       	brne	.-8      	; 0x14e <FLC_steering+0x84>
    shLeft.value = 0;
     156:	23 96       	adiw	r28, 0x03	; 3
     158:	1f ae       	std	Y+63, r1	; 0x3f
     15a:	1e ae       	std	Y+62, r1	; 0x3e
     15c:	23 97       	sbiw	r28, 0x03	; 3
    shLeft.point1 = 2950;
     15e:	66 e8       	ldi	r22, 0x86	; 134
     160:	7b e0       	ldi	r23, 0x0B	; 11
     162:	25 96       	adiw	r28, 0x05	; 5
     164:	7f af       	std	Y+63, r23	; 0x3f
     166:	6e af       	std	Y+62, r22	; 0x3e
     168:	25 97       	sbiw	r28, 0x05	; 5
    shLeft.point2 = 3061;
     16a:	0f 2e       	mov	r0, r31
     16c:	f5 ef       	ldi	r31, 0xF5	; 245
     16e:	af 2e       	mov	r10, r31
     170:	fb e0       	ldi	r31, 0x0B	; 11
     172:	bf 2e       	mov	r11, r31
     174:	f0 2d       	mov	r31, r0
     176:	27 96       	adiw	r28, 0x07	; 7
     178:	bf ae       	std	Y+63, r11	; 0x3f
     17a:	ae ae       	std	Y+62, r10	; 0x3e
     17c:	27 97       	sbiw	r28, 0x07	; 7
    shLeft.slope1 = 1;
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	29 96       	adiw	r28, 0x09	; 9
     184:	1f af       	std	Y+63, r17	; 0x3f
     186:	0e af       	std	Y+62, r16	; 0x3e
     188:	29 97       	sbiw	r28, 0x09	; 9
    shLeft.slope2 = 100;
     18a:	24 e6       	ldi	r18, 0x64	; 100
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	2b 96       	adiw	r28, 0x0b	; 11
     190:	3f af       	std	Y+63, r19	; 0x3f
     192:	2e af       	std	Y+62, r18	; 0x3e
     194:	2b 97       	sbiw	r28, 0x0b	; 11
    shLeft.next = NULL;
     196:	2d 96       	adiw	r28, 0x0d	; 13
     198:	1f ae       	std	Y+63, r1	; 0x3f
     19a:	1e ae       	std	Y+62, r1	; 0x3e
     19c:	2d 97       	sbiw	r28, 0x0d	; 13
    
    struct mf_type left;
    strcpy(left.name, "left");
     19e:	85 e0       	ldi	r24, 0x05	; 5
     1a0:	e9 e1       	ldi	r30, 0x19	; 25
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	de 01       	movw	r26, r28
     1a6:	a3 5b       	subi	r26, 0xB3	; 179
     1a8:	bf 4f       	sbci	r27, 0xFF	; 255
     1aa:	01 90       	ld	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	8a 95       	dec	r24
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <FLC_steering+0xe0>
    left.value = 0;
     1b2:	69 96       	adiw	r28, 0x19	; 25
     1b4:	1f ae       	std	Y+63, r1	; 0x3f
     1b6:	1e ae       	std	Y+62, r1	; 0x3e
     1b8:	69 97       	sbiw	r28, 0x19	; 25
    left.point1 = 2840;
     1ba:	48 e1       	ldi	r20, 0x18	; 24
     1bc:	5b e0       	ldi	r21, 0x0B	; 11
     1be:	6b 96       	adiw	r28, 0x1b	; 27
     1c0:	5f af       	std	Y+63, r21	; 0x3f
     1c2:	4e af       	std	Y+62, r20	; 0x3e
     1c4:	6b 97       	sbiw	r28, 0x1b	; 27
    left.point2 = 3050;
     1c6:	8a ee       	ldi	r24, 0xEA	; 234
     1c8:	9b e0       	ldi	r25, 0x0B	; 11
     1ca:	6d 96       	adiw	r28, 0x1d	; 29
     1cc:	9f af       	std	Y+63, r25	; 0x3f
     1ce:	8e af       	std	Y+62, r24	; 0x3e
     1d0:	6d 97       	sbiw	r28, 0x1d	; 29
    left.slope1 = 1;
     1d2:	6f 96       	adiw	r28, 0x1f	; 31
     1d4:	1f af       	std	Y+63, r17	; 0x3f
     1d6:	0e af       	std	Y+62, r16	; 0x3e
     1d8:	6f 97       	sbiw	r28, 0x1f	; 31
    left.slope2 = 1;
     1da:	a1 96       	adiw	r28, 0x21	; 33
     1dc:	1f af       	std	Y+63, r17	; 0x3f
     1de:	0e af       	std	Y+62, r16	; 0x3e
     1e0:	a1 97       	sbiw	r28, 0x21	; 33
    left.next = &shLeft;
     1e2:	a7 e3       	ldi	r26, 0x37	; 55
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	ac 0f       	add	r26, r28
     1e8:	bd 1f       	adc	r27, r29
     1ea:	a3 96       	adiw	r28, 0x23	; 35
     1ec:	bf af       	std	Y+63, r27	; 0x3f
     1ee:	ae af       	std	Y+62, r26	; 0x3e
     1f0:	a3 97       	sbiw	r28, 0x23	; 35
    
    
    struct mf_type slLeft;
    strcpy(slLeft.name, "slLeft");
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	ee e1       	ldi	r30, 0x1E	; 30
     1f6:	f1 e0       	ldi	r31, 0x01	; 1
     1f8:	9c 96       	adiw	r26, 0x2c	; 44
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <FLC_steering+0x130>
    slLeft.value = 0;
     202:	af 96       	adiw	r28, 0x2f	; 47
     204:	1f ae       	std	Y+63, r1	; 0x3f
     206:	1e ae       	std	Y+62, r1	; 0x3e
     208:	af 97       	sbiw	r28, 0x2f	; 47
    slLeft.point1 = 2670;
     20a:	ee e6       	ldi	r30, 0x6E	; 110
     20c:	fa e0       	ldi	r31, 0x0A	; 10
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	ff af       	std	Y+63, r31	; 0x3f
     212:	ee af       	std	Y+62, r30	; 0x3e
     214:	e1 97       	sbiw	r28, 0x31	; 49
    slLeft.point2 = 2920;
     216:	0f 2e       	mov	r0, r31
     218:	f8 e6       	ldi	r31, 0x68	; 104
     21a:	cf 2e       	mov	r12, r31
     21c:	fb e0       	ldi	r31, 0x0B	; 11
     21e:	df 2e       	mov	r13, r31
     220:	f0 2d       	mov	r31, r0
     222:	e3 96       	adiw	r28, 0x33	; 51
     224:	df ae       	std	Y+63, r13	; 0x3f
     226:	ce ae       	std	Y+62, r12	; 0x3e
     228:	e3 97       	sbiw	r28, 0x33	; 51
    slLeft.slope1 = 1;
     22a:	e5 96       	adiw	r28, 0x35	; 53
     22c:	1f af       	std	Y+63, r17	; 0x3f
     22e:	0e af       	std	Y+62, r16	; 0x3e
     230:	e5 97       	sbiw	r28, 0x35	; 53
    slLeft.slope2 = 1;
     232:	e7 96       	adiw	r28, 0x37	; 55
     234:	1f af       	std	Y+63, r17	; 0x3f
     236:	0e af       	std	Y+62, r16	; 0x3e
     238:	e7 97       	sbiw	r28, 0x37	; 55
    slLeft.next = &left;
     23a:	2d e4       	ldi	r18, 0x4D	; 77
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	2c 0f       	add	r18, r28
     240:	3d 1f       	adc	r19, r29
     242:	e9 96       	adiw	r28, 0x39	; 57
     244:	3f af       	std	Y+63, r19	; 0x3f
     246:	2e af       	std	Y+62, r18	; 0x3e
     248:	e9 97       	sbiw	r28, 0x39	; 57
    
    
    struct mf_type straight;
    strcpy(straight.name, "straight");
     24a:	6e 01       	movw	r12, r28
     24c:	39 e7       	ldi	r19, 0x79	; 121
     24e:	c3 0e       	add	r12, r19
     250:	d1 1c       	adc	r13, r1
     252:	89 e0       	ldi	r24, 0x09	; 9
     254:	e5 e2       	ldi	r30, 0x25	; 37
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	d6 01       	movw	r26, r12
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	8a 95       	dec	r24
     260:	e1 f7       	brne	.-8      	; 0x25a <FLC_steering+0x190>
    straight.value = 0;
     262:	d6 01       	movw	r26, r12
     264:	1b 96       	adiw	r26, 0x0b	; 11
     266:	1c 92       	st	X, r1
     268:	1e 92       	st	-X, r1
     26a:	1a 97       	sbiw	r26, 0x0a	; 10
    straight.point1 = 2540;
     26c:	ec ee       	ldi	r30, 0xEC	; 236
     26e:	f9 e0       	ldi	r31, 0x09	; 9
     270:	1d 96       	adiw	r26, 0x0d	; 13
     272:	fc 93       	st	X, r31
     274:	ee 93       	st	-X, r30
     276:	1c 97       	sbiw	r26, 0x0c	; 12
    straight.point2 = 2780;
     278:	2c ed       	ldi	r18, 0xDC	; 220
     27a:	3a e0       	ldi	r19, 0x0A	; 10
     27c:	1f 96       	adiw	r26, 0x0f	; 15
     27e:	3c 93       	st	X, r19
     280:	2e 93       	st	-X, r18
     282:	1e 97       	sbiw	r26, 0x0e	; 14
    straight.slope1 = 1;
     284:	51 96       	adiw	r26, 0x11	; 17
     286:	1c 93       	st	X, r17
     288:	0e 93       	st	-X, r16
     28a:	50 97       	sbiw	r26, 0x10	; 16
    straight.slope2 = 1;
     28c:	53 96       	adiw	r26, 0x13	; 19
     28e:	1c 93       	st	X, r17
     290:	0e 93       	st	-X, r16
     292:	52 97       	sbiw	r26, 0x12	; 18
    straight.next = &slLeft;
     294:	43 e6       	ldi	r20, 0x63	; 99
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	4c 0f       	add	r20, r28
     29a:	5d 1f       	adc	r21, r29
     29c:	55 96       	adiw	r26, 0x15	; 21
     29e:	5c 93       	st	X, r21
     2a0:	4e 93       	st	-X, r20
     2a2:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type slRight;
	strcpy(slRight.name, "slRight");
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	ee e2       	ldi	r30, 0x2E	; 46
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	56 96       	adiw	r26, 0x16	; 22
     2ac:	01 90       	ld	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	8a 95       	dec	r24
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <FLC_steering+0x1e2>
	slRight.value = 0;
     2b4:	c7 56       	subi	r28, 0x67	; 103
     2b6:	df 4f       	sbci	r29, 0xFF	; 255
     2b8:	19 82       	std	Y+1, r1	; 0x01
     2ba:	18 82       	st	Y, r1
     2bc:	c9 59       	subi	r28, 0x99	; 153
     2be:	d0 40       	sbci	r29, 0x00	; 0
	slRight.point1 = 2400;
     2c0:	80 e6       	ldi	r24, 0x60	; 96
     2c2:	99 e0       	ldi	r25, 0x09	; 9
     2c4:	c5 56       	subi	r28, 0x65	; 101
     2c6:	df 4f       	sbci	r29, 0xFF	; 255
     2c8:	99 83       	std	Y+1, r25	; 0x01
     2ca:	88 83       	st	Y, r24
     2cc:	cb 59       	subi	r28, 0x9B	; 155
     2ce:	d0 40       	sbci	r29, 0x00	; 0
	slRight.point2 = 2650;
     2d0:	aa e5       	ldi	r26, 0x5A	; 90
     2d2:	ba e0       	ldi	r27, 0x0A	; 10
     2d4:	c3 56       	subi	r28, 0x63	; 99
     2d6:	df 4f       	sbci	r29, 0xFF	; 255
     2d8:	b9 83       	std	Y+1, r27	; 0x01
     2da:	a8 83       	st	Y, r26
     2dc:	cd 59       	subi	r28, 0x9D	; 157
     2de:	d0 40       	sbci	r29, 0x00	; 0
	slRight.slope1 = 1;
     2e0:	c1 56       	subi	r28, 0x61	; 97
     2e2:	df 4f       	sbci	r29, 0xFF	; 255
     2e4:	19 83       	std	Y+1, r17	; 0x01
     2e6:	08 83       	st	Y, r16
     2e8:	cf 59       	subi	r28, 0x9F	; 159
     2ea:	d0 40       	sbci	r29, 0x00	; 0
	slRight.slope2 = 1;
     2ec:	cf 55       	subi	r28, 0x5F	; 95
     2ee:	df 4f       	sbci	r29, 0xFF	; 255
     2f0:	19 83       	std	Y+1, r17	; 0x01
     2f2:	08 83       	st	Y, r16
     2f4:	c1 5a       	subi	r28, 0xA1	; 161
     2f6:	d0 40       	sbci	r29, 0x00	; 0
	slRight.next = &straight;
     2f8:	cd 55       	subi	r28, 0x5D	; 93
     2fa:	df 4f       	sbci	r29, 0xFF	; 255
     2fc:	d9 82       	std	Y+1, r13	; 0x01
     2fe:	c8 82       	st	Y, r12
     300:	c3 5a       	subi	r28, 0xA3	; 163
     302:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type right;
	strcpy(right.name, "right");
     304:	86 e0       	ldi	r24, 0x06	; 6
     306:	ec e8       	ldi	r30, 0x8C	; 140
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	de 01       	movw	r26, r28
     30c:	ab 55       	subi	r26, 0x5B	; 91
     30e:	bf 4f       	sbci	r27, 0xFF	; 255
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	8a 95       	dec	r24
     316:	e1 f7       	brne	.-8      	; 0x310 <FLC_steering+0x246>
	right.value = 0;
     318:	c1 55       	subi	r28, 0x51	; 81
     31a:	df 4f       	sbci	r29, 0xFF	; 255
     31c:	19 82       	std	Y+1, r1	; 0x01
     31e:	18 82       	st	Y, r1
     320:	cf 5a       	subi	r28, 0xAF	; 175
     322:	d0 40       	sbci	r29, 0x00	; 0
	right.point1 = 2270;
     324:	ee ed       	ldi	r30, 0xDE	; 222
     326:	f8 e0       	ldi	r31, 0x08	; 8
     328:	cf 54       	subi	r28, 0x4F	; 79
     32a:	df 4f       	sbci	r29, 0xFF	; 255
     32c:	f9 83       	std	Y+1, r31	; 0x01
     32e:	e8 83       	st	Y, r30
     330:	c1 5b       	subi	r28, 0xB1	; 177
     332:	d0 40       	sbci	r29, 0x00	; 0
	right.point2 = 2480;
     334:	20 eb       	ldi	r18, 0xB0	; 176
     336:	39 e0       	ldi	r19, 0x09	; 9
     338:	cd 54       	subi	r28, 0x4D	; 77
     33a:	df 4f       	sbci	r29, 0xFF	; 255
     33c:	39 83       	std	Y+1, r19	; 0x01
     33e:	28 83       	st	Y, r18
     340:	c3 5b       	subi	r28, 0xB3	; 179
     342:	d0 40       	sbci	r29, 0x00	; 0
	right.slope1 = 1;
     344:	cb 54       	subi	r28, 0x4B	; 75
     346:	df 4f       	sbci	r29, 0xFF	; 255
     348:	19 83       	std	Y+1, r17	; 0x01
     34a:	08 83       	st	Y, r16
     34c:	c5 5b       	subi	r28, 0xB5	; 181
     34e:	d0 40       	sbci	r29, 0x00	; 0
	right.slope2 = 1;
     350:	c9 54       	subi	r28, 0x49	; 73
     352:	df 4f       	sbci	r29, 0xFF	; 255
     354:	19 83       	std	Y+1, r17	; 0x01
     356:	08 83       	st	Y, r16
     358:	c7 5b       	subi	r28, 0xB7	; 183
     35a:	d0 40       	sbci	r29, 0x00	; 0
	right.next = &slRight;
     35c:	4f e8       	ldi	r20, 0x8F	; 143
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	4c 0f       	add	r20, r28
     362:	5d 1f       	adc	r21, r29
     364:	c7 54       	subi	r28, 0x47	; 71
     366:	df 4f       	sbci	r29, 0xFF	; 255
     368:	59 83       	std	Y+1, r21	; 0x01
     36a:	48 83       	st	Y, r20
     36c:	c9 5b       	subi	r28, 0xB9	; 185
     36e:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type shRight;
	strcpy(shRight.name, "shRight");
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	e6 e3       	ldi	r30, 0x36	; 54
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	de 01       	movw	r26, r28
     378:	a5 54       	subi	r26, 0x45	; 69
     37a:	bf 4f       	sbci	r27, 0xFF	; 255
     37c:	01 90       	ld	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	8a 95       	dec	r24
     382:	e1 f7       	brne	.-8      	; 0x37c <FLC_steering+0x2b2>
	shRight.value = 0;
     384:	cb 53       	subi	r28, 0x3B	; 59
     386:	df 4f       	sbci	r29, 0xFF	; 255
     388:	19 82       	std	Y+1, r1	; 0x01
     38a:	18 82       	st	Y, r1
     38c:	c5 5c       	subi	r28, 0xC5	; 197
     38e:	d0 40       	sbci	r29, 0x00	; 0
	shRight.point1 = 2259;
     390:	83 ed       	ldi	r24, 0xD3	; 211
     392:	98 e0       	ldi	r25, 0x08	; 8
     394:	c9 53       	subi	r28, 0x39	; 57
     396:	df 4f       	sbci	r29, 0xFF	; 255
     398:	99 83       	std	Y+1, r25	; 0x01
     39a:	88 83       	st	Y, r24
     39c:	c7 5c       	subi	r28, 0xC7	; 199
     39e:	d0 40       	sbci	r29, 0x00	; 0
	shRight.point2 = 2370;
     3a0:	a2 e4       	ldi	r26, 0x42	; 66
     3a2:	b9 e0       	ldi	r27, 0x09	; 9
     3a4:	c7 53       	subi	r28, 0x37	; 55
     3a6:	df 4f       	sbci	r29, 0xFF	; 255
     3a8:	b9 83       	std	Y+1, r27	; 0x01
     3aa:	a8 83       	st	Y, r26
     3ac:	c9 5c       	subi	r28, 0xC9	; 201
     3ae:	d0 40       	sbci	r29, 0x00	; 0
	shRight.slope1 = 100;
     3b0:	e4 e6       	ldi	r30, 0x64	; 100
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	c5 53       	subi	r28, 0x35	; 53
     3b6:	df 4f       	sbci	r29, 0xFF	; 255
     3b8:	f9 83       	std	Y+1, r31	; 0x01
     3ba:	e8 83       	st	Y, r30
     3bc:	cb 5c       	subi	r28, 0xCB	; 203
     3be:	d0 40       	sbci	r29, 0x00	; 0
	shRight.slope2 = 1;
     3c0:	c3 53       	subi	r28, 0x33	; 51
     3c2:	df 4f       	sbci	r29, 0xFF	; 255
     3c4:	19 83       	std	Y+1, r17	; 0x01
     3c6:	08 83       	st	Y, r16
     3c8:	cd 5c       	subi	r28, 0xCD	; 205
     3ca:	d0 40       	sbci	r29, 0x00	; 0
	shRight.next = &right;
     3cc:	25 ea       	ldi	r18, 0xA5	; 165
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	2c 0f       	add	r18, r28
     3d2:	3d 1f       	adc	r19, r29
     3d4:	c1 53       	subi	r28, 0x31	; 49
     3d6:	df 4f       	sbci	r29, 0xFF	; 255
     3d8:	39 83       	std	Y+1, r19	; 0x01
     3da:	28 83       	st	Y, r18
     3dc:	cf 5c       	subi	r28, 0xCF	; 207
     3de:	d0 40       	sbci	r29, 0x00	; 0
    
    
    angle.membership_functions = &shRight;
    angle.next = NULL;
     3e0:	18 a2       	std	Y+32, r1	; 0x20
     3e2:	1f 8e       	std	Y+31, r1	; 0x1f
     * MF medium:	[2845 2878 2892 2925]
     * MF high:		[2890 2900 2930 2931]
     *
     */
    struct mf_type farLeft;
    strcpy(farLeft.name, "farLeft");
     3e4:	88 e0       	ldi	r24, 0x08	; 8
     3e6:	ee e3       	ldi	r30, 0x3E	; 62
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	de 01       	movw	r26, r28
     3ec:	af 52       	subi	r26, 0x2F	; 47
     3ee:	bf 4f       	sbci	r27, 0xFF	; 255
     3f0:	01 90       	ld	r0, Z+
     3f2:	0d 92       	st	X+, r0
     3f4:	8a 95       	dec	r24
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <FLC_steering+0x326>
    farLeft.value = 0;
     3f8:	c5 52       	subi	r28, 0x25	; 37
     3fa:	df 4f       	sbci	r29, 0xFF	; 255
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
     400:	cb 5d       	subi	r28, 0xDB	; 219
     402:	d0 40       	sbci	r29, 0x00	; 0
    farLeft.point1 = 215;
     404:	87 ed       	ldi	r24, 0xD7	; 215
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	c3 52       	subi	r28, 0x23	; 35
     40a:	df 4f       	sbci	r29, 0xFF	; 255
     40c:	99 83       	std	Y+1, r25	; 0x01
     40e:	88 83       	st	Y, r24
     410:	cd 5d       	subi	r28, 0xDD	; 221
     412:	d0 40       	sbci	r29, 0x00	; 0
    farLeft.point2 = 251;
     414:	8b ef       	ldi	r24, 0xFB	; 251
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	c1 52       	subi	r28, 0x21	; 33
     41a:	df 4f       	sbci	r29, 0xFF	; 255
     41c:	99 83       	std	Y+1, r25	; 0x01
     41e:	88 83       	st	Y, r24
     420:	cf 5d       	subi	r28, 0xDF	; 223
     422:	d0 40       	sbci	r29, 0x00	; 0
    farLeft.slope1 = 4;
     424:	84 e0       	ldi	r24, 0x04	; 4
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	cf 51       	subi	r28, 0x1F	; 31
     42a:	df 4f       	sbci	r29, 0xFF	; 255
     42c:	99 83       	std	Y+1, r25	; 0x01
     42e:	88 83       	st	Y, r24
     430:	c1 5e       	subi	r28, 0xE1	; 225
     432:	d0 40       	sbci	r29, 0x00	; 0
    farLeft.slope2 = 100;
     434:	44 e6       	ldi	r20, 0x64	; 100
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	cd 51       	subi	r28, 0x1D	; 29
     43a:	df 4f       	sbci	r29, 0xFF	; 255
     43c:	59 83       	std	Y+1, r21	; 0x01
     43e:	48 83       	st	Y, r20
     440:	c3 5e       	subi	r28, 0xE3	; 227
     442:	d0 40       	sbci	r29, 0x00	; 0
    farLeft.next = NULL;
     444:	cb 51       	subi	r28, 0x1B	; 27
     446:	df 4f       	sbci	r29, 0xFF	; 255
     448:	19 82       	std	Y+1, r1	; 0x01
     44a:	18 82       	st	Y, r1
     44c:	c5 5e       	subi	r28, 0xE5	; 229
     44e:	d0 40       	sbci	r29, 0x00	; 0
    
    struct mf_type eLeft;
    strcpy(eLeft.name, "eLeft");
     450:	4e 01       	movw	r8, r28
     452:	57 ee       	ldi	r21, 0xE7	; 231
     454:	85 0e       	add	r8, r21
     456:	91 1c       	adc	r9, r1
     458:	26 e0       	ldi	r18, 0x06	; 6
     45a:	e6 e4       	ldi	r30, 0x46	; 70
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	d4 01       	movw	r26, r8
     460:	01 90       	ld	r0, Z+
     462:	0d 92       	st	X+, r0
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <FLC_steering+0x396>
    eLeft.value = 0;
     468:	d4 01       	movw	r26, r8
     46a:	1b 96       	adiw	r26, 0x0b	; 11
     46c:	1c 92       	st	X, r1
     46e:	1e 92       	st	-X, r1
     470:	1a 97       	sbiw	r26, 0x0a	; 10
    eLeft.point1 = 130;
     472:	22 e8       	ldi	r18, 0x82	; 130
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	1d 96       	adiw	r26, 0x0d	; 13
     478:	3c 93       	st	X, r19
     47a:	2e 93       	st	-X, r18
     47c:	1c 97       	sbiw	r26, 0x0c	; 12
    eLeft.point2 = 240;
     47e:	20 ef       	ldi	r18, 0xF0	; 240
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	1f 96       	adiw	r26, 0x0f	; 15
     484:	3c 93       	st	X, r19
     486:	2e 93       	st	-X, r18
     488:	1e 97       	sbiw	r26, 0x0e	; 14
    eLeft.slope1 = 2;
     48a:	22 e0       	ldi	r18, 0x02	; 2
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	51 96       	adiw	r26, 0x11	; 17
     490:	3c 93       	st	X, r19
     492:	2e 93       	st	-X, r18
     494:	50 97       	sbiw	r26, 0x10	; 16
    eLeft.slope2 = 2;
     496:	53 96       	adiw	r26, 0x13	; 19
     498:	3c 93       	st	X, r19
     49a:	2e 93       	st	-X, r18
     49c:	52 97       	sbiw	r26, 0x12	; 18
    eLeft.next = &farLeft;
     49e:	e1 ed       	ldi	r30, 0xD1	; 209
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ec 0f       	add	r30, r28
     4a4:	fd 1f       	adc	r31, r29
     4a6:	55 96       	adiw	r26, 0x15	; 21
     4a8:	fc 93       	st	X, r31
     4aa:	ee 93       	st	-X, r30
     4ac:	54 97       	sbiw	r26, 0x14	; 20
    
	struct mf_type center;
	strcpy(center.name, "center");
     4ae:	1e 01       	movw	r2, r28
     4b0:	fd ef       	ldi	r31, 0xFD	; 253
     4b2:	2f 0e       	add	r2, r31
     4b4:	31 1c       	adc	r3, r1
     4b6:	47 e0       	ldi	r20, 0x07	; 7
     4b8:	ec e4       	ldi	r30, 0x4C	; 76
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	d1 01       	movw	r26, r2
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	4a 95       	dec	r20
     4c4:	e1 f7       	brne	.-8      	; 0x4be <FLC_steering+0x3f4>
	center.value = 0;
     4c6:	d1 01       	movw	r26, r2
     4c8:	1b 96       	adiw	r26, 0x0b	; 11
     4ca:	1c 92       	st	X, r1
     4cc:	1e 92       	st	-X, r1
     4ce:	1a 97       	sbiw	r26, 0x0a	; 10
	center.point1 = 65;
     4d0:	41 e4       	ldi	r20, 0x41	; 65
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	1d 96       	adiw	r26, 0x0d	; 13
     4d6:	5c 93       	st	X, r21
     4d8:	4e 93       	st	-X, r20
     4da:	1c 97       	sbiw	r26, 0x0c	; 12
	center.point2= 185;
     4dc:	49 eb       	ldi	r20, 0xB9	; 185
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	1f 96       	adiw	r26, 0x0f	; 15
     4e2:	5c 93       	st	X, r21
     4e4:	4e 93       	st	-X, r20
     4e6:	1e 97       	sbiw	r26, 0x0e	; 14
	center.slope1 = 2;
     4e8:	51 96       	adiw	r26, 0x11	; 17
     4ea:	3c 93       	st	X, r19
     4ec:	2e 93       	st	-X, r18
     4ee:	50 97       	sbiw	r26, 0x10	; 16
	center.slope2 = 2;
     4f0:	53 96       	adiw	r26, 0x13	; 19
     4f2:	3c 93       	st	X, r19
     4f4:	2e 93       	st	-X, r18
     4f6:	52 97       	sbiw	r26, 0x12	; 18
	center.next = &eLeft;
     4f8:	55 96       	adiw	r26, 0x15	; 21
     4fa:	9c 92       	st	X, r9
     4fc:	8e 92       	st	-X, r8
     4fe:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type eRight;
	strcpy(eRight.name, "eRight");
     500:	2e 01       	movw	r4, r28
     502:	bd ee       	ldi	r27, 0xED	; 237
     504:	4b 1a       	sub	r4, r27
     506:	be ef       	ldi	r27, 0xFE	; 254
     508:	5b 0a       	sbc	r5, r27
     50a:	47 e0       	ldi	r20, 0x07	; 7
     50c:	e3 e5       	ldi	r30, 0x53	; 83
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	d2 01       	movw	r26, r4
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	4a 95       	dec	r20
     518:	e1 f7       	brne	.-8      	; 0x512 <FLC_steering+0x448>
	eRight.value = 0;
     51a:	f2 01       	movw	r30, r4
     51c:	13 86       	std	Z+11, r1	; 0x0b
     51e:	12 86       	std	Z+10, r1	; 0x0a
	eRight.point1 = 10;
     520:	4a e0       	ldi	r20, 0x0A	; 10
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	55 87       	std	Z+13, r21	; 0x0d
     526:	44 87       	std	Z+12, r20	; 0x0c
	eRight.point2= 120;
     528:	48 e7       	ldi	r20, 0x78	; 120
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	57 87       	std	Z+15, r21	; 0x0f
     52e:	46 87       	std	Z+14, r20	; 0x0e
	eRight.slope1 = 2;
     530:	31 8b       	std	Z+17, r19	; 0x11
     532:	20 8b       	std	Z+16, r18	; 0x10
	eRight.slope2 = 2;
     534:	33 8b       	std	Z+19, r19	; 0x13
     536:	22 8b       	std	Z+18, r18	; 0x12
	eRight.next = &center;
     538:	35 8a       	std	Z+21, r3	; 0x15
     53a:	24 8a       	std	Z+20, r2	; 0x14
	
	
    struct mf_type farRight;
    strcpy(farRight.name, "farRight");
     53c:	3e 01       	movw	r6, r28
     53e:	f7 ed       	ldi	r31, 0xD7	; 215
     540:	6f 1a       	sub	r6, r31
     542:	fe ef       	ldi	r31, 0xFE	; 254
     544:	7f 0a       	sbc	r7, r31
     546:	29 e0       	ldi	r18, 0x09	; 9
     548:	ea e5       	ldi	r30, 0x5A	; 90
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	d3 01       	movw	r26, r6
     54e:	01 90       	ld	r0, Z+
     550:	0d 92       	st	X+, r0
     552:	2a 95       	dec	r18
     554:	e1 f7       	brne	.-8      	; 0x54e <FLC_steering+0x484>
    farRight.value = 0;
     556:	d3 01       	movw	r26, r6
     558:	1b 96       	adiw	r26, 0x0b	; 11
     55a:	1c 92       	st	X, r1
     55c:	1e 92       	st	-X, r1
     55e:	1a 97       	sbiw	r26, 0x0a	; 10
    farRight.point1 = -1;
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	1d 96       	adiw	r26, 0x0d	; 13
     566:	3c 93       	st	X, r19
     568:	2e 93       	st	-X, r18
     56a:	1c 97       	sbiw	r26, 0x0c	; 12
    farRight.point2= 35;
     56c:	23 e2       	ldi	r18, 0x23	; 35
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	1f 96       	adiw	r26, 0x0f	; 15
     572:	3c 93       	st	X, r19
     574:	2e 93       	st	-X, r18
     576:	1e 97       	sbiw	r26, 0x0e	; 14
    farRight.slope1 = 100;
     578:	e4 e6       	ldi	r30, 0x64	; 100
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	51 96       	adiw	r26, 0x11	; 17
     57e:	fc 93       	st	X, r31
     580:	ee 93       	st	-X, r30
     582:	50 97       	sbiw	r26, 0x10	; 16
    farRight.slope2 = 4;
     584:	53 96       	adiw	r26, 0x13	; 19
     586:	9c 93       	st	X, r25
     588:	8e 93       	st	-X, r24
     58a:	52 97       	sbiw	r26, 0x12	; 18
    farRight.next = &eRight;
     58c:	55 96       	adiw	r26, 0x15	; 21
     58e:	5c 92       	st	X, r5
     590:	4e 92       	st	-X, r4
     592:	54 97       	sbiw	r26, 0x14	; 20
    
    error.membership_functions = &farRight;
     594:	7e 86       	std	Y+14, r7	; 0x0e
     596:	6d 86       	std	Y+13, r6	; 0x0d
    error.next = &angle;
     598:	f8 8a       	std	Y+16, r15	; 0x10
     59a:	ef 86       	std	Y+15, r14	; 0x0f
     * max			[2890 2926 2934 2970]
	 
     *
     */
       struct mf_type oShLeft;
       strcpy(oShLeft.name, "oShLeft");
     59c:	ce 01       	movw	r24, r28
     59e:	81 5c       	subi	r24, 0xC1	; 193
     5a0:	9e 4f       	sbci	r25, 0xFE	; 254
     5a2:	28 e0       	ldi	r18, 0x08	; 8
     5a4:	e3 e6       	ldi	r30, 0x63	; 99
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	dc 01       	movw	r26, r24
     5aa:	01 90       	ld	r0, Z+
     5ac:	0d 92       	st	X+, r0
     5ae:	2a 95       	dec	r18
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <FLC_steering+0x4e0>
       oShLeft.value = 0;
     5b2:	dc 01       	movw	r26, r24
     5b4:	1b 96       	adiw	r26, 0x0b	; 11
     5b6:	1c 92       	st	X, r1
     5b8:	1e 92       	st	-X, r1
     5ba:	1a 97       	sbiw	r26, 0x0a	; 10
       oShLeft.point1 = 2950;
     5bc:	1d 96       	adiw	r26, 0x0d	; 13
     5be:	7c 93       	st	X, r23
     5c0:	6e 93       	st	-X, r22
     5c2:	1c 97       	sbiw	r26, 0x0c	; 12
       oShLeft.point2 = 3061;
     5c4:	1f 96       	adiw	r26, 0x0f	; 15
     5c6:	bc 92       	st	X, r11
     5c8:	ae 92       	st	-X, r10
     5ca:	1e 97       	sbiw	r26, 0x0e	; 14
       oShLeft.slope1 = 1;
     5cc:	51 96       	adiw	r26, 0x11	; 17
     5ce:	1c 93       	st	X, r17
     5d0:	0e 93       	st	-X, r16
     5d2:	50 97       	sbiw	r26, 0x10	; 16
       oShLeft.slope2 = 100;
     5d4:	e4 e6       	ldi	r30, 0x64	; 100
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	53 96       	adiw	r26, 0x13	; 19
     5da:	fc 93       	st	X, r31
     5dc:	ee 93       	st	-X, r30
     5de:	52 97       	sbiw	r26, 0x12	; 18
       oShLeft.next = NULL;
     5e0:	55 96       	adiw	r26, 0x15	; 21
     5e2:	1c 92       	st	X, r1
     5e4:	1e 92       	st	-X, r1
     5e6:	54 97       	sbiw	r26, 0x14	; 20
       
       struct mf_type oLeft;
       strcpy(oLeft.name, "oLeft");
     5e8:	5e 01       	movw	r10, r28
     5ea:	fb ea       	ldi	r31, 0xAB	; 171
     5ec:	af 1a       	sub	r10, r31
     5ee:	fe ef       	ldi	r31, 0xFE	; 254
     5f0:	bf 0a       	sbc	r11, r31
     5f2:	26 e0       	ldi	r18, 0x06	; 6
     5f4:	eb e6       	ldi	r30, 0x6B	; 107
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	d5 01       	movw	r26, r10
     5fa:	01 90       	ld	r0, Z+
     5fc:	0d 92       	st	X+, r0
     5fe:	2a 95       	dec	r18
     600:	e1 f7       	brne	.-8      	; 0x5fa <FLC_steering+0x530>
       oLeft.value = 0;
     602:	d5 01       	movw	r26, r10
     604:	1b 96       	adiw	r26, 0x0b	; 11
     606:	1c 92       	st	X, r1
     608:	1e 92       	st	-X, r1
     60a:	1a 97       	sbiw	r26, 0x0a	; 10
       oLeft.point1 = 2840;
     60c:	e8 e1       	ldi	r30, 0x18	; 24
     60e:	fb e0       	ldi	r31, 0x0B	; 11
     610:	1d 96       	adiw	r26, 0x0d	; 13
     612:	fc 93       	st	X, r31
     614:	ee 93       	st	-X, r30
     616:	1c 97       	sbiw	r26, 0x0c	; 12
       oLeft.point2 = 3050;
     618:	2a ee       	ldi	r18, 0xEA	; 234
     61a:	3b e0       	ldi	r19, 0x0B	; 11
     61c:	1f 96       	adiw	r26, 0x0f	; 15
     61e:	3c 93       	st	X, r19
     620:	2e 93       	st	-X, r18
     622:	1e 97       	sbiw	r26, 0x0e	; 14
       oLeft.slope1 = 1;
     624:	51 96       	adiw	r26, 0x11	; 17
     626:	1c 93       	st	X, r17
     628:	0e 93       	st	-X, r16
     62a:	50 97       	sbiw	r26, 0x10	; 16
       oLeft.slope2 = 1;
     62c:	53 96       	adiw	r26, 0x13	; 19
     62e:	1c 93       	st	X, r17
     630:	0e 93       	st	-X, r16
     632:	52 97       	sbiw	r26, 0x12	; 18
       oLeft.next = &oShLeft;
     634:	55 96       	adiw	r26, 0x15	; 21
     636:	9c 93       	st	X, r25
     638:	8e 93       	st	-X, r24
     63a:	54 97       	sbiw	r26, 0x14	; 20
       
       
       struct mf_type oSlLeft;
       strcpy(oSlLeft.name, "oSlLeft");
     63c:	8c 96       	adiw	r24, 0x2c	; 44
     63e:	28 e0       	ldi	r18, 0x08	; 8
     640:	e1 e7       	ldi	r30, 0x71	; 113
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	dc 01       	movw	r26, r24
     646:	01 90       	ld	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	2a 95       	dec	r18
     64c:	e1 f7       	brne	.-8      	; 0x646 <FLC_steering+0x57c>
       oSlLeft.value = 0;
     64e:	dc 01       	movw	r26, r24
     650:	1b 96       	adiw	r26, 0x0b	; 11
     652:	1c 92       	st	X, r1
     654:	1e 92       	st	-X, r1
     656:	1a 97       	sbiw	r26, 0x0a	; 10
       oSlLeft.point1 = 2670;
     658:	ee e6       	ldi	r30, 0x6E	; 110
     65a:	fa e0       	ldi	r31, 0x0A	; 10
     65c:	1d 96       	adiw	r26, 0x0d	; 13
     65e:	fc 93       	st	X, r31
     660:	ee 93       	st	-X, r30
     662:	1c 97       	sbiw	r26, 0x0c	; 12
       oSlLeft.point2 = 2920;
     664:	28 e6       	ldi	r18, 0x68	; 104
     666:	3b e0       	ldi	r19, 0x0B	; 11
     668:	1f 96       	adiw	r26, 0x0f	; 15
     66a:	3c 93       	st	X, r19
     66c:	2e 93       	st	-X, r18
     66e:	1e 97       	sbiw	r26, 0x0e	; 14
       oSlLeft.slope1 = 1;
     670:	51 96       	adiw	r26, 0x11	; 17
     672:	1c 93       	st	X, r17
     674:	0e 93       	st	-X, r16
     676:	50 97       	sbiw	r26, 0x10	; 16
       oSlLeft.slope2 = 1;
     678:	53 96       	adiw	r26, 0x13	; 19
     67a:	1c 93       	st	X, r17
     67c:	0e 93       	st	-X, r16
     67e:	52 97       	sbiw	r26, 0x12	; 18
       oSlLeft.next = &oLeft;
     680:	55 96       	adiw	r26, 0x15	; 21
     682:	bc 92       	st	X, r11
     684:	ae 92       	st	-X, r10
     686:	54 97       	sbiw	r26, 0x14	; 20
       
       
       struct mf_type oStraight;
       strcpy(oStraight.name, "oStraight");
     688:	9e 01       	movw	r18, r28
     68a:	2f 57       	subi	r18, 0x7F	; 127
     68c:	3e 4f       	sbci	r19, 0xFE	; 254
     68e:	4a e0       	ldi	r20, 0x0A	; 10
     690:	e2 e9       	ldi	r30, 0x92	; 146
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	d9 01       	movw	r26, r18
     696:	01 90       	ld	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	4a 95       	dec	r20
     69c:	e1 f7       	brne	.-8      	; 0x696 <FLC_steering+0x5cc>
       oStraight.value = 0;
     69e:	d9 01       	movw	r26, r18
     6a0:	1b 96       	adiw	r26, 0x0b	; 11
     6a2:	1c 92       	st	X, r1
     6a4:	1e 92       	st	-X, r1
     6a6:	1a 97       	sbiw	r26, 0x0a	; 10
       oStraight.point1 = 2540;
     6a8:	ec ee       	ldi	r30, 0xEC	; 236
     6aa:	f9 e0       	ldi	r31, 0x09	; 9
     6ac:	1d 96       	adiw	r26, 0x0d	; 13
     6ae:	fc 93       	st	X, r31
     6b0:	ee 93       	st	-X, r30
     6b2:	1c 97       	sbiw	r26, 0x0c	; 12
       oStraight.point2 = 2780;
     6b4:	4c ed       	ldi	r20, 0xDC	; 220
     6b6:	5a e0       	ldi	r21, 0x0A	; 10
     6b8:	1f 96       	adiw	r26, 0x0f	; 15
     6ba:	5c 93       	st	X, r21
     6bc:	4e 93       	st	-X, r20
     6be:	1e 97       	sbiw	r26, 0x0e	; 14
       oStraight.slope1 = 1;
     6c0:	51 96       	adiw	r26, 0x11	; 17
     6c2:	1c 93       	st	X, r17
     6c4:	0e 93       	st	-X, r16
     6c6:	50 97       	sbiw	r26, 0x10	; 16
       oStraight.slope2 = 1;
     6c8:	53 96       	adiw	r26, 0x13	; 19
     6ca:	1c 93       	st	X, r17
     6cc:	0e 93       	st	-X, r16
     6ce:	52 97       	sbiw	r26, 0x12	; 18
       oStraight.next = &oSlLeft;
     6d0:	55 96       	adiw	r26, 0x15	; 21
     6d2:	9c 93       	st	X, r25
     6d4:	8e 93       	st	-X, r24
     6d6:	54 97       	sbiw	r26, 0x14	; 20
       
       struct mf_type oSlRight;
       strcpy(oSlRight.name, "oSlRight");
     6d8:	be 01       	movw	r22, r28
     6da:	69 56       	subi	r22, 0x69	; 105
     6dc:	7e 4f       	sbci	r23, 0xFE	; 254
     6de:	49 e0       	ldi	r20, 0x09	; 9
     6e0:	e9 e7       	ldi	r30, 0x79	; 121
     6e2:	f1 e0       	ldi	r31, 0x01	; 1
     6e4:	db 01       	movw	r26, r22
     6e6:	01 90       	ld	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	4a 95       	dec	r20
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <FLC_steering+0x61c>
       oSlRight.value = 0;
     6ee:	db 01       	movw	r26, r22
     6f0:	1b 96       	adiw	r26, 0x0b	; 11
     6f2:	1c 92       	st	X, r1
     6f4:	1e 92       	st	-X, r1
     6f6:	1a 97       	sbiw	r26, 0x0a	; 10
       oSlRight.point1 = 2400;
     6f8:	e0 e6       	ldi	r30, 0x60	; 96
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	1d 96       	adiw	r26, 0x0d	; 13
     6fe:	fc 93       	st	X, r31
     700:	ee 93       	st	-X, r30
     702:	1c 97       	sbiw	r26, 0x0c	; 12
       oSlRight.point2 = 2650;
     704:	4a e5       	ldi	r20, 0x5A	; 90
     706:	5a e0       	ldi	r21, 0x0A	; 10
     708:	1f 96       	adiw	r26, 0x0f	; 15
     70a:	5c 93       	st	X, r21
     70c:	4e 93       	st	-X, r20
     70e:	1e 97       	sbiw	r26, 0x0e	; 14
       oSlRight.slope1 = 1;
     710:	51 96       	adiw	r26, 0x11	; 17
     712:	1c 93       	st	X, r17
     714:	0e 93       	st	-X, r16
     716:	50 97       	sbiw	r26, 0x10	; 16
       oSlRight.slope2 = 1;
     718:	53 96       	adiw	r26, 0x13	; 19
     71a:	1c 93       	st	X, r17
     71c:	0e 93       	st	-X, r16
     71e:	52 97       	sbiw	r26, 0x12	; 18
       oSlRight.next = &oStraight;
     720:	55 96       	adiw	r26, 0x15	; 21
     722:	3c 93       	st	X, r19
     724:	2e 93       	st	-X, r18
     726:	54 97       	sbiw	r26, 0x14	; 20
       
       struct mf_type oRight;
       strcpy(oRight.name, "oRight");
     728:	ae 01       	movw	r20, r28
     72a:	43 55       	subi	r20, 0x53	; 83
     72c:	5e 4f       	sbci	r21, 0xFE	; 254
     72e:	0f 2e       	mov	r0, r31
     730:	f7 e0       	ldi	r31, 0x07	; 7
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	e2 e8       	ldi	r30, 0x82	; 130
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	da 01       	movw	r26, r20
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	fa 94       	dec	r15
     742:	e1 f7       	brne	.-8      	; 0x73c <FLC_steering+0x672>
       oRight.value = 0;
     744:	da 01       	movw	r26, r20
     746:	1b 96       	adiw	r26, 0x0b	; 11
     748:	1c 92       	st	X, r1
     74a:	1e 92       	st	-X, r1
     74c:	1a 97       	sbiw	r26, 0x0a	; 10
       oRight.point1 = 2270;
     74e:	ee ed       	ldi	r30, 0xDE	; 222
     750:	f8 e0       	ldi	r31, 0x08	; 8
     752:	1d 96       	adiw	r26, 0x0d	; 13
     754:	fc 93       	st	X, r31
     756:	ee 93       	st	-X, r30
     758:	1c 97       	sbiw	r26, 0x0c	; 12
       oRight.point2 = 2480;
     75a:	e0 eb       	ldi	r30, 0xB0	; 176
     75c:	f9 e0       	ldi	r31, 0x09	; 9
     75e:	1f 96       	adiw	r26, 0x0f	; 15
     760:	fc 93       	st	X, r31
     762:	ee 93       	st	-X, r30
     764:	1e 97       	sbiw	r26, 0x0e	; 14
       oRight.slope1 = 1;
     766:	51 96       	adiw	r26, 0x11	; 17
     768:	1c 93       	st	X, r17
     76a:	0e 93       	st	-X, r16
     76c:	50 97       	sbiw	r26, 0x10	; 16
       oRight.slope2 = 1;
     76e:	53 96       	adiw	r26, 0x13	; 19
     770:	1c 93       	st	X, r17
     772:	0e 93       	st	-X, r16
     774:	52 97       	sbiw	r26, 0x12	; 18
       oRight.next = &oSlRight;
     776:	55 96       	adiw	r26, 0x15	; 21
     778:	7c 93       	st	X, r23
     77a:	6e 93       	st	-X, r22
     77c:	54 97       	sbiw	r26, 0x14	; 20
       
       struct mf_type oShright;
       strcpy(oShright.name, "oShright");
     77e:	0f 2e       	mov	r0, r31
     780:	f9 e0       	ldi	r31, 0x09	; 9
     782:	ef 2e       	mov	r14, r31
     784:	f0 2d       	mov	r31, r0
     786:	e9 e8       	ldi	r30, 0x89	; 137
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	56 96       	adiw	r26, 0x16	; 22
     78c:	01 90       	ld	r0, Z+
     78e:	0d 92       	st	X+, r0
     790:	ea 94       	dec	r14
     792:	e1 f7       	brne	.-8      	; 0x78c <FLC_steering+0x6c2>
       oShright.value = 0;
     794:	c3 53       	subi	r28, 0x33	; 51
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	19 82       	std	Y+1, r1	; 0x01
     79a:	18 82       	st	Y, r1
     79c:	cd 5c       	subi	r28, 0xCD	; 205
     79e:	d1 40       	sbci	r29, 0x01	; 1
       oShright.point1 = 2259;
     7a0:	a3 ed       	ldi	r26, 0xD3	; 211
     7a2:	b8 e0       	ldi	r27, 0x08	; 8
     7a4:	c1 53       	subi	r28, 0x31	; 49
     7a6:	de 4f       	sbci	r29, 0xFE	; 254
     7a8:	b9 83       	std	Y+1, r27	; 0x01
     7aa:	a8 83       	st	Y, r26
     7ac:	cf 5c       	subi	r28, 0xCF	; 207
     7ae:	d1 40       	sbci	r29, 0x01	; 1
       oShright.point2 = 2370;
     7b0:	e2 e4       	ldi	r30, 0x42	; 66
     7b2:	f9 e0       	ldi	r31, 0x09	; 9
     7b4:	cf 52       	subi	r28, 0x2F	; 47
     7b6:	de 4f       	sbci	r29, 0xFE	; 254
     7b8:	f9 83       	std	Y+1, r31	; 0x01
     7ba:	e8 83       	st	Y, r30
     7bc:	c1 5d       	subi	r28, 0xD1	; 209
     7be:	d1 40       	sbci	r29, 0x01	; 1
       oShright.slope1 = 100;
     7c0:	a4 e6       	ldi	r26, 0x64	; 100
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	cd 52       	subi	r28, 0x2D	; 45
     7c6:	de 4f       	sbci	r29, 0xFE	; 254
     7c8:	b9 83       	std	Y+1, r27	; 0x01
     7ca:	a8 83       	st	Y, r26
     7cc:	c3 5d       	subi	r28, 0xD3	; 211
     7ce:	d1 40       	sbci	r29, 0x01	; 1
       oShright.slope2 = 1;
     7d0:	cb 52       	subi	r28, 0x2B	; 43
     7d2:	de 4f       	sbci	r29, 0xFE	; 254
     7d4:	19 83       	std	Y+1, r17	; 0x01
     7d6:	08 83       	st	Y, r16
     7d8:	c5 5d       	subi	r28, 0xD5	; 213
     7da:	d1 40       	sbci	r29, 0x01	; 1
       oShright.next = &oRight;
     7dc:	c9 52       	subi	r28, 0x29	; 41
     7de:	de 4f       	sbci	r29, 0xFE	; 254
     7e0:	59 83       	std	Y+1, r21	; 0x01
     7e2:	48 83       	st	Y, r20
     7e4:	c7 5d       	subi	r28, 0xD7	; 215
     7e6:	d1 40       	sbci	r29, 0x01	; 1
	   
	   angle.membership_functions = &oShright;
     7e8:	e3 ec       	ldi	r30, 0xC3	; 195
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	ec 0f       	add	r30, r28
     7ee:	fd 1f       	adc	r31, r29
     7f0:	fe 8f       	std	Y+30, r31	; 0x1e
     7f2:	ed 8f       	std	Y+29, r30	; 0x1d
     *
     */
	
	/* rule # 11: if eLeft and straight then slRight */
	struct rule_element_type then11;
	then11.value = &slRight.value;
     7f4:	8e 01       	movw	r16, r28
     7f6:	07 52       	subi	r16, 0x27	; 39
     7f8:	1e 4f       	sbci	r17, 0xFE	; 254
     7fa:	af e8       	ldi	r26, 0x8F	; 143
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	ac 0f       	add	r26, r28
     800:	bd 1f       	adc	r27, r29
     802:	1a 96       	adiw	r26, 0x0a	; 10
     804:	c3 57       	subi	r28, 0x73	; 115
     806:	dd 4f       	sbci	r29, 0xFD	; 253
     808:	b9 83       	std	Y+1, r27	; 0x01
     80a:	a8 83       	st	Y, r26
     80c:	cd 58       	subi	r28, 0x8D	; 141
     80e:	d2 40       	sbci	r29, 0x02	; 2
     810:	f8 01       	movw	r30, r16
     812:	b1 83       	std	Z+1, r27	; 0x01
     814:	a0 83       	st	Z, r26
	then11.next = NULL;
     816:	13 82       	std	Z+3, r1	; 0x03
     818:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if112;
	if112.value = &straight.value;
     81a:	56 97       	sbiw	r26, 0x16	; 22
     81c:	c1 57       	subi	r28, 0x71	; 113
     81e:	dd 4f       	sbci	r29, 0xFD	; 253
     820:	b9 83       	std	Y+1, r27	; 0x01
     822:	a8 83       	st	Y, r26
     824:	cf 58       	subi	r28, 0x8F	; 143
     826:	d2 40       	sbci	r29, 0x02	; 2
     828:	c3 52       	subi	r28, 0x23	; 35
     82a:	de 4f       	sbci	r29, 0xFE	; 254
     82c:	b9 83       	std	Y+1, r27	; 0x01
     82e:	a8 83       	st	Y, r26
     830:	cd 5d       	subi	r28, 0xDD	; 221
     832:	d1 40       	sbci	r29, 0x01	; 1
	if112.next = NULL;
     834:	c1 52       	subi	r28, 0x21	; 33
     836:	de 4f       	sbci	r29, 0xFE	; 254
     838:	19 82       	std	Y+1, r1	; 0x01
     83a:	18 82       	st	Y, r1
     83c:	cf 5d       	subi	r28, 0xDF	; 223
     83e:	d1 40       	sbci	r29, 0x01	; 1
	
	struct rule_element_type if111;
	if111.value = &eLeft.value;
     840:	7e 01       	movw	r14, r28
     842:	bf e1       	ldi	r27, 0x1F	; 31
     844:	eb 1a       	sub	r14, r27
     846:	be ef       	ldi	r27, 0xFE	; 254
     848:	fb 0a       	sbc	r15, r27
     84a:	ea e0       	ldi	r30, 0x0A	; 10
     84c:	8e 0e       	add	r8, r30
     84e:	91 1c       	adc	r9, r1
     850:	d7 01       	movw	r26, r14
     852:	11 96       	adiw	r26, 0x01	; 1
     854:	9c 92       	st	X, r9
     856:	8e 92       	st	-X, r8
	if111.next = &if112;
     858:	ed ed       	ldi	r30, 0xDD	; 221
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	ec 0f       	add	r30, r28
     85e:	fd 1f       	adc	r31, r29
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	fc 93       	st	X, r31
     864:	ee 93       	st	-X, r30
     866:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule11;
	rule11.if_side = &if111;
     868:	14 96       	adiw	r26, 0x04	; 4
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	fc 92       	st	X, r15
     86e:	ee 92       	st	-X, r14
	rule11.then_side = &then11;
     870:	13 96       	adiw	r26, 0x03	; 3
     872:	1c 93       	st	X, r17
     874:	0e 93       	st	-X, r16
     876:	12 97       	sbiw	r26, 0x02	; 2
	rule11.next = NULL;
     878:	15 96       	adiw	r26, 0x05	; 5
     87a:	1c 92       	st	X, r1
     87c:	1e 92       	st	-X, r1
     87e:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 10: if eLeft and slRight then oslRight */
	struct rule_element_type then10;
	then10.value = &oSlRight.value;
     880:	0e 5e       	subi	r16, 0xEE	; 238
     882:	1f 4f       	sbci	r17, 0xFF	; 255
     884:	66 5f       	subi	r22, 0xF6	; 246
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	f8 01       	movw	r30, r16
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	60 83       	st	Z, r22
	then10.next = NULL;
     88e:	13 82       	std	Z+3, r1	; 0x03
     890:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if102;
	if102.value = &slRight.value;
     892:	7e 01       	movw	r14, r28
     894:	f1 e1       	ldi	r31, 0x11	; 17
     896:	ef 1a       	sub	r14, r31
     898:	fe ef       	ldi	r31, 0xFE	; 254
     89a:	ff 0a       	sbc	r15, r31
     89c:	c3 57       	subi	r28, 0x73	; 115
     89e:	dd 4f       	sbci	r29, 0xFD	; 253
     8a0:	c8 80       	ld	r12, Y
     8a2:	d9 80       	ldd	r13, Y+1	; 0x01
     8a4:	cd 58       	subi	r28, 0x8D	; 141
     8a6:	d2 40       	sbci	r29, 0x02	; 2
     8a8:	f7 01       	movw	r30, r14
     8aa:	d1 82       	std	Z+1, r13	; 0x01
     8ac:	c0 82       	st	Z, r12
	if102.next = NULL;
     8ae:	13 82       	std	Z+3, r1	; 0x03
     8b0:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if101;
	if101.value = &eLeft.value;
     8b2:	6e 01       	movw	r12, r28
     8b4:	ed e0       	ldi	r30, 0x0D	; 13
     8b6:	ce 1a       	sub	r12, r30
     8b8:	ee ef       	ldi	r30, 0xFE	; 254
     8ba:	de 0a       	sbc	r13, r30
     8bc:	f6 01       	movw	r30, r12
     8be:	91 82       	std	Z+1, r9	; 0x01
     8c0:	80 82       	st	Z, r8
	if101.next = &if102;
     8c2:	f3 82       	std	Z+3, r15	; 0x03
     8c4:	e2 82       	std	Z+2, r14	; 0x02
	
	struct rule_type rule10;
	rule10.if_side = &if101;
     8c6:	7e 01       	movw	r14, r28
     8c8:	f9 e0       	ldi	r31, 0x09	; 9
     8ca:	ef 1a       	sub	r14, r31
     8cc:	fe ef       	ldi	r31, 0xFE	; 254
     8ce:	ff 0a       	sbc	r15, r31
     8d0:	f7 01       	movw	r30, r14
     8d2:	d1 82       	std	Z+1, r13	; 0x01
     8d4:	c0 82       	st	Z, r12
	rule10.then_side = &then10;
     8d6:	13 83       	std	Z+3, r17	; 0x03
     8d8:	02 83       	std	Z+2, r16	; 0x02
	rule10.next = &rule11;
     8da:	b5 83       	std	Z+5, r27	; 0x05
     8dc:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 9: if eLeft and Right then oSlRight */
	struct rule_element_type then9;
	then9.value = &oSlRight.value;
     8de:	0e 5e       	subi	r16, 0xEE	; 238
     8e0:	1f 4f       	sbci	r17, 0xFF	; 255
     8e2:	d8 01       	movw	r26, r16
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	7c 93       	st	X, r23
     8e8:	6e 93       	st	-X, r22
	then9.next = NULL;
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	1c 92       	st	X, r1
     8ee:	1e 92       	st	-X, r1
     8f0:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if92;
	if92.value = &right.value;
     8f2:	14 96       	adiw	r26, 0x04	; 4
     8f4:	65 ea       	ldi	r22, 0xA5	; 165
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	6c 0f       	add	r22, r28
     8fa:	7d 1f       	adc	r23, r29
     8fc:	66 5f       	subi	r22, 0xF6	; 246
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	11 96       	adiw	r26, 0x01	; 1
     902:	7c 93       	st	X, r23
     904:	6e 93       	st	-X, r22
	if92.next = NULL;
     906:	13 96       	adiw	r26, 0x03	; 3
     908:	1c 92       	st	X, r1
     90a:	1e 92       	st	-X, r1
     90c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if91;
	if91.value = &eLeft.value;
     90e:	6a 5a       	subi	r22, 0xAA	; 170
     910:	7e 4f       	sbci	r23, 0xFE	; 254
     912:	fb 01       	movw	r30, r22
     914:	91 82       	std	Z+1, r9	; 0x01
     916:	80 82       	st	Z, r8
	if91.next = &if92;
     918:	b3 83       	std	Z+3, r27	; 0x03
     91a:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule9;
	rule9.if_side = &if91;
     91c:	18 96       	adiw	r26, 0x08	; 8
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	7c 93       	st	X, r23
     922:	6e 93       	st	-X, r22
	rule9.then_side = &then9;
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	1c 93       	st	X, r17
     928:	0e 93       	st	-X, r16
     92a:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = &rule10;
     92c:	15 96       	adiw	r26, 0x05	; 5
     92e:	fc 92       	st	X, r15
     930:	ee 92       	st	-X, r14
     932:	14 97       	sbiw	r26, 0x04	; 4
 
	/* rule # 8: if eLeft and shRight then oRight */
	struct rule_element_type then8;
	then8.value = &oRight.value;
     934:	66 5f       	subi	r22, 0xF6	; 246
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	46 5f       	subi	r20, 0xF6	; 246
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	fb 01       	movw	r30, r22
     93e:	51 83       	std	Z+1, r21	; 0x01
     940:	40 83       	st	Z, r20
	then8.next = NULL;
     942:	13 82       	std	Z+3, r1	; 0x03
     944:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if82;
	if82.value = &shRight.value;
     946:	7e 01       	movw	r14, r28
     948:	fd ee       	ldi	r31, 0xED	; 237
     94a:	ef 1a       	sub	r14, r31
     94c:	fd ef       	ldi	r31, 0xFD	; 253
     94e:	ff 0a       	sbc	r15, r31
     950:	0b eb       	ldi	r16, 0xBB	; 187
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	0c 0f       	add	r16, r28
     956:	1d 1f       	adc	r17, r29
     958:	06 5f       	subi	r16, 0xF6	; 246
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	f7 01       	movw	r30, r14
     95e:	11 83       	std	Z+1, r17	; 0x01
     960:	00 83       	st	Z, r16
	if82.next = NULL;
     962:	13 82       	std	Z+3, r1	; 0x03
     964:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if81;
	if81.value = &eLeft.value;
     966:	0e 5a       	subi	r16, 0xAE	; 174
     968:	1e 4f       	sbci	r17, 0xFE	; 254
     96a:	f8 01       	movw	r30, r16
     96c:	91 82       	std	Z+1, r9	; 0x01
     96e:	80 82       	st	Z, r8
	if81.next = &if82;
     970:	f3 82       	std	Z+3, r15	; 0x03
     972:	e2 82       	std	Z+2, r14	; 0x02
	
	struct rule_type rule8;
	rule8.if_side = &if81;
     974:	34 96       	adiw	r30, 0x04	; 4
     976:	11 83       	std	Z+1, r17	; 0x01
     978:	00 83       	st	Z, r16
	rule8.then_side = &then8;
     97a:	73 83       	std	Z+3, r23	; 0x03
     97c:	62 83       	std	Z+2, r22	; 0x02
	rule8.next = &rule9;
     97e:	b5 83       	std	Z+5, r27	; 0x05
     980:	a4 83       	std	Z+4, r26	; 0x04
 
	/* rule # 7: if center then oStraight */
	struct rule_element_type then7;
	then7.value = &oStraight.value;
     982:	06 5f       	subi	r16, 0xF6	; 246
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	26 5f       	subi	r18, 0xF6	; 246
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	d8 01       	movw	r26, r16
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	3c 93       	st	X, r19
     990:	2e 93       	st	-X, r18
	then7.next = NULL;
     992:	13 96       	adiw	r26, 0x03	; 3
     994:	1c 92       	st	X, r1
     996:	1e 92       	st	-X, r1
     998:	12 97       	sbiw	r26, 0x02	; 2

 
	struct rule_element_type if71;
	if71.value = &center.value;
     99a:	26 56       	subi	r18, 0x66	; 102
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	ba e0       	ldi	r27, 0x0A	; 10
     9a0:	2b 0e       	add	r2, r27
     9a2:	31 1c       	adc	r3, r1
     9a4:	d9 01       	movw	r26, r18
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	3c 92       	st	X, r3
     9aa:	2e 92       	st	-X, r2
	if71.next = NULL;
     9ac:	13 96       	adiw	r26, 0x03	; 3
     9ae:	1c 92       	st	X, r1
     9b0:	1e 92       	st	-X, r1
     9b2:	12 97       	sbiw	r26, 0x02	; 2
 
	struct rule_type rule7;
	rule7.if_side = &if71;
     9b4:	66 5e       	subi	r22, 0xE6	; 230
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	db 01       	movw	r26, r22
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	3c 93       	st	X, r19
     9be:	2e 93       	st	-X, r18
	rule7.then_side = &then7;
     9c0:	13 96       	adiw	r26, 0x03	; 3
     9c2:	1c 93       	st	X, r17
     9c4:	0e 93       	st	-X, r16
     9c6:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
     9c8:	15 96       	adiw	r26, 0x05	; 5
     9ca:	fc 93       	st	X, r31
     9cc:	ee 93       	st	-X, r30
     9ce:	14 97       	sbiw	r26, 0x04	; 4
 
 
     /* rule # 6: if eRight and straight then oSlLeft */
    struct rule_element_type then6;
    then6.value = &oSlLeft.value;
     9d0:	7e 01       	movw	r14, r28
     9d2:	b1 ed       	ldi	r27, 0xD1	; 209
     9d4:	eb 1a       	sub	r14, r27
     9d6:	bd ef       	ldi	r27, 0xFD	; 253
     9d8:	fb 0a       	sbc	r15, r27
     9da:	0a 96       	adiw	r24, 0x0a	; 10
     9dc:	f7 01       	movw	r30, r14
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
    then6.next = NULL;
     9e2:	13 82       	std	Z+3, r1	; 0x03
     9e4:	12 82       	std	Z+2, r1	; 0x02
    
	struct rule_element_type if62;
	if62.value = &straight.value;
     9e6:	1a 96       	adiw	r26, 0x0a	; 10
     9e8:	c1 57       	subi	r28, 0x71	; 113
     9ea:	dd 4f       	sbci	r29, 0xFD	; 253
     9ec:	c8 80       	ld	r12, Y
     9ee:	d9 80       	ldd	r13, Y+1	; 0x01
     9f0:	cf 58       	subi	r28, 0x8F	; 143
     9f2:	d2 40       	sbci	r29, 0x02	; 2
     9f4:	11 96       	adiw	r26, 0x01	; 1
     9f6:	dc 92       	st	X, r13
     9f8:	ce 92       	st	-X, r12
	if62.next = NULL;
     9fa:	13 96       	adiw	r26, 0x03	; 3
     9fc:	1c 92       	st	X, r1
     9fe:	1e 92       	st	-X, r1
     a00:	12 97       	sbiw	r26, 0x02	; 2
	
    struct rule_element_type if61;
    if61.value = &eRight.value;
     a02:	2e 5e       	subi	r18, 0xEE	; 238
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	1a e0       	ldi	r17, 0x0A	; 10
     a08:	41 0e       	add	r4, r17
     a0a:	51 1c       	adc	r5, r1
     a0c:	f9 01       	movw	r30, r18
     a0e:	51 82       	std	Z+1, r5	; 0x01
     a10:	40 82       	st	Z, r4
	if61.next = &if62;
     a12:	b3 83       	std	Z+3, r27	; 0x03
     a14:	a2 83       	std	Z+2, r26	; 0x02
    
    struct rule_type rule6;
    rule6.if_side = &if61;
     a16:	18 96       	adiw	r26, 0x08	; 8
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	3c 93       	st	X, r19
     a1c:	2e 93       	st	-X, r18
    rule6.then_side = &then6;
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	fc 92       	st	X, r15
     a22:	ee 92       	st	-X, r14
     a24:	12 97       	sbiw	r26, 0x02	; 2
    rule6.next = &rule7;
     a26:	15 96       	adiw	r26, 0x05	; 5
     a28:	7c 93       	st	X, r23
     a2a:	6e 93       	st	-X, r22
     a2c:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 5: if eRight and slLeft then oSlLeft */
    struct rule_element_type then5;
    then5.value = &oSlLeft.value;
     a2e:	26 5f       	subi	r18, 0xF6	; 246
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	f9 01       	movw	r30, r18
     a34:	91 83       	std	Z+1, r25	; 0x01
     a36:	80 83       	st	Z, r24
    then5.next = NULL;
     a38:	13 82       	std	Z+3, r1	; 0x03
     a3a:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if52;
	if52.value = &slLeft.value;
     a3c:	8e 01       	movw	r16, r28
     a3e:	0b 5b       	subi	r16, 0xBB	; 187
     a40:	1d 4f       	sbci	r17, 0xFD	; 253
     a42:	63 e6       	ldi	r22, 0x63	; 99
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	6c 0f       	add	r22, r28
     a48:	7d 1f       	adc	r23, r29
     a4a:	66 5f       	subi	r22, 0xF6	; 246
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	f8 01       	movw	r30, r16
     a50:	71 83       	std	Z+1, r23	; 0x01
     a52:	60 83       	st	Z, r22
	if52.next = NULL;
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	12 82       	std	Z+2, r1	; 0x02
	
    struct rule_element_type if51;
    if51.value = &eRight.value;
     a58:	64 52       	subi	r22, 0x24	; 36
     a5a:	7e 4f       	sbci	r23, 0xFE	; 254
     a5c:	fb 01       	movw	r30, r22
     a5e:	51 82       	std	Z+1, r5	; 0x01
     a60:	40 82       	st	Z, r4
    if51.next = &if52;
     a62:	13 83       	std	Z+3, r17	; 0x03
     a64:	02 83       	std	Z+2, r16	; 0x02
    
    struct rule_type rule5;
    rule5.if_side = &if51;
     a66:	34 96       	adiw	r30, 0x04	; 4
     a68:	71 83       	std	Z+1, r23	; 0x01
     a6a:	60 83       	st	Z, r22
    rule5.then_side = &then5;
     a6c:	33 83       	std	Z+3, r19	; 0x03
     a6e:	22 83       	std	Z+2, r18	; 0x02
    rule5.next = &rule6;
     a70:	b5 83       	std	Z+5, r27	; 0x05
     a72:	a4 83       	std	Z+4, r26	; 0x04
    
    /* rule # 4: if eRight and left then oSlLeft */  
    struct rule_element_type then4;
    then4.value = &oSlLeft.value;
     a74:	66 5f       	subi	r22, 0xF6	; 246
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	db 01       	movw	r26, r22
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	9c 93       	st	X, r25
     a7e:	8e 93       	st	-X, r24
    then4.next = NULL;
     a80:	13 96       	adiw	r26, 0x03	; 3
     a82:	1c 92       	st	X, r1
     a84:	1e 92       	st	-X, r1
     a86:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &left.value;
     a88:	8e 51       	subi	r24, 0x1E	; 30
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	2d e4       	ldi	r18, 0x4D	; 77
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	2c 0f       	add	r18, r28
     a92:	3d 1f       	adc	r19, r29
     a94:	26 5f       	subi	r18, 0xF6	; 246
     a96:	3f 4f       	sbci	r19, 0xFF	; 255
     a98:	dc 01       	movw	r26, r24
     a9a:	11 96       	adiw	r26, 0x01	; 1
     a9c:	3c 93       	st	X, r19
     a9e:	2e 93       	st	-X, r18
    if42.next = NULL;
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	1c 92       	st	X, r1
     aa4:	1e 92       	st	-X, r1
     aa6:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if41;
    if41.value = &eRight.value;
     aa8:	2c 5f       	subi	r18, 0xFC	; 252
     aaa:	3d 4f       	sbci	r19, 0xFD	; 253
     aac:	d9 01       	movw	r26, r18
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	5c 92       	st	X, r5
     ab2:	4e 92       	st	-X, r4
    if41.next = &if42;
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	9c 93       	st	X, r25
     ab8:	8e 93       	st	-X, r24
     aba:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule4;
    rule4.if_side = &if41;
     abc:	08 96       	adiw	r24, 0x08	; 8
     abe:	dc 01       	movw	r26, r24
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	3c 93       	st	X, r19
     ac4:	2e 93       	st	-X, r18
    rule4.then_side = &then4;
     ac6:	13 96       	adiw	r26, 0x03	; 3
     ac8:	7c 93       	st	X, r23
     aca:	6e 93       	st	-X, r22
     acc:	12 97       	sbiw	r26, 0x02	; 2
    rule4.next = &rule5;
     ace:	15 96       	adiw	r26, 0x05	; 5
     ad0:	fc 93       	st	X, r31
     ad2:	ee 93       	st	-X, r30
     ad4:	14 97       	sbiw	r26, 0x04	; 4
	  
    /* rule # 3: if eRight and sharpLeft then left */
    struct rule_element_type then3;
    then3.value = &oLeft.value;
     ad6:	6e 5e       	subi	r22, 0xEE	; 238
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	ba e0       	ldi	r27, 0x0A	; 10
     adc:	ab 0e       	add	r10, r27
     ade:	b1 1c       	adc	r11, r1
     ae0:	fb 01       	movw	r30, r22
     ae2:	b1 82       	std	Z+1, r11	; 0x01
     ae4:	a0 82       	st	Z, r10
    then3.next = NULL;
     ae6:	13 82       	std	Z+3, r1	; 0x03
     ae8:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if32;
    if32.value = &shLeft.value;
     aea:	de 01       	movw	r26, r28
     aec:	a7 59       	subi	r26, 0x97	; 151
     aee:	bd 4f       	sbci	r27, 0xFD	; 253
     af0:	27 e3       	ldi	r18, 0x37	; 55
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	2c 0f       	add	r18, r28
     af6:	3d 1f       	adc	r19, r29
     af8:	26 5f       	subi	r18, 0xF6	; 246
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	3c 93       	st	X, r19
     b00:	2e 93       	st	-X, r18
    if32.next = NULL;
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	1c 92       	st	X, r1
     b06:	1e 92       	st	-X, r1
     b08:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if31;
    if31.value = &eRight.value;
     b0a:	24 5d       	subi	r18, 0xD4	; 212
     b0c:	3d 4f       	sbci	r19, 0xFD	; 253
     b0e:	f9 01       	movw	r30, r18
     b10:	51 82       	std	Z+1, r5	; 0x01
     b12:	40 82       	st	Z, r4
    if31.next = &if32;
     b14:	b3 83       	std	Z+3, r27	; 0x03
     b16:	a2 83       	std	Z+2, r26	; 0x02
    
    struct rule_type rule3;
    rule3.if_side = &if31;
     b18:	18 96       	adiw	r26, 0x08	; 8
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	3c 93       	st	X, r19
     b1e:	2e 93       	st	-X, r18
    rule3.then_side = &then3;
     b20:	13 96       	adiw	r26, 0x03	; 3
     b22:	7c 93       	st	X, r23
     b24:	6e 93       	st	-X, r22
     b26:	12 97       	sbiw	r26, 0x02	; 2
    rule3.next = &rule4;
     b28:	15 96       	adiw	r26, 0x05	; 5
     b2a:	9c 93       	st	X, r25
     b2c:	8e 93       	st	-X, r24
     b2e:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 2: if farLeft then right */
    struct rule_element_type if21;
    if21.value = &farLeft.value;
     b30:	48 96       	adiw	r24, 0x18	; 24
     b32:	21 ed       	ldi	r18, 0xD1	; 209
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	2c 0f       	add	r18, r28
     b38:	3d 1f       	adc	r19, r29
     b3a:	26 5f       	subi	r18, 0xF6	; 246
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	fc 01       	movw	r30, r24
     b40:	31 83       	std	Z+1, r19	; 0x01
     b42:	20 83       	st	Z, r18
    if21.next = NULL;
     b44:	13 82       	std	Z+3, r1	; 0x03
     b46:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type then2;
    then2.value = &oRight.value;
     b48:	20 56       	subi	r18, 0x60	; 96
     b4a:	3e 4f       	sbci	r19, 0xFE	; 254
     b4c:	f9 01       	movw	r30, r18
     b4e:	51 83       	std	Z+1, r21	; 0x01
     b50:	40 83       	st	Z, r20
    then2.next = NULL;
     b52:	13 82       	std	Z+3, r1	; 0x03
     b54:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule2;
    rule2.if_side = &if21;
     b56:	34 96       	adiw	r30, 0x04	; 4
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
    rule2.then_side = &then2;
     b5c:	33 83       	std	Z+3, r19	; 0x03
     b5e:	22 83       	std	Z+2, r18	; 0x02
    rule2.next = &rule3;
     b60:	b5 83       	std	Z+5, r27	; 0x05
     b62:	a4 83       	std	Z+4, r26	; 0x04
    
    /* rule # 1: if farRight then oLeft */
    struct rule_element_type if11;
    if11.value = &farRight.value;
     b64:	0e 96       	adiw	r24, 0x0e	; 14
     b66:	1a e0       	ldi	r17, 0x0A	; 10
     b68:	61 0e       	add	r6, r17
     b6a:	71 1c       	adc	r7, r1
     b6c:	dc 01       	movw	r26, r24
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	7c 92       	st	X, r7
     b72:	6e 92       	st	-X, r6
    if11.next = NULL;
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	1c 92       	st	X, r1
     b78:	1e 92       	st	-X, r1
     b7a:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type then1;
    then1.value = &oLeft.value;
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	bc 92       	st	X, r11
     b82:	ae 92       	st	-X, r10
    then1.next = NULL;
     b84:	13 96       	adiw	r26, 0x03	; 3
     b86:	1c 92       	st	X, r1
     b88:	1e 92       	st	-X, r1
     b8a:	12 97       	sbiw	r26, 0x02	; 2
    
    rule1.if_side = &if11;
     b8c:	9a ab       	std	Y+50, r25	; 0x32
     b8e:	89 ab       	std	Y+49, r24	; 0x31
    rule1.then_side = &then1;
     b90:	bc ab       	std	Y+52, r27	; 0x34
     b92:	ab ab       	std	Y+51, r26	; 0x33
    rule1.next = &rule2;
     b94:	fe ab       	std	Y+54, r31	; 0x36
     b96:	ed ab       	std	Y+53, r30	; 0x35
    
	// pointers to top of lists
    Rule_Base = &rule1;
     b98:	84 55       	subi	r24, 0x54	; 84
     b9a:	92 40       	sbci	r25, 0x02	; 2
     b9c:	90 93 30 02 	sts	0x0230, r25
     ba0:	80 93 2f 02 	sts	0x022F, r24
    System_Inputs = &error;
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	f0 93 2e 02 	sts	0x022E, r31
     bb0:	e0 93 2d 02 	sts	0x022D, r30
    System_Outputs = &servo;
     bb4:	0f 2e       	mov	r0, r31
     bb6:	f1 e2       	ldi	r31, 0x21	; 33
     bb8:	cf 2e       	mov	r12, r31
     bba:	d1 2c       	mov	r13, r1
     bbc:	f0 2d       	mov	r31, r0
     bbe:	cc 0e       	add	r12, r28
     bc0:	dd 1e       	adc	r13, r29
     bc2:	d0 92 2c 02 	sts	0x022C, r13
     bc6:	c0 92 2b 02 	sts	0x022B, r12
    
	// the methods performing the FLC
    fuzzification();
     bca:	81 d0       	rcall	.+258    	; 0xcce <fuzzification>
    rule_evaluation();
     bcc:	a7 d0       	rcall	.+334    	; 0xd1c <rule_evaluation>
    defuzzification();
     bce:	ec d0       	rcall	.+472    	; 0xda8 <defuzzification>
	setServo(servo.value);
     bd0:	8b a5       	ldd	r24, Y+43	; 0x2b
     bd2:	9c a5       	ldd	r25, Y+44	; 0x2c
     bd4:	8e d2       	rcall	.+1308   	; 0x10f2 <setServo>
}
     bd6:	c0 57       	subi	r28, 0x70	; 112
     bd8:	dd 4f       	sbci	r29, 0xFD	; 253
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	3f 90       	pop	r3
     c06:	2f 90       	pop	r2
     c08:	08 95       	ret

00000c0a <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     c0a:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     c0c:	84 85       	ldd	r24, Z+12	; 0x0c
     c0e:	95 85       	ldd	r25, Z+13	; 0x0d
     c10:	9b 01       	movw	r18, r22
     c12:	28 1b       	sub	r18, r24
     c14:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     c16:	86 85       	ldd	r24, Z+14	; 0x0e
     c18:	97 85       	ldd	r25, Z+15	; 0x0f
     c1a:	86 1b       	sub	r24, r22
     c1c:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c1e:	12 16       	cp	r1, r18
     c20:	13 06       	cpc	r1, r19
     c22:	ec f4       	brge	.+58     	; 0xc5e <compute_degree_of_membership+0x54>
     c24:	18 16       	cp	r1, r24
     c26:	19 06       	cpc	r1, r25
     c28:	ec f4       	brge	.+58     	; 0xc64 <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c2a:	60 89       	ldd	r22, Z+16	; 0x10
     c2c:	71 89       	ldd	r23, Z+17	; 0x11
     c2e:	a2 89       	ldd	r26, Z+18	; 0x12
     c30:	b3 89       	ldd	r27, Z+19	; 0x13
     c32:	8a 9f       	mul	r24, r26
     c34:	a0 01       	movw	r20, r0
     c36:	8b 9f       	mul	r24, r27
     c38:	50 0d       	add	r21, r0
     c3a:	9a 9f       	mul	r25, r26
     c3c:	50 0d       	add	r21, r0
     c3e:	11 24       	eor	r1, r1
     c40:	26 9f       	mul	r18, r22
     c42:	c0 01       	movw	r24, r0
     c44:	27 9f       	mul	r18, r23
     c46:	90 0d       	add	r25, r0
     c48:	36 9f       	mul	r19, r22
     c4a:	90 0d       	add	r25, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	48 17       	cp	r20, r24
     c50:	59 07       	cpc	r21, r25
     c52:	0c f4       	brge	.+2      	; 0xc56 <compute_degree_of_membership+0x4c>
     c54:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c56:	84 36       	cpi	r24, 0x64	; 100
     c58:	91 05       	cpc	r25, r1
     c5a:	3c f4       	brge	.+14     	; 0xc6a <compute_degree_of_membership+0x60>
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <compute_degree_of_membership+0x64>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c6a:	84 e6       	ldi	r24, 0x64	; 100
     c6c:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c6e:	93 87       	std	Z+11, r25	; 0x0b
     c70:	82 87       	std	Z+10, r24	; 0x0a
     c72:	08 95       	ret

00000c74 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     c7e:	c6 85       	ldd	r28, Z+14	; 0x0e
     c80:	d7 85       	ldd	r29, Z+15	; 0x0f
     c82:	84 85       	ldd	r24, Z+12	; 0x0c
     c84:	95 85       	ldd	r25, Z+13	; 0x0d
     c86:	c8 1b       	sub	r28, r24
     c88:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     c8a:	22 85       	ldd	r18, Z+10	; 0x0a
     c8c:	33 85       	ldd	r19, Z+11	; 0x0b
     c8e:	60 89       	ldd	r22, Z+16	; 0x10
     c90:	71 89       	ldd	r23, Z+17	; 0x11
     c92:	c9 01       	movw	r24, r18
     c94:	e4 d4       	rcall	.+2504   	; 0x165e <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     c96:	8e 01       	movw	r16, r28
     c98:	06 1b       	sub	r16, r22
     c9a:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     c9c:	62 89       	ldd	r22, Z+18	; 0x12
     c9e:	73 89       	ldd	r23, Z+19	; 0x13
     ca0:	c9 01       	movw	r24, r18
     ca2:	dd d4       	rcall	.+2490   	; 0x165e <__divmodhi4>
    top = base - run_1 - run_2;
     ca4:	06 1b       	sub	r16, r22
     ca6:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     ca8:	c0 0f       	add	r28, r16
     caa:	d1 1f       	adc	r29, r17
     cac:	2c 9f       	mul	r18, r28
     cae:	c0 01       	movw	r24, r0
     cb0:	2d 9f       	mul	r18, r29
     cb2:	90 0d       	add	r25, r0
     cb4:	3c 9f       	mul	r19, r28
     cb6:	90 0d       	add	r25, r0
     cb8:	11 24       	eor	r1, r1
     cba:	99 23       	and	r25, r25
     cbc:	0c f4       	brge	.+2      	; 0xcc0 <compute_area_of_trapezoid+0x4c>
     cbe:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     cd6:	00 91 2d 02 	lds	r16, 0x022D
     cda:	10 91 2e 02 	lds	r17, 0x022E
     cde:	01 15       	cp	r16, r1
     ce0:	11 05       	cpc	r17, r1
     ce2:	b9 f0       	breq	.+46     	; 0xd12 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     ce4:	f8 01       	movw	r30, r16
     ce6:	c4 85       	ldd	r28, Z+12	; 0x0c
     ce8:	d5 85       	ldd	r29, Z+13	; 0x0d
     cea:	20 97       	sbiw	r28, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <fuzzification+0x38>
            if (mf!=NULL) {
     cee:	20 97       	sbiw	r28, 0x00	; 0
     cf0:	29 f0       	breq	.+10     	; 0xcfc <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     cf2:	f8 01       	movw	r30, r16
     cf4:	62 85       	ldd	r22, Z+10	; 0x0a
     cf6:	73 85       	ldd	r23, Z+11	; 0x0b
     cf8:	ce 01       	movw	r24, r28
     cfa:	87 df       	rcall	.-242    	; 0xc0a <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     cfc:	0c 88       	ldd	r0, Y+20	; 0x14
     cfe:	dd 89       	ldd	r29, Y+21	; 0x15
     d00:	c0 2d       	mov	r28, r0
     d02:	20 97       	sbiw	r28, 0x00	; 0
     d04:	a1 f7       	brne	.-24     	; 0xcee <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     d06:	f8 01       	movw	r30, r16
     d08:	06 85       	ldd	r16, Z+14	; 0x0e
     d0a:	17 85       	ldd	r17, Z+15	; 0x0f
     d0c:	01 15       	cp	r16, r1
     d0e:	11 05       	cpc	r17, r1
     d10:	49 f7       	brne	.-46     	; 0xce4 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d24:	c0 91 2f 02 	lds	r28, 0x022F
     d28:	d0 91 30 02 	lds	r29, 0x0230
     d2c:	20 97       	sbiw	r28, 0x00	; 0
     d2e:	b9 f1       	breq	.+110    	; 0xd9e <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d30:	04 e6       	ldi	r16, 0x64	; 100
     d32:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d34:	e8 81       	ld	r30, Y
     d36:	f9 81       	ldd	r31, Y+1	; 0x01
     d38:	30 97       	sbiw	r30, 0x00	; 0
     d3a:	81 f0       	breq	.+32     	; 0xd5c <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d3c:	20 2f       	mov	r18, r16
     d3e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d40:	a0 81       	ld	r26, Z
     d42:	b1 81       	ldd	r27, Z+1	; 0x01
     d44:	8d 91       	ld	r24, X+
     d46:	9c 91       	ld	r25, X
     d48:	82 17       	cp	r24, r18
     d4a:	93 07       	cpc	r25, r19
     d4c:	0c f4       	brge	.+2      	; 0xd50 <rule_evaluation+0x34>
     d4e:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d50:	02 80       	ldd	r0, Z+2	; 0x02
     d52:	f3 81       	ldd	r31, Z+3	; 0x03
     d54:	e0 2d       	mov	r30, r0
     d56:	30 97       	sbiw	r30, 0x00	; 0
     d58:	99 f7       	brne	.-26     	; 0xd40 <rule_evaluation+0x24>
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d5c:	20 2f       	mov	r18, r16
     d5e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d60:	ea 81       	ldd	r30, Y+2	; 0x02
     d62:	fb 81       	ldd	r31, Y+3	; 0x03
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	b1 f0       	breq	.+44     	; 0xd94 <rule_evaluation+0x78>
     d68:	72 2f       	mov	r23, r18
     d6a:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d6c:	a0 81       	ld	r26, Z
     d6e:	b1 81       	ldd	r27, Z+1	; 0x01
     d70:	8d 91       	ld	r24, X+
     d72:	9c 91       	ld	r25, X
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	57 2f       	mov	r21, r23
     d78:	46 2f       	mov	r20, r22
     d7a:	28 17       	cp	r18, r24
     d7c:	39 07       	cpc	r19, r25
     d7e:	14 f4       	brge	.+4      	; 0xd84 <rule_evaluation+0x68>
     d80:	58 2f       	mov	r21, r24
     d82:	49 2f       	mov	r20, r25
     d84:	5c 93       	st	X, r21
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d8a:	02 80       	ldd	r0, Z+2	; 0x02
     d8c:	f3 81       	ldd	r31, Z+3	; 0x03
     d8e:	e0 2d       	mov	r30, r0
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	61 f7       	brne	.-40     	; 0xd6c <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d94:	0c 80       	ldd	r0, Y+4	; 0x04
     d96:	dd 81       	ldd	r29, Y+5	; 0x05
     d98:	c0 2d       	mov	r28, r0
     d9a:	20 97       	sbiw	r28, 0x00	; 0
     d9c:	59 f6       	brne	.-106    	; 0xd34 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <defuzzification+0x26>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <defuzzification+0x28>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <defuzzification+0x2a>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     dd6:	80 91 2b 02 	lds	r24, 0x022B
     dda:	90 91 2c 02 	lds	r25, 0x022C
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	89 2b       	or	r24, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <defuzzification+0x40>
     de6:	84 c0       	rjmp	.+264    	; 0xef0 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	04 84       	ldd	r0, Z+12	; 0x0c
     dee:	f5 85       	ldd	r31, Z+13	; 0x0d
     df0:	e0 2d       	mov	r30, r0
     df2:	fe 83       	std	Y+6, r31	; 0x06
     df4:	ed 83       	std	Y+5, r30	; 0x05
     df6:	ef 2b       	or	r30, r31
     df8:	09 f4       	brne	.+2      	; 0xdfc <defuzzification+0x54>
     dfa:	66 c0       	rjmp	.+204    	; 0xec8 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     dfc:	51 2c       	mov	r5, r1
     dfe:	61 2c       	mov	r6, r1
     e00:	71 2c       	mov	r7, r1
     e02:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     e04:	31 2c       	mov	r3, r1
     e06:	21 2c       	mov	r2, r1
     e08:	19 82       	std	Y+1, r1	; 0x01
     e0a:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	31 df       	rcall	.-414    	; 0xc74 <compute_area_of_trapezoid>
     e12:	bc 01       	movw	r22, r24
     e14:	88 27       	eor	r24, r24
     e16:	77 fd       	sbrc	r23, 7
     e18:	80 95       	com	r24
     e1a:	98 2f       	mov	r25, r24
     e1c:	31 d3       	rcall	.+1634   	; 0x1480 <__floatsisf>
     e1e:	6b 01       	movw	r12, r22
     e20:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e22:	ed 81       	ldd	r30, Y+5	; 0x05
     e24:	fe 81       	ldd	r31, Y+6	; 0x06
     e26:	04 85       	ldd	r16, Z+12	; 0x0c
     e28:	15 85       	ldd	r17, Z+13	; 0x0d
     e2a:	b8 01       	movw	r22, r16
     e2c:	88 27       	eor	r24, r24
     e2e:	77 fd       	sbrc	r23, 7
     e30:	80 95       	com	r24
     e32:	98 2f       	mov	r25, r24
     e34:	25 d3       	rcall	.+1610   	; 0x1480 <__floatsisf>
     e36:	4b 01       	movw	r8, r22
     e38:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e3a:	ed 81       	ldd	r30, Y+5	; 0x05
     e3c:	fe 81       	ldd	r31, Y+6	; 0x06
     e3e:	86 85       	ldd	r24, Z+14	; 0x0e
     e40:	97 85       	ldd	r25, Z+15	; 0x0f
     e42:	80 1b       	sub	r24, r16
     e44:	91 0b       	sbc	r25, r17
     e46:	bc 01       	movw	r22, r24
     e48:	12 f4       	brpl	.+4      	; 0xe4e <defuzzification+0xa6>
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	75 95       	asr	r23
     e50:	67 95       	ror	r22
            centroid = centroid + intermed;
     e52:	88 27       	eor	r24, r24
     e54:	77 fd       	sbrc	r23, 7
     e56:	80 95       	com	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	12 d3       	rcall	.+1572   	; 0x1480 <__floatsisf>
     e5c:	a5 01       	movw	r20, r10
     e5e:	94 01       	movw	r18, r8
     e60:	10 d2       	rcall	.+1056   	; 0x1282 <__addsf3>
     e62:	9b 01       	movw	r18, r22
     e64:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	96 d3       	rcall	.+1836   	; 0x1598 <__mulsf3>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	63 2d       	mov	r22, r3
     e72:	72 2d       	mov	r23, r2
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	04 d2       	rcall	.+1032   	; 0x1282 <__addsf3>
     e7a:	36 2e       	mov	r3, r22
     e7c:	27 2e       	mov	r2, r23
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     e82:	a7 01       	movw	r20, r14
     e84:	96 01       	movw	r18, r12
     e86:	65 2d       	mov	r22, r5
     e88:	76 2d       	mov	r23, r6
     e8a:	87 2d       	mov	r24, r7
     e8c:	94 2d       	mov	r25, r4
     e8e:	f9 d1       	rcall	.+1010   	; 0x1282 <__addsf3>
     e90:	56 2e       	mov	r5, r22
     e92:	67 2e       	mov	r6, r23
     e94:	78 2e       	mov	r7, r24
     e96:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     e98:	ed 81       	ldd	r30, Y+5	; 0x05
     e9a:	fe 81       	ldd	r31, Y+6	; 0x06
     e9c:	04 88       	ldd	r0, Z+20	; 0x14
     e9e:	f5 89       	ldd	r31, Z+21	; 0x15
     ea0:	e0 2d       	mov	r30, r0
     ea2:	fe 83       	std	Y+6, r31	; 0x06
     ea4:	ed 83       	std	Y+5, r30	; 0x05
     ea6:	ef 2b       	or	r30, r31
     ea8:	09 f0       	breq	.+2      	; 0xeac <defuzzification+0x104>
     eaa:	b0 cf       	rjmp	.-160    	; 0xe0c <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     eac:	26 2f       	mov	r18, r22
     eae:	37 2f       	mov	r19, r23
     eb0:	48 2f       	mov	r20, r24
     eb2:	59 2f       	mov	r21, r25
     eb4:	63 2d       	mov	r22, r3
     eb6:	72 2d       	mov	r23, r2
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	46 d2       	rcall	.+1164   	; 0x134a <__divsf3>
     ebe:	26 2f       	mov	r18, r22
     ec0:	37 2f       	mov	r19, r23
     ec2:	48 2f       	mov	r20, r24
     ec4:	59 2f       	mov	r21, r25
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     ed0:	62 2f       	mov	r22, r18
     ed2:	73 2f       	mov	r23, r19
     ed4:	84 2f       	mov	r24, r20
     ed6:	95 2f       	mov	r25, r21
     ed8:	a0 d2       	rcall	.+1344   	; 0x141a <__fixsfsi>
     eda:	eb 81       	ldd	r30, Y+3	; 0x03
     edc:	fc 81       	ldd	r31, Y+4	; 0x04
     ede:	73 87       	std	Z+11, r23	; 0x0b
     ee0:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     ee2:	86 85       	ldd	r24, Z+14	; 0x0e
     ee4:	97 85       	ldd	r25, Z+15	; 0x0f
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	89 2b       	or	r24, r25
     eec:	09 f0       	breq	.+2      	; 0xef0 <defuzzification+0x148>
     eee:	7c cf       	rjmp	.-264    	; 0xde8 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	af 90       	pop	r10
     f10:	9f 90       	pop	r9
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	5f 90       	pop	r5
     f1a:	4f 90       	pop	r4
     f1c:	3f 90       	pop	r3
     f1e:	2f 90       	pop	r2
     f20:	08 95       	ret

00000f22 <__vector_28>:
}

int16_t Get_Measurement(void) //TODO
{
	return 140;
}
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	80 91 ce 00 	lds	r24, 0x00CE
     f3c:	8f 3f       	cpi	r24, 0xFF	; 255
     f3e:	29 f4       	brne	.+10     	; 0xf4a <__vector_28+0x28>
     f40:	10 92 52 02 	sts	0x0252, r1
     f44:	10 92 51 02 	sts	0x0251, r1
     f48:	10 c0       	rjmp	.+32     	; 0xf6a <__vector_28+0x48>
     f4a:	e0 91 51 02 	lds	r30, 0x0251
     f4e:	f0 91 52 02 	lds	r31, 0x0252
     f52:	ef 5c       	subi	r30, 0xCF	; 207
     f54:	fd 4f       	sbci	r31, 0xFD	; 253
     f56:	80 83       	st	Z, r24
     f58:	80 91 51 02 	lds	r24, 0x0251
     f5c:	90 91 52 02 	lds	r25, 0x0252
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 52 02 	sts	0x0252, r25
     f66:	80 93 51 02 	sts	0x0251, r24
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	0f 90       	pop	r0
     f74:	0b be       	out	0x3b, r0	; 59
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <SPI_slaveInit>:
     f80:	80 e4       	ldi	r24, 0x40	; 64
     f82:	84 b9       	out	0x04, r24	; 4
     f84:	80 ec       	ldi	r24, 0xC0	; 192
     f86:	8c bd       	out	0x2c, r24	; 44
     f88:	08 95       	ret

00000f8a <carInit>:
     f8a:	89 d0       	rcall	.+274    	; 0x109e <pwmInit>
     f8c:	f9 df       	rcall	.-14     	; 0xf80 <SPI_slaveInit>
     f8e:	8d ec       	ldi	r24, 0xCD	; 205
     f90:	9a e0       	ldi	r25, 0x0A	; 10
     f92:	94 d0       	rcall	.+296    	; 0x10bc <setESC>
     f94:	84 e6       	ldi	r24, 0x64	; 100
     f96:	9a e0       	ldi	r25, 0x0A	; 10
     f98:	ac d0       	rcall	.+344    	; 0x10f2 <setServo>
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	90 ee       	ldi	r25, 0xE0	; 224
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	80 40       	sbci	r24, 0x00	; 0
     fa4:	90 40       	sbci	r25, 0x00	; 0
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <carInit+0x16>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <carInit+0x20>
     faa:	00 00       	nop
     fac:	08 95       	ret

00000fae <USART1_init>:
     fae:	ec ec       	ldi	r30, 0xCC	; 204
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	11 82       	std	Z+1, r1	; 0x01
     fb4:	10 82       	st	Z, r1
     fb6:	20 e9       	ldi	r18, 0x90	; 144
     fb8:	20 93 c9 00 	sts	0x00C9, r18
     fbc:	2e e0       	ldi	r18, 0x0E	; 14
     fbe:	20 93 ca 00 	sts	0x00CA, r18
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	08 95       	ret

00000fc8 <Sens_info_read>:
     fc8:	e9 ec       	ldi	r30, 0xC9	; 201
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	20 81       	ld	r18, Z
     fce:	2f 77       	andi	r18, 0x7F	; 127
     fd0:	20 83       	st	Z, r18
     fd2:	20 91 31 02 	lds	r18, 0x0231
     fd6:	dc 01       	movw	r26, r24
     fd8:	2c 93       	st	X, r18
     fda:	10 92 52 02 	sts	0x0252, r1
     fde:	10 92 51 02 	sts	0x0251, r1
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24
     fe8:	08 95       	ret

00000fea <__vector_18>:
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
     ffa:	80 91 9c 01 	lds	r24, 0x019C
     ffe:	90 91 9d 01 	lds	r25, 0x019D
    1002:	8b 39       	cpi	r24, 0x9B	; 155
    1004:	26 e9       	ldi	r18, 0x96	; 150
    1006:	92 07       	cpc	r25, r18
    1008:	30 f4       	brcc	.+12     	; 0x1016 <__vector_18+0x2c>
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	90 93 9d 01 	sts	0x019D, r25
    1010:	80 93 9c 01 	sts	0x019C, r24
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <__vector_18+0x3e>
    1016:	80 91 9e 01 	lds	r24, 0x019E
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 93 9e 01 	sts	0x019E, r24
    1020:	10 92 9d 01 	sts	0x019D, r1
    1024:	10 92 9c 01 	sts	0x019C, r1
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <main>:


/* main function
*/
int main (void)
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	60 97       	sbiw	r28, 0x10	; 16
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
	
	
	
	
	
		carInit();
    104c:	9e df       	rcall	.-196    	; 0xf8a <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104e:	2f ef       	ldi	r18, 0xFF	; 255
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	9c e2       	ldi	r25, 0x2C	; 44
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	80 40       	sbci	r24, 0x00	; 0
    1058:	90 40       	sbci	r25, 0x00	; 0
    105a:	e1 f7       	brne	.-8      	; 0x1054 <main+0x1c>
    105c:	00 c0       	rjmp	.+0      	; 0x105e <main+0x26>
    105e:	00 00       	nop

		_delay_ms(1000);
		
		setESC(NEUTRAL+70);
    1060:	83 e1       	ldi	r24, 0x13	; 19
    1062:	9b e0       	ldi	r25, 0x0B	; 11
    1064:	2b d0       	rcall	.+86     	; 0x10bc <setESC>
		
		
		
		sei();
    1066:	78 94       	sei
		DDRA = 0xFF;
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	81 b9       	out	0x01, r24	; 1
		sens_info_ptr = &sensor_info;
		//--end of sensor information
			
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    106c:	87 e0       	ldi	r24, 0x07	; 7
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9e df       	rcall	.-196    	; 0xfae <USART1_init>
			
			}
				cli();
		
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    1072:	0a e8       	ldi	r16, 0x8A	; 138
    1074:	10 e0       	ldi	r17, 0x00	; 0
		
		int distance;
		
		while (1) {
			
			if (counter_UART1_reciever) {			
    1076:	80 91 51 02 	lds	r24, 0x0251
    107a:	90 91 52 02 	lds	r25, 0x0252
    107e:	89 2b       	or	r24, r25
    1080:	29 f0       	breq	.+10     	; 0x108c <main+0x54>
				
			Sens_info_read(sens_info_ptr);
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	a0 df       	rcall	.-192    	; 0xfc8 <Sens_info_read>
						
			PORTA = sensor_info.dist_right_line;			
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	82 b9       	out	0x02, r24	; 2
			
			}
				cli();
    108c:	f8 94       	cli
		
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    108e:	f8 01       	movw	r30, r16
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
			PORTA = sensor_info.dist_right_line;			
			
			}
				cli();
		
				distance = (int) sensor_info.dist_right_line;
    1094:	69 81       	ldd	r22, Y+1	; 0x01
    1096:	70 e0       	ldi	r23, 0x00	; 0
				FLC_steering(OCR1B, distance);
    1098:	18 d8       	rcall	.-4048   	; 0xca <FLC_steering>
				// inputValue = pid_Controller(referenceValue, measurementValue, &pidData);

				sei();
    109a:	78 94       	sei
				
		}
    109c:	ec cf       	rjmp	.-40     	; 0x1076 <main+0x3e>

0000109e <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    109e:	80 e3       	ldi	r24, 0x30	; 48
    10a0:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    10a2:	82 ea       	ldi	r24, 0xA2	; 162
    10a4:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f e8       	ldi	r25, 0x8F	; 143
    10ac:	90 93 87 00 	sts	0x0087, r25
    10b0:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    10b4:	8a e1       	ldi	r24, 0x1A	; 26
    10b6:	80 93 81 00 	sts	0x0081, r24
    10ba:	08 95       	ret

000010bc <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    10bc:	80 36       	cpi	r24, 0x60	; 96
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	92 07       	cpc	r25, r18
    10c2:	3c f4       	brge	.+14     	; 0x10d2 <setESC+0x16>
	{
		OCR1A = MINESC;
    10c4:	8f e5       	ldi	r24, 0x5F	; 95
    10c6:	9a e0       	ldi	r25, 0x0A	; 10
    10c8:	90 93 89 00 	sts	0x0089, r25
    10cc:	80 93 88 00 	sts	0x0088, r24
    10d0:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    10d2:	8b 33       	cpi	r24, 0x3B	; 59
    10d4:	2b e0       	ldi	r18, 0x0B	; 11
    10d6:	92 07       	cpc	r25, r18
    10d8:	3c f0       	brlt	.+14     	; 0x10e8 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    10da:	8b e3       	ldi	r24, 0x3B	; 59
    10dc:	9b e0       	ldi	r25, 0x0B	; 11
    10de:	90 93 89 00 	sts	0x0089, r25
    10e2:	80 93 88 00 	sts	0x0088, r24
    10e6:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    10e8:	90 93 89 00 	sts	0x0089, r25
    10ec:	80 93 88 00 	sts	0x0088, r24
    10f0:	08 95       	ret

000010f2 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    10f2:	87 3e       	cpi	r24, 0xE7	; 231
    10f4:	27 e0       	ldi	r18, 0x07	; 7
    10f6:	92 07       	cpc	r25, r18
    10f8:	3c f4       	brge	.+14     	; 0x1108 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    10fa:	86 ee       	ldi	r24, 0xE6	; 230
    10fc:	97 e0       	ldi	r25, 0x07	; 7
    10fe:	90 93 8b 00 	sts	0x008B, r25
    1102:	80 93 8a 00 	sts	0x008A, r24
    1106:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1108:	8f 33       	cpi	r24, 0x3F	; 63
    110a:	2c e0       	ldi	r18, 0x0C	; 12
    110c:	92 07       	cpc	r25, r18
    110e:	3c f0       	brlt	.+14     	; 0x111e <setServo+0x2c>

		OCR1B = MAXLEFT;
    1110:	8f e3       	ldi	r24, 0x3F	; 63
    1112:	9c e0       	ldi	r25, 0x0C	; 12
    1114:	90 93 8b 00 	sts	0x008B, r25
    1118:	80 93 8a 00 	sts	0x008A, r24
    111c:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    111e:	90 93 8b 00 	sts	0x008B, r25
    1122:	80 93 8a 00 	sts	0x008A, r24
    1126:	08 95       	ret

00001128 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	0b b6       	in	r0, 0x3b	; 59
    1134:	0f 92       	push	r0
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1148:	80 91 29 02 	lds	r24, 0x0229
    114c:	90 91 2a 02 	lds	r25, 0x022A
    1150:	80 34       	cpi	r24, 0x40	; 64
    1152:	91 05       	cpc	r25, r1
    1154:	31 f4       	brne	.+12     	; 0x1162 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 5f 02 	sts	0x025F, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    115c:	80 91 c6 00 	lds	r24, 0x00C6
    1160:	16 c0       	rjmp	.+44     	; 0x118e <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1162:	80 34       	cpi	r24, 0x40	; 64
    1164:	91 05       	cpc	r25, r1
    1166:	e8 f4       	brcc	.+58     	; 0x11a2 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1168:	e7 e2       	ldi	r30, 0x27	; 39
    116a:	f2 e0       	ldi	r31, 0x02	; 2
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	40 91 c6 00 	lds	r20, 0x00C6
    1174:	d9 01       	movw	r26, r18
    1176:	ab 51       	subi	r26, 0x1B	; 27
    1178:	be 4f       	sbci	r27, 0xFE	; 254
    117a:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	31 83       	std	Z+1, r19	; 0x01
    1182:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	90 93 2a 02 	sts	0x022A, r25
    118a:	80 93 29 02 	sts	0x0229, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    118e:	80 91 29 02 	lds	r24, 0x0229
    1192:	90 91 2a 02 	lds	r25, 0x022A
    1196:	80 34       	cpi	r24, 0x40	; 64
    1198:	91 05       	cpc	r25, r1
    119a:	19 f4       	brne	.+6      	; 0x11a2 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 5d 02 	sts	0x025D, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    11a2:	80 91 27 02 	lds	r24, 0x0227
    11a6:	90 91 28 02 	lds	r25, 0x0228
    11aa:	80 34       	cpi	r24, 0x40	; 64
    11ac:	91 05       	cpc	r25, r1
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    11b0:	10 92 28 02 	sts	0x0228, r1
    11b4:	10 92 27 02 	sts	0x0227, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 5c 02 	sts	0x025C, r24
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0b be       	out	0x3b, r0	; 59
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_22>:




ISR(USART0_TX_vect)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	0b b6       	in	r0, 0x3b	; 59
    11ea:	0f 92       	push	r0
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    11f4:	80 91 e3 01 	lds	r24, 0x01E3
    11f8:	90 91 e4 01 	lds	r25, 0x01E4
    11fc:	80 34       	cpi	r24, 0x40	; 64
    11fe:	91 05       	cpc	r25, r1
    1200:	19 f4       	brne	.+6      	; 0x1208 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1202:	10 92 5b 02 	sts	0x025B, r1
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1208:	89 2b       	or	r24, r25
    120a:	b9 f0       	breq	.+46     	; 0x123a <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    120c:	e0 91 df 01 	lds	r30, 0x01DF
    1210:	f0 91 e0 01 	lds	r31, 0x01E0
    1214:	e1 56       	subi	r30, 0x61	; 97
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	80 81       	ld	r24, Z
    121a:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    121e:	ef ed       	ldi	r30, 0xDF	; 223
    1220:	f1 e0       	ldi	r31, 0x01	; 1
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    122c:	e3 ee       	ldi	r30, 0xE3	; 227
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    123a:	80 91 df 01 	lds	r24, 0x01DF
    123e:	90 91 e0 01 	lds	r25, 0x01E0
    1242:	80 34       	cpi	r24, 0x40	; 64
    1244:	91 05       	cpc	r25, r1
    1246:	21 f4       	brne	.+8      	; 0x1250 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1248:	10 92 e0 01 	sts	0x01E0, r1
    124c:	10 92 df 01 	sts	0x01DF, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1250:	80 91 e3 01 	lds	r24, 0x01E3
    1254:	90 91 e4 01 	lds	r25, 0x01E4
    1258:	89 2b       	or	r24, r25
    125a:	39 f4       	brne	.+14     	; 0x126a <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    125c:	10 92 5e 02 	sts	0x025E, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1260:	e1 ec       	ldi	r30, 0xC1	; 193
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 7b       	andi	r24, 0xBF	; 191
    1268:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	0f 90       	pop	r0
    1274:	0b be       	out	0x3b, r0	; 59
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__subsf3>:
    1280:	50 58       	subi	r21, 0x80	; 128

00001282 <__addsf3>:
    1282:	bb 27       	eor	r27, r27
    1284:	aa 27       	eor	r26, r26
    1286:	0e d0       	rcall	.+28     	; 0x12a4 <__addsf3x>
    1288:	4d c1       	rjmp	.+666    	; 0x1524 <__fp_round>
    128a:	3e d1       	rcall	.+636    	; 0x1508 <__fp_pscA>
    128c:	30 f0       	brcs	.+12     	; 0x129a <__addsf3+0x18>
    128e:	43 d1       	rcall	.+646    	; 0x1516 <__fp_pscB>
    1290:	20 f0       	brcs	.+8      	; 0x129a <__addsf3+0x18>
    1292:	31 f4       	brne	.+12     	; 0x12a0 <__addsf3+0x1e>
    1294:	9f 3f       	cpi	r25, 0xFF	; 255
    1296:	11 f4       	brne	.+4      	; 0x129c <__addsf3+0x1a>
    1298:	1e f4       	brtc	.+6      	; 0x12a0 <__addsf3+0x1e>
    129a:	33 c1       	rjmp	.+614    	; 0x1502 <__fp_nan>
    129c:	0e f4       	brtc	.+2      	; 0x12a0 <__addsf3+0x1e>
    129e:	e0 95       	com	r30
    12a0:	e7 fb       	bst	r30, 7
    12a2:	29 c1       	rjmp	.+594    	; 0x14f6 <__fp_inf>

000012a4 <__addsf3x>:
    12a4:	e9 2f       	mov	r30, r25
    12a6:	4f d1       	rcall	.+670    	; 0x1546 <__fp_split3>
    12a8:	80 f3       	brcs	.-32     	; 0x128a <__addsf3+0x8>
    12aa:	ba 17       	cp	r27, r26
    12ac:	62 07       	cpc	r22, r18
    12ae:	73 07       	cpc	r23, r19
    12b0:	84 07       	cpc	r24, r20
    12b2:	95 07       	cpc	r25, r21
    12b4:	18 f0       	brcs	.+6      	; 0x12bc <__addsf3x+0x18>
    12b6:	71 f4       	brne	.+28     	; 0x12d4 <__addsf3x+0x30>
    12b8:	9e f5       	brtc	.+102    	; 0x1320 <__addsf3x+0x7c>
    12ba:	67 c1       	rjmp	.+718    	; 0x158a <__fp_zero>
    12bc:	0e f4       	brtc	.+2      	; 0x12c0 <__addsf3x+0x1c>
    12be:	e0 95       	com	r30
    12c0:	0b 2e       	mov	r0, r27
    12c2:	ba 2f       	mov	r27, r26
    12c4:	a0 2d       	mov	r26, r0
    12c6:	0b 01       	movw	r0, r22
    12c8:	b9 01       	movw	r22, r18
    12ca:	90 01       	movw	r18, r0
    12cc:	0c 01       	movw	r0, r24
    12ce:	ca 01       	movw	r24, r20
    12d0:	a0 01       	movw	r20, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	ff 27       	eor	r31, r31
    12d6:	59 1b       	sub	r21, r25
    12d8:	99 f0       	breq	.+38     	; 0x1300 <__addsf3x+0x5c>
    12da:	59 3f       	cpi	r21, 0xF9	; 249
    12dc:	50 f4       	brcc	.+20     	; 0x12f2 <__addsf3x+0x4e>
    12de:	50 3e       	cpi	r21, 0xE0	; 224
    12e0:	68 f1       	brcs	.+90     	; 0x133c <__addsf3x+0x98>
    12e2:	1a 16       	cp	r1, r26
    12e4:	f0 40       	sbci	r31, 0x00	; 0
    12e6:	a2 2f       	mov	r26, r18
    12e8:	23 2f       	mov	r18, r19
    12ea:	34 2f       	mov	r19, r20
    12ec:	44 27       	eor	r20, r20
    12ee:	58 5f       	subi	r21, 0xF8	; 248
    12f0:	f3 cf       	rjmp	.-26     	; 0x12d8 <__addsf3x+0x34>
    12f2:	46 95       	lsr	r20
    12f4:	37 95       	ror	r19
    12f6:	27 95       	ror	r18
    12f8:	a7 95       	ror	r26
    12fa:	f0 40       	sbci	r31, 0x00	; 0
    12fc:	53 95       	inc	r21
    12fe:	c9 f7       	brne	.-14     	; 0x12f2 <__addsf3x+0x4e>
    1300:	7e f4       	brtc	.+30     	; 0x1320 <__addsf3x+0x7c>
    1302:	1f 16       	cp	r1, r31
    1304:	ba 0b       	sbc	r27, r26
    1306:	62 0b       	sbc	r22, r18
    1308:	73 0b       	sbc	r23, r19
    130a:	84 0b       	sbc	r24, r20
    130c:	ba f0       	brmi	.+46     	; 0x133c <__addsf3x+0x98>
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	a1 f0       	breq	.+40     	; 0x133a <__addsf3x+0x96>
    1312:	ff 0f       	add	r31, r31
    1314:	bb 1f       	adc	r27, r27
    1316:	66 1f       	adc	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	c2 f7       	brpl	.-16     	; 0x130e <__addsf3x+0x6a>
    131e:	0e c0       	rjmp	.+28     	; 0x133c <__addsf3x+0x98>
    1320:	ba 0f       	add	r27, r26
    1322:	62 1f       	adc	r22, r18
    1324:	73 1f       	adc	r23, r19
    1326:	84 1f       	adc	r24, r20
    1328:	48 f4       	brcc	.+18     	; 0x133c <__addsf3x+0x98>
    132a:	87 95       	ror	r24
    132c:	77 95       	ror	r23
    132e:	67 95       	ror	r22
    1330:	b7 95       	ror	r27
    1332:	f7 95       	ror	r31
    1334:	9e 3f       	cpi	r25, 0xFE	; 254
    1336:	08 f0       	brcs	.+2      	; 0x133a <__addsf3x+0x96>
    1338:	b3 cf       	rjmp	.-154    	; 0x12a0 <__addsf3+0x1e>
    133a:	93 95       	inc	r25
    133c:	88 0f       	add	r24, r24
    133e:	08 f0       	brcs	.+2      	; 0x1342 <__addsf3x+0x9e>
    1340:	99 27       	eor	r25, r25
    1342:	ee 0f       	add	r30, r30
    1344:	97 95       	ror	r25
    1346:	87 95       	ror	r24
    1348:	08 95       	ret

0000134a <__divsf3>:
    134a:	0c d0       	rcall	.+24     	; 0x1364 <__divsf3x>
    134c:	eb c0       	rjmp	.+470    	; 0x1524 <__fp_round>
    134e:	e3 d0       	rcall	.+454    	; 0x1516 <__fp_pscB>
    1350:	40 f0       	brcs	.+16     	; 0x1362 <__divsf3+0x18>
    1352:	da d0       	rcall	.+436    	; 0x1508 <__fp_pscA>
    1354:	30 f0       	brcs	.+12     	; 0x1362 <__divsf3+0x18>
    1356:	21 f4       	brne	.+8      	; 0x1360 <__divsf3+0x16>
    1358:	5f 3f       	cpi	r21, 0xFF	; 255
    135a:	19 f0       	breq	.+6      	; 0x1362 <__divsf3+0x18>
    135c:	cc c0       	rjmp	.+408    	; 0x14f6 <__fp_inf>
    135e:	51 11       	cpse	r21, r1
    1360:	15 c1       	rjmp	.+554    	; 0x158c <__fp_szero>
    1362:	cf c0       	rjmp	.+414    	; 0x1502 <__fp_nan>

00001364 <__divsf3x>:
    1364:	f0 d0       	rcall	.+480    	; 0x1546 <__fp_split3>
    1366:	98 f3       	brcs	.-26     	; 0x134e <__divsf3+0x4>

00001368 <__divsf3_pse>:
    1368:	99 23       	and	r25, r25
    136a:	c9 f3       	breq	.-14     	; 0x135e <__divsf3+0x14>
    136c:	55 23       	and	r21, r21
    136e:	b1 f3       	breq	.-20     	; 0x135c <__divsf3+0x12>
    1370:	95 1b       	sub	r25, r21
    1372:	55 0b       	sbc	r21, r21
    1374:	bb 27       	eor	r27, r27
    1376:	aa 27       	eor	r26, r26
    1378:	62 17       	cp	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	38 f0       	brcs	.+14     	; 0x138e <__divsf3_pse+0x26>
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	44 1f       	adc	r20, r20
    138a:	aa 1f       	adc	r26, r26
    138c:	a9 f3       	breq	.-22     	; 0x1378 <__divsf3_pse+0x10>
    138e:	33 d0       	rcall	.+102    	; 0x13f6 <__divsf3_pse+0x8e>
    1390:	0e 2e       	mov	r0, r30
    1392:	3a f0       	brmi	.+14     	; 0x13a2 <__divsf3_pse+0x3a>
    1394:	e0 e8       	ldi	r30, 0x80	; 128
    1396:	30 d0       	rcall	.+96     	; 0x13f8 <__divsf3_pse+0x90>
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	e6 95       	lsr	r30
    139e:	00 1c       	adc	r0, r0
    13a0:	ca f7       	brpl	.-14     	; 0x1394 <__divsf3_pse+0x2c>
    13a2:	29 d0       	rcall	.+82     	; 0x13f6 <__divsf3_pse+0x8e>
    13a4:	fe 2f       	mov	r31, r30
    13a6:	27 d0       	rcall	.+78     	; 0x13f6 <__divsf3_pse+0x8e>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	bb 1f       	adc	r27, r27
    13b0:	26 17       	cp	r18, r22
    13b2:	37 07       	cpc	r19, r23
    13b4:	48 07       	cpc	r20, r24
    13b6:	ab 07       	cpc	r26, r27
    13b8:	b0 e8       	ldi	r27, 0x80	; 128
    13ba:	09 f0       	breq	.+2      	; 0x13be <__divsf3_pse+0x56>
    13bc:	bb 0b       	sbc	r27, r27
    13be:	80 2d       	mov	r24, r0
    13c0:	bf 01       	movw	r22, r30
    13c2:	ff 27       	eor	r31, r31
    13c4:	93 58       	subi	r25, 0x83	; 131
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	2a f0       	brmi	.+10     	; 0x13d4 <__divsf3_pse+0x6c>
    13ca:	9e 3f       	cpi	r25, 0xFE	; 254
    13cc:	51 05       	cpc	r21, r1
    13ce:	68 f0       	brcs	.+26     	; 0x13ea <__divsf3_pse+0x82>
    13d0:	92 c0       	rjmp	.+292    	; 0x14f6 <__fp_inf>
    13d2:	dc c0       	rjmp	.+440    	; 0x158c <__fp_szero>
    13d4:	5f 3f       	cpi	r21, 0xFF	; 255
    13d6:	ec f3       	brlt	.-6      	; 0x13d2 <__divsf3_pse+0x6a>
    13d8:	98 3e       	cpi	r25, 0xE8	; 232
    13da:	dc f3       	brlt	.-10     	; 0x13d2 <__divsf3_pse+0x6a>
    13dc:	86 95       	lsr	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b7 95       	ror	r27
    13e4:	f7 95       	ror	r31
    13e6:	9f 5f       	subi	r25, 0xFF	; 255
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <__divsf3_pse+0x74>
    13ea:	88 0f       	add	r24, r24
    13ec:	91 1d       	adc	r25, r1
    13ee:	96 95       	lsr	r25
    13f0:	87 95       	ror	r24
    13f2:	97 f9       	bld	r25, 7
    13f4:	08 95       	ret
    13f6:	e1 e0       	ldi	r30, 0x01	; 1
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	bb 1f       	adc	r27, r27
    1400:	62 17       	cp	r22, r18
    1402:	73 07       	cpc	r23, r19
    1404:	84 07       	cpc	r24, r20
    1406:	ba 07       	cpc	r27, r26
    1408:	20 f0       	brcs	.+8      	; 0x1412 <__divsf3_pse+0xaa>
    140a:	62 1b       	sub	r22, r18
    140c:	73 0b       	sbc	r23, r19
    140e:	84 0b       	sbc	r24, r20
    1410:	ba 0b       	sbc	r27, r26
    1412:	ee 1f       	adc	r30, r30
    1414:	88 f7       	brcc	.-30     	; 0x13f8 <__divsf3_pse+0x90>
    1416:	e0 95       	com	r30
    1418:	08 95       	ret

0000141a <__fixsfsi>:
    141a:	04 d0       	rcall	.+8      	; 0x1424 <__fixunssfsi>
    141c:	68 94       	set
    141e:	b1 11       	cpse	r27, r1
    1420:	b5 c0       	rjmp	.+362    	; 0x158c <__fp_szero>
    1422:	08 95       	ret

00001424 <__fixunssfsi>:
    1424:	98 d0       	rcall	.+304    	; 0x1556 <__fp_splitA>
    1426:	88 f0       	brcs	.+34     	; 0x144a <__fixunssfsi+0x26>
    1428:	9f 57       	subi	r25, 0x7F	; 127
    142a:	90 f0       	brcs	.+36     	; 0x1450 <__fixunssfsi+0x2c>
    142c:	b9 2f       	mov	r27, r25
    142e:	99 27       	eor	r25, r25
    1430:	b7 51       	subi	r27, 0x17	; 23
    1432:	a0 f0       	brcs	.+40     	; 0x145c <__fixunssfsi+0x38>
    1434:	d1 f0       	breq	.+52     	; 0x146a <__fixunssfsi+0x46>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	1a f0       	brmi	.+6      	; 0x1446 <__fixunssfsi+0x22>
    1440:	ba 95       	dec	r27
    1442:	c9 f7       	brne	.-14     	; 0x1436 <__fixunssfsi+0x12>
    1444:	12 c0       	rjmp	.+36     	; 0x146a <__fixunssfsi+0x46>
    1446:	b1 30       	cpi	r27, 0x01	; 1
    1448:	81 f0       	breq	.+32     	; 0x146a <__fixunssfsi+0x46>
    144a:	9f d0       	rcall	.+318    	; 0x158a <__fp_zero>
    144c:	b1 e0       	ldi	r27, 0x01	; 1
    144e:	08 95       	ret
    1450:	9c c0       	rjmp	.+312    	; 0x158a <__fp_zero>
    1452:	67 2f       	mov	r22, r23
    1454:	78 2f       	mov	r23, r24
    1456:	88 27       	eor	r24, r24
    1458:	b8 5f       	subi	r27, 0xF8	; 248
    145a:	39 f0       	breq	.+14     	; 0x146a <__fixunssfsi+0x46>
    145c:	b9 3f       	cpi	r27, 0xF9	; 249
    145e:	cc f3       	brlt	.-14     	; 0x1452 <__fixunssfsi+0x2e>
    1460:	86 95       	lsr	r24
    1462:	77 95       	ror	r23
    1464:	67 95       	ror	r22
    1466:	b3 95       	inc	r27
    1468:	d9 f7       	brne	.-10     	; 0x1460 <__fixunssfsi+0x3c>
    146a:	3e f4       	brtc	.+14     	; 0x147a <__fixunssfsi+0x56>
    146c:	90 95       	com	r25
    146e:	80 95       	com	r24
    1470:	70 95       	com	r23
    1472:	61 95       	neg	r22
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__floatunsisf>:
    147c:	e8 94       	clt
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <__floatsisf+0x12>

00001480 <__floatsisf>:
    1480:	97 fb       	bst	r25, 7
    1482:	3e f4       	brtc	.+14     	; 0x1492 <__floatsisf+0x12>
    1484:	90 95       	com	r25
    1486:	80 95       	com	r24
    1488:	70 95       	com	r23
    148a:	61 95       	neg	r22
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	99 23       	and	r25, r25
    1494:	a9 f0       	breq	.+42     	; 0x14c0 <__floatsisf+0x40>
    1496:	f9 2f       	mov	r31, r25
    1498:	96 e9       	ldi	r25, 0x96	; 150
    149a:	bb 27       	eor	r27, r27
    149c:	93 95       	inc	r25
    149e:	f6 95       	lsr	r31
    14a0:	87 95       	ror	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f1 11       	cpse	r31, r1
    14aa:	f8 cf       	rjmp	.-16     	; 0x149c <__floatsisf+0x1c>
    14ac:	fa f4       	brpl	.+62     	; 0x14ec <__floatsisf+0x6c>
    14ae:	bb 0f       	add	r27, r27
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__floatsisf+0x36>
    14b2:	60 ff       	sbrs	r22, 0
    14b4:	1b c0       	rjmp	.+54     	; 0x14ec <__floatsisf+0x6c>
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	16 c0       	rjmp	.+44     	; 0x14ec <__floatsisf+0x6c>
    14c0:	88 23       	and	r24, r24
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <__floatsisf+0x48>
    14c4:	96 e9       	ldi	r25, 0x96	; 150
    14c6:	11 c0       	rjmp	.+34     	; 0x14ea <__floatsisf+0x6a>
    14c8:	77 23       	and	r23, r23
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <__floatsisf+0x54>
    14cc:	9e e8       	ldi	r25, 0x8E	; 142
    14ce:	87 2f       	mov	r24, r23
    14d0:	76 2f       	mov	r23, r22
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <__floatsisf+0x5e>
    14d4:	66 23       	and	r22, r22
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <__floatsisf+0x74>
    14d8:	96 e8       	ldi	r25, 0x86	; 134
    14da:	86 2f       	mov	r24, r22
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	2a f0       	brmi	.+10     	; 0x14ec <__floatsisf+0x6c>
    14e2:	9a 95       	dec	r25
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	da f7       	brpl	.-10     	; 0x14e2 <__floatsisf+0x62>
    14ec:	88 0f       	add	r24, r24
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret

000014f6 <__fp_inf>:
    14f6:	97 f9       	bld	r25, 7
    14f8:	9f 67       	ori	r25, 0x7F	; 127
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	08 95       	ret

00001502 <__fp_nan>:
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	80 ec       	ldi	r24, 0xC0	; 192
    1506:	08 95       	ret

00001508 <__fp_pscA>:
    1508:	00 24       	eor	r0, r0
    150a:	0a 94       	dec	r0
    150c:	16 16       	cp	r1, r22
    150e:	17 06       	cpc	r1, r23
    1510:	18 06       	cpc	r1, r24
    1512:	09 06       	cpc	r0, r25
    1514:	08 95       	ret

00001516 <__fp_pscB>:
    1516:	00 24       	eor	r0, r0
    1518:	0a 94       	dec	r0
    151a:	12 16       	cp	r1, r18
    151c:	13 06       	cpc	r1, r19
    151e:	14 06       	cpc	r1, r20
    1520:	05 06       	cpc	r0, r21
    1522:	08 95       	ret

00001524 <__fp_round>:
    1524:	09 2e       	mov	r0, r25
    1526:	03 94       	inc	r0
    1528:	00 0c       	add	r0, r0
    152a:	11 f4       	brne	.+4      	; 0x1530 <__fp_round+0xc>
    152c:	88 23       	and	r24, r24
    152e:	52 f0       	brmi	.+20     	; 0x1544 <__fp_round+0x20>
    1530:	bb 0f       	add	r27, r27
    1532:	40 f4       	brcc	.+16     	; 0x1544 <__fp_round+0x20>
    1534:	bf 2b       	or	r27, r31
    1536:	11 f4       	brne	.+4      	; 0x153c <__fp_round+0x18>
    1538:	60 ff       	sbrs	r22, 0
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <__fp_round+0x20>
    153c:	6f 5f       	subi	r22, 0xFF	; 255
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__fp_split3>:
    1546:	57 fd       	sbrc	r21, 7
    1548:	90 58       	subi	r25, 0x80	; 128
    154a:	44 0f       	add	r20, r20
    154c:	55 1f       	adc	r21, r21
    154e:	59 f0       	breq	.+22     	; 0x1566 <__fp_splitA+0x10>
    1550:	5f 3f       	cpi	r21, 0xFF	; 255
    1552:	71 f0       	breq	.+28     	; 0x1570 <__fp_splitA+0x1a>
    1554:	47 95       	ror	r20

00001556 <__fp_splitA>:
    1556:	88 0f       	add	r24, r24
    1558:	97 fb       	bst	r25, 7
    155a:	99 1f       	adc	r25, r25
    155c:	61 f0       	breq	.+24     	; 0x1576 <__fp_splitA+0x20>
    155e:	9f 3f       	cpi	r25, 0xFF	; 255
    1560:	79 f0       	breq	.+30     	; 0x1580 <__fp_splitA+0x2a>
    1562:	87 95       	ror	r24
    1564:	08 95       	ret
    1566:	12 16       	cp	r1, r18
    1568:	13 06       	cpc	r1, r19
    156a:	14 06       	cpc	r1, r20
    156c:	55 1f       	adc	r21, r21
    156e:	f2 cf       	rjmp	.-28     	; 0x1554 <__fp_split3+0xe>
    1570:	46 95       	lsr	r20
    1572:	f1 df       	rcall	.-30     	; 0x1556 <__fp_splitA>
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <__fp_splitA+0x30>
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	18 06       	cpc	r1, r24
    157c:	99 1f       	adc	r25, r25
    157e:	f1 cf       	rjmp	.-30     	; 0x1562 <__fp_splitA+0xc>
    1580:	86 95       	lsr	r24
    1582:	71 05       	cpc	r23, r1
    1584:	61 05       	cpc	r22, r1
    1586:	08 94       	sec
    1588:	08 95       	ret

0000158a <__fp_zero>:
    158a:	e8 94       	clt

0000158c <__fp_szero>:
    158c:	bb 27       	eor	r27, r27
    158e:	66 27       	eor	r22, r22
    1590:	77 27       	eor	r23, r23
    1592:	cb 01       	movw	r24, r22
    1594:	97 f9       	bld	r25, 7
    1596:	08 95       	ret

00001598 <__mulsf3>:
    1598:	0b d0       	rcall	.+22     	; 0x15b0 <__mulsf3x>
    159a:	c4 cf       	rjmp	.-120    	; 0x1524 <__fp_round>
    159c:	b5 df       	rcall	.-150    	; 0x1508 <__fp_pscA>
    159e:	28 f0       	brcs	.+10     	; 0x15aa <__mulsf3+0x12>
    15a0:	ba df       	rcall	.-140    	; 0x1516 <__fp_pscB>
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <__mulsf3+0x12>
    15a4:	95 23       	and	r25, r21
    15a6:	09 f0       	breq	.+2      	; 0x15aa <__mulsf3+0x12>
    15a8:	a6 cf       	rjmp	.-180    	; 0x14f6 <__fp_inf>
    15aa:	ab cf       	rjmp	.-170    	; 0x1502 <__fp_nan>
    15ac:	11 24       	eor	r1, r1
    15ae:	ee cf       	rjmp	.-36     	; 0x158c <__fp_szero>

000015b0 <__mulsf3x>:
    15b0:	ca df       	rcall	.-108    	; 0x1546 <__fp_split3>
    15b2:	a0 f3       	brcs	.-24     	; 0x159c <__mulsf3+0x4>

000015b4 <__mulsf3_pse>:
    15b4:	95 9f       	mul	r25, r21
    15b6:	d1 f3       	breq	.-12     	; 0x15ac <__mulsf3+0x14>
    15b8:	95 0f       	add	r25, r21
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	55 1f       	adc	r21, r21
    15be:	62 9f       	mul	r22, r18
    15c0:	f0 01       	movw	r30, r0
    15c2:	72 9f       	mul	r23, r18
    15c4:	bb 27       	eor	r27, r27
    15c6:	f0 0d       	add	r31, r0
    15c8:	b1 1d       	adc	r27, r1
    15ca:	63 9f       	mul	r22, r19
    15cc:	aa 27       	eor	r26, r26
    15ce:	f0 0d       	add	r31, r0
    15d0:	b1 1d       	adc	r27, r1
    15d2:	aa 1f       	adc	r26, r26
    15d4:	64 9f       	mul	r22, r20
    15d6:	66 27       	eor	r22, r22
    15d8:	b0 0d       	add	r27, r0
    15da:	a1 1d       	adc	r26, r1
    15dc:	66 1f       	adc	r22, r22
    15de:	82 9f       	mul	r24, r18
    15e0:	22 27       	eor	r18, r18
    15e2:	b0 0d       	add	r27, r0
    15e4:	a1 1d       	adc	r26, r1
    15e6:	62 1f       	adc	r22, r18
    15e8:	73 9f       	mul	r23, r19
    15ea:	b0 0d       	add	r27, r0
    15ec:	a1 1d       	adc	r26, r1
    15ee:	62 1f       	adc	r22, r18
    15f0:	83 9f       	mul	r24, r19
    15f2:	a0 0d       	add	r26, r0
    15f4:	61 1d       	adc	r22, r1
    15f6:	22 1f       	adc	r18, r18
    15f8:	74 9f       	mul	r23, r20
    15fa:	33 27       	eor	r19, r19
    15fc:	a0 0d       	add	r26, r0
    15fe:	61 1d       	adc	r22, r1
    1600:	23 1f       	adc	r18, r19
    1602:	84 9f       	mul	r24, r20
    1604:	60 0d       	add	r22, r0
    1606:	21 1d       	adc	r18, r1
    1608:	82 2f       	mov	r24, r18
    160a:	76 2f       	mov	r23, r22
    160c:	6a 2f       	mov	r22, r26
    160e:	11 24       	eor	r1, r1
    1610:	9f 57       	subi	r25, 0x7F	; 127
    1612:	50 40       	sbci	r21, 0x00	; 0
    1614:	8a f0       	brmi	.+34     	; 0x1638 <__mulsf3_pse+0x84>
    1616:	e1 f0       	breq	.+56     	; 0x1650 <__mulsf3_pse+0x9c>
    1618:	88 23       	and	r24, r24
    161a:	4a f0       	brmi	.+18     	; 0x162e <__mulsf3_pse+0x7a>
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	bb 1f       	adc	r27, r27
    1622:	66 1f       	adc	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	50 40       	sbci	r21, 0x00	; 0
    162c:	a9 f7       	brne	.-22     	; 0x1618 <__mulsf3_pse+0x64>
    162e:	9e 3f       	cpi	r25, 0xFE	; 254
    1630:	51 05       	cpc	r21, r1
    1632:	70 f0       	brcs	.+28     	; 0x1650 <__mulsf3_pse+0x9c>
    1634:	60 cf       	rjmp	.-320    	; 0x14f6 <__fp_inf>
    1636:	aa cf       	rjmp	.-172    	; 0x158c <__fp_szero>
    1638:	5f 3f       	cpi	r21, 0xFF	; 255
    163a:	ec f3       	brlt	.-6      	; 0x1636 <__mulsf3_pse+0x82>
    163c:	98 3e       	cpi	r25, 0xE8	; 232
    163e:	dc f3       	brlt	.-10     	; 0x1636 <__mulsf3_pse+0x82>
    1640:	86 95       	lsr	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	b7 95       	ror	r27
    1648:	f7 95       	ror	r31
    164a:	e7 95       	ror	r30
    164c:	9f 5f       	subi	r25, 0xFF	; 255
    164e:	c1 f7       	brne	.-16     	; 0x1640 <__mulsf3_pse+0x8c>
    1650:	fe 2b       	or	r31, r30
    1652:	88 0f       	add	r24, r24
    1654:	91 1d       	adc	r25, r1
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret

0000165e <__divmodhi4>:
    165e:	97 fb       	bst	r25, 7
    1660:	07 2e       	mov	r0, r23
    1662:	16 f4       	brtc	.+4      	; 0x1668 <__divmodhi4+0xa>
    1664:	00 94       	com	r0
    1666:	06 d0       	rcall	.+12     	; 0x1674 <__divmodhi4_neg1>
    1668:	77 fd       	sbrc	r23, 7
    166a:	08 d0       	rcall	.+16     	; 0x167c <__divmodhi4_neg2>
    166c:	0b d0       	rcall	.+22     	; 0x1684 <__udivmodhi4>
    166e:	07 fc       	sbrc	r0, 7
    1670:	05 d0       	rcall	.+10     	; 0x167c <__divmodhi4_neg2>
    1672:	3e f4       	brtc	.+14     	; 0x1682 <__divmodhi4_exit>

00001674 <__divmodhi4_neg1>:
    1674:	90 95       	com	r25
    1676:	81 95       	neg	r24
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__divmodhi4_neg2>:
    167c:	70 95       	com	r23
    167e:	61 95       	neg	r22
    1680:	7f 4f       	sbci	r23, 0xFF	; 255

00001682 <__divmodhi4_exit>:
    1682:	08 95       	ret

00001684 <__udivmodhi4>:
    1684:	aa 1b       	sub	r26, r26
    1686:	bb 1b       	sub	r27, r27
    1688:	51 e1       	ldi	r21, 0x11	; 17
    168a:	07 c0       	rjmp	.+14     	; 0x169a <__udivmodhi4_ep>

0000168c <__udivmodhi4_loop>:
    168c:	aa 1f       	adc	r26, r26
    168e:	bb 1f       	adc	r27, r27
    1690:	a6 17       	cp	r26, r22
    1692:	b7 07       	cpc	r27, r23
    1694:	10 f0       	brcs	.+4      	; 0x169a <__udivmodhi4_ep>
    1696:	a6 1b       	sub	r26, r22
    1698:	b7 0b       	sbc	r27, r23

0000169a <__udivmodhi4_ep>:
    169a:	88 1f       	adc	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	5a 95       	dec	r21
    16a0:	a9 f7       	brne	.-22     	; 0x168c <__udivmodhi4_loop>
    16a2:	80 95       	com	r24
    16a4:	90 95       	com	r25
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	08 95       	ret

000016ac <_exit>:
    16ac:	f8 94       	cli

000016ae <__stop_program>:
    16ae:	ff cf       	rjmp	.-2      	; 0x16ae <__stop_program>
