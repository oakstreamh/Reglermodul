
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  000024d0  00002564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014c  0080021a  0080021a  0000267e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003583  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf2  00000000  00000000  00005e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002870  00000000  00000000  00006a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000640  00000000  00000000  00009284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010d42  00000000  00000000  000098c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a37  00000000  00000000  0001a606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  0001c03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000378d  00000000  00000000  0001c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_19>
      50:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 36       	cpi	r26, 0x66	; 102
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <main>
      c6:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	int req_count = (int) req_delay*F_CPU/1024-1;
	if(TCNT3<req_count)
      f0:	e0 91 94 00 	lds	r30, 0x0094
      f4:	f0 91 95 00 	lds	r31, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024-1;
      f8:	dc 01       	movw	r26, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	41 ee       	ldi	r20, 0xE1	; 225
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	0e 94 2c 12 	call	0x2458	; 0x2458 <__mulshisi3>
     106:	8b 01       	movw	r16, r22
     108:	9c 01       	movw	r18, r24
     10a:	99 23       	and	r25, r25
     10c:	24 f4       	brge	.+8      	; 0x116 <checkCount+0x2a>
     10e:	01 50       	subi	r16, 0x01	; 1
     110:	1c 4f       	sbci	r17, 0xFC	; 252
     112:	2f 4f       	sbci	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	d9 01       	movw	r26, r18
     118:	c8 01       	movw	r24, r16
     11a:	07 2e       	mov	r0, r23
     11c:	7a e0       	ldi	r23, 0x0A	; 10
     11e:	b5 95       	asr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	7a 95       	dec	r23
     128:	d1 f7       	brne	.-12     	; 0x11e <checkCount+0x32>
     12a:	70 2d       	mov	r23, r0
     12c:	01 97       	sbiw	r24, 0x01	; 1
	if(TCNT3<req_count)
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	e8 17       	cp	r30, r24
     134:	f9 07       	cpc	r31, r25
     136:	10 f4       	brcc	.+4      	; 0x13c <checkCount+0x50>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 0;
	}
	return 1;
     13c:	c9 01       	movw	r24, r18
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <doFuzzy2>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void doFuzzy2(int currentOCR1A, int midSonicRange)
{
     144:	2f 92       	push	r2
     146:	3f 92       	push	r3
     148:	4f 92       	push	r4
     14a:	5f 92       	push	r5
     14c:	6f 92       	push	r6
     14e:	7f 92       	push	r7
     150:	8f 92       	push	r8
     152:	9f 92       	push	r9
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	c4 53       	subi	r28, 0x34	; 52
     16e:	d2 40       	sbci	r29, 0x02	; 2
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
// DECLARATION OF DISTANCE INPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type distance; strcpy(distance.name, "distance");
     17a:	29 e0       	ldi	r18, 0x09	; 9
     17c:	e4 e0       	ldi	r30, 0x04	; 4
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	de 01       	movw	r26, r28
     182:	11 96       	adiw	r26, 0x01	; 1
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	2a 95       	dec	r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <doFuzzy2+0x40>
struct io_type speed; strcpy(speed.name, "speed");
     18c:	26 e0       	ldi	r18, 0x06	; 6
     18e:	ed e0       	ldi	r30, 0x0D	; 13
     190:	f1 e0       	ldi	r31, 0x01	; 1
     192:	de 01       	movw	r26, r28
     194:	51 96       	adiw	r26, 0x11	; 17
     196:	01 90       	ld	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	2a 95       	dec	r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <doFuzzy2+0x52>

// Variable assigned its reference value
if (currentOCR1A<MIN_SPEED) {
     19e:	84 3b       	cpi	r24, 0xB4	; 180
     1a0:	2a e0       	ldi	r18, 0x0A	; 10
     1a2:	92 07       	cpc	r25, r18
     1a4:	2c f4       	brge	.+10     	; 0x1b0 <doFuzzy2+0x6c>
speed.value = MIN_SPEED;
     1a6:	84 eb       	ldi	r24, 0xB4	; 180
     1a8:	9a e0       	ldi	r25, 0x0A	; 10
     1aa:	9c 8f       	std	Y+28, r25	; 0x1c
     1ac:	8b 8f       	std	Y+27, r24	; 0x1b
     1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <doFuzzy2+0x82>
}
else if (currentOCR1A>MAX_SPEED)
     1b0:	85 35       	cpi	r24, 0x55	; 85
     1b2:	4b e0       	ldi	r20, 0x0B	; 11
     1b4:	94 07       	cpc	r25, r20
     1b6:	2c f0       	brlt	.+10     	; 0x1c2 <doFuzzy2+0x7e>
{
speed.value = MAX_SPEED;
     1b8:	84 e5       	ldi	r24, 0x54	; 84
     1ba:	9b e0       	ldi	r25, 0x0B	; 11
     1bc:	9c 8f       	std	Y+28, r25	; 0x1c
     1be:	8b 8f       	std	Y+27, r24	; 0x1b
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <doFuzzy2+0x82>
}
else
{
speed.value = currentOCR1A;
     1c2:	9c 8f       	std	Y+28, r25	; 0x1c
     1c4:	8b 8f       	std	Y+27, r24	; 0x1b
}

// Variable assigned its reference value
if(midSonicRange < MIN_DISTANCE)
     1c6:	77 23       	and	r23, r23
     1c8:	1c f4       	brge	.+6      	; 0x1d0 <doFuzzy2+0x8c>
{
distance.value = MIN_DISTANCE;
     1ca:	1c 86       	std	Y+12, r1	; 0x0c
     1cc:	1b 86       	std	Y+11, r1	; 0x0b
     1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <doFuzzy2+0xa0>
}
else if (midSonicRange > MAX_DISTANCE)
     1d0:	6b 3f       	cpi	r22, 0xFB	; 251
     1d2:	71 05       	cpc	r23, r1
     1d4:	2c f0       	brlt	.+10     	; 0x1e0 <doFuzzy2+0x9c>
{
distance.value = MAX_DISTANCE;
     1d6:	8a ef       	ldi	r24, 0xFA	; 250
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	9c 87       	std	Y+12, r25	; 0x0c
     1dc:	8b 87       	std	Y+11, r24	; 0x0b
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <doFuzzy2+0xa0>
}
else
{
distance.value = midSonicRange;
     1e0:	7c 87       	std	Y+12, r23	; 0x0c
     1e2:	6b 87       	std	Y+11, r22	; 0x0b
}


// Set MFs
struct mf_type stopDist;
MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 20);
     1e4:	6e 01       	movw	r12, r28
     1e6:	51 e2       	ldi	r21, 0x21	; 33
     1e8:	c5 0e       	add	r12, r21
     1ea:	d1 1c       	adc	r13, r1
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f4 e1       	ldi	r31, 0x14	; 20
     1f0:	ef 2e       	mov	r14, r31
     1f2:	f1 2c       	mov	r15, r1
     1f4:	f0 2d       	mov	r31, r0
     1f6:	0c e0       	ldi	r16, 0x0C	; 12
     1f8:	10 e0       	ldi	r17, 0x00	; 0
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	4f ef       	ldi	r20, 0xFF	; 255
     200:	5f ef       	ldi	r21, 0xFF	; 255
     202:	63 e1       	ldi	r22, 0x13	; 19
     204:	71 e0       	ldi	r23, 0x01	; 1
     206:	c6 01       	movw	r24, r12
     208:	9d d5       	rcall	.+2874   	; 0xd44 <MATLAB_MF>
struct mf_type oneM;
MATLAB_MF(&oneM, "oneM", 18, 60, 60, 95);
     20a:	3e 01       	movw	r6, r28
     20c:	67 e3       	ldi	r22, 0x37	; 55
     20e:	66 0e       	add	r6, r22
     210:	71 1c       	adc	r7, r1
     212:	0f 2e       	mov	r0, r31
     214:	ff e5       	ldi	r31, 0x5F	; 95
     216:	ef 2e       	mov	r14, r31
     218:	f1 2c       	mov	r15, r1
     21a:	f0 2d       	mov	r31, r0
     21c:	0c e3       	ldi	r16, 0x3C	; 60
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	2c e3       	ldi	r18, 0x3C	; 60
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	42 e1       	ldi	r20, 0x12	; 18
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	6c e1       	ldi	r22, 0x1C	; 28
     22a:	71 e0       	ldi	r23, 0x01	; 1
     22c:	c3 01       	movw	r24, r6
     22e:	8a d5       	rcall	.+2836   	; 0xd44 <MATLAB_MF>
struct mf_type twoM;
MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     230:	0f 2e       	mov	r0, r31
     232:	ff ea       	ldi	r31, 0xAF	; 175
     234:	ef 2e       	mov	r14, r31
     236:	f1 2c       	mov	r15, r1
     238:	f0 2d       	mov	r31, r0
     23a:	0d e7       	ldi	r16, 0x7D	; 125
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	2d e7       	ldi	r18, 0x7D	; 125
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	4b e4       	ldi	r20, 0x4B	; 75
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	61 e2       	ldi	r22, 0x21	; 33
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	ce 01       	movw	r24, r28
     24c:	83 5b       	subi	r24, 0xB3	; 179
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	79 d5       	rcall	.+2802   	; 0xd44 <MATLAB_MF>
struct mf_type threeM;
MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     252:	0f 2e       	mov	r0, r31
     254:	fb ef       	ldi	r31, 0xFB	; 251
     256:	ef 2e       	mov	r14, r31
     258:	f1 2c       	mov	r15, r1
     25a:	f0 2d       	mov	r31, r0
     25c:	0a ef       	ldi	r16, 0xFA	; 250
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	2a ef       	ldi	r18, 0xFA	; 250
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	46 e9       	ldi	r20, 0x96	; 150
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	66 e2       	ldi	r22, 0x26	; 38
     26a:	71 e0       	ldi	r23, 0x01	; 1
     26c:	ce 01       	movw	r24, r28
     26e:	8d 59       	subi	r24, 0x9D	; 157
     270:	9f 4f       	sbci	r25, 0xFF	; 255
     272:	68 d5       	rcall	.+2768   	; 0xd44 <MATLAB_MF>

// Linked list for MFs
distance.membership_functions = &stopDist;
     274:	de 86       	std	Y+14, r13	; 0x0e
     276:	cd 86       	std	Y+13, r12	; 0x0d
stopDist.next = &oneM;
     278:	7e aa       	std	Y+54, r7	; 0x36
     27a:	6d aa       	std	Y+53, r6	; 0x35
oneM.next = &twoM;
     27c:	8d e4       	ldi	r24, 0x4D	; 77
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	8c 0f       	add	r24, r28
     282:	9d 1f       	adc	r25, r29
     284:	2d 96       	adiw	r28, 0x0d	; 13
     286:	9f af       	std	Y+63, r25	; 0x3f
     288:	8e af       	std	Y+62, r24	; 0x3e
     28a:	2d 97       	sbiw	r28, 0x0d	; 13
twoM.next = &threeM;
     28c:	a3 e6       	ldi	r26, 0x63	; 99
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	ac 0f       	add	r26, r28
     292:	bd 1f       	adc	r27, r29
     294:	a3 96       	adiw	r28, 0x23	; 35
     296:	bf af       	std	Y+63, r27	; 0x3f
     298:	ae af       	std	Y+62, r26	; 0x3e
     29a:	a3 97       	sbiw	r28, 0x23	; 35
threeM.next = NULL;
     29c:	e9 96       	adiw	r28, 0x39	; 57
     29e:	1f ae       	std	Y+63, r1	; 0x3f
     2a0:	1e ae       	std	Y+62, r1	; 0x3e
     2a2:	e9 97       	sbiw	r28, 0x39	; 57
//////////////////////////////////////////////////////////////////////////////


// Set MFs
struct mf_type still;
MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     2a4:	0f 2e       	mov	r0, r31
     2a6:	ee 24       	eor	r14, r14
     2a8:	ea 94       	dec	r14
     2aa:	fa e0       	ldi	r31, 0x0A	; 10
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	04 eb       	ldi	r16, 0xB4	; 180
     2b2:	1a e0       	ldi	r17, 0x0A	; 10
     2b4:	24 eb       	ldi	r18, 0xB4	; 180
     2b6:	3a e0       	ldi	r19, 0x0A	; 10
     2b8:	43 eb       	ldi	r20, 0xB3	; 179
     2ba:	5a e0       	ldi	r21, 0x0A	; 10
     2bc:	6d e2       	ldi	r22, 0x2D	; 45
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	8c 96       	adiw	r24, 0x2c	; 44
     2c2:	40 d5       	rcall	.+2688   	; 0xd44 <MATLAB_MF>
struct mf_type low;
MATLAB_MF(&low, "low", 2825, 2830, 2830, 2835);
     2c4:	5e 01       	movw	r10, r28
     2c6:	bf e8       	ldi	r27, 0x8F	; 143
     2c8:	ab 0e       	add	r10, r27
     2ca:	b1 1c       	adc	r11, r1
     2cc:	0f 2e       	mov	r0, r31
     2ce:	f3 e1       	ldi	r31, 0x13	; 19
     2d0:	ef 2e       	mov	r14, r31
     2d2:	fb e0       	ldi	r31, 0x0B	; 11
     2d4:	ff 2e       	mov	r15, r31
     2d6:	f0 2d       	mov	r31, r0
     2d8:	0e e0       	ldi	r16, 0x0E	; 14
     2da:	1b e0       	ldi	r17, 0x0B	; 11
     2dc:	2e e0       	ldi	r18, 0x0E	; 14
     2de:	3b e0       	ldi	r19, 0x0B	; 11
     2e0:	49 e0       	ldi	r20, 0x09	; 9
     2e2:	5b e0       	ldi	r21, 0x0B	; 11
     2e4:	61 e5       	ldi	r22, 0x51	; 81
     2e6:	71 e0       	ldi	r23, 0x01	; 1
     2e8:	c5 01       	movw	r24, r10
     2ea:	2c d5       	rcall	.+2648   	; 0xd44 <MATLAB_MF>
struct mf_type cruising;
MATLAB_MF(&cruising, "cruising", 2830, 2835, 2835, 2840);
     2ec:	0f 2e       	mov	r0, r31
     2ee:	f8 e1       	ldi	r31, 0x18	; 24
     2f0:	ef 2e       	mov	r14, r31
     2f2:	fb e0       	ldi	r31, 0x0B	; 11
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	03 e1       	ldi	r16, 0x13	; 19
     2fa:	1b e0       	ldi	r17, 0x0B	; 11
     2fc:	23 e1       	ldi	r18, 0x13	; 19
     2fe:	3b e0       	ldi	r19, 0x0B	; 11
     300:	4e e0       	ldi	r20, 0x0E	; 14
     302:	5b e0       	ldi	r21, 0x0B	; 11
     304:	63 e3       	ldi	r22, 0x33	; 51
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	ce 01       	movw	r24, r28
     30a:	8b 55       	subi	r24, 0x5B	; 91
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	1a d5       	rcall	.+2612   	; 0xd44 <MATLAB_MF>
struct mf_type medium;
MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     310:	2e 01       	movw	r4, r28
     312:	eb eb       	ldi	r30, 0xBB	; 187
     314:	4e 0e       	add	r4, r30
     316:	51 1c       	adc	r5, r1
     318:	0f 2e       	mov	r0, r31
     31a:	f2 e2       	ldi	r31, 0x22	; 34
     31c:	ef 2e       	mov	r14, r31
     31e:	fb e0       	ldi	r31, 0x0B	; 11
     320:	ff 2e       	mov	r15, r31
     322:	f0 2d       	mov	r31, r0
     324:	08 e1       	ldi	r16, 0x18	; 24
     326:	1b e0       	ldi	r17, 0x0B	; 11
     328:	28 e1       	ldi	r18, 0x18	; 24
     32a:	3b e0       	ldi	r19, 0x0B	; 11
     32c:	4e e0       	ldi	r20, 0x0E	; 14
     32e:	5b e0       	ldi	r21, 0x0B	; 11
     330:	6c e3       	ldi	r22, 0x3C	; 60
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	c2 01       	movw	r24, r4
     336:	06 d5       	rcall	.+2572   	; 0xd44 <MATLAB_MF>
struct mf_type high;
MATLAB_MF(&high, "high", 2835, 2845, 28545, 2855);
     338:	0f 2e       	mov	r0, r31
     33a:	f7 e2       	ldi	r31, 0x27	; 39
     33c:	ef 2e       	mov	r14, r31
     33e:	fb e0       	ldi	r31, 0x0B	; 11
     340:	ff 2e       	mov	r15, r31
     342:	f0 2d       	mov	r31, r0
     344:	01 e8       	ldi	r16, 0x81	; 129
     346:	1f e6       	ldi	r17, 0x6F	; 111
     348:	2d e1       	ldi	r18, 0x1D	; 29
     34a:	3b e0       	ldi	r19, 0x0B	; 11
     34c:	43 e1       	ldi	r20, 0x13	; 19
     34e:	5b e0       	ldi	r21, 0x0B	; 11
     350:	63 e4       	ldi	r22, 0x43	; 67
     352:	71 e0       	ldi	r23, 0x01	; 1
     354:	ce 01       	movw	r24, r28
     356:	8f 52       	subi	r24, 0x2F	; 47
     358:	9f 4f       	sbci	r25, 0xFF	; 255
     35a:	f4 d4       	rcall	.+2536   	; 0xd44 <MATLAB_MF>

// Linked list for MFs
speed.membership_functions = &still;
     35c:	49 e7       	ldi	r20, 0x79	; 121
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	4c 0f       	add	r20, r28
     362:	5d 1f       	adc	r21, r29
     364:	5e 8f       	std	Y+30, r21	; 0x1e
     366:	4d 8f       	std	Y+29, r20	; 0x1d
still.next = &low;
     368:	c3 57       	subi	r28, 0x73	; 115
     36a:	df 4f       	sbci	r29, 0xFF	; 255
     36c:	b9 82       	std	Y+1, r11	; 0x01
     36e:	a8 82       	st	Y, r10
     370:	cd 58       	subi	r28, 0x8D	; 141
     372:	d0 40       	sbci	r29, 0x00	; 0
low.next = &cruising;
     374:	e5 ea       	ldi	r30, 0xA5	; 165
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	ec 0f       	add	r30, r28
     37a:	fd 1f       	adc	r31, r29
     37c:	d5 01       	movw	r26, r10
     37e:	55 96       	adiw	r26, 0x15	; 21
     380:	fc 93       	st	X, r31
     382:	ee 93       	st	-X, r30
     384:	54 97       	sbiw	r26, 0x14	; 20
cruising.next = &medium;
     386:	c7 54       	subi	r28, 0x47	; 71
     388:	df 4f       	sbci	r29, 0xFF	; 255
     38a:	59 82       	std	Y+1, r5	; 0x01
     38c:	48 82       	st	Y, r4
     38e:	c9 5b       	subi	r28, 0xB9	; 185
     390:	d0 40       	sbci	r29, 0x00	; 0
medium.next = &high;
     392:	e1 ed       	ldi	r30, 0xD1	; 209
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	ec 0f       	add	r30, r28
     398:	fd 1f       	adc	r31, r29
     39a:	d2 01       	movw	r26, r4
     39c:	55 96       	adiw	r26, 0x15	; 21
     39e:	fc 93       	st	X, r31
     3a0:	ee 93       	st	-X, r30
     3a2:	54 97       	sbiw	r26, 0x14	; 20
high.next = NULL;
     3a4:	cb 51       	subi	r28, 0x1B	; 27
     3a6:	df 4f       	sbci	r29, 0xFF	; 255
     3a8:	19 82       	std	Y+1, r1	; 0x01
     3aa:	18 82       	st	Y, r1
     3ac:	c5 5e       	subi	r28, 0xE5	; 229
     3ae:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF PWM OUTPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type pwm; strcpy(pwm.name, "pwm");
     3b0:	80 e7       	ldi	r24, 0x70	; 112
     3b2:	97 e7       	ldi	r25, 0x77	; 119
     3b4:	ad e6       	ldi	r26, 0x6D	; 109
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	c9 51       	subi	r28, 0x19	; 25
     3ba:	df 4f       	sbci	r29, 0xFF	; 255
     3bc:	88 83       	st	Y, r24
     3be:	99 83       	std	Y+1, r25	; 0x01
     3c0:	aa 83       	std	Y+2, r26	; 0x02
     3c2:	bb 83       	std	Y+3, r27	; 0x03
     3c4:	c7 5e       	subi	r28, 0xE7	; 231
     3c6:	d0 40       	sbci	r29, 0x00	; 0

// Set MFs
struct mf_type noSpeed;
MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     3c8:	4e 01       	movw	r8, r28
     3ca:	f7 ef       	ldi	r31, 0xF7	; 247
     3cc:	8f 0e       	add	r8, r31
     3ce:	91 1c       	adc	r9, r1
     3d0:	0f 2e       	mov	r0, r31
     3d2:	ee 24       	eor	r14, r14
     3d4:	ea 94       	dec	r14
     3d6:	fa e0       	ldi	r31, 0x0A	; 10
     3d8:	ff 2e       	mov	r15, r31
     3da:	f0 2d       	mov	r31, r0
     3dc:	04 eb       	ldi	r16, 0xB4	; 180
     3de:	1a e0       	ldi	r17, 0x0A	; 10
     3e0:	24 eb       	ldi	r18, 0xB4	; 180
     3e2:	3a e0       	ldi	r19, 0x0A	; 10
     3e4:	43 eb       	ldi	r20, 0xB3	; 179
     3e6:	5a e0       	ldi	r21, 0x0A	; 10
     3e8:	68 e4       	ldi	r22, 0x48	; 72
     3ea:	71 e0       	ldi	r23, 0x01	; 1
     3ec:	c4 01       	movw	r24, r8
     3ee:	aa d4       	rcall	.+2388   	; 0xd44 <MATLAB_MF>
struct mf_type slow;
MATLAB_MF(&slow, "slow", 2825, 2830, 2830, 2835);
     3f0:	6e 01       	movw	r12, r28
     3f2:	23 ef       	ldi	r18, 0xF3	; 243
     3f4:	c2 1a       	sub	r12, r18
     3f6:	2e ef       	ldi	r18, 0xFE	; 254
     3f8:	d2 0a       	sbc	r13, r18
     3fa:	0f 2e       	mov	r0, r31
     3fc:	f3 e1       	ldi	r31, 0x13	; 19
     3fe:	ef 2e       	mov	r14, r31
     400:	fb e0       	ldi	r31, 0x0B	; 11
     402:	ff 2e       	mov	r15, r31
     404:	f0 2d       	mov	r31, r0
     406:	0e e0       	ldi	r16, 0x0E	; 14
     408:	1b e0       	ldi	r17, 0x0B	; 11
     40a:	2e e0       	ldi	r18, 0x0E	; 14
     40c:	3b e0       	ldi	r19, 0x0B	; 11
     40e:	49 e0       	ldi	r20, 0x09	; 9
     410:	5b e0       	ldi	r21, 0x0B	; 11
     412:	60 e5       	ldi	r22, 0x50	; 80
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	c6 01       	movw	r24, r12
     418:	95 d4       	rcall	.+2346   	; 0xd44 <MATLAB_MF>
struct mf_type cruise;
MATLAB_MF(&cruise, "cruise", 2830, 2835, 2835, 2840);
     41a:	1e 01       	movw	r2, r28
     41c:	4d ed       	ldi	r20, 0xDD	; 221
     41e:	24 1a       	sub	r2, r20
     420:	4e ef       	ldi	r20, 0xFE	; 254
     422:	34 0a       	sbc	r3, r20
     424:	0f 2e       	mov	r0, r31
     426:	f8 e1       	ldi	r31, 0x18	; 24
     428:	ef 2e       	mov	r14, r31
     42a:	fb e0       	ldi	r31, 0x0B	; 11
     42c:	ff 2e       	mov	r15, r31
     42e:	f0 2d       	mov	r31, r0
     430:	03 e1       	ldi	r16, 0x13	; 19
     432:	1b e0       	ldi	r17, 0x0B	; 11
     434:	23 e1       	ldi	r18, 0x13	; 19
     436:	3b e0       	ldi	r19, 0x0B	; 11
     438:	4e e0       	ldi	r20, 0x0E	; 14
     43a:	5b e0       	ldi	r21, 0x0B	; 11
     43c:	65 e5       	ldi	r22, 0x55	; 85
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	c1 01       	movw	r24, r2
     442:	80 d4       	rcall	.+2304   	; 0xd44 <MATLAB_MF>
struct mf_type medHigh;
MATLAB_MF(&medHigh, "medHigh", 2830, 2840, 2840, 2850);
     444:	0f 2e       	mov	r0, r31
     446:	f2 e2       	ldi	r31, 0x22	; 34
     448:	ef 2e       	mov	r14, r31
     44a:	fb e0       	ldi	r31, 0x0B	; 11
     44c:	ff 2e       	mov	r15, r31
     44e:	f0 2d       	mov	r31, r0
     450:	08 e1       	ldi	r16, 0x18	; 24
     452:	1b e0       	ldi	r17, 0x0B	; 11
     454:	28 e1       	ldi	r18, 0x18	; 24
     456:	3b e0       	ldi	r19, 0x0B	; 11
     458:	4e e0       	ldi	r20, 0x0E	; 14
     45a:	5b e0       	ldi	r21, 0x0B	; 11
     45c:	6c e5       	ldi	r22, 0x5C	; 92
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	ce 01       	movw	r24, r28
     462:	87 5c       	subi	r24, 0xC7	; 199
     464:	9e 4f       	sbci	r25, 0xFE	; 254
     466:	6e d4       	rcall	.+2268   	; 0xd44 <MATLAB_MF>
struct mf_type max;
MATLAB_MF(&max, "max", 2835, 2845, 2845, 2855);
     468:	0f 2e       	mov	r0, r31
     46a:	f7 e2       	ldi	r31, 0x27	; 39
     46c:	ef 2e       	mov	r14, r31
     46e:	fb e0       	ldi	r31, 0x0B	; 11
     470:	ff 2e       	mov	r15, r31
     472:	f0 2d       	mov	r31, r0
     474:	0d e1       	ldi	r16, 0x1D	; 29
     476:	1b e0       	ldi	r17, 0x0B	; 11
     478:	2d e1       	ldi	r18, 0x1D	; 29
     47a:	3b e0       	ldi	r19, 0x0B	; 11
     47c:	43 e1       	ldi	r20, 0x13	; 19
     47e:	5b e0       	ldi	r21, 0x0B	; 11
     480:	64 e6       	ldi	r22, 0x64	; 100
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	ce 01       	movw	r24, r28
     486:	81 5b       	subi	r24, 0xB1	; 177
     488:	9e 4f       	sbci	r25, 0xFE	; 254
     48a:	5c d4       	rcall	.+2232   	; 0xd44 <MATLAB_MF>

// Linked list for MFs
pwm.membership_functions = &noSpeed;
     48c:	cd 50       	subi	r28, 0x0D	; 13
     48e:	df 4f       	sbci	r29, 0xFF	; 255
     490:	99 82       	std	Y+1, r9	; 0x01
     492:	88 82       	st	Y, r8
     494:	c3 5f       	subi	r28, 0xF3	; 243
     496:	d0 40       	sbci	r29, 0x00	; 0
noSpeed.next = &slow;
     498:	d4 01       	movw	r26, r8
     49a:	55 96       	adiw	r26, 0x15	; 21
     49c:	dc 92       	st	X, r13
     49e:	ce 92       	st	-X, r12
     4a0:	54 97       	sbiw	r26, 0x14	; 20
slow.next = &cruise;
     4a2:	f6 01       	movw	r30, r12
     4a4:	35 8a       	std	Z+21, r3	; 0x15
     4a6:	24 8a       	std	Z+20, r2	; 0x14
cruise.next = &medHigh;
     4a8:	e9 e3       	ldi	r30, 0x39	; 57
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	ec 0f       	add	r30, r28
     4ae:	fd 1f       	adc	r31, r29
     4b0:	d1 01       	movw	r26, r2
     4b2:	55 96       	adiw	r26, 0x15	; 21
     4b4:	fc 93       	st	X, r31
     4b6:	ee 93       	st	-X, r30
     4b8:	54 97       	sbiw	r26, 0x14	; 20
medHigh.next = &max;
     4ba:	4f e4       	ldi	r20, 0x4F	; 79
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	4c 0f       	add	r20, r28
     4c0:	5d 1f       	adc	r21, r29
     4c2:	c3 5b       	subi	r28, 0xB3	; 179
     4c4:	de 4f       	sbci	r29, 0xFE	; 254
     4c6:	59 83       	std	Y+1, r21	; 0x01
     4c8:	48 83       	st	Y, r20
     4ca:	cd 54       	subi	r28, 0x4D	; 77
     4cc:	d1 40       	sbci	r29, 0x01	; 1
max.next = NULL;
     4ce:	cd 59       	subi	r28, 0x9D	; 157
     4d0:	de 4f       	sbci	r29, 0xFE	; 254
     4d2:	19 82       	std	Y+1, r1	; 0x01
     4d4:	18 82       	st	Y, r1
     4d6:	c3 56       	subi	r28, 0x63	; 99
     4d8:	d1 40       	sbci	r29, 0x01	; 1


// SETTING I/O LINKED LISTS
//////////////////////////////////////////////////////////////////////////////

System_Inputs = &distance;
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 3d 03 	sts	0x033D, r25
     4e2:	80 93 3c 03 	sts	0x033C, r24
distance.next = &speed;
     4e6:	40 96       	adiw	r24, 0x10	; 16
     4e8:	98 8b       	std	Y+16, r25	; 0x10
     4ea:	8f 87       	std	Y+15, r24	; 0x0f
speed.next = NULL;
     4ec:	18 a2       	std	Y+32, r1	; 0x20
     4ee:	1f 8e       	std	Y+31, r1	; 0x1f

System_Outputs = &pwm;
     4f0:	87 ee       	ldi	r24, 0xE7	; 231
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	8c 0f       	add	r24, r28
     4f6:	9d 1f       	adc	r25, r29
     4f8:	90 93 3b 03 	sts	0x033B, r25
     4fc:	80 93 3a 03 	sts	0x033A, r24
pwm.next = NULL;
     500:	cb 50       	subi	r28, 0x0B	; 11
     502:	df 4f       	sbci	r29, 0xFF	; 255
     504:	19 82       	std	Y+1, r1	; 0x01
     506:	18 82       	st	Y, r1
     508:	c5 5f       	subi	r28, 0xF5	; 245
     50a:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF RULES AND LISTS
//////////////////////////////////////////////////////////////////////////////

struct rule_type rule1; Rule_Base = &rule1;
     50c:	9e 01       	movw	r18, r28
     50e:	2b 59       	subi	r18, 0x9B	; 155
     510:	3e 4f       	sbci	r19, 0xFE	; 254
     512:	30 93 3f 03 	sts	0x033F, r19
     516:	20 93 3e 03 	sts	0x033E, r18
struct rule_type rule2; rule1.next = &rule2;
     51a:	8c 57       	subi	r24, 0x7C	; 124
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	d9 01       	movw	r26, r18
     520:	15 96       	adiw	r26, 0x05	; 5
     522:	9c 93       	st	X, r25
     524:	8e 93       	st	-X, r24
     526:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule3; rule2.next = &rule3;
     528:	1c 96       	adiw	r26, 0x0c	; 12
     52a:	fc 01       	movw	r30, r24
     52c:	b5 83       	std	Z+5, r27	; 0x05
     52e:	a4 83       	std	Z+4, r26	; 0x04
struct rule_type rule4; rule3.next = &rule4;
     530:	47 e7       	ldi	r20, 0x77	; 119
     532:	51 e0       	ldi	r21, 0x01	; 1
     534:	4c 0f       	add	r20, r28
     536:	5d 1f       	adc	r21, r29
     538:	15 96       	adiw	r26, 0x05	; 5
     53a:	5c 93       	st	X, r21
     53c:	4e 93       	st	-X, r20
     53e:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule5; rule4.next = &rule5;
     540:	8e 01       	movw	r16, r28
     542:	03 58       	subi	r16, 0x83	; 131
     544:	1e 4f       	sbci	r17, 0xFE	; 254
     546:	c5 58       	subi	r28, 0x85	; 133
     548:	de 4f       	sbci	r29, 0xFE	; 254
     54a:	19 83       	std	Y+1, r17	; 0x01
     54c:	08 83       	st	Y, r16
     54e:	cb 57       	subi	r28, 0x7B	; 123
     550:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule6; rule5.next = &rule6;
     552:	7e 01       	movw	r14, r28
     554:	5d e7       	ldi	r21, 0x7D	; 125
     556:	e5 1a       	sub	r14, r21
     558:	5e ef       	ldi	r21, 0xFE	; 254
     55a:	f5 0a       	sbc	r15, r21
     55c:	f8 01       	movw	r30, r16
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	e4 82       	std	Z+4, r14	; 0x04
struct rule_type rule7; rule6.next = &rule7;
     562:	49 e8       	ldi	r20, 0x89	; 137
     564:	51 e0       	ldi	r21, 0x01	; 1
     566:	4c 0f       	add	r20, r28
     568:	5d 1f       	adc	r21, r29
     56a:	f7 01       	movw	r30, r14
     56c:	55 83       	std	Z+5, r21	; 0x05
     56e:	44 83       	std	Z+4, r20	; 0x04
struct rule_type rule8; rule7.next = &rule8;
     570:	ef e8       	ldi	r30, 0x8F	; 143
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	ec 0f       	add	r30, r28
     576:	fd 1f       	adc	r31, r29
     578:	c3 57       	subi	r28, 0x73	; 115
     57a:	de 4f       	sbci	r29, 0xFE	; 254
     57c:	f9 83       	std	Y+1, r31	; 0x01
     57e:	e8 83       	st	Y, r30
     580:	cd 58       	subi	r28, 0x8D	; 141
     582:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule9; rule8.next = &rule9;
     584:	45 e9       	ldi	r20, 0x95	; 149
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	4c 0f       	add	r20, r28
     58a:	5d 1f       	adc	r21, r29
     58c:	cd 56       	subi	r28, 0x6D	; 109
     58e:	de 4f       	sbci	r29, 0xFE	; 254
     590:	59 83       	std	Y+1, r21	; 0x01
     592:	48 83       	st	Y, r20
     594:	c3 59       	subi	r28, 0x93	; 147
     596:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule10; rule9.next = &rule10;
     598:	eb e9       	ldi	r30, 0x9B	; 155
     59a:	f1 e0       	ldi	r31, 0x01	; 1
     59c:	ec 0f       	add	r30, r28
     59e:	fd 1f       	adc	r31, r29
     5a0:	c7 56       	subi	r28, 0x67	; 103
     5a2:	de 4f       	sbci	r29, 0xFE	; 254
     5a4:	f9 83       	std	Y+1, r31	; 0x01
     5a6:	e8 83       	st	Y, r30
     5a8:	c9 59       	subi	r28, 0x99	; 153
     5aa:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule11; rule10.next = &rule11;
     5ac:	41 ea       	ldi	r20, 0xA1	; 161
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	4c 0f       	add	r20, r28
     5b2:	5d 1f       	adc	r21, r29
     5b4:	c1 56       	subi	r28, 0x61	; 97
     5b6:	de 4f       	sbci	r29, 0xFE	; 254
     5b8:	59 83       	std	Y+1, r21	; 0x01
     5ba:	48 83       	st	Y, r20
     5bc:	cf 59       	subi	r28, 0x9F	; 159
     5be:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     5c0:	e7 ea       	ldi	r30, 0xA7	; 167
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	ec 0f       	add	r30, r28
     5c6:	fd 1f       	adc	r31, r29
     5c8:	cb 55       	subi	r28, 0x5B	; 91
     5ca:	de 4f       	sbci	r29, 0xFE	; 254
     5cc:	f9 83       	std	Y+1, r31	; 0x01
     5ce:	e8 83       	st	Y, r30
     5d0:	c5 5a       	subi	r28, 0xA5	; 165
     5d2:	d1 40       	sbci	r29, 0x01	; 1
     5d4:	c5 55       	subi	r28, 0x55	; 85
     5d6:	de 4f       	sbci	r29, 0xFE	; 254
     5d8:	19 82       	std	Y+1, r1	; 0x01
     5da:	18 82       	st	Y, r1
     5dc:	cb 5a       	subi	r28, 0xAB	; 171
     5de:	d1 40       	sbci	r29, 0x01	; 1
// RULE SETUP
//////////////////////////////////////////////////////////////////////////////

// if distance is stopDist then pwm is noSpeed
struct rule_element_type if11, then1;
rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     5e0:	be 01       	movw	r22, r28
     5e2:	63 55       	subi	r22, 0x53	; 83
     5e4:	7e 4f       	sbci	r23, 0xFE	; 254
     5e6:	f9 01       	movw	r30, r18
     5e8:	71 83       	std	Z+1, r23	; 0x01
     5ea:	60 83       	st	Z, r22
     5ec:	fb 01       	movw	r30, r22
     5ee:	13 82       	std	Z+3, r1	; 0x03
     5f0:	12 82       	std	Z+2, r1	; 0x02
     5f2:	40 5f       	subi	r20, 0xF0	; 240
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	f9 01       	movw	r30, r18
     5f8:	53 83       	std	Z+3, r21	; 0x03
     5fa:	42 83       	std	Z+2, r20	; 0x02
     5fc:	fa 01       	movw	r30, r20
     5fe:	13 82       	std	Z+3, r1	; 0x03
     600:	12 82       	std	Z+2, r1	; 0x02
if11.value = &stopDist.value; then1.value = &noSpeed.value;
     602:	2a 53       	subi	r18, 0x3A	; 58
     604:	31 40       	sbci	r19, 0x01	; 1
     606:	fb 01       	movw	r30, r22
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
     60c:	fa e0       	ldi	r31, 0x0A	; 10
     60e:	8f 0e       	add	r8, r31
     610:	91 1c       	adc	r9, r1
     612:	fa 01       	movw	r30, r20
     614:	91 82       	std	Z+1, r9	; 0x01
     616:	80 82       	st	Z, r8

// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
struct rule_element_type if21, if22, then2;
rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     618:	68 5f       	subi	r22, 0xF8	; 248
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	fc 01       	movw	r30, r24
     61e:	71 83       	std	Z+1, r23	; 0x01
     620:	60 83       	st	Z, r22
     622:	48 5f       	subi	r20, 0xF8	; 248
     624:	5f 4f       	sbci	r21, 0xFF	; 255
     626:	fb 01       	movw	r30, r22
     628:	53 83       	std	Z+3, r21	; 0x03
     62a:	42 83       	std	Z+2, r20	; 0x02
     62c:	fa 01       	movw	r30, r20
     62e:	13 82       	std	Z+3, r1	; 0x03
     630:	12 82       	std	Z+2, r1	; 0x02
     632:	2e 56       	subi	r18, 0x6E	; 110
     634:	3e 4f       	sbci	r19, 0xFE	; 254
     636:	fc 01       	movw	r30, r24
     638:	33 83       	std	Z+3, r19	; 0x03
     63a:	22 83       	std	Z+2, r18	; 0x02
     63c:	f9 01       	movw	r30, r18
     63e:	13 82       	std	Z+3, r1	; 0x03
     640:	12 82       	std	Z+2, r1	; 0x02
if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     642:	fa e0       	ldi	r31, 0x0A	; 10
     644:	af 0e       	add	r10, r31
     646:	b1 1c       	adc	r11, r1
     648:	fb 01       	movw	r30, r22
     64a:	b1 82       	std	Z+1, r11	; 0x01
     64c:	a0 82       	st	Z, r10
     64e:	fa e0       	ldi	r31, 0x0A	; 10
     650:	6f 0e       	add	r6, r31
     652:	71 1c       	adc	r7, r1
     654:	fa 01       	movw	r30, r20
     656:	71 82       	std	Z+1, r7	; 0x01
     658:	60 82       	st	Z, r6
     65a:	fa e0       	ldi	r31, 0x0A	; 10
     65c:	cf 0e       	add	r12, r31
     65e:	d1 1c       	adc	r13, r1
     660:	f9 01       	movw	r30, r18
     662:	d1 82       	std	Z+1, r13	; 0x01
     664:	c0 82       	st	Z, r12

// if speed is medium and distance is oneM then speed is cruise
struct rule_element_type if31, if32, then3;
rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     666:	48 5f       	subi	r20, 0xF8	; 248
     668:	5f 4f       	sbci	r21, 0xFF	; 255
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	5c 93       	st	X, r21
     66e:	4e 93       	st	-X, r20
     670:	28 5f       	subi	r18, 0xF8	; 248
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	fa 01       	movw	r30, r20
     676:	33 83       	std	Z+3, r19	; 0x03
     678:	22 83       	std	Z+2, r18	; 0x02
     67a:	f9 01       	movw	r30, r18
     67c:	13 82       	std	Z+3, r1	; 0x03
     67e:	12 82       	std	Z+2, r1	; 0x02
     680:	82 5a       	subi	r24, 0xA2	; 162
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	12 97       	sbiw	r26, 0x02	; 2
     68c:	dc 01       	movw	r26, r24
     68e:	13 96       	adiw	r26, 0x03	; 3
     690:	1c 92       	st	X, r1
     692:	1e 92       	st	-X, r1
     694:	12 97       	sbiw	r26, 0x02	; 2
if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     696:	ba e0       	ldi	r27, 0x0A	; 10
     698:	4b 0e       	add	r4, r27
     69a:	51 1c       	adc	r5, r1
     69c:	fa 01       	movw	r30, r20
     69e:	51 82       	std	Z+1, r5	; 0x01
     6a0:	40 82       	st	Z, r4
     6a2:	d9 01       	movw	r26, r18
     6a4:	6d 92       	st	X+, r6
     6a6:	7c 92       	st	X, r7
     6a8:	ba e0       	ldi	r27, 0x0A	; 10
     6aa:	2b 0e       	add	r2, r27
     6ac:	31 1c       	adc	r3, r1
     6ae:	fc 01       	movw	r30, r24
     6b0:	31 82       	std	Z+1, r3	; 0x01
     6b2:	20 82       	st	Z, r2

// if speed is high and distance is oneM then speed is cruise
struct rule_element_type if41, if42, then4;
rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     6b4:	28 5f       	subi	r18, 0xF8	; 248
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	c9 58       	subi	r28, 0x89	; 137
     6ba:	de 4f       	sbci	r29, 0xFE	; 254
     6bc:	39 83       	std	Y+1, r19	; 0x01
     6be:	28 83       	st	Y, r18
     6c0:	c7 57       	subi	r28, 0x77	; 119
     6c2:	d1 40       	sbci	r29, 0x01	; 1
     6c4:	08 96       	adiw	r24, 0x08	; 8
     6c6:	d9 01       	movw	r26, r18
     6c8:	13 96       	adiw	r26, 0x03	; 3
     6ca:	9c 93       	st	X, r25
     6cc:	8e 93       	st	-X, r24
     6ce:	12 97       	sbiw	r26, 0x02	; 2
     6d0:	fc 01       	movw	r30, r24
     6d2:	13 82       	std	Z+3, r1	; 0x03
     6d4:	12 82       	std	Z+2, r1	; 0x02
     6d6:	18 96       	adiw	r26, 0x08	; 8
     6d8:	c7 58       	subi	r28, 0x87	; 135
     6da:	de 4f       	sbci	r29, 0xFE	; 254
     6dc:	b9 83       	std	Y+1, r27	; 0x01
     6de:	a8 83       	st	Y, r26
     6e0:	c9 57       	subi	r28, 0x79	; 121
     6e2:	d1 40       	sbci	r29, 0x01	; 1
     6e4:	13 96       	adiw	r26, 0x03	; 3
     6e6:	1c 92       	st	X, r1
     6e8:	1e 92       	st	-X, r1
     6ea:	12 97       	sbiw	r26, 0x02	; 2
if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     6ec:	41 ed       	ldi	r20, 0xD1	; 209
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	4c 0f       	add	r20, r28
     6f2:	5d 1f       	adc	r21, r29
     6f4:	46 5f       	subi	r20, 0xF6	; 246
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	f9 01       	movw	r30, r18
     6fa:	51 83       	std	Z+1, r21	; 0x01
     6fc:	40 83       	st	Z, r20
     6fe:	fc 01       	movw	r30, r24
     700:	71 82       	std	Z+1, r7	; 0x01
     702:	60 82       	st	Z, r6
     704:	2d 92       	st	X+, r2
     706:	3c 92       	st	X, r3

// if speed is still and distance is oneM then speed is slow
struct rule_element_type if51, if52, then5;
rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     708:	08 96       	adiw	r24, 0x08	; 8
     70a:	d8 01       	movw	r26, r16
     70c:	8d 93       	st	X+, r24
     70e:	9c 93       	st	X, r25
     710:	68 5d       	subi	r22, 0xD8	; 216
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	fc 01       	movw	r30, r24
     716:	73 83       	std	Z+3, r23	; 0x03
     718:	62 83       	std	Z+2, r22	; 0x02
     71a:	db 01       	movw	r26, r22
     71c:	13 96       	adiw	r26, 0x03	; 3
     71e:	1c 92       	st	X, r1
     720:	1e 92       	st	-X, r1
     722:	12 97       	sbiw	r26, 0x02	; 2
     724:	38 96       	adiw	r30, 0x08	; 8
     726:	d8 01       	movw	r26, r16
     728:	13 96       	adiw	r26, 0x03	; 3
     72a:	fc 93       	st	X, r31
     72c:	ee 93       	st	-X, r30
     72e:	12 97       	sbiw	r26, 0x02	; 2
     730:	13 82       	std	Z+3, r1	; 0x03
     732:	12 82       	std	Z+2, r1	; 0x02
if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     734:	29 e7       	ldi	r18, 0x79	; 121
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	2c 0f       	add	r18, r28
     73a:	3d 1f       	adc	r19, r29
     73c:	26 5f       	subi	r18, 0xF6	; 246
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	dc 01       	movw	r26, r24
     742:	2d 93       	st	X+, r18
     744:	3c 93       	st	X, r19
     746:	db 01       	movw	r26, r22
     748:	6d 92       	st	X+, r6
     74a:	7c 92       	st	X, r7
     74c:	d1 82       	std	Z+1, r13	; 0x01
     74e:	c0 82       	st	Z, r12

// if speed is cruising and distance is oneM then speed is slow
struct rule_element_type if61, if62, then6;
rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     750:	0c 96       	adiw	r24, 0x0c	; 12
     752:	f7 01       	movw	r30, r14
     754:	91 83       	std	Z+1, r25	; 0x01
     756:	80 83       	st	Z, r24
     758:	04 59       	subi	r16, 0x94	; 148
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	dc 01       	movw	r26, r24
     75e:	13 96       	adiw	r26, 0x03	; 3
     760:	1c 93       	st	X, r17
     762:	0e 93       	st	-X, r16
     764:	12 97       	sbiw	r26, 0x02	; 2
     766:	f8 01       	movw	r30, r16
     768:	13 82       	std	Z+3, r1	; 0x03
     76a:	12 82       	std	Z+2, r1	; 0x02
     76c:	34 96       	adiw	r30, 0x04	; 4
     76e:	d7 01       	movw	r26, r14
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	fc 93       	st	X, r31
     774:	ee 93       	st	-X, r30
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 82       	std	Z+3, r1	; 0x03
     77a:	12 82       	std	Z+2, r1	; 0x02
if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     77c:	65 ea       	ldi	r22, 0xA5	; 165
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	6c 0f       	add	r22, r28
     782:	7d 1f       	adc	r23, r29
     784:	66 5f       	subi	r22, 0xF6	; 246
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	dc 01       	movw	r26, r24
     78a:	6d 93       	st	X+, r22
     78c:	7c 93       	st	X, r23
     78e:	d8 01       	movw	r26, r16
     790:	6d 92       	st	X+, r6
     792:	7c 92       	st	X, r7
     794:	d1 82       	std	Z+1, r13	; 0x01
     796:	c0 82       	st	Z, r12

// if speed is low and distance is twoM then speed is cruise
struct rule_element_type if71, if72, then7;
rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     798:	0c 96       	adiw	r24, 0x0c	; 12
     79a:	c7 57       	subi	r28, 0x77	; 119
     79c:	de 4f       	sbci	r29, 0xFE	; 254
     79e:	99 83       	std	Y+1, r25	; 0x01
     7a0:	88 83       	st	Y, r24
     7a2:	c9 58       	subi	r28, 0x89	; 137
     7a4:	d1 40       	sbci	r29, 0x01	; 1
     7a6:	04 5f       	subi	r16, 0xF4	; 244
     7a8:	1f 4f       	sbci	r17, 0xFF	; 255
     7aa:	fc 01       	movw	r30, r24
     7ac:	13 83       	std	Z+3, r17	; 0x03
     7ae:	02 83       	std	Z+2, r16	; 0x02
     7b0:	d8 01       	movw	r26, r16
     7b2:	13 96       	adiw	r26, 0x03	; 3
     7b4:	1c 92       	st	X, r1
     7b6:	1e 92       	st	-X, r1
     7b8:	12 97       	sbiw	r26, 0x02	; 2
     7ba:	38 96       	adiw	r30, 0x08	; 8
     7bc:	c5 57       	subi	r28, 0x75	; 117
     7be:	de 4f       	sbci	r29, 0xFE	; 254
     7c0:	f9 83       	std	Y+1, r31	; 0x01
     7c2:	e8 83       	st	Y, r30
     7c4:	cb 58       	subi	r28, 0x8B	; 139
     7c6:	d1 40       	sbci	r29, 0x01	; 1
     7c8:	13 82       	std	Z+3, r1	; 0x03
     7ca:	12 82       	std	Z+2, r1	; 0x02
if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     7cc:	dc 01       	movw	r26, r24
     7ce:	ad 92       	st	X+, r10
     7d0:	bc 92       	st	X, r11
     7d2:	8d e4       	ldi	r24, 0x4D	; 77
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	8c 0f       	add	r24, r28
     7d8:	9d 1f       	adc	r25, r29
     7da:	0a 96       	adiw	r24, 0x0a	; 10
     7dc:	d8 01       	movw	r26, r16
     7de:	8d 93       	st	X+, r24
     7e0:	9c 93       	st	X, r25
     7e2:	31 82       	std	Z+1, r3	; 0x01
     7e4:	20 82       	st	Z, r2

// if speed is medium and distance is twoM then speed is medHigh
struct rule_element_type if81, if82, then8;
rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     7e6:	08 5f       	subi	r16, 0xF8	; 248
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	c1 57       	subi	r28, 0x71	; 113
     7ec:	de 4f       	sbci	r29, 0xFE	; 254
     7ee:	19 83       	std	Y+1, r17	; 0x01
     7f0:	08 83       	st	Y, r16
     7f2:	cf 58       	subi	r28, 0x8F	; 143
     7f4:	d1 40       	sbci	r29, 0x01	; 1
     7f6:	7e 01       	movw	r14, r28
     7f8:	bf ef       	ldi	r27, 0xFF	; 255
     7fa:	eb 1a       	sub	r14, r27
     7fc:	bd ef       	ldi	r27, 0xFD	; 253
     7fe:	fb 0a       	sbc	r15, r27
     800:	f8 01       	movw	r30, r16
     802:	f3 82       	std	Z+3, r15	; 0x03
     804:	e2 82       	std	Z+2, r14	; 0x02
     806:	d7 01       	movw	r26, r14
     808:	13 96       	adiw	r26, 0x03	; 3
     80a:	1c 92       	st	X, r1
     80c:	1e 92       	st	-X, r1
     80e:	12 97       	sbiw	r26, 0x02	; 2
     810:	14 96       	adiw	r26, 0x04	; 4
     812:	cf 56       	subi	r28, 0x6F	; 111
     814:	de 4f       	sbci	r29, 0xFE	; 254
     816:	b9 83       	std	Y+1, r27	; 0x01
     818:	a8 83       	st	Y, r26
     81a:	c1 59       	subi	r28, 0x91	; 145
     81c:	d1 40       	sbci	r29, 0x01	; 1
     81e:	13 96       	adiw	r26, 0x03	; 3
     820:	1c 92       	st	X, r1
     822:	1e 92       	st	-X, r1
     824:	12 97       	sbiw	r26, 0x02	; 2
if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     826:	51 82       	std	Z+1, r5	; 0x01
     828:	40 82       	st	Z, r4
     82a:	f7 01       	movw	r30, r14
     82c:	91 83       	std	Z+1, r25	; 0x01
     82e:	80 83       	st	Z, r24
     830:	0f 2e       	mov	r0, r31
     832:	f9 e3       	ldi	r31, 0x39	; 57
     834:	cf 2e       	mov	r12, r31
     836:	dd 24       	eor	r13, r13
     838:	d3 94       	inc	r13
     83a:	f0 2d       	mov	r31, r0
     83c:	cc 0e       	add	r12, r28
     83e:	dd 1e       	adc	r13, r29
     840:	fa e0       	ldi	r31, 0x0A	; 10
     842:	cf 0e       	add	r12, r31
     844:	d1 1c       	adc	r13, r1
     846:	cd 92       	st	X+, r12
     848:	dc 92       	st	X, r13

// if speed is high and distance is twoM then speed is medHigh
struct rule_element_type if91, if92, then9;
rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     84a:	7e 01       	movw	r14, r28
     84c:	a7 ef       	ldi	r26, 0xF7	; 247
     84e:	ea 1a       	sub	r14, r26
     850:	ad ef       	ldi	r26, 0xFD	; 253
     852:	fa 0a       	sbc	r15, r26
     854:	cb 56       	subi	r28, 0x6B	; 107
     856:	de 4f       	sbci	r29, 0xFE	; 254
     858:	f9 82       	std	Y+1, r15	; 0x01
     85a:	e8 82       	st	Y, r14
     85c:	c5 59       	subi	r28, 0x95	; 149
     85e:	d1 40       	sbci	r29, 0x01	; 1
     860:	00 5f       	subi	r16, 0xF0	; 240
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	f7 01       	movw	r30, r14
     866:	13 83       	std	Z+3, r17	; 0x03
     868:	02 83       	std	Z+2, r16	; 0x02
     86a:	d8 01       	movw	r26, r16
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	1c 92       	st	X, r1
     870:	1e 92       	st	-X, r1
     872:	12 97       	sbiw	r26, 0x02	; 2
     874:	14 96       	adiw	r26, 0x04	; 4
     876:	c9 56       	subi	r28, 0x69	; 105
     878:	de 4f       	sbci	r29, 0xFE	; 254
     87a:	b9 83       	std	Y+1, r27	; 0x01
     87c:	a8 83       	st	Y, r26
     87e:	c7 59       	subi	r28, 0x97	; 151
     880:	d1 40       	sbci	r29, 0x01	; 1
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	1c 92       	st	X, r1
     886:	1e 92       	st	-X, r1
     888:	12 97       	sbiw	r26, 0x02	; 2
if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     88a:	51 83       	std	Z+1, r21	; 0x01
     88c:	40 83       	st	Z, r20
     88e:	f8 01       	movw	r30, r16
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
     894:	cd 92       	st	X+, r12
     896:	dc 92       	st	X, r13

// if speed is still and distance is twoM then speed is cruise
struct rule_element_type if101, if102, then10;
rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     898:	08 5f       	subi	r16, 0xF8	; 248
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	c5 56       	subi	r28, 0x65	; 101
     89e:	de 4f       	sbci	r29, 0xFE	; 254
     8a0:	19 83       	std	Y+1, r17	; 0x01
     8a2:	08 83       	st	Y, r16
     8a4:	cb 59       	subi	r28, 0x9B	; 155
     8a6:	d1 40       	sbci	r29, 0x01	; 1
     8a8:	42 5c       	subi	r20, 0xC2	; 194
     8aa:	5e 4f       	sbci	r21, 0xFE	; 254
     8ac:	d8 01       	movw	r26, r16
     8ae:	13 96       	adiw	r26, 0x03	; 3
     8b0:	5c 93       	st	X, r21
     8b2:	4e 93       	st	-X, r20
     8b4:	12 97       	sbiw	r26, 0x02	; 2
     8b6:	fa 01       	movw	r30, r20
     8b8:	13 82       	std	Z+3, r1	; 0x03
     8ba:	12 82       	std	Z+2, r1	; 0x02
     8bc:	18 96       	adiw	r26, 0x08	; 8
     8be:	c3 56       	subi	r28, 0x63	; 99
     8c0:	de 4f       	sbci	r29, 0xFE	; 254
     8c2:	b9 83       	std	Y+1, r27	; 0x01
     8c4:	a8 83       	st	Y, r26
     8c6:	cd 59       	subi	r28, 0x9D	; 157
     8c8:	d1 40       	sbci	r29, 0x01	; 1
     8ca:	13 96       	adiw	r26, 0x03	; 3
     8cc:	1c 92       	st	X, r1
     8ce:	1e 92       	st	-X, r1
     8d0:	12 97       	sbiw	r26, 0x02	; 2
if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     8d2:	f8 01       	movw	r30, r16
     8d4:	31 83       	std	Z+1, r19	; 0x01
     8d6:	20 83       	st	Z, r18
     8d8:	fa 01       	movw	r30, r20
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	2d 92       	st	X+, r2
     8e0:	3c 92       	st	X, r3

// if speed is cruising and distance is twoM then speed is medHigh
struct rule_element_type if111, if112, then11;
rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     8e2:	48 5f       	subi	r20, 0xF8	; 248
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	cf 55       	subi	r28, 0x5F	; 95
     8e8:	de 4f       	sbci	r29, 0xFE	; 254
     8ea:	59 83       	std	Y+1, r21	; 0x01
     8ec:	48 83       	st	Y, r20
     8ee:	c1 5a       	subi	r28, 0xA1	; 161
     8f0:	d1 40       	sbci	r29, 0x01	; 1
     8f2:	2e 55       	subi	r18, 0x5E	; 94
     8f4:	3e 4f       	sbci	r19, 0xFE	; 254
     8f6:	da 01       	movw	r26, r20
     8f8:	13 96       	adiw	r26, 0x03	; 3
     8fa:	3c 93       	st	X, r19
     8fc:	2e 93       	st	-X, r18
     8fe:	12 97       	sbiw	r26, 0x02	; 2
     900:	f9 01       	movw	r30, r18
     902:	13 82       	std	Z+3, r1	; 0x03
     904:	12 82       	std	Z+2, r1	; 0x02
     906:	18 96       	adiw	r26, 0x08	; 8
     908:	cd 55       	subi	r28, 0x5D	; 93
     90a:	de 4f       	sbci	r29, 0xFE	; 254
     90c:	b9 83       	std	Y+1, r27	; 0x01
     90e:	a8 83       	st	Y, r26
     910:	c3 5a       	subi	r28, 0xA3	; 163
     912:	d1 40       	sbci	r29, 0x01	; 1
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	1c 92       	st	X, r1
     918:	1e 92       	st	-X, r1
     91a:	12 97       	sbiw	r26, 0x02	; 2
if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     91c:	fa 01       	movw	r30, r20
     91e:	71 83       	std	Z+1, r23	; 0x01
     920:	60 83       	st	Z, r22
     922:	f9 01       	movw	r30, r18
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
     928:	11 96       	adiw	r26, 0x01	; 1
     92a:	dc 92       	st	X, r13
     92c:	ce 92       	st	-X, r12

// if distance is threeM then speed is max
struct rule_element_type if121, then12;
rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     92e:	14 96       	adiw	r26, 0x04	; 4
     930:	c9 55       	subi	r28, 0x59	; 89
     932:	de 4f       	sbci	r29, 0xFE	; 254
     934:	b9 83       	std	Y+1, r27	; 0x01
     936:	a8 83       	st	Y, r26
     938:	c7 5a       	subi	r28, 0xA7	; 167
     93a:	d1 40       	sbci	r29, 0x01	; 1
     93c:	13 96       	adiw	r26, 0x03	; 3
     93e:	1c 92       	st	X, r1
     940:	1e 92       	st	-X, r1
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	3c 96       	adiw	r30, 0x0c	; 12
     946:	c7 55       	subi	r28, 0x57	; 87
     948:	de 4f       	sbci	r29, 0xFE	; 254
     94a:	f9 83       	std	Y+1, r31	; 0x01
     94c:	e8 83       	st	Y, r30
     94e:	c9 5a       	subi	r28, 0xA9	; 169
     950:	d1 40       	sbci	r29, 0x01	; 1
     952:	13 82       	std	Z+3, r1	; 0x03
     954:	12 82       	std	Z+2, r1	; 0x02
if121.value = &threeM.value; then12.value = &max.value;
     956:	83 e6       	ldi	r24, 0x63	; 99
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	8c 0f       	add	r24, r28
     95c:	9d 1f       	adc	r25, r29
     95e:	0a 96       	adiw	r24, 0x0a	; 10
     960:	8d 93       	st	X+, r24
     962:	9c 93       	st	X, r25
     964:	8f e4       	ldi	r24, 0x4F	; 79
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	8c 0f       	add	r24, r28
     96a:	9d 1f       	adc	r25, r29
     96c:	0a 96       	adiw	r24, 0x0a	; 10
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	80 83       	st	Z, r24


// EXECUTING FUZZY LOGIC & OUTPUT VALUE
//////////////////////////////////////////////////////////////////////////////

fuzzification();
     972:	b5 d0       	rcall	.+362    	; 0xade <fuzzification>
rule_evaluation();
     974:	db d0       	rcall	.+438    	; 0xb2c <rule_evaluation>
defuzzification();
     976:	20 d1       	rcall	.+576    	; 0xbb8 <defuzzification>

if (pwm.value > 2840)
     978:	cf 50       	subi	r28, 0x0F	; 15
     97a:	df 4f       	sbci	r29, 0xFF	; 255
     97c:	88 81       	ld	r24, Y
     97e:	99 81       	ldd	r25, Y+1	; 0x01
     980:	c1 5f       	subi	r28, 0xF1	; 241
     982:	d0 40       	sbci	r29, 0x00	; 0
     984:	89 31       	cpi	r24, 0x19	; 25
     986:	fb e0       	ldi	r31, 0x0B	; 11
     988:	9f 07       	cpc	r25, r31
     98a:	4c f0       	brlt	.+18     	; 0x99e <doFuzzy2+0x85a>
{
setESC(2840+adjustment);
     98c:	80 91 1a 02 	lds	r24, 0x021A
     990:	90 91 1b 02 	lds	r25, 0x021B
     994:	88 5e       	subi	r24, 0xE8	; 232
     996:	94 4f       	sbci	r25, 0xF4	; 244
     998:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <setESC>
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <doFuzzy2+0x87c>
}
else if (pwm.value < 2750)
     99e:	8e 3b       	cpi	r24, 0xBE	; 190
     9a0:	2a e0       	ldi	r18, 0x0A	; 10
     9a2:	92 07       	cpc	r25, r18
     9a4:	2c f4       	brge	.+10     	; 0x9b0 <doFuzzy2+0x86c>
{
setESC(2750);
     9a6:	8e eb       	ldi	r24, 0xBE	; 190
     9a8:	9a e0       	ldi	r25, 0x0A	; 10
     9aa:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <setESC>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <doFuzzy2+0x87c>
}
else
{
setESC(pwm.value+adjustment);
     9b0:	20 91 1a 02 	lds	r18, 0x021A
     9b4:	30 91 1b 02 	lds	r19, 0x021B
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <setESC>
}



}
     9c0:	cc 5c       	subi	r28, 0xCC	; 204
     9c2:	dd 4f       	sbci	r29, 0xFD	; 253
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	3f 90       	pop	r3
     9f0:	2f 90       	pop	r2
     9f2:	08 95       	ret

000009f4 <FLC_obstacle>:

void FLC_obstacle(int currentOCR1A, int midSonicRange, int v)
{
if(v == 81)
     9f4:	41 35       	cpi	r20, 0x51	; 81
     9f6:	51 05       	cpc	r21, r1
     9f8:	39 f4       	brne	.+14     	; 0xa08 <FLC_obstacle+0x14>
{
adjustment = -5;
     9fa:	2b ef       	ldi	r18, 0xFB	; 251
     9fc:	3f ef       	ldi	r19, 0xFF	; 255
     9fe:	30 93 1b 02 	sts	0x021B, r19
     a02:	20 93 1a 02 	sts	0x021A, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <FLC_obstacle+0x1c>
}
else
{
adjustment = 0;
     a08:	10 92 1b 02 	sts	0x021B, r1
     a0c:	10 92 1a 02 	sts	0x021A, r1
}

doFuzzy2(currentOCR1A,midSonicRange);
     a10:	99 cb       	rjmp	.-2254   	; 0x144 <doFuzzy2>
     a12:	08 95       	ret

00000a14 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     a14:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     a16:	84 85       	ldd	r24, Z+12	; 0x0c
     a18:	95 85       	ldd	r25, Z+13	; 0x0d
     a1a:	9b 01       	movw	r18, r22
     a1c:	28 1b       	sub	r18, r24
     a1e:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     a20:	86 85       	ldd	r24, Z+14	; 0x0e
     a22:	97 85       	ldd	r25, Z+15	; 0x0f
     a24:	86 1b       	sub	r24, r22
     a26:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     a28:	12 16       	cp	r1, r18
     a2a:	13 06       	cpc	r1, r19
     a2c:	f4 f4       	brge	.+60     	; 0xa6a <compute_degree_of_membership+0x56>
     a2e:	18 16       	cp	r1, r24
     a30:	19 06       	cpc	r1, r25
     a32:	f4 f4       	brge	.+60     	; 0xa70 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     a34:	60 89       	ldd	r22, Z+16	; 0x10
     a36:	71 89       	ldd	r23, Z+17	; 0x11
     a38:	a2 89       	ldd	r26, Z+18	; 0x12
     a3a:	b3 89       	ldd	r27, Z+19	; 0x13
     a3c:	8a 9f       	mul	r24, r26
     a3e:	a0 01       	movw	r20, r0
     a40:	8b 9f       	mul	r24, r27
     a42:	50 0d       	add	r21, r0
     a44:	9a 9f       	mul	r25, r26
     a46:	50 0d       	add	r21, r0
     a48:	11 24       	eor	r1, r1
     a4a:	26 9f       	mul	r18, r22
     a4c:	c0 01       	movw	r24, r0
     a4e:	27 9f       	mul	r18, r23
     a50:	90 0d       	add	r25, r0
     a52:	36 9f       	mul	r19, r22
     a54:	90 0d       	add	r25, r0
     a56:	11 24       	eor	r1, r1
     a58:	48 17       	cp	r20, r24
     a5a:	59 07       	cpc	r21, r25
     a5c:	0c f4       	brge	.+2      	; 0xa60 <compute_degree_of_membership+0x4c>
     a5e:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     a60:	8f 3f       	cpi	r24, 0xFF	; 255
     a62:	91 05       	cpc	r25, r1
     a64:	09 f0       	breq	.+2      	; 0xa68 <compute_degree_of_membership+0x54>
     a66:	3c f4       	brge	.+14     	; 0xa76 <compute_degree_of_membership+0x62>
     a68:	08 c0       	rjmp	.+16     	; 0xa7a <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <compute_degree_of_membership+0x66>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     a7a:	93 87       	std	Z+11, r25	; 0x0b
     a7c:	82 87       	std	Z+10, r24	; 0x0a
     a7e:	08 95       	ret

00000a80 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     a8a:	c6 85       	ldd	r28, Z+14	; 0x0e
     a8c:	d7 85       	ldd	r29, Z+15	; 0x0f
     a8e:	84 85       	ldd	r24, Z+12	; 0x0c
     a90:	95 85       	ldd	r25, Z+13	; 0x0d
     a92:	c8 1b       	sub	r28, r24
     a94:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     a96:	22 85       	ldd	r18, Z+10	; 0x0a
     a98:	33 85       	ldd	r19, Z+11	; 0x0b
     a9a:	60 89       	ldd	r22, Z+16	; 0x10
     a9c:	71 89       	ldd	r23, Z+17	; 0x11
     a9e:	c9 01       	movw	r24, r18
     aa0:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     aa4:	8e 01       	movw	r16, r28
     aa6:	06 1b       	sub	r16, r22
     aa8:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     aaa:	62 89       	ldd	r22, Z+18	; 0x12
     aac:	73 89       	ldd	r23, Z+19	; 0x13
     aae:	c9 01       	movw	r24, r18
     ab0:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
    top = base - run_1 - run_2;
     ab4:	06 1b       	sub	r16, r22
     ab6:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     ab8:	c0 0f       	add	r28, r16
     aba:	d1 1f       	adc	r29, r17
     abc:	2c 9f       	mul	r18, r28
     abe:	c0 01       	movw	r24, r0
     ac0:	2d 9f       	mul	r18, r29
     ac2:	90 0d       	add	r25, r0
     ac4:	3c 9f       	mul	r19, r28
     ac6:	90 0d       	add	r25, r0
     ac8:	11 24       	eor	r1, r1
     aca:	99 23       	and	r25, r25
     acc:	0c f4       	brge	.+2      	; 0xad0 <compute_area_of_trapezoid+0x50>
     ace:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     ad0:	95 95       	asr	r25
     ad2:	87 95       	ror	r24
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	08 95       	ret

00000ade <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     ae6:	00 91 3c 03 	lds	r16, 0x033C
     aea:	10 91 3d 03 	lds	r17, 0x033D
     aee:	01 15       	cp	r16, r1
     af0:	11 05       	cpc	r17, r1
     af2:	b9 f0       	breq	.+46     	; 0xb22 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     af4:	f8 01       	movw	r30, r16
     af6:	c4 85       	ldd	r28, Z+12	; 0x0c
     af8:	d5 85       	ldd	r29, Z+13	; 0x0d
     afa:	20 97       	sbiw	r28, 0x00	; 0
     afc:	61 f0       	breq	.+24     	; 0xb16 <fuzzification+0x38>
            if (mf!=NULL) {
     afe:	20 97       	sbiw	r28, 0x00	; 0
     b00:	29 f0       	breq	.+10     	; 0xb0c <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     b02:	f8 01       	movw	r30, r16
     b04:	62 85       	ldd	r22, Z+10	; 0x0a
     b06:	73 85       	ldd	r23, Z+11	; 0x0b
     b08:	ce 01       	movw	r24, r28
     b0a:	84 df       	rcall	.-248    	; 0xa14 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     b0c:	0c 88       	ldd	r0, Y+20	; 0x14
     b0e:	dd 89       	ldd	r29, Y+21	; 0x15
     b10:	c0 2d       	mov	r28, r0
     b12:	20 97       	sbiw	r28, 0x00	; 0
     b14:	a1 f7       	brne	.-24     	; 0xafe <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     b16:	f8 01       	movw	r30, r16
     b18:	06 85       	ldd	r16, Z+14	; 0x0e
     b1a:	17 85       	ldd	r17, Z+15	; 0x0f
     b1c:	01 15       	cp	r16, r1
     b1e:	11 05       	cpc	r17, r1
     b20:	49 f7       	brne	.-46     	; 0xaf4 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     b34:	c0 91 3e 03 	lds	r28, 0x033E
     b38:	d0 91 3f 03 	lds	r29, 0x033F
     b3c:	20 97       	sbiw	r28, 0x00	; 0
     b3e:	b9 f1       	breq	.+110    	; 0xbae <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     b44:	e8 81       	ld	r30, Y
     b46:	f9 81       	ldd	r31, Y+1	; 0x01
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	81 f0       	breq	.+32     	; 0xb6c <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b4c:	20 2f       	mov	r18, r16
     b4e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     b50:	a0 81       	ld	r26, Z
     b52:	b1 81       	ldd	r27, Z+1	; 0x01
     b54:	8d 91       	ld	r24, X+
     b56:	9c 91       	ld	r25, X
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	0c f4       	brge	.+2      	; 0xb60 <rule_evaluation+0x34>
     b5e:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     b60:	02 80       	ldd	r0, Z+2	; 0x02
     b62:	f3 81       	ldd	r31, Z+3	; 0x03
     b64:	e0 2d       	mov	r30, r0
     b66:	30 97       	sbiw	r30, 0x00	; 0
     b68:	99 f7       	brne	.-26     	; 0xb50 <rule_evaluation+0x24>
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     b6c:	20 2f       	mov	r18, r16
     b6e:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     b70:	ea 81       	ldd	r30, Y+2	; 0x02
     b72:	fb 81       	ldd	r31, Y+3	; 0x03
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	b1 f0       	breq	.+44     	; 0xba4 <rule_evaluation+0x78>
     b78:	72 2f       	mov	r23, r18
     b7a:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     b7c:	a0 81       	ld	r26, Z
     b7e:	b1 81       	ldd	r27, Z+1	; 0x01
     b80:	8d 91       	ld	r24, X+
     b82:	9c 91       	ld	r25, X
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	57 2f       	mov	r21, r23
     b88:	46 2f       	mov	r20, r22
     b8a:	28 17       	cp	r18, r24
     b8c:	39 07       	cpc	r19, r25
     b8e:	14 f4       	brge	.+4      	; 0xb94 <rule_evaluation+0x68>
     b90:	58 2f       	mov	r21, r24
     b92:	49 2f       	mov	r20, r25
     b94:	5c 93       	st	X, r21
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     b9a:	02 80       	ldd	r0, Z+2	; 0x02
     b9c:	f3 81       	ldd	r31, Z+3	; 0x03
     b9e:	e0 2d       	mov	r30, r0
     ba0:	30 97       	sbiw	r30, 0x00	; 0
     ba2:	61 f7       	brne	.-40     	; 0xb7c <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     ba4:	0c 80       	ldd	r0, Y+4	; 0x04
     ba6:	dd 81       	ldd	r29, Y+5	; 0x05
     ba8:	c0 2d       	mov	r28, r0
     baa:	20 97       	sbiw	r28, 0x00	; 0
     bac:	59 f6       	brne	.-106    	; 0xb44 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     bb8:	2f 92       	push	r2
     bba:	3f 92       	push	r3
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	00 d0       	rcall	.+0      	; 0xbde <defuzzification+0x26>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <defuzzification+0x28>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <defuzzification+0x2a>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     be6:	80 91 3a 03 	lds	r24, 0x033A
     bea:	90 91 3b 03 	lds	r25, 0x033B
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	8b 83       	std	Y+3, r24	; 0x03
     bf2:	89 2b       	or	r24, r25
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <defuzzification+0x40>
     bf6:	8d c0       	rjmp	.+282    	; 0xd12 <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     bf8:	eb 81       	ldd	r30, Y+3	; 0x03
     bfa:	fc 81       	ldd	r31, Y+4	; 0x04
     bfc:	04 84       	ldd	r0, Z+12	; 0x0c
     bfe:	f5 85       	ldd	r31, Z+13	; 0x0d
     c00:	e0 2d       	mov	r30, r0
     c02:	fe 83       	std	Y+6, r31	; 0x06
     c04:	ed 83       	std	Y+5, r30	; 0x05
     c06:	ef 2b       	or	r30, r31
     c08:	09 f4       	brne	.+2      	; 0xc0c <defuzzification+0x54>
     c0a:	6e c0       	rjmp	.+220    	; 0xce8 <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     c0c:	51 2c       	mov	r5, r1
     c0e:	61 2c       	mov	r6, r1
     c10:	71 2c       	mov	r7, r1
     c12:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     c14:	31 2c       	mov	r3, r1
     c16:	21 2c       	mov	r2, r1
     c18:	19 82       	std	Y+1, r1	; 0x01
     c1a:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	2f df       	rcall	.-418    	; 0xa80 <compute_area_of_trapezoid>
     c22:	bc 01       	movw	r22, r24
     c24:	88 27       	eor	r24, r24
     c26:	77 fd       	sbrc	r23, 7
     c28:	80 95       	com	r24
     c2a:	98 2f       	mov	r25, r24
     c2c:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     c30:	6b 01       	movw	r12, r22
     c32:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     c34:	ed 81       	ldd	r30, Y+5	; 0x05
     c36:	fe 81       	ldd	r31, Y+6	; 0x06
     c38:	04 85       	ldd	r16, Z+12	; 0x0c
     c3a:	15 85       	ldd	r17, Z+13	; 0x0d
     c3c:	b8 01       	movw	r22, r16
     c3e:	88 27       	eor	r24, r24
     c40:	77 fd       	sbrc	r23, 7
     c42:	80 95       	com	r24
     c44:	98 2f       	mov	r25, r24
     c46:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     c4a:	4b 01       	movw	r8, r22
     c4c:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     c4e:	ed 81       	ldd	r30, Y+5	; 0x05
     c50:	fe 81       	ldd	r31, Y+6	; 0x06
     c52:	86 85       	ldd	r24, Z+14	; 0x0e
     c54:	97 85       	ldd	r25, Z+15	; 0x0f
     c56:	80 1b       	sub	r24, r16
     c58:	91 0b       	sbc	r25, r17
     c5a:	bc 01       	movw	r22, r24
     c5c:	12 f4       	brpl	.+4      	; 0xc62 <defuzzification+0xaa>
     c5e:	6f 5f       	subi	r22, 0xFF	; 255
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	75 95       	asr	r23
     c64:	67 95       	ror	r22
            centroid = centroid + intermed;
     c66:	88 27       	eor	r24, r24
     c68:	77 fd       	sbrc	r23, 7
     c6a:	80 95       	com	r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	0e 94 2a 11 	call	0x2254	; 0x2254 <__floatsisf>
     c72:	a5 01       	movw	r20, r10
     c74:	94 01       	movw	r18, r8
     c76:	0e 94 2b 10 	call	0x2056	; 0x2056 <__addsf3>
     c7a:	9b 01       	movw	r18, r22
     c7c:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     c7e:	c7 01       	movw	r24, r14
     c80:	b6 01       	movw	r22, r12
     c82:	0e 94 b6 11 	call	0x236c	; 0x236c <__mulsf3>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	63 2d       	mov	r22, r3
     c8c:	72 2d       	mov	r23, r2
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	0e 94 2b 10 	call	0x2056	; 0x2056 <__addsf3>
     c96:	36 2e       	mov	r3, r22
     c98:	27 2e       	mov	r2, r23
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     c9e:	a7 01       	movw	r20, r14
     ca0:	96 01       	movw	r18, r12
     ca2:	65 2d       	mov	r22, r5
     ca4:	76 2d       	mov	r23, r6
     ca6:	87 2d       	mov	r24, r7
     ca8:	94 2d       	mov	r25, r4
     caa:	0e 94 2b 10 	call	0x2056	; 0x2056 <__addsf3>
     cae:	56 2e       	mov	r5, r22
     cb0:	67 2e       	mov	r6, r23
     cb2:	78 2e       	mov	r7, r24
     cb4:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     cb6:	ed 81       	ldd	r30, Y+5	; 0x05
     cb8:	fe 81       	ldd	r31, Y+6	; 0x06
     cba:	04 88       	ldd	r0, Z+20	; 0x14
     cbc:	f5 89       	ldd	r31, Z+21	; 0x15
     cbe:	e0 2d       	mov	r30, r0
     cc0:	fe 83       	std	Y+6, r31	; 0x06
     cc2:	ed 83       	std	Y+5, r30	; 0x05
     cc4:	ef 2b       	or	r30, r31
     cc6:	09 f0       	breq	.+2      	; 0xcca <defuzzification+0x112>
     cc8:	a9 cf       	rjmp	.-174    	; 0xc1c <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     cca:	26 2f       	mov	r18, r22
     ccc:	37 2f       	mov	r19, r23
     cce:	48 2f       	mov	r20, r24
     cd0:	59 2f       	mov	r21, r25
     cd2:	63 2d       	mov	r22, r3
     cd4:	72 2d       	mov	r23, r2
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	0e 94 8f 10 	call	0x211e	; 0x211e <__divsf3>
     cde:	26 2f       	mov	r18, r22
     ce0:	37 2f       	mov	r19, r23
     ce2:	48 2f       	mov	r20, r24
     ce4:	59 2f       	mov	r21, r25
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     cf0:	62 2f       	mov	r22, r18
     cf2:	73 2f       	mov	r23, r19
     cf4:	84 2f       	mov	r24, r20
     cf6:	95 2f       	mov	r25, r21
     cf8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__fixsfsi>
     cfc:	eb 81       	ldd	r30, Y+3	; 0x03
     cfe:	fc 81       	ldd	r31, Y+4	; 0x04
     d00:	73 87       	std	Z+11, r23	; 0x0b
     d02:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     d04:	86 85       	ldd	r24, Z+14	; 0x0e
     d06:	97 85       	ldd	r25, Z+15	; 0x0f
     d08:	9c 83       	std	Y+4, r25	; 0x04
     d0a:	8b 83       	std	Y+3, r24	; 0x03
     d0c:	89 2b       	or	r24, r25
     d0e:	09 f0       	breq	.+2      	; 0xd12 <defuzzification+0x15a>
     d10:	73 cf       	rjmp	.-282    	; 0xbf8 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     d12:	26 96       	adiw	r28, 0x06	; 6
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	3f 90       	pop	r3
     d40:	2f 90       	pop	r2
     d42:	08 95       	ret

00000d44 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     d44:	af 92       	push	r10
     d46:	bf 92       	push	r11
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
     d5a:	6a 01       	movw	r12, r20
     d5c:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     d5e:	0e 94 5f 12 	call	0x24be	; 0x24be <strcpy>
    newMf->value = 0;
     d62:	1b 86       	std	Y+11, r1	; 0x0b
     d64:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     d66:	dd 86       	std	Y+13, r13	; 0x0d
     d68:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     d6a:	ff 86       	std	Y+15, r15	; 0x0f
     d6c:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     d6e:	b5 01       	movw	r22, r10
     d70:	6c 19       	sub	r22, r12
     d72:	7d 09       	sbc	r23, r13
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	31 e0       	ldi	r19, 0x01	; 1
     d78:	c9 01       	movw	r24, r18
     d7a:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
     d7e:	79 8b       	std	Y+17, r23	; 0x11
     d80:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     d82:	b7 01       	movw	r22, r14
     d84:	60 1b       	sub	r22, r16
     d86:	71 0b       	sbc	r23, r17
     d88:	c9 01       	movw	r24, r18
     d8a:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
     d8e:	7b 8b       	std	Y+19, r23	; 0x13
     d90:	6a 8b       	std	Y+18, r22	; 0x12
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <leftTurn>:

/*
 * This function deals with left turns
 */
void leftTurn(int gyro)
{
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	ce 5c       	subi	r28, 0xCE	; 206
     dd2:	d1 09       	sbc	r29, r1
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
    
    // DECLARATION OF GYRO INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type turn; strcpy(turn.name, "turn");
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	e8 e6       	ldi	r30, 0x68	; 104
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	9e 01       	movw	r18, r28
     de6:	2f 5f       	subi	r18, 0xFF	; 255
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	19 01       	movw	r2, r18
     dec:	d9 01       	movw	r26, r18
     dee:	01 90       	ld	r0, Z+
     df0:	0d 92       	st	X+, r0
     df2:	8a 95       	dec	r24
     df4:	e1 f7       	brne	.-8      	; 0xdee <leftTurn+0x46>
    
    // Set MFs
    struct mf_type start;
    MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
     df6:	5e 01       	movw	r10, r28
     df8:	31 e1       	ldi	r19, 0x11	; 17
     dfa:	a3 0e       	add	r10, r19
     dfc:	b1 1c       	adc	r11, r1
     dfe:	0f 2e       	mov	r0, r31
     e00:	fd e2       	ldi	r31, 0x2D	; 45
     e02:	ef 2e       	mov	r14, r31
     e04:	f1 2c       	mov	r15, r1
     e06:	f0 2d       	mov	r31, r0
     e08:	00 e0       	ldi	r16, 0x00	; 0
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	4f ef       	ldi	r20, 0xFF	; 255
     e12:	5f ef       	ldi	r21, 0xFF	; 255
     e14:	6d e6       	ldi	r22, 0x6D	; 109
     e16:	71 e0       	ldi	r23, 0x01	; 1
     e18:	c5 01       	movw	r24, r10
     e1a:	94 df       	rcall	.-216    	; 0xd44 <MATLAB_MF>
    struct mf_type middle;
    MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
     e1c:	6e 01       	movw	r12, r28
     e1e:	87 e2       	ldi	r24, 0x27	; 39
     e20:	c8 0e       	add	r12, r24
     e22:	d1 1c       	adc	r13, r1
     e24:	0f 2e       	mov	r0, r31
     e26:	fc e3       	ldi	r31, 0x3C	; 60
     e28:	ef 2e       	mov	r14, r31
     e2a:	f1 2c       	mov	r15, r1
     e2c:	f0 2d       	mov	r31, r0
     e2e:	0d e2       	ldi	r16, 0x2D	; 45
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	2d e2       	ldi	r18, 0x2D	; 45
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4e e1       	ldi	r20, 0x1E	; 30
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	63 e7       	ldi	r22, 0x73	; 115
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	c6 01       	movw	r24, r12
     e40:	81 df       	rcall	.-254    	; 0xd44 <MATLAB_MF>
    struct mf_type end;
    MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
     e42:	2e 01       	movw	r4, r28
     e44:	ed e3       	ldi	r30, 0x3D	; 61
     e46:	4e 0e       	add	r4, r30
     e48:	51 1c       	adc	r5, r1
     e4a:	0f 2e       	mov	r0, r31
     e4c:	fe e7       	ldi	r31, 0x7E	; 126
     e4e:	ef 2e       	mov	r14, r31
     e50:	f1 2c       	mov	r15, r1
     e52:	f0 2d       	mov	r31, r0
     e54:	0d e7       	ldi	r16, 0x7D	; 125
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	2d e2       	ldi	r18, 0x2D	; 45
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4d e2       	ldi	r20, 0x2D	; 45
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	6a e7       	ldi	r22, 0x7A	; 122
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	c2 01       	movw	r24, r4
     e66:	6e df       	rcall	.-292    	; 0xd44 <MATLAB_MF>

    // Linked list for MFs
    turn.membership_functions = &start;
     e68:	be 86       	std	Y+14, r11	; 0x0e
     e6a:	ad 86       	std	Y+13, r10	; 0x0d
    start.next = &middle;
     e6c:	de a2       	std	Y+38, r13	; 0x26
     e6e:	cd a2       	std	Y+37, r12	; 0x25
    middle.next = &end;
     e70:	5c ae       	std	Y+60, r5	; 0x3c
     e72:	4b ae       	std	Y+59, r4	; 0x3b
    end.next = NULL;
     e74:	63 96       	adiw	r28, 0x13	; 19
     e76:	1f ae       	std	Y+63, r1	; 0x3f
     e78:	1e ae       	std	Y+62, r1	; 0x3e
     e7a:	63 97       	sbiw	r28, 0x13	; 19
    
    
    // DECLARATION OF SERVO OUTPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type servo; strcpy(servo.name, "servo");
     e7c:	6e 01       	movw	r12, r28
     e7e:	f3 e5       	ldi	r31, 0x53	; 83
     e80:	cf 0e       	add	r12, r31
     e82:	d1 1c       	adc	r13, r1
     e84:	86 e0       	ldi	r24, 0x06	; 6
     e86:	ee e7       	ldi	r30, 0x7E	; 126
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	d6 01       	movw	r26, r12
     e8c:	01 90       	ld	r0, Z+
     e8e:	0d 92       	st	X+, r0
     e90:	8a 95       	dec	r24
     e92:	e1 f7       	brne	.-8      	; 0xe8c <leftTurn+0xe4>
    
    // Set MFs
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2460, 2560, 2560, 2660);
     e94:	5e 01       	movw	r10, r28
     e96:	23 e6       	ldi	r18, 0x63	; 99
     e98:	a2 0e       	add	r10, r18
     e9a:	b1 1c       	adc	r11, r1
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f4 e6       	ldi	r31, 0x64	; 100
     ea0:	ef 2e       	mov	r14, r31
     ea2:	fa e0       	ldi	r31, 0x0A	; 10
     ea4:	ff 2e       	mov	r15, r31
     ea6:	f0 2d       	mov	r31, r0
     ea8:	00 e0       	ldi	r16, 0x00	; 0
     eaa:	1a e0       	ldi	r17, 0x0A	; 10
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3a e0       	ldi	r19, 0x0A	; 10
     eb0:	4c e9       	ldi	r20, 0x9C	; 156
     eb2:	59 e0       	ldi	r21, 0x09	; 9
     eb4:	64 e8       	ldi	r22, 0x84	; 132
     eb6:	71 e0       	ldi	r23, 0x01	; 1
     eb8:	c5 01       	movw	r24, r10
     eba:	44 df       	rcall	.-376    	; 0xd44 <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2240, 2240, 2400, 2560);
     ebc:	4e 01       	movw	r8, r28
     ebe:	39 e7       	ldi	r19, 0x79	; 121
     ec0:	83 0e       	add	r8, r19
     ec2:	91 1c       	adc	r9, r1
     ec4:	0f 2e       	mov	r0, r31
     ec6:	e1 2c       	mov	r14, r1
     ec8:	fa e0       	ldi	r31, 0x0A	; 10
     eca:	ff 2e       	mov	r15, r31
     ecc:	f0 2d       	mov	r31, r0
     ece:	00 e6       	ldi	r16, 0x60	; 96
     ed0:	19 e0       	ldi	r17, 0x09	; 9
     ed2:	20 ec       	ldi	r18, 0xC0	; 192
     ed4:	38 e0       	ldi	r19, 0x08	; 8
     ed6:	40 ec       	ldi	r20, 0xC0	; 192
     ed8:	58 e0       	ldi	r21, 0x08	; 8
     eda:	6e e9       	ldi	r22, 0x9E	; 158
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	c4 01       	movw	r24, r8
     ee0:	31 df       	rcall	.-414    	; 0xd44 <MATLAB_MF>
    struct mf_type sharpLeft;
    MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT-1, MAXLEFT, MAXLEFT, MAXLEFT+1);
     ee2:	3e 01       	movw	r6, r28
     ee4:	8f e8       	ldi	r24, 0x8F	; 143
     ee6:	68 0e       	add	r6, r24
     ee8:	71 1c       	adc	r7, r1
     eea:	0f 2e       	mov	r0, r31
     eec:	f7 ee       	ldi	r31, 0xE7	; 231
     eee:	ef 2e       	mov	r14, r31
     ef0:	f7 e0       	ldi	r31, 0x07	; 7
     ef2:	ff 2e       	mov	r15, r31
     ef4:	f0 2d       	mov	r31, r0
     ef6:	06 ee       	ldi	r16, 0xE6	; 230
     ef8:	17 e0       	ldi	r17, 0x07	; 7
     efa:	26 ee       	ldi	r18, 0xE6	; 230
     efc:	37 e0       	ldi	r19, 0x07	; 7
     efe:	45 ee       	ldi	r20, 0xE5	; 229
     f00:	57 e0       	ldi	r21, 0x07	; 7
     f02:	63 ea       	ldi	r22, 0xA3	; 163
     f04:	71 e0       	ldi	r23, 0x01	; 1
     f06:	c3 01       	movw	r24, r6
     f08:	1d df       	rcall	.-454    	; 0xd44 <MATLAB_MF>

    // Linked list for MFs
    servo.membership_functions = &straight;
     f0a:	f6 01       	movw	r30, r12
     f0c:	b5 86       	std	Z+13, r11	; 0x0d
     f0e:	a4 86       	std	Z+12, r10	; 0x0c
    straight.next = &left;
     f10:	f5 01       	movw	r30, r10
     f12:	95 8a       	std	Z+21, r9	; 0x15
     f14:	84 8a       	std	Z+20, r8	; 0x14
    left.next = &sharpLeft;
     f16:	f4 01       	movw	r30, r8
     f18:	75 8a       	std	Z+21, r7	; 0x15
     f1a:	64 8a       	std	Z+20, r6	; 0x14
    sharpLeft.next = NULL;
     f1c:	f3 01       	movw	r30, r6
     f1e:	15 8a       	std	Z+21, r1	; 0x15
     f20:	14 8a       	std	Z+20, r1	; 0x14
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &turn;
     f22:	30 92 3d 03 	sts	0x033D, r3
     f26:	20 92 3c 03 	sts	0x033C, r2
    turn.next = NULL;
     f2a:	18 8a       	std	Y+16, r1	; 0x10
     f2c:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
     f2e:	d0 92 3b 03 	sts	0x033B, r13
     f32:	c0 92 3a 03 	sts	0x033A, r12
    servo.next = NULL;
     f36:	f6 01       	movw	r30, r12
     f38:	17 86       	std	Z+15, r1	; 0x0f
     f3a:	16 86       	std	Z+14, r1	; 0x0e
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
     f3c:	ce 01       	movw	r24, r28
     f3e:	8b 55       	subi	r24, 0x5B	; 91
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	90 93 3f 03 	sts	0x033F, r25
     f46:	80 93 3e 03 	sts	0x033E, r24
    struct rule_type rule2; rule1.next = &rule2;
     f4a:	de 01       	movw	r26, r28
     f4c:	a5 55       	subi	r26, 0x55	; 85
     f4e:	bf 4f       	sbci	r27, 0xFF	; 255
     f50:	fc 01       	movw	r30, r24
     f52:	b5 83       	std	Z+5, r27	; 0x05
     f54:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
     f56:	be 01       	movw	r22, r28
     f58:	6f 54       	subi	r22, 0x4F	; 79
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	15 96       	adiw	r26, 0x05	; 5
     f5e:	7c 93       	st	X, r23
     f60:	6e 93       	st	-X, r22
     f62:	14 97       	sbiw	r26, 0x04	; 4
     f64:	fb 01       	movw	r30, r22
     f66:	15 82       	std	Z+5, r1	; 0x05
     f68:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if gyro is start then servo is noSpeed
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     f6a:	ae 01       	movw	r20, r28
     f6c:	49 54       	subi	r20, 0x49	; 73
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	fc 01       	movw	r30, r24
     f72:	51 83       	std	Z+1, r21	; 0x01
     f74:	40 83       	st	Z, r20
     f76:	fa 01       	movw	r30, r20
     f78:	13 82       	std	Z+3, r1	; 0x03
     f7a:	12 82       	std	Z+2, r1	; 0x02
     f7c:	9e 01       	movw	r18, r28
     f7e:	25 54       	subi	r18, 0x45	; 69
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	fc 01       	movw	r30, r24
     f84:	33 83       	std	Z+3, r19	; 0x03
     f86:	22 83       	std	Z+2, r18	; 0x02
     f88:	f9 01       	movw	r30, r18
     f8a:	13 82       	std	Z+3, r1	; 0x03
     f8c:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &start.value; then1.value = &sharpLeft.value;
     f8e:	8a 58       	subi	r24, 0x8A	; 138
     f90:	91 09       	sbc	r25, r1
     f92:	fa 01       	movw	r30, r20
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	fa e0       	ldi	r31, 0x0A	; 10
     f9a:	6f 0e       	add	r6, r31
     f9c:	71 1c       	adc	r7, r1
     f9e:	f9 01       	movw	r30, r18
     fa0:	71 82       	std	Z+1, r7	; 0x01
     fa2:	60 82       	st	Z, r6
    
    // if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     fa4:	2c 5f       	subi	r18, 0xFC	; 252
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	11 96       	adiw	r26, 0x01	; 1
     faa:	3c 93       	st	X, r19
     fac:	2e 93       	st	-X, r18
     fae:	f9 01       	movw	r30, r18
     fb0:	13 82       	std	Z+3, r1	; 0x03
     fb2:	12 82       	std	Z+2, r1	; 0x02
     fb4:	88 55       	subi	r24, 0x58	; 88
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	13 96       	adiw	r26, 0x03	; 3
     fba:	9c 93       	st	X, r25
     fbc:	8e 93       	st	-X, r24
     fbe:	12 97       	sbiw	r26, 0x02	; 2
     fc0:	fc 01       	movw	r30, r24
     fc2:	13 82       	std	Z+3, r1	; 0x03
     fc4:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &middle.value; then2.value = &left.value;
     fc6:	46 58       	subi	r20, 0x86	; 134
     fc8:	51 09       	sbc	r21, r1
     fca:	f9 01       	movw	r30, r18
     fcc:	51 83       	std	Z+1, r21	; 0x01
     fce:	40 83       	st	Z, r20
     fd0:	fa e0       	ldi	r31, 0x0A	; 10
     fd2:	8f 0e       	add	r8, r31
     fd4:	91 1c       	adc	r9, r1
     fd6:	fc 01       	movw	r30, r24
     fd8:	91 82       	std	Z+1, r9	; 0x01
     fda:	80 82       	st	Z, r8
    
    // if speed is medium and distance is oneM then speed is cruise
    struct rule_element_type if31, then3;
    rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     fdc:	04 96       	adiw	r24, 0x04	; 4
     fde:	fb 01       	movw	r30, r22
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
     fe4:	fc 01       	movw	r30, r24
     fe6:	13 82       	std	Z+3, r1	; 0x03
     fe8:	12 82       	std	Z+2, r1	; 0x02
     fea:	90 96       	adiw	r26, 0x20	; 32
     fec:	fb 01       	movw	r30, r22
     fee:	b3 83       	std	Z+3, r27	; 0x03
     ff0:	a2 83       	std	Z+2, r26	; 0x02
     ff2:	13 96       	adiw	r26, 0x03	; 3
     ff4:	1c 92       	st	X, r1
     ff6:	1e 92       	st	-X, r1
     ff8:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &end.value; then3.value = &straight.value;
     ffa:	fa e0       	ldi	r31, 0x0A	; 10
     ffc:	4f 0e       	add	r4, r31
     ffe:	51 1c       	adc	r5, r1
    1000:	fc 01       	movw	r30, r24
    1002:	51 82       	std	Z+1, r5	; 0x01
    1004:	40 82       	st	Z, r4
    1006:	fa e0       	ldi	r31, 0x0A	; 10
    1008:	af 0e       	add	r10, r31
    100a:	b1 1c       	adc	r11, r1
    100c:	ad 92       	st	X+, r10
    100e:	bc 92       	st	X, r11
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
    1010:	66 dd       	rcall	.-1332   	; 0xade <fuzzification>
    rule_evaluation();
    1012:	8c dd       	rcall	.-1256   	; 0xb2c <rule_evaluation>
    defuzzification();
    1014:	d1 dd       	rcall	.-1118   	; 0xbb8 <defuzzification>
    if (servo.value > MAXLEFT)
    1016:	f6 01       	movw	r30, r12
    1018:	82 85       	ldd	r24, Z+10	; 0x0a
    101a:	93 85       	ldd	r25, Z+11	; 0x0b
    101c:	87 3e       	cpi	r24, 0xE7	; 231
    101e:	f7 e0       	ldi	r31, 0x07	; 7
    1020:	9f 07       	cpc	r25, r31
    1022:	24 f0       	brlt	.+8      	; 0x102c <leftTurn+0x284>
    {
	    setServo(MAXLEFT);
    1024:	86 ee       	ldi	r24, 0xE6	; 230
    1026:	97 e0       	ldi	r25, 0x07	; 7
    1028:	ef d5       	rcall	.+3038   	; 0x1c08 <setServo>
    102a:	09 c0       	rjmp	.+18     	; 0x103e <leftTurn+0x296>
    }
    else if (servo.value < MAXRIGHT)
    102c:	84 3e       	cpi	r24, 0xE4	; 228
    102e:	2c e0       	ldi	r18, 0x0C	; 12
    1030:	92 07       	cpc	r25, r18
    1032:	24 f4       	brge	.+8      	; 0x103c <leftTurn+0x294>
    {
	    setServo(MAXRIGHT);
    1034:	84 ee       	ldi	r24, 0xE4	; 228
    1036:	9c e0       	ldi	r25, 0x0C	; 12
    1038:	e7 d5       	rcall	.+3022   	; 0x1c08 <setServo>
    103a:	01 c0       	rjmp	.+2      	; 0x103e <leftTurn+0x296>
    }
    else
    {
	    setServo(servo.value);
    103c:	e5 d5       	rcall	.+3018   	; 0x1c08 <setServo>
    }
    
}
    103e:	c2 53       	subi	r28, 0x32	; 50
    1040:	df 4f       	sbci	r29, 0xFF	; 255
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	9f 90       	pop	r9
    1062:	8f 90       	pop	r8
    1064:	7f 90       	pop	r7
    1066:	6f 90       	pop	r6
    1068:	5f 90       	pop	r5
    106a:	4f 90       	pop	r4
    106c:	3f 90       	pop	r3
    106e:	2f 90       	pop	r2
    1070:	08 95       	ret

00001072 <intersection>:


void intersection(int gyro, int type, int c, int v)
{
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	8a 01       	movw	r16, r20
    1082:	79 01       	movw	r14, r18
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
    1084:	62 37       	cpi	r22, 0x72	; 114
    1086:	71 05       	cpc	r23, r1
    1088:	21 f4       	brne	.+8      	; 0x1092 <intersection+0x20>
    {
		setServo(MAXRIGHT);
    108a:	84 ee       	ldi	r24, 0xE4	; 228
    108c:	9c e0       	ldi	r25, 0x0C	; 12
    108e:	bc d5       	rcall	.+2936   	; 0x1c08 <setServo>
    1090:	1c c0       	rjmp	.+56     	; 0x10ca <intersection+0x58>
    }
	else if (type == 'l')
    1092:	6c 36       	cpi	r22, 0x6C	; 108
    1094:	71 05       	cpc	r23, r1
    1096:	c9 f4       	brne	.+50     	; 0x10ca <intersection+0x58>
	{
		if (checkCount(500) == 0) // if count less than 500 ms then, keep straight
    1098:	84 ef       	ldi	r24, 0xF4	; 244
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	27 d8       	rcall	.-4018   	; 0xec <checkCount>
    109e:	89 2b       	or	r24, r25
    10a0:	21 f4       	brne	.+8      	; 0x10aa <intersection+0x38>
		{
			nFuzzySteering(c,v);
    10a2:	b7 01       	movw	r22, r14
    10a4:	c8 01       	movw	r24, r16
    10a6:	65 d5       	rcall	.+2762   	; 0x1b72 <nFuzzySteering>
    10a8:	10 c0       	rjmp	.+32     	; 0x10ca <intersection+0x58>
		}
		else
		{
		count(0);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e d8       	rcall	.-4068   	; 0xcc <count>
    10b0:	ce 01       	movw	r24, r28
    10b2:	dd 23       	and	r29, r29
    10b4:	24 f4       	brge	.+8      	; 0x10be <intersection+0x4c>
    10b6:	88 27       	eor	r24, r24
    10b8:	99 27       	eor	r25, r25
    10ba:	8c 1b       	sub	r24, r28
    10bc:	9d 0b       	sbc	r25, r29
    10be:	8e 37       	cpi	r24, 0x7E	; 126
    10c0:	91 05       	cpc	r25, r1
    10c2:	14 f0       	brlt	.+4      	; 0x10c8 <intersection+0x56>
    10c4:	8d e7       	ldi	r24, 0x7D	; 125
    10c6:	90 e0       	ldi	r25, 0x00	; 0
		leftTurn(gyro);	
    10c8:	6f de       	rcall	.-802    	; 0xda8 <leftTurn>
		}
	}
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	08 95       	ret

000010d8 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	80 91 ce 00 	lds	r24, 0x00CE
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	29 f4       	brne	.+10     	; 0x1100 <__vector_28+0x28>
    10f6:	10 92 1d 02 	sts	0x021D, r1
    10fa:	10 92 1c 02 	sts	0x021C, r1
    10fe:	10 c0       	rjmp	.+32     	; 0x1120 <__vector_28+0x48>
    1100:	e0 91 1c 02 	lds	r30, 0x021C
    1104:	f0 91 1d 02 	lds	r31, 0x021D
    1108:	e0 5c       	subi	r30, 0xC0	; 192
    110a:	fc 4f       	sbci	r31, 0xFC	; 252
    110c:	80 83       	st	Z, r24
    110e:	80 91 1c 02 	lds	r24, 0x021C
    1112:	90 91 1d 02 	lds	r25, 0x021D
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	90 93 1d 02 	sts	0x021D, r25
    111c:	80 93 1c 02 	sts	0x021C, r24
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	0f 90       	pop	r0
    112a:	0b be       	out	0x3b, r0	; 59
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <carInit>:
    1136:	3e d5       	rcall	.+2684   	; 0x1bb4 <pwmInit>
    1138:	38 d6       	rcall	.+3184   	; 0x1daa <spi_slave_init>
    113a:	8d ec       	ldi	r24, 0xCD	; 205
    113c:	9a e0       	ldi	r25, 0x0A	; 10
    113e:	90 93 89 00 	sts	0x0089, r25
    1142:	80 93 88 00 	sts	0x0088, r24
    1146:	84 e6       	ldi	r24, 0x64	; 100
    1148:	9a e0       	ldi	r25, 0x0A	; 10
    114a:	90 93 8b 00 	sts	0x008B, r25
    114e:	80 93 8a 00 	sts	0x008A, r24
    1152:	08 95       	ret

00001154 <USART1_init>:
    1154:	ec ec       	ldi	r30, 0xCC	; 204
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	11 82       	std	Z+1, r1	; 0x01
    115a:	10 82       	st	Z, r1
    115c:	20 e9       	ldi	r18, 0x90	; 144
    115e:	20 93 c9 00 	sts	0x00C9, r18
    1162:	2e e0       	ldi	r18, 0x0E	; 14
    1164:	20 93 ca 00 	sts	0x00CA, r18
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	10 92 1d 02 	sts	0x021D, r1
    1170:	10 92 1c 02 	sts	0x021C, r1
    1174:	08 95       	ret

00001176 <main>:




int main (void)
{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	2b 97       	sbiw	r28, 0x0b	; 11
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	
	
	
	carInit();
    118a:	d5 df       	rcall	.-86     	; 0x1136 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    118c:	2f ef       	ldi	r18, 0xFF	; 255
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	90 ee       	ldi	r25, 0xE0	; 224
    1192:	21 50       	subi	r18, 0x01	; 1
    1194:	80 40       	sbci	r24, 0x00	; 0
    1196:	90 40       	sbci	r25, 0x00	; 0
    1198:	e1 f7       	brne	.-8      	; 0x1192 <main+0x1c>
    119a:	00 c0       	rjmp	.+0      	; 0x119c <main+0x26>
    119c:	00 00       	nop
	int k_value_stop_line;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    119e:	87 e0       	ldi	r24, 0x07	; 7
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	d8 df       	rcall	.-80     	; 0x1154 <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    11a8:	78 94       	sei
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    11aa:	0f 2e       	mov	r0, r31
    11ac:	f8 e8       	ldi	r31, 0x88	; 136
    11ae:	cf 2e       	mov	r12, r31
    11b0:	d1 2c       	mov	r13, r1
    11b2:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    11b4:	0f 2e       	mov	r0, r31
    11b6:	fa e8       	ldi	r31, 0x8A	; 138
    11b8:	af 2e       	mov	r10, r31
    11ba:	b1 2c       	mov	r11, r1
    11bc:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    11be:	55 d6       	rcall	.+3242   	; 0x1e6a <is_package_recieved>
    11c0:	88 23       	and	r24, r24
    11c2:	e9 f3       	breq	.-6      	; 0x11be <main+0x48>
			

			//Reading Information
			prev_control_mode = control_mode;
    11c4:	1b 85       	ldd	r17, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    11c6:	be 01       	movw	r22, r28
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	ce 01       	movw	r24, r28
    11ce:	0b 96       	adiw	r24, 0x0b	; 11
    11d0:	56 d6       	rcall	.+3244   	; 0x1e7e <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    11d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	71 f4       	brne	.+28     	; 0x11f4 <main+0x7e>
    11d8:	11 11       	cpse	r17, r1
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <main+0x8e>
				onGoingStop = 0;
    11dc:	10 92 1f 02 	sts	0x021F, r1
    11e0:	10 92 1e 02 	sts	0x021E, r1
				count(1);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			}
			if(control_mode == 1 && prev_control_mode != 1){
    11ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	49 f4       	brne	.+18     	; 0x1204 <main+0x8e>
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <main+0x86>
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	31 f4       	brne	.+12     	; 0x1204 <main+0x8e>
    11f8:	11 30       	cpi	r17, 0x01	; 1
    11fa:	21 f0       	breq	.+8      	; 0x1204 <main+0x8e>
				count(1);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1204:	6b 81       	ldd	r22, Y+3	; 0x03
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
    1206:	e9 80       	ldd	r14, Y+1	; 0x01
    1208:	f1 2c       	mov	r15, r1
			int v = (int) sensor_info.angular_diff;
    120a:	0a 81       	ldd	r16, Y+2	; 0x02
    120c:	10 e0       	ldi	r17, 0x00	; 0
			int gyro = (int) sensor_info.angle;
    120e:	88 85       	ldd	r24, Y+8	; 0x08
			char type = (char) sensor_info.next_turn_decision;
    1210:	2a 85       	ldd	r18, Y+10	; 0x0a
			
			cli();
    1212:	f8 94       	cli
			
			if (control_mode == 0)
    1214:	9b 85       	ldd	r25, Y+11	; 0x0b
    1216:	91 11       	cpse	r25, r1
    1218:	0a c0       	rjmp	.+20     	; 0x122e <main+0xb8>
			{
				FLC_obstacle(OCR1A, sF, v);
    121a:	f6 01       	movw	r30, r12
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
			if(control_mode == 1 && prev_control_mode != 1){
				count(1);
			}
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1220:	70 e0       	ldi	r23, 0x00	; 0
			
			cli();
			
			if (control_mode == 0)
			{
				FLC_obstacle(OCR1A, sF, v);
    1222:	a8 01       	movw	r20, r16
    1224:	e7 db       	rcall	.-2098   	; 0x9f4 <FLC_obstacle>
				nFuzzySteering(c,v);
    1226:	b8 01       	movw	r22, r16
    1228:	c7 01       	movw	r24, r14
    122a:	a3 d4       	rcall	.+2374   	; 0x1b72 <nFuzzySteering>
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <main+0xde>
			}
			else if (control_mode == 4)
    122e:	94 30       	cpi	r25, 0x04	; 4
    1230:	39 f4       	brne	.+14     	; 0x1240 <main+0xca>
			{
				
				setESC(NEUTRAL);
    1232:	8d ec       	ldi	r24, 0xCD	; 205
    1234:	9a e0       	ldi	r25, 0x0A	; 10
    1236:	cd d4       	rcall	.+2458   	; 0x1bd2 <setESC>
				setServo(STRAIGHT);
    1238:	84 e6       	ldi	r24, 0x64	; 100
    123a:	9a e0       	ldi	r25, 0x0A	; 10
    123c:	e5 d4       	rcall	.+2506   	; 0x1c08 <setServo>
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <main+0xde>
			}
			
			else if (control_mode == 1)
    1240:	91 30       	cpi	r25, 0x01	; 1
    1242:	41 f4       	brne	.+16     	; 0x1254 <main+0xde>
			{
				intersection(gyro, type, c, v);
    1244:	62 2f       	mov	r22, r18
    1246:	77 27       	eor	r23, r23
    1248:	67 fd       	sbrc	r22, 7
    124a:	70 95       	com	r23
    124c:	98 01       	movw	r18, r16
    124e:	a7 01       	movw	r20, r14
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0f df       	rcall	.-482    	; 0x1072 <intersection>
			}

			
			sei();
    1254:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1256:	f6 01       	movw	r30, r12
    1258:	e0 80       	ld	r14, Z
    125a:	f1 80       	ldd	r15, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    125c:	f5 01       	movw	r30, r10
    125e:	00 81       	ld	r16, Z
    1260:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	ab d5       	rcall	.+2902   	; 0x1dbc <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1266:	8e 2d       	mov	r24, r14
    1268:	a9 d5       	rcall	.+2898   	; 0x1dbc <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	a7 d5       	rcall	.+2894   	; 0x1dbc <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    126e:	80 2f       	mov	r24, r16
    1270:	a5 d5       	rcall	.+2890   	; 0x1dbc <spi_send_byte>
    1272:	a5 cf       	rjmp	.-182    	; 0x11be <main+0x48>

00001274 <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{
    1274:	2f 92       	push	r2
    1276:	3f 92       	push	r3
    1278:	4f 92       	push	r4
    127a:	5f 92       	push	r5
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	ce 55       	subi	r28, 0x5E	; 94
    129e:	d2 40       	sbci	r29, 0x02	; 2
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	c3 5a       	subi	r28, 0xA3	; 163
    12ac:	dd 4f       	sbci	r29, 0xFD	; 253
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	88 83       	st	Y, r24
    12b2:	cd 55       	subi	r28, 0x5D	; 93
    12b4:	d2 40       	sbci	r29, 0x02	; 2
    12b6:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	ed ea       	ldi	r30, 0xAD	; 173
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	de 01       	movw	r26, r28
    12c0:	11 96       	adiw	r26, 0x01	; 1
    12c2:	01 90       	ld	r0, Z+
    12c4:	0d 92       	st	X+, r0
    12c6:	8a 95       	dec	r24
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 110, 125); // Min_value = 100
    12ca:	3e 01       	movw	r6, r28
    12cc:	21 e1       	ldi	r18, 0x11	; 17
    12ce:	62 0e       	add	r6, r18
    12d0:	71 1c       	adc	r7, r1
    12d2:	0f 2e       	mov	r0, r31
    12d4:	fd e7       	ldi	r31, 0x7D	; 125
    12d6:	ef 2e       	mov	r14, r31
    12d8:	f1 2c       	mov	r15, r1
    12da:	f0 2d       	mov	r31, r0
    12dc:	0e e6       	ldi	r16, 0x6E	; 110
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	24 e6       	ldi	r18, 0x64	; 100
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	43 e6       	ldi	r20, 0x63	; 99
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	65 eb       	ldi	r22, 0xB5	; 181
    12ea:	71 e0       	ldi	r23, 0x01	; 1
    12ec:	c3 01       	movw	r24, r6
    12ee:	2a dd       	rcall	.-1452   	; 0xd44 <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRig", 115, 130, 130, 145);
    12f0:	4e 01       	movw	r8, r28
    12f2:	47 e2       	ldi	r20, 0x27	; 39
    12f4:	84 0e       	add	r8, r20
    12f6:	91 1c       	adc	r9, r1
    12f8:	0f 2e       	mov	r0, r31
    12fa:	f1 e9       	ldi	r31, 0x91	; 145
    12fc:	ef 2e       	mov	r14, r31
    12fe:	f1 2c       	mov	r15, r1
    1300:	f0 2d       	mov	r31, r0
    1302:	02 e8       	ldi	r16, 0x82	; 130
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	22 e8       	ldi	r18, 0x82	; 130
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	43 e7       	ldi	r20, 0x73	; 115
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	6e eb       	ldi	r22, 0xBE	; 190
    1310:	71 e0       	ldi	r23, 0x01	; 1
    1312:	c4 01       	movw	r24, r8
    1314:	17 dd       	rcall	.-1490   	; 0xd44 <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135, 150, 150, 165);
    1316:	2e 01       	movw	r4, r28
    1318:	5d e3       	ldi	r21, 0x3D	; 61
    131a:	45 0e       	add	r4, r21
    131c:	51 1c       	adc	r5, r1
    131e:	0f 2e       	mov	r0, r31
    1320:	f5 ea       	ldi	r31, 0xA5	; 165
    1322:	ef 2e       	mov	r14, r31
    1324:	f1 2c       	mov	r15, r1
    1326:	f0 2d       	mov	r31, r0
    1328:	06 e9       	ldi	r16, 0x96	; 150
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	26 e9       	ldi	r18, 0x96	; 150
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	47 e8       	ldi	r20, 0x87	; 135
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	67 ec       	ldi	r22, 0xC7	; 199
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	c2 01       	movw	r24, r4
    133a:	04 dd       	rcall	.-1528   	; 0xd44 <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLe", 155, 170, 170, 185);
    133c:	5e 01       	movw	r10, r28
    133e:	63 e5       	ldi	r22, 0x53	; 83
    1340:	a6 0e       	add	r10, r22
    1342:	b1 1c       	adc	r11, r1
    1344:	0f 2e       	mov	r0, r31
    1346:	f9 eb       	ldi	r31, 0xB9	; 185
    1348:	ef 2e       	mov	r14, r31
    134a:	f1 2c       	mov	r15, r1
    134c:	f0 2d       	mov	r31, r0
    134e:	0a ea       	ldi	r16, 0xAA	; 170
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	2a ea       	ldi	r18, 0xAA	; 170
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	4b e9       	ldi	r20, 0x9B	; 155
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	6e ec       	ldi	r22, 0xCE	; 206
    135c:	71 e0       	ldi	r23, 0x01	; 1
    135e:	c5 01       	movw	r24, r10
    1360:	f1 dc       	rcall	.-1566   	; 0xd44 <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 175, 190, 200, 201);  // Max_value = 200
    1362:	6e 01       	movw	r12, r28
    1364:	79 e6       	ldi	r23, 0x69	; 105
    1366:	c7 0e       	add	r12, r23
    1368:	d1 1c       	adc	r13, r1
    136a:	0f 2e       	mov	r0, r31
    136c:	f9 ec       	ldi	r31, 0xC9	; 201
    136e:	ef 2e       	mov	r14, r31
    1370:	f1 2c       	mov	r15, r1
    1372:	f0 2d       	mov	r31, r0
    1374:	08 ec       	ldi	r16, 0xC8	; 200
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	2e eb       	ldi	r18, 0xBE	; 190
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4f ea       	ldi	r20, 0xAF	; 175
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	66 ed       	ldi	r22, 0xD6	; 214
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	c6 01       	movw	r24, r12
    1386:	de dc       	rcall	.-1604   	; 0xd44 <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    1388:	7e 86       	std	Y+14, r7	; 0x0e
    138a:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    138c:	9e a2       	std	Y+38, r9	; 0x26
    138e:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    1390:	5c ae       	std	Y+60, r5	; 0x3c
    1392:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    1394:	63 96       	adiw	r28, 0x13	; 19
    1396:	bf ae       	std	Y+63, r11	; 0x3f
    1398:	ae ae       	std	Y+62, r10	; 0x3e
    139a:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    139c:	d5 01       	movw	r26, r10
    139e:	55 96       	adiw	r26, 0x15	; 21
    13a0:	dc 92       	st	X, r13
    13a2:	ce 92       	st	-X, r12
    13a4:	54 97       	sbiw	r26, 0x14	; 20
	farLeft.next = NULL;
    13a6:	f6 01       	movw	r30, r12
    13a8:	15 8a       	std	Z+21, r1	; 0x15
    13aa:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    13ac:	c3 5a       	subi	r28, 0xA3	; 163
    13ae:	dd 4f       	sbci	r29, 0xFD	; 253
    13b0:	48 81       	ld	r20, Y
    13b2:	59 81       	ldd	r21, Y+1	; 0x01
    13b4:	cd 55       	subi	r28, 0x5D	; 93
    13b6:	d2 40       	sbci	r29, 0x02	; 2
    13b8:	44 36       	cpi	r20, 0x64	; 100
    13ba:	51 05       	cpc	r21, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <nDoFuzzy+0x154>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    13be:	84 e6       	ldi	r24, 0x64	; 100
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 87       	std	Y+12, r25	; 0x0c
    13c4:	8b 87       	std	Y+11, r24	; 0x0b
    13c6:	16 c0       	rjmp	.+44     	; 0x13f4 <nDoFuzzy+0x180>
	}
	else if(c>200)			// if sensor value is bigger than delta_C's input set's upper limit
    13c8:	c3 5a       	subi	r28, 0xA3	; 163
    13ca:	dd 4f       	sbci	r29, 0xFD	; 253
    13cc:	68 81       	ld	r22, Y
    13ce:	79 81       	ldd	r23, Y+1	; 0x01
    13d0:	cd 55       	subi	r28, 0x5D	; 93
    13d2:	d2 40       	sbci	r29, 0x02	; 2
    13d4:	69 3c       	cpi	r22, 0xC9	; 201
    13d6:	71 05       	cpc	r23, r1
    13d8:	2c f0       	brlt	.+10     	; 0x13e4 <nDoFuzzy+0x170>
	{
		delta_C.value = 200;  // force input value to lowest point in delta_C's input set
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 87       	std	Y+12, r25	; 0x0c
    13e0:	8b 87       	std	Y+11, r24	; 0x0b
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <nDoFuzzy+0x180>
	}
	else
	{
		delta_C.value = c;
    13e4:	c3 5a       	subi	r28, 0xA3	; 163
    13e6:	dd 4f       	sbci	r29, 0xFD	; 253
    13e8:	88 81       	ld	r24, Y
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	cd 55       	subi	r28, 0x5D	; 93
    13ee:	d2 40       	sbci	r29, 0x02	; 2
    13f0:	9c 87       	std	Y+12, r25	; 0x0c
    13f2:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	ee ed       	ldi	r30, 0xDE	; 222
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	de 01       	movw	r26, r28
    13fc:	a1 58       	subi	r26, 0x81	; 129
    13fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1400:	01 90       	ld	r0, Z+
    1402:	0d 92       	st	X+, r0
    1404:	8a 95       	dec	r24
    1406:	e1 f7       	brne	.-8      	; 0x1400 <nDoFuzzy+0x18c>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOrien", -1, 0, 30, 60); // min V is 0
    1408:	4e 01       	movw	r8, r28
    140a:	9f e8       	ldi	r25, 0x8F	; 143
    140c:	89 0e       	add	r8, r25
    140e:	91 1c       	adc	r9, r1
    1410:	0f 2e       	mov	r0, r31
    1412:	fc e3       	ldi	r31, 0x3C	; 60
    1414:	ef 2e       	mov	r14, r31
    1416:	f1 2c       	mov	r15, r1
    1418:	f0 2d       	mov	r31, r0
    141a:	0e e1       	ldi	r16, 0x1E	; 30
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4f ef       	ldi	r20, 0xFF	; 255
    1424:	5f ef       	ldi	r21, 0xFF	; 255
    1426:	66 ee       	ldi	r22, 0xE6	; 230
    1428:	71 e0       	ldi	r23, 0x01	; 1
    142a:	c4 01       	movw	r24, r8
    142c:	8b dc       	rcall	.-1770   	; 0xd44 <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOri", 10, 40, 40, 70);
    142e:	5e 01       	movw	r10, r28
    1430:	a5 ea       	ldi	r26, 0xA5	; 165
    1432:	aa 0e       	add	r10, r26
    1434:	b1 1c       	adc	r11, r1
    1436:	0f 2e       	mov	r0, r31
    1438:	f6 e4       	ldi	r31, 0x46	; 70
    143a:	ef 2e       	mov	r14, r31
    143c:	f1 2c       	mov	r15, r1
    143e:	f0 2d       	mov	r31, r0
    1440:	08 e2       	ldi	r16, 0x28	; 40
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	28 e2       	ldi	r18, 0x28	; 40
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a e0       	ldi	r20, 0x0A	; 10
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 ef       	ldi	r22, 0xF0	; 240
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	c5 01       	movw	r24, r10
    1452:	78 dc       	rcall	.-1808   	; 0xd44 <MATLAB_MF>
	
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "righOri", 20, 50, 80, 81); // max V is 80
    1454:	6e 01       	movw	r12, r28
    1456:	bb eb       	ldi	r27, 0xBB	; 187
    1458:	cb 0e       	add	r12, r27
    145a:	d1 1c       	adc	r13, r1
    145c:	0f 2e       	mov	r0, r31
    145e:	f1 e5       	ldi	r31, 0x51	; 81
    1460:	ef 2e       	mov	r14, r31
    1462:	f1 2c       	mov	r15, r1
    1464:	f0 2d       	mov	r31, r0
    1466:	00 e5       	ldi	r16, 0x50	; 80
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	22 e3       	ldi	r18, 0x32	; 50
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	44 e1       	ldi	r20, 0x14	; 20
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	68 ef       	ldi	r22, 0xF8	; 248
    1474:	71 e0       	ldi	r23, 0x01	; 1
    1476:	c6 01       	movw	r24, r12
    1478:	65 dc       	rcall	.-1846   	; 0xd44 <MATLAB_MF>
	
	delta_V.membership_functions = &leftOriented;
    147a:	c5 57       	subi	r28, 0x75	; 117
    147c:	df 4f       	sbci	r29, 0xFF	; 255
    147e:	99 82       	std	Y+1, r9	; 0x01
    1480:	88 82       	st	Y, r8
    1482:	cb 58       	subi	r28, 0x8B	; 139
    1484:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    1486:	f4 01       	movw	r30, r8
    1488:	b5 8a       	std	Z+21, r11	; 0x15
    148a:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    148c:	d5 01       	movw	r26, r10
    148e:	55 96       	adiw	r26, 0x15	; 21
    1490:	dc 92       	st	X, r13
    1492:	ce 92       	st	-X, r12
    1494:	54 97       	sbiw	r26, 0x14	; 20
	rightOriented.next = NULL;
    1496:	f6 01       	movw	r30, r12
    1498:	15 8a       	std	Z+21, r1	; 0x15
    149a:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<=0)				// if sensor value is smaller than error's input set lower limit
    149c:	12 14       	cp	r1, r2
    149e:	13 04       	cpc	r1, r3
    14a0:	4c f0       	brlt	.+18     	; 0x14b4 <nDoFuzzy+0x240>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	c7 57       	subi	r28, 0x77	; 119
    14a8:	df 4f       	sbci	r29, 0xFF	; 255
    14aa:	99 83       	std	Y+1, r25	; 0x01
    14ac:	88 83       	st	Y, r24
    14ae:	c9 58       	subi	r28, 0x89	; 137
    14b0:	d0 40       	sbci	r29, 0x00	; 0
    14b2:	13 c0       	rjmp	.+38     	; 0x14da <nDoFuzzy+0x266>
	}
	else if(v>=80)			// if sensor value is bigger than error's input set's upper limit
    14b4:	f0 e5       	ldi	r31, 0x50	; 80
    14b6:	2f 16       	cp	r2, r31
    14b8:	31 04       	cpc	r3, r1
    14ba:	4c f0       	brlt	.+18     	; 0x14ce <nDoFuzzy+0x25a>
	{
		delta_V.value = 79;  // force input value to lowest point in error's input set
    14bc:	8f e4       	ldi	r24, 0x4F	; 79
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	c7 57       	subi	r28, 0x77	; 119
    14c2:	df 4f       	sbci	r29, 0xFF	; 255
    14c4:	99 83       	std	Y+1, r25	; 0x01
    14c6:	88 83       	st	Y, r24
    14c8:	c9 58       	subi	r28, 0x89	; 137
    14ca:	d0 40       	sbci	r29, 0x00	; 0
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <nDoFuzzy+0x266>
	}
	else
	{
		delta_V.value = v;
    14ce:	c7 57       	subi	r28, 0x77	; 119
    14d0:	df 4f       	sbci	r29, 0xFF	; 255
    14d2:	39 82       	std	Y+1, r3	; 0x01
    14d4:	28 82       	st	Y, r2
    14d6:	c9 58       	subi	r28, 0x89	; 137
    14d8:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
    14da:	1e 01       	movw	r2, r28
    14dc:	21 ed       	ldi	r18, 0xD1	; 209
    14de:	22 0e       	add	r2, r18
    14e0:	31 1c       	adc	r3, r1
    14e2:	89 e0       	ldi	r24, 0x09	; 9
    14e4:	e0 e0       	ldi	r30, 0x00	; 0
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	d1 01       	movw	r26, r2
    14ea:	01 90       	ld	r0, Z+
    14ec:	0d 92       	st	X+, r0
    14ee:	8a 95       	dec	r24
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <nDoFuzzy+0x276>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLe", 2209, 2210, 2210, 2390);
    14f2:	5e 01       	movw	r10, r28
    14f4:	41 ee       	ldi	r20, 0xE1	; 225
    14f6:	a4 0e       	add	r10, r20
    14f8:	b1 1c       	adc	r11, r1
    14fa:	0f 2e       	mov	r0, r31
    14fc:	f6 e5       	ldi	r31, 0x56	; 86
    14fe:	ef 2e       	mov	r14, r31
    1500:	f9 e0       	ldi	r31, 0x09	; 9
    1502:	ff 2e       	mov	r15, r31
    1504:	f0 2d       	mov	r31, r0
    1506:	02 ea       	ldi	r16, 0xA2	; 162
    1508:	18 e0       	ldi	r17, 0x08	; 8
    150a:	22 ea       	ldi	r18, 0xA2	; 162
    150c:	38 e0       	ldi	r19, 0x08	; 8
    150e:	41 ea       	ldi	r20, 0xA1	; 161
    1510:	58 e0       	ldi	r21, 0x08	; 8
    1512:	69 e0       	ldi	r22, 0x09	; 9
    1514:	72 e0       	ldi	r23, 0x02	; 2
    1516:	c5 01       	movw	r24, r10
    1518:	15 dc       	rcall	.-2006   	; 0xd44 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2310, 2450, 2450, 2590);
    151a:	4e 01       	movw	r8, r28
    151c:	57 ef       	ldi	r21, 0xF7	; 247
    151e:	85 0e       	add	r8, r21
    1520:	91 1c       	adc	r9, r1
    1522:	0f 2e       	mov	r0, r31
    1524:	fe e1       	ldi	r31, 0x1E	; 30
    1526:	ef 2e       	mov	r14, r31
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	ff 2e       	mov	r15, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	02 e9       	ldi	r16, 0x92	; 146
    1530:	19 e0       	ldi	r17, 0x09	; 9
    1532:	22 e9       	ldi	r18, 0x92	; 146
    1534:	39 e0       	ldi	r19, 0x09	; 9
    1536:	46 e0       	ldi	r20, 0x06	; 6
    1538:	59 e0       	ldi	r21, 0x09	; 9
    153a:	6e e9       	ldi	r22, 0x9E	; 158
    153c:	71 e0       	ldi	r23, 0x01	; 1
    153e:	c4 01       	movw	r24, r8
    1540:	01 dc       	rcall	.-2046   	; 0xd44 <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2510, 2660, 2660, 2810);
    1542:	3e 01       	movw	r6, r28
    1544:	63 ef       	ldi	r22, 0xF3	; 243
    1546:	66 1a       	sub	r6, r22
    1548:	6e ef       	ldi	r22, 0xFE	; 254
    154a:	76 0a       	sbc	r7, r22
    154c:	0f 2e       	mov	r0, r31
    154e:	fa ef       	ldi	r31, 0xFA	; 250
    1550:	ef 2e       	mov	r14, r31
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	ff 2e       	mov	r15, r31
    1556:	f0 2d       	mov	r31, r0
    1558:	04 e6       	ldi	r16, 0x64	; 100
    155a:	1a e0       	ldi	r17, 0x0A	; 10
    155c:	24 e6       	ldi	r18, 0x64	; 100
    155e:	3a e0       	ldi	r19, 0x0A	; 10
    1560:	4e ec       	ldi	r20, 0xCE	; 206
    1562:	59 e0       	ldi	r21, 0x09	; 9
    1564:	64 e8       	ldi	r22, 0x84	; 132
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	c3 01       	movw	r24, r6
    156a:	ec db       	rcall	.-2088   	; 0xd44 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2730, 2870, 2870, 3010);
    156c:	6e 01       	movw	r12, r28
    156e:	7d ed       	ldi	r23, 0xDD	; 221
    1570:	c7 1a       	sub	r12, r23
    1572:	7e ef       	ldi	r23, 0xFE	; 254
    1574:	d7 0a       	sbc	r13, r23
    1576:	0f 2e       	mov	r0, r31
    1578:	f2 ec       	ldi	r31, 0xC2	; 194
    157a:	ef 2e       	mov	r14, r31
    157c:	fb e0       	ldi	r31, 0x0B	; 11
    157e:	ff 2e       	mov	r15, r31
    1580:	f0 2d       	mov	r31, r0
    1582:	06 e3       	ldi	r16, 0x36	; 54
    1584:	1b e0       	ldi	r17, 0x0B	; 11
    1586:	26 e3       	ldi	r18, 0x36	; 54
    1588:	3b e0       	ldi	r19, 0x0B	; 11
    158a:	4a ea       	ldi	r20, 0xAA	; 170
    158c:	5a e0       	ldi	r21, 0x0A	; 10
    158e:	6d e8       	ldi	r22, 0x8D	; 141
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	c6 01       	movw	r24, r12
    1594:	d7 db       	rcall	.-2130   	; 0xd44 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRi", 2930, 3110, 3110, 3111);
    1596:	2e 01       	movw	r4, r28
    1598:	87 ec       	ldi	r24, 0xC7	; 199
    159a:	48 1a       	sub	r4, r24
    159c:	8e ef       	ldi	r24, 0xFE	; 254
    159e:	58 0a       	sbc	r5, r24
    15a0:	0f 2e       	mov	r0, r31
    15a2:	f7 e2       	ldi	r31, 0x27	; 39
    15a4:	ef 2e       	mov	r14, r31
    15a6:	fc e0       	ldi	r31, 0x0C	; 12
    15a8:	ff 2e       	mov	r15, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	06 e2       	ldi	r16, 0x26	; 38
    15ae:	1c e0       	ldi	r17, 0x0C	; 12
    15b0:	26 e2       	ldi	r18, 0x26	; 38
    15b2:	3c e0       	ldi	r19, 0x0C	; 12
    15b4:	42 e7       	ldi	r20, 0x72	; 114
    15b6:	5b e0       	ldi	r21, 0x0B	; 11
    15b8:	61 e1       	ldi	r22, 0x11	; 17
    15ba:	72 e0       	ldi	r23, 0x02	; 2
    15bc:	c2 01       	movw	r24, r4
    15be:	c2 db       	rcall	.-2172   	; 0xd44 <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    15c0:	d1 01       	movw	r26, r2
    15c2:	1d 96       	adiw	r26, 0x0d	; 13
    15c4:	5c 92       	st	X, r5
    15c6:	4e 92       	st	-X, r4
    15c8:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
    15ca:	f2 01       	movw	r30, r4
    15cc:	d5 8a       	std	Z+21, r13	; 0x15
    15ce:	c4 8a       	std	Z+20, r12	; 0x14
	right.next = &straight;
    15d0:	d6 01       	movw	r26, r12
    15d2:	55 96       	adiw	r26, 0x15	; 21
    15d4:	7c 92       	st	X, r7
    15d6:	6e 92       	st	-X, r6
    15d8:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
    15da:	f3 01       	movw	r30, r6
    15dc:	95 8a       	std	Z+21, r9	; 0x15
    15de:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &sharpLeft;
    15e0:	d4 01       	movw	r26, r8
    15e2:	55 96       	adiw	r26, 0x15	; 21
    15e4:	bc 92       	st	X, r11
    15e6:	ae 92       	st	-X, r10
    15e8:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
    15ea:	f5 01       	movw	r30, r10
    15ec:	15 8a       	std	Z+21, r1	; 0x15
    15ee:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	90 93 3d 03 	sts	0x033D, r25
    15f8:	80 93 3c 03 	sts	0x033C, r24
	delta_C.next = &delta_V;
    15fc:	e2 56       	subi	r30, 0x62	; 98
    15fe:	f1 09       	sbc	r31, r1
    1600:	f8 8b       	std	Y+16, r31	; 0x10
    1602:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    1604:	17 86       	std	Z+15, r1	; 0x0f
    1606:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    1608:	30 92 3b 03 	sts	0x033B, r3
    160c:	20 92 3a 03 	sts	0x033A, r2
	steering.next = NULL;
    1610:	d1 01       	movw	r26, r2
    1612:	1f 96       	adiw	r26, 0x0f	; 15
    1614:	1c 92       	st	X, r1
    1616:	1e 92       	st	-X, r1
    1618:	1e 97       	sbiw	r26, 0x0e	; 14

	//RULE 15 "if deltaC is farRight and deltaV is leftOriented then steering is straight"
	struct rule_element_type then15;
	then15.value = &straight.value;
    161a:	be 01       	movw	r22, r28
    161c:	61 5b       	subi	r22, 0xB1	; 177
    161e:	7e 4f       	sbci	r23, 0xFE	; 254
    1620:	73 01       	movw	r14, r6
    1622:	ba e0       	ldi	r27, 0x0A	; 10
    1624:	eb 0e       	add	r14, r27
    1626:	f1 1c       	adc	r15, r1
    1628:	fb 01       	movw	r30, r22
    162a:	f1 82       	std	Z+1, r15	; 0x01
    162c:	e0 82       	st	Z, r14
	then15.next = NULL;
    162e:	13 82       	std	Z+3, r1	; 0x03
    1630:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if152;
	if152.value = &leftOriented.value;
    1632:	de 01       	movw	r26, r28
    1634:	ad 5a       	subi	r26, 0xAD	; 173
    1636:	be 4f       	sbci	r27, 0xFE	; 254
    1638:	9e 01       	movw	r18, r28
    163a:	27 56       	subi	r18, 0x67	; 103
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	11 96       	adiw	r26, 0x01	; 1
    1640:	3c 93       	st	X, r19
    1642:	2e 93       	st	-X, r18
	if152.next = NULL;
    1644:	13 96       	adiw	r26, 0x03	; 3
    1646:	1c 92       	st	X, r1
    1648:	1e 92       	st	-X, r1
    164a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if151;
	if151.value = &farRight.value;
    164c:	8a 5a       	subi	r24, 0xAA	; 170
    164e:	9e 4f       	sbci	r25, 0xFE	; 254
    1650:	3e 01       	movw	r6, r28
    1652:	fb e1       	ldi	r31, 0x1B	; 27
    1654:	6f 0e       	add	r6, r31
    1656:	71 1c       	adc	r7, r1
    1658:	fc 01       	movw	r30, r24
    165a:	71 82       	std	Z+1, r7	; 0x01
    165c:	60 82       	st	Z, r6
	if151.next = &if152;
    165e:	b3 83       	std	Z+3, r27	; 0x03
    1660:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule15;
	rule15.if_side = &if151;
    1662:	18 96       	adiw	r26, 0x08	; 8
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	9c 93       	st	X, r25
    1668:	8e 93       	st	-X, r24
	rule15.then_side = &then15;
    166a:	13 96       	adiw	r26, 0x03	; 3
    166c:	7c 93       	st	X, r23
    166e:	6e 93       	st	-X, r22
    1670:	12 97       	sbiw	r26, 0x02	; 2
	rule15.next = NULL;
    1672:	15 96       	adiw	r26, 0x05	; 5
    1674:	1c 92       	st	X, r1
    1676:	1e 92       	st	-X, r1
    1678:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 14 "if deltaC is farRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then14;
	then14.value = &left.value;
    167a:	6e 5e       	subi	r22, 0xEE	; 238
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	fa e0       	ldi	r31, 0x0A	; 10
    1680:	8f 0e       	add	r8, r31
    1682:	91 1c       	adc	r9, r1
    1684:	fb 01       	movw	r30, r22
    1686:	91 82       	std	Z+1, r9	; 0x01
    1688:	80 82       	st	Z, r8
	then14.next = NULL;
    168a:	13 82       	std	Z+3, r1	; 0x03
    168c:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if142;
	if142.value = &straightOriented.value;
    168e:	8e 01       	movw	r16, r28
    1690:	0b 59       	subi	r16, 0x9B	; 155
    1692:	1e 4f       	sbci	r17, 0xFE	; 254
    1694:	88 5a       	subi	r24, 0xA8	; 168
    1696:	91 09       	sbc	r25, r1
    1698:	f8 01       	movw	r30, r16
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
	if142.next = NULL;
    169e:	13 82       	std	Z+3, r1	; 0x03
    16a0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if141;
	if141.value = &farRight.value;
    16a2:	ae 01       	movw	r20, r28
    16a4:	47 59       	subi	r20, 0x97	; 151
    16a6:	5e 4f       	sbci	r21, 0xFE	; 254
    16a8:	fa 01       	movw	r30, r20
    16aa:	71 82       	std	Z+1, r7	; 0x01
    16ac:	60 82       	st	Z, r6
	if141.next = &if142;
    16ae:	13 83       	std	Z+3, r17	; 0x03
    16b0:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule14;
	rule14.if_side = &if141;
    16b2:	34 96       	adiw	r30, 0x04	; 4
    16b4:	51 83       	std	Z+1, r21	; 0x01
    16b6:	40 83       	st	Z, r20
	rule14.then_side = &then14;
    16b8:	73 83       	std	Z+3, r23	; 0x03
    16ba:	62 83       	std	Z+2, r22	; 0x02
	rule14.next = &rule15;
    16bc:	b5 83       	std	Z+5, r27	; 0x05
    16be:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 13 "if deltaC is farRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then13;
	then13.value = &sharpLeft.value;
    16c0:	02 5f       	subi	r16, 0xF2	; 242
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	4e 57       	subi	r20, 0x7E	; 126
    16c6:	51 09       	sbc	r21, r1
    16c8:	c3 5a       	subi	r28, 0xA3	; 163
    16ca:	dd 4f       	sbci	r29, 0xFD	; 253
    16cc:	59 83       	std	Y+1, r21	; 0x01
    16ce:	48 83       	st	Y, r20
    16d0:	cd 55       	subi	r28, 0x5D	; 93
    16d2:	d2 40       	sbci	r29, 0x02	; 2
    16d4:	d8 01       	movw	r26, r16
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	5c 93       	st	X, r21
    16da:	4e 93       	st	-X, r20
	then13.next = NULL;
    16dc:	13 96       	adiw	r26, 0x03	; 3
    16de:	1c 92       	st	X, r1
    16e0:	1e 92       	st	-X, r1
    16e2:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if132;
	if132.value = &rightOriented.value;
    16e4:	5e 01       	movw	r10, r28
    16e6:	b9 e8       	ldi	r27, 0x89	; 137
    16e8:	ab 1a       	sub	r10, r27
    16ea:	be ef       	ldi	r27, 0xFE	; 254
    16ec:	bb 0a       	sbc	r11, r27
    16ee:	46 52       	subi	r20, 0x26	; 38
    16f0:	51 09       	sbc	r21, r1
    16f2:	d5 01       	movw	r26, r10
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	5c 93       	st	X, r21
    16f8:	4e 93       	st	-X, r20
	if132.next = NULL;
    16fa:	13 96       	adiw	r26, 0x03	; 3
    16fc:	1c 92       	st	X, r1
    16fe:	1e 92       	st	-X, r1
    1700:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if131;
	if131.value = &farRight.value;
    1702:	66 5e       	subi	r22, 0xE6	; 230
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	db 01       	movw	r26, r22
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	7c 92       	st	X, r7
    170c:	6e 92       	st	-X, r6
	if131.next = &if132;
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	bc 92       	st	X, r11
    1712:	ae 92       	st	-X, r10
    1714:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule13;
	rule13.if_side = &if131;
    1716:	14 96       	adiw	r26, 0x04	; 4
    1718:	11 96       	adiw	r26, 0x01	; 1
    171a:	7c 93       	st	X, r23
    171c:	6e 93       	st	-X, r22
	rule13.then_side = &then13;
    171e:	13 96       	adiw	r26, 0x03	; 3
    1720:	1c 93       	st	X, r17
    1722:	0e 93       	st	-X, r16
    1724:	12 97       	sbiw	r26, 0x02	; 2
	rule13.next = &rule14;
    1726:	15 96       	adiw	r26, 0x05	; 5
    1728:	fc 93       	st	X, r31
    172a:	ee 93       	st	-X, r30
    172c:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 12 "if deltaC is smallRight and deltaV is leftOriented then steering is right"
	struct rule_element_type then12;
	then12.value = &right.value;
    172e:	0e 5e       	subi	r16, 0xEE	; 238
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	ea e0       	ldi	r30, 0x0A	; 10
    1734:	ce 0e       	add	r12, r30
    1736:	d1 1c       	adc	r13, r1
    1738:	f8 01       	movw	r30, r16
    173a:	d1 82       	std	Z+1, r13	; 0x01
    173c:	c0 82       	st	Z, r12
	then12.next = NULL;
    173e:	13 82       	std	Z+3, r1	; 0x03
    1740:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if122;
	if122.value = &leftOriented.value;
    1742:	3e 01       	movw	r6, r28
    1744:	f7 e7       	ldi	r31, 0x77	; 119
    1746:	6f 1a       	sub	r6, r31
    1748:	fe ef       	ldi	r31, 0xFE	; 254
    174a:	7f 0a       	sbc	r7, r31
    174c:	f3 01       	movw	r30, r6
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	20 83       	st	Z, r18
	if122.next = NULL;
    1752:	13 82       	std	Z+3, r1	; 0x03
    1754:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if121;
	if121.value = &smallRight.value;
    1756:	5e 01       	movw	r10, r28
    1758:	f1 e3       	ldi	r31, 0x31	; 49
    175a:	af 0e       	add	r10, r31
    175c:	b1 1c       	adc	r11, r1
    175e:	c3 57       	subi	r28, 0x73	; 115
    1760:	de 4f       	sbci	r29, 0xFE	; 254
    1762:	b9 82       	std	Y+1, r11	; 0x01
    1764:	a8 82       	st	Y, r10
    1766:	cd 58       	subi	r28, 0x8D	; 141
    1768:	d1 40       	sbci	r29, 0x01	; 1
	if121.next = &if122;
    176a:	c1 57       	subi	r28, 0x71	; 113
    176c:	de 4f       	sbci	r29, 0xFE	; 254
    176e:	79 82       	std	Y+1, r7	; 0x01
    1770:	68 82       	st	Y, r6
    1772:	cf 58       	subi	r28, 0x8F	; 143
    1774:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule12;
	rule12.if_side = &if121;
    1776:	38 96       	adiw	r30, 0x08	; 8
    1778:	6d e8       	ldi	r22, 0x8D	; 141
    177a:	71 e0       	ldi	r23, 0x01	; 1
    177c:	6c 0f       	add	r22, r28
    177e:	7d 1f       	adc	r23, r29
    1780:	71 83       	std	Z+1, r23	; 0x01
    1782:	60 83       	st	Z, r22
	rule12.then_side = &then12;
    1784:	13 83       	std	Z+3, r17	; 0x03
    1786:	02 83       	std	Z+2, r16	; 0x02
	rule12.next = &rule13;
    1788:	b5 83       	std	Z+5, r27	; 0x05
    178a:	a4 83       	std	Z+4, r26	; 0x04


	//RULE 11 "if deltaC is smallRight and deltaV is straightOriented then steering is left"
	struct rule_element_type then11;
	then11.value = &left.value;
    178c:	0e 5e       	subi	r16, 0xEE	; 238
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	d8 01       	movw	r26, r16
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	9c 92       	st	X, r9
    1796:	8e 92       	st	-X, r8
	then11.next = NULL;
    1798:	13 96       	adiw	r26, 0x03	; 3
    179a:	1c 92       	st	X, r1
    179c:	1e 92       	st	-X, r1
    179e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if112;
	if112.value = &straightOriented.value;
    17a0:	3e 01       	movw	r6, r28
    17a2:	b5 e6       	ldi	r27, 0x65	; 101
    17a4:	6b 1a       	sub	r6, r27
    17a6:	be ef       	ldi	r27, 0xFE	; 254
    17a8:	7b 0a       	sbc	r7, r27
    17aa:	d3 01       	movw	r26, r6
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	9c 93       	st	X, r25
    17b0:	8e 93       	st	-X, r24
	if112.next = NULL;
    17b2:	13 96       	adiw	r26, 0x03	; 3
    17b4:	1c 92       	st	X, r1
    17b6:	1e 92       	st	-X, r1
    17b8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if111;
	if111.value = &smallRight.value;
    17ba:	6e 5e       	subi	r22, 0xEE	; 238
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	db 01       	movw	r26, r22
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	bc 92       	st	X, r11
    17c4:	ae 92       	st	-X, r10
	if111.next = &if112;
    17c6:	13 96       	adiw	r26, 0x03	; 3
    17c8:	7c 92       	st	X, r7
    17ca:	6e 92       	st	-X, r6
    17cc:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule11;
	rule11.if_side = &if111;
    17ce:	14 96       	adiw	r26, 0x04	; 4
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	7c 93       	st	X, r23
    17d4:	6e 93       	st	-X, r22
	rule11.then_side = &then11;
    17d6:	13 96       	adiw	r26, 0x03	; 3
    17d8:	1c 93       	st	X, r17
    17da:	0e 93       	st	-X, r16
    17dc:	12 97       	sbiw	r26, 0x02	; 2
	rule11.next = &rule12;
    17de:	15 96       	adiw	r26, 0x05	; 5
    17e0:	fc 93       	st	X, r31
    17e2:	ee 93       	st	-X, r30
    17e4:	14 97       	sbiw	r26, 0x04	; 4


	//RULE 10 "if deltaC is smallRight and deltaV is rightOriented then steering is sharpLeft"
	struct rule_element_type then10;
	then10.value = &sharpLeft.value;
    17e6:	0e 5e       	subi	r16, 0xEE	; 238
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	c3 5a       	subi	r28, 0xA3	; 163
    17ec:	dd 4f       	sbci	r29, 0xFD	; 253
    17ee:	68 81       	ld	r22, Y
    17f0:	79 81       	ldd	r23, Y+1	; 0x01
    17f2:	cd 55       	subi	r28, 0x5D	; 93
    17f4:	d2 40       	sbci	r29, 0x02	; 2
    17f6:	f8 01       	movw	r30, r16
    17f8:	71 83       	std	Z+1, r23	; 0x01
    17fa:	60 83       	st	Z, r22
	then10.next = NULL;
    17fc:	13 82       	std	Z+3, r1	; 0x03
    17fe:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if102;
	if102.value = &rightOriented.value;
    1800:	3e 01       	movw	r6, r28
    1802:	73 e5       	ldi	r23, 0x53	; 83
    1804:	67 1a       	sub	r6, r23
    1806:	7e ef       	ldi	r23, 0xFE	; 254
    1808:	77 0a       	sbc	r7, r23
    180a:	f3 01       	movw	r30, r6
    180c:	51 83       	std	Z+1, r21	; 0x01
    180e:	40 83       	st	Z, r20
	if102.next = NULL;
    1810:	13 82       	std	Z+3, r1	; 0x03
    1812:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if101;
	if101.value = &smallRight.value;
    1814:	be 01       	movw	r22, r28
    1816:	6f 54       	subi	r22, 0x4F	; 79
    1818:	7e 4f       	sbci	r23, 0xFE	; 254
    181a:	fb 01       	movw	r30, r22
    181c:	b1 82       	std	Z+1, r11	; 0x01
    181e:	a0 82       	st	Z, r10
	if101.next = &if102;
    1820:	73 82       	std	Z+3, r7	; 0x03
    1822:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule10;
	rule10.if_side = &if101;
    1824:	34 96       	adiw	r30, 0x04	; 4
    1826:	71 83       	std	Z+1, r23	; 0x01
    1828:	60 83       	st	Z, r22
	rule10.then_side = &then10;
    182a:	13 83       	std	Z+3, r17	; 0x03
    182c:	02 83       	std	Z+2, r16	; 0x02
	rule10.next = &rule11;
    182e:	b5 83       	std	Z+5, r27	; 0x05
    1830:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 9 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type then9;
	then9.value = &right.value;
    1832:	0e 5e       	subi	r16, 0xEE	; 238
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	d8 01       	movw	r26, r16
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	dc 92       	st	X, r13
    183c:	ce 92       	st	-X, r12
	then9.next = NULL;
    183e:	13 96       	adiw	r26, 0x03	; 3
    1840:	1c 92       	st	X, r1
    1842:	1e 92       	st	-X, r1
    1844:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &leftOriented.value;
    1846:	3e 01       	movw	r6, r28
    1848:	b1 e4       	ldi	r27, 0x41	; 65
    184a:	6b 1a       	sub	r6, r27
    184c:	be ef       	ldi	r27, 0xFE	; 254
    184e:	7b 0a       	sbc	r7, r27
    1850:	d3 01       	movw	r26, r6
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
	if92.next = NULL;
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	1c 92       	st	X, r1
    185c:	1e 92       	st	-X, r1
    185e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if91;
	if91.value = &centre.value;
    1860:	5e 01       	movw	r10, r28
    1862:	b7 e4       	ldi	r27, 0x47	; 71
    1864:	ab 0e       	add	r10, r27
    1866:	b1 1c       	adc	r11, r1
    1868:	cd 53       	subi	r28, 0x3D	; 61
    186a:	de 4f       	sbci	r29, 0xFE	; 254
    186c:	b9 82       	std	Y+1, r11	; 0x01
    186e:	a8 82       	st	Y, r10
    1870:	c3 5c       	subi	r28, 0xC3	; 195
    1872:	d1 40       	sbci	r29, 0x01	; 1
	if91.next = &if92;
    1874:	cb 53       	subi	r28, 0x3B	; 59
    1876:	de 4f       	sbci	r29, 0xFE	; 254
    1878:	79 82       	std	Y+1, r7	; 0x01
    187a:	68 82       	st	Y, r6
    187c:	c5 5c       	subi	r28, 0xC5	; 197
    187e:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule9;
	rule9.if_side = &if91;
    1880:	18 96       	adiw	r26, 0x08	; 8
    1882:	63 ec       	ldi	r22, 0xC3	; 195
    1884:	71 e0       	ldi	r23, 0x01	; 1
    1886:	6c 0f       	add	r22, r28
    1888:	7d 1f       	adc	r23, r29
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	7c 93       	st	X, r23
    188e:	6e 93       	st	-X, r22
	rule9.then_side = &then9;
    1890:	13 96       	adiw	r26, 0x03	; 3
    1892:	1c 93       	st	X, r17
    1894:	0e 93       	st	-X, r16
    1896:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = &rule10;
    1898:	15 96       	adiw	r26, 0x05	; 5
    189a:	fc 93       	st	X, r31
    189c:	ee 93       	st	-X, r30
    189e:	14 97       	sbiw	r26, 0x04	; 4

	
	//RULE 8 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type then8;
	then8.value = &straight.value;
    18a0:	0e 5e       	subi	r16, 0xEE	; 238
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	f8 01       	movw	r30, r16
    18a6:	f1 82       	std	Z+1, r15	; 0x01
    18a8:	e0 82       	st	Z, r14
	then8.next = NULL;
    18aa:	13 82       	std	Z+3, r1	; 0x03
    18ac:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &straightOriented.value;
    18ae:	3e 01       	movw	r6, r28
    18b0:	ff e2       	ldi	r31, 0x2F	; 47
    18b2:	6f 1a       	sub	r6, r31
    18b4:	fe ef       	ldi	r31, 0xFE	; 254
    18b6:	7f 0a       	sbc	r7, r31
    18b8:	f3 01       	movw	r30, r6
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
	if82.next = NULL;
    18be:	13 82       	std	Z+3, r1	; 0x03
    18c0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if81;
	if81.value = &centre.value;
    18c2:	6e 5e       	subi	r22, 0xEE	; 238
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	fb 01       	movw	r30, r22
    18c8:	b1 82       	std	Z+1, r11	; 0x01
    18ca:	a0 82       	st	Z, r10
	if81.next = &if82;
    18cc:	73 82       	std	Z+3, r7	; 0x03
    18ce:	62 82       	std	Z+2, r6	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
    18d0:	34 96       	adiw	r30, 0x04	; 4
    18d2:	71 83       	std	Z+1, r23	; 0x01
    18d4:	60 83       	st	Z, r22
	rule8.then_side = &then8;
    18d6:	13 83       	std	Z+3, r17	; 0x03
    18d8:	02 83       	std	Z+2, r16	; 0x02
	rule8.next = &rule9;
    18da:	b5 83       	std	Z+5, r27	; 0x05
    18dc:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type then7;
	then7.value = &left.value;
    18de:	0e 5e       	subi	r16, 0xEE	; 238
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	d8 01       	movw	r26, r16
    18e4:	11 96       	adiw	r26, 0x01	; 1
    18e6:	9c 92       	st	X, r9
    18e8:	8e 92       	st	-X, r8
	then7.next = NULL;
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	1c 92       	st	X, r1
    18ee:	1e 92       	st	-X, r1
    18f0:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &rightOriented.value;
    18f2:	3e 01       	movw	r6, r28
    18f4:	bd e1       	ldi	r27, 0x1D	; 29
    18f6:	6b 1a       	sub	r6, r27
    18f8:	be ef       	ldi	r27, 0xFE	; 254
    18fa:	7b 0a       	sbc	r7, r27
    18fc:	d3 01       	movw	r26, r6
    18fe:	11 96       	adiw	r26, 0x01	; 1
    1900:	5c 93       	st	X, r21
    1902:	4e 93       	st	-X, r20
	if72.next = NULL;
    1904:	13 96       	adiw	r26, 0x03	; 3
    1906:	1c 92       	st	X, r1
    1908:	1e 92       	st	-X, r1
    190a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &centre.value;
    190c:	6e 5e       	subi	r22, 0xEE	; 238
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	db 01       	movw	r26, r22
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	bc 92       	st	X, r11
    1916:	ae 92       	st	-X, r10
	if71.next = &if72;
    1918:	13 96       	adiw	r26, 0x03	; 3
    191a:	7c 92       	st	X, r7
    191c:	6e 92       	st	-X, r6
    191e:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
    1920:	14 96       	adiw	r26, 0x04	; 4
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	7c 93       	st	X, r23
    1926:	6e 93       	st	-X, r22
	rule7.then_side = &then7;
    1928:	13 96       	adiw	r26, 0x03	; 3
    192a:	1c 93       	st	X, r17
    192c:	0e 93       	st	-X, r16
    192e:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
    1930:	15 96       	adiw	r26, 0x05	; 5
    1932:	fc 93       	st	X, r31
    1934:	ee 93       	st	-X, r30
    1936:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 6 "if deltaC is smallLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then6;
	then6.value = &sharpRight.value;
    1938:	0e 5e       	subi	r16, 0xEE	; 238
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	ea e0       	ldi	r30, 0x0A	; 10
    193e:	4e 0e       	add	r4, r30
    1940:	51 1c       	adc	r5, r1
    1942:	f8 01       	movw	r30, r16
    1944:	51 82       	std	Z+1, r5	; 0x01
    1946:	40 82       	st	Z, r4
	then6.next = NULL;
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if62;
	if62.value = &leftOriented.value;
    194c:	3e 01       	movw	r6, r28
    194e:	fb e0       	ldi	r31, 0x0B	; 11
    1950:	6f 1a       	sub	r6, r31
    1952:	fe ef       	ldi	r31, 0xFE	; 254
    1954:	7f 0a       	sbc	r7, r31
    1956:	f3 01       	movw	r30, r6
    1958:	31 83       	std	Z+1, r19	; 0x01
    195a:	20 83       	st	Z, r18
	if62.next = NULL;
    195c:	13 82       	std	Z+3, r1	; 0x03
    195e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if61;
	if61.value = &smallLeft.value;
    1960:	5e 01       	movw	r10, r28
    1962:	fd e5       	ldi	r31, 0x5D	; 93
    1964:	af 0e       	add	r10, r31
    1966:	b1 1c       	adc	r11, r1
    1968:	c7 50       	subi	r28, 0x07	; 7
    196a:	de 4f       	sbci	r29, 0xFE	; 254
    196c:	b9 82       	std	Y+1, r11	; 0x01
    196e:	a8 82       	st	Y, r10
    1970:	c9 5f       	subi	r28, 0xF9	; 249
    1972:	d1 40       	sbci	r29, 0x01	; 1
	if61.next = &if62;
    1974:	c5 50       	subi	r28, 0x05	; 5
    1976:	de 4f       	sbci	r29, 0xFE	; 254
    1978:	79 82       	std	Y+1, r7	; 0x01
    197a:	68 82       	st	Y, r6
    197c:	cb 5f       	subi	r28, 0xFB	; 251
    197e:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_type rule6;
	rule6.if_side = &if61;
    1980:	38 96       	adiw	r30, 0x08	; 8
    1982:	69 ef       	ldi	r22, 0xF9	; 249
    1984:	71 e0       	ldi	r23, 0x01	; 1
    1986:	6c 0f       	add	r22, r28
    1988:	7d 1f       	adc	r23, r29
    198a:	71 83       	std	Z+1, r23	; 0x01
    198c:	60 83       	st	Z, r22
	rule6.then_side = &then6;
    198e:	13 83       	std	Z+3, r17	; 0x03
    1990:	02 83       	std	Z+2, r16	; 0x02
	rule6.next = &rule7;
    1992:	b5 83       	std	Z+5, r27	; 0x05
    1994:	a4 83       	std	Z+4, r26	; 0x04

	

	//RULE 5 "if deltaC is smallLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then5;
	then5.value = &right.value;
    1996:	0e 5e       	subi	r16, 0xEE	; 238
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	d8 01       	movw	r26, r16
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	dc 92       	st	X, r13
    19a0:	ce 92       	st	-X, r12
	then5.next = NULL;
    19a2:	13 96       	adiw	r26, 0x03	; 3
    19a4:	1c 92       	st	X, r1
    19a6:	1e 92       	st	-X, r1
    19a8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &straightOriented.value;
    19aa:	3e 01       	movw	r6, r28
    19ac:	b9 ef       	ldi	r27, 0xF9	; 249
    19ae:	6b 1a       	sub	r6, r27
    19b0:	bd ef       	ldi	r27, 0xFD	; 253
    19b2:	7b 0a       	sbc	r7, r27
    19b4:	d3 01       	movw	r26, r6
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	8e 93       	st	-X, r24
	if52.next = NULL;
    19bc:	13 96       	adiw	r26, 0x03	; 3
    19be:	1c 92       	st	X, r1
    19c0:	1e 92       	st	-X, r1
    19c2:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if51;
	if51.value = &smallLeft.value;
    19c4:	6e 5e       	subi	r22, 0xEE	; 238
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	db 01       	movw	r26, r22
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	bc 92       	st	X, r11
    19ce:	ae 92       	st	-X, r10
	if51.next = &if52;
    19d0:	13 96       	adiw	r26, 0x03	; 3
    19d2:	7c 92       	st	X, r7
    19d4:	6e 92       	st	-X, r6
    19d6:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule5;
	rule5.if_side = &if51;
    19d8:	14 96       	adiw	r26, 0x04	; 4
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	7c 93       	st	X, r23
    19de:	6e 93       	st	-X, r22
	rule5.then_side = &then5;
    19e0:	13 96       	adiw	r26, 0x03	; 3
    19e2:	1c 93       	st	X, r17
    19e4:	0e 93       	st	-X, r16
    19e6:	12 97       	sbiw	r26, 0x02	; 2
	rule5.next = &rule6;
    19e8:	15 96       	adiw	r26, 0x05	; 5
    19ea:	fc 93       	st	X, r31
    19ec:	ee 93       	st	-X, r30
    19ee:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 4 "if deltaC is smallLeft and deltaV is rightOriented then steering is left"
	struct rule_element_type then4;
	then4.value = &left.value;
    19f0:	0e 5e       	subi	r16, 0xEE	; 238
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	f8 01       	movw	r30, r16
    19f6:	91 82       	std	Z+1, r9	; 0x01
    19f8:	80 82       	st	Z, r8
	then4.next = NULL;
    19fa:	13 82       	std	Z+3, r1	; 0x03
    19fc:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if42;
	if42.value = &rightOriented.value;
    19fe:	62 5f       	subi	r22, 0xF2	; 242
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	fb 01       	movw	r30, r22
    1a04:	51 83       	std	Z+1, r21	; 0x01
    1a06:	40 83       	st	Z, r20
	if42.next = NULL;
    1a08:	13 82       	std	Z+3, r1	; 0x03
    1a0a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if41;
	if41.value = &smallLeft.value;
    1a0c:	4e 01       	movw	r8, r28
    1a0e:	f3 ee       	ldi	r31, 0xE3	; 227
    1a10:	8f 1a       	sub	r8, r31
    1a12:	fd ef       	ldi	r31, 0xFD	; 253
    1a14:	9f 0a       	sbc	r9, r31
    1a16:	f4 01       	movw	r30, r8
    1a18:	b1 82       	std	Z+1, r11	; 0x01
    1a1a:	a0 82       	st	Z, r10
	if41.next = &if42;
    1a1c:	73 83       	std	Z+3, r23	; 0x03
    1a1e:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule4;
	rule4.if_side = &if41;
    1a20:	68 5f       	subi	r22, 0xF8	; 248
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	fb 01       	movw	r30, r22
    1a26:	91 82       	std	Z+1, r9	; 0x01
    1a28:	80 82       	st	Z, r8
	rule4.then_side = &then4;
    1a2a:	13 83       	std	Z+3, r17	; 0x03
    1a2c:	02 83       	std	Z+2, r16	; 0x02
	rule4.next = &rule5;
    1a2e:	b5 83       	std	Z+5, r27	; 0x05
    1a30:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 3 "if deltaC is farLeft and deltaV is leftOriented then steering is sharpRight"
	struct rule_element_type then3;
	then3.value = &sharpRight.value;
    1a32:	5e 01       	movw	r10, r28
    1a34:	f9 ed       	ldi	r31, 0xD9	; 217
    1a36:	af 1a       	sub	r10, r31
    1a38:	fd ef       	ldi	r31, 0xFD	; 253
    1a3a:	bf 0a       	sbc	r11, r31
    1a3c:	d5 01       	movw	r26, r10
    1a3e:	11 96       	adiw	r26, 0x01	; 1
    1a40:	5c 92       	st	X, r5
    1a42:	4e 92       	st	-X, r4
	then3.next = NULL;
    1a44:	13 96       	adiw	r26, 0x03	; 3
    1a46:	1c 92       	st	X, r1
    1a48:	1e 92       	st	-X, r1
    1a4a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if32;
	if32.value = &leftOriented.value;
    1a4c:	14 96       	adiw	r26, 0x04	; 4
    1a4e:	11 96       	adiw	r26, 0x01	; 1
    1a50:	3c 93       	st	X, r19
    1a52:	2e 93       	st	-X, r18
	if32.next = NULL;
    1a54:	13 96       	adiw	r26, 0x03	; 3
    1a56:	1c 92       	st	X, r1
    1a58:	1e 92       	st	-X, r1
    1a5a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &farLeft.value;
    1a5c:	2a 56       	subi	r18, 0x6A	; 106
    1a5e:	3e 4f       	sbci	r19, 0xFE	; 254
    1a60:	02 5a       	subi	r16, 0xA2	; 162
    1a62:	11 40       	sbci	r17, 0x01	; 1
    1a64:	f9 01       	movw	r30, r18
    1a66:	11 83       	std	Z+1, r17	; 0x01
    1a68:	00 83       	st	Z, r16
	if31.next = &if32;
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
    1a6c:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
    1a6e:	18 96       	adiw	r26, 0x08	; 8
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	3c 93       	st	X, r19
    1a74:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
    1a76:	13 96       	adiw	r26, 0x03	; 3
    1a78:	bc 92       	st	X, r11
    1a7a:	ae 92       	st	-X, r10
    1a7c:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
    1a7e:	15 96       	adiw	r26, 0x05	; 5
    1a80:	7c 93       	st	X, r23
    1a82:	6e 93       	st	-X, r22
    1a84:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if deltaC is farLeft and deltaV is straightOriented then steering is right"
	struct rule_element_type then2;
	then2.value = &right.value;
    1a86:	5e 01       	movw	r10, r28
    1a88:	f7 ec       	ldi	r31, 0xC7	; 199
    1a8a:	af 1a       	sub	r10, r31
    1a8c:	fd ef       	ldi	r31, 0xFD	; 253
    1a8e:	bf 0a       	sbc	r11, r31
    1a90:	f5 01       	movw	r30, r10
    1a92:	d1 82       	std	Z+1, r13	; 0x01
    1a94:	c0 82       	st	Z, r12
	then2.next = NULL;
    1a96:	13 82       	std	Z+3, r1	; 0x03
    1a98:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &straightOriented.value;
    1a9a:	64 5e       	subi	r22, 0xE4	; 228
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
	if22.next = NULL;
    1aa4:	13 82       	std	Z+3, r1	; 0x03
    1aa6:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &farLeft.value;
    1aa8:	2e 5e       	subi	r18, 0xEE	; 238
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	f9 01       	movw	r30, r18
    1aae:	11 83       	std	Z+1, r17	; 0x01
    1ab0:	00 83       	st	Z, r16
	if21.next = &if22;
    1ab2:	73 83       	std	Z+3, r23	; 0x03
    1ab4:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
    1ab6:	8a 56       	subi	r24, 0x6A	; 106
    1ab8:	9e 4f       	sbci	r25, 0xFE	; 254
    1aba:	fc 01       	movw	r30, r24
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	20 83       	st	Z, r18
	rule2.then_side = &then2;
    1ac0:	b3 82       	std	Z+3, r11	; 0x03
    1ac2:	a2 82       	std	Z+2, r10	; 0x02
	rule2.next = &rule3;
    1ac4:	b5 83       	std	Z+5, r27	; 0x05
    1ac6:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if deltaC is farLeft and deltaV is rightOriented then steering is straight"
	struct rule_element_type then1;
	then1.value = &straight.value;
    1ac8:	58 96       	adiw	r26, 0x18	; 24
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	fc 92       	st	X, r15
    1ace:	ee 92       	st	-X, r14
	then1.next = NULL;
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	1c 92       	st	X, r1
    1ad4:	1e 92       	st	-X, r1
    1ad6:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &rightOriented.value;
    1ad8:	6e 5e       	subi	r22, 0xEE	; 238
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	fb 01       	movw	r30, r22
    1ade:	51 83       	std	Z+1, r21	; 0x01
    1ae0:	40 83       	st	Z, r20
	if12.next = NULL;
    1ae2:	13 82       	std	Z+3, r1	; 0x03
    1ae4:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &farLeft.value;
    1ae6:	2e 5e       	subi	r18, 0xEE	; 238
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	f9 01       	movw	r30, r18
    1aec:	11 83       	std	Z+1, r17	; 0x01
    1aee:	00 83       	st	Z, r16
	if11.next = &if12;
    1af0:	73 83       	std	Z+3, r23	; 0x03
    1af2:	62 83       	std	Z+2, r22	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
    1af4:	34 96       	adiw	r30, 0x04	; 4
    1af6:	31 83       	std	Z+1, r19	; 0x01
    1af8:	20 83       	st	Z, r18
	rule1.then_side = &then1;
    1afa:	b3 83       	std	Z+3, r27	; 0x03
    1afc:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
    1afe:	95 83       	std	Z+5, r25	; 0x05
    1b00:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
    1b02:	f0 93 3f 03 	sts	0x033F, r31
    1b06:	e0 93 3e 03 	sts	0x033E, r30
	
	
	// the methods performing the FLC
	fuzzification();
    1b0a:	0e 94 6f 05 	call	0xade	; 0xade <fuzzification>
	rule_evaluation();
    1b0e:	0e d8       	rcall	.-4068   	; 0xb2c <rule_evaluation>
	defuzzification();
    1b10:	53 d8       	rcall	.-3930   	; 0xbb8 <defuzzification>
	if (steering.value < MAXLEFT)
    1b12:	d1 01       	movw	r26, r2
    1b14:	1a 96       	adiw	r26, 0x0a	; 10
    1b16:	8d 91       	ld	r24, X+
    1b18:	9c 91       	ld	r25, X
    1b1a:	1b 97       	sbiw	r26, 0x0b	; 11
    1b1c:	86 3e       	cpi	r24, 0xE6	; 230
    1b1e:	b7 e0       	ldi	r27, 0x07	; 7
    1b20:	9b 07       	cpc	r25, r27
    1b22:	24 f4       	brge	.+8      	; 0x1b2c <nDoFuzzy+0x8b8>
	{
		setServo(MAXLEFT);
    1b24:	86 ee       	ldi	r24, 0xE6	; 230
    1b26:	97 e0       	ldi	r25, 0x07	; 7
    1b28:	6f d0       	rcall	.+222    	; 0x1c08 <setServo>
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <nDoFuzzy+0x8ca>
	}
	else if (steering.value >MAXRIGHT)
    1b2c:	85 3e       	cpi	r24, 0xE5	; 229
    1b2e:	ec e0       	ldi	r30, 0x0C	; 12
    1b30:	9e 07       	cpc	r25, r30
    1b32:	24 f0       	brlt	.+8      	; 0x1b3c <nDoFuzzy+0x8c8>
	{
		setServo(MAXRIGHT);
    1b34:	84 ee       	ldi	r24, 0xE4	; 228
    1b36:	9c e0       	ldi	r25, 0x0C	; 12
    1b38:	67 d0       	rcall	.+206    	; 0x1c08 <setServo>
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <nDoFuzzy+0x8ca>
	}
	else
	{
		setServo(steering.value);
    1b3c:	65 d0       	rcall	.+202    	; 0x1c08 <setServo>
	}
    
}
    1b3e:	c2 5a       	subi	r28, 0xA2	; 162
    1b40:	dd 4f       	sbci	r29, 0xFD	; 253
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	ff 90       	pop	r15
    1b56:	ef 90       	pop	r14
    1b58:	df 90       	pop	r13
    1b5a:	cf 90       	pop	r12
    1b5c:	bf 90       	pop	r11
    1b5e:	af 90       	pop	r10
    1b60:	9f 90       	pop	r9
    1b62:	8f 90       	pop	r8
    1b64:	7f 90       	pop	r7
    1b66:	6f 90       	pop	r6
    1b68:	5f 90       	pop	r5
    1b6a:	4f 90       	pop	r4
    1b6c:	3f 90       	pop	r3
    1b6e:	2f 90       	pop	r2
    1b70:	08 95       	ret

00001b72 <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) & (v == 81))        // right curvature, turn right
    1b72:	31 e0       	ldi	r19, 0x01	; 1
    1b74:	61 35       	cpi	r22, 0x51	; 81
    1b76:	71 05       	cpc	r23, r1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <nFuzzySteering+0xa>
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	21 e0       	ldi	r18, 0x01	; 1
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <nFuzzySteering+0x14>
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	22 23       	and	r18, r18
    1b88:	31 f0       	breq	.+12     	; 0x1b96 <nFuzzySteering+0x24>
    1b8a:	33 23       	and	r19, r19
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <nFuzzySteering+0x24>
	{
		setServo(MAXRIGHT);
    1b8e:	84 ee       	ldi	r24, 0xE4	; 228
    1b90:	9c e0       	ldi	r25, 0x0C	; 12
    1b92:	3a c0       	rjmp	.+116    	; 0x1c08 <setServo>
    1b94:	08 95       	ret
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <nFuzzySteering+0x2e>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	22 23       	and	r18, r18
    1ba2:	31 f0       	breq	.+12     	; 0x1bb0 <nFuzzySteering+0x3e>
    1ba4:	33 23       	and	r19, r19
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <nFuzzySteering+0x3e>
	{
		setServo(MAXLEFT);
    1ba8:	86 ee       	ldi	r24, 0xE6	; 230
    1baa:	97 e0       	ldi	r25, 0x07	; 7
    1bac:	2d c0       	rjmp	.+90     	; 0x1c08 <setServo>
    1bae:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1bb0:	61 cb       	rjmp	.-2366   	; 0x1274 <nDoFuzzy>
    1bb2:	08 95       	ret

00001bb4 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1bb4:	80 e3       	ldi	r24, 0x30	; 48
    1bb6:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1bb8:	82 ea       	ldi	r24, 0xA2	; 162
    1bba:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f e8       	ldi	r25, 0x8F	; 143
    1bc2:	90 93 87 00 	sts	0x0087, r25
    1bc6:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1bca:	8a e1       	ldi	r24, 0x1A	; 26
    1bcc:	80 93 81 00 	sts	0x0081, r24
    1bd0:	08 95       	ret

00001bd2 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1bd2:	80 36       	cpi	r24, 0x60	; 96
    1bd4:	2a e0       	ldi	r18, 0x0A	; 10
    1bd6:	92 07       	cpc	r25, r18
    1bd8:	3c f4       	brge	.+14     	; 0x1be8 <setESC+0x16>
	{
		OCR1A = MINESC;
    1bda:	8f e5       	ldi	r24, 0x5F	; 95
    1bdc:	9a e0       	ldi	r25, 0x0A	; 10
    1bde:	90 93 89 00 	sts	0x0089, r25
    1be2:	80 93 88 00 	sts	0x0088, r24
    1be6:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1be8:	82 32       	cpi	r24, 0x22	; 34
    1bea:	2b e0       	ldi	r18, 0x0B	; 11
    1bec:	92 07       	cpc	r25, r18
    1bee:	3c f0       	brlt	.+14     	; 0x1bfe <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1bf0:	82 e2       	ldi	r24, 0x22	; 34
    1bf2:	9b e0       	ldi	r25, 0x0B	; 11
    1bf4:	90 93 89 00 	sts	0x0089, r25
    1bf8:	80 93 88 00 	sts	0x0088, r24
    1bfc:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1bfe:	90 93 89 00 	sts	0x0089, r25
    1c02:	80 93 88 00 	sts	0x0088, r24
    1c06:	08 95       	ret

00001c08 <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1c08:	84 3e       	cpi	r24, 0xE4	; 228
    1c0a:	2c e0       	ldi	r18, 0x0C	; 12
    1c0c:	92 07       	cpc	r25, r18
    1c0e:	3c f0       	brlt	.+14     	; 0x1c1e <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1c10:	84 ee       	ldi	r24, 0xE4	; 228
    1c12:	9c e0       	ldi	r25, 0x0C	; 12
    1c14:	90 93 8b 00 	sts	0x008B, r25
    1c18:	80 93 8a 00 	sts	0x008A, r24
    1c1c:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1c1e:	87 3e       	cpi	r24, 0xE7	; 231
    1c20:	27 e0       	ldi	r18, 0x07	; 7
    1c22:	92 07       	cpc	r25, r18
    1c24:	3c f4       	brge	.+14     	; 0x1c34 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1c26:	86 ee       	ldi	r24, 0xE6	; 230
    1c28:	97 e0       	ldi	r25, 0x07	; 7
    1c2a:	90 93 8b 00 	sts	0x008B, r25
    1c2e:	80 93 8a 00 	sts	0x008A, r24
    1c32:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    1c34:	ea e8       	ldi	r30, 0x8A	; 138
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	40 91 00 01 	lds	r20, 0x0100
    1c40:	50 91 01 01 	lds	r21, 0x0101
    1c44:	84 9f       	mul	r24, r20
    1c46:	90 01       	movw	r18, r0
    1c48:	85 9f       	mul	r24, r21
    1c4a:	30 0d       	add	r19, r0
    1c4c:	94 9f       	mul	r25, r20
    1c4e:	30 0d       	add	r19, r0
    1c50:	11 24       	eor	r1, r1
    1c52:	40 91 02 01 	lds	r20, 0x0102
    1c56:	50 91 03 01 	lds	r21, 0x0103
    1c5a:	64 9f       	mul	r22, r20
    1c5c:	c0 01       	movw	r24, r0
    1c5e:	65 9f       	mul	r22, r21
    1c60:	90 0d       	add	r25, r0
    1c62:	74 9f       	mul	r23, r20
    1c64:	90 0d       	add	r25, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	82 0f       	add	r24, r18
    1c6a:	93 1f       	adc	r25, r19
    1c6c:	6a e0       	ldi	r22, 0x0A	; 10
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	e0 d3       	rcall	.+1984   	; 0x2432 <__divmodhi4>
    1c72:	71 83       	std	Z+1, r23	; 0x01
    1c74:	60 83       	st	Z, r22
    1c76:	08 95       	ret

00001c78 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1c78:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1c7a:	20 91 ac 02 	lds	r18, 0x02AC
    1c7e:	30 91 ad 02 	lds	r19, 0x02AD
    1c82:	21 15       	cp	r18, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	a9 f0       	breq	.+42     	; 0x1cb2 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1c88:	e8 ea       	ldi	r30, 0xA8	; 168
    1c8a:	f2 e0       	ldi	r31, 0x02	; 2
    1c8c:	40 81       	ld	r20, Z
    1c8e:	51 81       	ldd	r21, Z+1	; 0x01
    1c90:	da 01       	movw	r26, r20
    1c92:	a8 59       	subi	r26, 0x98	; 152
    1c94:	bd 4f       	sbci	r27, 0xFD	; 253
    1c96:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1c98:	4f 5f       	subi	r20, 0xFF	; 255
    1c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9c:	51 83       	std	Z+1, r21	; 0x01
    1c9e:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	31 09       	sbc	r19, r1
    1ca4:	30 93 ad 02 	sts	0x02AD, r19
    1ca8:	20 93 ac 02 	sts	0x02AC, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1cac:	23 2b       	or	r18, r19
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <spi_get_byte+0x40>
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1cb2:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1cb4:	10 92 20 02 	sts	0x0220, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1cb8:	20 91 a8 02 	lds	r18, 0x02A8
    1cbc:	30 91 a9 02 	lds	r19, 0x02A9
    1cc0:	20 34       	cpi	r18, 0x40	; 64
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1cc6:	10 92 a9 02 	sts	0x02A9, r1
    1cca:	10 92 a8 02 	sts	0x02A8, r1
	}
	

	sei();
    1cce:	78 94       	sei
	
	return value;
	
		
}
    1cd0:	08 95       	ret

00001cd2 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	0b b6       	in	r0, 0x3b	; 59
    1cde:	0f 92       	push	r0
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1cf0:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1cf2:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1cf4:	2d 3f       	cpi	r18, 0xFD	; 253
    1cf6:	a9 f0       	breq	.+42     	; 0x1d22 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1cf8:	ea ea       	ldi	r30, 0xAA	; 170
    1cfa:	f2 e0       	ldi	r31, 0x02	; 2
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	dc 01       	movw	r26, r24
    1d02:	a8 59       	subi	r26, 0x98	; 152
    1d04:	bd 4f       	sbci	r27, 0xFD	; 253
    1d06:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1d0e:	ec ea       	ldi	r30, 0xAC	; 172
    1d10:	f2 e0       	ldi	r31, 0x02	; 2
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 20 02 	sts	0x0220, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1d22:	80 91 aa 02 	lds	r24, 0x02AA
    1d26:	90 91 ab 02 	lds	r25, 0x02AB
    1d2a:	80 34       	cpi	r24, 0x40	; 64
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	21 f4       	brne	.+8      	; 0x1d38 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1d30:	10 92 ab 02 	sts	0x02AB, r1
    1d34:	10 92 aa 02 	sts	0x02AA, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1d38:	80 91 66 02 	lds	r24, 0x0266
    1d3c:	90 91 67 02 	lds	r25, 0x0267
    1d40:	89 2b       	or	r24, r25
    1d42:	01 f1       	breq	.+64     	; 0x1d84 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1d44:	e0 91 62 02 	lds	r30, 0x0262
    1d48:	f0 91 63 02 	lds	r31, 0x0263
    1d4c:	ee 5d       	subi	r30, 0xDE	; 222
    1d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d50:	80 81       	ld	r24, Z
    1d52:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1d54:	e2 e6       	ldi	r30, 0x62	; 98
    1d56:	f2 e0       	ldi	r31, 0x02	; 2
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1d62:	e6 e6       	ldi	r30, 0x66	; 102
    1d64:	f2 e0       	ldi	r31, 0x02	; 2
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	21 50       	subi	r18, 0x01	; 1
    1d6c:	31 09       	sbc	r19, r1
    1d6e:	31 83       	std	Z+1, r19	; 0x01
    1d70:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1d72:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1d74:	80 34       	cpi	r24, 0x40	; 64
    1d76:	91 05       	cpc	r25, r1
    1d78:	49 f4       	brne	.+18     	; 0x1d8c <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1d7a:	10 92 63 02 	sts	0x0263, r1
    1d7e:	10 92 62 02 	sts	0x0262, r1
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1d84:	8d ef       	ldi	r24, 0xFD	; 253
    1d86:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1d88:	10 92 21 02 	sts	0x0221, r1
		
	} 	
	

}
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0b be       	out	0x3b, r0	; 59
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1daa:	80 e4       	ldi	r24, 0x40	; 64
    1dac:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1dae:	80 ec       	ldi	r24, 0xC0	; 192
    1db0:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1db2:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1db4:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1db6:	8d ef       	ldi	r24, 0xFD	; 253
    1db8:	8e bd       	out	0x2e, r24	; 46
    1dba:	08 95       	ret

00001dbc <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1dbc:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1dbe:	20 91 66 02 	lds	r18, 0x0266
    1dc2:	30 91 67 02 	lds	r19, 0x0267
    1dc6:	20 34       	cpi	r18, 0x40	; 64
    1dc8:	31 05       	cpc	r19, r1
    1dca:	90 f4       	brcc	.+36     	; 0x1df0 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1dcc:	e4 e6       	ldi	r30, 0x64	; 100
    1dce:	f2 e0       	ldi	r31, 0x02	; 2
    1dd0:	40 81       	ld	r20, Z
    1dd2:	51 81       	ldd	r21, Z+1	; 0x01
    1dd4:	da 01       	movw	r26, r20
    1dd6:	ae 5d       	subi	r26, 0xDE	; 222
    1dd8:	bd 4f       	sbci	r27, 0xFD	; 253
    1dda:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1ddc:	4f 5f       	subi	r20, 0xFF	; 255
    1dde:	5f 4f       	sbci	r21, 0xFF	; 255
    1de0:	51 83       	std	Z+1, r21	; 0x01
    1de2:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1de4:	2f 5f       	subi	r18, 0xFF	; 255
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	30 93 67 02 	sts	0x0267, r19
    1dec:	20 93 66 02 	sts	0x0266, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1df0:	80 91 64 02 	lds	r24, 0x0264
    1df4:	90 91 65 02 	lds	r25, 0x0265
    1df8:	80 34       	cpi	r24, 0x40	; 64
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1dfe:	10 92 65 02 	sts	0x0265, r1
    1e02:	10 92 64 02 	sts	0x0264, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1e06:	80 91 66 02 	lds	r24, 0x0266
    1e0a:	90 91 67 02 	lds	r25, 0x0267
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f9 f4       	brne	.+62     	; 0x1e50 <spi_send_byte+0x94>
    1e12:	80 91 21 02 	lds	r24, 0x0221
    1e16:	81 11       	cpse	r24, r1
    1e18:	1b c0       	rjmp	.+54     	; 0x1e50 <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    1e1a:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1e1c:	e0 91 62 02 	lds	r30, 0x0262
    1e20:	f0 91 63 02 	lds	r31, 0x0263
    1e24:	ee 5d       	subi	r30, 0xDE	; 222
    1e26:	fd 4f       	sbci	r31, 0xFD	; 253
    1e28:	80 81       	ld	r24, Z
    1e2a:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1e2c:	e2 e6       	ldi	r30, 0x62	; 98
    1e2e:	f2 e0       	ldi	r31, 0x02	; 2
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1e3a:	e6 e6       	ldi	r30, 0x66	; 102
    1e3c:	f2 e0       	ldi	r31, 0x02	; 2
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1e48:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	80 93 21 02 	sts	0x0221, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1e50:	80 91 62 02 	lds	r24, 0x0262
    1e54:	90 91 63 02 	lds	r25, 0x0263
    1e58:	80 34       	cpi	r24, 0x40	; 64
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	21 f4       	brne	.+8      	; 0x1e66 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1e5e:	10 92 63 02 	sts	0x0263, r1
    1e62:	10 92 62 02 	sts	0x0262, r1
	}
			
			

	sei();
    1e66:	78 94       	sei
    1e68:	08 95       	ret

00001e6a <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	20 91 ac 02 	lds	r18, 0x02AC
    1e70:	30 91 ad 02 	lds	r19, 0x02AD
    1e74:	2b 30       	cpi	r18, 0x0B	; 11
    1e76:	31 05       	cpc	r19, r1
    1e78:	08 f4       	brcc	.+2      	; 0x1e7c <is_package_recieved+0x12>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1e7c:	08 95       	ret

00001e7e <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	8c 01       	movw	r16, r24
    1e88:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1e8a:	20 91 ac 02 	lds	r18, 0x02AC
    1e8e:	30 91 ad 02 	lds	r19, 0x02AD
    1e92:	23 2b       	or	r18, r19
    1e94:	69 f1       	breq	.+90     	; 0x1ef0 <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1e96:	e0 91 a8 02 	lds	r30, 0x02A8
    1e9a:	f0 91 a9 02 	lds	r31, 0x02A9
    1e9e:	e8 59       	subi	r30, 0x98	; 152
    1ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea6:	e1 f4       	brne	.+56     	; 0x1ee0 <read_sensor_info+0x62>
    1ea8:	e0 df       	rcall	.-64     	; 0x1e6a <is_package_recieved>
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f1       	breq	.+68     	; 0x1ef2 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1eae:	e4 de       	rcall	.-568    	; 0x1c78 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1eb0:	e3 de       	rcall	.-570    	; 0x1c78 <spi_get_byte>
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1eb6:	e0 de       	rcall	.-576    	; 0x1c78 <spi_get_byte>
    1eb8:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1eba:	de de       	rcall	.-580    	; 0x1c78 <spi_get_byte>
    1ebc:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1ebe:	dc de       	rcall	.-584    	; 0x1c78 <spi_get_byte>
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1ec2:	da de       	rcall	.-588    	; 0x1c78 <spi_get_byte>
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1ec6:	d8 de       	rcall	.-592    	; 0x1c78 <spi_get_byte>
    1ec8:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1eca:	d6 de       	rcall	.-596    	; 0x1c78 <spi_get_byte>
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1ece:	8c e3       	ldi	r24, 0x3C	; 60
    1ed0:	9e e0       	ldi	r25, 0x0E	; 14
    1ed2:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1ed4:	d1 de       	rcall	.-606    	; 0x1c78 <spi_get_byte>
    1ed6:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1ed8:	cf de       	rcall	.-610    	; 0x1c78 <spi_get_byte>
    1eda:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	09 c0       	rjmp	.+18     	; 0x1ef2 <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    1ee0:	c4 df       	rcall	.-120    	; 0x1e6a <is_package_recieved>
    1ee2:	88 23       	and	r24, r24
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1ee6:	c8 de       	rcall	.-624    	; 0x1c78 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1ee8:	be 01       	movw	r22, r28
    1eea:	c8 01       	movw	r24, r16
    1eec:	c8 df       	rcall	.-112    	; 0x1e7e <read_sensor_info>
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
    1f06:	0b b6       	in	r0, 0x3b	; 59
    1f08:	0f 92       	push	r0
    1f0a:	2f 93       	push	r18
    1f0c:	3f 93       	push	r19
    1f0e:	4f 93       	push	r20
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1f1c:	80 91 38 03 	lds	r24, 0x0338
    1f20:	90 91 39 03 	lds	r25, 0x0339
    1f24:	80 34       	cpi	r24, 0x40	; 64
    1f26:	91 05       	cpc	r25, r1
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 64 03 	sts	0x0364, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1f30:	80 91 c6 00 	lds	r24, 0x00C6
    1f34:	16 c0       	rjmp	.+44     	; 0x1f62 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1f36:	80 34       	cpi	r24, 0x40	; 64
    1f38:	91 05       	cpc	r25, r1
    1f3a:	e8 f4       	brcc	.+58     	; 0x1f76 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1f3c:	e6 e3       	ldi	r30, 0x36	; 54
    1f3e:	f3 e0       	ldi	r31, 0x03	; 3
    1f40:	20 81       	ld	r18, Z
    1f42:	31 81       	ldd	r19, Z+1	; 0x01
    1f44:	40 91 c6 00 	lds	r20, 0x00C6
    1f48:	d9 01       	movw	r26, r18
    1f4a:	ac 50       	subi	r26, 0x0C	; 12
    1f4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1f4e:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	31 83       	std	Z+1, r19	; 0x01
    1f56:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	90 93 39 03 	sts	0x0339, r25
    1f5e:	80 93 38 03 	sts	0x0338, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1f62:	80 91 38 03 	lds	r24, 0x0338
    1f66:	90 91 39 03 	lds	r25, 0x0339
    1f6a:	80 34       	cpi	r24, 0x40	; 64
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	19 f4       	brne	.+6      	; 0x1f76 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 62 03 	sts	0x0362, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1f76:	80 91 36 03 	lds	r24, 0x0336
    1f7a:	90 91 37 03 	lds	r25, 0x0337
    1f7e:	80 34       	cpi	r24, 0x40	; 64
    1f80:	91 05       	cpc	r25, r1
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1f84:	10 92 37 03 	sts	0x0337, r1
    1f88:	10 92 36 03 	sts	0x0336, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 93 61 03 	sts	0x0361, r24
}
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0b be       	out	0x3b, r0	; 59
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <__vector_22>:




ISR(USART0_TX_vect)
{
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	0b b6       	in	r0, 0x3b	; 59
    1fbe:	0f 92       	push	r0
    1fc0:	8f 93       	push	r24
    1fc2:	9f 93       	push	r25
    1fc4:	ef 93       	push	r30
    1fc6:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1fc8:	80 91 f2 02 	lds	r24, 0x02F2
    1fcc:	90 91 f3 02 	lds	r25, 0x02F3
    1fd0:	80 34       	cpi	r24, 0x40	; 64
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	19 f4       	brne	.+6      	; 0x1fdc <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1fd6:	10 92 60 03 	sts	0x0360, r1
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1fdc:	89 2b       	or	r24, r25
    1fde:	b9 f0       	breq	.+46     	; 0x200e <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1fe0:	e0 91 ee 02 	lds	r30, 0x02EE
    1fe4:	f0 91 ef 02 	lds	r31, 0x02EF
    1fe8:	e2 55       	subi	r30, 0x52	; 82
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
    1fec:	80 81       	ld	r24, Z
    1fee:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1ff2:	ee ee       	ldi	r30, 0xEE	; 238
    1ff4:	f2 e0       	ldi	r31, 0x02	; 2
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    2000:	e2 ef       	ldi	r30, 0xF2	; 242
    2002:	f2 e0       	ldi	r31, 0x02	; 2
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    200e:	80 91 ee 02 	lds	r24, 0x02EE
    2012:	90 91 ef 02 	lds	r25, 0x02EF
    2016:	80 34       	cpi	r24, 0x40	; 64
    2018:	91 05       	cpc	r25, r1
    201a:	21 f4       	brne	.+8      	; 0x2024 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    201c:	10 92 ef 02 	sts	0x02EF, r1
    2020:	10 92 ee 02 	sts	0x02EE, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    2024:	80 91 f2 02 	lds	r24, 0x02F2
    2028:	90 91 f3 02 	lds	r25, 0x02F3
    202c:	89 2b       	or	r24, r25
    202e:	39 f4       	brne	.+14     	; 0x203e <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    2030:	10 92 63 03 	sts	0x0363, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    2034:	e1 ec       	ldi	r30, 0xC1	; 193
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 7b       	andi	r24, 0xBF	; 191
    203c:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    203e:	ff 91       	pop	r31
    2040:	ef 91       	pop	r30
    2042:	9f 91       	pop	r25
    2044:	8f 91       	pop	r24
    2046:	0f 90       	pop	r0
    2048:	0b be       	out	0x3b, r0	; 59
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__subsf3>:
    2054:	50 58       	subi	r21, 0x80	; 128

00002056 <__addsf3>:
    2056:	bb 27       	eor	r27, r27
    2058:	aa 27       	eor	r26, r26
    205a:	0e d0       	rcall	.+28     	; 0x2078 <__addsf3x>
    205c:	4d c1       	rjmp	.+666    	; 0x22f8 <__fp_round>
    205e:	3e d1       	rcall	.+636    	; 0x22dc <__fp_pscA>
    2060:	30 f0       	brcs	.+12     	; 0x206e <__addsf3+0x18>
    2062:	43 d1       	rcall	.+646    	; 0x22ea <__fp_pscB>
    2064:	20 f0       	brcs	.+8      	; 0x206e <__addsf3+0x18>
    2066:	31 f4       	brne	.+12     	; 0x2074 <__addsf3+0x1e>
    2068:	9f 3f       	cpi	r25, 0xFF	; 255
    206a:	11 f4       	brne	.+4      	; 0x2070 <__addsf3+0x1a>
    206c:	1e f4       	brtc	.+6      	; 0x2074 <__addsf3+0x1e>
    206e:	33 c1       	rjmp	.+614    	; 0x22d6 <__fp_nan>
    2070:	0e f4       	brtc	.+2      	; 0x2074 <__addsf3+0x1e>
    2072:	e0 95       	com	r30
    2074:	e7 fb       	bst	r30, 7
    2076:	29 c1       	rjmp	.+594    	; 0x22ca <__fp_inf>

00002078 <__addsf3x>:
    2078:	e9 2f       	mov	r30, r25
    207a:	4f d1       	rcall	.+670    	; 0x231a <__fp_split3>
    207c:	80 f3       	brcs	.-32     	; 0x205e <__addsf3+0x8>
    207e:	ba 17       	cp	r27, r26
    2080:	62 07       	cpc	r22, r18
    2082:	73 07       	cpc	r23, r19
    2084:	84 07       	cpc	r24, r20
    2086:	95 07       	cpc	r25, r21
    2088:	18 f0       	brcs	.+6      	; 0x2090 <__addsf3x+0x18>
    208a:	71 f4       	brne	.+28     	; 0x20a8 <__addsf3x+0x30>
    208c:	9e f5       	brtc	.+102    	; 0x20f4 <__addsf3x+0x7c>
    208e:	67 c1       	rjmp	.+718    	; 0x235e <__fp_zero>
    2090:	0e f4       	brtc	.+2      	; 0x2094 <__addsf3x+0x1c>
    2092:	e0 95       	com	r30
    2094:	0b 2e       	mov	r0, r27
    2096:	ba 2f       	mov	r27, r26
    2098:	a0 2d       	mov	r26, r0
    209a:	0b 01       	movw	r0, r22
    209c:	b9 01       	movw	r22, r18
    209e:	90 01       	movw	r18, r0
    20a0:	0c 01       	movw	r0, r24
    20a2:	ca 01       	movw	r24, r20
    20a4:	a0 01       	movw	r20, r0
    20a6:	11 24       	eor	r1, r1
    20a8:	ff 27       	eor	r31, r31
    20aa:	59 1b       	sub	r21, r25
    20ac:	99 f0       	breq	.+38     	; 0x20d4 <__addsf3x+0x5c>
    20ae:	59 3f       	cpi	r21, 0xF9	; 249
    20b0:	50 f4       	brcc	.+20     	; 0x20c6 <__addsf3x+0x4e>
    20b2:	50 3e       	cpi	r21, 0xE0	; 224
    20b4:	68 f1       	brcs	.+90     	; 0x2110 <__addsf3x+0x98>
    20b6:	1a 16       	cp	r1, r26
    20b8:	f0 40       	sbci	r31, 0x00	; 0
    20ba:	a2 2f       	mov	r26, r18
    20bc:	23 2f       	mov	r18, r19
    20be:	34 2f       	mov	r19, r20
    20c0:	44 27       	eor	r20, r20
    20c2:	58 5f       	subi	r21, 0xF8	; 248
    20c4:	f3 cf       	rjmp	.-26     	; 0x20ac <__addsf3x+0x34>
    20c6:	46 95       	lsr	r20
    20c8:	37 95       	ror	r19
    20ca:	27 95       	ror	r18
    20cc:	a7 95       	ror	r26
    20ce:	f0 40       	sbci	r31, 0x00	; 0
    20d0:	53 95       	inc	r21
    20d2:	c9 f7       	brne	.-14     	; 0x20c6 <__addsf3x+0x4e>
    20d4:	7e f4       	brtc	.+30     	; 0x20f4 <__addsf3x+0x7c>
    20d6:	1f 16       	cp	r1, r31
    20d8:	ba 0b       	sbc	r27, r26
    20da:	62 0b       	sbc	r22, r18
    20dc:	73 0b       	sbc	r23, r19
    20de:	84 0b       	sbc	r24, r20
    20e0:	ba f0       	brmi	.+46     	; 0x2110 <__addsf3x+0x98>
    20e2:	91 50       	subi	r25, 0x01	; 1
    20e4:	a1 f0       	breq	.+40     	; 0x210e <__addsf3x+0x96>
    20e6:	ff 0f       	add	r31, r31
    20e8:	bb 1f       	adc	r27, r27
    20ea:	66 1f       	adc	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	88 1f       	adc	r24, r24
    20f0:	c2 f7       	brpl	.-16     	; 0x20e2 <__addsf3x+0x6a>
    20f2:	0e c0       	rjmp	.+28     	; 0x2110 <__addsf3x+0x98>
    20f4:	ba 0f       	add	r27, r26
    20f6:	62 1f       	adc	r22, r18
    20f8:	73 1f       	adc	r23, r19
    20fa:	84 1f       	adc	r24, r20
    20fc:	48 f4       	brcc	.+18     	; 0x2110 <__addsf3x+0x98>
    20fe:	87 95       	ror	r24
    2100:	77 95       	ror	r23
    2102:	67 95       	ror	r22
    2104:	b7 95       	ror	r27
    2106:	f7 95       	ror	r31
    2108:	9e 3f       	cpi	r25, 0xFE	; 254
    210a:	08 f0       	brcs	.+2      	; 0x210e <__addsf3x+0x96>
    210c:	b3 cf       	rjmp	.-154    	; 0x2074 <__addsf3+0x1e>
    210e:	93 95       	inc	r25
    2110:	88 0f       	add	r24, r24
    2112:	08 f0       	brcs	.+2      	; 0x2116 <__addsf3x+0x9e>
    2114:	99 27       	eor	r25, r25
    2116:	ee 0f       	add	r30, r30
    2118:	97 95       	ror	r25
    211a:	87 95       	ror	r24
    211c:	08 95       	ret

0000211e <__divsf3>:
    211e:	0c d0       	rcall	.+24     	; 0x2138 <__divsf3x>
    2120:	eb c0       	rjmp	.+470    	; 0x22f8 <__fp_round>
    2122:	e3 d0       	rcall	.+454    	; 0x22ea <__fp_pscB>
    2124:	40 f0       	brcs	.+16     	; 0x2136 <__divsf3+0x18>
    2126:	da d0       	rcall	.+436    	; 0x22dc <__fp_pscA>
    2128:	30 f0       	brcs	.+12     	; 0x2136 <__divsf3+0x18>
    212a:	21 f4       	brne	.+8      	; 0x2134 <__divsf3+0x16>
    212c:	5f 3f       	cpi	r21, 0xFF	; 255
    212e:	19 f0       	breq	.+6      	; 0x2136 <__divsf3+0x18>
    2130:	cc c0       	rjmp	.+408    	; 0x22ca <__fp_inf>
    2132:	51 11       	cpse	r21, r1
    2134:	15 c1       	rjmp	.+554    	; 0x2360 <__fp_szero>
    2136:	cf c0       	rjmp	.+414    	; 0x22d6 <__fp_nan>

00002138 <__divsf3x>:
    2138:	f0 d0       	rcall	.+480    	; 0x231a <__fp_split3>
    213a:	98 f3       	brcs	.-26     	; 0x2122 <__divsf3+0x4>

0000213c <__divsf3_pse>:
    213c:	99 23       	and	r25, r25
    213e:	c9 f3       	breq	.-14     	; 0x2132 <__divsf3+0x14>
    2140:	55 23       	and	r21, r21
    2142:	b1 f3       	breq	.-20     	; 0x2130 <__divsf3+0x12>
    2144:	95 1b       	sub	r25, r21
    2146:	55 0b       	sbc	r21, r21
    2148:	bb 27       	eor	r27, r27
    214a:	aa 27       	eor	r26, r26
    214c:	62 17       	cp	r22, r18
    214e:	73 07       	cpc	r23, r19
    2150:	84 07       	cpc	r24, r20
    2152:	38 f0       	brcs	.+14     	; 0x2162 <__divsf3_pse+0x26>
    2154:	9f 5f       	subi	r25, 0xFF	; 255
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	44 1f       	adc	r20, r20
    215e:	aa 1f       	adc	r26, r26
    2160:	a9 f3       	breq	.-22     	; 0x214c <__divsf3_pse+0x10>
    2162:	33 d0       	rcall	.+102    	; 0x21ca <__divsf3_pse+0x8e>
    2164:	0e 2e       	mov	r0, r30
    2166:	3a f0       	brmi	.+14     	; 0x2176 <__divsf3_pse+0x3a>
    2168:	e0 e8       	ldi	r30, 0x80	; 128
    216a:	30 d0       	rcall	.+96     	; 0x21cc <__divsf3_pse+0x90>
    216c:	91 50       	subi	r25, 0x01	; 1
    216e:	50 40       	sbci	r21, 0x00	; 0
    2170:	e6 95       	lsr	r30
    2172:	00 1c       	adc	r0, r0
    2174:	ca f7       	brpl	.-14     	; 0x2168 <__divsf3_pse+0x2c>
    2176:	29 d0       	rcall	.+82     	; 0x21ca <__divsf3_pse+0x8e>
    2178:	fe 2f       	mov	r31, r30
    217a:	27 d0       	rcall	.+78     	; 0x21ca <__divsf3_pse+0x8e>
    217c:	66 0f       	add	r22, r22
    217e:	77 1f       	adc	r23, r23
    2180:	88 1f       	adc	r24, r24
    2182:	bb 1f       	adc	r27, r27
    2184:	26 17       	cp	r18, r22
    2186:	37 07       	cpc	r19, r23
    2188:	48 07       	cpc	r20, r24
    218a:	ab 07       	cpc	r26, r27
    218c:	b0 e8       	ldi	r27, 0x80	; 128
    218e:	09 f0       	breq	.+2      	; 0x2192 <__divsf3_pse+0x56>
    2190:	bb 0b       	sbc	r27, r27
    2192:	80 2d       	mov	r24, r0
    2194:	bf 01       	movw	r22, r30
    2196:	ff 27       	eor	r31, r31
    2198:	93 58       	subi	r25, 0x83	; 131
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	2a f0       	brmi	.+10     	; 0x21a8 <__divsf3_pse+0x6c>
    219e:	9e 3f       	cpi	r25, 0xFE	; 254
    21a0:	51 05       	cpc	r21, r1
    21a2:	68 f0       	brcs	.+26     	; 0x21be <__divsf3_pse+0x82>
    21a4:	92 c0       	rjmp	.+292    	; 0x22ca <__fp_inf>
    21a6:	dc c0       	rjmp	.+440    	; 0x2360 <__fp_szero>
    21a8:	5f 3f       	cpi	r21, 0xFF	; 255
    21aa:	ec f3       	brlt	.-6      	; 0x21a6 <__divsf3_pse+0x6a>
    21ac:	98 3e       	cpi	r25, 0xE8	; 232
    21ae:	dc f3       	brlt	.-10     	; 0x21a6 <__divsf3_pse+0x6a>
    21b0:	86 95       	lsr	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	b7 95       	ror	r27
    21b8:	f7 95       	ror	r31
    21ba:	9f 5f       	subi	r25, 0xFF	; 255
    21bc:	c9 f7       	brne	.-14     	; 0x21b0 <__divsf3_pse+0x74>
    21be:	88 0f       	add	r24, r24
    21c0:	91 1d       	adc	r25, r1
    21c2:	96 95       	lsr	r25
    21c4:	87 95       	ror	r24
    21c6:	97 f9       	bld	r25, 7
    21c8:	08 95       	ret
    21ca:	e1 e0       	ldi	r30, 0x01	; 1
    21cc:	66 0f       	add	r22, r22
    21ce:	77 1f       	adc	r23, r23
    21d0:	88 1f       	adc	r24, r24
    21d2:	bb 1f       	adc	r27, r27
    21d4:	62 17       	cp	r22, r18
    21d6:	73 07       	cpc	r23, r19
    21d8:	84 07       	cpc	r24, r20
    21da:	ba 07       	cpc	r27, r26
    21dc:	20 f0       	brcs	.+8      	; 0x21e6 <__divsf3_pse+0xaa>
    21de:	62 1b       	sub	r22, r18
    21e0:	73 0b       	sbc	r23, r19
    21e2:	84 0b       	sbc	r24, r20
    21e4:	ba 0b       	sbc	r27, r26
    21e6:	ee 1f       	adc	r30, r30
    21e8:	88 f7       	brcc	.-30     	; 0x21cc <__divsf3_pse+0x90>
    21ea:	e0 95       	com	r30
    21ec:	08 95       	ret

000021ee <__fixsfsi>:
    21ee:	04 d0       	rcall	.+8      	; 0x21f8 <__fixunssfsi>
    21f0:	68 94       	set
    21f2:	b1 11       	cpse	r27, r1
    21f4:	b5 c0       	rjmp	.+362    	; 0x2360 <__fp_szero>
    21f6:	08 95       	ret

000021f8 <__fixunssfsi>:
    21f8:	98 d0       	rcall	.+304    	; 0x232a <__fp_splitA>
    21fa:	88 f0       	brcs	.+34     	; 0x221e <__fixunssfsi+0x26>
    21fc:	9f 57       	subi	r25, 0x7F	; 127
    21fe:	90 f0       	brcs	.+36     	; 0x2224 <__fixunssfsi+0x2c>
    2200:	b9 2f       	mov	r27, r25
    2202:	99 27       	eor	r25, r25
    2204:	b7 51       	subi	r27, 0x17	; 23
    2206:	a0 f0       	brcs	.+40     	; 0x2230 <__fixunssfsi+0x38>
    2208:	d1 f0       	breq	.+52     	; 0x223e <__fixunssfsi+0x46>
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	1a f0       	brmi	.+6      	; 0x221a <__fixunssfsi+0x22>
    2214:	ba 95       	dec	r27
    2216:	c9 f7       	brne	.-14     	; 0x220a <__fixunssfsi+0x12>
    2218:	12 c0       	rjmp	.+36     	; 0x223e <__fixunssfsi+0x46>
    221a:	b1 30       	cpi	r27, 0x01	; 1
    221c:	81 f0       	breq	.+32     	; 0x223e <__fixunssfsi+0x46>
    221e:	9f d0       	rcall	.+318    	; 0x235e <__fp_zero>
    2220:	b1 e0       	ldi	r27, 0x01	; 1
    2222:	08 95       	ret
    2224:	9c c0       	rjmp	.+312    	; 0x235e <__fp_zero>
    2226:	67 2f       	mov	r22, r23
    2228:	78 2f       	mov	r23, r24
    222a:	88 27       	eor	r24, r24
    222c:	b8 5f       	subi	r27, 0xF8	; 248
    222e:	39 f0       	breq	.+14     	; 0x223e <__fixunssfsi+0x46>
    2230:	b9 3f       	cpi	r27, 0xF9	; 249
    2232:	cc f3       	brlt	.-14     	; 0x2226 <__fixunssfsi+0x2e>
    2234:	86 95       	lsr	r24
    2236:	77 95       	ror	r23
    2238:	67 95       	ror	r22
    223a:	b3 95       	inc	r27
    223c:	d9 f7       	brne	.-10     	; 0x2234 <__fixunssfsi+0x3c>
    223e:	3e f4       	brtc	.+14     	; 0x224e <__fixunssfsi+0x56>
    2240:	90 95       	com	r25
    2242:	80 95       	com	r24
    2244:	70 95       	com	r23
    2246:	61 95       	neg	r22
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	8f 4f       	sbci	r24, 0xFF	; 255
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	08 95       	ret

00002250 <__floatunsisf>:
    2250:	e8 94       	clt
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <__floatsisf+0x12>

00002254 <__floatsisf>:
    2254:	97 fb       	bst	r25, 7
    2256:	3e f4       	brtc	.+14     	; 0x2266 <__floatsisf+0x12>
    2258:	90 95       	com	r25
    225a:	80 95       	com	r24
    225c:	70 95       	com	r23
    225e:	61 95       	neg	r22
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	8f 4f       	sbci	r24, 0xFF	; 255
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	99 23       	and	r25, r25
    2268:	a9 f0       	breq	.+42     	; 0x2294 <__floatsisf+0x40>
    226a:	f9 2f       	mov	r31, r25
    226c:	96 e9       	ldi	r25, 0x96	; 150
    226e:	bb 27       	eor	r27, r27
    2270:	93 95       	inc	r25
    2272:	f6 95       	lsr	r31
    2274:	87 95       	ror	r24
    2276:	77 95       	ror	r23
    2278:	67 95       	ror	r22
    227a:	b7 95       	ror	r27
    227c:	f1 11       	cpse	r31, r1
    227e:	f8 cf       	rjmp	.-16     	; 0x2270 <__floatsisf+0x1c>
    2280:	fa f4       	brpl	.+62     	; 0x22c0 <__floatsisf+0x6c>
    2282:	bb 0f       	add	r27, r27
    2284:	11 f4       	brne	.+4      	; 0x228a <__floatsisf+0x36>
    2286:	60 ff       	sbrs	r22, 0
    2288:	1b c0       	rjmp	.+54     	; 0x22c0 <__floatsisf+0x6c>
    228a:	6f 5f       	subi	r22, 0xFF	; 255
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
    228e:	8f 4f       	sbci	r24, 0xFF	; 255
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	16 c0       	rjmp	.+44     	; 0x22c0 <__floatsisf+0x6c>
    2294:	88 23       	and	r24, r24
    2296:	11 f0       	breq	.+4      	; 0x229c <__floatsisf+0x48>
    2298:	96 e9       	ldi	r25, 0x96	; 150
    229a:	11 c0       	rjmp	.+34     	; 0x22be <__floatsisf+0x6a>
    229c:	77 23       	and	r23, r23
    229e:	21 f0       	breq	.+8      	; 0x22a8 <__floatsisf+0x54>
    22a0:	9e e8       	ldi	r25, 0x8E	; 142
    22a2:	87 2f       	mov	r24, r23
    22a4:	76 2f       	mov	r23, r22
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <__floatsisf+0x5e>
    22a8:	66 23       	and	r22, r22
    22aa:	71 f0       	breq	.+28     	; 0x22c8 <__floatsisf+0x74>
    22ac:	96 e8       	ldi	r25, 0x86	; 134
    22ae:	86 2f       	mov	r24, r22
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	2a f0       	brmi	.+10     	; 0x22c0 <__floatsisf+0x6c>
    22b6:	9a 95       	dec	r25
    22b8:	66 0f       	add	r22, r22
    22ba:	77 1f       	adc	r23, r23
    22bc:	88 1f       	adc	r24, r24
    22be:	da f7       	brpl	.-10     	; 0x22b6 <__floatsisf+0x62>
    22c0:	88 0f       	add	r24, r24
    22c2:	96 95       	lsr	r25
    22c4:	87 95       	ror	r24
    22c6:	97 f9       	bld	r25, 7
    22c8:	08 95       	ret

000022ca <__fp_inf>:
    22ca:	97 f9       	bld	r25, 7
    22cc:	9f 67       	ori	r25, 0x7F	; 127
    22ce:	80 e8       	ldi	r24, 0x80	; 128
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	08 95       	ret

000022d6 <__fp_nan>:
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	80 ec       	ldi	r24, 0xC0	; 192
    22da:	08 95       	ret

000022dc <__fp_pscA>:
    22dc:	00 24       	eor	r0, r0
    22de:	0a 94       	dec	r0
    22e0:	16 16       	cp	r1, r22
    22e2:	17 06       	cpc	r1, r23
    22e4:	18 06       	cpc	r1, r24
    22e6:	09 06       	cpc	r0, r25
    22e8:	08 95       	ret

000022ea <__fp_pscB>:
    22ea:	00 24       	eor	r0, r0
    22ec:	0a 94       	dec	r0
    22ee:	12 16       	cp	r1, r18
    22f0:	13 06       	cpc	r1, r19
    22f2:	14 06       	cpc	r1, r20
    22f4:	05 06       	cpc	r0, r21
    22f6:	08 95       	ret

000022f8 <__fp_round>:
    22f8:	09 2e       	mov	r0, r25
    22fa:	03 94       	inc	r0
    22fc:	00 0c       	add	r0, r0
    22fe:	11 f4       	brne	.+4      	; 0x2304 <__fp_round+0xc>
    2300:	88 23       	and	r24, r24
    2302:	52 f0       	brmi	.+20     	; 0x2318 <__fp_round+0x20>
    2304:	bb 0f       	add	r27, r27
    2306:	40 f4       	brcc	.+16     	; 0x2318 <__fp_round+0x20>
    2308:	bf 2b       	or	r27, r31
    230a:	11 f4       	brne	.+4      	; 0x2310 <__fp_round+0x18>
    230c:	60 ff       	sbrs	r22, 0
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <__fp_round+0x20>
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	8f 4f       	sbci	r24, 0xFF	; 255
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	08 95       	ret

0000231a <__fp_split3>:
    231a:	57 fd       	sbrc	r21, 7
    231c:	90 58       	subi	r25, 0x80	; 128
    231e:	44 0f       	add	r20, r20
    2320:	55 1f       	adc	r21, r21
    2322:	59 f0       	breq	.+22     	; 0x233a <__fp_splitA+0x10>
    2324:	5f 3f       	cpi	r21, 0xFF	; 255
    2326:	71 f0       	breq	.+28     	; 0x2344 <__fp_splitA+0x1a>
    2328:	47 95       	ror	r20

0000232a <__fp_splitA>:
    232a:	88 0f       	add	r24, r24
    232c:	97 fb       	bst	r25, 7
    232e:	99 1f       	adc	r25, r25
    2330:	61 f0       	breq	.+24     	; 0x234a <__fp_splitA+0x20>
    2332:	9f 3f       	cpi	r25, 0xFF	; 255
    2334:	79 f0       	breq	.+30     	; 0x2354 <__fp_splitA+0x2a>
    2336:	87 95       	ror	r24
    2338:	08 95       	ret
    233a:	12 16       	cp	r1, r18
    233c:	13 06       	cpc	r1, r19
    233e:	14 06       	cpc	r1, r20
    2340:	55 1f       	adc	r21, r21
    2342:	f2 cf       	rjmp	.-28     	; 0x2328 <__fp_split3+0xe>
    2344:	46 95       	lsr	r20
    2346:	f1 df       	rcall	.-30     	; 0x232a <__fp_splitA>
    2348:	08 c0       	rjmp	.+16     	; 0x235a <__fp_splitA+0x30>
    234a:	16 16       	cp	r1, r22
    234c:	17 06       	cpc	r1, r23
    234e:	18 06       	cpc	r1, r24
    2350:	99 1f       	adc	r25, r25
    2352:	f1 cf       	rjmp	.-30     	; 0x2336 <__fp_splitA+0xc>
    2354:	86 95       	lsr	r24
    2356:	71 05       	cpc	r23, r1
    2358:	61 05       	cpc	r22, r1
    235a:	08 94       	sec
    235c:	08 95       	ret

0000235e <__fp_zero>:
    235e:	e8 94       	clt

00002360 <__fp_szero>:
    2360:	bb 27       	eor	r27, r27
    2362:	66 27       	eor	r22, r22
    2364:	77 27       	eor	r23, r23
    2366:	cb 01       	movw	r24, r22
    2368:	97 f9       	bld	r25, 7
    236a:	08 95       	ret

0000236c <__mulsf3>:
    236c:	0b d0       	rcall	.+22     	; 0x2384 <__mulsf3x>
    236e:	c4 cf       	rjmp	.-120    	; 0x22f8 <__fp_round>
    2370:	b5 df       	rcall	.-150    	; 0x22dc <__fp_pscA>
    2372:	28 f0       	brcs	.+10     	; 0x237e <__mulsf3+0x12>
    2374:	ba df       	rcall	.-140    	; 0x22ea <__fp_pscB>
    2376:	18 f0       	brcs	.+6      	; 0x237e <__mulsf3+0x12>
    2378:	95 23       	and	r25, r21
    237a:	09 f0       	breq	.+2      	; 0x237e <__mulsf3+0x12>
    237c:	a6 cf       	rjmp	.-180    	; 0x22ca <__fp_inf>
    237e:	ab cf       	rjmp	.-170    	; 0x22d6 <__fp_nan>
    2380:	11 24       	eor	r1, r1
    2382:	ee cf       	rjmp	.-36     	; 0x2360 <__fp_szero>

00002384 <__mulsf3x>:
    2384:	ca df       	rcall	.-108    	; 0x231a <__fp_split3>
    2386:	a0 f3       	brcs	.-24     	; 0x2370 <__mulsf3+0x4>

00002388 <__mulsf3_pse>:
    2388:	95 9f       	mul	r25, r21
    238a:	d1 f3       	breq	.-12     	; 0x2380 <__mulsf3+0x14>
    238c:	95 0f       	add	r25, r21
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	55 1f       	adc	r21, r21
    2392:	62 9f       	mul	r22, r18
    2394:	f0 01       	movw	r30, r0
    2396:	72 9f       	mul	r23, r18
    2398:	bb 27       	eor	r27, r27
    239a:	f0 0d       	add	r31, r0
    239c:	b1 1d       	adc	r27, r1
    239e:	63 9f       	mul	r22, r19
    23a0:	aa 27       	eor	r26, r26
    23a2:	f0 0d       	add	r31, r0
    23a4:	b1 1d       	adc	r27, r1
    23a6:	aa 1f       	adc	r26, r26
    23a8:	64 9f       	mul	r22, r20
    23aa:	66 27       	eor	r22, r22
    23ac:	b0 0d       	add	r27, r0
    23ae:	a1 1d       	adc	r26, r1
    23b0:	66 1f       	adc	r22, r22
    23b2:	82 9f       	mul	r24, r18
    23b4:	22 27       	eor	r18, r18
    23b6:	b0 0d       	add	r27, r0
    23b8:	a1 1d       	adc	r26, r1
    23ba:	62 1f       	adc	r22, r18
    23bc:	73 9f       	mul	r23, r19
    23be:	b0 0d       	add	r27, r0
    23c0:	a1 1d       	adc	r26, r1
    23c2:	62 1f       	adc	r22, r18
    23c4:	83 9f       	mul	r24, r19
    23c6:	a0 0d       	add	r26, r0
    23c8:	61 1d       	adc	r22, r1
    23ca:	22 1f       	adc	r18, r18
    23cc:	74 9f       	mul	r23, r20
    23ce:	33 27       	eor	r19, r19
    23d0:	a0 0d       	add	r26, r0
    23d2:	61 1d       	adc	r22, r1
    23d4:	23 1f       	adc	r18, r19
    23d6:	84 9f       	mul	r24, r20
    23d8:	60 0d       	add	r22, r0
    23da:	21 1d       	adc	r18, r1
    23dc:	82 2f       	mov	r24, r18
    23de:	76 2f       	mov	r23, r22
    23e0:	6a 2f       	mov	r22, r26
    23e2:	11 24       	eor	r1, r1
    23e4:	9f 57       	subi	r25, 0x7F	; 127
    23e6:	50 40       	sbci	r21, 0x00	; 0
    23e8:	8a f0       	brmi	.+34     	; 0x240c <__mulsf3_pse+0x84>
    23ea:	e1 f0       	breq	.+56     	; 0x2424 <__mulsf3_pse+0x9c>
    23ec:	88 23       	and	r24, r24
    23ee:	4a f0       	brmi	.+18     	; 0x2402 <__mulsf3_pse+0x7a>
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	bb 1f       	adc	r27, r27
    23f6:	66 1f       	adc	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	91 50       	subi	r25, 0x01	; 1
    23fe:	50 40       	sbci	r21, 0x00	; 0
    2400:	a9 f7       	brne	.-22     	; 0x23ec <__mulsf3_pse+0x64>
    2402:	9e 3f       	cpi	r25, 0xFE	; 254
    2404:	51 05       	cpc	r21, r1
    2406:	70 f0       	brcs	.+28     	; 0x2424 <__mulsf3_pse+0x9c>
    2408:	60 cf       	rjmp	.-320    	; 0x22ca <__fp_inf>
    240a:	aa cf       	rjmp	.-172    	; 0x2360 <__fp_szero>
    240c:	5f 3f       	cpi	r21, 0xFF	; 255
    240e:	ec f3       	brlt	.-6      	; 0x240a <__mulsf3_pse+0x82>
    2410:	98 3e       	cpi	r25, 0xE8	; 232
    2412:	dc f3       	brlt	.-10     	; 0x240a <__mulsf3_pse+0x82>
    2414:	86 95       	lsr	r24
    2416:	77 95       	ror	r23
    2418:	67 95       	ror	r22
    241a:	b7 95       	ror	r27
    241c:	f7 95       	ror	r31
    241e:	e7 95       	ror	r30
    2420:	9f 5f       	subi	r25, 0xFF	; 255
    2422:	c1 f7       	brne	.-16     	; 0x2414 <__mulsf3_pse+0x8c>
    2424:	fe 2b       	or	r31, r30
    2426:	88 0f       	add	r24, r24
    2428:	91 1d       	adc	r25, r1
    242a:	96 95       	lsr	r25
    242c:	87 95       	ror	r24
    242e:	97 f9       	bld	r25, 7
    2430:	08 95       	ret

00002432 <__divmodhi4>:
    2432:	97 fb       	bst	r25, 7
    2434:	07 2e       	mov	r0, r23
    2436:	16 f4       	brtc	.+4      	; 0x243c <__divmodhi4+0xa>
    2438:	00 94       	com	r0
    243a:	06 d0       	rcall	.+12     	; 0x2448 <__divmodhi4_neg1>
    243c:	77 fd       	sbrc	r23, 7
    243e:	08 d0       	rcall	.+16     	; 0x2450 <__divmodhi4_neg2>
    2440:	11 d0       	rcall	.+34     	; 0x2464 <__udivmodhi4>
    2442:	07 fc       	sbrc	r0, 7
    2444:	05 d0       	rcall	.+10     	; 0x2450 <__divmodhi4_neg2>
    2446:	3e f4       	brtc	.+14     	; 0x2456 <__divmodhi4_exit>

00002448 <__divmodhi4_neg1>:
    2448:	90 95       	com	r25
    244a:	81 95       	neg	r24
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	08 95       	ret

00002450 <__divmodhi4_neg2>:
    2450:	70 95       	com	r23
    2452:	61 95       	neg	r22
    2454:	7f 4f       	sbci	r23, 0xFF	; 255

00002456 <__divmodhi4_exit>:
    2456:	08 95       	ret

00002458 <__mulshisi3>:
    2458:	b7 ff       	sbrs	r27, 7
    245a:	18 c0       	rjmp	.+48     	; 0x248c <__muluhisi3>

0000245c <__mulohisi3>:
    245c:	17 d0       	rcall	.+46     	; 0x248c <__muluhisi3>
    245e:	82 1b       	sub	r24, r18
    2460:	93 0b       	sbc	r25, r19
    2462:	08 95       	ret

00002464 <__udivmodhi4>:
    2464:	aa 1b       	sub	r26, r26
    2466:	bb 1b       	sub	r27, r27
    2468:	51 e1       	ldi	r21, 0x11	; 17
    246a:	07 c0       	rjmp	.+14     	; 0x247a <__udivmodhi4_ep>

0000246c <__udivmodhi4_loop>:
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	a6 17       	cp	r26, r22
    2472:	b7 07       	cpc	r27, r23
    2474:	10 f0       	brcs	.+4      	; 0x247a <__udivmodhi4_ep>
    2476:	a6 1b       	sub	r26, r22
    2478:	b7 0b       	sbc	r27, r23

0000247a <__udivmodhi4_ep>:
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	5a 95       	dec	r21
    2480:	a9 f7       	brne	.-22     	; 0x246c <__udivmodhi4_loop>
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	08 95       	ret

0000248c <__muluhisi3>:
    248c:	09 d0       	rcall	.+18     	; 0x24a0 <__umulhisi3>
    248e:	a5 9f       	mul	r26, r21
    2490:	90 0d       	add	r25, r0
    2492:	b4 9f       	mul	r27, r20
    2494:	90 0d       	add	r25, r0
    2496:	a4 9f       	mul	r26, r20
    2498:	80 0d       	add	r24, r0
    249a:	91 1d       	adc	r25, r1
    249c:	11 24       	eor	r1, r1
    249e:	08 95       	ret

000024a0 <__umulhisi3>:
    24a0:	a2 9f       	mul	r26, r18
    24a2:	b0 01       	movw	r22, r0
    24a4:	b3 9f       	mul	r27, r19
    24a6:	c0 01       	movw	r24, r0
    24a8:	a3 9f       	mul	r26, r19
    24aa:	70 0d       	add	r23, r0
    24ac:	81 1d       	adc	r24, r1
    24ae:	11 24       	eor	r1, r1
    24b0:	91 1d       	adc	r25, r1
    24b2:	b2 9f       	mul	r27, r18
    24b4:	70 0d       	add	r23, r0
    24b6:	81 1d       	adc	r24, r1
    24b8:	11 24       	eor	r1, r1
    24ba:	91 1d       	adc	r25, r1
    24bc:	08 95       	ret

000024be <strcpy>:
    24be:	fb 01       	movw	r30, r22
    24c0:	dc 01       	movw	r26, r24
    24c2:	01 90       	ld	r0, Z+
    24c4:	0d 92       	st	X+, r0
    24c6:	00 20       	and	r0, r0
    24c8:	e1 f7       	brne	.-8      	; 0x24c2 <strcpy+0x4>
    24ca:	08 95       	ret

000024cc <_exit>:
    24cc:	f8 94       	cli

000024ce <__stop_program>:
    24ce:	ff cf       	rjmp	.-2      	; 0x24ce <__stop_program>
