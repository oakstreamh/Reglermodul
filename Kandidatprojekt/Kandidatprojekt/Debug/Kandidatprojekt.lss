
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001c84  00001d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  008001da  008001da  00001df2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027cd  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3a  00000000  00000000  0000478f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002051  00000000  00000000  000051c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000544  00000000  00000000  0000721c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010c57  00000000  00000000  00007760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014ee  00000000  00000000  000183b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000198a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004397  00000000  00000000  00019a1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_18>
      4c:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_19>
      50:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 32       	cpi	r26, 0x2D	; 45
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a8 09 	call	0x1350	; 0x1350 <main>
      c6:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
* Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
* Output: speed, (PWM counter)
*/
void FLC_steering(int c, int v)

{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c0 5a       	subi	r28, 0xA0	; 160
      f6:	d1 40       	sbci	r29, 0x01	; 1
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	6c 01       	movw	r12, r24
     104:	2b 01       	movw	r4, r22
	
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	e0 e0       	ldi	r30, 0x00	; 0
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	de 01       	movw	r26, r28
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	01 90       	ld	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	8a 95       	dec	r24
     116:	e1 f7       	brne	.-8      	; 0x110 <FLC_steering+0x44>
	
	struct mf_type inNegative;
	MATLAB_MF(&inNegative, "inNegative", 44, 45, 60, 110);
     118:	3e 01       	movw	r6, r28
     11a:	11 e1       	ldi	r17, 0x11	; 17
     11c:	61 0e       	add	r6, r17
     11e:	71 1c       	adc	r7, r1
     120:	0f 2e       	mov	r0, r31
     122:	fe e6       	ldi	r31, 0x6E	; 110
     124:	ef 2e       	mov	r14, r31
     126:	f1 2c       	mov	r15, r1
     128:	f0 2d       	mov	r31, r0
     12a:	0c e3       	ldi	r16, 0x3C	; 60
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	2d e2       	ldi	r18, 0x2D	; 45
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	4c e2       	ldi	r20, 0x2C	; 44
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	68 e0       	ldi	r22, 0x08	; 8
     138:	71 e0       	ldi	r23, 0x01	; 1
     13a:	c3 01       	movw	r24, r6
     13c:	0e 94 0d 09 	call	0x121a	; 0x121a <MATLAB_MF>
	struct mf_type inZero;
	MATLAB_MF(&inZero, "inZero", 75, 125, 125, 175);
     140:	4e 01       	movw	r8, r28
     142:	27 e2       	ldi	r18, 0x27	; 39
     144:	82 0e       	add	r8, r18
     146:	91 1c       	adc	r9, r1
     148:	0f 2e       	mov	r0, r31
     14a:	ff ea       	ldi	r31, 0xAF	; 175
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 2c       	mov	r15, r1
     150:	f0 2d       	mov	r31, r0
     152:	0d e7       	ldi	r16, 0x7D	; 125
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	2d e7       	ldi	r18, 0x7D	; 125
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	4b e4       	ldi	r20, 0x4B	; 75
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	63 e1       	ldi	r22, 0x13	; 19
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	c4 01       	movw	r24, r8
     164:	0e 94 0d 09 	call	0x121a	; 0x121a <MATLAB_MF>
	struct mf_type inPositive;
	MATLAB_MF(&inPositive, "inPositive", 140, 190, 205, 206);
     168:	5e 01       	movw	r10, r28
     16a:	4d e3       	ldi	r20, 0x3D	; 61
     16c:	a4 0e       	add	r10, r20
     16e:	b1 1c       	adc	r11, r1
     170:	0f 2e       	mov	r0, r31
     172:	fe ec       	ldi	r31, 0xCE	; 206
     174:	ef 2e       	mov	r14, r31
     176:	f1 2c       	mov	r15, r1
     178:	f0 2d       	mov	r31, r0
     17a:	0d ec       	ldi	r16, 0xCD	; 205
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	2e eb       	ldi	r18, 0xBE	; 190
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4c e8       	ldi	r20, 0x8C	; 140
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	6a e1       	ldi	r22, 0x1A	; 26
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	c5 01       	movw	r24, r10
     18c:	0e 94 0d 09 	call	0x121a	; 0x121a <MATLAB_MF>
	
	delta_C.membership_functions = &inNegative;
     190:	7e 86       	std	Y+14, r7	; 0x0e
     192:	6d 86       	std	Y+13, r6	; 0x0d
	inNegative.next = &inZero;
     194:	9e a2       	std	Y+38, r9	; 0x26
     196:	8d a2       	std	Y+37, r8	; 0x25
	inZero.next = &inPositive;
     198:	bc ae       	std	Y+60, r11	; 0x3c
     19a:	ab ae       	std	Y+59, r10	; 0x3b
	inPositive.next = NULL;
     19c:	63 96       	adiw	r28, 0x13	; 19
     19e:	1f ae       	std	Y+63, r1	; 0x3f
     1a0:	1e ae       	std	Y+62, r1	; 0x3e
     1a2:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     1a4:	dd 20       	and	r13, r13
     1a6:	1c f4       	brge	.+6      	; 0x1ae <FLC_steering+0xe2>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     1a8:	1c 86       	std	Y+12, r1	; 0x0c
     1aa:	1b 86       	std	Y+11, r1	; 0x0b
     1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <FLC_steering+0xf8>
	}
	else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     1ae:	6e ec       	ldi	r22, 0xCE	; 206
     1b0:	c6 16       	cp	r12, r22
     1b2:	d1 04       	cpc	r13, r1
     1b4:	2c f0       	brlt	.+10     	; 0x1c0 <FLC_steering+0xf4>
	{
		delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     1b6:	8d ec       	ldi	r24, 0xCD	; 205
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	9c 87       	std	Y+12, r25	; 0x0c
     1bc:	8b 87       	std	Y+11, r24	; 0x0b
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <FLC_steering+0xf8>
	}
	else
	{
		delta_C.value = c;
     1c0:	dc 86       	std	Y+12, r13	; 0x0c
     1c2:	cb 86       	std	Y+11, r12	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     1c4:	88 e0       	ldi	r24, 0x08	; 8
     1c6:	e5 e2       	ldi	r30, 0x25	; 37
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	de 01       	movw	r26, r28
     1cc:	ad 5a       	subi	r26, 0xAD	; 173
     1ce:	bf 4f       	sbci	r27, 0xFF	; 255
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	8a 95       	dec	r24
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <FLC_steering+0x104>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", -1, 0, 10, 30);
     1d8:	4e 01       	movw	r8, r28
     1da:	83 e6       	ldi	r24, 0x63	; 99
     1dc:	88 0e       	add	r8, r24
     1de:	91 1c       	adc	r9, r1
     1e0:	0f 2e       	mov	r0, r31
     1e2:	fe e1       	ldi	r31, 0x1E	; 30
     1e4:	ef 2e       	mov	r14, r31
     1e6:	f1 2c       	mov	r15, r1
     1e8:	f0 2d       	mov	r31, r0
     1ea:	0a e0       	ldi	r16, 0x0A	; 10
     1ec:	10 e0       	ldi	r17, 0x00	; 0
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	4f ef       	ldi	r20, 0xFF	; 255
     1f4:	5f ef       	ldi	r21, 0xFF	; 255
     1f6:	6d e2       	ldi	r22, 0x2D	; 45
     1f8:	71 e0       	ldi	r23, 0x01	; 1
     1fa:	c4 01       	movw	r24, r8
     1fc:	0e 94 0d 09 	call	0x121a	; 0x121a <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 20 , 40, 40, 60);
     200:	5e 01       	movw	r10, r28
     202:	a9 e7       	ldi	r26, 0x79	; 121
     204:	aa 0e       	add	r10, r26
     206:	b1 1c       	adc	r11, r1
     208:	0f 2e       	mov	r0, r31
     20a:	fc e3       	ldi	r31, 0x3C	; 60
     20c:	ef 2e       	mov	r14, r31
     20e:	f1 2c       	mov	r15, r1
     210:	f0 2d       	mov	r31, r0
     212:	08 e2       	ldi	r16, 0x28	; 40
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	28 e2       	ldi	r18, 0x28	; 40
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	44 e1       	ldi	r20, 0x14	; 20
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	65 e3       	ldi	r22, 0x35	; 53
     220:	71 e0       	ldi	r23, 0x01	; 1
     222:	c5 01       	movw	r24, r10
     224:	fa d7       	rcall	.+4084   	; 0x121a <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 50, 70, 80, 81);
     226:	6e 01       	movw	r12, r28
     228:	bf e8       	ldi	r27, 0x8F	; 143
     22a:	cb 0e       	add	r12, r27
     22c:	d1 1c       	adc	r13, r1
     22e:	0f 2e       	mov	r0, r31
     230:	f1 e5       	ldi	r31, 0x51	; 81
     232:	ef 2e       	mov	r14, r31
     234:	f1 2c       	mov	r15, r1
     236:	f0 2d       	mov	r31, r0
     238:	00 e5       	ldi	r16, 0x50	; 80
     23a:	10 e0       	ldi	r17, 0x00	; 0
     23c:	26 e4       	ldi	r18, 0x46	; 70
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	42 e3       	ldi	r20, 0x32	; 50
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	6c e3       	ldi	r22, 0x3C	; 60
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	c6 01       	movw	r24, r12
     24a:	e7 d7       	rcall	.+4046   	; 0x121a <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     24c:	a1 96       	adiw	r28, 0x21	; 33
     24e:	9f ae       	std	Y+63, r9	; 0x3f
     250:	8e ae       	std	Y+62, r8	; 0x3e
     252:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     254:	f4 01       	movw	r30, r8
     256:	b5 8a       	std	Z+21, r11	; 0x15
     258:	a4 8a       	std	Z+20, r10	; 0x14
	inNyll.next = &inPlus;
     25a:	d5 01       	movw	r26, r10
     25c:	55 96       	adiw	r26, 0x15	; 21
     25e:	dc 92       	st	X, r13
     260:	ce 92       	st	-X, r12
     262:	54 97       	sbiw	r26, 0x14	; 20
	inPlus.next = NULL;
     264:	f6 01       	movw	r30, r12
     266:	15 8a       	std	Z+21, r1	; 0x15
     268:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
     26a:	55 20       	and	r5, r5
     26c:	2c f4       	brge	.+10     	; 0x278 <FLC_steering+0x1ac>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     26e:	6f 96       	adiw	r28, 0x1f	; 31
     270:	1f ae       	std	Y+63, r1	; 0x3f
     272:	1e ae       	std	Y+62, r1	; 0x3e
     274:	6f 97       	sbiw	r28, 0x1f	; 31
     276:	0f c0       	rjmp	.+30     	; 0x296 <FLC_steering+0x1ca>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     278:	f1 e5       	ldi	r31, 0x51	; 81
     27a:	4f 16       	cp	r4, r31
     27c:	51 04       	cpc	r5, r1
     27e:	3c f0       	brlt	.+14     	; 0x28e <FLC_steering+0x1c2>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
     280:	80 e5       	ldi	r24, 0x50	; 80
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	6f 96       	adiw	r28, 0x1f	; 31
     286:	9f af       	std	Y+63, r25	; 0x3f
     288:	8e af       	std	Y+62, r24	; 0x3e
     28a:	6f 97       	sbiw	r28, 0x1f	; 31
     28c:	04 c0       	rjmp	.+8      	; 0x296 <FLC_steering+0x1ca>
	}
	else
	{
		delta_V.value = v;
     28e:	6f 96       	adiw	r28, 0x1f	; 31
     290:	5f ae       	std	Y+63, r5	; 0x3f
     292:	4e ae       	std	Y+62, r4	; 0x3e
     294:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     296:	1e 01       	movw	r2, r28
     298:	15 ea       	ldi	r17, 0xA5	; 165
     29a:	21 0e       	add	r2, r17
     29c:	31 1c       	adc	r3, r1
     29e:	89 e0       	ldi	r24, 0x09	; 9
     2a0:	e3 e4       	ldi	r30, 0x43	; 67
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	d1 01       	movw	r26, r2
     2a6:	01 90       	ld	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	8a 95       	dec	r24
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <FLC_steering+0x1da>
	
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2259, 2260, 2260, 2460);
     2ae:	5e 01       	movw	r10, r28
     2b0:	25 eb       	ldi	r18, 0xB5	; 181
     2b2:	a2 0e       	add	r10, r18
     2b4:	b1 1c       	adc	r11, r1
     2b6:	0f 2e       	mov	r0, r31
     2b8:	fc e9       	ldi	r31, 0x9C	; 156
     2ba:	ef 2e       	mov	r14, r31
     2bc:	f9 e0       	ldi	r31, 0x09	; 9
     2be:	ff 2e       	mov	r15, r31
     2c0:	f0 2d       	mov	r31, r0
     2c2:	04 ed       	ldi	r16, 0xD4	; 212
     2c4:	18 e0       	ldi	r17, 0x08	; 8
     2c6:	24 ed       	ldi	r18, 0xD4	; 212
     2c8:	38 e0       	ldi	r19, 0x08	; 8
     2ca:	43 ed       	ldi	r20, 0xD3	; 211
     2cc:	58 e0       	ldi	r21, 0x08	; 8
     2ce:	6c e4       	ldi	r22, 0x4C	; 76
     2d0:	71 e0       	ldi	r23, 0x01	; 1
     2d2:	c5 01       	movw	r24, r10
     2d4:	a2 d7       	rcall	.+3908   	; 0x121a <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2260, 2460, 2460, 2660);
     2d6:	4e 01       	movw	r8, r28
     2d8:	4b ec       	ldi	r20, 0xCB	; 203
     2da:	84 0e       	add	r8, r20
     2dc:	91 1c       	adc	r9, r1
     2de:	0f 2e       	mov	r0, r31
     2e0:	f4 e6       	ldi	r31, 0x64	; 100
     2e2:	ef 2e       	mov	r14, r31
     2e4:	fa e0       	ldi	r31, 0x0A	; 10
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 2d       	mov	r31, r0
     2ea:	0c e9       	ldi	r16, 0x9C	; 156
     2ec:	19 e0       	ldi	r17, 0x09	; 9
     2ee:	2c e9       	ldi	r18, 0x9C	; 156
     2f0:	39 e0       	ldi	r19, 0x09	; 9
     2f2:	44 ed       	ldi	r20, 0xD4	; 212
     2f4:	58 e0       	ldi	r21, 0x08	; 8
     2f6:	67 e5       	ldi	r22, 0x57	; 87
     2f8:	71 e0       	ldi	r23, 0x01	; 1
     2fa:	c4 01       	movw	r24, r8
     2fc:	8e d7       	rcall	.+3868   	; 0x121a <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2460, 2660, 2660, 2860);
     2fe:	2e 01       	movw	r4, r28
     300:	61 ee       	ldi	r22, 0xE1	; 225
     302:	46 0e       	add	r4, r22
     304:	51 1c       	adc	r5, r1
     306:	0f 2e       	mov	r0, r31
     308:	fc e2       	ldi	r31, 0x2C	; 44
     30a:	ef 2e       	mov	r14, r31
     30c:	fb e0       	ldi	r31, 0x0B	; 11
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	04 e6       	ldi	r16, 0x64	; 100
     314:	1a e0       	ldi	r17, 0x0A	; 10
     316:	24 e6       	ldi	r18, 0x64	; 100
     318:	3a e0       	ldi	r19, 0x0A	; 10
     31a:	4c e9       	ldi	r20, 0x9C	; 156
     31c:	59 e0       	ldi	r21, 0x09	; 9
     31e:	6d e5       	ldi	r22, 0x5D	; 93
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	c2 01       	movw	r24, r4
     324:	7a d7       	rcall	.+3828   	; 0x121a <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2660, 2860, 2860, 3060);
     326:	3e 01       	movw	r6, r28
     328:	87 ef       	ldi	r24, 0xF7	; 247
     32a:	68 0e       	add	r6, r24
     32c:	71 1c       	adc	r7, r1
     32e:	0f 2e       	mov	r0, r31
     330:	f4 ef       	ldi	r31, 0xF4	; 244
     332:	ef 2e       	mov	r14, r31
     334:	fb e0       	ldi	r31, 0x0B	; 11
     336:	ff 2e       	mov	r15, r31
     338:	f0 2d       	mov	r31, r0
     33a:	0c e2       	ldi	r16, 0x2C	; 44
     33c:	1b e0       	ldi	r17, 0x0B	; 11
     33e:	2c e2       	ldi	r18, 0x2C	; 44
     340:	3b e0       	ldi	r19, 0x0B	; 11
     342:	44 e6       	ldi	r20, 0x64	; 100
     344:	5a e0       	ldi	r21, 0x0A	; 10
     346:	66 e6       	ldi	r22, 0x66	; 102
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	c3 01       	movw	r24, r6
     34c:	66 d7       	rcall	.+3788   	; 0x121a <MATLAB_MF>
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2860, 3060, 3060, 3061);
     34e:	6e 01       	movw	r12, r28
     350:	a3 ef       	ldi	r26, 0xF3	; 243
     352:	ca 1a       	sub	r12, r26
     354:	ae ef       	ldi	r26, 0xFE	; 254
     356:	da 0a       	sbc	r13, r26
     358:	0f 2e       	mov	r0, r31
     35a:	f5 ef       	ldi	r31, 0xF5	; 245
     35c:	ef 2e       	mov	r14, r31
     35e:	fb e0       	ldi	r31, 0x0B	; 11
     360:	ff 2e       	mov	r15, r31
     362:	f0 2d       	mov	r31, r0
     364:	04 ef       	ldi	r16, 0xF4	; 244
     366:	1b e0       	ldi	r17, 0x0B	; 11
     368:	24 ef       	ldi	r18, 0xF4	; 244
     36a:	3b e0       	ldi	r19, 0x0B	; 11
     36c:	4c e2       	ldi	r20, 0x2C	; 44
     36e:	5b e0       	ldi	r21, 0x0B	; 11
     370:	6b e6       	ldi	r22, 0x6B	; 107
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	c6 01       	movw	r24, r12
     376:	51 d7       	rcall	.+3746   	; 0x121a <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     378:	f1 01       	movw	r30, r2
     37a:	b5 86       	std	Z+13, r11	; 0x0d
     37c:	a4 86       	std	Z+12, r10	; 0x0c
	sharpRight.next = &right;
     37e:	d5 01       	movw	r26, r10
     380:	55 96       	adiw	r26, 0x15	; 21
     382:	9c 92       	st	X, r9
     384:	8e 92       	st	-X, r8
     386:	54 97       	sbiw	r26, 0x14	; 20
	right.next = &straight;
     388:	f4 01       	movw	r30, r8
     38a:	55 8a       	std	Z+21, r5	; 0x15
     38c:	44 8a       	std	Z+20, r4	; 0x14
	straight.next = &left;
     38e:	d2 01       	movw	r26, r4
     390:	55 96       	adiw	r26, 0x15	; 21
     392:	7c 92       	st	X, r7
     394:	6e 92       	st	-X, r6
     396:	54 97       	sbiw	r26, 0x14	; 20
	left.next = &sharpLeft;
     398:	f3 01       	movw	r30, r6
     39a:	d5 8a       	std	Z+21, r13	; 0x15
     39c:	c4 8a       	std	Z+20, r12	; 0x14
	sharpLeft.next = NULL;
     39e:	d6 01       	movw	r26, r12
     3a0:	55 96       	adiw	r26, 0x15	; 21
     3a2:	1c 92       	st	X, r1
     3a4:	1e 92       	st	-X, r1
     3a6:	54 97       	sbiw	r26, 0x14	; 20
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 fa 02 	sts	0x02FA, r25
     3b0:	80 93 f9 02 	sts	0x02F9, r24
	delta_C.next = &delta_V;
     3b4:	e4 5a       	subi	r30, 0xA4	; 164
     3b6:	f1 09       	sbc	r31, r1
     3b8:	f8 8b       	std	Y+16, r31	; 0x10
     3ba:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     3bc:	17 86       	std	Z+15, r1	; 0x0f
     3be:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     3c0:	30 92 f8 02 	sts	0x02F8, r3
     3c4:	20 92 f7 02 	sts	0x02F7, r2
	steering.next = NULL;
     3c8:	f1 01       	movw	r30, r2
     3ca:	17 86       	std	Z+15, r1	; 0x0f
     3cc:	16 86       	std	Z+14, r1	; 0x0e
	
	
	
	//RULE 9 "if C is zero AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     3ce:	be 01       	movw	r22, r28
     3d0:	6d 5d       	subi	r22, 0xDD	; 221
     3d2:	7e 4f       	sbci	r23, 0xFE	; 254
     3d4:	fa e0       	ldi	r31, 0x0A	; 10
     3d6:	6f 0e       	add	r6, r31
     3d8:	71 1c       	adc	r7, r1
     3da:	db 01       	movw	r26, r22
     3dc:	11 96       	adiw	r26, 0x01	; 1
     3de:	7c 92       	st	X, r7
     3e0:	6e 92       	st	-X, r6
	then9.next = NULL;
     3e2:	13 96       	adiw	r26, 0x03	; 3
     3e4:	1c 92       	st	X, r1
     3e6:	1e 92       	st	-X, r1
     3e8:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	ae 01       	movw	r20, r28
     3ee:	47 56       	subi	r20, 0x67	; 103
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	11 96       	adiw	r26, 0x01	; 1
     3f4:	5c 93       	st	X, r21
     3f6:	4e 93       	st	-X, r20
	if92.next = NULL;
     3f8:	13 96       	adiw	r26, 0x03	; 3
     3fa:	1c 92       	st	X, r1
     3fc:	1e 92       	st	-X, r1
     3fe:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if91;
	if91.value = &inZero.value;
     400:	9e 01       	movw	r18, r28
     402:	25 5d       	subi	r18, 0xD5	; 213
     404:	3e 4f       	sbci	r19, 0xFE	; 254
     406:	c0 96       	adiw	r24, 0x30	; 48
     408:	f9 01       	movw	r30, r18
     40a:	91 83       	std	Z+1, r25	; 0x01
     40c:	80 83       	st	Z, r24
	if91.next = &if92;
     40e:	b3 83       	std	Z+3, r27	; 0x03
     410:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     412:	18 96       	adiw	r26, 0x08	; 8
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	3c 93       	st	X, r19
     418:	2e 93       	st	-X, r18
	rule9.then_side = &then9;
     41a:	13 96       	adiw	r26, 0x03	; 3
     41c:	7c 93       	st	X, r23
     41e:	6e 93       	st	-X, r22
     420:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = NULL;
     422:	15 96       	adiw	r26, 0x05	; 5
     424:	1c 92       	st	X, r1
     426:	1e 92       	st	-X, r1
     428:	14 97       	sbiw	r26, 0x04	; 4

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
     42a:	26 5f       	subi	r18, 0xF6	; 246
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	74 01       	movw	r14, r8
     430:	fa e0       	ldi	r31, 0x0A	; 10
     432:	ef 0e       	add	r14, r31
     434:	f1 1c       	adc	r15, r1
     436:	f9 01       	movw	r30, r18
     438:	f1 82       	std	Z+1, r15	; 0x01
     43a:	e0 82       	st	Z, r14
	then8.next = NULL;
     43c:	13 82       	std	Z+3, r1	; 0x03
     43e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if82;
	if82.value = &inPlus.value;
     440:	8e 01       	movw	r16, r28
     442:	07 5c       	subi	r16, 0xC7	; 199
     444:	1e 4f       	sbci	r17, 0xFE	; 254
     446:	f8 01       	movw	r30, r16
     448:	51 83       	std	Z+1, r21	; 0x01
     44a:	40 83       	st	Z, r20
	if82.next = NULL;
     44c:	13 82       	std	Z+3, r1	; 0x03
     44e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if81;
	if81.value = &inPositive.value;
     450:	4c 55       	subi	r20, 0x5C	; 92
     452:	5f 4f       	sbci	r21, 0xFF	; 255
     454:	4e 01       	movw	r8, r28
     456:	f7 e4       	ldi	r31, 0x47	; 71
     458:	8f 0e       	add	r8, r31
     45a:	91 1c       	adc	r9, r1
     45c:	fa 01       	movw	r30, r20
     45e:	91 82       	std	Z+1, r9	; 0x01
     460:	80 82       	st	Z, r8
	if81.next = &if82;
     462:	13 83       	std	Z+3, r17	; 0x03
     464:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule8;
	rule8.if_side = &if81;
     466:	34 96       	adiw	r30, 0x04	; 4
     468:	51 83       	std	Z+1, r21	; 0x01
     46a:	40 83       	st	Z, r20
	rule8.then_side = &then8;
     46c:	33 83       	std	Z+3, r19	; 0x03
     46e:	22 83       	std	Z+2, r18	; 0x02
	rule8.next = &rule9;
     470:	b5 83       	std	Z+5, r27	; 0x05
     472:	a4 83       	std	Z+4, r26	; 0x04
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
     474:	02 5f       	subi	r16, 0xF2	; 242
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	2a e0       	ldi	r18, 0x0A	; 10
     47a:	a2 0e       	add	r10, r18
     47c:	b1 1c       	adc	r11, r1
     47e:	d8 01       	movw	r26, r16
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	bc 92       	st	X, r11
     484:	ae 92       	st	-X, r10
	then7.next = NULL;
     486:	13 96       	adiw	r26, 0x03	; 3
     488:	1c 92       	st	X, r1
     48a:	1e 92       	st	-X, r1
     48c:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if72;
	if72.value = &inNyll.value;
     48e:	68 5d       	subi	r22, 0xD8	; 216
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	9e 01       	movw	r18, r28
     494:	2d 57       	subi	r18, 0x7D	; 125
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	db 01       	movw	r26, r22
     49a:	11 96       	adiw	r26, 0x01	; 1
     49c:	3c 93       	st	X, r19
     49e:	2e 93       	st	-X, r18
	if72.next = NULL;
     4a0:	13 96       	adiw	r26, 0x03	; 3
     4a2:	1c 92       	st	X, r1
     4a4:	1e 92       	st	-X, r1
     4a6:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if71;
	if71.value = &inPositive.value;
     4a8:	4e 5e       	subi	r20, 0xEE	; 238
     4aa:	5f 4f       	sbci	r21, 0xFF	; 255
     4ac:	da 01       	movw	r26, r20
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	9c 92       	st	X, r9
     4b2:	8e 92       	st	-X, r8
	if71.next = &if72;
     4b4:	13 96       	adiw	r26, 0x03	; 3
     4b6:	7c 93       	st	X, r23
     4b8:	6e 93       	st	-X, r22
     4ba:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule7;
	rule7.if_side = &if71;
     4bc:	68 5f       	subi	r22, 0xF8	; 248
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	db 01       	movw	r26, r22
     4c2:	11 96       	adiw	r26, 0x01	; 1
     4c4:	5c 93       	st	X, r21
     4c6:	4e 93       	st	-X, r20
	rule7.then_side = &then7;
     4c8:	13 96       	adiw	r26, 0x03	; 3
     4ca:	1c 93       	st	X, r17
     4cc:	0e 93       	st	-X, r16
     4ce:	12 97       	sbiw	r26, 0x02	; 2
	rule7.next = &rule8;
     4d0:	15 96       	adiw	r26, 0x05	; 5
     4d2:	fc 93       	st	X, r31
     4d4:	ee 93       	st	-X, r30
     4d6:	14 97       	sbiw	r26, 0x04	; 4

	*/

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
     4d8:	16 96       	adiw	r26, 0x06	; 6
     4da:	ea e0       	ldi	r30, 0x0A	; 10
     4dc:	ce 0e       	add	r12, r30
     4de:	d1 1c       	adc	r13, r1
     4e0:	11 96       	adiw	r26, 0x01	; 1
     4e2:	dc 92       	st	X, r13
     4e4:	ce 92       	st	-X, r12
	then5.next = NULL;
     4e6:	13 96       	adiw	r26, 0x03	; 3
     4e8:	1c 92       	st	X, r1
     4ea:	1e 92       	st	-X, r1
     4ec:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
     4ee:	5e 01       	movw	r10, r28
     4f0:	f3 ea       	ldi	r31, 0xA3	; 163
     4f2:	af 1a       	sub	r10, r31
     4f4:	fe ef       	ldi	r31, 0xFE	; 254
     4f6:	bf 0a       	sbc	r11, r31
     4f8:	f5 01       	movw	r30, r10
     4fa:	31 83       	std	Z+1, r19	; 0x01
     4fc:	20 83       	st	Z, r18
	if52.next = NULL;
     4fe:	13 82       	std	Z+3, r1	; 0x03
     500:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &inNegative.value;
     502:	4e 5e       	subi	r20, 0xEE	; 238
     504:	5f 4f       	sbci	r21, 0xFF	; 255
     506:	6e 01       	movw	r12, r28
     508:	fb e1       	ldi	r31, 0x1B	; 27
     50a:	cf 0e       	add	r12, r31
     50c:	d1 1c       	adc	r13, r1
     50e:	fa 01       	movw	r30, r20
     510:	d1 82       	std	Z+1, r13	; 0x01
     512:	c0 82       	st	Z, r12
	if51.next = &if52;
     514:	b3 82       	std	Z+3, r11	; 0x03
     516:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     518:	34 96       	adiw	r30, 0x04	; 4
     51a:	51 83       	std	Z+1, r21	; 0x01
     51c:	40 83       	st	Z, r20
	rule5.then_side = &then5;
     51e:	b3 83       	std	Z+3, r27	; 0x03
     520:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule7;
     522:	75 83       	std	Z+5, r23	; 0x05
     524:	64 83       	std	Z+4, r22	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
     526:	68 5e       	subi	r22, 0xE8	; 232
     528:	7f 4f       	sbci	r23, 0xFF	; 255
     52a:	1a e0       	ldi	r17, 0x0A	; 10
     52c:	41 0e       	add	r4, r17
     52e:	51 1c       	adc	r5, r1
     530:	db 01       	movw	r26, r22
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	5c 92       	st	X, r5
     536:	4e 92       	st	-X, r4
	then4.next = NULL;
     538:	13 96       	adiw	r26, 0x03	; 3
     53a:	1c 92       	st	X, r1
     53c:	1e 92       	st	-X, r1
     53e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
     540:	42 5f       	subi	r20, 0xF2	; 242
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	da 01       	movw	r26, r20
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	3c 93       	st	X, r19
     54a:	2e 93       	st	-X, r18
	if42.next = NULL;
     54c:	13 96       	adiw	r26, 0x03	; 3
     54e:	1c 92       	st	X, r1
     550:	1e 92       	st	-X, r1
     552:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &inZero.value;
     554:	20 51       	subi	r18, 0x10	; 16
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	d9 01       	movw	r26, r18
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	9c 93       	st	X, r25
     55e:	8e 93       	st	-X, r24
	if41.next = &if42;
     560:	13 96       	adiw	r26, 0x03	; 3
     562:	5c 93       	st	X, r21
     564:	4e 93       	st	-X, r20
     566:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     568:	48 5f       	subi	r20, 0xF8	; 248
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	da 01       	movw	r26, r20
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 93       	st	X, r19
     572:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     574:	13 96       	adiw	r26, 0x03	; 3
     576:	7c 93       	st	X, r23
     578:	6e 93       	st	-X, r22
     57a:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     57c:	15 96       	adiw	r26, 0x05	; 5
     57e:	fc 93       	st	X, r31
     580:	ee 93       	st	-X, r30
     582:	14 97       	sbiw	r26, 0x04	; 4
	rule3.next = &rule4;
	
	*/
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
     584:	8e 01       	movw	r16, r28
     586:	03 58       	subi	r16, 0x83	; 131
     588:	1e 4f       	sbci	r17, 0xFE	; 254
     58a:	f8 01       	movw	r30, r16
     58c:	71 82       	std	Z+1, r7	; 0x01
     58e:	60 82       	st	Z, r6
	then2.next = NULL;
     590:	13 82       	std	Z+3, r1	; 0x03
     592:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
     594:	1a 96       	adiw	r26, 0x0a	; 10
     596:	6e 5f       	subi	r22, 0xFE	; 254
     598:	71 09       	sbc	r23, r1
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	7c 93       	st	X, r23
     59e:	6e 93       	st	-X, r22
	if22.next = NULL;
     5a0:	13 96       	adiw	r26, 0x03	; 3
     5a2:	1c 92       	st	X, r1
     5a4:	1e 92       	st	-X, r1
     5a6:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if21;
	if21.value = &inNegative.value;
     5a8:	2e 5e       	subi	r18, 0xEE	; 238
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	f9 01       	movw	r30, r18
     5ae:	d1 82       	std	Z+1, r13	; 0x01
     5b0:	c0 82       	st	Z, r12
	if21.next = &if22;
     5b2:	b3 83       	std	Z+3, r27	; 0x03
     5b4:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     5b6:	18 96       	adiw	r26, 0x08	; 8
     5b8:	11 96       	adiw	r26, 0x01	; 1
     5ba:	3c 93       	st	X, r19
     5bc:	2e 93       	st	-X, r18
	rule2.then_side = &then2;
     5be:	13 96       	adiw	r26, 0x03	; 3
     5c0:	1c 93       	st	X, r17
     5c2:	0e 93       	st	-X, r16
     5c4:	12 97       	sbiw	r26, 0x02	; 2
	rule2.next = &rule4;
     5c6:	15 96       	adiw	r26, 0x05	; 5
     5c8:	5c 93       	st	X, r21
     5ca:	4e 93       	st	-X, r20
     5cc:	14 97       	sbiw	r26, 0x04	; 4

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
     5ce:	26 5f       	subi	r18, 0xF6	; 246
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	f9 01       	movw	r30, r18
     5d4:	f1 82       	std	Z+1, r15	; 0x01
     5d6:	e0 82       	st	Z, r14
	then1.next = NULL;
     5d8:	13 82       	std	Z+3, r1	; 0x03
     5da:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if12;
	if12.value = &inMinus.value;
     5dc:	0a 5e       	subi	r16, 0xEA	; 234
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	f8 01       	movw	r30, r16
     5e2:	71 83       	std	Z+1, r23	; 0x01
     5e4:	60 83       	st	Z, r22
	if12.next = NULL;
     5e6:	13 82       	std	Z+3, r1	; 0x03
     5e8:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &inZero.value;
     5ea:	40 5e       	subi	r20, 0xE0	; 224
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	fa 01       	movw	r30, r20
     5f0:	91 83       	std	Z+1, r25	; 0x01
     5f2:	80 83       	st	Z, r24
	if11.next = &if12;
     5f4:	13 83       	std	Z+3, r17	; 0x03
     5f6:	02 83       	std	Z+2, r16	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     5f8:	34 96       	adiw	r30, 0x04	; 4
     5fa:	51 83       	std	Z+1, r21	; 0x01
     5fc:	40 83       	st	Z, r20
	rule1.then_side = &then1;
     5fe:	33 83       	std	Z+3, r19	; 0x03
     600:	22 83       	std	Z+2, r18	; 0x02
	rule1.next = &rule2;
     602:	b5 83       	std	Z+5, r27	; 0x05
     604:	a4 83       	std	Z+4, r26	; 0x04
	Rule_Base = &rule1;
     606:	f0 93 fc 02 	sts	0x02FC, r31
     60a:	e0 93 fb 02 	sts	0x02FB, r30
	

	
	
	// the methods performing the FLC
	fuzzification();
     60e:	db d4       	rcall	.+2486   	; 0xfc6 <fuzzification>
	rule_evaluation();
     610:	01 d5       	rcall	.+2562   	; 0x1014 <rule_evaluation>
	defuzzification();
     612:	46 d5       	rcall	.+2700   	; 0x10a0 <defuzzification>
	if (steering.value < 2260)
     614:	d1 01       	movw	r26, r2
     616:	1a 96       	adiw	r26, 0x0a	; 10
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	1b 97       	sbiw	r26, 0x0b	; 11
     61e:	84 3d       	cpi	r24, 0xD4	; 212
     620:	b8 e0       	ldi	r27, 0x08	; 8
     622:	9b 07       	cpc	r25, r27
     624:	24 f4       	brge	.+8      	; 0x62e <FLC_steering+0x562>
	{
		setServo(2260);
     626:	84 ed       	ldi	r24, 0xD4	; 212
     628:	98 e0       	ldi	r25, 0x08	; 8
     62a:	06 d7       	rcall	.+3596   	; 0x1438 <setServo>
     62c:	09 c0       	rjmp	.+18     	; 0x640 <FLC_steering+0x574>
	}
	else if (steering.value >3060)
     62e:	85 3f       	cpi	r24, 0xF5	; 245
     630:	eb e0       	ldi	r30, 0x0B	; 11
     632:	9e 07       	cpc	r25, r30
     634:	24 f0       	brlt	.+8      	; 0x63e <FLC_steering+0x572>
	{
		setServo(3060);
     636:	84 ef       	ldi	r24, 0xF4	; 244
     638:	9b e0       	ldi	r25, 0x0B	; 11
     63a:	fe d6       	rcall	.+3580   	; 0x1438 <setServo>
     63c:	01 c0       	rjmp	.+2      	; 0x640 <FLC_steering+0x574>
	}
	else
	{
		setServo(steering.value);
     63e:	fc d6       	rcall	.+3576   	; 0x1438 <setServo>
	}
}
     640:	c0 56       	subi	r28, 0x60	; 96
     642:	de 4f       	sbci	r29, 0xFE	; 254
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	7f 90       	pop	r7
     668:	6f 90       	pop	r6
     66a:	5f 90       	pop	r5
     66c:	4f 90       	pop	r4
     66e:	3f 90       	pop	r3
     670:	2f 90       	pop	r2
     672:	08 95       	ret

00000674 <FLC_obstacle>:
 *
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_obstacle(int currentOCR1A, int midSonicRange)
{
     674:	2f 92       	push	r2
     676:	3f 92       	push	r3
     678:	4f 92       	push	r4
     67a:	5f 92       	push	r5
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	c4 53       	subi	r28, 0x34	; 52
     69e:	d2 40       	sbci	r29, 0x02	; 2
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	1c 01       	movw	r2, r24
     6ac:	2b 01       	movw	r4, r22
    
	
	
    
   ///// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
   	struct io_type distance; strcpy(distance.name, "distance");
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e5 e7       	ldi	r30, 0x75	; 117
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	de 01       	movw	r26, r28
     6b6:	11 96       	adiw	r26, 0x01	; 1
     6b8:	01 90       	ld	r0, Z+
     6ba:	0d 92       	st	X+, r0
     6bc:	8a 95       	dec	r24
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <FLC_obstacle+0x44>
    
    // Set MFs
    struct mf_type stopDist;
    MATLAB_MF(&stopDist, "stopDist", -1, 0, 12, 52);
     6c0:	3e 01       	movw	r6, r28
     6c2:	21 e1       	ldi	r18, 0x11	; 17
     6c4:	62 0e       	add	r6, r18
     6c6:	71 1c       	adc	r7, r1
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f4 e3       	ldi	r31, 0x34	; 52
     6cc:	ef 2e       	mov	r14, r31
     6ce:	f1 2c       	mov	r15, r1
     6d0:	f0 2d       	mov	r31, r0
     6d2:	0c e0       	ldi	r16, 0x0C	; 12
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4f ef       	ldi	r20, 0xFF	; 255
     6dc:	5f ef       	ldi	r21, 0xFF	; 255
     6de:	6e e7       	ldi	r22, 0x7E	; 126
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	c3 01       	movw	r24, r6
     6e4:	9a d5       	rcall	.+2868   	; 0x121a <MATLAB_MF>
    struct mf_type oneM;
    MATLAB_MF(&oneM, "oneM", 30, 60, 60, 95);
     6e6:	4e 01       	movw	r8, r28
     6e8:	47 e2       	ldi	r20, 0x27	; 39
     6ea:	84 0e       	add	r8, r20
     6ec:	91 1c       	adc	r9, r1
     6ee:	0f 2e       	mov	r0, r31
     6f0:	ff e5       	ldi	r31, 0x5F	; 95
     6f2:	ef 2e       	mov	r14, r31
     6f4:	f1 2c       	mov	r15, r1
     6f6:	f0 2d       	mov	r31, r0
     6f8:	0c e3       	ldi	r16, 0x3C	; 60
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	2c e3       	ldi	r18, 0x3C	; 60
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4e e1       	ldi	r20, 0x1E	; 30
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	67 e8       	ldi	r22, 0x87	; 135
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	c4 01       	movw	r24, r8
     70a:	87 d5       	rcall	.+2830   	; 0x121a <MATLAB_MF>
    struct mf_type twoM;
    MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     70c:	5e 01       	movw	r10, r28
     70e:	5d e3       	ldi	r21, 0x3D	; 61
     710:	a5 0e       	add	r10, r21
     712:	b1 1c       	adc	r11, r1
     714:	0f 2e       	mov	r0, r31
     716:	ff ea       	ldi	r31, 0xAF	; 175
     718:	ef 2e       	mov	r14, r31
     71a:	f1 2c       	mov	r15, r1
     71c:	f0 2d       	mov	r31, r0
     71e:	0d e7       	ldi	r16, 0x7D	; 125
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	2d e7       	ldi	r18, 0x7D	; 125
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4b e4       	ldi	r20, 0x4B	; 75
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	6c e8       	ldi	r22, 0x8C	; 140
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	c5 01       	movw	r24, r10
     730:	74 d5       	rcall	.+2792   	; 0x121a <MATLAB_MF>
    struct mf_type threeM;
    MATLAB_MF(&threeM, "threeM", 150, 250, 250, 251);
     732:	6e 01       	movw	r12, r28
     734:	83 e5       	ldi	r24, 0x53	; 83
     736:	c8 0e       	add	r12, r24
     738:	d1 1c       	adc	r13, r1
     73a:	0f 2e       	mov	r0, r31
     73c:	fb ef       	ldi	r31, 0xFB	; 251
     73e:	ef 2e       	mov	r14, r31
     740:	f1 2c       	mov	r15, r1
     742:	f0 2d       	mov	r31, r0
     744:	0a ef       	ldi	r16, 0xFA	; 250
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	2a ef       	ldi	r18, 0xFA	; 250
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	46 e9       	ldi	r20, 0x96	; 150
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	61 e9       	ldi	r22, 0x91	; 145
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	c6 01       	movw	r24, r12
     756:	61 d5       	rcall	.+2754   	; 0x121a <MATLAB_MF>
    
    // Linked list for MFs
    distance.membership_functions = &stopDist;
     758:	7e 86       	std	Y+14, r7	; 0x0e
     75a:	6d 86       	std	Y+13, r6	; 0x0d
    stopDist.next = &oneM;
     75c:	9e a2       	std	Y+38, r9	; 0x26
     75e:	8d a2       	std	Y+37, r8	; 0x25
    oneM.next = &twoM;
     760:	bc ae       	std	Y+60, r11	; 0x3c
     762:	ab ae       	std	Y+59, r10	; 0x3b
    twoM.next = &threeM;
     764:	63 96       	adiw	r28, 0x13	; 19
     766:	df ae       	std	Y+63, r13	; 0x3f
     768:	ce ae       	std	Y+62, r12	; 0x3e
     76a:	63 97       	sbiw	r28, 0x13	; 19
    threeM.next = NULL;
     76c:	d6 01       	movw	r26, r12
     76e:	55 96       	adiw	r26, 0x15	; 21
     770:	1c 92       	st	X, r1
     772:	1e 92       	st	-X, r1
     774:	54 97       	sbiw	r26, 0x14	; 20
    
    // Variable assigned its reference value
    if(midSonicRange < MIN_DISTANCE)
     776:	55 20       	and	r5, r5
     778:	1c f4       	brge	.+6      	; 0x780 <FLC_obstacle+0x10c>
    {
        distance.value = MIN_DISTANCE;
     77a:	1c 86       	std	Y+12, r1	; 0x0c
     77c:	1b 86       	std	Y+11, r1	; 0x0b
     77e:	0b c0       	rjmp	.+22     	; 0x796 <FLC_obstacle+0x122>
    }
    else if (midSonicRange > MAX_DISTANCE)
     780:	bb ef       	ldi	r27, 0xFB	; 251
     782:	4b 16       	cp	r4, r27
     784:	51 04       	cpc	r5, r1
     786:	2c f0       	brlt	.+10     	; 0x792 <FLC_obstacle+0x11e>
    {
        distance.value = MAX_DISTANCE;
     788:	8a ef       	ldi	r24, 0xFA	; 250
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9c 87       	std	Y+12, r25	; 0x0c
     78e:	8b 87       	std	Y+11, r24	; 0x0b
     790:	02 c0       	rjmp	.+4      	; 0x796 <FLC_obstacle+0x122>
    }
    else
    {
        distance.value = midSonicRange;
     792:	5c 86       	std	Y+12, r5	; 0x0c
     794:	4b 86       	std	Y+11, r4	; 0x0b
    }
    
    
    ////// DECLARATION OF SPEED INPUT VARIABLE ///////////////////////////////////
    struct io_type speed; strcpy(speed.name, "speed");
     796:	86 e0       	ldi	r24, 0x06	; 6
     798:	e8 e9       	ldi	r30, 0x98	; 152
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	de 01       	movw	r26, r28
     79e:	a7 59       	subi	r26, 0x97	; 151
     7a0:	bf 4f       	sbci	r27, 0xFF	; 255
     7a2:	01 90       	ld	r0, Z+
     7a4:	0d 92       	st	X+, r0
     7a6:	8a 95       	dec	r24
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <FLC_obstacle+0x12e>
    
    // Set MFs
    struct mf_type still;
    MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     7aa:	3e 01       	movw	r6, r28
     7ac:	e9 e7       	ldi	r30, 0x79	; 121
     7ae:	6e 0e       	add	r6, r30
     7b0:	71 1c       	adc	r7, r1
     7b2:	0f 2e       	mov	r0, r31
     7b4:	ee 24       	eor	r14, r14
     7b6:	ea 94       	dec	r14
     7b8:	fa e0       	ldi	r31, 0x0A	; 10
     7ba:	ff 2e       	mov	r15, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	04 eb       	ldi	r16, 0xB4	; 180
     7c0:	1a e0       	ldi	r17, 0x0A	; 10
     7c2:	24 eb       	ldi	r18, 0xB4	; 180
     7c4:	3a e0       	ldi	r19, 0x0A	; 10
     7c6:	43 eb       	ldi	r20, 0xB3	; 179
     7c8:	5a e0       	ldi	r21, 0x0A	; 10
     7ca:	6e e9       	ldi	r22, 0x9E	; 158
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	c3 01       	movw	r24, r6
     7d0:	24 d5       	rcall	.+2632   	; 0x121a <MATLAB_MF>
    struct mf_type low;
    MATLAB_MF(&low, "low", 2804, 2820, 2820, 2836);
     7d2:	4e 01       	movw	r8, r28
     7d4:	ff e8       	ldi	r31, 0x8F	; 143
     7d6:	8f 0e       	add	r8, r31
     7d8:	91 1c       	adc	r9, r1
     7da:	0f 2e       	mov	r0, r31
     7dc:	f4 e1       	ldi	r31, 0x14	; 20
     7de:	ef 2e       	mov	r14, r31
     7e0:	fb e0       	ldi	r31, 0x0B	; 11
     7e2:	ff 2e       	mov	r15, r31
     7e4:	f0 2d       	mov	r31, r0
     7e6:	04 e0       	ldi	r16, 0x04	; 4
     7e8:	1b e0       	ldi	r17, 0x0B	; 11
     7ea:	24 e0       	ldi	r18, 0x04	; 4
     7ec:	3b e0       	ldi	r19, 0x0B	; 11
     7ee:	44 ef       	ldi	r20, 0xF4	; 244
     7f0:	5a e0       	ldi	r21, 0x0A	; 10
     7f2:	62 ec       	ldi	r22, 0xC2	; 194
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	c4 01       	movw	r24, r8
     7f8:	10 d5       	rcall	.+2592   	; 0x121a <MATLAB_MF>
    struct mf_type cruising;
    MATLAB_MF(&cruising, "cruising", 2827, 2843, 2843, 2859);
     7fa:	5e 01       	movw	r10, r28
     7fc:	25 ea       	ldi	r18, 0xA5	; 165
     7fe:	a2 0e       	add	r10, r18
     800:	b1 1c       	adc	r11, r1
     802:	0f 2e       	mov	r0, r31
     804:	fb e2       	ldi	r31, 0x2B	; 43
     806:	ef 2e       	mov	r14, r31
     808:	fb e0       	ldi	r31, 0x0B	; 11
     80a:	ff 2e       	mov	r15, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	0b e1       	ldi	r16, 0x1B	; 27
     810:	1b e0       	ldi	r17, 0x0B	; 11
     812:	2b e1       	ldi	r18, 0x1B	; 27
     814:	3b e0       	ldi	r19, 0x0B	; 11
     816:	4b e0       	ldi	r20, 0x0B	; 11
     818:	5b e0       	ldi	r21, 0x0B	; 11
     81a:	64 ea       	ldi	r22, 0xA4	; 164
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	c5 01       	movw	r24, r10
     820:	fc d4       	rcall	.+2552   	; 0x121a <MATLAB_MF>
    struct mf_type medium;
    MATLAB_MF(&medium, "medium", 2849, 2865, 2865, 2881);
     822:	6e 01       	movw	r12, r28
     824:	4b eb       	ldi	r20, 0xBB	; 187
     826:	c4 0e       	add	r12, r20
     828:	d1 1c       	adc	r13, r1
     82a:	0f 2e       	mov	r0, r31
     82c:	f1 e4       	ldi	r31, 0x41	; 65
     82e:	ef 2e       	mov	r14, r31
     830:	fb e0       	ldi	r31, 0x0B	; 11
     832:	ff 2e       	mov	r15, r31
     834:	f0 2d       	mov	r31, r0
     836:	01 e3       	ldi	r16, 0x31	; 49
     838:	1b e0       	ldi	r17, 0x0B	; 11
     83a:	21 e3       	ldi	r18, 0x31	; 49
     83c:	3b e0       	ldi	r19, 0x0B	; 11
     83e:	41 e2       	ldi	r20, 0x21	; 33
     840:	5b e0       	ldi	r21, 0x0B	; 11
     842:	6d ea       	ldi	r22, 0xAD	; 173
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	c6 01       	movw	r24, r12
     848:	e8 d4       	rcall	.+2512   	; 0x121a <MATLAB_MF>
    struct mf_type high;
    MATLAB_MF(&high, "high", 2870, 2900, 2900, 2901);
     84a:	2e 01       	movw	r4, r28
     84c:	51 ed       	ldi	r21, 0xD1	; 209
     84e:	45 0e       	add	r4, r21
     850:	51 1c       	adc	r5, r1
     852:	0f 2e       	mov	r0, r31
     854:	f5 e5       	ldi	r31, 0x55	; 85
     856:	ef 2e       	mov	r14, r31
     858:	fb e0       	ldi	r31, 0x0B	; 11
     85a:	ff 2e       	mov	r15, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	04 e5       	ldi	r16, 0x54	; 84
     860:	1b e0       	ldi	r17, 0x0B	; 11
     862:	24 e5       	ldi	r18, 0x54	; 84
     864:	3b e0       	ldi	r19, 0x0B	; 11
     866:	46 e3       	ldi	r20, 0x36	; 54
     868:	5b e0       	ldi	r21, 0x0B	; 11
     86a:	64 eb       	ldi	r22, 0xB4	; 180
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	c2 01       	movw	r24, r4
     870:	d4 d4       	rcall	.+2472   	; 0x121a <MATLAB_MF>
    
    // Linked list for MFs
    speed.membership_functions = &still;
     872:	e7 96       	adiw	r28, 0x37	; 55
     874:	7f ae       	std	Y+63, r7	; 0x3f
     876:	6e ae       	std	Y+62, r6	; 0x3e
     878:	e7 97       	sbiw	r28, 0x37	; 55
    still.next = &low;
     87a:	d3 01       	movw	r26, r6
     87c:	55 96       	adiw	r26, 0x15	; 21
     87e:	9c 92       	st	X, r9
     880:	8e 92       	st	-X, r8
     882:	54 97       	sbiw	r26, 0x14	; 20
    low.next = &cruising;
     884:	f4 01       	movw	r30, r8
     886:	b5 8a       	std	Z+21, r11	; 0x15
     888:	a4 8a       	std	Z+20, r10	; 0x14
    cruising.next = &medium;
     88a:	d5 01       	movw	r26, r10
     88c:	55 96       	adiw	r26, 0x15	; 21
     88e:	dc 92       	st	X, r13
     890:	ce 92       	st	-X, r12
     892:	54 97       	sbiw	r26, 0x14	; 20
    medium.next = &high;
     894:	f6 01       	movw	r30, r12
     896:	55 8a       	std	Z+21, r5	; 0x15
     898:	44 8a       	std	Z+20, r4	; 0x14
    high.next = NULL;
     89a:	d2 01       	movw	r26, r4
     89c:	55 96       	adiw	r26, 0x15	; 21
     89e:	1c 92       	st	X, r1
     8a0:	1e 92       	st	-X, r1
     8a2:	54 97       	sbiw	r26, 0x14	; 20
    
    // Variable assigned it's reference value
    if (currentOCR1A<MIN_SPEED) {
     8a4:	b4 eb       	ldi	r27, 0xB4	; 180
     8a6:	2b 16       	cp	r2, r27
     8a8:	ba e0       	ldi	r27, 0x0A	; 10
     8aa:	3b 06       	cpc	r3, r27
     8ac:	3c f4       	brge	.+14     	; 0x8bc <FLC_obstacle+0x248>
        speed.value = MIN_SPEED;
     8ae:	84 eb       	ldi	r24, 0xB4	; 180
     8b0:	9a e0       	ldi	r25, 0x0A	; 10
     8b2:	e5 96       	adiw	r28, 0x35	; 53
     8b4:	9f af       	std	Y+63, r25	; 0x3f
     8b6:	8e af       	std	Y+62, r24	; 0x3e
     8b8:	e5 97       	sbiw	r28, 0x35	; 53
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <FLC_obstacle+0x268>
    }
    else if (currentOCR1A>MAX_SPEED)
     8bc:	e5 e5       	ldi	r30, 0x55	; 85
     8be:	2e 16       	cp	r2, r30
     8c0:	eb e0       	ldi	r30, 0x0B	; 11
     8c2:	3e 06       	cpc	r3, r30
     8c4:	3c f0       	brlt	.+14     	; 0x8d4 <FLC_obstacle+0x260>
    {
        speed.value = MAX_SPEED;
     8c6:	84 e5       	ldi	r24, 0x54	; 84
     8c8:	9b e0       	ldi	r25, 0x0B	; 11
     8ca:	e5 96       	adiw	r28, 0x35	; 53
     8cc:	9f af       	std	Y+63, r25	; 0x3f
     8ce:	8e af       	std	Y+62, r24	; 0x3e
     8d0:	e5 97       	sbiw	r28, 0x35	; 53
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <FLC_obstacle+0x268>
    }
    else
    {
        speed.value = currentOCR1A;
     8d4:	e5 96       	adiw	r28, 0x35	; 53
     8d6:	3f ae       	std	Y+63, r3	; 0x3f
     8d8:	2e ae       	std	Y+62, r2	; 0x3e
     8da:	e5 97       	sbiw	r28, 0x35	; 53
    }
    
    
    ////// DECLARATION OF PWM OUTPUT VARIABLE ///////////////////////////////////
   	struct io_type pwm; strcpy(pwm.name, "pwm");
     8dc:	3e 01       	movw	r6, r28
     8de:	f7 ee       	ldi	r31, 0xE7	; 231
     8e0:	6f 0e       	add	r6, r31
     8e2:	71 1c       	adc	r7, r1
     8e4:	80 e7       	ldi	r24, 0x70	; 112
     8e6:	97 e7       	ldi	r25, 0x77	; 119
     8e8:	ad e6       	ldi	r26, 0x6D	; 109
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	f3 01       	movw	r30, r6
     8ee:	80 83       	st	Z, r24
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	a2 83       	std	Z+2, r26	; 0x02
     8f4:	b3 83       	std	Z+3, r27	; 0x03
    
    // Set MFs
    struct mf_type noSpeed;
    MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     8f6:	4e 01       	movw	r8, r28
     8f8:	f7 ef       	ldi	r31, 0xF7	; 247
     8fa:	8f 0e       	add	r8, r31
     8fc:	91 1c       	adc	r9, r1
     8fe:	0f 2e       	mov	r0, r31
     900:	ee 24       	eor	r14, r14
     902:	ea 94       	dec	r14
     904:	fa e0       	ldi	r31, 0x0A	; 10
     906:	ff 2e       	mov	r15, r31
     908:	f0 2d       	mov	r31, r0
     90a:	04 eb       	ldi	r16, 0xB4	; 180
     90c:	1a e0       	ldi	r17, 0x0A	; 10
     90e:	24 eb       	ldi	r18, 0xB4	; 180
     910:	3a e0       	ldi	r19, 0x0A	; 10
     912:	43 eb       	ldi	r20, 0xB3	; 179
     914:	5a e0       	ldi	r21, 0x0A	; 10
     916:	69 eb       	ldi	r22, 0xB9	; 185
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	c4 01       	movw	r24, r8
     91c:	7e d4       	rcall	.+2300   	; 0x121a <MATLAB_MF>
    struct mf_type slow;
    MATLAB_MF(&slow, "slow", 2804, 2820, 2820, 2836);
     91e:	5e 01       	movw	r10, r28
     920:	23 ef       	ldi	r18, 0xF3	; 243
     922:	a2 1a       	sub	r10, r18
     924:	2e ef       	ldi	r18, 0xFE	; 254
     926:	b2 0a       	sbc	r11, r18
     928:	0f 2e       	mov	r0, r31
     92a:	f4 e1       	ldi	r31, 0x14	; 20
     92c:	ef 2e       	mov	r14, r31
     92e:	fb e0       	ldi	r31, 0x0B	; 11
     930:	ff 2e       	mov	r15, r31
     932:	f0 2d       	mov	r31, r0
     934:	04 e0       	ldi	r16, 0x04	; 4
     936:	1b e0       	ldi	r17, 0x0B	; 11
     938:	24 e0       	ldi	r18, 0x04	; 4
     93a:	3b e0       	ldi	r19, 0x0B	; 11
     93c:	44 ef       	ldi	r20, 0xF4	; 244
     93e:	5a e0       	ldi	r21, 0x0A	; 10
     940:	61 ec       	ldi	r22, 0xC1	; 193
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	c5 01       	movw	r24, r10
     946:	69 d4       	rcall	.+2258   	; 0x121a <MATLAB_MF>
    struct mf_type cruise;
    MATLAB_MF(&cruise, "cruise", 2827, 2843, 2843, 2859);
     948:	6e 01       	movw	r12, r28
     94a:	4d ed       	ldi	r20, 0xDD	; 221
     94c:	c4 1a       	sub	r12, r20
     94e:	4e ef       	ldi	r20, 0xFE	; 254
     950:	d4 0a       	sbc	r13, r20
     952:	0f 2e       	mov	r0, r31
     954:	fb e2       	ldi	r31, 0x2B	; 43
     956:	ef 2e       	mov	r14, r31
     958:	fb e0       	ldi	r31, 0x0B	; 11
     95a:	ff 2e       	mov	r15, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	0b e1       	ldi	r16, 0x1B	; 27
     960:	1b e0       	ldi	r17, 0x0B	; 11
     962:	2b e1       	ldi	r18, 0x1B	; 27
     964:	3b e0       	ldi	r19, 0x0B	; 11
     966:	4b e0       	ldi	r20, 0x0B	; 11
     968:	5b e0       	ldi	r21, 0x0B	; 11
     96a:	66 ec       	ldi	r22, 0xC6	; 198
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	c6 01       	movw	r24, r12
     970:	54 d4       	rcall	.+2216   	; 0x121a <MATLAB_MF>
    struct mf_type medHigh;
    MATLAB_MF(&medHigh, "medHigh", 2849, 2865, 2865, 2881);
     972:	1e 01       	movw	r2, r28
     974:	57 ec       	ldi	r21, 0xC7	; 199
     976:	25 1a       	sub	r2, r21
     978:	5e ef       	ldi	r21, 0xFE	; 254
     97a:	35 0a       	sbc	r3, r21
     97c:	0f 2e       	mov	r0, r31
     97e:	f1 e4       	ldi	r31, 0x41	; 65
     980:	ef 2e       	mov	r14, r31
     982:	fb e0       	ldi	r31, 0x0B	; 11
     984:	ff 2e       	mov	r15, r31
     986:	f0 2d       	mov	r31, r0
     988:	01 e3       	ldi	r16, 0x31	; 49
     98a:	1b e0       	ldi	r17, 0x0B	; 11
     98c:	21 e3       	ldi	r18, 0x31	; 49
     98e:	3b e0       	ldi	r19, 0x0B	; 11
     990:	41 e2       	ldi	r20, 0x21	; 33
     992:	5b e0       	ldi	r21, 0x0B	; 11
     994:	6d ec       	ldi	r22, 0xCD	; 205
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	c1 01       	movw	r24, r2
     99a:	3f d4       	rcall	.+2174   	; 0x121a <MATLAB_MF>
    struct mf_type max;
    MATLAB_MF(&max, "max", 2870, 2900, 2900, 2901);
     99c:	2e 01       	movw	r4, r28
     99e:	81 eb       	ldi	r24, 0xB1	; 177
     9a0:	48 1a       	sub	r4, r24
     9a2:	8e ef       	ldi	r24, 0xFE	; 254
     9a4:	58 0a       	sbc	r5, r24
     9a6:	0f 2e       	mov	r0, r31
     9a8:	f5 e5       	ldi	r31, 0x55	; 85
     9aa:	ef 2e       	mov	r14, r31
     9ac:	fb e0       	ldi	r31, 0x0B	; 11
     9ae:	ff 2e       	mov	r15, r31
     9b0:	f0 2d       	mov	r31, r0
     9b2:	04 e5       	ldi	r16, 0x54	; 84
     9b4:	1b e0       	ldi	r17, 0x0B	; 11
     9b6:	24 e5       	ldi	r18, 0x54	; 84
     9b8:	3b e0       	ldi	r19, 0x0B	; 11
     9ba:	46 e3       	ldi	r20, 0x36	; 54
     9bc:	5b e0       	ldi	r21, 0x0B	; 11
     9be:	65 ed       	ldi	r22, 0xD5	; 213
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	c2 01       	movw	r24, r4
     9c4:	2a d4       	rcall	.+2132   	; 0x121a <MATLAB_MF>
    
    // Linked list for MFs
    pwm.membership_functions = &noSpeed;
     9c6:	d3 01       	movw	r26, r6
     9c8:	1d 96       	adiw	r26, 0x0d	; 13
     9ca:	9c 92       	st	X, r9
     9cc:	8e 92       	st	-X, r8
     9ce:	1c 97       	sbiw	r26, 0x0c	; 12
    noSpeed.next = &slow;
     9d0:	f4 01       	movw	r30, r8
     9d2:	b5 8a       	std	Z+21, r11	; 0x15
     9d4:	a4 8a       	std	Z+20, r10	; 0x14
    slow.next = &cruise;
     9d6:	d5 01       	movw	r26, r10
     9d8:	55 96       	adiw	r26, 0x15	; 21
     9da:	dc 92       	st	X, r13
     9dc:	ce 92       	st	-X, r12
     9de:	54 97       	sbiw	r26, 0x14	; 20
    cruise.next = &medHigh;
     9e0:	f6 01       	movw	r30, r12
     9e2:	35 8a       	std	Z+21, r3	; 0x15
     9e4:	24 8a       	std	Z+20, r2	; 0x14
    medHigh.next = &max;
     9e6:	d1 01       	movw	r26, r2
     9e8:	55 96       	adiw	r26, 0x15	; 21
     9ea:	5c 92       	st	X, r5
     9ec:	4e 92       	st	-X, r4
     9ee:	54 97       	sbiw	r26, 0x14	; 20
    max.next = NULL;
     9f0:	f2 01       	movw	r30, r4
     9f2:	15 8a       	std	Z+21, r1	; 0x15
     9f4:	14 8a       	std	Z+20, r1	; 0x14
    
    
    
    ////// SETTING I/O LINKED LISTS ///////////////////////////////////
    
    System_Inputs = &distance;
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	90 93 fa 02 	sts	0x02FA, r25
     9fe:	80 93 f9 02 	sts	0x02F9, r24
    distance.next = &speed;
     a02:	e6 5e       	subi	r30, 0xE6	; 230
     a04:	f1 09       	sbc	r31, r1
     a06:	f8 8b       	std	Y+16, r31	; 0x10
     a08:	ef 87       	std	Y+15, r30	; 0x0f
    speed.next = NULL;
     a0a:	17 86       	std	Z+15, r1	; 0x0f
     a0c:	16 86       	std	Z+14, r1	; 0x0e
    
    System_Outputs = &pwm;
     a0e:	70 92 f8 02 	sts	0x02F8, r7
     a12:	60 92 f7 02 	sts	0x02F7, r6
    pwm.next = NULL;
     a16:	d3 01       	movw	r26, r6
     a18:	1f 96       	adiw	r26, 0x0f	; 15
     a1a:	1c 92       	st	X, r1
     a1c:	1e 92       	st	-X, r1
     a1e:	1e 97       	sbiw	r26, 0x0e	; 14
    struct rule_type rule11;
    struct rule_type rule12;
 
    
    
    Rule_Base = &rule1;
     a20:	9e 01       	movw	r18, r28
     a22:	2b 59       	subi	r18, 0x9B	; 155
     a24:	3e 4f       	sbci	r19, 0xFE	; 254
     a26:	30 93 fc 02 	sts	0x02FC, r19
     a2a:	20 93 fb 02 	sts	0x02FB, r18
    rule1.next = &rule2;
     a2e:	86 59       	subi	r24, 0x96	; 150
     a30:	9e 4f       	sbci	r25, 0xFE	; 254
     a32:	f9 01       	movw	r30, r18
     a34:	95 83       	std	Z+5, r25	; 0x05
     a36:	84 83       	std	Z+4, r24	; 0x04
    rule2.next = &rule3;
     a38:	a6 57       	subi	r26, 0x76	; 118
     a3a:	bf 4f       	sbci	r27, 0xFF	; 255
     a3c:	fc 01       	movw	r30, r24
     a3e:	b5 83       	std	Z+5, r27	; 0x05
     a40:	a4 83       	std	Z+4, r26	; 0x04
    rule3.next = &rule4;
     a42:	47 e7       	ldi	r20, 0x77	; 119
     a44:	51 e0       	ldi	r21, 0x01	; 1
     a46:	4c 0f       	add	r20, r28
     a48:	5d 1f       	adc	r21, r29
     a4a:	15 96       	adiw	r26, 0x05	; 5
     a4c:	5c 93       	st	X, r21
     a4e:	4e 93       	st	-X, r20
     a50:	14 97       	sbiw	r26, 0x04	; 4
    rule4.next = &rule5;
     a52:	ed e7       	ldi	r30, 0x7D	; 125
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	ec 0f       	add	r30, r28
     a58:	fd 1f       	adc	r31, r29
     a5a:	c5 58       	subi	r28, 0x85	; 133
     a5c:	de 4f       	sbci	r29, 0xFE	; 254
     a5e:	f9 83       	std	Y+1, r31	; 0x01
     a60:	e8 83       	st	Y, r30
     a62:	cb 57       	subi	r28, 0x7B	; 123
     a64:	d1 40       	sbci	r29, 0x01	; 1
    rule5.next = &rule6;
     a66:	43 e8       	ldi	r20, 0x83	; 131
     a68:	51 e0       	ldi	r21, 0x01	; 1
     a6a:	4c 0f       	add	r20, r28
     a6c:	5d 1f       	adc	r21, r29
     a6e:	cf 57       	subi	r28, 0x7F	; 127
     a70:	de 4f       	sbci	r29, 0xFE	; 254
     a72:	59 83       	std	Y+1, r21	; 0x01
     a74:	48 83       	st	Y, r20
     a76:	c1 58       	subi	r28, 0x81	; 129
     a78:	d1 40       	sbci	r29, 0x01	; 1
    rule6.next = &rule7;
     a7a:	e9 e8       	ldi	r30, 0x89	; 137
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	ec 0f       	add	r30, r28
     a80:	fd 1f       	adc	r31, r29
     a82:	c9 57       	subi	r28, 0x79	; 121
     a84:	de 4f       	sbci	r29, 0xFE	; 254
     a86:	f9 83       	std	Y+1, r31	; 0x01
     a88:	e8 83       	st	Y, r30
     a8a:	c7 58       	subi	r28, 0x87	; 135
     a8c:	d1 40       	sbci	r29, 0x01	; 1
    rule7.next = &rule8;
     a8e:	4f e8       	ldi	r20, 0x8F	; 143
     a90:	51 e0       	ldi	r21, 0x01	; 1
     a92:	4c 0f       	add	r20, r28
     a94:	5d 1f       	adc	r21, r29
     a96:	c3 57       	subi	r28, 0x73	; 115
     a98:	de 4f       	sbci	r29, 0xFE	; 254
     a9a:	59 83       	std	Y+1, r21	; 0x01
     a9c:	48 83       	st	Y, r20
     a9e:	cd 58       	subi	r28, 0x8D	; 141
     aa0:	d1 40       	sbci	r29, 0x01	; 1
    rule8.next = &rule9;
     aa2:	7e 01       	movw	r14, r28
     aa4:	5b e6       	ldi	r21, 0x6B	; 107
     aa6:	e5 1a       	sub	r14, r21
     aa8:	5e ef       	ldi	r21, 0xFE	; 254
     aaa:	f5 0a       	sbc	r15, r21
     aac:	cd 56       	subi	r28, 0x6D	; 109
     aae:	de 4f       	sbci	r29, 0xFE	; 254
     ab0:	f9 82       	std	Y+1, r15	; 0x01
     ab2:	e8 82       	st	Y, r14
     ab4:	c3 59       	subi	r28, 0x93	; 147
     ab6:	d1 40       	sbci	r29, 0x01	; 1
    rule9.next = &rule10;
     ab8:	4b e9       	ldi	r20, 0x9B	; 155
     aba:	51 e0       	ldi	r21, 0x01	; 1
     abc:	4c 0f       	add	r20, r28
     abe:	5d 1f       	adc	r21, r29
     ac0:	f7 01       	movw	r30, r14
     ac2:	55 83       	std	Z+5, r21	; 0x05
     ac4:	44 83       	std	Z+4, r20	; 0x04
    rule10.next = &rule11;
     ac6:	e1 ea       	ldi	r30, 0xA1	; 161
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	ec 0f       	add	r30, r28
     acc:	fd 1f       	adc	r31, r29
     ace:	c1 56       	subi	r28, 0x61	; 97
     ad0:	de 4f       	sbci	r29, 0xFE	; 254
     ad2:	f9 83       	std	Y+1, r31	; 0x01
     ad4:	e8 83       	st	Y, r30
     ad6:	cf 59       	subi	r28, 0x9F	; 159
     ad8:	d1 40       	sbci	r29, 0x01	; 1
    rule11.next = &rule12;
     ada:	8e 01       	movw	r16, r28
     adc:	09 55       	subi	r16, 0x59	; 89
     ade:	1e 4f       	sbci	r17, 0xFE	; 254
     ae0:	cb 55       	subi	r28, 0x5B	; 91
     ae2:	de 4f       	sbci	r29, 0xFE	; 254
     ae4:	19 83       	std	Y+1, r17	; 0x01
     ae6:	08 83       	st	Y, r16
     ae8:	c5 5a       	subi	r28, 0xA5	; 165
     aea:	d1 40       	sbci	r29, 0x01	; 1
    rule12.next = NULL;
     aec:	f8 01       	movw	r30, r16
     aee:	15 82       	std	Z+5, r1	; 0x05
     af0:	14 82       	std	Z+4, r1	; 0x04

    
    // if distance is stopDist then pwm is noSpeed
    struct rule_element_type if11;
    if11.value = &stopDist.value;
     af2:	be 01       	movw	r22, r28
     af4:	63 55       	subi	r22, 0x53	; 83
     af6:	7e 4f       	sbci	r23, 0xFE	; 254
     af8:	40 58       	subi	r20, 0x80	; 128
     afa:	51 40       	sbci	r21, 0x01	; 1
     afc:	fb 01       	movw	r30, r22
     afe:	51 83       	std	Z+1, r21	; 0x01
     b00:	40 83       	st	Z, r20
    if11.next = NULL;
     b02:	13 82       	std	Z+3, r1	; 0x03
     b04:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type then1;
    then1.next = NULL;
     b06:	4a 56       	subi	r20, 0x6A	; 106
     b08:	5e 4f       	sbci	r21, 0xFE	; 254
     b0a:	fa 01       	movw	r30, r20
     b0c:	13 82       	std	Z+3, r1	; 0x03
     b0e:	12 82       	std	Z+2, r1	; 0x02
    then1.value = &noSpeed.value;
     b10:	fa e0       	ldi	r31, 0x0A	; 10
     b12:	8f 0e       	add	r8, r31
     b14:	91 1c       	adc	r9, r1
     b16:	fa 01       	movw	r30, r20
     b18:	91 82       	std	Z+1, r9	; 0x01
     b1a:	80 82       	st	Z, r8
    
    rule1.if_side = &if11;
     b1c:	f9 01       	movw	r30, r18
     b1e:	71 83       	std	Z+1, r23	; 0x01
     b20:	60 83       	st	Z, r22
    rule1.then_side = &then1;
     b22:	53 83       	std	Z+3, r21	; 0x03
     b24:	42 83       	std	Z+2, r20	; 0x02
    
    // if speed is low and distance is oneM then speed is slow
    struct rule_element_type if22;
    if22.value = &oneM.value;
     b26:	4c 5f       	subi	r20, 0xFC	; 252
     b28:	5f 4f       	sbci	r21, 0xFF	; 255
     b2a:	24 53       	subi	r18, 0x34	; 52
     b2c:	31 40       	sbci	r19, 0x01	; 1
     b2e:	fa 01       	movw	r30, r20
     b30:	31 83       	std	Z+1, r19	; 0x01
     b32:	20 83       	st	Z, r18
    if22.next = NULL;
     b34:	13 82       	std	Z+3, r1	; 0x03
     b36:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if21;
    if21.value = &low.value;
     b38:	64 5f       	subi	r22, 0xF4	; 244
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0f 2e       	mov	r0, r31
     b3e:	f9 e9       	ldi	r31, 0x99	; 153
     b40:	8f 2e       	mov	r8, r31
     b42:	91 2c       	mov	r9, r1
     b44:	f0 2d       	mov	r31, r0
     b46:	8c 0e       	add	r8, r28
     b48:	9d 1e       	adc	r9, r29
     b4a:	fb 01       	movw	r30, r22
     b4c:	91 82       	std	Z+1, r9	; 0x01
     b4e:	80 82       	st	Z, r8
    if21.next = &if22;
     b50:	53 83       	std	Z+3, r21	; 0x03
     b52:	42 83       	std	Z+2, r20	; 0x02
    struct rule_element_type then2;
    then2.value = &slow.value;
     b54:	48 5f       	subi	r20, 0xF8	; 248
     b56:	5f 4f       	sbci	r21, 0xFF	; 255
     b58:	ea e0       	ldi	r30, 0x0A	; 10
     b5a:	ae 0e       	add	r10, r30
     b5c:	b1 1c       	adc	r11, r1
     b5e:	fa 01       	movw	r30, r20
     b60:	b1 82       	std	Z+1, r11	; 0x01
     b62:	a0 82       	st	Z, r10
    then2.next = NULL;
     b64:	13 82       	std	Z+3, r1	; 0x03
     b66:	12 82       	std	Z+2, r1	; 0x02
    
    rule2.if_side = &if21;
     b68:	fc 01       	movw	r30, r24
     b6a:	71 83       	std	Z+1, r23	; 0x01
     b6c:	60 83       	st	Z, r22
    rule2.then_side = &then2;
     b6e:	53 83       	std	Z+3, r21	; 0x03
     b70:	42 83       	std	Z+2, r20	; 0x02
    
    // if speed is medium and distance is oneM then speed is cruise
    
    struct rule_element_type then3;
    then3.value = &cruise.value;
     b72:	8a 5a       	subi	r24, 0xAA	; 170
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	fa e0       	ldi	r31, 0x0A	; 10
     b78:	cf 0e       	add	r12, r31
     b7a:	d1 1c       	adc	r13, r1
     b7c:	fc 01       	movw	r30, r24
     b7e:	d1 82       	std	Z+1, r13	; 0x01
     b80:	c0 82       	st	Z, r12
    then3.next = NULL;
     b82:	13 82       	std	Z+3, r1	; 0x03
     b84:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if32;
    if32.value = &oneM.value;
     b86:	64 5f       	subi	r22, 0xF4	; 244
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	fb 01       	movw	r30, r22
     b8c:	31 83       	std	Z+1, r19	; 0x01
     b8e:	20 83       	st	Z, r18
    if32.next = NULL;
     b90:	13 82       	std	Z+3, r1	; 0x03
     b92:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if31;
    if31.value = &medium.value;
     b94:	44 5f       	subi	r20, 0xF4	; 244
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	0f 2e       	mov	r0, r31
     b9a:	f5 ec       	ldi	r31, 0xC5	; 197
     b9c:	8f 2e       	mov	r8, r31
     b9e:	91 2c       	mov	r9, r1
     ba0:	f0 2d       	mov	r31, r0
     ba2:	8c 0e       	add	r8, r28
     ba4:	9d 1e       	adc	r9, r29
     ba6:	fa 01       	movw	r30, r20
     ba8:	91 82       	std	Z+1, r9	; 0x01
     baa:	80 82       	st	Z, r8
    if31.next = &if32;
     bac:	73 83       	std	Z+3, r23	; 0x03
     bae:	62 83       	std	Z+2, r22	; 0x02
    
    rule3.if_side = &if31;
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	5c 93       	st	X, r21
     bb4:	4e 93       	st	-X, r20
    rule3.then_side = &then3;
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	9c 93       	st	X, r25
     bba:	8e 93       	st	-X, r24
     bbc:	12 97       	sbiw	r26, 0x02	; 2
    
    // if speed is high and distance is oneM then speed is cruise
    struct rule_element_type then4;
    then4.value = &cruise.value;
     bbe:	a4 5a       	subi	r26, 0xA4	; 164
     bc0:	bf 4f       	sbci	r27, 0xFF	; 255
     bc2:	11 96       	adiw	r26, 0x01	; 1
     bc4:	dc 92       	st	X, r13
     bc6:	ce 92       	st	-X, r12
    then4.next = NULL;
     bc8:	13 96       	adiw	r26, 0x03	; 3
     bca:	1c 92       	st	X, r1
     bcc:	1e 92       	st	-X, r1
     bce:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &oneM.value;
     bd0:	64 5f       	subi	r22, 0xF4	; 244
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	fb 01       	movw	r30, r22
     bd6:	31 83       	std	Z+1, r19	; 0x01
     bd8:	20 83       	st	Z, r18
    if42.next = NULL;
     bda:	13 82       	std	Z+3, r1	; 0x03
     bdc:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if41;
    if41.value = &high.value;
     bde:	44 96       	adiw	r24, 0x14	; 20
     be0:	4e 5e       	subi	r20, 0xEE	; 238
     be2:	51 09       	sbc	r21, r1
     be4:	fc 01       	movw	r30, r24
     be6:	51 83       	std	Z+1, r21	; 0x01
     be8:	40 83       	st	Z, r20
    if41.next = &if42;
     bea:	73 83       	std	Z+3, r23	; 0x03
     bec:	62 83       	std	Z+2, r22	; 0x02
    
    rule4.if_side = &if41;
     bee:	c9 58       	subi	r28, 0x89	; 137
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	99 83       	std	Y+1, r25	; 0x01
     bf4:	88 83       	st	Y, r24
     bf6:	c7 57       	subi	r28, 0x77	; 119
     bf8:	d1 40       	sbci	r29, 0x01	; 1
    rule4.then_side = &then4;
     bfa:	c7 58       	subi	r28, 0x87	; 135
     bfc:	de 4f       	sbci	r29, 0xFE	; 254
     bfe:	b9 83       	std	Y+1, r27	; 0x01
     c00:	a8 83       	st	Y, r26
     c02:	c9 57       	subi	r28, 0x79	; 121
     c04:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is still and distance is oneM then speed is slow
    
    struct rule_element_type then5;
    then5.value = &slow.value;
     c06:	34 96       	adiw	r30, 0x04	; 4
     c08:	b1 82       	std	Z+1, r11	; 0x01
     c0a:	a0 82       	st	Z, r10
    then5.next = NULL;
     c0c:	13 82       	std	Z+3, r1	; 0x03
     c0e:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if52;
    if52.value = &oneM.value;
     c10:	08 96       	adiw	r24, 0x08	; 8
     c12:	dc 01       	movw	r26, r24
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	3c 93       	st	X, r19
     c18:	2e 93       	st	-X, r18
    if52.next = NULL;
     c1a:	13 96       	adiw	r26, 0x03	; 3
     c1c:	1c 92       	st	X, r1
     c1e:	1e 92       	st	-X, r1
     c20:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if51;
    if51.value = &still.value;
     c22:	14 96       	adiw	r26, 0x04	; 4
     c24:	6e 54       	subi	r22, 0x4E	; 78
     c26:	71 40       	sbci	r23, 0x01	; 1
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	7c 93       	st	X, r23
     c2c:	6e 93       	st	-X, r22
    if51.next = &if52;
     c2e:	13 96       	adiw	r26, 0x03	; 3
     c30:	9c 93       	st	X, r25
     c32:	8e 93       	st	-X, r24
     c34:	12 97       	sbiw	r26, 0x02	; 2
    
    rule5.if_side = &if51;
     c36:	c3 58       	subi	r28, 0x83	; 131
     c38:	de 4f       	sbci	r29, 0xFE	; 254
     c3a:	b9 83       	std	Y+1, r27	; 0x01
     c3c:	a8 83       	st	Y, r26
     c3e:	cd 57       	subi	r28, 0x7D	; 125
     c40:	d1 40       	sbci	r29, 0x01	; 1
    rule5.then_side = &then5;
     c42:	c1 58       	subi	r28, 0x81	; 129
     c44:	de 4f       	sbci	r29, 0xFE	; 254
     c46:	f9 83       	std	Y+1, r31	; 0x01
     c48:	e8 83       	st	Y, r30
     c4a:	cf 57       	subi	r28, 0x7F	; 127
     c4c:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is cruising and distance is oneM then speed is slow
    struct rule_element_type then6;
    then6.value = &slow.value;
     c4e:	3c 96       	adiw	r30, 0x0c	; 12
     c50:	b1 82       	std	Z+1, r11	; 0x01
     c52:	a0 82       	st	Z, r10
    then6.next = NULL;
     c54:	13 82       	std	Z+3, r1	; 0x03
     c56:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if62;
    if62.value = &oneM.value;
     c58:	0c 96       	adiw	r24, 0x0c	; 12
     c5a:	dc 01       	movw	r26, r24
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	3c 93       	st	X, r19
     c60:	2e 93       	st	-X, r18
    if62.next = NULL;
     c62:	13 96       	adiw	r26, 0x03	; 3
     c64:	1c 92       	st	X, r1
     c66:	1e 92       	st	-X, r1
     c68:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if61;
    if61.value = &cruising.value;
     c6a:	24 54       	subi	r18, 0x44	; 68
     c6c:	3e 4f       	sbci	r19, 0xFE	; 254
     c6e:	0f 2e       	mov	r0, r31
     c70:	ff ea       	ldi	r31, 0xAF	; 175
     c72:	8f 2e       	mov	r8, r31
     c74:	91 2c       	mov	r9, r1
     c76:	f0 2d       	mov	r31, r0
     c78:	8c 0e       	add	r8, r28
     c7a:	9d 1e       	adc	r9, r29
     c7c:	d9 01       	movw	r26, r18
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 92       	st	X, r9
     c82:	8e 92       	st	-X, r8
    if61.next = &if62;
     c84:	13 96       	adiw	r26, 0x03	; 3
     c86:	9c 93       	st	X, r25
     c88:	8e 93       	st	-X, r24
     c8a:	12 97       	sbiw	r26, 0x02	; 2
    
    rule6.if_side = &if61;
     c8c:	cd 57       	subi	r28, 0x7D	; 125
     c8e:	de 4f       	sbci	r29, 0xFE	; 254
     c90:	39 83       	std	Y+1, r19	; 0x01
     c92:	28 83       	st	Y, r18
     c94:	c3 58       	subi	r28, 0x83	; 131
     c96:	d1 40       	sbci	r29, 0x01	; 1
    rule6.then_side = &then6;
     c98:	cb 57       	subi	r28, 0x7B	; 123
     c9a:	de 4f       	sbci	r29, 0xFE	; 254
     c9c:	f9 83       	std	Y+1, r31	; 0x01
     c9e:	e8 83       	st	Y, r30
     ca0:	c5 58       	subi	r28, 0x85	; 133
     ca2:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is low and distance is twoM then speed is cruise
    struct rule_element_type then7;
    then7.value = &cruise.value;
     ca4:	3c 96       	adiw	r30, 0x0c	; 12
     ca6:	d1 82       	std	Z+1, r13	; 0x01
     ca8:	c0 82       	st	Z, r12
    then7.next = NULL;
     caa:	13 82       	std	Z+3, r1	; 0x03
     cac:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if72;
    if72.value = &twoM.value;
     cae:	5e 01       	movw	r10, r28
     cb0:	2b e0       	ldi	r18, 0x0B	; 11
     cb2:	a2 1a       	sub	r10, r18
     cb4:	2e ef       	ldi	r18, 0xFE	; 254
     cb6:	b2 0a       	sbc	r11, r18
     cb8:	82 5a       	subi	r24, 0xA2	; 162
     cba:	91 40       	sbci	r25, 0x01	; 1
     cbc:	d5 01       	movw	r26, r10
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
    if72.next = NULL;
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	1c 92       	st	X, r1
     cc8:	1e 92       	st	-X, r1
     cca:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if71;
    if71.value = &low.value;
     ccc:	24 5f       	subi	r18, 0xF4	; 244
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f9 e9       	ldi	r31, 0x99	; 153
     cd4:	8f 2e       	mov	r8, r31
     cd6:	91 2c       	mov	r9, r1
     cd8:	f0 2d       	mov	r31, r0
     cda:	8c 0e       	add	r8, r28
     cdc:	9d 1e       	adc	r9, r29
     cde:	d9 01       	movw	r26, r18
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	9c 92       	st	X, r9
     ce4:	8e 92       	st	-X, r8
    if71.next = &if72;
     ce6:	13 96       	adiw	r26, 0x03	; 3
     ce8:	bc 92       	st	X, r11
     cea:	ae 92       	st	-X, r10
     cec:	12 97       	sbiw	r26, 0x02	; 2
    
    rule7.if_side = &if71;
     cee:	c7 57       	subi	r28, 0x77	; 119
     cf0:	de 4f       	sbci	r29, 0xFE	; 254
     cf2:	39 83       	std	Y+1, r19	; 0x01
     cf4:	28 83       	st	Y, r18
     cf6:	c9 58       	subi	r28, 0x89	; 137
     cf8:	d1 40       	sbci	r29, 0x01	; 1
    rule7.then_side = &then7;
     cfa:	c5 57       	subi	r28, 0x75	; 117
     cfc:	de 4f       	sbci	r29, 0xFE	; 254
     cfe:	f9 83       	std	Y+1, r31	; 0x01
     d00:	e8 83       	st	Y, r30
     d02:	cb 58       	subi	r28, 0x8B	; 139
     d04:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is medium and distance is twoM then speed is medHigh
    
    struct rule_element_type then8;
    then8.value = &medHigh.value;
     d06:	3c 96       	adiw	r30, 0x0c	; 12
     d08:	26 5b       	subi	r18, 0xB6	; 182
     d0a:	31 09       	sbc	r19, r1
     d0c:	31 83       	std	Z+1, r19	; 0x01
     d0e:	20 83       	st	Z, r18
    then8.next = NULL;
     d10:	13 82       	std	Z+3, r1	; 0x03
     d12:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if82;
    if82.value = &twoM.value;
     d14:	4e 01       	movw	r8, r28
     d16:	af ef       	ldi	r26, 0xFF	; 255
     d18:	8a 1a       	sub	r8, r26
     d1a:	ad ef       	ldi	r26, 0xFD	; 253
     d1c:	9a 0a       	sbc	r9, r26
     d1e:	d4 01       	movw	r26, r8
     d20:	11 96       	adiw	r26, 0x01	; 1
     d22:	9c 93       	st	X, r25
     d24:	8e 93       	st	-X, r24
    if82.next = NULL;
     d26:	13 96       	adiw	r26, 0x03	; 3
     d28:	1c 92       	st	X, r1
     d2a:	1e 92       	st	-X, r1
     d2c:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if81;
    if81.value = &medium.value;
     d2e:	5e 01       	movw	r10, r28
     d30:	bb ef       	ldi	r27, 0xFB	; 251
     d32:	ab 1a       	sub	r10, r27
     d34:	bd ef       	ldi	r27, 0xFD	; 253
     d36:	bb 0a       	sbc	r11, r27
     d38:	0f 2e       	mov	r0, r31
     d3a:	f5 ec       	ldi	r31, 0xC5	; 197
     d3c:	2f 2e       	mov	r2, r31
     d3e:	31 2c       	mov	r3, r1
     d40:	f0 2d       	mov	r31, r0
     d42:	2c 0e       	add	r2, r28
     d44:	3d 1e       	adc	r3, r29
     d46:	d5 01       	movw	r26, r10
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	3c 92       	st	X, r3
     d4c:	2e 92       	st	-X, r2
    if81.next = &if82;
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	9c 92       	st	X, r9
     d52:	8e 92       	st	-X, r8
     d54:	12 97       	sbiw	r26, 0x02	; 2
    
    rule8.if_side = &if81;
     d56:	c1 57       	subi	r28, 0x71	; 113
     d58:	de 4f       	sbci	r29, 0xFE	; 254
     d5a:	b9 82       	std	Y+1, r11	; 0x01
     d5c:	a8 82       	st	Y, r10
     d5e:	cf 58       	subi	r28, 0x8F	; 143
     d60:	d1 40       	sbci	r29, 0x01	; 1
    rule8.then_side = &then8;
     d62:	cf 56       	subi	r28, 0x6F	; 111
     d64:	de 4f       	sbci	r29, 0xFE	; 254
     d66:	f9 83       	std	Y+1, r31	; 0x01
     d68:	e8 83       	st	Y, r30
     d6a:	c1 59       	subi	r28, 0x91	; 145
     d6c:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is high and distance is twoM then speed is medHigh
    struct rule_element_type then9;
    then9.value = &medHigh.value;
     d6e:	3c 96       	adiw	r30, 0x0c	; 12
     d70:	31 83       	std	Z+1, r19	; 0x01
     d72:	20 83       	st	Z, r18
    then9.next = NULL;
     d74:	13 82       	std	Z+3, r1	; 0x03
     d76:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if92;
    if92.value = &twoM.value;
     d78:	4e 01       	movw	r8, r28
     d7a:	a3 ef       	ldi	r26, 0xF3	; 243
     d7c:	8a 1a       	sub	r8, r26
     d7e:	ad ef       	ldi	r26, 0xFD	; 253
     d80:	9a 0a       	sbc	r9, r26
     d82:	d4 01       	movw	r26, r8
     d84:	11 96       	adiw	r26, 0x01	; 1
     d86:	9c 93       	st	X, r25
     d88:	8e 93       	st	-X, r24
    if92.next = NULL;
     d8a:	13 96       	adiw	r26, 0x03	; 3
     d8c:	1c 92       	st	X, r1
     d8e:	1e 92       	st	-X, r1
     d90:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if91;
    if91.value = &high.value;
     d92:	5e 01       	movw	r10, r28
     d94:	bf ee       	ldi	r27, 0xEF	; 239
     d96:	ab 1a       	sub	r10, r27
     d98:	bd ef       	ldi	r27, 0xFD	; 253
     d9a:	bb 0a       	sbc	r11, r27
     d9c:	d5 01       	movw	r26, r10
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	5c 93       	st	X, r21
     da2:	4e 93       	st	-X, r20
    if91.next = &if92;
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	9c 92       	st	X, r9
     da8:	8e 92       	st	-X, r8
     daa:	12 97       	sbiw	r26, 0x02	; 2
    
    rule9.if_side = &if91;
     dac:	d7 01       	movw	r26, r14
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	bc 92       	st	X, r11
     db2:	ae 92       	st	-X, r10
    rule9.then_side = &then9;
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	fc 93       	st	X, r31
     db8:	ee 93       	st	-X, r30
     dba:	12 97       	sbiw	r26, 0x02	; 2
    
    // if speed is still and distance is twoM then speed is cruise
    struct rule_element_type then10;
    then10.value = &cruise.value;
     dbc:	3c 96       	adiw	r30, 0x0c	; 12
     dbe:	d1 82       	std	Z+1, r13	; 0x01
     dc0:	c0 82       	st	Z, r12
    then10.next = NULL;
     dc2:	13 82       	std	Z+3, r1	; 0x03
     dc4:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if102;
    if102.value = &twoM.value;
     dc6:	7e 01       	movw	r14, r28
     dc8:	b7 ee       	ldi	r27, 0xE7	; 231
     dca:	eb 1a       	sub	r14, r27
     dcc:	bd ef       	ldi	r27, 0xFD	; 253
     dce:	fb 0a       	sbc	r15, r27
     dd0:	d7 01       	movw	r26, r14
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	9c 93       	st	X, r25
     dd6:	8e 93       	st	-X, r24
    if102.next = NULL;
     dd8:	13 96       	adiw	r26, 0x03	; 3
     dda:	1c 92       	st	X, r1
     ddc:	1e 92       	st	-X, r1
     dde:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if101;
    if101.value = &still.value;
     de0:	4e 5b       	subi	r20, 0xBE	; 190
     de2:	5e 4f       	sbci	r21, 0xFE	; 254
     de4:	da 01       	movw	r26, r20
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	7c 93       	st	X, r23
     dea:	6e 93       	st	-X, r22
    if101.next = &if102;
     dec:	13 96       	adiw	r26, 0x03	; 3
     dee:	fc 92       	st	X, r15
     df0:	ee 92       	st	-X, r14
     df2:	12 97       	sbiw	r26, 0x02	; 2
    
    rule10.if_side = &if101;
     df4:	c5 56       	subi	r28, 0x65	; 101
     df6:	de 4f       	sbci	r29, 0xFE	; 254
     df8:	59 83       	std	Y+1, r21	; 0x01
     dfa:	48 83       	st	Y, r20
     dfc:	cb 59       	subi	r28, 0x9B	; 155
     dfe:	d1 40       	sbci	r29, 0x01	; 1
    rule10.then_side = &then10;
     e00:	c3 56       	subi	r28, 0x63	; 99
     e02:	de 4f       	sbci	r29, 0xFE	; 254
     e04:	f9 83       	std	Y+1, r31	; 0x01
     e06:	e8 83       	st	Y, r30
     e08:	cd 59       	subi	r28, 0x9D	; 157
     e0a:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is cruising and distance is twoM then speed is medHigh
    struct rule_element_type then11;
    then11.value = &medHigh.value;
     e0c:	3c 96       	adiw	r30, 0x0c	; 12
     e0e:	31 83       	std	Z+1, r19	; 0x01
     e10:	20 83       	st	Z, r18
    then11.next = NULL;
     e12:	13 82       	std	Z+3, r1	; 0x03
     e14:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if112;
    if112.value = &twoM.value;
     e16:	2e 51       	subi	r18, 0x1E	; 30
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	d9 01       	movw	r26, r18
     e1c:	11 96       	adiw	r26, 0x01	; 1
     e1e:	9c 93       	st	X, r25
     e20:	8e 93       	st	-X, r24
    if112.next = NULL;
     e22:	13 96       	adiw	r26, 0x03	; 3
     e24:	1c 92       	st	X, r1
     e26:	1e 92       	st	-X, r1
     e28:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if111;
    if111.value = &cruising.value;
     e2a:	8e 51       	subi	r24, 0x1E	; 30
     e2c:	9e 4f       	sbci	r25, 0xFE	; 254
     e2e:	0f 2e       	mov	r0, r31
     e30:	ff ea       	ldi	r31, 0xAF	; 175
     e32:	2f 2e       	mov	r2, r31
     e34:	31 2c       	mov	r3, r1
     e36:	f0 2d       	mov	r31, r0
     e38:	2c 0e       	add	r2, r28
     e3a:	3d 1e       	adc	r3, r29
     e3c:	dc 01       	movw	r26, r24
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	3c 92       	st	X, r3
     e42:	2e 92       	st	-X, r2
    if111.next = &if112;
     e44:	13 96       	adiw	r26, 0x03	; 3
     e46:	3c 93       	st	X, r19
     e48:	2e 93       	st	-X, r18
     e4a:	12 97       	sbiw	r26, 0x02	; 2
    
    rule11.if_side = &if111;
     e4c:	cf 55       	subi	r28, 0x5F	; 95
     e4e:	de 4f       	sbci	r29, 0xFE	; 254
     e50:	99 83       	std	Y+1, r25	; 0x01
     e52:	88 83       	st	Y, r24
     e54:	c1 5a       	subi	r28, 0xA1	; 161
     e56:	d1 40       	sbci	r29, 0x01	; 1
    rule11.then_side = &then11;
     e58:	cd 55       	subi	r28, 0x5D	; 93
     e5a:	de 4f       	sbci	r29, 0xFE	; 254
     e5c:	f9 83       	std	Y+1, r31	; 0x01
     e5e:	e8 83       	st	Y, r30
     e60:	c3 5a       	subi	r28, 0xA3	; 163
     e62:	d1 40       	sbci	r29, 0x01	; 1
    
    // if distance is threeM then speed is max
    struct rule_element_type then12;
    then12.value = &max.value;
     e64:	28 5f       	subi	r18, 0xF8	; 248
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	80 5d       	subi	r24, 0xD0	; 208
     e6a:	91 09       	sbc	r25, r1
     e6c:	d9 01       	movw	r26, r18
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	8e 93       	st	-X, r24
    then12.next = NULL;
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	1c 92       	st	X, r1
     e78:	1e 92       	st	-X, r1
     e7a:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if121;
    if121.value = &threeM.value;
     e7c:	14 96       	adiw	r26, 0x04	; 4
     e7e:	8c 5f       	subi	r24, 0xFC	; 252
     e80:	91 09       	sbc	r25, r1
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	9c 93       	st	X, r25
     e86:	8e 93       	st	-X, r24
    if121.next = NULL;
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	1c 92       	st	X, r1
     e8c:	1e 92       	st	-X, r1
     e8e:	12 97       	sbiw	r26, 0x02	; 2
    
    rule12.if_side = &if121;
     e90:	f8 01       	movw	r30, r16
     e92:	b1 83       	std	Z+1, r27	; 0x01
     e94:	a0 83       	st	Z, r26
    rule12.then_side = &then12;
     e96:	33 83       	std	Z+3, r19	; 0x03
     e98:	22 83       	std	Z+2, r18	; 0x02
    

    
    
    // the methods performing the FLC
    fuzzification();
     e9a:	95 d0       	rcall	.+298    	; 0xfc6 <fuzzification>
    rule_evaluation();
     e9c:	bb d0       	rcall	.+374    	; 0x1014 <rule_evaluation>
    defuzzification();
     e9e:	00 d1       	rcall	.+512    	; 0x10a0 <defuzzification>
	if (pwm.value > 2825)
     ea0:	d3 01       	movw	r26, r6
     ea2:	1a 96       	adiw	r26, 0x0a	; 10
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	1b 97       	sbiw	r26, 0x0b	; 11
     eaa:	8a 30       	cpi	r24, 0x0A	; 10
     eac:	bb e0       	ldi	r27, 0x0B	; 11
     eae:	9b 07       	cpc	r25, r27
     eb0:	24 f0       	brlt	.+8      	; 0xeba <FLC_obstacle+0x846>
	{
		setESC(2825);
     eb2:	89 e0       	ldi	r24, 0x09	; 9
     eb4:	9b e0       	ldi	r25, 0x0B	; 11
     eb6:	a5 d2       	rcall	.+1354   	; 0x1402 <setESC>
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <FLC_obstacle+0x858>
	}
	else if (pwm.value < 2750)
     eba:	8e 3b       	cpi	r24, 0xBE	; 190
     ebc:	ea e0       	ldi	r30, 0x0A	; 10
     ebe:	9e 07       	cpc	r25, r30
     ec0:	24 f4       	brge	.+8      	; 0xeca <FLC_obstacle+0x856>
	{
		setESC(2750);
     ec2:	8e eb       	ldi	r24, 0xBE	; 190
     ec4:	9a e0       	ldi	r25, 0x0A	; 10
     ec6:	9d d2       	rcall	.+1338   	; 0x1402 <setESC>
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <FLC_obstacle+0x858>
	}
	else
	{
		setESC(pwm.value);
     eca:	9b d2       	rcall	.+1334   	; 0x1402 <setESC>
	}
	
} 
     ecc:	cc 5c       	subi	r28, 0xCC	; 204
     ece:	dd 4f       	sbci	r29, 0xFD	; 253
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	3f 90       	pop	r3
     efc:	2f 90       	pop	r2
     efe:	08 95       	ret

00000f00 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     f00:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     f02:	84 85       	ldd	r24, Z+12	; 0x0c
     f04:	95 85       	ldd	r25, Z+13	; 0x0d
     f06:	9b 01       	movw	r18, r22
     f08:	28 1b       	sub	r18, r24
     f0a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     f0c:	86 85       	ldd	r24, Z+14	; 0x0e
     f0e:	97 85       	ldd	r25, Z+15	; 0x0f
     f10:	86 1b       	sub	r24, r22
     f12:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     f14:	12 16       	cp	r1, r18
     f16:	13 06       	cpc	r1, r19
     f18:	f4 f4       	brge	.+60     	; 0xf56 <compute_degree_of_membership+0x56>
     f1a:	18 16       	cp	r1, r24
     f1c:	19 06       	cpc	r1, r25
     f1e:	f4 f4       	brge	.+60     	; 0xf5c <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     f20:	60 89       	ldd	r22, Z+16	; 0x10
     f22:	71 89       	ldd	r23, Z+17	; 0x11
     f24:	a2 89       	ldd	r26, Z+18	; 0x12
     f26:	b3 89       	ldd	r27, Z+19	; 0x13
     f28:	8a 9f       	mul	r24, r26
     f2a:	a0 01       	movw	r20, r0
     f2c:	8b 9f       	mul	r24, r27
     f2e:	50 0d       	add	r21, r0
     f30:	9a 9f       	mul	r25, r26
     f32:	50 0d       	add	r21, r0
     f34:	11 24       	eor	r1, r1
     f36:	26 9f       	mul	r18, r22
     f38:	c0 01       	movw	r24, r0
     f3a:	27 9f       	mul	r18, r23
     f3c:	90 0d       	add	r25, r0
     f3e:	36 9f       	mul	r19, r22
     f40:	90 0d       	add	r25, r0
     f42:	11 24       	eor	r1, r1
     f44:	48 17       	cp	r20, r24
     f46:	59 07       	cpc	r21, r25
     f48:	0c f4       	brge	.+2      	; 0xf4c <compute_degree_of_membership+0x4c>
     f4a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f0       	breq	.+2      	; 0xf54 <compute_degree_of_membership+0x54>
     f52:	3c f4       	brge	.+14     	; 0xf62 <compute_degree_of_membership+0x62>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <compute_degree_of_membership+0x66>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     f66:	93 87       	std	Z+11, r25	; 0x0b
     f68:	82 87       	std	Z+10, r24	; 0x0a
     f6a:	08 95       	ret

00000f6c <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     f76:	c6 85       	ldd	r28, Z+14	; 0x0e
     f78:	d7 85       	ldd	r29, Z+15	; 0x0f
     f7a:	84 85       	ldd	r24, Z+12	; 0x0c
     f7c:	95 85       	ldd	r25, Z+13	; 0x0d
     f7e:	c8 1b       	sub	r28, r24
     f80:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     f82:	22 85       	ldd	r18, Z+10	; 0x0a
     f84:	33 85       	ldd	r19, Z+11	; 0x0b
     f86:	60 89       	ldd	r22, Z+16	; 0x10
     f88:	71 89       	ldd	r23, Z+17	; 0x11
     f8a:	c9 01       	movw	r24, r18
     f8c:	4b d6       	rcall	.+3222   	; 0x1c24 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     f8e:	8e 01       	movw	r16, r28
     f90:	06 1b       	sub	r16, r22
     f92:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     f94:	62 89       	ldd	r22, Z+18	; 0x12
     f96:	73 89       	ldd	r23, Z+19	; 0x13
     f98:	c9 01       	movw	r24, r18
     f9a:	44 d6       	rcall	.+3208   	; 0x1c24 <__divmodhi4>
    top = base - run_1 - run_2;
     f9c:	06 1b       	sub	r16, r22
     f9e:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     fa0:	c0 0f       	add	r28, r16
     fa2:	d1 1f       	adc	r29, r17
     fa4:	2c 9f       	mul	r18, r28
     fa6:	c0 01       	movw	r24, r0
     fa8:	2d 9f       	mul	r18, r29
     faa:	90 0d       	add	r25, r0
     fac:	3c 9f       	mul	r19, r28
     fae:	90 0d       	add	r25, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	99 23       	and	r25, r25
     fb4:	0c f4       	brge	.+2      	; 0xfb8 <compute_area_of_trapezoid+0x4c>
     fb6:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     fce:	00 91 f9 02 	lds	r16, 0x02F9
     fd2:	10 91 fa 02 	lds	r17, 0x02FA
     fd6:	01 15       	cp	r16, r1
     fd8:	11 05       	cpc	r17, r1
     fda:	b9 f0       	breq	.+46     	; 0x100a <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     fdc:	f8 01       	movw	r30, r16
     fde:	c4 85       	ldd	r28, Z+12	; 0x0c
     fe0:	d5 85       	ldd	r29, Z+13	; 0x0d
     fe2:	20 97       	sbiw	r28, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <fuzzification+0x38>
            if (mf!=NULL) {
     fe6:	20 97       	sbiw	r28, 0x00	; 0
     fe8:	29 f0       	breq	.+10     	; 0xff4 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     fea:	f8 01       	movw	r30, r16
     fec:	62 85       	ldd	r22, Z+10	; 0x0a
     fee:	73 85       	ldd	r23, Z+11	; 0x0b
     ff0:	ce 01       	movw	r24, r28
     ff2:	86 df       	rcall	.-244    	; 0xf00 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     ff4:	0c 88       	ldd	r0, Y+20	; 0x14
     ff6:	dd 89       	ldd	r29, Y+21	; 0x15
     ff8:	c0 2d       	mov	r28, r0
     ffa:	20 97       	sbiw	r28, 0x00	; 0
     ffc:	a1 f7       	brne	.-24     	; 0xfe6 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     ffe:	f8 01       	movw	r30, r16
    1000:	06 85       	ldd	r16, Z+14	; 0x0e
    1002:	17 85       	ldd	r17, Z+15	; 0x0f
    1004:	01 15       	cp	r16, r1
    1006:	11 05       	cpc	r17, r1
    1008:	49 f7       	brne	.-46     	; 0xfdc <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	08 95       	ret

00001014 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    101c:	c0 91 fb 02 	lds	r28, 0x02FB
    1020:	d0 91 fc 02 	lds	r29, 0x02FC
    1024:	20 97       	sbiw	r28, 0x00	; 0
    1026:	b9 f1       	breq	.+110    	; 0x1096 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1028:	00 e0       	ldi	r16, 0x00	; 0
    102a:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    102c:	e8 81       	ld	r30, Y
    102e:	f9 81       	ldd	r31, Y+1	; 0x01
    1030:	30 97       	sbiw	r30, 0x00	; 0
    1032:	81 f0       	breq	.+32     	; 0x1054 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1034:	20 2f       	mov	r18, r16
    1036:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    1038:	a0 81       	ld	r26, Z
    103a:	b1 81       	ldd	r27, Z+1	; 0x01
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	82 17       	cp	r24, r18
    1042:	93 07       	cpc	r25, r19
    1044:	0c f4       	brge	.+2      	; 0x1048 <rule_evaluation+0x34>
    1046:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1048:	02 80       	ldd	r0, Z+2	; 0x02
    104a:	f3 81       	ldd	r31, Z+3	; 0x03
    104c:	e0 2d       	mov	r30, r0
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	99 f7       	brne	.-26     	; 0x1038 <rule_evaluation+0x24>
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1054:	20 2f       	mov	r18, r16
    1056:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1058:	ea 81       	ldd	r30, Y+2	; 0x02
    105a:	fb 81       	ldd	r31, Y+3	; 0x03
    105c:	30 97       	sbiw	r30, 0x00	; 0
    105e:	b1 f0       	breq	.+44     	; 0x108c <rule_evaluation+0x78>
    1060:	72 2f       	mov	r23, r18
    1062:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1064:	a0 81       	ld	r26, Z
    1066:	b1 81       	ldd	r27, Z+1	; 0x01
    1068:	8d 91       	ld	r24, X+
    106a:	9c 91       	ld	r25, X
    106c:	11 97       	sbiw	r26, 0x01	; 1
    106e:	57 2f       	mov	r21, r23
    1070:	46 2f       	mov	r20, r22
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	14 f4       	brge	.+4      	; 0x107c <rule_evaluation+0x68>
    1078:	58 2f       	mov	r21, r24
    107a:	49 2f       	mov	r20, r25
    107c:	5c 93       	st	X, r21
    107e:	11 96       	adiw	r26, 0x01	; 1
    1080:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1082:	02 80       	ldd	r0, Z+2	; 0x02
    1084:	f3 81       	ldd	r31, Z+3	; 0x03
    1086:	e0 2d       	mov	r30, r0
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	61 f7       	brne	.-40     	; 0x1064 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    108c:	0c 80       	ldd	r0, Y+4	; 0x04
    108e:	dd 81       	ldd	r29, Y+5	; 0x05
    1090:	c0 2d       	mov	r28, r0
    1092:	20 97       	sbiw	r28, 0x00	; 0
    1094:	59 f6       	brne	.-106    	; 0x102c <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    10a0:	2f 92       	push	r2
    10a2:	3f 92       	push	r3
    10a4:	4f 92       	push	r4
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <defuzzification+0x26>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <defuzzification+0x28>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <defuzzification+0x2a>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    10ce:	80 91 f7 02 	lds	r24, 0x02F7
    10d2:	90 91 f8 02 	lds	r25, 0x02F8
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	89 2b       	or	r24, r25
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <defuzzification+0x40>
    10de:	84 c0       	rjmp	.+264    	; 0x11e8 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    10e0:	eb 81       	ldd	r30, Y+3	; 0x03
    10e2:	fc 81       	ldd	r31, Y+4	; 0x04
    10e4:	04 84       	ldd	r0, Z+12	; 0x0c
    10e6:	f5 85       	ldd	r31, Z+13	; 0x0d
    10e8:	e0 2d       	mov	r30, r0
    10ea:	fe 83       	std	Y+6, r31	; 0x06
    10ec:	ed 83       	std	Y+5, r30	; 0x05
    10ee:	ef 2b       	or	r30, r31
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <defuzzification+0x54>
    10f2:	66 c0       	rjmp	.+204    	; 0x11c0 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    10f4:	51 2c       	mov	r5, r1
    10f6:	61 2c       	mov	r6, r1
    10f8:	71 2c       	mov	r7, r1
    10fa:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    10fc:	31 2c       	mov	r3, r1
    10fe:	21 2c       	mov	r2, r1
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	31 df       	rcall	.-414    	; 0xf6c <compute_area_of_trapezoid>
    110a:	bc 01       	movw	r22, r24
    110c:	88 27       	eor	r24, r24
    110e:	77 fd       	sbrc	r23, 7
    1110:	80 95       	com	r24
    1112:	98 2f       	mov	r25, r24
    1114:	98 d4       	rcall	.+2352   	; 0x1a46 <__floatsisf>
    1116:	6b 01       	movw	r12, r22
    1118:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    111a:	ed 81       	ldd	r30, Y+5	; 0x05
    111c:	fe 81       	ldd	r31, Y+6	; 0x06
    111e:	04 85       	ldd	r16, Z+12	; 0x0c
    1120:	15 85       	ldd	r17, Z+13	; 0x0d
    1122:	b8 01       	movw	r22, r16
    1124:	88 27       	eor	r24, r24
    1126:	77 fd       	sbrc	r23, 7
    1128:	80 95       	com	r24
    112a:	98 2f       	mov	r25, r24
    112c:	8c d4       	rcall	.+2328   	; 0x1a46 <__floatsisf>
    112e:	4b 01       	movw	r8, r22
    1130:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1132:	ed 81       	ldd	r30, Y+5	; 0x05
    1134:	fe 81       	ldd	r31, Y+6	; 0x06
    1136:	86 85       	ldd	r24, Z+14	; 0x0e
    1138:	97 85       	ldd	r25, Z+15	; 0x0f
    113a:	80 1b       	sub	r24, r16
    113c:	91 0b       	sbc	r25, r17
    113e:	bc 01       	movw	r22, r24
    1140:	12 f4       	brpl	.+4      	; 0x1146 <defuzzification+0xa6>
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	75 95       	asr	r23
    1148:	67 95       	ror	r22
            centroid = centroid + intermed;
    114a:	88 27       	eor	r24, r24
    114c:	77 fd       	sbrc	r23, 7
    114e:	80 95       	com	r24
    1150:	98 2f       	mov	r25, r24
    1152:	79 d4       	rcall	.+2290   	; 0x1a46 <__floatsisf>
    1154:	a5 01       	movw	r20, r10
    1156:	94 01       	movw	r18, r8
    1158:	77 d3       	rcall	.+1774   	; 0x1848 <__addsf3>
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    115e:	c7 01       	movw	r24, r14
    1160:	b6 01       	movw	r22, r12
    1162:	fd d4       	rcall	.+2554   	; 0x1b5e <__mulsf3>
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	63 2d       	mov	r22, r3
    116a:	72 2d       	mov	r23, r2
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	6b d3       	rcall	.+1750   	; 0x1848 <__addsf3>
    1172:	36 2e       	mov	r3, r22
    1174:	27 2e       	mov	r2, r23
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    117a:	a7 01       	movw	r20, r14
    117c:	96 01       	movw	r18, r12
    117e:	65 2d       	mov	r22, r5
    1180:	76 2d       	mov	r23, r6
    1182:	87 2d       	mov	r24, r7
    1184:	94 2d       	mov	r25, r4
    1186:	60 d3       	rcall	.+1728   	; 0x1848 <__addsf3>
    1188:	56 2e       	mov	r5, r22
    118a:	67 2e       	mov	r6, r23
    118c:	78 2e       	mov	r7, r24
    118e:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1190:	ed 81       	ldd	r30, Y+5	; 0x05
    1192:	fe 81       	ldd	r31, Y+6	; 0x06
    1194:	04 88       	ldd	r0, Z+20	; 0x14
    1196:	f5 89       	ldd	r31, Z+21	; 0x15
    1198:	e0 2d       	mov	r30, r0
    119a:	fe 83       	std	Y+6, r31	; 0x06
    119c:	ed 83       	std	Y+5, r30	; 0x05
    119e:	ef 2b       	or	r30, r31
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <defuzzification+0x104>
    11a2:	b0 cf       	rjmp	.-160    	; 0x1104 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    11a4:	26 2f       	mov	r18, r22
    11a6:	37 2f       	mov	r19, r23
    11a8:	48 2f       	mov	r20, r24
    11aa:	59 2f       	mov	r21, r25
    11ac:	63 2d       	mov	r22, r3
    11ae:	72 2d       	mov	r23, r2
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	ad d3       	rcall	.+1882   	; 0x1910 <__divsf3>
    11b6:	26 2f       	mov	r18, r22
    11b8:	37 2f       	mov	r19, r23
    11ba:	48 2f       	mov	r20, r24
    11bc:	59 2f       	mov	r21, r25
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    11c8:	62 2f       	mov	r22, r18
    11ca:	73 2f       	mov	r23, r19
    11cc:	84 2f       	mov	r24, r20
    11ce:	95 2f       	mov	r25, r21
    11d0:	07 d4       	rcall	.+2062   	; 0x19e0 <__fixsfsi>
    11d2:	eb 81       	ldd	r30, Y+3	; 0x03
    11d4:	fc 81       	ldd	r31, Y+4	; 0x04
    11d6:	73 87       	std	Z+11, r23	; 0x0b
    11d8:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    11da:	86 85       	ldd	r24, Z+14	; 0x0e
    11dc:	97 85       	ldd	r25, Z+15	; 0x0f
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	89 2b       	or	r24, r25
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <defuzzification+0x148>
    11e6:	7c cf       	rjmp	.-264    	; 0x10e0 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    11e8:	26 96       	adiw	r28, 0x06	; 6
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	7f 90       	pop	r7
    120e:	6f 90       	pop	r6
    1210:	5f 90       	pop	r5
    1212:	4f 90       	pop	r4
    1214:	3f 90       	pop	r3
    1216:	2f 90       	pop	r2
    1218:	08 95       	ret

0000121a <MATLAB_MF>:
/* This function takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format in general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec 01       	movw	r28, r24
    1230:	6a 01       	movw	r12, r20
    1232:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    1234:	1e d5       	rcall	.+2620   	; 0x1c72 <strcpy>
    newMf->value = 0;
    1236:	1b 86       	std	Y+11, r1	; 0x0b
    1238:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    123a:	dd 86       	std	Y+13, r13	; 0x0d
    123c:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    123e:	ff 86       	std	Y+15, r15	; 0x0f
    1240:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    1242:	b5 01       	movw	r22, r10
    1244:	6c 19       	sub	r22, r12
    1246:	7d 09       	sbc	r23, r13
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	31 e0       	ldi	r19, 0x01	; 1
    124c:	c9 01       	movw	r24, r18
    124e:	ea d4       	rcall	.+2516   	; 0x1c24 <__divmodhi4>
    1250:	79 8b       	std	Y+17, r23	; 0x11
    1252:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    1254:	b7 01       	movw	r22, r14
    1256:	60 1b       	sub	r22, r16
    1258:	71 0b       	sbc	r23, r17
    125a:	c9 01       	movw	r24, r18
    125c:	e3 d4       	rcall	.+2502   	; 0x1c24 <__divmodhi4>
    125e:	7b 8b       	std	Y+19, r23	; 0x13
    1260:	6a 8b       	std	Y+18, r22	; 0x12
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	08 95       	ret

00001278 <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	0b b6       	in	r0, 0x3b	; 59
    1284:	0f 92       	push	r0
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	80 91 ce 00 	lds	r24, 0x00CE
    1292:	8f 3f       	cpi	r24, 0xFF	; 255
    1294:	29 f4       	brne	.+10     	; 0x12a0 <__vector_28+0x28>
    1296:	10 92 1e 03 	sts	0x031E, r1
    129a:	10 92 1d 03 	sts	0x031D, r1
    129e:	10 c0       	rjmp	.+32     	; 0x12c0 <__vector_28+0x48>
    12a0:	e0 91 1d 03 	lds	r30, 0x031D
    12a4:	f0 91 1e 03 	lds	r31, 0x031E
    12a8:	e3 50       	subi	r30, 0x03	; 3
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	80 83       	st	Z, r24
    12ae:	80 91 1d 03 	lds	r24, 0x031D
    12b2:	90 91 1e 03 	lds	r25, 0x031E
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	90 93 1e 03 	sts	0x031E, r25
    12bc:	80 93 1d 03 	sts	0x031D, r24
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	0f 90       	pop	r0
    12ca:	0b be       	out	0x3b, r0	; 59
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <carInit>:
    12d6:	86 d0       	rcall	.+268    	; 0x13e4 <pwmInit>
    12d8:	36 d1       	rcall	.+620    	; 0x1546 <spi_slave_init>
    12da:	8d ec       	ldi	r24, 0xCD	; 205
    12dc:	9a e0       	ldi	r25, 0x0A	; 10
    12de:	91 d0       	rcall	.+290    	; 0x1402 <setESC>
    12e0:	84 e6       	ldi	r24, 0x64	; 100
    12e2:	9a e0       	ldi	r25, 0x0A	; 10
    12e4:	a9 c0       	rjmp	.+338    	; 0x1438 <setServo>
    12e6:	08 95       	ret

000012e8 <USART1_init>:
    12e8:	ec ec       	ldi	r30, 0xCC	; 204
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	11 82       	std	Z+1, r1	; 0x01
    12ee:	10 82       	st	Z, r1
    12f0:	20 e9       	ldi	r18, 0x90	; 144
    12f2:	20 93 c9 00 	sts	0x00C9, r18
    12f6:	2e e0       	ldi	r18, 0x0E	; 14
    12f8:	20 93 ca 00 	sts	0x00CA, r18
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	08 95       	ret

00001302 <__vector_18>:
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	80 91 da 01 	lds	r24, 0x01DA
    1316:	90 91 db 01 	lds	r25, 0x01DB
    131a:	8b 39       	cpi	r24, 0x9B	; 155
    131c:	26 e9       	ldi	r18, 0x96	; 150
    131e:	92 07       	cpc	r25, r18
    1320:	30 f4       	brcc	.+12     	; 0x132e <__vector_18+0x2c>
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 db 01 	sts	0x01DB, r25
    1328:	80 93 da 01 	sts	0x01DA, r24
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <__vector_18+0x3e>
    132e:	80 91 dc 01 	lds	r24, 0x01DC
    1332:	81 60       	ori	r24, 0x01	; 1
    1334:	80 93 dc 01 	sts	0x01DC, r24
    1338:	10 92 db 01 	sts	0x01DB, r1
    133c:	10 92 da 01 	sts	0x01DA, r1
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <main>:
	}

	/* main function
	*/
	int main (void)
	{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	2a 97       	sbiw	r28, 0x0a	; 10
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
	//	FLC_steering(170, 70);
	
	
		carInit();
    1364:	b8 df       	rcall	.-144    	; 0x12d6 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	90 ee       	ldi	r25, 0xE0	; 224
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	80 40       	sbci	r24, 0x00	; 0
    1370:	90 40       	sbci	r25, 0x00	; 0
    1372:	e1 f7       	brne	.-8      	; 0x136c <main+0x1c>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <main+0x26>
    1376:	00 00       	nop
		_delay_ms(5000);
		sei();		
    1378:	78 94       	sei
		unsigned char control_mode;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	b4 df       	rcall	.-152    	; 0x12e8 <USART1_init>
		int v;
		int d;
		

		//Setting for Testing
		DDRA = 0xFF;
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	81 b9       	out	0x01, r24	; 1
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
				PORTA = sensor_info.dist_sonic_middle;
				cli();
				
				FLC_obstacle(OCR1A, d);
    1384:	08 e8       	ldi	r16, 0x88	; 136
    1386:	10 e0       	ldi	r17, 0x00	; 0
				
				//Sending back information
				unsigned int esc_value_to_send;
				esc_value_to_send = (unsigned) (short) OCR1A;
				unsigned int steering_value_to_send;
				steering_value_to_send = (unsigned) (short) OCR1B;
    1388:	0f 2e       	mov	r0, r31
    138a:	fa e8       	ldi	r31, 0x8A	; 138
    138c:	af 2e       	mov	r10, r31
    138e:	b1 2c       	mov	r11, r1
    1390:	f0 2d       	mov	r31, r0
		DDRA = 0xFF;
		//End of test setting
		
		while (1) {
			
			 if (is_package_recieved()) {
    1392:	65 d1       	rcall	.+714    	; 0x165e <is_package_recieved>
    1394:	88 23       	and	r24, r24
    1396:	e9 f3       	breq	.-6      	; 0x1392 <main+0x42>
				
				//Reading Information
				read_sensor_info(&control_mode, sens_info_ptr);
    1398:	be 01       	movw	r22, r28
    139a:	6f 5f       	subi	r22, 0xFF	; 255
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	ce 01       	movw	r24, r28
    13a0:	0a 96       	adiw	r24, 0x0a	; 10
    13a2:	67 d1       	rcall	.+718    	; 0x1672 <read_sensor_info>
				
				c = (int) sensor_info.dist_right_line;
    13a4:	e9 80       	ldd	r14, Y+1	; 0x01
    13a6:	f1 2c       	mov	r15, r1
				v = (int) sensor_info.angular_diff;
    13a8:	ce 80       	ldd	r12, Y+6	; 0x06
    13aa:	d1 2c       	mov	r13, r1
				d = (int) sensor_info.dist_sonic_middle;
    13ac:	6a 81       	ldd	r22, Y+2	; 0x02
				PORTA = sensor_info.dist_sonic_middle;
    13ae:	62 b9       	out	0x02, r22	; 2
				cli();
    13b0:	f8 94       	cli
				
				FLC_obstacle(OCR1A, d);
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
				//Reading Information
				read_sensor_info(&control_mode, sens_info_ptr);
				
				c = (int) sensor_info.dist_right_line;
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
    13b8:	70 e0       	ldi	r23, 0x00	; 0
				PORTA = sensor_info.dist_sonic_middle;
				cli();
				
				FLC_obstacle(OCR1A, d);
    13ba:	5c d9       	rcall	.-3400   	; 0x674 <FLC_obstacle>
				FLC_steering(c, v);
    13bc:	b6 01       	movw	r22, r12
    13be:	c7 01       	movw	r24, r14
    13c0:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
				sei();
    13c4:	78 94       	sei
				
				//Sending back information
				unsigned int esc_value_to_send;
				esc_value_to_send = (unsigned) (short) OCR1A;
    13c6:	f8 01       	movw	r30, r16
    13c8:	c0 80       	ld	r12, Z
    13ca:	d1 80       	ldd	r13, Z+1	; 0x01
				unsigned int steering_value_to_send;
				steering_value_to_send = (unsigned) (short) OCR1B;
    13cc:	f5 01       	movw	r30, r10
    13ce:	e0 80       	ld	r14, Z
    13d0:	f1 80       	ldd	r15, Z+1	; 0x01
				//Big endian
				spi_send_byte((unsigned) (char) (esc_value_to_send<<8)); 
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	ee d0       	rcall	.+476    	; 0x15b2 <spi_send_byte>
				spi_send_byte((unsigned) (char) (esc_value_to_send));
    13d6:	8c 2d       	mov	r24, r12
    13d8:	ec d0       	rcall	.+472    	; 0x15b2 <spi_send_byte>
				spi_send_byte((unsigned) (char) (steering_value_to_send<<8));
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	ea d0       	rcall	.+468    	; 0x15b2 <spi_send_byte>
				spi_send_byte((unsigned) (char) (steering_value_to_send));
    13de:	8e 2d       	mov	r24, r14
    13e0:	e8 d0       	rcall	.+464    	; 0x15b2 <spi_send_byte>
    13e2:	d7 cf       	rjmp	.-82     	; 0x1392 <main+0x42>

000013e4 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    13e8:	82 ea       	ldi	r24, 0xA2	; 162
    13ea:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f e8       	ldi	r25, 0x8F	; 143
    13f2:	90 93 87 00 	sts	0x0087, r25
    13f6:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    13fa:	8a e1       	ldi	r24, 0x1A	; 26
    13fc:	80 93 81 00 	sts	0x0081, r24
    1400:	08 95       	ret

00001402 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1402:	80 36       	cpi	r24, 0x60	; 96
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	92 07       	cpc	r25, r18
    1408:	3c f4       	brge	.+14     	; 0x1418 <setESC+0x16>
	{
		OCR1A = MINESC;
    140a:	8f e5       	ldi	r24, 0x5F	; 95
    140c:	9a e0       	ldi	r25, 0x0A	; 10
    140e:	90 93 89 00 	sts	0x0089, r25
    1412:	80 93 88 00 	sts	0x0088, r24
    1416:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1418:	8b 33       	cpi	r24, 0x3B	; 59
    141a:	2b e0       	ldi	r18, 0x0B	; 11
    141c:	92 07       	cpc	r25, r18
    141e:	3c f0       	brlt	.+14     	; 0x142e <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1420:	8b e3       	ldi	r24, 0x3B	; 59
    1422:	9b e0       	ldi	r25, 0x0B	; 11
    1424:	90 93 89 00 	sts	0x0089, r25
    1428:	80 93 88 00 	sts	0x0088, r24
    142c:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    142e:	90 93 89 00 	sts	0x0089, r25
    1432:	80 93 88 00 	sts	0x0088, r24
    1436:	08 95       	ret

00001438 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    1438:	87 3e       	cpi	r24, 0xE7	; 231
    143a:	27 e0       	ldi	r18, 0x07	; 7
    143c:	92 07       	cpc	r25, r18
    143e:	3c f4       	brge	.+14     	; 0x144e <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1440:	86 ee       	ldi	r24, 0xE6	; 230
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	90 93 8b 00 	sts	0x008B, r25
    1448:	80 93 8a 00 	sts	0x008A, r24
    144c:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    144e:	8f 33       	cpi	r24, 0x3F	; 63
    1450:	2c e0       	ldi	r18, 0x0C	; 12
    1452:	92 07       	cpc	r25, r18
    1454:	3c f0       	brlt	.+14     	; 0x1464 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1456:	8f e3       	ldi	r24, 0x3F	; 63
    1458:	9c e0       	ldi	r25, 0x0C	; 12
    145a:	90 93 8b 00 	sts	0x008B, r25
    145e:	80 93 8a 00 	sts	0x008A, r24
    1462:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    1464:	90 93 8b 00 	sts	0x008B, r25
    1468:	80 93 8a 00 	sts	0x008A, r24
    146c:	08 95       	ret

0000146e <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	0b b6       	in	r0, 0x3b	; 59
    147a:	0f 92       	push	r0
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    148c:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    148e:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1490:	2d 3f       	cpi	r18, 0xFD	; 253
    1492:	a9 f0       	breq	.+42     	; 0x14be <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1494:	e7 e6       	ldi	r30, 0x67	; 103
    1496:	f2 e0       	ldi	r31, 0x02	; 2
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	dc 01       	movw	r26, r24
    149e:	ab 5d       	subi	r26, 0xDB	; 219
    14a0:	bd 4f       	sbci	r27, 0xFD	; 253
    14a2:	2c 93       	st	X, r18
		rx_spi.i_last++;
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    14aa:	e9 e6       	ldi	r30, 0x69	; 105
    14ac:	f2 e0       	ldi	r31, 0x02	; 2
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	80 93 dd 01 	sts	0x01DD, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    14be:	80 91 67 02 	lds	r24, 0x0267
    14c2:	90 91 68 02 	lds	r25, 0x0268
    14c6:	80 34       	cpi	r24, 0x40	; 64
    14c8:	91 05       	cpc	r25, r1
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    14cc:	10 92 68 02 	sts	0x0268, r1
    14d0:	10 92 67 02 	sts	0x0267, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    14d4:	80 91 23 02 	lds	r24, 0x0223
    14d8:	90 91 24 02 	lds	r25, 0x0224
    14dc:	89 2b       	or	r24, r25
    14de:	01 f1       	breq	.+64     	; 0x1520 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    14e0:	e0 91 1f 02 	lds	r30, 0x021F
    14e4:	f0 91 20 02 	lds	r31, 0x0220
    14e8:	e1 52       	subi	r30, 0x21	; 33
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	80 81       	ld	r24, Z
    14ee:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    14f0:	ef e1       	ldi	r30, 0x1F	; 31
    14f2:	f2 e0       	ldi	r31, 0x02	; 2
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    14fe:	e3 e2       	ldi	r30, 0x23	; 35
    1500:	f2 e0       	ldi	r31, 0x02	; 2
    1502:	20 81       	ld	r18, Z
    1504:	31 81       	ldd	r19, Z+1	; 0x01
    1506:	21 50       	subi	r18, 0x01	; 1
    1508:	31 09       	sbc	r19, r1
    150a:	31 83       	std	Z+1, r19	; 0x01
    150c:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    150e:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1510:	80 34       	cpi	r24, 0x40	; 64
    1512:	91 05       	cpc	r25, r1
    1514:	49 f4       	brne	.+18     	; 0x1528 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1516:	10 92 20 02 	sts	0x0220, r1
    151a:	10 92 1f 02 	sts	0x021F, r1
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1520:	8d ef       	ldi	r24, 0xFD	; 253
    1522:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1524:	10 92 de 01 	sts	0x01DE, r1
		
	} 	
	

}
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	bf 91       	pop	r27
    152e:	af 91       	pop	r26
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1546:	80 e4       	ldi	r24, 0x40	; 64
    1548:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    154a:	80 ec       	ldi	r24, 0xC0	; 192
    154c:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    154e:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1550:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1552:	8d ef       	ldi	r24, 0xFD	; 253
    1554:	8e bd       	out	0x2e, r24	; 46
    1556:	08 95       	ret

00001558 <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1558:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    155a:	20 91 69 02 	lds	r18, 0x0269
    155e:	30 91 6a 02 	lds	r19, 0x026A
    1562:	21 15       	cp	r18, r1
    1564:	31 05       	cpc	r19, r1
    1566:	a9 f0       	breq	.+42     	; 0x1592 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1568:	e5 e6       	ldi	r30, 0x65	; 101
    156a:	f2 e0       	ldi	r31, 0x02	; 2
    156c:	40 81       	ld	r20, Z
    156e:	51 81       	ldd	r21, Z+1	; 0x01
    1570:	da 01       	movw	r26, r20
    1572:	ab 5d       	subi	r26, 0xDB	; 219
    1574:	bd 4f       	sbci	r27, 0xFD	; 253
    1576:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1578:	4f 5f       	subi	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	51 83       	std	Z+1, r21	; 0x01
    157e:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	31 09       	sbc	r19, r1
    1584:	30 93 6a 02 	sts	0x026A, r19
    1588:	20 93 69 02 	sts	0x0269, r18
	}
	
	if(rx_spi.num_bytes == 0){
    158c:	23 2b       	or	r18, r19
    158e:	21 f4       	brne	.+8      	; 0x1598 <spi_get_byte+0x40>
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1592:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1594:	10 92 dd 01 	sts	0x01DD, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1598:	20 91 65 02 	lds	r18, 0x0265
    159c:	30 91 66 02 	lds	r19, 0x0266
    15a0:	20 34       	cpi	r18, 0x40	; 64
    15a2:	31 05       	cpc	r19, r1
    15a4:	21 f4       	brne	.+8      	; 0x15ae <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    15a6:	10 92 66 02 	sts	0x0266, r1
    15aa:	10 92 65 02 	sts	0x0265, r1
	}
	

	sei();
    15ae:	78 94       	sei
	
	return value;
	
		
}
    15b0:	08 95       	ret

000015b2 <spi_send_byte>:

void spi_send_byte(unsigned char value){
	
	cli();
    15b2:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    15b4:	20 91 23 02 	lds	r18, 0x0223
    15b8:	30 91 24 02 	lds	r19, 0x0224
    15bc:	20 34       	cpi	r18, 0x40	; 64
    15be:	31 05       	cpc	r19, r1
    15c0:	90 f4       	brcc	.+36     	; 0x15e6 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    15c2:	e1 e2       	ldi	r30, 0x21	; 33
    15c4:	f2 e0       	ldi	r31, 0x02	; 2
    15c6:	40 81       	ld	r20, Z
    15c8:	51 81       	ldd	r21, Z+1	; 0x01
    15ca:	da 01       	movw	r26, r20
    15cc:	a1 52       	subi	r26, 0x21	; 33
    15ce:	be 4f       	sbci	r27, 0xFE	; 254
    15d0:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    15d2:	4f 5f       	subi	r20, 0xFF	; 255
    15d4:	5f 4f       	sbci	r21, 0xFF	; 255
    15d6:	51 83       	std	Z+1, r21	; 0x01
    15d8:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	30 93 24 02 	sts	0x0224, r19
    15e2:	20 93 23 02 	sts	0x0223, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    15e6:	80 91 21 02 	lds	r24, 0x0221
    15ea:	90 91 22 02 	lds	r25, 0x0222
    15ee:	80 34       	cpi	r24, 0x40	; 64
    15f0:	91 05       	cpc	r25, r1
    15f2:	21 f4       	brne	.+8      	; 0x15fc <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    15f4:	10 92 22 02 	sts	0x0222, r1
    15f8:	10 92 21 02 	sts	0x0221, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    15fc:	80 91 23 02 	lds	r24, 0x0223
    1600:	90 91 24 02 	lds	r25, 0x0224
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f4       	brne	.+60     	; 0x1644 <spi_send_byte+0x92>
    1608:	80 91 de 01 	lds	r24, 0x01DE
    160c:	81 11       	cpse	r24, r1
    160e:	1a c0       	rjmp	.+52     	; 0x1644 <spi_send_byte+0x92>
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1610:	e0 91 1f 02 	lds	r30, 0x021F
    1614:	f0 91 20 02 	lds	r31, 0x0220
    1618:	e1 52       	subi	r30, 0x21	; 33
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
    161c:	80 81       	ld	r24, Z
    161e:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1620:	ef e1       	ldi	r30, 0x1F	; 31
    1622:	f2 e0       	ldi	r31, 0x02	; 2
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    162e:	e3 e2       	ldi	r30, 0x23	; 35
    1630:	f2 e0       	ldi	r31, 0x02	; 2
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    163c:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	80 93 de 01 	sts	0x01DE, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1644:	80 91 1f 02 	lds	r24, 0x021F
    1648:	90 91 20 02 	lds	r25, 0x0220
    164c:	80 34       	cpi	r24, 0x40	; 64
    164e:	91 05       	cpc	r25, r1
    1650:	21 f4       	brne	.+8      	; 0x165a <spi_send_byte+0xa8>
		tx_spi.i_first = 0;
    1652:	10 92 20 02 	sts	0x0220, r1
    1656:	10 92 1f 02 	sts	0x021F, r1
	}
			
			

	sei();
    165a:	78 94       	sei
    165c:	08 95       	ret

0000165e <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	20 91 69 02 	lds	r18, 0x0269
    1664:	30 91 6a 02 	lds	r19, 0x026A
    1668:	2b 30       	cpi	r18, 0x0B	; 11
    166a:	31 05       	cpc	r19, r1
    166c:	08 f4       	brcc	.+2      	; 0x1670 <is_package_recieved+0x12>
    166e:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1670:	08 95       	ret

00001672 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	8c 01       	movw	r16, r24
    167c:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    167e:	20 91 69 02 	lds	r18, 0x0269
    1682:	30 91 6a 02 	lds	r19, 0x026A
    1686:	23 2b       	or	r18, r19
    1688:	61 f1       	breq	.+88     	; 0x16e2 <read_sensor_info+0x70>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    168a:	e0 91 65 02 	lds	r30, 0x0265
    168e:	f0 91 66 02 	lds	r31, 0x0266
    1692:	eb 5d       	subi	r30, 0xDB	; 219
    1694:	fd 4f       	sbci	r31, 0xFD	; 253
    1696:	80 81       	ld	r24, Z
    1698:	8f 3f       	cpi	r24, 0xFF	; 255
    169a:	d9 f4       	brne	.+54     	; 0x16d2 <read_sensor_info+0x60>
    169c:	e0 df       	rcall	.-64     	; 0x165e <is_package_recieved>
    169e:	88 23       	and	r24, r24
    16a0:	09 f1       	breq	.+66     	; 0x16e4 <read_sensor_info+0x72>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    16a2:	5a df       	rcall	.-332    	; 0x1558 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    16a4:	59 df       	rcall	.-334    	; 0x1558 <spi_get_byte>
    16a6:	f8 01       	movw	r30, r16
    16a8:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    16aa:	56 df       	rcall	.-340    	; 0x1558 <spi_get_byte>
    16ac:	88 83       	st	Y, r24
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    16ae:	54 df       	rcall	.-344    	; 0x1558 <spi_get_byte>
    16b0:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    16b2:	52 df       	rcall	.-348    	; 0x1558 <spi_get_byte>
    16b4:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    16b6:	50 df       	rcall	.-352    	; 0x1558 <spi_get_byte>
    16b8:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    16ba:	4e df       	rcall	.-356    	; 0x1558 <spi_get_byte>
    16bc:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->angular_diff = spi_get_byte();
    16be:	4c df       	rcall	.-360    	; 0x1558 <spi_get_byte>
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->car_speed = spi_get_byte();
    16c2:	4a df       	rcall	.-364    	; 0x1558 <spi_get_byte>
    16c4:	8e 83       	std	Y+6, r24	; 0x06
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    16c6:	48 df       	rcall	.-368    	; 0x1558 <spi_get_byte>
    16c8:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->sign_type = spi_get_byte();
    16ca:	46 df       	rcall	.-372    	; 0x1558 <spi_get_byte>
    16cc:	88 87       	std	Y+8, r24	; 0x08
		
		
		return 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <read_sensor_info+0x72>
	} else if (is_package_recieved()){
    16d2:	c5 df       	rcall	.-118    	; 0x165e <is_package_recieved>
    16d4:	88 23       	and	r24, r24
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <read_sensor_info+0x72>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    16d8:	3f df       	rcall	.-386    	; 0x1558 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    16da:	be 01       	movw	r22, r28
    16dc:	c8 01       	movw	r24, r16
    16de:	c9 df       	rcall	.-110    	; 0x1672 <read_sensor_info>
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <read_sensor_info+0x72>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	0b b6       	in	r0, 0x3b	; 59
    16fa:	0f 92       	push	r0
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    170e:	80 91 f5 02 	lds	r24, 0x02F5
    1712:	90 91 f6 02 	lds	r25, 0x02F6
    1716:	80 34       	cpi	r24, 0x40	; 64
    1718:	91 05       	cpc	r25, r1
    171a:	31 f4       	brne	.+12     	; 0x1728 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 2b 03 	sts	0x032B, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1722:	80 91 c6 00 	lds	r24, 0x00C6
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1728:	80 34       	cpi	r24, 0x40	; 64
    172a:	91 05       	cpc	r25, r1
    172c:	e8 f4       	brcc	.+58     	; 0x1768 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    172e:	e3 ef       	ldi	r30, 0xF3	; 243
    1730:	f2 e0       	ldi	r31, 0x02	; 2
    1732:	20 81       	ld	r18, Z
    1734:	31 81       	ldd	r19, Z+1	; 0x01
    1736:	40 91 c6 00 	lds	r20, 0x00C6
    173a:	d9 01       	movw	r26, r18
    173c:	af 54       	subi	r26, 0x4F	; 79
    173e:	bd 4f       	sbci	r27, 0xFD	; 253
    1740:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	31 83       	std	Z+1, r19	; 0x01
    1748:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	90 93 f6 02 	sts	0x02F6, r25
    1750:	80 93 f5 02 	sts	0x02F5, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1754:	80 91 f5 02 	lds	r24, 0x02F5
    1758:	90 91 f6 02 	lds	r25, 0x02F6
    175c:	80 34       	cpi	r24, 0x40	; 64
    175e:	91 05       	cpc	r25, r1
    1760:	19 f4       	brne	.+6      	; 0x1768 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 29 03 	sts	0x0329, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1768:	80 91 f3 02 	lds	r24, 0x02F3
    176c:	90 91 f4 02 	lds	r25, 0x02F4
    1770:	80 34       	cpi	r24, 0x40	; 64
    1772:	91 05       	cpc	r25, r1
    1774:	21 f4       	brne	.+8      	; 0x177e <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1776:	10 92 f4 02 	sts	0x02F4, r1
    177a:	10 92 f3 02 	sts	0x02F3, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 28 03 	sts	0x0328, r24
}
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	bf 91       	pop	r27
    178a:	af 91       	pop	r26
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	0f 90       	pop	r0
    1798:	0b be       	out	0x3b, r0	; 59
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_22>:




ISR(USART0_TX_vect)
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0b b6       	in	r0, 0x3b	; 59
    17b0:	0f 92       	push	r0
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    17ba:	80 91 af 02 	lds	r24, 0x02AF
    17be:	90 91 b0 02 	lds	r25, 0x02B0
    17c2:	80 34       	cpi	r24, 0x40	; 64
    17c4:	91 05       	cpc	r25, r1
    17c6:	19 f4       	brne	.+6      	; 0x17ce <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    17c8:	10 92 27 03 	sts	0x0327, r1
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    17ce:	89 2b       	or	r24, r25
    17d0:	b9 f0       	breq	.+46     	; 0x1800 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    17d2:	e0 91 ab 02 	lds	r30, 0x02AB
    17d6:	f0 91 ac 02 	lds	r31, 0x02AC
    17da:	e5 59       	subi	r30, 0x95	; 149
    17dc:	fd 4f       	sbci	r31, 0xFD	; 253
    17de:	80 81       	ld	r24, Z
    17e0:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    17e4:	eb ea       	ldi	r30, 0xAB	; 171
    17e6:	f2 e0       	ldi	r31, 0x02	; 2
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    17f2:	ef ea       	ldi	r30, 0xAF	; 175
    17f4:	f2 e0       	ldi	r31, 0x02	; 2
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1800:	80 91 ab 02 	lds	r24, 0x02AB
    1804:	90 91 ac 02 	lds	r25, 0x02AC
    1808:	80 34       	cpi	r24, 0x40	; 64
    180a:	91 05       	cpc	r25, r1
    180c:	21 f4       	brne	.+8      	; 0x1816 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    180e:	10 92 ac 02 	sts	0x02AC, r1
    1812:	10 92 ab 02 	sts	0x02AB, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1816:	80 91 af 02 	lds	r24, 0x02AF
    181a:	90 91 b0 02 	lds	r25, 0x02B0
    181e:	89 2b       	or	r24, r25
    1820:	39 f4       	brne	.+14     	; 0x1830 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1822:	10 92 2a 03 	sts	0x032A, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1826:	e1 ec       	ldi	r30, 0xC1	; 193
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 7b       	andi	r24, 0xBF	; 191
    182e:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <__subsf3>:
    1846:	50 58       	subi	r21, 0x80	; 128

00001848 <__addsf3>:
    1848:	bb 27       	eor	r27, r27
    184a:	aa 27       	eor	r26, r26
    184c:	0e d0       	rcall	.+28     	; 0x186a <__addsf3x>
    184e:	4d c1       	rjmp	.+666    	; 0x1aea <__fp_round>
    1850:	3e d1       	rcall	.+636    	; 0x1ace <__fp_pscA>
    1852:	30 f0       	brcs	.+12     	; 0x1860 <__addsf3+0x18>
    1854:	43 d1       	rcall	.+646    	; 0x1adc <__fp_pscB>
    1856:	20 f0       	brcs	.+8      	; 0x1860 <__addsf3+0x18>
    1858:	31 f4       	brne	.+12     	; 0x1866 <__addsf3+0x1e>
    185a:	9f 3f       	cpi	r25, 0xFF	; 255
    185c:	11 f4       	brne	.+4      	; 0x1862 <__addsf3+0x1a>
    185e:	1e f4       	brtc	.+6      	; 0x1866 <__addsf3+0x1e>
    1860:	33 c1       	rjmp	.+614    	; 0x1ac8 <__fp_nan>
    1862:	0e f4       	brtc	.+2      	; 0x1866 <__addsf3+0x1e>
    1864:	e0 95       	com	r30
    1866:	e7 fb       	bst	r30, 7
    1868:	29 c1       	rjmp	.+594    	; 0x1abc <__fp_inf>

0000186a <__addsf3x>:
    186a:	e9 2f       	mov	r30, r25
    186c:	4f d1       	rcall	.+670    	; 0x1b0c <__fp_split3>
    186e:	80 f3       	brcs	.-32     	; 0x1850 <__addsf3+0x8>
    1870:	ba 17       	cp	r27, r26
    1872:	62 07       	cpc	r22, r18
    1874:	73 07       	cpc	r23, r19
    1876:	84 07       	cpc	r24, r20
    1878:	95 07       	cpc	r25, r21
    187a:	18 f0       	brcs	.+6      	; 0x1882 <__addsf3x+0x18>
    187c:	71 f4       	brne	.+28     	; 0x189a <__addsf3x+0x30>
    187e:	9e f5       	brtc	.+102    	; 0x18e6 <__addsf3x+0x7c>
    1880:	67 c1       	rjmp	.+718    	; 0x1b50 <__fp_zero>
    1882:	0e f4       	brtc	.+2      	; 0x1886 <__addsf3x+0x1c>
    1884:	e0 95       	com	r30
    1886:	0b 2e       	mov	r0, r27
    1888:	ba 2f       	mov	r27, r26
    188a:	a0 2d       	mov	r26, r0
    188c:	0b 01       	movw	r0, r22
    188e:	b9 01       	movw	r22, r18
    1890:	90 01       	movw	r18, r0
    1892:	0c 01       	movw	r0, r24
    1894:	ca 01       	movw	r24, r20
    1896:	a0 01       	movw	r20, r0
    1898:	11 24       	eor	r1, r1
    189a:	ff 27       	eor	r31, r31
    189c:	59 1b       	sub	r21, r25
    189e:	99 f0       	breq	.+38     	; 0x18c6 <__addsf3x+0x5c>
    18a0:	59 3f       	cpi	r21, 0xF9	; 249
    18a2:	50 f4       	brcc	.+20     	; 0x18b8 <__addsf3x+0x4e>
    18a4:	50 3e       	cpi	r21, 0xE0	; 224
    18a6:	68 f1       	brcs	.+90     	; 0x1902 <__addsf3x+0x98>
    18a8:	1a 16       	cp	r1, r26
    18aa:	f0 40       	sbci	r31, 0x00	; 0
    18ac:	a2 2f       	mov	r26, r18
    18ae:	23 2f       	mov	r18, r19
    18b0:	34 2f       	mov	r19, r20
    18b2:	44 27       	eor	r20, r20
    18b4:	58 5f       	subi	r21, 0xF8	; 248
    18b6:	f3 cf       	rjmp	.-26     	; 0x189e <__addsf3x+0x34>
    18b8:	46 95       	lsr	r20
    18ba:	37 95       	ror	r19
    18bc:	27 95       	ror	r18
    18be:	a7 95       	ror	r26
    18c0:	f0 40       	sbci	r31, 0x00	; 0
    18c2:	53 95       	inc	r21
    18c4:	c9 f7       	brne	.-14     	; 0x18b8 <__addsf3x+0x4e>
    18c6:	7e f4       	brtc	.+30     	; 0x18e6 <__addsf3x+0x7c>
    18c8:	1f 16       	cp	r1, r31
    18ca:	ba 0b       	sbc	r27, r26
    18cc:	62 0b       	sbc	r22, r18
    18ce:	73 0b       	sbc	r23, r19
    18d0:	84 0b       	sbc	r24, r20
    18d2:	ba f0       	brmi	.+46     	; 0x1902 <__addsf3x+0x98>
    18d4:	91 50       	subi	r25, 0x01	; 1
    18d6:	a1 f0       	breq	.+40     	; 0x1900 <__addsf3x+0x96>
    18d8:	ff 0f       	add	r31, r31
    18da:	bb 1f       	adc	r27, r27
    18dc:	66 1f       	adc	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	c2 f7       	brpl	.-16     	; 0x18d4 <__addsf3x+0x6a>
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <__addsf3x+0x98>
    18e6:	ba 0f       	add	r27, r26
    18e8:	62 1f       	adc	r22, r18
    18ea:	73 1f       	adc	r23, r19
    18ec:	84 1f       	adc	r24, r20
    18ee:	48 f4       	brcc	.+18     	; 0x1902 <__addsf3x+0x98>
    18f0:	87 95       	ror	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	b7 95       	ror	r27
    18f8:	f7 95       	ror	r31
    18fa:	9e 3f       	cpi	r25, 0xFE	; 254
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <__addsf3x+0x96>
    18fe:	b3 cf       	rjmp	.-154    	; 0x1866 <__addsf3+0x1e>
    1900:	93 95       	inc	r25
    1902:	88 0f       	add	r24, r24
    1904:	08 f0       	brcs	.+2      	; 0x1908 <__addsf3x+0x9e>
    1906:	99 27       	eor	r25, r25
    1908:	ee 0f       	add	r30, r30
    190a:	97 95       	ror	r25
    190c:	87 95       	ror	r24
    190e:	08 95       	ret

00001910 <__divsf3>:
    1910:	0c d0       	rcall	.+24     	; 0x192a <__divsf3x>
    1912:	eb c0       	rjmp	.+470    	; 0x1aea <__fp_round>
    1914:	e3 d0       	rcall	.+454    	; 0x1adc <__fp_pscB>
    1916:	40 f0       	brcs	.+16     	; 0x1928 <__divsf3+0x18>
    1918:	da d0       	rcall	.+436    	; 0x1ace <__fp_pscA>
    191a:	30 f0       	brcs	.+12     	; 0x1928 <__divsf3+0x18>
    191c:	21 f4       	brne	.+8      	; 0x1926 <__divsf3+0x16>
    191e:	5f 3f       	cpi	r21, 0xFF	; 255
    1920:	19 f0       	breq	.+6      	; 0x1928 <__divsf3+0x18>
    1922:	cc c0       	rjmp	.+408    	; 0x1abc <__fp_inf>
    1924:	51 11       	cpse	r21, r1
    1926:	15 c1       	rjmp	.+554    	; 0x1b52 <__fp_szero>
    1928:	cf c0       	rjmp	.+414    	; 0x1ac8 <__fp_nan>

0000192a <__divsf3x>:
    192a:	f0 d0       	rcall	.+480    	; 0x1b0c <__fp_split3>
    192c:	98 f3       	brcs	.-26     	; 0x1914 <__divsf3+0x4>

0000192e <__divsf3_pse>:
    192e:	99 23       	and	r25, r25
    1930:	c9 f3       	breq	.-14     	; 0x1924 <__divsf3+0x14>
    1932:	55 23       	and	r21, r21
    1934:	b1 f3       	breq	.-20     	; 0x1922 <__divsf3+0x12>
    1936:	95 1b       	sub	r25, r21
    1938:	55 0b       	sbc	r21, r21
    193a:	bb 27       	eor	r27, r27
    193c:	aa 27       	eor	r26, r26
    193e:	62 17       	cp	r22, r18
    1940:	73 07       	cpc	r23, r19
    1942:	84 07       	cpc	r24, r20
    1944:	38 f0       	brcs	.+14     	; 0x1954 <__divsf3_pse+0x26>
    1946:	9f 5f       	subi	r25, 0xFF	; 255
    1948:	5f 4f       	sbci	r21, 0xFF	; 255
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	44 1f       	adc	r20, r20
    1950:	aa 1f       	adc	r26, r26
    1952:	a9 f3       	breq	.-22     	; 0x193e <__divsf3_pse+0x10>
    1954:	33 d0       	rcall	.+102    	; 0x19bc <__divsf3_pse+0x8e>
    1956:	0e 2e       	mov	r0, r30
    1958:	3a f0       	brmi	.+14     	; 0x1968 <__divsf3_pse+0x3a>
    195a:	e0 e8       	ldi	r30, 0x80	; 128
    195c:	30 d0       	rcall	.+96     	; 0x19be <__divsf3_pse+0x90>
    195e:	91 50       	subi	r25, 0x01	; 1
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	e6 95       	lsr	r30
    1964:	00 1c       	adc	r0, r0
    1966:	ca f7       	brpl	.-14     	; 0x195a <__divsf3_pse+0x2c>
    1968:	29 d0       	rcall	.+82     	; 0x19bc <__divsf3_pse+0x8e>
    196a:	fe 2f       	mov	r31, r30
    196c:	27 d0       	rcall	.+78     	; 0x19bc <__divsf3_pse+0x8e>
    196e:	66 0f       	add	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	88 1f       	adc	r24, r24
    1974:	bb 1f       	adc	r27, r27
    1976:	26 17       	cp	r18, r22
    1978:	37 07       	cpc	r19, r23
    197a:	48 07       	cpc	r20, r24
    197c:	ab 07       	cpc	r26, r27
    197e:	b0 e8       	ldi	r27, 0x80	; 128
    1980:	09 f0       	breq	.+2      	; 0x1984 <__divsf3_pse+0x56>
    1982:	bb 0b       	sbc	r27, r27
    1984:	80 2d       	mov	r24, r0
    1986:	bf 01       	movw	r22, r30
    1988:	ff 27       	eor	r31, r31
    198a:	93 58       	subi	r25, 0x83	; 131
    198c:	5f 4f       	sbci	r21, 0xFF	; 255
    198e:	2a f0       	brmi	.+10     	; 0x199a <__divsf3_pse+0x6c>
    1990:	9e 3f       	cpi	r25, 0xFE	; 254
    1992:	51 05       	cpc	r21, r1
    1994:	68 f0       	brcs	.+26     	; 0x19b0 <__divsf3_pse+0x82>
    1996:	92 c0       	rjmp	.+292    	; 0x1abc <__fp_inf>
    1998:	dc c0       	rjmp	.+440    	; 0x1b52 <__fp_szero>
    199a:	5f 3f       	cpi	r21, 0xFF	; 255
    199c:	ec f3       	brlt	.-6      	; 0x1998 <__divsf3_pse+0x6a>
    199e:	98 3e       	cpi	r25, 0xE8	; 232
    19a0:	dc f3       	brlt	.-10     	; 0x1998 <__divsf3_pse+0x6a>
    19a2:	86 95       	lsr	r24
    19a4:	77 95       	ror	r23
    19a6:	67 95       	ror	r22
    19a8:	b7 95       	ror	r27
    19aa:	f7 95       	ror	r31
    19ac:	9f 5f       	subi	r25, 0xFF	; 255
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__divsf3_pse+0x74>
    19b0:	88 0f       	add	r24, r24
    19b2:	91 1d       	adc	r25, r1
    19b4:	96 95       	lsr	r25
    19b6:	87 95       	ror	r24
    19b8:	97 f9       	bld	r25, 7
    19ba:	08 95       	ret
    19bc:	e1 e0       	ldi	r30, 0x01	; 1
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	bb 1f       	adc	r27, r27
    19c6:	62 17       	cp	r22, r18
    19c8:	73 07       	cpc	r23, r19
    19ca:	84 07       	cpc	r24, r20
    19cc:	ba 07       	cpc	r27, r26
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <__divsf3_pse+0xaa>
    19d0:	62 1b       	sub	r22, r18
    19d2:	73 0b       	sbc	r23, r19
    19d4:	84 0b       	sbc	r24, r20
    19d6:	ba 0b       	sbc	r27, r26
    19d8:	ee 1f       	adc	r30, r30
    19da:	88 f7       	brcc	.-30     	; 0x19be <__divsf3_pse+0x90>
    19dc:	e0 95       	com	r30
    19de:	08 95       	ret

000019e0 <__fixsfsi>:
    19e0:	04 d0       	rcall	.+8      	; 0x19ea <__fixunssfsi>
    19e2:	68 94       	set
    19e4:	b1 11       	cpse	r27, r1
    19e6:	b5 c0       	rjmp	.+362    	; 0x1b52 <__fp_szero>
    19e8:	08 95       	ret

000019ea <__fixunssfsi>:
    19ea:	98 d0       	rcall	.+304    	; 0x1b1c <__fp_splitA>
    19ec:	88 f0       	brcs	.+34     	; 0x1a10 <__fixunssfsi+0x26>
    19ee:	9f 57       	subi	r25, 0x7F	; 127
    19f0:	90 f0       	brcs	.+36     	; 0x1a16 <__fixunssfsi+0x2c>
    19f2:	b9 2f       	mov	r27, r25
    19f4:	99 27       	eor	r25, r25
    19f6:	b7 51       	subi	r27, 0x17	; 23
    19f8:	a0 f0       	brcs	.+40     	; 0x1a22 <__fixunssfsi+0x38>
    19fa:	d1 f0       	breq	.+52     	; 0x1a30 <__fixunssfsi+0x46>
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	1a f0       	brmi	.+6      	; 0x1a0c <__fixunssfsi+0x22>
    1a06:	ba 95       	dec	r27
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__fixunssfsi+0x12>
    1a0a:	12 c0       	rjmp	.+36     	; 0x1a30 <__fixunssfsi+0x46>
    1a0c:	b1 30       	cpi	r27, 0x01	; 1
    1a0e:	81 f0       	breq	.+32     	; 0x1a30 <__fixunssfsi+0x46>
    1a10:	9f d0       	rcall	.+318    	; 0x1b50 <__fp_zero>
    1a12:	b1 e0       	ldi	r27, 0x01	; 1
    1a14:	08 95       	ret
    1a16:	9c c0       	rjmp	.+312    	; 0x1b50 <__fp_zero>
    1a18:	67 2f       	mov	r22, r23
    1a1a:	78 2f       	mov	r23, r24
    1a1c:	88 27       	eor	r24, r24
    1a1e:	b8 5f       	subi	r27, 0xF8	; 248
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <__fixunssfsi+0x46>
    1a22:	b9 3f       	cpi	r27, 0xF9	; 249
    1a24:	cc f3       	brlt	.-14     	; 0x1a18 <__fixunssfsi+0x2e>
    1a26:	86 95       	lsr	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b3 95       	inc	r27
    1a2e:	d9 f7       	brne	.-10     	; 0x1a26 <__fixunssfsi+0x3c>
    1a30:	3e f4       	brtc	.+14     	; 0x1a40 <__fixunssfsi+0x56>
    1a32:	90 95       	com	r25
    1a34:	80 95       	com	r24
    1a36:	70 95       	com	r23
    1a38:	61 95       	neg	r22
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	08 95       	ret

00001a42 <__floatunsisf>:
    1a42:	e8 94       	clt
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <__floatsisf+0x12>

00001a46 <__floatsisf>:
    1a46:	97 fb       	bst	r25, 7
    1a48:	3e f4       	brtc	.+14     	; 0x1a58 <__floatsisf+0x12>
    1a4a:	90 95       	com	r25
    1a4c:	80 95       	com	r24
    1a4e:	70 95       	com	r23
    1a50:	61 95       	neg	r22
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	8f 4f       	sbci	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	99 23       	and	r25, r25
    1a5a:	a9 f0       	breq	.+42     	; 0x1a86 <__floatsisf+0x40>
    1a5c:	f9 2f       	mov	r31, r25
    1a5e:	96 e9       	ldi	r25, 0x96	; 150
    1a60:	bb 27       	eor	r27, r27
    1a62:	93 95       	inc	r25
    1a64:	f6 95       	lsr	r31
    1a66:	87 95       	ror	r24
    1a68:	77 95       	ror	r23
    1a6a:	67 95       	ror	r22
    1a6c:	b7 95       	ror	r27
    1a6e:	f1 11       	cpse	r31, r1
    1a70:	f8 cf       	rjmp	.-16     	; 0x1a62 <__floatsisf+0x1c>
    1a72:	fa f4       	brpl	.+62     	; 0x1ab2 <__floatsisf+0x6c>
    1a74:	bb 0f       	add	r27, r27
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <__floatsisf+0x36>
    1a78:	60 ff       	sbrs	r22, 0
    1a7a:	1b c0       	rjmp	.+54     	; 0x1ab2 <__floatsisf+0x6c>
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	8f 4f       	sbci	r24, 0xFF	; 255
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	16 c0       	rjmp	.+44     	; 0x1ab2 <__floatsisf+0x6c>
    1a86:	88 23       	and	r24, r24
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <__floatsisf+0x48>
    1a8a:	96 e9       	ldi	r25, 0x96	; 150
    1a8c:	11 c0       	rjmp	.+34     	; 0x1ab0 <__floatsisf+0x6a>
    1a8e:	77 23       	and	r23, r23
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <__floatsisf+0x54>
    1a92:	9e e8       	ldi	r25, 0x8E	; 142
    1a94:	87 2f       	mov	r24, r23
    1a96:	76 2f       	mov	r23, r22
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <__floatsisf+0x5e>
    1a9a:	66 23       	and	r22, r22
    1a9c:	71 f0       	breq	.+28     	; 0x1aba <__floatsisf+0x74>
    1a9e:	96 e8       	ldi	r25, 0x86	; 134
    1aa0:	86 2f       	mov	r24, r22
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	2a f0       	brmi	.+10     	; 0x1ab2 <__floatsisf+0x6c>
    1aa8:	9a 95       	dec	r25
    1aaa:	66 0f       	add	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	da f7       	brpl	.-10     	; 0x1aa8 <__floatsisf+0x62>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	97 f9       	bld	r25, 7
    1aba:	08 95       	ret

00001abc <__fp_inf>:
    1abc:	97 f9       	bld	r25, 7
    1abe:	9f 67       	ori	r25, 0x7F	; 127
    1ac0:	80 e8       	ldi	r24, 0x80	; 128
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	08 95       	ret

00001ac8 <__fp_nan>:
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	80 ec       	ldi	r24, 0xC0	; 192
    1acc:	08 95       	ret

00001ace <__fp_pscA>:
    1ace:	00 24       	eor	r0, r0
    1ad0:	0a 94       	dec	r0
    1ad2:	16 16       	cp	r1, r22
    1ad4:	17 06       	cpc	r1, r23
    1ad6:	18 06       	cpc	r1, r24
    1ad8:	09 06       	cpc	r0, r25
    1ada:	08 95       	ret

00001adc <__fp_pscB>:
    1adc:	00 24       	eor	r0, r0
    1ade:	0a 94       	dec	r0
    1ae0:	12 16       	cp	r1, r18
    1ae2:	13 06       	cpc	r1, r19
    1ae4:	14 06       	cpc	r1, r20
    1ae6:	05 06       	cpc	r0, r21
    1ae8:	08 95       	ret

00001aea <__fp_round>:
    1aea:	09 2e       	mov	r0, r25
    1aec:	03 94       	inc	r0
    1aee:	00 0c       	add	r0, r0
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <__fp_round+0xc>
    1af2:	88 23       	and	r24, r24
    1af4:	52 f0       	brmi	.+20     	; 0x1b0a <__fp_round+0x20>
    1af6:	bb 0f       	add	r27, r27
    1af8:	40 f4       	brcc	.+16     	; 0x1b0a <__fp_round+0x20>
    1afa:	bf 2b       	or	r27, r31
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <__fp_round+0x18>
    1afe:	60 ff       	sbrs	r22, 0
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <__fp_round+0x20>
    1b02:	6f 5f       	subi	r22, 0xFF	; 255
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <__fp_split3>:
    1b0c:	57 fd       	sbrc	r21, 7
    1b0e:	90 58       	subi	r25, 0x80	; 128
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	59 f0       	breq	.+22     	; 0x1b2c <__fp_splitA+0x10>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__fp_splitA+0x1a>
    1b1a:	47 95       	ror	r20

00001b1c <__fp_splitA>:
    1b1c:	88 0f       	add	r24, r24
    1b1e:	97 fb       	bst	r25, 7
    1b20:	99 1f       	adc	r25, r25
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <__fp_splitA+0x20>
    1b24:	9f 3f       	cpi	r25, 0xFF	; 255
    1b26:	79 f0       	breq	.+30     	; 0x1b46 <__fp_splitA+0x2a>
    1b28:	87 95       	ror	r24
    1b2a:	08 95       	ret
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	14 06       	cpc	r1, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	f2 cf       	rjmp	.-28     	; 0x1b1a <__fp_split3+0xe>
    1b36:	46 95       	lsr	r20
    1b38:	f1 df       	rcall	.-30     	; 0x1b1c <__fp_splitA>
    1b3a:	08 c0       	rjmp	.+16     	; 0x1b4c <__fp_splitA+0x30>
    1b3c:	16 16       	cp	r1, r22
    1b3e:	17 06       	cpc	r1, r23
    1b40:	18 06       	cpc	r1, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	f1 cf       	rjmp	.-30     	; 0x1b28 <__fp_splitA+0xc>
    1b46:	86 95       	lsr	r24
    1b48:	71 05       	cpc	r23, r1
    1b4a:	61 05       	cpc	r22, r1
    1b4c:	08 94       	sec
    1b4e:	08 95       	ret

00001b50 <__fp_zero>:
    1b50:	e8 94       	clt

00001b52 <__fp_szero>:
    1b52:	bb 27       	eor	r27, r27
    1b54:	66 27       	eor	r22, r22
    1b56:	77 27       	eor	r23, r23
    1b58:	cb 01       	movw	r24, r22
    1b5a:	97 f9       	bld	r25, 7
    1b5c:	08 95       	ret

00001b5e <__mulsf3>:
    1b5e:	0b d0       	rcall	.+22     	; 0x1b76 <__mulsf3x>
    1b60:	c4 cf       	rjmp	.-120    	; 0x1aea <__fp_round>
    1b62:	b5 df       	rcall	.-150    	; 0x1ace <__fp_pscA>
    1b64:	28 f0       	brcs	.+10     	; 0x1b70 <__mulsf3+0x12>
    1b66:	ba df       	rcall	.-140    	; 0x1adc <__fp_pscB>
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <__mulsf3+0x12>
    1b6a:	95 23       	and	r25, r21
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__mulsf3+0x12>
    1b6e:	a6 cf       	rjmp	.-180    	; 0x1abc <__fp_inf>
    1b70:	ab cf       	rjmp	.-170    	; 0x1ac8 <__fp_nan>
    1b72:	11 24       	eor	r1, r1
    1b74:	ee cf       	rjmp	.-36     	; 0x1b52 <__fp_szero>

00001b76 <__mulsf3x>:
    1b76:	ca df       	rcall	.-108    	; 0x1b0c <__fp_split3>
    1b78:	a0 f3       	brcs	.-24     	; 0x1b62 <__mulsf3+0x4>

00001b7a <__mulsf3_pse>:
    1b7a:	95 9f       	mul	r25, r21
    1b7c:	d1 f3       	breq	.-12     	; 0x1b72 <__mulsf3+0x14>
    1b7e:	95 0f       	add	r25, r21
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	55 1f       	adc	r21, r21
    1b84:	62 9f       	mul	r22, r18
    1b86:	f0 01       	movw	r30, r0
    1b88:	72 9f       	mul	r23, r18
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	f0 0d       	add	r31, r0
    1b8e:	b1 1d       	adc	r27, r1
    1b90:	63 9f       	mul	r22, r19
    1b92:	aa 27       	eor	r26, r26
    1b94:	f0 0d       	add	r31, r0
    1b96:	b1 1d       	adc	r27, r1
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	64 9f       	mul	r22, r20
    1b9c:	66 27       	eor	r22, r22
    1b9e:	b0 0d       	add	r27, r0
    1ba0:	a1 1d       	adc	r26, r1
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	82 9f       	mul	r24, r18
    1ba6:	22 27       	eor	r18, r18
    1ba8:	b0 0d       	add	r27, r0
    1baa:	a1 1d       	adc	r26, r1
    1bac:	62 1f       	adc	r22, r18
    1bae:	73 9f       	mul	r23, r19
    1bb0:	b0 0d       	add	r27, r0
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	62 1f       	adc	r22, r18
    1bb6:	83 9f       	mul	r24, r19
    1bb8:	a0 0d       	add	r26, r0
    1bba:	61 1d       	adc	r22, r1
    1bbc:	22 1f       	adc	r18, r18
    1bbe:	74 9f       	mul	r23, r20
    1bc0:	33 27       	eor	r19, r19
    1bc2:	a0 0d       	add	r26, r0
    1bc4:	61 1d       	adc	r22, r1
    1bc6:	23 1f       	adc	r18, r19
    1bc8:	84 9f       	mul	r24, r20
    1bca:	60 0d       	add	r22, r0
    1bcc:	21 1d       	adc	r18, r1
    1bce:	82 2f       	mov	r24, r18
    1bd0:	76 2f       	mov	r23, r22
    1bd2:	6a 2f       	mov	r22, r26
    1bd4:	11 24       	eor	r1, r1
    1bd6:	9f 57       	subi	r25, 0x7F	; 127
    1bd8:	50 40       	sbci	r21, 0x00	; 0
    1bda:	8a f0       	brmi	.+34     	; 0x1bfe <__mulsf3_pse+0x84>
    1bdc:	e1 f0       	breq	.+56     	; 0x1c16 <__mulsf3_pse+0x9c>
    1bde:	88 23       	and	r24, r24
    1be0:	4a f0       	brmi	.+18     	; 0x1bf4 <__mulsf3_pse+0x7a>
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	bb 1f       	adc	r27, r27
    1be8:	66 1f       	adc	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	91 50       	subi	r25, 0x01	; 1
    1bf0:	50 40       	sbci	r21, 0x00	; 0
    1bf2:	a9 f7       	brne	.-22     	; 0x1bde <__mulsf3_pse+0x64>
    1bf4:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	70 f0       	brcs	.+28     	; 0x1c16 <__mulsf3_pse+0x9c>
    1bfa:	60 cf       	rjmp	.-320    	; 0x1abc <__fp_inf>
    1bfc:	aa cf       	rjmp	.-172    	; 0x1b52 <__fp_szero>
    1bfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1c00:	ec f3       	brlt	.-6      	; 0x1bfc <__mulsf3_pse+0x82>
    1c02:	98 3e       	cpi	r25, 0xE8	; 232
    1c04:	dc f3       	brlt	.-10     	; 0x1bfc <__mulsf3_pse+0x82>
    1c06:	86 95       	lsr	r24
    1c08:	77 95       	ror	r23
    1c0a:	67 95       	ror	r22
    1c0c:	b7 95       	ror	r27
    1c0e:	f7 95       	ror	r31
    1c10:	e7 95       	ror	r30
    1c12:	9f 5f       	subi	r25, 0xFF	; 255
    1c14:	c1 f7       	brne	.-16     	; 0x1c06 <__mulsf3_pse+0x8c>
    1c16:	fe 2b       	or	r31, r30
    1c18:	88 0f       	add	r24, r24
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	97 f9       	bld	r25, 7
    1c22:	08 95       	ret

00001c24 <__divmodhi4>:
    1c24:	97 fb       	bst	r25, 7
    1c26:	07 2e       	mov	r0, r23
    1c28:	16 f4       	brtc	.+4      	; 0x1c2e <__divmodhi4+0xa>
    1c2a:	00 94       	com	r0
    1c2c:	06 d0       	rcall	.+12     	; 0x1c3a <__divmodhi4_neg1>
    1c2e:	77 fd       	sbrc	r23, 7
    1c30:	08 d0       	rcall	.+16     	; 0x1c42 <__divmodhi4_neg2>
    1c32:	0b d0       	rcall	.+22     	; 0x1c4a <__udivmodhi4>
    1c34:	07 fc       	sbrc	r0, 7
    1c36:	05 d0       	rcall	.+10     	; 0x1c42 <__divmodhi4_neg2>
    1c38:	3e f4       	brtc	.+14     	; 0x1c48 <__divmodhi4_exit>

00001c3a <__divmodhi4_neg1>:
    1c3a:	90 95       	com	r25
    1c3c:	81 95       	neg	r24
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	08 95       	ret

00001c42 <__divmodhi4_neg2>:
    1c42:	70 95       	com	r23
    1c44:	61 95       	neg	r22
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255

00001c48 <__divmodhi4_exit>:
    1c48:	08 95       	ret

00001c4a <__udivmodhi4>:
    1c4a:	aa 1b       	sub	r26, r26
    1c4c:	bb 1b       	sub	r27, r27
    1c4e:	51 e1       	ldi	r21, 0x11	; 17
    1c50:	07 c0       	rjmp	.+14     	; 0x1c60 <__udivmodhi4_ep>

00001c52 <__udivmodhi4_loop>:
    1c52:	aa 1f       	adc	r26, r26
    1c54:	bb 1f       	adc	r27, r27
    1c56:	a6 17       	cp	r26, r22
    1c58:	b7 07       	cpc	r27, r23
    1c5a:	10 f0       	brcs	.+4      	; 0x1c60 <__udivmodhi4_ep>
    1c5c:	a6 1b       	sub	r26, r22
    1c5e:	b7 0b       	sbc	r27, r23

00001c60 <__udivmodhi4_ep>:
    1c60:	88 1f       	adc	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	5a 95       	dec	r21
    1c66:	a9 f7       	brne	.-22     	; 0x1c52 <__udivmodhi4_loop>
    1c68:	80 95       	com	r24
    1c6a:	90 95       	com	r25
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	08 95       	ret

00001c72 <strcpy>:
    1c72:	fb 01       	movw	r30, r22
    1c74:	dc 01       	movw	r26, r24
    1c76:	01 90       	ld	r0, Z+
    1c78:	0d 92       	st	X+, r0
    1c7a:	00 20       	and	r0, r0
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <strcpy+0x4>
    1c7e:	08 95       	ret

00001c80 <_exit>:
    1c80:	f8 94       	cli

00001c82 <__stop_program>:
    1c82:	ff cf       	rjmp	.-2      	; 0x1c82 <__stop_program>
