
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000012d6  0000136a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  00800164  00800164  000013ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f64  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088f  00000000  00000000  000034da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a44  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  000057b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ab8  00000000  00000000  00005c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001307  00000000  00000000  0001672c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00017a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cff  00000000  00000000  00017b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9c c5       	rjmp	.+2872   	; 0xb86 <__vector_19>
      4e:	00 00       	nop
      50:	77 c6       	rjmp	.+3310   	; 0xd40 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c6       	rjmp	.+3484   	; 0xdf6 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	94 c4       	rjmp	.+2344   	; 0x99a <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ed       	ldi	r30, 0xD6	; 214
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 36       	cpi	r26, 0x64	; 100
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e6       	ldi	r26, 0x64	; 100
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3a       	cpi	r26, 0xAE	; 174
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ca d4       	rcall	.+2452   	; 0xa58 <main>
      c4:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <step1>:
	fuzzification();
	rule_evaluation();
	defuzzification();
	setServo(servo.value);
	
}
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c6 57       	subi	r28, 0x76	; 118
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	2c 01       	movw	r4, r24
     102:	cb 58       	subi	r28, 0x8B	; 139
     104:	de 4f       	sbci	r29, 0xFE	; 254
     106:	79 83       	std	Y+1, r23	; 0x01
     108:	68 83       	st	Y, r22
     10a:	c5 57       	subi	r28, 0x75	; 117
     10c:	d1 40       	sbci	r29, 0x01	; 1
     10e:	86 e0       	ldi	r24, 0x06	; 6
     110:	e0 e0       	ldi	r30, 0x00	; 0
     112:	f1 e0       	ldi	r31, 0x01	; 1
     114:	de 01       	movw	r26, r28
     116:	11 96       	adiw	r26, 0x01	; 1
     118:	01 90       	ld	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	8a 95       	dec	r24
     11e:	e1 f7       	brne	.-8      	; 0x118 <step1+0x4e>
     120:	3e 01       	movw	r6, r28
     122:	21 e1       	ldi	r18, 0x11	; 17
     124:	62 0e       	add	r6, r18
     126:	71 1c       	adc	r7, r1
     128:	0f 2e       	mov	r0, r31
     12a:	fc e3       	ldi	r31, 0x3C	; 60
     12c:	ef 2e       	mov	r14, r31
     12e:	f1 2c       	mov	r15, r1
     130:	f0 2d       	mov	r31, r0
     132:	08 e2       	ldi	r16, 0x28	; 40
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	4f ef       	ldi	r20, 0xFF	; 255
     13c:	5f ef       	ldi	r21, 0xFF	; 255
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	71 e0       	ldi	r23, 0x01	; 1
     142:	c3 01       	movw	r24, r6
     144:	fb d3       	rcall	.+2038   	; 0x93c <MATLAB_MF>
     146:	5e 01       	movw	r10, r28
     148:	47 e2       	ldi	r20, 0x27	; 39
     14a:	a4 0e       	add	r10, r20
     14c:	b1 1c       	adc	r11, r1
     14e:	0f 2e       	mov	r0, r31
     150:	fa e5       	ldi	r31, 0x5A	; 90
     152:	ef 2e       	mov	r14, r31
     154:	f1 2c       	mov	r15, r1
     156:	f0 2d       	mov	r31, r0
     158:	00 e5       	ldi	r16, 0x50	; 80
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	20 e5       	ldi	r18, 0x50	; 80
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	42 e3       	ldi	r20, 0x32	; 50
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	6d e0       	ldi	r22, 0x0D	; 13
     166:	71 e0       	ldi	r23, 0x01	; 1
     168:	c5 01       	movw	r24, r10
     16a:	e8 d3       	rcall	.+2000   	; 0x93c <MATLAB_MF>
     16c:	6e 01       	movw	r12, r28
     16e:	6d e3       	ldi	r22, 0x3D	; 61
     170:	c6 0e       	add	r12, r22
     172:	d1 1c       	adc	r13, r1
     174:	0f 2e       	mov	r0, r31
     176:	f5 e6       	ldi	r31, 0x65	; 101
     178:	ef 2e       	mov	r14, r31
     17a:	f1 2c       	mov	r15, r1
     17c:	f0 2d       	mov	r31, r0
     17e:	04 e6       	ldi	r16, 0x64	; 100
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	2a e5       	ldi	r18, 0x5A	; 90
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e5       	ldi	r20, 0x50	; 80
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	65 e1       	ldi	r22, 0x15	; 21
     18c:	71 e0       	ldi	r23, 0x01	; 1
     18e:	c6 01       	movw	r24, r12
     190:	d5 d3       	rcall	.+1962   	; 0x93c <MATLAB_MF>
     192:	7e 86       	std	Y+14, r7	; 0x0e
     194:	6d 86       	std	Y+13, r6	; 0x0d
     196:	be a2       	std	Y+38, r11	; 0x26
     198:	ad a2       	std	Y+37, r10	; 0x25
     19a:	dc ae       	std	Y+60, r13	; 0x3c
     19c:	cb ae       	std	Y+59, r12	; 0x3b
     19e:	63 96       	adiw	r28, 0x13	; 19
     1a0:	1f ae       	std	Y+63, r1	; 0x3f
     1a2:	1e ae       	std	Y+62, r1	; 0x3e
     1a4:	63 97       	sbiw	r28, 0x13	; 19
     1a6:	cb 58       	subi	r28, 0x8B	; 139
     1a8:	de 4f       	sbci	r29, 0xFE	; 254
     1aa:	88 81       	ld	r24, Y
     1ac:	99 81       	ldd	r25, Y+1	; 0x01
     1ae:	c5 57       	subi	r28, 0x75	; 117
     1b0:	d1 40       	sbci	r29, 0x01	; 1
     1b2:	99 23       	and	r25, r25
     1b4:	1c f4       	brge	.+6      	; 0x1bc <step1+0xf2>
     1b6:	1c 86       	std	Y+12, r1	; 0x0c
     1b8:	1b 86       	std	Y+11, r1	; 0x0b
     1ba:	16 c0       	rjmp	.+44     	; 0x1e8 <step1+0x11e>
     1bc:	cb 58       	subi	r28, 0x8B	; 139
     1be:	de 4f       	sbci	r29, 0xFE	; 254
     1c0:	e8 81       	ld	r30, Y
     1c2:	f9 81       	ldd	r31, Y+1	; 0x01
     1c4:	c5 57       	subi	r28, 0x75	; 117
     1c6:	d1 40       	sbci	r29, 0x01	; 1
     1c8:	e5 36       	cpi	r30, 0x65	; 101
     1ca:	f1 05       	cpc	r31, r1
     1cc:	2c f0       	brlt	.+10     	; 0x1d8 <step1+0x10e>
     1ce:	84 e6       	ldi	r24, 0x64	; 100
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	9c 87       	std	Y+12, r25	; 0x0c
     1d4:	8b 87       	std	Y+11, r24	; 0x0b
     1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <step1+0x11e>
     1d8:	cb 58       	subi	r28, 0x8B	; 139
     1da:	de 4f       	sbci	r29, 0xFE	; 254
     1dc:	68 81       	ld	r22, Y
     1de:	79 81       	ldd	r23, Y+1	; 0x01
     1e0:	c5 57       	subi	r28, 0x75	; 117
     1e2:	d1 40       	sbci	r29, 0x01	; 1
     1e4:	7c 87       	std	Y+12, r23	; 0x0c
     1e6:	6b 87       	std	Y+11, r22	; 0x0b
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	ea e1       	ldi	r30, 0x1A	; 26
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	de 01       	movw	r26, r28
     1f0:	ad 5a       	subi	r26, 0xAD	; 173
     1f2:	bf 4f       	sbci	r27, 0xFF	; 255
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <step1+0x12a>
     1fc:	3e 01       	movw	r6, r28
     1fe:	73 e6       	ldi	r23, 0x63	; 99
     200:	67 0e       	add	r6, r23
     202:	71 1c       	adc	r7, r1
     204:	0f 2e       	mov	r0, r31
     206:	fb e4       	ldi	r31, 0x4B	; 75
     208:	ef 2e       	mov	r14, r31
     20a:	f1 2c       	mov	r15, r1
     20c:	f0 2d       	mov	r31, r0
     20e:	07 e3       	ldi	r16, 0x37	; 55
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	4f ef       	ldi	r20, 0xFF	; 255
     218:	5f ef       	ldi	r21, 0xFF	; 255
     21a:	60 e2       	ldi	r22, 0x20	; 32
     21c:	71 e0       	ldi	r23, 0x01	; 1
     21e:	c3 01       	movw	r24, r6
     220:	8d d3       	rcall	.+1818   	; 0x93c <MATLAB_MF>
     222:	5e 01       	movw	r10, r28
     224:	89 e7       	ldi	r24, 0x79	; 121
     226:	a8 0e       	add	r10, r24
     228:	b1 1c       	adc	r11, r1
     22a:	0f 2e       	mov	r0, r31
     22c:	ff e5       	ldi	r31, 0x5F	; 95
     22e:	ef 2e       	mov	r14, r31
     230:	f1 2c       	mov	r15, r1
     232:	f0 2d       	mov	r31, r0
     234:	0b e4       	ldi	r16, 0x4B	; 75
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2b e4       	ldi	r18, 0x4B	; 75
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	47 e3       	ldi	r20, 0x37	; 55
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	67 e2       	ldi	r22, 0x27	; 39
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	c5 01       	movw	r24, r10
     246:	7a d3       	rcall	.+1780   	; 0x93c <MATLAB_MF>
     248:	6e 01       	movw	r12, r28
     24a:	9f e8       	ldi	r25, 0x8F	; 143
     24c:	c9 0e       	add	r12, r25
     24e:	d1 1c       	adc	r13, r1
     250:	0f 2e       	mov	r0, r31
     252:	f5 e6       	ldi	r31, 0x65	; 101
     254:	ef 2e       	mov	r14, r31
     256:	f1 2c       	mov	r15, r1
     258:	f0 2d       	mov	r31, r0
     25a:	04 e6       	ldi	r16, 0x64	; 100
     25c:	10 e0       	ldi	r17, 0x00	; 0
     25e:	2f e5       	ldi	r18, 0x5F	; 95
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	4b e4       	ldi	r20, 0x4B	; 75
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	6f e2       	ldi	r22, 0x2F	; 47
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	c6 01       	movw	r24, r12
     26c:	67 d3       	rcall	.+1742   	; 0x93c <MATLAB_MF>
     26e:	a1 96       	adiw	r28, 0x21	; 33
     270:	7f ae       	std	Y+63, r7	; 0x3f
     272:	6e ae       	std	Y+62, r6	; 0x3e
     274:	a1 97       	sbiw	r28, 0x21	; 33
     276:	f3 01       	movw	r30, r6
     278:	b5 8a       	std	Z+21, r11	; 0x15
     27a:	a4 8a       	std	Z+20, r10	; 0x14
     27c:	f5 01       	movw	r30, r10
     27e:	d5 8a       	std	Z+21, r13	; 0x15
     280:	c4 8a       	std	Z+20, r12	; 0x14
     282:	f6 01       	movw	r30, r12
     284:	15 8a       	std	Z+21, r1	; 0x15
     286:	14 8a       	std	Z+20, r1	; 0x14
     288:	55 20       	and	r5, r5
     28a:	2c f4       	brge	.+10     	; 0x296 <step1+0x1cc>
     28c:	6f 96       	adiw	r28, 0x1f	; 31
     28e:	1f ae       	std	Y+63, r1	; 0x3f
     290:	1e ae       	std	Y+62, r1	; 0x3e
     292:	6f 97       	sbiw	r28, 0x1f	; 31
     294:	0f c0       	rjmp	.+30     	; 0x2b4 <step1+0x1ea>
     296:	f5 e6       	ldi	r31, 0x65	; 101
     298:	4f 16       	cp	r4, r31
     29a:	51 04       	cpc	r5, r1
     29c:	3c f0       	brlt	.+14     	; 0x2ac <step1+0x1e2>
     29e:	84 e6       	ldi	r24, 0x64	; 100
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	6f 96       	adiw	r28, 0x1f	; 31
     2a4:	9f af       	std	Y+63, r25	; 0x3f
     2a6:	8e af       	std	Y+62, r24	; 0x3e
     2a8:	6f 97       	sbiw	r28, 0x1f	; 31
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <step1+0x1ea>
     2ac:	6f 96       	adiw	r28, 0x1f	; 31
     2ae:	5f ae       	std	Y+63, r5	; 0x3f
     2b0:	4e ae       	std	Y+62, r4	; 0x3e
     2b2:	6f 97       	sbiw	r28, 0x1f	; 31
     2b4:	4e 01       	movw	r8, r28
     2b6:	25 ea       	ldi	r18, 0xA5	; 165
     2b8:	82 0e       	add	r8, r18
     2ba:	91 1c       	adc	r9, r1
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	e4 e3       	ldi	r30, 0x34	; 52
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	d4 01       	movw	r26, r8
     2c4:	01 90       	ld	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	8a 95       	dec	r24
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <step1+0x1fa>
     2cc:	3e 01       	movw	r6, r28
     2ce:	45 eb       	ldi	r20, 0xB5	; 181
     2d0:	64 0e       	add	r6, r20
     2d2:	71 1c       	adc	r7, r1
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f7 ee       	ldi	r31, 0xE7	; 231
     2d8:	ef 2e       	mov	r14, r31
     2da:	f7 e0       	ldi	r31, 0x07	; 7
     2dc:	ff 2e       	mov	r15, r31
     2de:	f0 2d       	mov	r31, r0
     2e0:	06 ee       	ldi	r16, 0xE6	; 230
     2e2:	17 e0       	ldi	r17, 0x07	; 7
     2e4:	26 ee       	ldi	r18, 0xE6	; 230
     2e6:	37 e0       	ldi	r19, 0x07	; 7
     2e8:	45 ee       	ldi	r20, 0xE5	; 229
     2ea:	57 e0       	ldi	r21, 0x07	; 7
     2ec:	6a e3       	ldi	r22, 0x3A	; 58
     2ee:	71 e0       	ldi	r23, 0x01	; 1
     2f0:	c3 01       	movw	r24, r6
     2f2:	24 d3       	rcall	.+1608   	; 0x93c <MATLAB_MF>
     2f4:	6e 01       	movw	r12, r28
     2f6:	6b ec       	ldi	r22, 0xCB	; 203
     2f8:	c6 0e       	add	r12, r22
     2fa:	d1 1c       	adc	r13, r1
     2fc:	0f 2e       	mov	r0, r31
     2fe:	f0 e6       	ldi	r31, 0x60	; 96
     300:	ef 2e       	mov	r14, r31
     302:	f9 e0       	ldi	r31, 0x09	; 9
     304:	ff 2e       	mov	r15, r31
     306:	f0 2d       	mov	r31, r0
     308:	0a ec       	ldi	r16, 0xCA	; 202
     30a:	18 e0       	ldi	r17, 0x08	; 8
     30c:	2a ec       	ldi	r18, 0xCA	; 202
     30e:	38 e0       	ldi	r19, 0x08	; 8
     310:	49 e8       	ldi	r20, 0x89	; 137
     312:	58 e0       	ldi	r21, 0x08	; 8
     314:	64 e4       	ldi	r22, 0x44	; 68
     316:	71 e0       	ldi	r23, 0x01	; 1
     318:	c6 01       	movw	r24, r12
     31a:	10 d3       	rcall	.+1568   	; 0x93c <MATLAB_MF>
     31c:	2e 01       	movw	r4, r28
     31e:	71 ee       	ldi	r23, 0xE1	; 225
     320:	47 0e       	add	r4, r23
     322:	51 1c       	adc	r5, r1
     324:	0f 2e       	mov	r0, r31
     326:	f4 ee       	ldi	r31, 0xE4	; 228
     328:	ef 2e       	mov	r14, r31
     32a:	fa e0       	ldi	r31, 0x0A	; 10
     32c:	ff 2e       	mov	r15, r31
     32e:	f0 2d       	mov	r31, r0
     330:	04 e6       	ldi	r16, 0x64	; 100
     332:	1a e0       	ldi	r17, 0x0A	; 10
     334:	24 e6       	ldi	r18, 0x64	; 100
     336:	3a e0       	ldi	r19, 0x0A	; 10
     338:	44 ee       	ldi	r20, 0xE4	; 228
     33a:	59 e0       	ldi	r21, 0x09	; 9
     33c:	69 e4       	ldi	r22, 0x49	; 73
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	c2 01       	movw	r24, r4
     342:	fc d2       	rcall	.+1528   	; 0x93c <MATLAB_MF>
     344:	5e 01       	movw	r10, r28
     346:	87 ef       	ldi	r24, 0xF7	; 247
     348:	a8 0e       	add	r10, r24
     34a:	b1 1c       	adc	r11, r1
     34c:	0f 2e       	mov	r0, r31
     34e:	ff e3       	ldi	r31, 0x3F	; 63
     350:	ef 2e       	mov	r14, r31
     352:	fc e0       	ldi	r31, 0x0C	; 12
     354:	ff 2e       	mov	r15, r31
     356:	f0 2d       	mov	r31, r0
     358:	0c e1       	ldi	r16, 0x1C	; 28
     35a:	1c e0       	ldi	r17, 0x0C	; 12
     35c:	2c e1       	ldi	r18, 0x1C	; 28
     35e:	3c e0       	ldi	r19, 0x0C	; 12
     360:	48 eb       	ldi	r20, 0xB8	; 184
     362:	5b e0       	ldi	r21, 0x0B	; 11
     364:	62 e5       	ldi	r22, 0x52	; 82
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	c5 01       	movw	r24, r10
     36a:	e8 d2       	rcall	.+1488   	; 0x93c <MATLAB_MF>
     36c:	1e 01       	movw	r2, r28
     36e:	93 ef       	ldi	r25, 0xF3	; 243
     370:	29 1a       	sub	r2, r25
     372:	9e ef       	ldi	r25, 0xFE	; 254
     374:	39 0a       	sbc	r3, r25
     376:	0f 2e       	mov	r0, r31
     378:	f0 e4       	ldi	r31, 0x40	; 64
     37a:	ef 2e       	mov	r14, r31
     37c:	fc e0       	ldi	r31, 0x0C	; 12
     37e:	ff 2e       	mov	r15, r31
     380:	f0 2d       	mov	r31, r0
     382:	0f e3       	ldi	r16, 0x3F	; 63
     384:	1c e0       	ldi	r17, 0x0C	; 12
     386:	2f e3       	ldi	r18, 0x3F	; 63
     388:	3c e0       	ldi	r19, 0x0C	; 12
     38a:	4e e3       	ldi	r20, 0x3E	; 62
     38c:	5c e0       	ldi	r21, 0x0C	; 12
     38e:	68 e5       	ldi	r22, 0x58	; 88
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	c1 01       	movw	r24, r2
     394:	d3 d2       	rcall	.+1446   	; 0x93c <MATLAB_MF>
     396:	f4 01       	movw	r30, r8
     398:	35 86       	std	Z+13, r3	; 0x0d
     39a:	24 86       	std	Z+12, r2	; 0x0c
     39c:	f1 01       	movw	r30, r2
     39e:	b5 8a       	std	Z+21, r11	; 0x15
     3a0:	a4 8a       	std	Z+20, r10	; 0x14
     3a2:	f5 01       	movw	r30, r10
     3a4:	55 8a       	std	Z+21, r5	; 0x15
     3a6:	44 8a       	std	Z+20, r4	; 0x14
     3a8:	f2 01       	movw	r30, r4
     3aa:	d5 8a       	std	Z+21, r13	; 0x15
     3ac:	c4 8a       	std	Z+20, r12	; 0x14
     3ae:	f6 01       	movw	r30, r12
     3b0:	75 8a       	std	Z+21, r7	; 0x15
     3b2:	64 8a       	std	Z+20, r6	; 0x14
     3b4:	f3 01       	movw	r30, r6
     3b6:	15 8a       	std	Z+21, r1	; 0x15
     3b8:	14 8a       	std	Z+20, r1	; 0x14
     3ba:	e2 56       	subi	r30, 0x62	; 98
     3bc:	f1 09       	sbc	r31, r1
     3be:	f0 93 83 02 	sts	0x0283, r31
     3c2:	e0 93 82 02 	sts	0x0282, r30
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	97 87       	std	Z+15, r25	; 0x0f
     3cc:	86 87       	std	Z+14, r24	; 0x0e
     3ce:	18 8a       	std	Y+16, r1	; 0x10
     3d0:	1f 86       	std	Y+15, r1	; 0x0f
     3d2:	90 92 81 02 	sts	0x0281, r9
     3d6:	80 92 80 02 	sts	0x0280, r8
     3da:	f4 01       	movw	r30, r8
     3dc:	17 86       	std	Z+15, r1	; 0x0f
     3de:	16 86       	std	Z+14, r1	; 0x0e
     3e0:	ae 01       	movw	r20, r28
     3e2:	4d 5d       	subi	r20, 0xDD	; 221
     3e4:	5e 4f       	sbci	r21, 0xFE	; 254
     3e6:	50 93 85 02 	sts	0x0285, r21
     3ea:	40 93 84 02 	sts	0x0284, r20
     3ee:	9e 01       	movw	r18, r28
     3f0:	27 5d       	subi	r18, 0xD7	; 215
     3f2:	3e 4f       	sbci	r19, 0xFE	; 254
     3f4:	fa 01       	movw	r30, r20
     3f6:	35 83       	std	Z+5, r19	; 0x05
     3f8:	24 83       	std	Z+4, r18	; 0x04
     3fa:	82 5d       	subi	r24, 0xD2	; 210
     3fc:	9e 4f       	sbci	r25, 0xFE	; 254
     3fe:	f9 01       	movw	r30, r18
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	84 83       	std	Z+4, r24	; 0x04
     404:	de 01       	movw	r26, r28
     406:	ab 5c       	subi	r26, 0xCB	; 203
     408:	be 4f       	sbci	r27, 0xFE	; 254
     40a:	fc 01       	movw	r30, r24
     40c:	b5 83       	std	Z+5, r27	; 0x05
     40e:	a4 83       	std	Z+4, r26	; 0x04
     410:	6b e3       	ldi	r22, 0x3B	; 59
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	6c 0f       	add	r22, r28
     416:	7d 1f       	adc	r23, r29
     418:	15 96       	adiw	r26, 0x05	; 5
     41a:	7c 93       	st	X, r23
     41c:	6e 93       	st	-X, r22
     41e:	14 97       	sbiw	r26, 0x04	; 4
     420:	c1 5c       	subi	r28, 0xC1	; 193
     422:	de 4f       	sbci	r29, 0xFE	; 254
     424:	19 82       	std	Y+1, r1	; 0x01
     426:	18 82       	st	Y, r1
     428:	cf 53       	subi	r28, 0x3F	; 63
     42a:	d1 40       	sbci	r29, 0x01	; 1
     42c:	6a 5f       	subi	r22, 0xFA	; 250
     42e:	7f 4f       	sbci	r23, 0xFF	; 255
     430:	fa 01       	movw	r30, r20
     432:	71 83       	std	Z+1, r23	; 0x01
     434:	60 83       	st	Z, r22
     436:	3e 01       	movw	r6, r28
     438:	fb eb       	ldi	r31, 0xBB	; 187
     43a:	6f 1a       	sub	r6, r31
     43c:	fe ef       	ldi	r31, 0xFE	; 254
     43e:	7f 0a       	sbc	r7, r31
     440:	fb 01       	movw	r30, r22
     442:	73 82       	std	Z+3, r7	; 0x03
     444:	62 82       	std	Z+2, r6	; 0x02
     446:	f3 01       	movw	r30, r6
     448:	13 82       	std	Z+3, r1	; 0x03
     44a:	12 82       	std	Z+2, r1	; 0x02
     44c:	8e 01       	movw	r16, r28
     44e:	07 5b       	subi	r16, 0xB7	; 183
     450:	1e 4f       	sbci	r17, 0xFE	; 254
     452:	fa 01       	movw	r30, r20
     454:	13 83       	std	Z+3, r17	; 0x03
     456:	02 83       	std	Z+2, r16	; 0x02
     458:	f8 01       	movw	r30, r16
     45a:	13 82       	std	Z+3, r1	; 0x03
     45c:	12 82       	std	Z+2, r1	; 0x02
     45e:	7e 01       	movw	r14, r28
     460:	f7 e4       	ldi	r31, 0x47	; 71
     462:	ef 0e       	add	r14, r31
     464:	f1 1c       	adc	r15, r1
     466:	fb 01       	movw	r30, r22
     468:	f1 82       	std	Z+1, r15	; 0x01
     46a:	e0 82       	st	Z, r14
     46c:	46 5b       	subi	r20, 0xB6	; 182
     46e:	51 09       	sbc	r21, r1
     470:	f3 01       	movw	r30, r6
     472:	51 83       	std	Z+1, r21	; 0x01
     474:	40 83       	st	Z, r20
     476:	fa e0       	ldi	r31, 0x0A	; 10
     478:	af 0e       	add	r10, r31
     47a:	b1 1c       	adc	r11, r1
     47c:	f8 01       	movw	r30, r16
     47e:	b1 82       	std	Z+1, r11	; 0x01
     480:	a0 82       	st	Z, r10
     482:	40 52       	subi	r20, 0x20	; 32
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	f9 01       	movw	r30, r18
     488:	51 83       	std	Z+1, r21	; 0x01
     48a:	40 83       	st	Z, r20
     48c:	60 5f       	subi	r22, 0xF0	; 240
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	fa 01       	movw	r30, r20
     492:	73 83       	std	Z+3, r23	; 0x03
     494:	62 83       	std	Z+2, r22	; 0x02
     496:	fb 01       	movw	r30, r22
     498:	13 82       	std	Z+3, r1	; 0x03
     49a:	12 82       	std	Z+2, r1	; 0x02
     49c:	04 5f       	subi	r16, 0xF4	; 244
     49e:	1f 4f       	sbci	r17, 0xFF	; 255
     4a0:	f9 01       	movw	r30, r18
     4a2:	13 83       	std	Z+3, r17	; 0x03
     4a4:	02 83       	std	Z+2, r16	; 0x02
     4a6:	f8 01       	movw	r30, r16
     4a8:	13 82       	std	Z+3, r1	; 0x03
     4aa:	12 82       	std	Z+2, r1	; 0x02
     4ac:	fa 01       	movw	r30, r20
     4ae:	f1 82       	std	Z+1, r15	; 0x01
     4b0:	e0 82       	st	Z, r14
     4b2:	20 59       	subi	r18, 0x90	; 144
     4b4:	31 09       	sbc	r19, r1
     4b6:	fb 01       	movw	r30, r22
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	fa e0       	ldi	r31, 0x0A	; 10
     4be:	cf 0e       	add	r12, r31
     4c0:	d1 1c       	adc	r13, r1
     4c2:	f8 01       	movw	r30, r16
     4c4:	d1 82       	std	Z+1, r13	; 0x01
     4c6:	c0 82       	st	Z, r12
     4c8:	20 54       	subi	r18, 0x40	; 64
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	fc 01       	movw	r30, r24
     4ce:	31 83       	std	Z+1, r19	; 0x01
     4d0:	20 83       	st	Z, r18
     4d2:	40 5f       	subi	r20, 0xF0	; 240
     4d4:	5f 4f       	sbci	r21, 0xFF	; 255
     4d6:	f9 01       	movw	r30, r18
     4d8:	53 83       	std	Z+3, r21	; 0x03
     4da:	42 83       	std	Z+2, r20	; 0x02
     4dc:	fa 01       	movw	r30, r20
     4de:	13 82       	std	Z+3, r1	; 0x03
     4e0:	12 82       	std	Z+2, r1	; 0x02
     4e2:	60 5f       	subi	r22, 0xF0	; 240
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	fc 01       	movw	r30, r24
     4e8:	73 83       	std	Z+3, r23	; 0x03
     4ea:	62 83       	std	Z+2, r22	; 0x02
     4ec:	fb 01       	movw	r30, r22
     4ee:	13 82       	std	Z+3, r1	; 0x03
     4f0:	12 82       	std	Z+2, r1	; 0x02
     4f2:	f9 01       	movw	r30, r18
     4f4:	f1 82       	std	Z+1, r15	; 0x01
     4f6:	e0 82       	st	Z, r14
     4f8:	8c 5a       	subi	r24, 0xAC	; 172
     4fa:	91 09       	sbc	r25, r1
     4fc:	fa 01       	movw	r30, r20
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
     502:	fa e0       	ldi	r31, 0x0A	; 10
     504:	4f 0e       	add	r4, r31
     506:	51 1c       	adc	r5, r1
     508:	fb 01       	movw	r30, r22
     50a:	51 82       	std	Z+1, r5	; 0x01
     50c:	40 82       	st	Z, r4
     50e:	24 5f       	subi	r18, 0xF4	; 244
     510:	3f 4f       	sbci	r19, 0xFF	; 255
     512:	11 96       	adiw	r26, 0x01	; 1
     514:	3c 93       	st	X, r19
     516:	2e 93       	st	-X, r18
     518:	f9 01       	movw	r30, r18
     51a:	13 82       	std	Z+3, r1	; 0x03
     51c:	12 82       	std	Z+2, r1	; 0x02
     51e:	8a 51       	subi	r24, 0x1A	; 26
     520:	9f 4f       	sbci	r25, 0xFF	; 255
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	9c 93       	st	X, r25
     526:	8e 93       	st	-X, r24
     528:	12 97       	sbiw	r26, 0x02	; 2
     52a:	fc 01       	movw	r30, r24
     52c:	13 82       	std	Z+3, r1	; 0x03
     52e:	12 82       	std	Z+2, r1	; 0x02
     530:	4c 52       	subi	r20, 0x2C	; 44
     532:	51 40       	sbci	r21, 0x01	; 1
     534:	f9 01       	movw	r30, r18
     536:	51 83       	std	Z+1, r21	; 0x01
     538:	40 83       	st	Z, r20
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	2f 0e       	add	r2, r31
     53e:	31 1c       	adc	r3, r1
     540:	fc 01       	movw	r30, r24
     542:	31 82       	std	Z+1, r3	; 0x01
     544:	20 82       	st	Z, r2
     546:	04 96       	adiw	r24, 0x04	; 4
     548:	c5 5c       	subi	r28, 0xC5	; 197
     54a:	de 4f       	sbci	r29, 0xFE	; 254
     54c:	99 83       	std	Y+1, r25	; 0x01
     54e:	88 83       	st	Y, r24
     550:	cb 53       	subi	r28, 0x3B	; 59
     552:	d1 40       	sbci	r29, 0x01	; 1
     554:	fc 01       	movw	r30, r24
     556:	13 82       	std	Z+3, r1	; 0x03
     558:	12 82       	std	Z+2, r1	; 0x02
     55a:	dc 96       	adiw	r26, 0x3c	; 60
     55c:	c3 5c       	subi	r28, 0xC3	; 195
     55e:	de 4f       	sbci	r29, 0xFE	; 254
     560:	b9 83       	std	Y+1, r27	; 0x01
     562:	a8 83       	st	Y, r26
     564:	cd 53       	subi	r28, 0x3D	; 61
     566:	d1 40       	sbci	r29, 0x01	; 1
     568:	13 96       	adiw	r26, 0x03	; 3
     56a:	1c 92       	st	X, r1
     56c:	1e 92       	st	-X, r1
     56e:	12 97       	sbiw	r26, 0x02	; 2
     570:	2a 54       	subi	r18, 0x4A	; 74
     572:	31 40       	sbci	r19, 0x01	; 1
     574:	31 83       	std	Z+1, r19	; 0x01
     576:	20 83       	st	Z, r18
     578:	ad 92       	st	X+, r10
     57a:	bc 92       	st	X, r11
     57c:	b5 d0       	rcall	.+362    	; 0x6e8 <fuzzification>
     57e:	db d0       	rcall	.+438    	; 0x736 <rule_evaluation>
     580:	20 d1       	rcall	.+576    	; 0x7c2 <defuzzification>
     582:	f4 01       	movw	r30, r8
     584:	82 85       	ldd	r24, Z+10	; 0x0a
     586:	93 85       	ldd	r25, Z+11	; 0x0b
     588:	e3 d2       	rcall	.+1478   	; 0xb50 <setServo>
     58a:	cb 58       	subi	r28, 0x8B	; 139
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	68 81       	ld	r22, Y
     590:	79 81       	ldd	r23, Y+1	; 0x01
     592:	c5 57       	subi	r28, 0x75	; 117
     594:	d1 40       	sbci	r29, 0x01	; 1
     596:	6e 31       	cpi	r22, 0x1E	; 30
     598:	71 05       	cpc	r23, r1
     59a:	34 f4       	brge	.+12     	; 0x5a8 <step1+0x4de>
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	90 93 65 01 	sts	0x0165, r25
     5a4:	80 93 64 01 	sts	0x0164, r24
     5a8:	ca 58       	subi	r28, 0x8A	; 138
     5aa:	de 4f       	sbci	r29, 0xFE	; 254
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	5f 90       	pop	r5
     5d4:	4f 90       	pop	r4
     5d6:	3f 90       	pop	r3
     5d8:	2f 90       	pop	r2
     5da:	08 95       	ret

000005dc <fuzzyParking>:




void fuzzyParking(int sonicL, int sonicF, int escCount)
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	8c 01       	movw	r16, r24
     5e6:	eb 01       	movw	r28, r22
	
	if (sonicF>50)
     5e8:	63 33       	cpi	r22, 0x33	; 51
     5ea:	71 05       	cpc	r23, r1
     5ec:	1c f0       	brlt	.+6      	; 0x5f4 <fuzzyParking+0x18>
	{
		setESC(2840);
     5ee:	88 e1       	ldi	r24, 0x18	; 24
     5f0:	9b e0       	ldi	r25, 0x0B	; 11
     5f2:	93 d2       	rcall	.+1318   	; 0xb1a <setESC>
	}
	if (sonicF<10)
     5f4:	ca 30       	cpi	r28, 0x0A	; 10
     5f6:	d1 05       	cpc	r29, r1
     5f8:	1c f4       	brge	.+6      	; 0x600 <fuzzyParking+0x24>
	{
		setESC(2640);
     5fa:	80 e5       	ldi	r24, 0x50	; 80
     5fc:	9a e0       	ldi	r25, 0x0A	; 10
     5fe:	8d d2       	rcall	.+1306   	; 0xb1a <setESC>
	}
	
	
	step1(sonicL, sonicF);
     600:	be 01       	movw	r22, r28
     602:	c8 01       	movw	r24, r16
     604:	62 dd       	rcall	.-1340   	; 0xca <step1>
	
	if (timeToStop)
     606:	80 91 64 01 	lds	r24, 0x0164
     60a:	90 91 65 01 	lds	r25, 0x0165
     60e:	89 2b       	or	r24, r25
     610:	19 f0       	breq	.+6      	; 0x618 <fuzzyParking+0x3c>
	{
		setESC(NEUTRAL);
     612:	8d ec       	ldi	r24, 0xCD	; 205
     614:	9a e0       	ldi	r25, 0x0A	; 10
     616:	81 d2       	rcall	.+1282   	; 0xb1a <setESC>
			
	}
	
	*/
	
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     622:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     624:	84 85       	ldd	r24, Z+12	; 0x0c
     626:	95 85       	ldd	r25, Z+13	; 0x0d
     628:	9b 01       	movw	r18, r22
     62a:	28 1b       	sub	r18, r24
     62c:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     62e:	86 85       	ldd	r24, Z+14	; 0x0e
     630:	97 85       	ldd	r25, Z+15	; 0x0f
     632:	86 1b       	sub	r24, r22
     634:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     636:	12 16       	cp	r1, r18
     638:	13 06       	cpc	r1, r19
     63a:	f4 f4       	brge	.+60     	; 0x678 <compute_degree_of_membership+0x56>
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	f4 f4       	brge	.+60     	; 0x67e <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     642:	60 89       	ldd	r22, Z+16	; 0x10
     644:	71 89       	ldd	r23, Z+17	; 0x11
     646:	a2 89       	ldd	r26, Z+18	; 0x12
     648:	b3 89       	ldd	r27, Z+19	; 0x13
     64a:	8a 9f       	mul	r24, r26
     64c:	a0 01       	movw	r20, r0
     64e:	8b 9f       	mul	r24, r27
     650:	50 0d       	add	r21, r0
     652:	9a 9f       	mul	r25, r26
     654:	50 0d       	add	r21, r0
     656:	11 24       	eor	r1, r1
     658:	26 9f       	mul	r18, r22
     65a:	c0 01       	movw	r24, r0
     65c:	27 9f       	mul	r18, r23
     65e:	90 0d       	add	r25, r0
     660:	36 9f       	mul	r19, r22
     662:	90 0d       	add	r25, r0
     664:	11 24       	eor	r1, r1
     666:	48 17       	cp	r20, r24
     668:	59 07       	cpc	r21, r25
     66a:	0c f4       	brge	.+2      	; 0x66e <compute_degree_of_membership+0x4c>
     66c:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     66e:	8f 3f       	cpi	r24, 0xFF	; 255
     670:	91 05       	cpc	r25, r1
     672:	09 f0       	breq	.+2      	; 0x676 <compute_degree_of_membership+0x54>
     674:	3c f4       	brge	.+14     	; 0x684 <compute_degree_of_membership+0x62>
     676:	08 c0       	rjmp	.+16     	; 0x688 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	05 c0       	rjmp	.+10     	; 0x688 <compute_degree_of_membership+0x66>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     688:	93 87       	std	Z+11, r25	; 0x0b
     68a:	82 87       	std	Z+10, r24	; 0x0a
     68c:	08 95       	ret

0000068e <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     698:	c6 85       	ldd	r28, Z+14	; 0x0e
     69a:	d7 85       	ldd	r29, Z+15	; 0x0f
     69c:	84 85       	ldd	r24, Z+12	; 0x0c
     69e:	95 85       	ldd	r25, Z+13	; 0x0d
     6a0:	c8 1b       	sub	r28, r24
     6a2:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     6a4:	22 85       	ldd	r18, Z+10	; 0x0a
     6a6:	33 85       	ldd	r19, Z+11	; 0x0b
     6a8:	60 89       	ldd	r22, Z+16	; 0x10
     6aa:	71 89       	ldd	r23, Z+17	; 0x11
     6ac:	c9 01       	movw	r24, r18
     6ae:	e3 d5       	rcall	.+3014   	; 0x1276 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     6b0:	8e 01       	movw	r16, r28
     6b2:	06 1b       	sub	r16, r22
     6b4:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     6b6:	62 89       	ldd	r22, Z+18	; 0x12
     6b8:	73 89       	ldd	r23, Z+19	; 0x13
     6ba:	c9 01       	movw	r24, r18
     6bc:	dc d5       	rcall	.+3000   	; 0x1276 <__divmodhi4>
    top = base - run_1 - run_2;
     6be:	06 1b       	sub	r16, r22
     6c0:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     6c2:	c0 0f       	add	r28, r16
     6c4:	d1 1f       	adc	r29, r17
     6c6:	2c 9f       	mul	r18, r28
     6c8:	c0 01       	movw	r24, r0
     6ca:	2d 9f       	mul	r18, r29
     6cc:	90 0d       	add	r25, r0
     6ce:	3c 9f       	mul	r19, r28
     6d0:	90 0d       	add	r25, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	99 23       	and	r25, r25
     6d6:	0c f4       	brge	.+2      	; 0x6da <compute_area_of_trapezoid+0x4c>
     6d8:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     6da:	95 95       	asr	r25
     6dc:	87 95       	ror	r24
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	08 95       	ret

000006e8 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     6f0:	00 91 82 02 	lds	r16, 0x0282
     6f4:	10 91 83 02 	lds	r17, 0x0283
     6f8:	01 15       	cp	r16, r1
     6fa:	11 05       	cpc	r17, r1
     6fc:	b9 f0       	breq	.+46     	; 0x72c <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     6fe:	f8 01       	movw	r30, r16
     700:	c4 85       	ldd	r28, Z+12	; 0x0c
     702:	d5 85       	ldd	r29, Z+13	; 0x0d
     704:	20 97       	sbiw	r28, 0x00	; 0
     706:	61 f0       	breq	.+24     	; 0x720 <fuzzification+0x38>
            if (mf!=NULL) {
     708:	20 97       	sbiw	r28, 0x00	; 0
     70a:	29 f0       	breq	.+10     	; 0x716 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     70c:	f8 01       	movw	r30, r16
     70e:	62 85       	ldd	r22, Z+10	; 0x0a
     710:	73 85       	ldd	r23, Z+11	; 0x0b
     712:	ce 01       	movw	r24, r28
     714:	86 df       	rcall	.-244    	; 0x622 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     716:	0c 88       	ldd	r0, Y+20	; 0x14
     718:	dd 89       	ldd	r29, Y+21	; 0x15
     71a:	c0 2d       	mov	r28, r0
     71c:	20 97       	sbiw	r28, 0x00	; 0
     71e:	a1 f7       	brne	.-24     	; 0x708 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     720:	f8 01       	movw	r30, r16
     722:	06 85       	ldd	r16, Z+14	; 0x0e
     724:	17 85       	ldd	r17, Z+15	; 0x0f
     726:	01 15       	cp	r16, r1
     728:	11 05       	cpc	r17, r1
     72a:	49 f7       	brne	.-46     	; 0x6fe <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     73e:	c0 91 84 02 	lds	r28, 0x0284
     742:	d0 91 85 02 	lds	r29, 0x0285
     746:	20 97       	sbiw	r28, 0x00	; 0
     748:	b9 f1       	breq	.+110    	; 0x7b8 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     74e:	e8 81       	ld	r30, Y
     750:	f9 81       	ldd	r31, Y+1	; 0x01
     752:	30 97       	sbiw	r30, 0x00	; 0
     754:	81 f0       	breq	.+32     	; 0x776 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     756:	20 2f       	mov	r18, r16
     758:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     75a:	a0 81       	ld	r26, Z
     75c:	b1 81       	ldd	r27, Z+1	; 0x01
     75e:	8d 91       	ld	r24, X+
     760:	9c 91       	ld	r25, X
     762:	82 17       	cp	r24, r18
     764:	93 07       	cpc	r25, r19
     766:	0c f4       	brge	.+2      	; 0x76a <rule_evaluation+0x34>
     768:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     76a:	02 80       	ldd	r0, Z+2	; 0x02
     76c:	f3 81       	ldd	r31, Z+3	; 0x03
     76e:	e0 2d       	mov	r30, r0
     770:	30 97       	sbiw	r30, 0x00	; 0
     772:	99 f7       	brne	.-26     	; 0x75a <rule_evaluation+0x24>
     774:	02 c0       	rjmp	.+4      	; 0x77a <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     776:	20 2f       	mov	r18, r16
     778:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     77a:	ea 81       	ldd	r30, Y+2	; 0x02
     77c:	fb 81       	ldd	r31, Y+3	; 0x03
     77e:	30 97       	sbiw	r30, 0x00	; 0
     780:	b1 f0       	breq	.+44     	; 0x7ae <rule_evaluation+0x78>
     782:	72 2f       	mov	r23, r18
     784:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     786:	a0 81       	ld	r26, Z
     788:	b1 81       	ldd	r27, Z+1	; 0x01
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	57 2f       	mov	r21, r23
     792:	46 2f       	mov	r20, r22
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	14 f4       	brge	.+4      	; 0x79e <rule_evaluation+0x68>
     79a:	58 2f       	mov	r21, r24
     79c:	49 2f       	mov	r20, r25
     79e:	5c 93       	st	X, r21
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     7a4:	02 80       	ldd	r0, Z+2	; 0x02
     7a6:	f3 81       	ldd	r31, Z+3	; 0x03
     7a8:	e0 2d       	mov	r30, r0
     7aa:	30 97       	sbiw	r30, 0x00	; 0
     7ac:	61 f7       	brne	.-40     	; 0x786 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     7ae:	0c 80       	ldd	r0, Y+4	; 0x04
     7b0:	dd 81       	ldd	r29, Y+5	; 0x05
     7b2:	c0 2d       	mov	r28, r0
     7b4:	20 97       	sbiw	r28, 0x00	; 0
     7b6:	59 f6       	brne	.-106    	; 0x74e <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     7c2:	2f 92       	push	r2
     7c4:	3f 92       	push	r3
     7c6:	4f 92       	push	r4
     7c8:	5f 92       	push	r5
     7ca:	6f 92       	push	r6
     7cc:	7f 92       	push	r7
     7ce:	8f 92       	push	r8
     7d0:	9f 92       	push	r9
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <defuzzification+0x26>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <defuzzification+0x28>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <defuzzification+0x2a>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     7f0:	80 91 80 02 	lds	r24, 0x0280
     7f4:	90 91 81 02 	lds	r25, 0x0281
     7f8:	9c 83       	std	Y+4, r25	; 0x04
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f4       	brne	.+2      	; 0x802 <defuzzification+0x40>
     800:	84 c0       	rjmp	.+264    	; 0x90a <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     802:	eb 81       	ldd	r30, Y+3	; 0x03
     804:	fc 81       	ldd	r31, Y+4	; 0x04
     806:	04 84       	ldd	r0, Z+12	; 0x0c
     808:	f5 85       	ldd	r31, Z+13	; 0x0d
     80a:	e0 2d       	mov	r30, r0
     80c:	fe 83       	std	Y+6, r31	; 0x06
     80e:	ed 83       	std	Y+5, r30	; 0x05
     810:	ef 2b       	or	r30, r31
     812:	09 f4       	brne	.+2      	; 0x816 <defuzzification+0x54>
     814:	66 c0       	rjmp	.+204    	; 0x8e2 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     816:	51 2c       	mov	r5, r1
     818:	61 2c       	mov	r6, r1
     81a:	71 2c       	mov	r7, r1
     81c:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     81e:	31 2c       	mov	r3, r1
     820:	21 2c       	mov	r2, r1
     822:	19 82       	std	Y+1, r1	; 0x01
     824:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     826:	8d 81       	ldd	r24, Y+5	; 0x05
     828:	9e 81       	ldd	r25, Y+6	; 0x06
     82a:	31 df       	rcall	.-414    	; 0x68e <compute_area_of_trapezoid>
     82c:	bc 01       	movw	r22, r24
     82e:	88 27       	eor	r24, r24
     830:	77 fd       	sbrc	r23, 7
     832:	80 95       	com	r24
     834:	98 2f       	mov	r25, r24
     836:	30 d4       	rcall	.+2144   	; 0x1098 <__floatsisf>
     838:	6b 01       	movw	r12, r22
     83a:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     83c:	ed 81       	ldd	r30, Y+5	; 0x05
     83e:	fe 81       	ldd	r31, Y+6	; 0x06
     840:	04 85       	ldd	r16, Z+12	; 0x0c
     842:	15 85       	ldd	r17, Z+13	; 0x0d
     844:	b8 01       	movw	r22, r16
     846:	88 27       	eor	r24, r24
     848:	77 fd       	sbrc	r23, 7
     84a:	80 95       	com	r24
     84c:	98 2f       	mov	r25, r24
     84e:	24 d4       	rcall	.+2120   	; 0x1098 <__floatsisf>
     850:	4b 01       	movw	r8, r22
     852:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     854:	ed 81       	ldd	r30, Y+5	; 0x05
     856:	fe 81       	ldd	r31, Y+6	; 0x06
     858:	86 85       	ldd	r24, Z+14	; 0x0e
     85a:	97 85       	ldd	r25, Z+15	; 0x0f
     85c:	80 1b       	sub	r24, r16
     85e:	91 0b       	sbc	r25, r17
     860:	bc 01       	movw	r22, r24
     862:	12 f4       	brpl	.+4      	; 0x868 <defuzzification+0xa6>
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	75 95       	asr	r23
     86a:	67 95       	ror	r22
            centroid = centroid + intermed;
     86c:	88 27       	eor	r24, r24
     86e:	77 fd       	sbrc	r23, 7
     870:	80 95       	com	r24
     872:	98 2f       	mov	r25, r24
     874:	11 d4       	rcall	.+2082   	; 0x1098 <__floatsisf>
     876:	a5 01       	movw	r20, r10
     878:	94 01       	movw	r18, r8
     87a:	0f d3       	rcall	.+1566   	; 0xe9a <__addsf3>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	95 d4       	rcall	.+2346   	; 0x11b0 <__mulsf3>
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	63 2d       	mov	r22, r3
     88c:	72 2d       	mov	r23, r2
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	03 d3       	rcall	.+1542   	; 0xe9a <__addsf3>
     894:	36 2e       	mov	r3, r22
     896:	27 2e       	mov	r2, r23
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     89c:	a7 01       	movw	r20, r14
     89e:	96 01       	movw	r18, r12
     8a0:	65 2d       	mov	r22, r5
     8a2:	76 2d       	mov	r23, r6
     8a4:	87 2d       	mov	r24, r7
     8a6:	94 2d       	mov	r25, r4
     8a8:	f8 d2       	rcall	.+1520   	; 0xe9a <__addsf3>
     8aa:	56 2e       	mov	r5, r22
     8ac:	67 2e       	mov	r6, r23
     8ae:	78 2e       	mov	r7, r24
     8b0:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     8b2:	ed 81       	ldd	r30, Y+5	; 0x05
     8b4:	fe 81       	ldd	r31, Y+6	; 0x06
     8b6:	04 88       	ldd	r0, Z+20	; 0x14
     8b8:	f5 89       	ldd	r31, Z+21	; 0x15
     8ba:	e0 2d       	mov	r30, r0
     8bc:	fe 83       	std	Y+6, r31	; 0x06
     8be:	ed 83       	std	Y+5, r30	; 0x05
     8c0:	ef 2b       	or	r30, r31
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <defuzzification+0x104>
     8c4:	b0 cf       	rjmp	.-160    	; 0x826 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     8c6:	26 2f       	mov	r18, r22
     8c8:	37 2f       	mov	r19, r23
     8ca:	48 2f       	mov	r20, r24
     8cc:	59 2f       	mov	r21, r25
     8ce:	63 2d       	mov	r22, r3
     8d0:	72 2d       	mov	r23, r2
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	45 d3       	rcall	.+1674   	; 0xf62 <__divsf3>
     8d8:	26 2f       	mov	r18, r22
     8da:	37 2f       	mov	r19, r23
     8dc:	48 2f       	mov	r20, r24
     8de:	59 2f       	mov	r21, r25
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     8ea:	62 2f       	mov	r22, r18
     8ec:	73 2f       	mov	r23, r19
     8ee:	84 2f       	mov	r24, r20
     8f0:	95 2f       	mov	r25, r21
     8f2:	9f d3       	rcall	.+1854   	; 0x1032 <__fixsfsi>
     8f4:	eb 81       	ldd	r30, Y+3	; 0x03
     8f6:	fc 81       	ldd	r31, Y+4	; 0x04
     8f8:	73 87       	std	Z+11, r23	; 0x0b
     8fa:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     8fc:	86 85       	ldd	r24, Z+14	; 0x0e
     8fe:	97 85       	ldd	r25, Z+15	; 0x0f
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	8b 83       	std	Y+3, r24	; 0x03
     904:	89 2b       	or	r24, r25
     906:	09 f0       	breq	.+2      	; 0x90a <defuzzification+0x148>
     908:	7c cf       	rjmp	.-264    	; 0x802 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     90a:	26 96       	adiw	r28, 0x06	; 6
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	08 95       	ret

0000093c <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     93c:	af 92       	push	r10
     93e:	bf 92       	push	r11
     940:	cf 92       	push	r12
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	6a 01       	movw	r12, r20
     954:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     956:	b6 d4       	rcall	.+2412   	; 0x12c4 <strcpy>
    newMf->value = 0;
     958:	1b 86       	std	Y+11, r1	; 0x0b
     95a:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     95c:	dd 86       	std	Y+13, r13	; 0x0d
     95e:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     960:	ff 86       	std	Y+15, r15	; 0x0f
     962:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     964:	b5 01       	movw	r22, r10
     966:	6c 19       	sub	r22, r12
     968:	7d 09       	sbc	r23, r13
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	31 e0       	ldi	r19, 0x01	; 1
     96e:	c9 01       	movw	r24, r18
     970:	82 d4       	rcall	.+2308   	; 0x1276 <__divmodhi4>
     972:	79 8b       	std	Y+17, r23	; 0x11
     974:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     976:	b7 01       	movw	r22, r14
     978:	60 1b       	sub	r22, r16
     97a:	71 0b       	sbc	r23, r17
     97c:	c9 01       	movw	r24, r18
     97e:	7b d4       	rcall	.+2294   	; 0x1276 <__divmodhi4>
     980:	7b 8b       	std	Y+19, r23	; 0x13
     982:	6a 8b       	std	Y+18, r22	; 0x12
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	08 95       	ret

0000099a <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile int counter_UART1_reciever;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	0b b6       	in	r0, 0x3b	; 59
     9a6:	0f 92       	push	r0
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
     9b0:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
     9b4:	8f 3f       	cpi	r24, 0xFF	; 255
     9b6:	29 f4       	brne	.+10     	; 0x9c2 <__vector_28+0x28>
		counter_UART1_reciever = 0;
     9b8:	10 92 a7 02 	sts	0x02A7, r1
     9bc:	10 92 a6 02 	sts	0x02A6, r1
     9c0:	10 c0       	rjmp	.+32     	; 0x9e2 <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
     9c2:	e0 91 a6 02 	lds	r30, 0x02A6
     9c6:	f0 91 a7 02 	lds	r31, 0x02A7
     9ca:	ea 57       	subi	r30, 0x7A	; 122
     9cc:	fd 4f       	sbci	r31, 0xFD	; 253
     9ce:	80 83       	st	Z, r24
		counter_UART1_reciever++;
     9d0:	80 91 a6 02 	lds	r24, 0x02A6
     9d4:	90 91 a7 02 	lds	r25, 0x02A7
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	90 93 a7 02 	sts	0x02A7, r25
     9de:	80 93 a6 02 	sts	0x02A6, r24
	
	//Enabling interrupts
	//sei();

	
}
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	0f 90       	pop	r0
     9ec:	0b be       	out	0x3b, r0	; 59
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
     9f8:	75 d0       	rcall	.+234    	; 0xae4 <pwmInit>
	spi_slave_init();
     9fa:	31 c1       	rjmp	.+610    	; 0xc5e <spi_slave_init>
     9fc:	08 95       	ret

000009fe <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
     9fe:	ec ec       	ldi	r30, 0xCC	; 204
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	11 82       	std	Z+1, r1	; 0x01
     a04:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
     a06:	20 e9       	ldi	r18, 0x90	; 144
     a08:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
     a0c:	2e e0       	ldi	r18, 0x0E	; 14
     a0e:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
     a12:	91 83       	std	Z+1, r25	; 0x01
     a14:	80 83       	st	Z, r24
     a16:	08 95       	ret

00000a18 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
     a18:	fc 01       	movw	r30, r24
	
	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
     a1a:	a9 ec       	ldi	r26, 0xC9	; 201
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	8c 91       	ld	r24, X
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	8c 93       	st	X, r24
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[4];
     a24:	80 91 8a 02 	lds	r24, 0x028A
     a28:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[5];
     a2a:	80 91 8b 02 	lds	r24, 0x028B
     a2e:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[2];
     a30:	80 91 88 02 	lds	r24, 0x0288
     a34:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[0];
     a36:	80 91 86 02 	lds	r24, 0x0286
     a3a:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[1];
     a3c:	80 91 87 02 	lds	r24, 0x0287
     a40:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[3];
     a42:	80 91 89 02 	lds	r24, 0x0289
     a46:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
     a48:	10 92 a7 02 	sts	0x02A7, r1
     a4c:	10 92 a6 02 	sts	0x02A6, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
     a50:	8c 91       	ld	r24, X
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret

00000a58 <main>:




int main (void)
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	2b 97       	sbiw	r28, 0x0b	; 11
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
	
	fuzzyParking(40,100,2850);
     a6c:	42 e2       	ldi	r20, 0x22	; 34
     a6e:	5b e0       	ldi	r21, 0x0B	; 11
     a70:	64 e6       	ldi	r22, 0x64	; 100
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	88 e2       	ldi	r24, 0x28	; 40
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	b1 dd       	rcall	.-1182   	; 0x5dc <fuzzyParking>
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
	
	carInit();
     a7a:	be df       	rcall	.-132    	; 0x9f8 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7c:	2f ef       	ldi	r18, 0xFF	; 255
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	90 ee       	ldi	r25, 0xE0	; 224
     a82:	21 50       	subi	r18, 0x01	; 1
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <main+0x2a>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <main+0x34>
     a8c:	00 00       	nop
	_delay_ms(5000);
	
	
	
	sei();
     a8e:	78 94       	sei
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
     a90:	87 e0       	ldi	r24, 0x07	; 7
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	b4 df       	rcall	.-152    	; 0x9fe <USART1_init>
			
			cli();
			
			//FLC_obstacle(OCR1A, sF, v);
			//FLC_steering(c, v);
			fuzzyParking(sL,sF, OCR1A);
     a96:	08 e8       	ldi	r16, 0x88	; 136
     a98:	10 e0       	ldi	r17, 0x00	; 0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fa e8       	ldi	r31, 0x8A	; 138
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f1 2c       	mov	r15, r1
     aa2:	f0 2d       	mov	r31, r0
	//DDRA = 0xFF;
	//End of test setting
	
	while (1) {
		
		if (counter_UART1_reciever > 5) {
     aa4:	80 91 a6 02 	lds	r24, 0x02A6
     aa8:	90 91 a7 02 	lds	r25, 0x02A7
     aac:	06 97       	sbiw	r24, 0x06	; 6
     aae:	d4 f3       	brlt	.-12     	; 0xaa4 <main+0x4c>
			
			//Reading Information
			read_sensor_info(&control_mode, sens_info_ptr);
     ab0:	be 01       	movw	r22, r28
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	ce 01       	movw	r24, r28
     ab8:	0b 96       	adiw	r24, 0x0b	; 11
     aba:	11 d1       	rcall	.+546    	; 0xcde <read_sensor_info>
			Sens_info_read(sens_info_ptr);
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	ab df       	rcall	.-170    	; 0xa18 <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
     ac2:	6b 81       	ldd	r22, Y+3	; 0x03
     ac4:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	90 e0       	ldi	r25, 0x00	; 0
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			
			cli();
     aca:	f8 94       	cli
			
			//FLC_obstacle(OCR1A, sF, v);
			//FLC_steering(c, v);
			fuzzyParking(sL,sF, OCR1A);
     acc:	f8 01       	movw	r30, r16
     ace:	40 81       	ld	r20, Z
     ad0:	51 81       	ldd	r21, Z+1	; 0x01
     ad2:	84 dd       	rcall	.-1272   	; 0x5dc <fuzzyParking>
			sei();
     ad4:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
     ad6:	f8 01       	movw	r30, r16
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     adc:	f7 01       	movw	r30, r14
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	e0 cf       	rjmp	.-64     	; 0xaa4 <main+0x4c>

00000ae4 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     ae4:	80 e3       	ldi	r24, 0x30	; 48
     ae6:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     ae8:	82 ea       	ldi	r24, 0xA2	; 162
     aea:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	9f e8       	ldi	r25, 0x8F	; 143
     af2:	90 93 87 00 	sts	0x0087, r25
     af6:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     afa:	8a e1       	ldi	r24, 0x1A	; 26
     afc:	80 93 81 00 	sts	0x0081, r24
	OCR1A = NEUTRAL;
     b00:	8d ec       	ldi	r24, 0xCD	; 205
     b02:	9a e0       	ldi	r25, 0x0A	; 10
     b04:	90 93 89 00 	sts	0x0089, r25
     b08:	80 93 88 00 	sts	0x0088, r24
	OCR1B =STRAIGHT;
     b0c:	84 e6       	ldi	r24, 0x64	; 100
     b0e:	9a e0       	ldi	r25, 0x0A	; 10
     b10:	90 93 8b 00 	sts	0x008B, r25
     b14:	80 93 8a 00 	sts	0x008A, r24
     b18:	08 95       	ret

00000b1a <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     b1a:	80 36       	cpi	r24, 0x60	; 96
     b1c:	2a e0       	ldi	r18, 0x0A	; 10
     b1e:	92 07       	cpc	r25, r18
     b20:	3c f4       	brge	.+14     	; 0xb30 <setESC+0x16>
	{
		OCR1A = MINESC;
     b22:	8f e5       	ldi	r24, 0x5F	; 95
     b24:	9a e0       	ldi	r25, 0x0A	; 10
     b26:	90 93 89 00 	sts	0x0089, r25
     b2a:	80 93 88 00 	sts	0x0088, r24
     b2e:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     b30:	8b 33       	cpi	r24, 0x3B	; 59
     b32:	2b e0       	ldi	r18, 0x0B	; 11
     b34:	92 07       	cpc	r25, r18
     b36:	3c f0       	brlt	.+14     	; 0xb46 <setESC+0x2c>
	{
		OCR1A = MAXESC;
     b38:	8b e3       	ldi	r24, 0x3B	; 59
     b3a:	9b e0       	ldi	r25, 0x0B	; 11
     b3c:	90 93 89 00 	sts	0x0089, r25
     b40:	80 93 88 00 	sts	0x0088, r24
     b44:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     b46:	90 93 89 00 	sts	0x0089, r25
     b4a:	80 93 88 00 	sts	0x0088, r24
     b4e:	08 95       	ret

00000b50 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo > MAXRIGHT){
     b50:	80 34       	cpi	r24, 0x40	; 64
     b52:	2c e0       	ldi	r18, 0x0C	; 12
     b54:	92 07       	cpc	r25, r18
     b56:	3c f0       	brlt	.+14     	; 0xb66 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     b58:	8f e3       	ldi	r24, 0x3F	; 63
     b5a:	9c e0       	ldi	r25, 0x0C	; 12
     b5c:	90 93 8b 00 	sts	0x008B, r25
     b60:	80 93 8a 00 	sts	0x008A, r24
     b64:	08 95       	ret
		
	}	else if (counterServo < MAXLEFT){
     b66:	86 3e       	cpi	r24, 0xE6	; 230
     b68:	27 e0       	ldi	r18, 0x07	; 7
     b6a:	92 07       	cpc	r25, r18
     b6c:	3c f4       	brge	.+14     	; 0xb7c <setServo+0x2c>

		OCR1B = MAXLEFT;
     b6e:	86 ee       	ldi	r24, 0xE6	; 230
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	90 93 8b 00 	sts	0x008B, r25
     b76:	80 93 8a 00 	sts	0x008A, r24
     b7a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;
     b7c:	90 93 8b 00 	sts	0x008B, r25
     b80:	80 93 8a 00 	sts	0x008A, r24
     b84:	08 95       	ret

00000b86 <__vector_19>:
		tx_spi.i_first = 0;
	}
			
			

	sei();
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	0b b6       	in	r0, 0x3b	; 59
     b92:	0f 92       	push	r0
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
     ba4:	10 98       	cbi	0x02, 0	; 2
     ba6:	2e b5       	in	r18, 0x2e	; 46
     ba8:	2d 3f       	cpi	r18, 0xFD	; 253
     baa:	a9 f0       	breq	.+42     	; 0xbd6 <__vector_19+0x50>
     bac:	e0 ef       	ldi	r30, 0xF0	; 240
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	80 81       	ld	r24, Z
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
     bb4:	dc 01       	movw	r26, r24
     bb6:	a2 55       	subi	r26, 0x52	; 82
     bb8:	be 4f       	sbci	r27, 0xFE	; 254
     bba:	2c 93       	st	X, r18
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24
     bc2:	e2 ef       	ldi	r30, 0xF2	; 242
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 66 01 	sts	0x0166, r24
     bd6:	80 91 f0 01 	lds	r24, 0x01F0
     bda:	90 91 f1 01 	lds	r25, 0x01F1
     bde:	80 34       	cpi	r24, 0x40	; 64
     be0:	91 05       	cpc	r25, r1
     be2:	21 f4       	brne	.+8      	; 0xbec <__vector_19+0x66>
     be4:	10 92 f1 01 	sts	0x01F1, r1
     be8:	10 92 f0 01 	sts	0x01F0, r1
     bec:	80 91 ac 01 	lds	r24, 0x01AC
     bf0:	90 91 ad 01 	lds	r25, 0x01AD
     bf4:	89 2b       	or	r24, r25
     bf6:	01 f1       	breq	.+64     	; 0xc38 <__vector_19+0xb2>
     bf8:	e0 91 a8 01 	lds	r30, 0x01A8
     bfc:	f0 91 a9 01 	lds	r31, 0x01A9
     c00:	e8 59       	subi	r30, 0x98	; 152
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	80 81       	ld	r24, Z
     c06:	8e bd       	out	0x2e, r24	; 46
     c08:	e8 ea       	ldi	r30, 0xA8	; 168
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	80 83       	st	Z, r24
     c16:	ec ea       	ldi	r30, 0xAC	; 172
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	20 81       	ld	r18, Z
     c1c:	31 81       	ldd	r19, Z+1	; 0x01
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	31 09       	sbc	r19, r1
     c22:	31 83       	std	Z+1, r19	; 0x01
     c24:	20 83       	st	Z, r18
     c26:	10 9a       	sbi	0x02, 0	; 2
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	49 f4       	brne	.+18     	; 0xc40 <__vector_19+0xba>
     c2e:	10 92 a9 01 	sts	0x01A9, r1
     c32:	10 92 a8 01 	sts	0x01A8, r1
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <__vector_19+0xba>
     c38:	8d ef       	ldi	r24, 0xFD	; 253
     c3a:	8e bd       	out	0x2e, r24	; 46
     c3c:	10 92 67 01 	sts	0x0167, r1
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	bf 91       	pop	r27
     c46:	af 91       	pop	r26
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0b be       	out	0x3b, r0	; 59
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <spi_slave_init>:
     c5e:	80 e4       	ldi	r24, 0x40	; 64
     c60:	84 b9       	out	0x04, r24	; 4
     c62:	80 ec       	ldi	r24, 0xC0	; 192
     c64:	8c bd       	out	0x2c, r24	; 44
     c66:	08 9a       	sbi	0x01, 0	; 1
     c68:	10 98       	cbi	0x02, 0	; 2
     c6a:	8d ef       	ldi	r24, 0xFD	; 253
     c6c:	8e bd       	out	0x2e, r24	; 46
     c6e:	08 95       	ret

00000c70 <spi_get_byte>:
     c70:	f8 94       	cli
     c72:	20 91 f2 01 	lds	r18, 0x01F2
     c76:	30 91 f3 01 	lds	r19, 0x01F3
     c7a:	21 15       	cp	r18, r1
     c7c:	31 05       	cpc	r19, r1
     c7e:	a9 f0       	breq	.+42     	; 0xcaa <spi_get_byte+0x3a>
     c80:	ee ee       	ldi	r30, 0xEE	; 238
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	40 81       	ld	r20, Z
     c86:	51 81       	ldd	r21, Z+1	; 0x01
     c88:	da 01       	movw	r26, r20
     c8a:	a2 55       	subi	r26, 0x52	; 82
     c8c:	be 4f       	sbci	r27, 0xFE	; 254
     c8e:	8c 91       	ld	r24, X
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	51 83       	std	Z+1, r21	; 0x01
     c96:	40 83       	st	Z, r20
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	31 09       	sbc	r19, r1
     c9c:	30 93 f3 01 	sts	0x01F3, r19
     ca0:	20 93 f2 01 	sts	0x01F2, r18
     ca4:	23 2b       	or	r18, r19
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <spi_get_byte+0x40>
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <spi_get_byte+0x3c>
     caa:	8e ef       	ldi	r24, 0xFE	; 254
     cac:	10 92 66 01 	sts	0x0166, r1
     cb0:	20 91 ee 01 	lds	r18, 0x01EE
     cb4:	30 91 ef 01 	lds	r19, 0x01EF
     cb8:	20 34       	cpi	r18, 0x40	; 64
     cba:	31 05       	cpc	r19, r1
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <spi_get_byte+0x56>
     cbe:	10 92 ef 01 	sts	0x01EF, r1
     cc2:	10 92 ee 01 	sts	0x01EE, r1
     cc6:	78 94       	sei
     cc8:	08 95       	ret

00000cca <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	20 91 f2 01 	lds	r18, 0x01F2
     cd0:	30 91 f3 01 	lds	r19, 0x01F3
     cd4:	25 30       	cpi	r18, 0x05	; 5
     cd6:	31 05       	cpc	r19, r1
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <is_package_recieved+0x12>
     cda:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
     cdc:	08 95       	ret

00000cde <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	8c 01       	movw	r16, r24
     ce8:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
     cea:	20 91 f2 01 	lds	r18, 0x01F2
     cee:	30 91 f3 01 	lds	r19, 0x01F3
     cf2:	23 2b       	or	r18, r19
     cf4:	f9 f0       	breq	.+62     	; 0xd34 <read_sensor_info+0x56>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
     cf6:	e0 91 ee 01 	lds	r30, 0x01EE
     cfa:	f0 91 ef 01 	lds	r31, 0x01EF
     cfe:	e2 55       	subi	r30, 0x52	; 82
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	80 81       	ld	r24, Z
     d04:	8f 3f       	cpi	r24, 0xFF	; 255
     d06:	71 f4       	brne	.+28     	; 0xd24 <read_sensor_info+0x46>
     d08:	e0 df       	rcall	.-64     	; 0xcca <is_package_recieved>
     d0a:	88 23       	and	r24, r24
     d0c:	a1 f0       	breq	.+40     	; 0xd36 <read_sensor_info+0x58>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
     d0e:	b0 df       	rcall	.-160    	; 0xc70 <spi_get_byte>
		//Read all info and write it to sensor struct

		//*control_mode_ptr = spi_get_byte();
		//sens_info_ptr->dist_right_line = spi_get_byte();
		//sens_info_ptr->angular_diff = spi_get_byte();
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
     d10:	af df       	rcall	.-162    	; 0xc70 <spi_get_byte>
     d12:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
     d14:	ad df       	rcall	.-166    	; 0xc70 <spi_get_byte>
     d16:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
     d18:	ab df       	rcall	.-170    	; 0xc70 <spi_get_byte>
     d1a:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
     d1c:	a9 df       	rcall	.-174    	; 0xc70 <spi_get_byte>
     d1e:	8d 83       	std	Y+5, r24	; 0x05
		//sens_info_ptr->car_speed = spi_get_byte();
		//sens_info_ptr->dist_to_stop_line = spi_get_byte();
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <read_sensor_info+0x58>
	} else if (is_package_recieved()){
     d24:	d2 df       	rcall	.-92     	; 0xcca <is_package_recieved>
     d26:	88 23       	and	r24, r24
     d28:	31 f0       	breq	.+12     	; 0xd36 <read_sensor_info+0x58>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
     d2a:	a2 df       	rcall	.-188    	; 0xc70 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
     d2c:	be 01       	movw	r22, r28
     d2e:	c8 01       	movw	r24, r16
     d30:	d6 df       	rcall	.-84     	; 0xcde <read_sensor_info>
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <read_sensor_info+0x58>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
     d34:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     d60:	80 91 7e 02 	lds	r24, 0x027E
     d64:	90 91 7f 02 	lds	r25, 0x027F
     d68:	80 34       	cpi	r24, 0x40	; 64
     d6a:	91 05       	cpc	r25, r1
     d6c:	31 f4       	brne	.+12     	; 0xd7a <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 ac 02 	sts	0x02AC, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     d74:	80 91 c6 00 	lds	r24, 0x00C6
     d78:	16 c0       	rjmp	.+44     	; 0xda6 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	e8 f4       	brcc	.+58     	; 0xdba <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     d80:	ec e7       	ldi	r30, 0x7C	; 124
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	20 81       	ld	r18, Z
     d86:	31 81       	ldd	r19, Z+1	; 0x01
     d88:	40 91 c6 00 	lds	r20, 0x00C6
     d8c:	d9 01       	movw	r26, r18
     d8e:	a6 5c       	subi	r26, 0xC6	; 198
     d90:	bd 4f       	sbci	r27, 0xFD	; 253
     d92:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
     d98:	31 83       	std	Z+1, r19	; 0x01
     d9a:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	90 93 7f 02 	sts	0x027F, r25
     da2:	80 93 7e 02 	sts	0x027E, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     da6:	80 91 7e 02 	lds	r24, 0x027E
     daa:	90 91 7f 02 	lds	r25, 0x027F
     dae:	80 34       	cpi	r24, 0x40	; 64
     db0:	91 05       	cpc	r25, r1
     db2:	19 f4       	brne	.+6      	; 0xdba <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 aa 02 	sts	0x02AA, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     dba:	80 91 7c 02 	lds	r24, 0x027C
     dbe:	90 91 7d 02 	lds	r25, 0x027D
     dc2:	80 34       	cpi	r24, 0x40	; 64
     dc4:	91 05       	cpc	r25, r1
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <__vector_20+0x90>
		rx_uart0.i_last = 0;
     dc8:	10 92 7d 02 	sts	0x027D, r1
     dcc:	10 92 7c 02 	sts	0x027C, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	80 93 a9 02 	sts	0x02A9, r24
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0b be       	out	0x3b, r0	; 59
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_22>:




ISR(USART0_TX_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     e0c:	80 91 38 02 	lds	r24, 0x0238
     e10:	90 91 39 02 	lds	r25, 0x0239
     e14:	80 34       	cpi	r24, 0x40	; 64
     e16:	91 05       	cpc	r25, r1
     e18:	19 f4       	brne	.+6      	; 0xe20 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     e1a:	10 92 a8 02 	sts	0x02A8, r1
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     e20:	89 2b       	or	r24, r25
     e22:	b9 f0       	breq	.+46     	; 0xe52 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     e24:	e0 91 34 02 	lds	r30, 0x0234
     e28:	f0 91 35 02 	lds	r31, 0x0235
     e2c:	ec 50       	subi	r30, 0x0C	; 12
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 81       	ld	r24, Z
     e32:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f2 e0       	ldi	r31, 0x02	; 2
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     e44:	e8 e3       	ldi	r30, 0x38	; 56
     e46:	f2 e0       	ldi	r31, 0x02	; 2
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     e52:	80 91 34 02 	lds	r24, 0x0234
     e56:	90 91 35 02 	lds	r25, 0x0235
     e5a:	80 34       	cpi	r24, 0x40	; 64
     e5c:	91 05       	cpc	r25, r1
     e5e:	21 f4       	brne	.+8      	; 0xe68 <__vector_22+0x72>
		tx_uart0.i_first = 0;
     e60:	10 92 35 02 	sts	0x0235, r1
     e64:	10 92 34 02 	sts	0x0234, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     e68:	80 91 38 02 	lds	r24, 0x0238
     e6c:	90 91 39 02 	lds	r25, 0x0239
     e70:	89 2b       	or	r24, r25
     e72:	39 f4       	brne	.+14     	; 0xe82 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     e74:	10 92 ab 02 	sts	0x02AB, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     e78:	e1 ec       	ldi	r30, 0xC1	; 193
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__subsf3>:
     e98:	50 58       	subi	r21, 0x80	; 128

00000e9a <__addsf3>:
     e9a:	bb 27       	eor	r27, r27
     e9c:	aa 27       	eor	r26, r26
     e9e:	0e d0       	rcall	.+28     	; 0xebc <__addsf3x>
     ea0:	4d c1       	rjmp	.+666    	; 0x113c <__fp_round>
     ea2:	3e d1       	rcall	.+636    	; 0x1120 <__fp_pscA>
     ea4:	30 f0       	brcs	.+12     	; 0xeb2 <__addsf3+0x18>
     ea6:	43 d1       	rcall	.+646    	; 0x112e <__fp_pscB>
     ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__addsf3+0x18>
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__addsf3+0x1e>
     eac:	9f 3f       	cpi	r25, 0xFF	; 255
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__addsf3+0x1a>
     eb0:	1e f4       	brtc	.+6      	; 0xeb8 <__addsf3+0x1e>
     eb2:	33 c1       	rjmp	.+614    	; 0x111a <__fp_nan>
     eb4:	0e f4       	brtc	.+2      	; 0xeb8 <__addsf3+0x1e>
     eb6:	e0 95       	com	r30
     eb8:	e7 fb       	bst	r30, 7
     eba:	29 c1       	rjmp	.+594    	; 0x110e <__fp_inf>

00000ebc <__addsf3x>:
     ebc:	e9 2f       	mov	r30, r25
     ebe:	4f d1       	rcall	.+670    	; 0x115e <__fp_split3>
     ec0:	80 f3       	brcs	.-32     	; 0xea2 <__addsf3+0x8>
     ec2:	ba 17       	cp	r27, r26
     ec4:	62 07       	cpc	r22, r18
     ec6:	73 07       	cpc	r23, r19
     ec8:	84 07       	cpc	r24, r20
     eca:	95 07       	cpc	r25, r21
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <__addsf3x+0x18>
     ece:	71 f4       	brne	.+28     	; 0xeec <__addsf3x+0x30>
     ed0:	9e f5       	brtc	.+102    	; 0xf38 <__addsf3x+0x7c>
     ed2:	67 c1       	rjmp	.+718    	; 0x11a2 <__fp_zero>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3x+0x1c>
     ed6:	e0 95       	com	r30
     ed8:	0b 2e       	mov	r0, r27
     eda:	ba 2f       	mov	r27, r26
     edc:	a0 2d       	mov	r26, r0
     ede:	0b 01       	movw	r0, r22
     ee0:	b9 01       	movw	r22, r18
     ee2:	90 01       	movw	r18, r0
     ee4:	0c 01       	movw	r0, r24
     ee6:	ca 01       	movw	r24, r20
     ee8:	a0 01       	movw	r20, r0
     eea:	11 24       	eor	r1, r1
     eec:	ff 27       	eor	r31, r31
     eee:	59 1b       	sub	r21, r25
     ef0:	99 f0       	breq	.+38     	; 0xf18 <__addsf3x+0x5c>
     ef2:	59 3f       	cpi	r21, 0xF9	; 249
     ef4:	50 f4       	brcc	.+20     	; 0xf0a <__addsf3x+0x4e>
     ef6:	50 3e       	cpi	r21, 0xE0	; 224
     ef8:	68 f1       	brcs	.+90     	; 0xf54 <__addsf3x+0x98>
     efa:	1a 16       	cp	r1, r26
     efc:	f0 40       	sbci	r31, 0x00	; 0
     efe:	a2 2f       	mov	r26, r18
     f00:	23 2f       	mov	r18, r19
     f02:	34 2f       	mov	r19, r20
     f04:	44 27       	eor	r20, r20
     f06:	58 5f       	subi	r21, 0xF8	; 248
     f08:	f3 cf       	rjmp	.-26     	; 0xef0 <__addsf3x+0x34>
     f0a:	46 95       	lsr	r20
     f0c:	37 95       	ror	r19
     f0e:	27 95       	ror	r18
     f10:	a7 95       	ror	r26
     f12:	f0 40       	sbci	r31, 0x00	; 0
     f14:	53 95       	inc	r21
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__addsf3x+0x4e>
     f18:	7e f4       	brtc	.+30     	; 0xf38 <__addsf3x+0x7c>
     f1a:	1f 16       	cp	r1, r31
     f1c:	ba 0b       	sbc	r27, r26
     f1e:	62 0b       	sbc	r22, r18
     f20:	73 0b       	sbc	r23, r19
     f22:	84 0b       	sbc	r24, r20
     f24:	ba f0       	brmi	.+46     	; 0xf54 <__addsf3x+0x98>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	a1 f0       	breq	.+40     	; 0xf52 <__addsf3x+0x96>
     f2a:	ff 0f       	add	r31, r31
     f2c:	bb 1f       	adc	r27, r27
     f2e:	66 1f       	adc	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	c2 f7       	brpl	.-16     	; 0xf26 <__addsf3x+0x6a>
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <__addsf3x+0x98>
     f38:	ba 0f       	add	r27, r26
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 1f       	adc	r23, r19
     f3e:	84 1f       	adc	r24, r20
     f40:	48 f4       	brcc	.+18     	; 0xf54 <__addsf3x+0x98>
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f7 95       	ror	r31
     f4c:	9e 3f       	cpi	r25, 0xFE	; 254
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__addsf3x+0x96>
     f50:	b3 cf       	rjmp	.-154    	; 0xeb8 <__addsf3+0x1e>
     f52:	93 95       	inc	r25
     f54:	88 0f       	add	r24, r24
     f56:	08 f0       	brcs	.+2      	; 0xf5a <__addsf3x+0x9e>
     f58:	99 27       	eor	r25, r25
     f5a:	ee 0f       	add	r30, r30
     f5c:	97 95       	ror	r25
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret

00000f62 <__divsf3>:
     f62:	0c d0       	rcall	.+24     	; 0xf7c <__divsf3x>
     f64:	eb c0       	rjmp	.+470    	; 0x113c <__fp_round>
     f66:	e3 d0       	rcall	.+454    	; 0x112e <__fp_pscB>
     f68:	40 f0       	brcs	.+16     	; 0xf7a <__divsf3+0x18>
     f6a:	da d0       	rcall	.+436    	; 0x1120 <__fp_pscA>
     f6c:	30 f0       	brcs	.+12     	; 0xf7a <__divsf3+0x18>
     f6e:	21 f4       	brne	.+8      	; 0xf78 <__divsf3+0x16>
     f70:	5f 3f       	cpi	r21, 0xFF	; 255
     f72:	19 f0       	breq	.+6      	; 0xf7a <__divsf3+0x18>
     f74:	cc c0       	rjmp	.+408    	; 0x110e <__fp_inf>
     f76:	51 11       	cpse	r21, r1
     f78:	15 c1       	rjmp	.+554    	; 0x11a4 <__fp_szero>
     f7a:	cf c0       	rjmp	.+414    	; 0x111a <__fp_nan>

00000f7c <__divsf3x>:
     f7c:	f0 d0       	rcall	.+480    	; 0x115e <__fp_split3>
     f7e:	98 f3       	brcs	.-26     	; 0xf66 <__divsf3+0x4>

00000f80 <__divsf3_pse>:
     f80:	99 23       	and	r25, r25
     f82:	c9 f3       	breq	.-14     	; 0xf76 <__divsf3+0x14>
     f84:	55 23       	and	r21, r21
     f86:	b1 f3       	breq	.-20     	; 0xf74 <__divsf3+0x12>
     f88:	95 1b       	sub	r25, r21
     f8a:	55 0b       	sbc	r21, r21
     f8c:	bb 27       	eor	r27, r27
     f8e:	aa 27       	eor	r26, r26
     f90:	62 17       	cp	r22, r18
     f92:	73 07       	cpc	r23, r19
     f94:	84 07       	cpc	r24, r20
     f96:	38 f0       	brcs	.+14     	; 0xfa6 <__divsf3_pse+0x26>
     f98:	9f 5f       	subi	r25, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	22 0f       	add	r18, r18
     f9e:	33 1f       	adc	r19, r19
     fa0:	44 1f       	adc	r20, r20
     fa2:	aa 1f       	adc	r26, r26
     fa4:	a9 f3       	breq	.-22     	; 0xf90 <__divsf3_pse+0x10>
     fa6:	33 d0       	rcall	.+102    	; 0x100e <__divsf3_pse+0x8e>
     fa8:	0e 2e       	mov	r0, r30
     faa:	3a f0       	brmi	.+14     	; 0xfba <__divsf3_pse+0x3a>
     fac:	e0 e8       	ldi	r30, 0x80	; 128
     fae:	30 d0       	rcall	.+96     	; 0x1010 <__divsf3_pse+0x90>
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	50 40       	sbci	r21, 0x00	; 0
     fb4:	e6 95       	lsr	r30
     fb6:	00 1c       	adc	r0, r0
     fb8:	ca f7       	brpl	.-14     	; 0xfac <__divsf3_pse+0x2c>
     fba:	29 d0       	rcall	.+82     	; 0x100e <__divsf3_pse+0x8e>
     fbc:	fe 2f       	mov	r31, r30
     fbe:	27 d0       	rcall	.+78     	; 0x100e <__divsf3_pse+0x8e>
     fc0:	66 0f       	add	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	88 1f       	adc	r24, r24
     fc6:	bb 1f       	adc	r27, r27
     fc8:	26 17       	cp	r18, r22
     fca:	37 07       	cpc	r19, r23
     fcc:	48 07       	cpc	r20, r24
     fce:	ab 07       	cpc	r26, r27
     fd0:	b0 e8       	ldi	r27, 0x80	; 128
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <__divsf3_pse+0x56>
     fd4:	bb 0b       	sbc	r27, r27
     fd6:	80 2d       	mov	r24, r0
     fd8:	bf 01       	movw	r22, r30
     fda:	ff 27       	eor	r31, r31
     fdc:	93 58       	subi	r25, 0x83	; 131
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	2a f0       	brmi	.+10     	; 0xfec <__divsf3_pse+0x6c>
     fe2:	9e 3f       	cpi	r25, 0xFE	; 254
     fe4:	51 05       	cpc	r21, r1
     fe6:	68 f0       	brcs	.+26     	; 0x1002 <__divsf3_pse+0x82>
     fe8:	92 c0       	rjmp	.+292    	; 0x110e <__fp_inf>
     fea:	dc c0       	rjmp	.+440    	; 0x11a4 <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	ec f3       	brlt	.-6      	; 0xfea <__divsf3_pse+0x6a>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	dc f3       	brlt	.-10     	; 0xfea <__divsf3_pse+0x6a>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	9f 5f       	subi	r25, 0xFF	; 255
    1000:	c9 f7       	brne	.-14     	; 0xff4 <__divsf3_pse+0x74>
    1002:	88 0f       	add	r24, r24
    1004:	91 1d       	adc	r25, r1
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret
    100e:	e1 e0       	ldi	r30, 0x01	; 1
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	bb 1f       	adc	r27, r27
    1018:	62 17       	cp	r22, r18
    101a:	73 07       	cpc	r23, r19
    101c:	84 07       	cpc	r24, r20
    101e:	ba 07       	cpc	r27, r26
    1020:	20 f0       	brcs	.+8      	; 0x102a <__divsf3_pse+0xaa>
    1022:	62 1b       	sub	r22, r18
    1024:	73 0b       	sbc	r23, r19
    1026:	84 0b       	sbc	r24, r20
    1028:	ba 0b       	sbc	r27, r26
    102a:	ee 1f       	adc	r30, r30
    102c:	88 f7       	brcc	.-30     	; 0x1010 <__divsf3_pse+0x90>
    102e:	e0 95       	com	r30
    1030:	08 95       	ret

00001032 <__fixsfsi>:
    1032:	04 d0       	rcall	.+8      	; 0x103c <__fixunssfsi>
    1034:	68 94       	set
    1036:	b1 11       	cpse	r27, r1
    1038:	b5 c0       	rjmp	.+362    	; 0x11a4 <__fp_szero>
    103a:	08 95       	ret

0000103c <__fixunssfsi>:
    103c:	98 d0       	rcall	.+304    	; 0x116e <__fp_splitA>
    103e:	88 f0       	brcs	.+34     	; 0x1062 <__fixunssfsi+0x26>
    1040:	9f 57       	subi	r25, 0x7F	; 127
    1042:	90 f0       	brcs	.+36     	; 0x1068 <__fixunssfsi+0x2c>
    1044:	b9 2f       	mov	r27, r25
    1046:	99 27       	eor	r25, r25
    1048:	b7 51       	subi	r27, 0x17	; 23
    104a:	a0 f0       	brcs	.+40     	; 0x1074 <__fixunssfsi+0x38>
    104c:	d1 f0       	breq	.+52     	; 0x1082 <__fixunssfsi+0x46>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	1a f0       	brmi	.+6      	; 0x105e <__fixunssfsi+0x22>
    1058:	ba 95       	dec	r27
    105a:	c9 f7       	brne	.-14     	; 0x104e <__fixunssfsi+0x12>
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <__fixunssfsi+0x46>
    105e:	b1 30       	cpi	r27, 0x01	; 1
    1060:	81 f0       	breq	.+32     	; 0x1082 <__fixunssfsi+0x46>
    1062:	9f d0       	rcall	.+318    	; 0x11a2 <__fp_zero>
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	08 95       	ret
    1068:	9c c0       	rjmp	.+312    	; 0x11a2 <__fp_zero>
    106a:	67 2f       	mov	r22, r23
    106c:	78 2f       	mov	r23, r24
    106e:	88 27       	eor	r24, r24
    1070:	b8 5f       	subi	r27, 0xF8	; 248
    1072:	39 f0       	breq	.+14     	; 0x1082 <__fixunssfsi+0x46>
    1074:	b9 3f       	cpi	r27, 0xF9	; 249
    1076:	cc f3       	brlt	.-14     	; 0x106a <__fixunssfsi+0x2e>
    1078:	86 95       	lsr	r24
    107a:	77 95       	ror	r23
    107c:	67 95       	ror	r22
    107e:	b3 95       	inc	r27
    1080:	d9 f7       	brne	.-10     	; 0x1078 <__fixunssfsi+0x3c>
    1082:	3e f4       	brtc	.+14     	; 0x1092 <__fixunssfsi+0x56>
    1084:	90 95       	com	r25
    1086:	80 95       	com	r24
    1088:	70 95       	com	r23
    108a:	61 95       	neg	r22
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <__floatunsisf>:
    1094:	e8 94       	clt
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <__floatsisf+0x12>

00001098 <__floatsisf>:
    1098:	97 fb       	bst	r25, 7
    109a:	3e f4       	brtc	.+14     	; 0x10aa <__floatsisf+0x12>
    109c:	90 95       	com	r25
    109e:	80 95       	com	r24
    10a0:	70 95       	com	r23
    10a2:	61 95       	neg	r22
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	99 23       	and	r25, r25
    10ac:	a9 f0       	breq	.+42     	; 0x10d8 <__floatsisf+0x40>
    10ae:	f9 2f       	mov	r31, r25
    10b0:	96 e9       	ldi	r25, 0x96	; 150
    10b2:	bb 27       	eor	r27, r27
    10b4:	93 95       	inc	r25
    10b6:	f6 95       	lsr	r31
    10b8:	87 95       	ror	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b7 95       	ror	r27
    10c0:	f1 11       	cpse	r31, r1
    10c2:	f8 cf       	rjmp	.-16     	; 0x10b4 <__floatsisf+0x1c>
    10c4:	fa f4       	brpl	.+62     	; 0x1104 <__floatsisf+0x6c>
    10c6:	bb 0f       	add	r27, r27
    10c8:	11 f4       	brne	.+4      	; 0x10ce <__floatsisf+0x36>
    10ca:	60 ff       	sbrs	r22, 0
    10cc:	1b c0       	rjmp	.+54     	; 0x1104 <__floatsisf+0x6c>
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	16 c0       	rjmp	.+44     	; 0x1104 <__floatsisf+0x6c>
    10d8:	88 23       	and	r24, r24
    10da:	11 f0       	breq	.+4      	; 0x10e0 <__floatsisf+0x48>
    10dc:	96 e9       	ldi	r25, 0x96	; 150
    10de:	11 c0       	rjmp	.+34     	; 0x1102 <__floatsisf+0x6a>
    10e0:	77 23       	and	r23, r23
    10e2:	21 f0       	breq	.+8      	; 0x10ec <__floatsisf+0x54>
    10e4:	9e e8       	ldi	r25, 0x8E	; 142
    10e6:	87 2f       	mov	r24, r23
    10e8:	76 2f       	mov	r23, r22
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <__floatsisf+0x5e>
    10ec:	66 23       	and	r22, r22
    10ee:	71 f0       	breq	.+28     	; 0x110c <__floatsisf+0x74>
    10f0:	96 e8       	ldi	r25, 0x86	; 134
    10f2:	86 2f       	mov	r24, r22
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	2a f0       	brmi	.+10     	; 0x1104 <__floatsisf+0x6c>
    10fa:	9a 95       	dec	r25
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	da f7       	brpl	.-10     	; 0x10fa <__floatsisf+0x62>
    1104:	88 0f       	add	r24, r24
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__fp_inf>:
    110e:	97 f9       	bld	r25, 7
    1110:	9f 67       	ori	r25, 0x7F	; 127
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	08 95       	ret

0000111a <__fp_nan>:
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	80 ec       	ldi	r24, 0xC0	; 192
    111e:	08 95       	ret

00001120 <__fp_pscA>:
    1120:	00 24       	eor	r0, r0
    1122:	0a 94       	dec	r0
    1124:	16 16       	cp	r1, r22
    1126:	17 06       	cpc	r1, r23
    1128:	18 06       	cpc	r1, r24
    112a:	09 06       	cpc	r0, r25
    112c:	08 95       	ret

0000112e <__fp_pscB>:
    112e:	00 24       	eor	r0, r0
    1130:	0a 94       	dec	r0
    1132:	12 16       	cp	r1, r18
    1134:	13 06       	cpc	r1, r19
    1136:	14 06       	cpc	r1, r20
    1138:	05 06       	cpc	r0, r21
    113a:	08 95       	ret

0000113c <__fp_round>:
    113c:	09 2e       	mov	r0, r25
    113e:	03 94       	inc	r0
    1140:	00 0c       	add	r0, r0
    1142:	11 f4       	brne	.+4      	; 0x1148 <__fp_round+0xc>
    1144:	88 23       	and	r24, r24
    1146:	52 f0       	brmi	.+20     	; 0x115c <__fp_round+0x20>
    1148:	bb 0f       	add	r27, r27
    114a:	40 f4       	brcc	.+16     	; 0x115c <__fp_round+0x20>
    114c:	bf 2b       	or	r27, r31
    114e:	11 f4       	brne	.+4      	; 0x1154 <__fp_round+0x18>
    1150:	60 ff       	sbrs	r22, 0
    1152:	04 c0       	rjmp	.+8      	; 0x115c <__fp_round+0x20>
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__fp_split3>:
    115e:	57 fd       	sbrc	r21, 7
    1160:	90 58       	subi	r25, 0x80	; 128
    1162:	44 0f       	add	r20, r20
    1164:	55 1f       	adc	r21, r21
    1166:	59 f0       	breq	.+22     	; 0x117e <__fp_splitA+0x10>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	71 f0       	breq	.+28     	; 0x1188 <__fp_splitA+0x1a>
    116c:	47 95       	ror	r20

0000116e <__fp_splitA>:
    116e:	88 0f       	add	r24, r24
    1170:	97 fb       	bst	r25, 7
    1172:	99 1f       	adc	r25, r25
    1174:	61 f0       	breq	.+24     	; 0x118e <__fp_splitA+0x20>
    1176:	9f 3f       	cpi	r25, 0xFF	; 255
    1178:	79 f0       	breq	.+30     	; 0x1198 <__fp_splitA+0x2a>
    117a:	87 95       	ror	r24
    117c:	08 95       	ret
    117e:	12 16       	cp	r1, r18
    1180:	13 06       	cpc	r1, r19
    1182:	14 06       	cpc	r1, r20
    1184:	55 1f       	adc	r21, r21
    1186:	f2 cf       	rjmp	.-28     	; 0x116c <__fp_split3+0xe>
    1188:	46 95       	lsr	r20
    118a:	f1 df       	rcall	.-30     	; 0x116e <__fp_splitA>
    118c:	08 c0       	rjmp	.+16     	; 0x119e <__fp_splitA+0x30>
    118e:	16 16       	cp	r1, r22
    1190:	17 06       	cpc	r1, r23
    1192:	18 06       	cpc	r1, r24
    1194:	99 1f       	adc	r25, r25
    1196:	f1 cf       	rjmp	.-30     	; 0x117a <__fp_splitA+0xc>
    1198:	86 95       	lsr	r24
    119a:	71 05       	cpc	r23, r1
    119c:	61 05       	cpc	r22, r1
    119e:	08 94       	sec
    11a0:	08 95       	ret

000011a2 <__fp_zero>:
    11a2:	e8 94       	clt

000011a4 <__fp_szero>:
    11a4:	bb 27       	eor	r27, r27
    11a6:	66 27       	eor	r22, r22
    11a8:	77 27       	eor	r23, r23
    11aa:	cb 01       	movw	r24, r22
    11ac:	97 f9       	bld	r25, 7
    11ae:	08 95       	ret

000011b0 <__mulsf3>:
    11b0:	0b d0       	rcall	.+22     	; 0x11c8 <__mulsf3x>
    11b2:	c4 cf       	rjmp	.-120    	; 0x113c <__fp_round>
    11b4:	b5 df       	rcall	.-150    	; 0x1120 <__fp_pscA>
    11b6:	28 f0       	brcs	.+10     	; 0x11c2 <__mulsf3+0x12>
    11b8:	ba df       	rcall	.-140    	; 0x112e <__fp_pscB>
    11ba:	18 f0       	brcs	.+6      	; 0x11c2 <__mulsf3+0x12>
    11bc:	95 23       	and	r25, r21
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__mulsf3+0x12>
    11c0:	a6 cf       	rjmp	.-180    	; 0x110e <__fp_inf>
    11c2:	ab cf       	rjmp	.-170    	; 0x111a <__fp_nan>
    11c4:	11 24       	eor	r1, r1
    11c6:	ee cf       	rjmp	.-36     	; 0x11a4 <__fp_szero>

000011c8 <__mulsf3x>:
    11c8:	ca df       	rcall	.-108    	; 0x115e <__fp_split3>
    11ca:	a0 f3       	brcs	.-24     	; 0x11b4 <__mulsf3+0x4>

000011cc <__mulsf3_pse>:
    11cc:	95 9f       	mul	r25, r21
    11ce:	d1 f3       	breq	.-12     	; 0x11c4 <__mulsf3+0x14>
    11d0:	95 0f       	add	r25, r21
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	55 1f       	adc	r21, r21
    11d6:	62 9f       	mul	r22, r18
    11d8:	f0 01       	movw	r30, r0
    11da:	72 9f       	mul	r23, r18
    11dc:	bb 27       	eor	r27, r27
    11de:	f0 0d       	add	r31, r0
    11e0:	b1 1d       	adc	r27, r1
    11e2:	63 9f       	mul	r22, r19
    11e4:	aa 27       	eor	r26, r26
    11e6:	f0 0d       	add	r31, r0
    11e8:	b1 1d       	adc	r27, r1
    11ea:	aa 1f       	adc	r26, r26
    11ec:	64 9f       	mul	r22, r20
    11ee:	66 27       	eor	r22, r22
    11f0:	b0 0d       	add	r27, r0
    11f2:	a1 1d       	adc	r26, r1
    11f4:	66 1f       	adc	r22, r22
    11f6:	82 9f       	mul	r24, r18
    11f8:	22 27       	eor	r18, r18
    11fa:	b0 0d       	add	r27, r0
    11fc:	a1 1d       	adc	r26, r1
    11fe:	62 1f       	adc	r22, r18
    1200:	73 9f       	mul	r23, r19
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	62 1f       	adc	r22, r18
    1208:	83 9f       	mul	r24, r19
    120a:	a0 0d       	add	r26, r0
    120c:	61 1d       	adc	r22, r1
    120e:	22 1f       	adc	r18, r18
    1210:	74 9f       	mul	r23, r20
    1212:	33 27       	eor	r19, r19
    1214:	a0 0d       	add	r26, r0
    1216:	61 1d       	adc	r22, r1
    1218:	23 1f       	adc	r18, r19
    121a:	84 9f       	mul	r24, r20
    121c:	60 0d       	add	r22, r0
    121e:	21 1d       	adc	r18, r1
    1220:	82 2f       	mov	r24, r18
    1222:	76 2f       	mov	r23, r22
    1224:	6a 2f       	mov	r22, r26
    1226:	11 24       	eor	r1, r1
    1228:	9f 57       	subi	r25, 0x7F	; 127
    122a:	50 40       	sbci	r21, 0x00	; 0
    122c:	8a f0       	brmi	.+34     	; 0x1250 <__mulsf3_pse+0x84>
    122e:	e1 f0       	breq	.+56     	; 0x1268 <__mulsf3_pse+0x9c>
    1230:	88 23       	and	r24, r24
    1232:	4a f0       	brmi	.+18     	; 0x1246 <__mulsf3_pse+0x7a>
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	bb 1f       	adc	r27, r27
    123a:	66 1f       	adc	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	50 40       	sbci	r21, 0x00	; 0
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__mulsf3_pse+0x64>
    1246:	9e 3f       	cpi	r25, 0xFE	; 254
    1248:	51 05       	cpc	r21, r1
    124a:	70 f0       	brcs	.+28     	; 0x1268 <__mulsf3_pse+0x9c>
    124c:	60 cf       	rjmp	.-320    	; 0x110e <__fp_inf>
    124e:	aa cf       	rjmp	.-172    	; 0x11a4 <__fp_szero>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	ec f3       	brlt	.-6      	; 0x124e <__mulsf3_pse+0x82>
    1254:	98 3e       	cpi	r25, 0xE8	; 232
    1256:	dc f3       	brlt	.-10     	; 0x124e <__mulsf3_pse+0x82>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	e7 95       	ror	r30
    1264:	9f 5f       	subi	r25, 0xFF	; 255
    1266:	c1 f7       	brne	.-16     	; 0x1258 <__mulsf3_pse+0x8c>
    1268:	fe 2b       	or	r31, r30
    126a:	88 0f       	add	r24, r24
    126c:	91 1d       	adc	r25, r1
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	97 f9       	bld	r25, 7
    1274:	08 95       	ret

00001276 <__divmodhi4>:
    1276:	97 fb       	bst	r25, 7
    1278:	07 2e       	mov	r0, r23
    127a:	16 f4       	brtc	.+4      	; 0x1280 <__divmodhi4+0xa>
    127c:	00 94       	com	r0
    127e:	06 d0       	rcall	.+12     	; 0x128c <__divmodhi4_neg1>
    1280:	77 fd       	sbrc	r23, 7
    1282:	08 d0       	rcall	.+16     	; 0x1294 <__divmodhi4_neg2>
    1284:	0b d0       	rcall	.+22     	; 0x129c <__udivmodhi4>
    1286:	07 fc       	sbrc	r0, 7
    1288:	05 d0       	rcall	.+10     	; 0x1294 <__divmodhi4_neg2>
    128a:	3e f4       	brtc	.+14     	; 0x129a <__divmodhi4_exit>

0000128c <__divmodhi4_neg1>:
    128c:	90 95       	com	r25
    128e:	81 95       	neg	r24
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__divmodhi4_neg2>:
    1294:	70 95       	com	r23
    1296:	61 95       	neg	r22
    1298:	7f 4f       	sbci	r23, 0xFF	; 255

0000129a <__divmodhi4_exit>:
    129a:	08 95       	ret

0000129c <__udivmodhi4>:
    129c:	aa 1b       	sub	r26, r26
    129e:	bb 1b       	sub	r27, r27
    12a0:	51 e1       	ldi	r21, 0x11	; 17
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <__udivmodhi4_ep>

000012a4 <__udivmodhi4_loop>:
    12a4:	aa 1f       	adc	r26, r26
    12a6:	bb 1f       	adc	r27, r27
    12a8:	a6 17       	cp	r26, r22
    12aa:	b7 07       	cpc	r27, r23
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <__udivmodhi4_ep>
    12ae:	a6 1b       	sub	r26, r22
    12b0:	b7 0b       	sbc	r27, r23

000012b2 <__udivmodhi4_ep>:
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	5a 95       	dec	r21
    12b8:	a9 f7       	brne	.-22     	; 0x12a4 <__udivmodhi4_loop>
    12ba:	80 95       	com	r24
    12bc:	90 95       	com	r25
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	08 95       	ret

000012c4 <strcpy>:
    12c4:	fb 01       	movw	r30, r22
    12c6:	dc 01       	movw	r26, r24
    12c8:	01 90       	ld	r0, Z+
    12ca:	0d 92       	st	X+, r0
    12cc:	00 20       	and	r0, r0
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <strcpy+0x4>
    12d0:	08 95       	ret

000012d2 <_exit>:
    12d2:	f8 94       	cli

000012d4 <__stop_program>:
    12d4:	ff cf       	rjmp	.-2      	; 0x12d4 <__stop_program>
