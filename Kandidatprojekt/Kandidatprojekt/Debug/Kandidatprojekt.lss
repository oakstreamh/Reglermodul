
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001430  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800164  00800164  00001528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e6  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001708  00000000  00000000  000037b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00004ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ab6  00000000  00000000  00005288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ec1  00000000  00000000  00015d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00016bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003145  00000000  00000000  00016d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c6       	rjmp	.+3354   	; 0xd64 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c7       	rjmp	.+3656   	; 0xe9a <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c7       	rjmp	.+3830   	; 0xf50 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	15 c6       	rjmp	.+3114   	; 0xc9c <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 36       	cpi	r26, 0x64	; 100
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e6       	ldi	r26, 0x64	; 100
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 32       	cpi	r26, 0x29	; 41
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	77 d6       	rcall	.+3310   	; 0xdb2 <main>
      c4:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_obstacle>:
 *
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_obstacle(int currentOCR1A, int midSonicRange)
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	ca 53       	subi	r28, 0x3A	; 58
      f4:	d2 40       	sbci	r29, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	1c 01       	movw	r2, r24
     102:	2b 01       	movw	r4, r22
    
	
	
    
   ///// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
   	struct io_type distance; strcpy(distance.name, "distance");
     104:	89 e0       	ldi	r24, 0x09	; 9
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	de 01       	movw	r26, r28
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	01 90       	ld	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	8a 95       	dec	r24
     114:	e1 f7       	brne	.-8      	; 0x10e <FLC_obstacle+0x44>
    
    // Set MFs
    struct mf_type stopDist;
    MATLAB_MF(&stopDist, "stopDist", -1, 0, 12, 52);
     116:	3e 01       	movw	r6, r28
     118:	41 e1       	ldi	r20, 0x11	; 17
     11a:	64 0e       	add	r6, r20
     11c:	71 1c       	adc	r7, r1
     11e:	0f 2e       	mov	r0, r31
     120:	f4 e3       	ldi	r31, 0x34	; 52
     122:	ef 2e       	mov	r14, r31
     124:	f1 2c       	mov	r15, r1
     126:	f0 2d       	mov	r31, r0
     128:	0c e0       	ldi	r16, 0x0C	; 12
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4f ef       	ldi	r20, 0xFF	; 255
     132:	5f ef       	ldi	r21, 0xFF	; 255
     134:	69 e0       	ldi	r22, 0x09	; 9
     136:	71 e0       	ldi	r23, 0x01	; 1
     138:	c3 01       	movw	r24, r6
     13a:	81 d5       	rcall	.+2818   	; 0xc3e <MATLAB_MF>
    struct mf_type oneM;
    MATLAB_MF(&oneM, "oneM", 30, 60, 60, 95);
     13c:	4e 01       	movw	r8, r28
     13e:	57 e2       	ldi	r21, 0x27	; 39
     140:	85 0e       	add	r8, r21
     142:	91 1c       	adc	r9, r1
     144:	0f 2e       	mov	r0, r31
     146:	ff e5       	ldi	r31, 0x5F	; 95
     148:	ef 2e       	mov	r14, r31
     14a:	f1 2c       	mov	r15, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	0c e3       	ldi	r16, 0x3C	; 60
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	2c e3       	ldi	r18, 0x3C	; 60
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	4e e1       	ldi	r20, 0x1E	; 30
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	62 e1       	ldi	r22, 0x12	; 18
     15c:	71 e0       	ldi	r23, 0x01	; 1
     15e:	c4 01       	movw	r24, r8
     160:	6e d5       	rcall	.+2780   	; 0xc3e <MATLAB_MF>
    struct mf_type twoM;
    MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     162:	5e 01       	movw	r10, r28
     164:	8d e3       	ldi	r24, 0x3D	; 61
     166:	a8 0e       	add	r10, r24
     168:	b1 1c       	adc	r11, r1
     16a:	0f 2e       	mov	r0, r31
     16c:	ff ea       	ldi	r31, 0xAF	; 175
     16e:	ef 2e       	mov	r14, r31
     170:	f1 2c       	mov	r15, r1
     172:	f0 2d       	mov	r31, r0
     174:	0d e7       	ldi	r16, 0x7D	; 125
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	2d e7       	ldi	r18, 0x7D	; 125
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	4b e4       	ldi	r20, 0x4B	; 75
     17e:	50 e0       	ldi	r21, 0x00	; 0
     180:	67 e1       	ldi	r22, 0x17	; 23
     182:	71 e0       	ldi	r23, 0x01	; 1
     184:	c5 01       	movw	r24, r10
     186:	5b d5       	rcall	.+2742   	; 0xc3e <MATLAB_MF>
    struct mf_type threeM;
    MATLAB_MF(&threeM, "threeM", 150, 250, 250, 251);
     188:	6e 01       	movw	r12, r28
     18a:	a3 e5       	ldi	r26, 0x53	; 83
     18c:	ca 0e       	add	r12, r26
     18e:	d1 1c       	adc	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	fb ef       	ldi	r31, 0xFB	; 251
     194:	ef 2e       	mov	r14, r31
     196:	f1 2c       	mov	r15, r1
     198:	f0 2d       	mov	r31, r0
     19a:	0a ef       	ldi	r16, 0xFA	; 250
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	2a ef       	ldi	r18, 0xFA	; 250
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	46 e9       	ldi	r20, 0x96	; 150
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	6c e1       	ldi	r22, 0x1C	; 28
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	c6 01       	movw	r24, r12
     1ac:	48 d5       	rcall	.+2704   	; 0xc3e <MATLAB_MF>
    
    // Linked list for MFs
    distance.membership_functions = &stopDist;
     1ae:	7e 86       	std	Y+14, r7	; 0x0e
     1b0:	6d 86       	std	Y+13, r6	; 0x0d
    stopDist.next = &oneM;
     1b2:	9e a2       	std	Y+38, r9	; 0x26
     1b4:	8d a2       	std	Y+37, r8	; 0x25
    oneM.next = &twoM;
     1b6:	bc ae       	std	Y+60, r11	; 0x3c
     1b8:	ab ae       	std	Y+59, r10	; 0x3b
    twoM.next = &threeM;
     1ba:	63 96       	adiw	r28, 0x13	; 19
     1bc:	df ae       	std	Y+63, r13	; 0x3f
     1be:	ce ae       	std	Y+62, r12	; 0x3e
     1c0:	63 97       	sbiw	r28, 0x13	; 19
    threeM.next = NULL;
     1c2:	f6 01       	movw	r30, r12
     1c4:	15 8a       	std	Z+21, r1	; 0x15
     1c6:	14 8a       	std	Z+20, r1	; 0x14
    
    // Variable assigned its reference value
    if(midSonicRange < MIN_DISTANCE)
     1c8:	55 20       	and	r5, r5
     1ca:	1c f4       	brge	.+6      	; 0x1d2 <FLC_obstacle+0x108>
    {
        distance.value = MIN_DISTANCE;
     1cc:	1c 86       	std	Y+12, r1	; 0x0c
     1ce:	1b 86       	std	Y+11, r1	; 0x0b
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <FLC_obstacle+0x11e>
    }
    else if (midSonicRange > MAX_DISTANCE)
     1d2:	fb ef       	ldi	r31, 0xFB	; 251
     1d4:	4f 16       	cp	r4, r31
     1d6:	51 04       	cpc	r5, r1
     1d8:	2c f0       	brlt	.+10     	; 0x1e4 <FLC_obstacle+0x11a>
    {
        distance.value = MAX_DISTANCE;
     1da:	8a ef       	ldi	r24, 0xFA	; 250
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9c 87       	std	Y+12, r25	; 0x0c
     1e0:	8b 87       	std	Y+11, r24	; 0x0b
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <FLC_obstacle+0x11e>
    }
    else
    {
        distance.value = midSonicRange;
     1e4:	5c 86       	std	Y+12, r5	; 0x0c
     1e6:	4b 86       	std	Y+11, r4	; 0x0b
    }
    
    
    ////// DECLARATION OF SPEED INPUT VARIABLE ///////////////////////////////////
    struct io_type speed; strcpy(speed.name, "speed");
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	e3 e2       	ldi	r30, 0x23	; 35
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	de 01       	movw	r26, r28
     1f0:	a7 59       	subi	r26, 0x97	; 151
     1f2:	bf 4f       	sbci	r27, 0xFF	; 255
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <FLC_obstacle+0x12a>
    
    // Set MFs
    struct mf_type still;
    MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     1fc:	3e 01       	movw	r6, r28
     1fe:	49 e7       	ldi	r20, 0x79	; 121
     200:	64 0e       	add	r6, r20
     202:	71 1c       	adc	r7, r1
     204:	0f 2e       	mov	r0, r31
     206:	ee 24       	eor	r14, r14
     208:	ea 94       	dec	r14
     20a:	fa e0       	ldi	r31, 0x0A	; 10
     20c:	ff 2e       	mov	r15, r31
     20e:	f0 2d       	mov	r31, r0
     210:	04 eb       	ldi	r16, 0xB4	; 180
     212:	1a e0       	ldi	r17, 0x0A	; 10
     214:	24 eb       	ldi	r18, 0xB4	; 180
     216:	3a e0       	ldi	r19, 0x0A	; 10
     218:	43 eb       	ldi	r20, 0xB3	; 179
     21a:	5a e0       	ldi	r21, 0x0A	; 10
     21c:	69 e2       	ldi	r22, 0x29	; 41
     21e:	71 e0       	ldi	r23, 0x01	; 1
     220:	c3 01       	movw	r24, r6
     222:	0d d5       	rcall	.+2586   	; 0xc3e <MATLAB_MF>
    struct mf_type low;
    MATLAB_MF(&low, "low", 2804, 2820, 2820, 2836);
     224:	4e 01       	movw	r8, r28
     226:	5f e8       	ldi	r21, 0x8F	; 143
     228:	85 0e       	add	r8, r21
     22a:	91 1c       	adc	r9, r1
     22c:	0f 2e       	mov	r0, r31
     22e:	f4 e1       	ldi	r31, 0x14	; 20
     230:	ef 2e       	mov	r14, r31
     232:	fb e0       	ldi	r31, 0x0B	; 11
     234:	ff 2e       	mov	r15, r31
     236:	f0 2d       	mov	r31, r0
     238:	04 e0       	ldi	r16, 0x04	; 4
     23a:	1b e0       	ldi	r17, 0x0B	; 11
     23c:	24 e0       	ldi	r18, 0x04	; 4
     23e:	3b e0       	ldi	r19, 0x0B	; 11
     240:	44 ef       	ldi	r20, 0xF4	; 244
     242:	5a e0       	ldi	r21, 0x0A	; 10
     244:	6d e4       	ldi	r22, 0x4D	; 77
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	c4 01       	movw	r24, r8
     24a:	f9 d4       	rcall	.+2546   	; 0xc3e <MATLAB_MF>
    struct mf_type cruising;
    MATLAB_MF(&cruising, "cruising", 2827, 2843, 2843, 2859);
     24c:	5e 01       	movw	r10, r28
     24e:	85 ea       	ldi	r24, 0xA5	; 165
     250:	a8 0e       	add	r10, r24
     252:	b1 1c       	adc	r11, r1
     254:	0f 2e       	mov	r0, r31
     256:	fb e2       	ldi	r31, 0x2B	; 43
     258:	ef 2e       	mov	r14, r31
     25a:	fb e0       	ldi	r31, 0x0B	; 11
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 2d       	mov	r31, r0
     260:	0b e1       	ldi	r16, 0x1B	; 27
     262:	1b e0       	ldi	r17, 0x0B	; 11
     264:	2b e1       	ldi	r18, 0x1B	; 27
     266:	3b e0       	ldi	r19, 0x0B	; 11
     268:	4b e0       	ldi	r20, 0x0B	; 11
     26a:	5b e0       	ldi	r21, 0x0B	; 11
     26c:	6f e2       	ldi	r22, 0x2F	; 47
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	c5 01       	movw	r24, r10
     272:	e5 d4       	rcall	.+2506   	; 0xc3e <MATLAB_MF>
    struct mf_type medium;
    MATLAB_MF(&medium, "medium", 2849, 2865, 2865, 2881);
     274:	6e 01       	movw	r12, r28
     276:	ab eb       	ldi	r26, 0xBB	; 187
     278:	ca 0e       	add	r12, r26
     27a:	d1 1c       	adc	r13, r1
     27c:	0f 2e       	mov	r0, r31
     27e:	f1 e4       	ldi	r31, 0x41	; 65
     280:	ef 2e       	mov	r14, r31
     282:	fb e0       	ldi	r31, 0x0B	; 11
     284:	ff 2e       	mov	r15, r31
     286:	f0 2d       	mov	r31, r0
     288:	01 e3       	ldi	r16, 0x31	; 49
     28a:	1b e0       	ldi	r17, 0x0B	; 11
     28c:	21 e3       	ldi	r18, 0x31	; 49
     28e:	3b e0       	ldi	r19, 0x0B	; 11
     290:	41 e2       	ldi	r20, 0x21	; 33
     292:	5b e0       	ldi	r21, 0x0B	; 11
     294:	68 e3       	ldi	r22, 0x38	; 56
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	c6 01       	movw	r24, r12
     29a:	d1 d4       	rcall	.+2466   	; 0xc3e <MATLAB_MF>
    struct mf_type high;
    MATLAB_MF(&high, "high", 2870, 2900, 2900, 2901);
     29c:	2e 01       	movw	r4, r28
     29e:	b1 ed       	ldi	r27, 0xD1	; 209
     2a0:	4b 0e       	add	r4, r27
     2a2:	51 1c       	adc	r5, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f5 e5       	ldi	r31, 0x55	; 85
     2a8:	ef 2e       	mov	r14, r31
     2aa:	fb e0       	ldi	r31, 0x0B	; 11
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	04 e5       	ldi	r16, 0x54	; 84
     2b2:	1b e0       	ldi	r17, 0x0B	; 11
     2b4:	24 e5       	ldi	r18, 0x54	; 84
     2b6:	3b e0       	ldi	r19, 0x0B	; 11
     2b8:	46 e3       	ldi	r20, 0x36	; 54
     2ba:	5b e0       	ldi	r21, 0x0B	; 11
     2bc:	6f e3       	ldi	r22, 0x3F	; 63
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	c2 01       	movw	r24, r4
     2c2:	bd d4       	rcall	.+2426   	; 0xc3e <MATLAB_MF>
    
    // Linked list for MFs
    speed.membership_functions = &still;
     2c4:	e7 96       	adiw	r28, 0x37	; 55
     2c6:	7f ae       	std	Y+63, r7	; 0x3f
     2c8:	6e ae       	std	Y+62, r6	; 0x3e
     2ca:	e7 97       	sbiw	r28, 0x37	; 55
    still.next = &low;
     2cc:	f3 01       	movw	r30, r6
     2ce:	95 8a       	std	Z+21, r9	; 0x15
     2d0:	84 8a       	std	Z+20, r8	; 0x14
    low.next = &cruising;
     2d2:	d4 01       	movw	r26, r8
     2d4:	55 96       	adiw	r26, 0x15	; 21
     2d6:	bc 92       	st	X, r11
     2d8:	ae 92       	st	-X, r10
     2da:	54 97       	sbiw	r26, 0x14	; 20
    cruising.next = &medium;
     2dc:	f5 01       	movw	r30, r10
     2de:	d5 8a       	std	Z+21, r13	; 0x15
     2e0:	c4 8a       	std	Z+20, r12	; 0x14
    medium.next = &high;
     2e2:	d6 01       	movw	r26, r12
     2e4:	55 96       	adiw	r26, 0x15	; 21
     2e6:	5c 92       	st	X, r5
     2e8:	4e 92       	st	-X, r4
     2ea:	54 97       	sbiw	r26, 0x14	; 20
    high.next = NULL;
     2ec:	f2 01       	movw	r30, r4
     2ee:	15 8a       	std	Z+21, r1	; 0x15
     2f0:	14 8a       	std	Z+20, r1	; 0x14
    
    // Variable assigned it's reference value
    if (currentOCR1A<MIN_SPEED) {
     2f2:	f4 eb       	ldi	r31, 0xB4	; 180
     2f4:	2f 16       	cp	r2, r31
     2f6:	fa e0       	ldi	r31, 0x0A	; 10
     2f8:	3f 06       	cpc	r3, r31
     2fa:	3c f4       	brge	.+14     	; 0x30a <FLC_obstacle+0x240>
        speed.value = MIN_SPEED;
     2fc:	84 eb       	ldi	r24, 0xB4	; 180
     2fe:	9a e0       	ldi	r25, 0x0A	; 10
     300:	e5 96       	adiw	r28, 0x35	; 53
     302:	9f af       	std	Y+63, r25	; 0x3f
     304:	8e af       	std	Y+62, r24	; 0x3e
     306:	e5 97       	sbiw	r28, 0x35	; 53
     308:	10 c0       	rjmp	.+32     	; 0x32a <FLC_obstacle+0x260>
    }
    else if (currentOCR1A>MAX_SPEED)
     30a:	45 e5       	ldi	r20, 0x55	; 85
     30c:	24 16       	cp	r2, r20
     30e:	4b e0       	ldi	r20, 0x0B	; 11
     310:	34 06       	cpc	r3, r20
     312:	3c f0       	brlt	.+14     	; 0x322 <FLC_obstacle+0x258>
    {
        speed.value = MAX_SPEED;
     314:	84 e5       	ldi	r24, 0x54	; 84
     316:	9b e0       	ldi	r25, 0x0B	; 11
     318:	e5 96       	adiw	r28, 0x35	; 53
     31a:	9f af       	std	Y+63, r25	; 0x3f
     31c:	8e af       	std	Y+62, r24	; 0x3e
     31e:	e5 97       	sbiw	r28, 0x35	; 53
     320:	04 c0       	rjmp	.+8      	; 0x32a <FLC_obstacle+0x260>
    }
    else
    {
        speed.value = currentOCR1A;
     322:	e5 96       	adiw	r28, 0x35	; 53
     324:	3f ae       	std	Y+63, r3	; 0x3f
     326:	2e ae       	std	Y+62, r2	; 0x3e
     328:	e5 97       	sbiw	r28, 0x35	; 53
    }
    
    
    ////// DECLARATION OF PWM OUTPUT VARIABLE ///////////////////////////////////
   	struct io_type pwm; strcpy(pwm.name, "pwm");
     32a:	3e 01       	movw	r6, r28
     32c:	57 ee       	ldi	r21, 0xE7	; 231
     32e:	65 0e       	add	r6, r21
     330:	71 1c       	adc	r7, r1
     332:	80 e7       	ldi	r24, 0x70	; 112
     334:	97 e7       	ldi	r25, 0x77	; 119
     336:	ad e6       	ldi	r26, 0x6D	; 109
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	f3 01       	movw	r30, r6
     33c:	80 83       	st	Z, r24
     33e:	91 83       	std	Z+1, r25	; 0x01
     340:	a2 83       	std	Z+2, r26	; 0x02
     342:	b3 83       	std	Z+3, r27	; 0x03
    
    // Set MFs
    struct mf_type noSpeed;
    MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     344:	4e 01       	movw	r8, r28
     346:	f7 ef       	ldi	r31, 0xF7	; 247
     348:	8f 0e       	add	r8, r31
     34a:	91 1c       	adc	r9, r1
     34c:	0f 2e       	mov	r0, r31
     34e:	ee 24       	eor	r14, r14
     350:	ea 94       	dec	r14
     352:	fa e0       	ldi	r31, 0x0A	; 10
     354:	ff 2e       	mov	r15, r31
     356:	f0 2d       	mov	r31, r0
     358:	04 eb       	ldi	r16, 0xB4	; 180
     35a:	1a e0       	ldi	r17, 0x0A	; 10
     35c:	24 eb       	ldi	r18, 0xB4	; 180
     35e:	3a e0       	ldi	r19, 0x0A	; 10
     360:	43 eb       	ldi	r20, 0xB3	; 179
     362:	5a e0       	ldi	r21, 0x0A	; 10
     364:	64 e4       	ldi	r22, 0x44	; 68
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	c4 01       	movw	r24, r8
     36a:	69 d4       	rcall	.+2258   	; 0xc3e <MATLAB_MF>
    struct mf_type slow;
    MATLAB_MF(&slow, "slow", 2804, 2820, 2820, 2836);
     36c:	5e 01       	movw	r10, r28
     36e:	43 ef       	ldi	r20, 0xF3	; 243
     370:	a4 1a       	sub	r10, r20
     372:	4e ef       	ldi	r20, 0xFE	; 254
     374:	b4 0a       	sbc	r11, r20
     376:	0f 2e       	mov	r0, r31
     378:	f4 e1       	ldi	r31, 0x14	; 20
     37a:	ef 2e       	mov	r14, r31
     37c:	fb e0       	ldi	r31, 0x0B	; 11
     37e:	ff 2e       	mov	r15, r31
     380:	f0 2d       	mov	r31, r0
     382:	04 e0       	ldi	r16, 0x04	; 4
     384:	1b e0       	ldi	r17, 0x0B	; 11
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	3b e0       	ldi	r19, 0x0B	; 11
     38a:	44 ef       	ldi	r20, 0xF4	; 244
     38c:	5a e0       	ldi	r21, 0x0A	; 10
     38e:	6c e4       	ldi	r22, 0x4C	; 76
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	c5 01       	movw	r24, r10
     394:	54 d4       	rcall	.+2216   	; 0xc3e <MATLAB_MF>
    struct mf_type cruise;
    MATLAB_MF(&cruise, "cruise", 2827, 2843, 2843, 2859);
     396:	6e 01       	movw	r12, r28
     398:	5d ed       	ldi	r21, 0xDD	; 221
     39a:	c5 1a       	sub	r12, r21
     39c:	5e ef       	ldi	r21, 0xFE	; 254
     39e:	d5 0a       	sbc	r13, r21
     3a0:	0f 2e       	mov	r0, r31
     3a2:	fb e2       	ldi	r31, 0x2B	; 43
     3a4:	ef 2e       	mov	r14, r31
     3a6:	fb e0       	ldi	r31, 0x0B	; 11
     3a8:	ff 2e       	mov	r15, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	0b e1       	ldi	r16, 0x1B	; 27
     3ae:	1b e0       	ldi	r17, 0x0B	; 11
     3b0:	2b e1       	ldi	r18, 0x1B	; 27
     3b2:	3b e0       	ldi	r19, 0x0B	; 11
     3b4:	4b e0       	ldi	r20, 0x0B	; 11
     3b6:	5b e0       	ldi	r21, 0x0B	; 11
     3b8:	61 e5       	ldi	r22, 0x51	; 81
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	c6 01       	movw	r24, r12
     3be:	3f d4       	rcall	.+2174   	; 0xc3e <MATLAB_MF>
    struct mf_type medHigh;
    MATLAB_MF(&medHigh, "medHigh", 2849, 2865, 2865, 2881);
     3c0:	1e 01       	movw	r2, r28
     3c2:	87 ec       	ldi	r24, 0xC7	; 199
     3c4:	28 1a       	sub	r2, r24
     3c6:	8e ef       	ldi	r24, 0xFE	; 254
     3c8:	38 0a       	sbc	r3, r24
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f1 e4       	ldi	r31, 0x41	; 65
     3ce:	ef 2e       	mov	r14, r31
     3d0:	fb e0       	ldi	r31, 0x0B	; 11
     3d2:	ff 2e       	mov	r15, r31
     3d4:	f0 2d       	mov	r31, r0
     3d6:	01 e3       	ldi	r16, 0x31	; 49
     3d8:	1b e0       	ldi	r17, 0x0B	; 11
     3da:	21 e3       	ldi	r18, 0x31	; 49
     3dc:	3b e0       	ldi	r19, 0x0B	; 11
     3de:	41 e2       	ldi	r20, 0x21	; 33
     3e0:	5b e0       	ldi	r21, 0x0B	; 11
     3e2:	68 e5       	ldi	r22, 0x58	; 88
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	c1 01       	movw	r24, r2
     3e8:	2a d4       	rcall	.+2132   	; 0xc3e <MATLAB_MF>
    struct mf_type max;
    MATLAB_MF(&max, "max", 2870, 2900, 2900, 2901);
     3ea:	2e 01       	movw	r4, r28
     3ec:	a1 eb       	ldi	r26, 0xB1	; 177
     3ee:	4a 1a       	sub	r4, r26
     3f0:	ae ef       	ldi	r26, 0xFE	; 254
     3f2:	5a 0a       	sbc	r5, r26
     3f4:	0f 2e       	mov	r0, r31
     3f6:	f5 e5       	ldi	r31, 0x55	; 85
     3f8:	ef 2e       	mov	r14, r31
     3fa:	fb e0       	ldi	r31, 0x0B	; 11
     3fc:	ff 2e       	mov	r15, r31
     3fe:	f0 2d       	mov	r31, r0
     400:	04 e5       	ldi	r16, 0x54	; 84
     402:	1b e0       	ldi	r17, 0x0B	; 11
     404:	24 e5       	ldi	r18, 0x54	; 84
     406:	3b e0       	ldi	r19, 0x0B	; 11
     408:	46 e3       	ldi	r20, 0x36	; 54
     40a:	5b e0       	ldi	r21, 0x0B	; 11
     40c:	60 e6       	ldi	r22, 0x60	; 96
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	c2 01       	movw	r24, r4
     412:	15 d4       	rcall	.+2090   	; 0xc3e <MATLAB_MF>
    
    // Linked list for MFs
    pwm.membership_functions = &noSpeed;
     414:	f3 01       	movw	r30, r6
     416:	95 86       	std	Z+13, r9	; 0x0d
     418:	84 86       	std	Z+12, r8	; 0x0c
    noSpeed.next = &slow;
     41a:	d4 01       	movw	r26, r8
     41c:	55 96       	adiw	r26, 0x15	; 21
     41e:	bc 92       	st	X, r11
     420:	ae 92       	st	-X, r10
     422:	54 97       	sbiw	r26, 0x14	; 20
    slow.next = &cruise;
     424:	f5 01       	movw	r30, r10
     426:	d5 8a       	std	Z+21, r13	; 0x15
     428:	c4 8a       	std	Z+20, r12	; 0x14
    cruise.next = &medHigh;
     42a:	d6 01       	movw	r26, r12
     42c:	55 96       	adiw	r26, 0x15	; 21
     42e:	3c 92       	st	X, r3
     430:	2e 92       	st	-X, r2
     432:	54 97       	sbiw	r26, 0x14	; 20
    medHigh.next = &max;
     434:	f1 01       	movw	r30, r2
     436:	55 8a       	std	Z+21, r5	; 0x15
     438:	44 8a       	std	Z+20, r4	; 0x14
    max.next = NULL;
     43a:	d2 01       	movw	r26, r4
     43c:	55 96       	adiw	r26, 0x15	; 21
     43e:	1c 92       	st	X, r1
     440:	1e 92       	st	-X, r1
     442:	54 97       	sbiw	r26, 0x14	; 20
    
    
    
    ////// SETTING I/O LINKED LISTS ///////////////////////////////////
    
    System_Inputs = &distance;
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	90 93 f6 01 	sts	0x01F6, r25
     44c:	80 93 f5 01 	sts	0x01F5, r24
    distance.next = &speed;
     450:	e0 5d       	subi	r30, 0xD0	; 208
     452:	f1 09       	sbc	r31, r1
     454:	f8 8b       	std	Y+16, r31	; 0x10
     456:	ef 87       	std	Y+15, r30	; 0x0f
    speed.next = NULL;
     458:	17 86       	std	Z+15, r1	; 0x0f
     45a:	16 86       	std	Z+14, r1	; 0x0e
    
    System_Outputs = &pwm;
     45c:	70 92 f4 01 	sts	0x01F4, r7
     460:	60 92 f3 01 	sts	0x01F3, r6
    pwm.next = NULL;
     464:	f3 01       	movw	r30, r6
     466:	17 86       	std	Z+15, r1	; 0x0f
     468:	16 86       	std	Z+14, r1	; 0x0e
    struct rule_type rule11;
    struct rule_type rule12;
    struct rule_type rule13;
    
    
    Rule_Base = &rule1;
     46a:	9e 01       	movw	r18, r28
     46c:	2b 59       	subi	r18, 0x9B	; 155
     46e:	3e 4f       	sbci	r19, 0xFE	; 254
     470:	30 93 f8 01 	sts	0x01F8, r19
     474:	20 93 f7 01 	sts	0x01F7, r18
    rule1.next = &rule2;
     478:	86 59       	subi	r24, 0x96	; 150
     47a:	9e 4f       	sbci	r25, 0xFE	; 254
     47c:	d9 01       	movw	r26, r18
     47e:	15 96       	adiw	r26, 0x05	; 5
     480:	9c 93       	st	X, r25
     482:	8e 93       	st	-X, r24
     484:	14 97       	sbiw	r26, 0x04	; 4
    rule2.next = &rule3;
     486:	1c 96       	adiw	r26, 0x0c	; 12
     488:	fc 01       	movw	r30, r24
     48a:	b5 83       	std	Z+5, r27	; 0x05
     48c:	a4 83       	std	Z+4, r26	; 0x04
    rule3.next = &rule4;
     48e:	47 e7       	ldi	r20, 0x77	; 119
     490:	51 e0       	ldi	r21, 0x01	; 1
     492:	4c 0f       	add	r20, r28
     494:	5d 1f       	adc	r21, r29
     496:	15 96       	adiw	r26, 0x05	; 5
     498:	5c 93       	st	X, r21
     49a:	4e 93       	st	-X, r20
     49c:	14 97       	sbiw	r26, 0x04	; 4
    rule4.next = &rule5;
     49e:	ed e7       	ldi	r30, 0x7D	; 125
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	ec 0f       	add	r30, r28
     4a4:	fd 1f       	adc	r31, r29
     4a6:	c5 58       	subi	r28, 0x85	; 133
     4a8:	de 4f       	sbci	r29, 0xFE	; 254
     4aa:	f9 83       	std	Y+1, r31	; 0x01
     4ac:	e8 83       	st	Y, r30
     4ae:	cb 57       	subi	r28, 0x7B	; 123
     4b0:	d1 40       	sbci	r29, 0x01	; 1
    rule5.next = &rule6;
     4b2:	43 e8       	ldi	r20, 0x83	; 131
     4b4:	51 e0       	ldi	r21, 0x01	; 1
     4b6:	4c 0f       	add	r20, r28
     4b8:	5d 1f       	adc	r21, r29
     4ba:	cf 57       	subi	r28, 0x7F	; 127
     4bc:	de 4f       	sbci	r29, 0xFE	; 254
     4be:	59 83       	std	Y+1, r21	; 0x01
     4c0:	48 83       	st	Y, r20
     4c2:	c1 58       	subi	r28, 0x81	; 129
     4c4:	d1 40       	sbci	r29, 0x01	; 1
    rule6.next = &rule7;
     4c6:	e9 e8       	ldi	r30, 0x89	; 137
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	ec 0f       	add	r30, r28
     4cc:	fd 1f       	adc	r31, r29
     4ce:	c9 57       	subi	r28, 0x79	; 121
     4d0:	de 4f       	sbci	r29, 0xFE	; 254
     4d2:	f9 83       	std	Y+1, r31	; 0x01
     4d4:	e8 83       	st	Y, r30
     4d6:	c7 58       	subi	r28, 0x87	; 135
     4d8:	d1 40       	sbci	r29, 0x01	; 1
    rule7.next = &rule8;
     4da:	8e 01       	movw	r16, r28
     4dc:	01 57       	subi	r16, 0x71	; 113
     4de:	1e 4f       	sbci	r17, 0xFE	; 254
     4e0:	c3 57       	subi	r28, 0x73	; 115
     4e2:	de 4f       	sbci	r29, 0xFE	; 254
     4e4:	19 83       	std	Y+1, r17	; 0x01
     4e6:	08 83       	st	Y, r16
     4e8:	cd 58       	subi	r28, 0x8D	; 141
     4ea:	d1 40       	sbci	r29, 0x01	; 1
    rule8.next = &rule9;
     4ec:	45 e9       	ldi	r20, 0x95	; 149
     4ee:	51 e0       	ldi	r21, 0x01	; 1
     4f0:	4c 0f       	add	r20, r28
     4f2:	5d 1f       	adc	r21, r29
     4f4:	f8 01       	movw	r30, r16
     4f6:	55 83       	std	Z+5, r21	; 0x05
     4f8:	44 83       	std	Z+4, r20	; 0x04
    rule9.next = &rule10;
     4fa:	eb e9       	ldi	r30, 0x9B	; 155
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	c7 56       	subi	r28, 0x67	; 103
     504:	de 4f       	sbci	r29, 0xFE	; 254
     506:	f9 83       	std	Y+1, r31	; 0x01
     508:	e8 83       	st	Y, r30
     50a:	c9 59       	subi	r28, 0x99	; 153
     50c:	d1 40       	sbci	r29, 0x01	; 1
    rule10.next = &rule11;
     50e:	7e 01       	movw	r14, r28
     510:	ff e5       	ldi	r31, 0x5F	; 95
     512:	ef 1a       	sub	r14, r31
     514:	fe ef       	ldi	r31, 0xFE	; 254
     516:	ff 0a       	sbc	r15, r31
     518:	c1 56       	subi	r28, 0x61	; 97
     51a:	de 4f       	sbci	r29, 0xFE	; 254
     51c:	f9 82       	std	Y+1, r15	; 0x01
     51e:	e8 82       	st	Y, r14
     520:	cf 59       	subi	r28, 0x9F	; 159
     522:	d1 40       	sbci	r29, 0x01	; 1
    rule11.next = &rule12;
     524:	47 ea       	ldi	r20, 0xA7	; 167
     526:	51 e0       	ldi	r21, 0x01	; 1
     528:	4c 0f       	add	r20, r28
     52a:	5d 1f       	adc	r21, r29
     52c:	f7 01       	movw	r30, r14
     52e:	55 83       	std	Z+5, r21	; 0x05
     530:	44 83       	std	Z+4, r20	; 0x04
    rule12.next = &rule13;
     532:	4a 5f       	subi	r20, 0xFA	; 250
     534:	5f 4f       	sbci	r21, 0xFF	; 255
     536:	c5 55       	subi	r28, 0x55	; 85
     538:	de 4f       	sbci	r29, 0xFE	; 254
     53a:	59 83       	std	Y+1, r21	; 0x01
     53c:	48 83       	st	Y, r20
     53e:	cb 5a       	subi	r28, 0xAB	; 171
     540:	d1 40       	sbci	r29, 0x01	; 1
    rule13.next = NULL;
     542:	fa 01       	movw	r30, r20
     544:	15 82       	std	Z+5, r1	; 0x05
     546:	14 82       	std	Z+4, r1	; 0x04
    
    // if distance is stopDist then pwm is noSpeed
    struct rule_element_type if11;
    if11.value = &stopDist.value;
     548:	be 01       	movw	r22, r28
     54a:	6d 54       	subi	r22, 0x4D	; 77
     54c:	7e 4f       	sbci	r23, 0xFE	; 254
     54e:	42 59       	subi	r20, 0x92	; 146
     550:	51 40       	sbci	r21, 0x01	; 1
     552:	fb 01       	movw	r30, r22
     554:	51 83       	std	Z+1, r21	; 0x01
     556:	40 83       	st	Z, r20
    if11.next = NULL;
     558:	13 82       	std	Z+3, r1	; 0x03
     55a:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type then1;
    then1.next = NULL;
     55c:	44 56       	subi	r20, 0x64	; 100
     55e:	5e 4f       	sbci	r21, 0xFE	; 254
     560:	fa 01       	movw	r30, r20
     562:	13 82       	std	Z+3, r1	; 0x03
     564:	12 82       	std	Z+2, r1	; 0x02
    then1.value = &noSpeed.value;
     566:	fa e0       	ldi	r31, 0x0A	; 10
     568:	8f 0e       	add	r8, r31
     56a:	91 1c       	adc	r9, r1
     56c:	fa 01       	movw	r30, r20
     56e:	91 82       	std	Z+1, r9	; 0x01
     570:	80 82       	st	Z, r8
    
    rule1.if_side = &if11;
     572:	f9 01       	movw	r30, r18
     574:	71 83       	std	Z+1, r23	; 0x01
     576:	60 83       	st	Z, r22
    rule1.then_side = &then1;
     578:	53 83       	std	Z+3, r21	; 0x03
     57a:	42 83       	std	Z+2, r20	; 0x02
    
    // if speed is low and distance is oneM then speed is slow
    struct rule_element_type if22;
    if22.value = &oneM.value;
     57c:	4c 5f       	subi	r20, 0xFC	; 252
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
     580:	24 53       	subi	r18, 0x34	; 52
     582:	31 40       	sbci	r19, 0x01	; 1
     584:	fa 01       	movw	r30, r20
     586:	31 83       	std	Z+1, r19	; 0x01
     588:	20 83       	st	Z, r18
    if22.next = NULL;
     58a:	13 82       	std	Z+3, r1	; 0x03
     58c:	12 82       	std	Z+2, r1	; 0x02
    struct rule_element_type if21;
    if21.value = &low.value;
     58e:	64 5f       	subi	r22, 0xF4	; 244
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	0f 2e       	mov	r0, r31
     594:	f9 e9       	ldi	r31, 0x99	; 153
     596:	8f 2e       	mov	r8, r31
     598:	91 2c       	mov	r9, r1
     59a:	f0 2d       	mov	r31, r0
     59c:	8c 0e       	add	r8, r28
     59e:	9d 1e       	adc	r9, r29
     5a0:	fb 01       	movw	r30, r22
     5a2:	91 82       	std	Z+1, r9	; 0x01
     5a4:	80 82       	st	Z, r8
    if21.next = &if22;
     5a6:	53 83       	std	Z+3, r21	; 0x03
     5a8:	42 83       	std	Z+2, r20	; 0x02
    struct rule_element_type then2;
    then2.value = &slow.value;
     5aa:	48 5f       	subi	r20, 0xF8	; 248
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	ea e0       	ldi	r30, 0x0A	; 10
     5b0:	ae 0e       	add	r10, r30
     5b2:	b1 1c       	adc	r11, r1
     5b4:	fa 01       	movw	r30, r20
     5b6:	b1 82       	std	Z+1, r11	; 0x01
     5b8:	a0 82       	st	Z, r10
    then2.next = NULL;
     5ba:	13 82       	std	Z+3, r1	; 0x03
     5bc:	12 82       	std	Z+2, r1	; 0x02
    
    rule2.if_side = &if21;
     5be:	fc 01       	movw	r30, r24
     5c0:	71 83       	std	Z+1, r23	; 0x01
     5c2:	60 83       	st	Z, r22
    rule2.then_side = &then2;
     5c4:	53 83       	std	Z+3, r21	; 0x03
     5c6:	42 83       	std	Z+2, r20	; 0x02
    
    // if speed is medium and distance is oneM then speed is cruise
    
    struct rule_element_type then3;
    then3.value = &cruise.value;
     5c8:	84 5a       	subi	r24, 0xA4	; 164
     5ca:	9f 4f       	sbci	r25, 0xFF	; 255
     5cc:	fa e0       	ldi	r31, 0x0A	; 10
     5ce:	cf 0e       	add	r12, r31
     5d0:	d1 1c       	adc	r13, r1
     5d2:	fc 01       	movw	r30, r24
     5d4:	d1 82       	std	Z+1, r13	; 0x01
     5d6:	c0 82       	st	Z, r12
    then3.next = NULL;
     5d8:	13 82       	std	Z+3, r1	; 0x03
     5da:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if32;
    if32.value = &oneM.value;
     5dc:	64 5f       	subi	r22, 0xF4	; 244
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	fb 01       	movw	r30, r22
     5e2:	31 83       	std	Z+1, r19	; 0x01
     5e4:	20 83       	st	Z, r18
    if32.next = NULL;
     5e6:	13 82       	std	Z+3, r1	; 0x03
     5e8:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if31;
    if31.value = &medium.value;
     5ea:	44 5f       	subi	r20, 0xF4	; 244
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f5 ec       	ldi	r31, 0xC5	; 197
     5f2:	8f 2e       	mov	r8, r31
     5f4:	91 2c       	mov	r9, r1
     5f6:	f0 2d       	mov	r31, r0
     5f8:	8c 0e       	add	r8, r28
     5fa:	9d 1e       	adc	r9, r29
     5fc:	fa 01       	movw	r30, r20
     5fe:	91 82       	std	Z+1, r9	; 0x01
     600:	80 82       	st	Z, r8
    if31.next = &if32;
     602:	73 83       	std	Z+3, r23	; 0x03
     604:	62 83       	std	Z+2, r22	; 0x02
    
    rule3.if_side = &if31;
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	5c 93       	st	X, r21
     60a:	4e 93       	st	-X, r20
    rule3.then_side = &then3;
     60c:	13 96       	adiw	r26, 0x03	; 3
     60e:	9c 93       	st	X, r25
     610:	8e 93       	st	-X, r24
     612:	12 97       	sbiw	r26, 0x02	; 2
    
    // if speed is high and distance is oneM then speed is cruise
    struct rule_element_type then4;
    then4.value = &cruise.value;
     614:	ae 59       	subi	r26, 0x9E	; 158
     616:	bf 4f       	sbci	r27, 0xFF	; 255
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	dc 92       	st	X, r13
     61c:	ce 92       	st	-X, r12
    then4.next = NULL;
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	1c 92       	st	X, r1
     622:	1e 92       	st	-X, r1
     624:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &oneM.value;
     626:	64 5f       	subi	r22, 0xF4	; 244
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	fb 01       	movw	r30, r22
     62c:	31 83       	std	Z+1, r19	; 0x01
     62e:	20 83       	st	Z, r18
    if42.next = NULL;
     630:	13 82       	std	Z+3, r1	; 0x03
     632:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if41;
    if41.value = &high.value;
     634:	44 96       	adiw	r24, 0x14	; 20
     636:	44 5f       	subi	r20, 0xF4	; 244
     638:	51 09       	sbc	r21, r1
     63a:	fc 01       	movw	r30, r24
     63c:	51 83       	std	Z+1, r21	; 0x01
     63e:	40 83       	st	Z, r20
    if41.next = &if42;
     640:	73 83       	std	Z+3, r23	; 0x03
     642:	62 83       	std	Z+2, r22	; 0x02
    
    rule4.if_side = &if41;
     644:	c9 58       	subi	r28, 0x89	; 137
     646:	de 4f       	sbci	r29, 0xFE	; 254
     648:	99 83       	std	Y+1, r25	; 0x01
     64a:	88 83       	st	Y, r24
     64c:	c7 57       	subi	r28, 0x77	; 119
     64e:	d1 40       	sbci	r29, 0x01	; 1
    rule4.then_side = &then4;
     650:	c7 58       	subi	r28, 0x87	; 135
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	b9 83       	std	Y+1, r27	; 0x01
     656:	a8 83       	st	Y, r26
     658:	c9 57       	subi	r28, 0x79	; 121
     65a:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is still and distance is oneM then speed is slow
    
    struct rule_element_type then5;
    then5.value = &slow.value;
     65c:	34 96       	adiw	r30, 0x04	; 4
     65e:	b1 82       	std	Z+1, r11	; 0x01
     660:	a0 82       	st	Z, r10
    then5.next = NULL;
     662:	13 82       	std	Z+3, r1	; 0x03
     664:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if52;
    if52.value = &oneM.value;
     666:	08 96       	adiw	r24, 0x08	; 8
     668:	dc 01       	movw	r26, r24
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	3c 93       	st	X, r19
     66e:	2e 93       	st	-X, r18
    if52.next = NULL;
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	1c 92       	st	X, r1
     674:	1e 92       	st	-X, r1
     676:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if51;
    if51.value = &still.value;
     678:	14 96       	adiw	r26, 0x04	; 4
     67a:	64 55       	subi	r22, 0x54	; 84
     67c:	71 40       	sbci	r23, 0x01	; 1
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	7c 93       	st	X, r23
     682:	6e 93       	st	-X, r22
    if51.next = &if52;
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	12 97       	sbiw	r26, 0x02	; 2
    
    rule5.if_side = &if51;
     68c:	c3 58       	subi	r28, 0x83	; 131
     68e:	de 4f       	sbci	r29, 0xFE	; 254
     690:	b9 83       	std	Y+1, r27	; 0x01
     692:	a8 83       	st	Y, r26
     694:	cd 57       	subi	r28, 0x7D	; 125
     696:	d1 40       	sbci	r29, 0x01	; 1
    rule5.then_side = &then5;
     698:	c1 58       	subi	r28, 0x81	; 129
     69a:	de 4f       	sbci	r29, 0xFE	; 254
     69c:	f9 83       	std	Y+1, r31	; 0x01
     69e:	e8 83       	st	Y, r30
     6a0:	cf 57       	subi	r28, 0x7F	; 127
     6a2:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is cruising and distance is oneM then speed is slow
    struct rule_element_type then6;
    then6.value = &slow.value;
     6a4:	3c 96       	adiw	r30, 0x0c	; 12
     6a6:	b1 82       	std	Z+1, r11	; 0x01
     6a8:	a0 82       	st	Z, r10
    then6.next = NULL;
     6aa:	13 82       	std	Z+3, r1	; 0x03
     6ac:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if62;
    if62.value = &oneM.value;
     6ae:	0c 96       	adiw	r24, 0x0c	; 12
     6b0:	dc 01       	movw	r26, r24
     6b2:	11 96       	adiw	r26, 0x01	; 1
     6b4:	3c 93       	st	X, r19
     6b6:	2e 93       	st	-X, r18
    if62.next = NULL;
     6b8:	13 96       	adiw	r26, 0x03	; 3
     6ba:	1c 92       	st	X, r1
     6bc:	1e 92       	st	-X, r1
     6be:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if61;
    if61.value = &cruising.value;
     6c0:	2e 53       	subi	r18, 0x3E	; 62
     6c2:	3e 4f       	sbci	r19, 0xFE	; 254
     6c4:	0f 2e       	mov	r0, r31
     6c6:	ff ea       	ldi	r31, 0xAF	; 175
     6c8:	8f 2e       	mov	r8, r31
     6ca:	91 2c       	mov	r9, r1
     6cc:	f0 2d       	mov	r31, r0
     6ce:	8c 0e       	add	r8, r28
     6d0:	9d 1e       	adc	r9, r29
     6d2:	d9 01       	movw	r26, r18
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	9c 92       	st	X, r9
     6d8:	8e 92       	st	-X, r8
    if61.next = &if62;
     6da:	13 96       	adiw	r26, 0x03	; 3
     6dc:	9c 93       	st	X, r25
     6de:	8e 93       	st	-X, r24
     6e0:	12 97       	sbiw	r26, 0x02	; 2
    
    rule6.if_side = &if61;
     6e2:	cd 57       	subi	r28, 0x7D	; 125
     6e4:	de 4f       	sbci	r29, 0xFE	; 254
     6e6:	39 83       	std	Y+1, r19	; 0x01
     6e8:	28 83       	st	Y, r18
     6ea:	c3 58       	subi	r28, 0x83	; 131
     6ec:	d1 40       	sbci	r29, 0x01	; 1
    rule6.then_side = &then6;
     6ee:	cb 57       	subi	r28, 0x7B	; 123
     6f0:	de 4f       	sbci	r29, 0xFE	; 254
     6f2:	f9 83       	std	Y+1, r31	; 0x01
     6f4:	e8 83       	st	Y, r30
     6f6:	c5 58       	subi	r28, 0x85	; 133
     6f8:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is low and distance is twoM then speed is cruise
    struct rule_element_type then7;
    then7.value = &cruise.value;
     6fa:	3c 96       	adiw	r30, 0x0c	; 12
     6fc:	d1 82       	std	Z+1, r13	; 0x01
     6fe:	c0 82       	st	Z, r12
    then7.next = NULL;
     700:	13 82       	std	Z+3, r1	; 0x03
     702:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if72;
    if72.value = &twoM.value;
     704:	5e 01       	movw	r10, r28
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	a8 1a       	sub	r10, r24
     70a:	8e ef       	ldi	r24, 0xFE	; 254
     70c:	b8 0a       	sbc	r11, r24
     70e:	88 5a       	subi	r24, 0xA8	; 168
     710:	91 40       	sbci	r25, 0x01	; 1
     712:	d5 01       	movw	r26, r10
     714:	11 96       	adiw	r26, 0x01	; 1
     716:	9c 93       	st	X, r25
     718:	8e 93       	st	-X, r24
    if72.next = NULL;
     71a:	13 96       	adiw	r26, 0x03	; 3
     71c:	1c 92       	st	X, r1
     71e:	1e 92       	st	-X, r1
     720:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if71;
    if71.value = &low.value;
     722:	24 5f       	subi	r18, 0xF4	; 244
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	0f 2e       	mov	r0, r31
     728:	f9 e9       	ldi	r31, 0x99	; 153
     72a:	8f 2e       	mov	r8, r31
     72c:	91 2c       	mov	r9, r1
     72e:	f0 2d       	mov	r31, r0
     730:	8c 0e       	add	r8, r28
     732:	9d 1e       	adc	r9, r29
     734:	d9 01       	movw	r26, r18
     736:	11 96       	adiw	r26, 0x01	; 1
     738:	9c 92       	st	X, r9
     73a:	8e 92       	st	-X, r8
    if71.next = &if72;
     73c:	13 96       	adiw	r26, 0x03	; 3
     73e:	bc 92       	st	X, r11
     740:	ae 92       	st	-X, r10
     742:	12 97       	sbiw	r26, 0x02	; 2
    
    rule7.if_side = &if71;
     744:	c7 57       	subi	r28, 0x77	; 119
     746:	de 4f       	sbci	r29, 0xFE	; 254
     748:	39 83       	std	Y+1, r19	; 0x01
     74a:	28 83       	st	Y, r18
     74c:	c9 58       	subi	r28, 0x89	; 137
     74e:	d1 40       	sbci	r29, 0x01	; 1
    rule7.then_side = &then7;
     750:	c5 57       	subi	r28, 0x75	; 117
     752:	de 4f       	sbci	r29, 0xFE	; 254
     754:	f9 83       	std	Y+1, r31	; 0x01
     756:	e8 83       	st	Y, r30
     758:	cb 58       	subi	r28, 0x8B	; 139
     75a:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is medium and distance is twoM then speed is medHigh
    
    struct rule_element_type then8;
    then8.value = &medHigh.value;
     75c:	3c 96       	adiw	r30, 0x0c	; 12
     75e:	2c 5b       	subi	r18, 0xBC	; 188
     760:	31 09       	sbc	r19, r1
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	20 83       	st	Z, r18
    then8.next = NULL;
     766:	13 82       	std	Z+3, r1	; 0x03
     768:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if82;
    if82.value = &twoM.value;
     76a:	4e 01       	movw	r8, r28
     76c:	a9 ef       	ldi	r26, 0xF9	; 249
     76e:	8a 1a       	sub	r8, r26
     770:	ad ef       	ldi	r26, 0xFD	; 253
     772:	9a 0a       	sbc	r9, r26
     774:	d4 01       	movw	r26, r8
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	9c 93       	st	X, r25
     77a:	8e 93       	st	-X, r24
    if82.next = NULL;
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	1c 92       	st	X, r1
     780:	1e 92       	st	-X, r1
     782:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if81;
    if81.value = &medium.value;
     784:	5e 01       	movw	r10, r28
     786:	b5 ef       	ldi	r27, 0xF5	; 245
     788:	ab 1a       	sub	r10, r27
     78a:	bd ef       	ldi	r27, 0xFD	; 253
     78c:	bb 0a       	sbc	r11, r27
     78e:	0f 2e       	mov	r0, r31
     790:	f5 ec       	ldi	r31, 0xC5	; 197
     792:	2f 2e       	mov	r2, r31
     794:	31 2c       	mov	r3, r1
     796:	f0 2d       	mov	r31, r0
     798:	2c 0e       	add	r2, r28
     79a:	3d 1e       	adc	r3, r29
     79c:	d5 01       	movw	r26, r10
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	3c 92       	st	X, r3
     7a2:	2e 92       	st	-X, r2
    if81.next = &if82;
     7a4:	13 96       	adiw	r26, 0x03	; 3
     7a6:	9c 92       	st	X, r9
     7a8:	8e 92       	st	-X, r8
     7aa:	12 97       	sbiw	r26, 0x02	; 2
    
    rule8.if_side = &if81;
     7ac:	d8 01       	movw	r26, r16
     7ae:	11 96       	adiw	r26, 0x01	; 1
     7b0:	bc 92       	st	X, r11
     7b2:	ae 92       	st	-X, r10
    rule8.then_side = &then8;
     7b4:	13 96       	adiw	r26, 0x03	; 3
     7b6:	fc 93       	st	X, r31
     7b8:	ee 93       	st	-X, r30
     7ba:	12 97       	sbiw	r26, 0x02	; 2
    
    // if speed is high and distance is twoM then speed is medHigh
    struct rule_element_type then9;
    then9.value = &medHigh.value;
     7bc:	3c 96       	adiw	r30, 0x0c	; 12
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
    then9.next = NULL;
     7c2:	13 82       	std	Z+3, r1	; 0x03
     7c4:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if92;
    if92.value = &twoM.value;
     7c6:	5e 01       	movw	r10, r28
     7c8:	bd ee       	ldi	r27, 0xED	; 237
     7ca:	ab 1a       	sub	r10, r27
     7cc:	bd ef       	ldi	r27, 0xFD	; 253
     7ce:	bb 0a       	sbc	r11, r27
     7d0:	d5 01       	movw	r26, r10
     7d2:	11 96       	adiw	r26, 0x01	; 1
     7d4:	9c 93       	st	X, r25
     7d6:	8e 93       	st	-X, r24
    if92.next = NULL;
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	1c 92       	st	X, r1
     7dc:	1e 92       	st	-X, r1
     7de:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if91;
    if91.value = &high.value;
     7e0:	08 57       	subi	r16, 0x78	; 120
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
     7e4:	d8 01       	movw	r26, r16
     7e6:	11 96       	adiw	r26, 0x01	; 1
     7e8:	5c 93       	st	X, r21
     7ea:	4e 93       	st	-X, r20
    if91.next = &if92;
     7ec:	13 96       	adiw	r26, 0x03	; 3
     7ee:	bc 92       	st	X, r11
     7f0:	ae 92       	st	-X, r10
     7f2:	12 97       	sbiw	r26, 0x02	; 2
    
    rule9.if_side = &if91;
     7f4:	cb 56       	subi	r28, 0x6B	; 107
     7f6:	de 4f       	sbci	r29, 0xFE	; 254
     7f8:	19 83       	std	Y+1, r17	; 0x01
     7fa:	08 83       	st	Y, r16
     7fc:	c5 59       	subi	r28, 0x95	; 149
     7fe:	d1 40       	sbci	r29, 0x01	; 1
    rule9.then_side = &then9;
     800:	c9 56       	subi	r28, 0x69	; 105
     802:	de 4f       	sbci	r29, 0xFE	; 254
     804:	f9 83       	std	Y+1, r31	; 0x01
     806:	e8 83       	st	Y, r30
     808:	c7 59       	subi	r28, 0x97	; 151
     80a:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is still and distance is twoM then speed is cruise
    struct rule_element_type then10;
    then10.value = &cruise.value;
     80c:	3c 96       	adiw	r30, 0x0c	; 12
     80e:	d1 82       	std	Z+1, r13	; 0x01
     810:	c0 82       	st	Z, r12
    then10.next = NULL;
     812:	13 82       	std	Z+3, r1	; 0x03
     814:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if102;
    if102.value = &twoM.value;
     816:	08 5f       	subi	r16, 0xF8	; 248
     818:	1f 4f       	sbci	r17, 0xFF	; 255
     81a:	d8 01       	movw	r26, r16
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	9c 93       	st	X, r25
     820:	8e 93       	st	-X, r24
    if102.next = NULL;
     822:	13 96       	adiw	r26, 0x03	; 3
     824:	1c 92       	st	X, r1
     826:	1e 92       	st	-X, r1
     828:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if101;
    if101.value = &still.value;
     82a:	48 5b       	subi	r20, 0xB8	; 184
     82c:	5e 4f       	sbci	r21, 0xFE	; 254
     82e:	da 01       	movw	r26, r20
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	7c 93       	st	X, r23
     834:	6e 93       	st	-X, r22
    if101.next = &if102;
     836:	13 96       	adiw	r26, 0x03	; 3
     838:	1c 93       	st	X, r17
     83a:	0e 93       	st	-X, r16
     83c:	12 97       	sbiw	r26, 0x02	; 2
    
    rule10.if_side = &if101;
     83e:	c5 56       	subi	r28, 0x65	; 101
     840:	de 4f       	sbci	r29, 0xFE	; 254
     842:	59 83       	std	Y+1, r21	; 0x01
     844:	48 83       	st	Y, r20
     846:	cb 59       	subi	r28, 0x9B	; 155
     848:	d1 40       	sbci	r29, 0x01	; 1
    rule10.then_side = &then10;
     84a:	c3 56       	subi	r28, 0x63	; 99
     84c:	de 4f       	sbci	r29, 0xFE	; 254
     84e:	f9 83       	std	Y+1, r31	; 0x01
     850:	e8 83       	st	Y, r30
     852:	cd 59       	subi	r28, 0x9D	; 157
     854:	d1 40       	sbci	r29, 0x01	; 1
    
    // if speed is cruising and distance is twoM then speed is medHigh
    struct rule_element_type then11;
    then11.value = &medHigh.value;
     856:	3c 96       	adiw	r30, 0x0c	; 12
     858:	31 83       	std	Z+1, r19	; 0x01
     85a:	20 83       	st	Z, r18
    then11.next = NULL;
     85c:	13 82       	std	Z+3, r1	; 0x03
     85e:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if112;
    if112.value = &twoM.value;
     860:	28 51       	subi	r18, 0x18	; 24
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	d9 01       	movw	r26, r18
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	9c 93       	st	X, r25
     86a:	8e 93       	st	-X, r24
    if112.next = NULL;
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	1c 92       	st	X, r1
     870:	1e 92       	st	-X, r1
     872:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if111;
    if111.value = &cruising.value;
     874:	88 51       	subi	r24, 0x18	; 24
     876:	9e 4f       	sbci	r25, 0xFE	; 254
     878:	0f 2e       	mov	r0, r31
     87a:	ff ea       	ldi	r31, 0xAF	; 175
     87c:	2f 2e       	mov	r2, r31
     87e:	31 2c       	mov	r3, r1
     880:	f0 2d       	mov	r31, r0
     882:	2c 0e       	add	r2, r28
     884:	3d 1e       	adc	r3, r29
     886:	dc 01       	movw	r26, r24
     888:	11 96       	adiw	r26, 0x01	; 1
     88a:	3c 92       	st	X, r3
     88c:	2e 92       	st	-X, r2
    if111.next = &if112;
     88e:	13 96       	adiw	r26, 0x03	; 3
     890:	3c 93       	st	X, r19
     892:	2e 93       	st	-X, r18
     894:	12 97       	sbiw	r26, 0x02	; 2
    
    rule11.if_side = &if111;
     896:	d7 01       	movw	r26, r14
     898:	11 96       	adiw	r26, 0x01	; 1
     89a:	9c 93       	st	X, r25
     89c:	8e 93       	st	-X, r24
    rule11.then_side = &then11;
     89e:	13 96       	adiw	r26, 0x03	; 3
     8a0:	fc 93       	st	X, r31
     8a2:	ee 93       	st	-X, r30
     8a4:	12 97       	sbiw	r26, 0x02	; 2
    
    // if distance is threeM then speed is max
    struct rule_element_type then12;
    then12.value = &max.value;
     8a6:	3c 96       	adiw	r30, 0x0c	; 12
     8a8:	86 5d       	subi	r24, 0xD6	; 214
     8aa:	91 09       	sbc	r25, r1
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24
    then12.next = NULL;
     8b0:	13 82       	std	Z+3, r1	; 0x03
     8b2:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if121;
    if121.value = &threeM.value;
     8b4:	aa 56       	subi	r26, 0x6A	; 106
     8b6:	bf 4f       	sbci	r27, 0xFF	; 255
     8b8:	8c 5f       	subi	r24, 0xFC	; 252
     8ba:	91 09       	sbc	r25, r1
     8bc:	11 96       	adiw	r26, 0x01	; 1
     8be:	9c 93       	st	X, r25
     8c0:	8e 93       	st	-X, r24
    if121.next = NULL;
     8c2:	13 96       	adiw	r26, 0x03	; 3
     8c4:	1c 92       	st	X, r1
     8c6:	1e 92       	st	-X, r1
     8c8:	12 97       	sbiw	r26, 0x02	; 2
    
    rule12.if_side = &if121;
     8ca:	c9 55       	subi	r28, 0x59	; 89
     8cc:	de 4f       	sbci	r29, 0xFE	; 254
     8ce:	b9 83       	std	Y+1, r27	; 0x01
     8d0:	a8 83       	st	Y, r26
     8d2:	c7 5a       	subi	r28, 0xA7	; 167
     8d4:	d1 40       	sbci	r29, 0x01	; 1
    rule12.then_side = &then12;
     8d6:	c7 55       	subi	r28, 0x57	; 87
     8d8:	de 4f       	sbci	r29, 0xFE	; 254
     8da:	f9 83       	std	Y+1, r31	; 0x01
     8dc:	e8 83       	st	Y, r30
     8de:	c9 5a       	subi	r28, 0xA9	; 169
     8e0:	d1 40       	sbci	r29, 0x01	; 1
    

    
    
    // the methods performing the FLC
    fuzzification();
     8e2:	83 d0       	rcall	.+262    	; 0x9ea <fuzzification>
    rule_evaluation();
     8e4:	a9 d0       	rcall	.+338    	; 0xa38 <rule_evaluation>
    defuzzification();
     8e6:	ee d0       	rcall	.+476    	; 0xac4 <defuzzification>
    setESC(pwm.value);
     8e8:	f3 01       	movw	r30, r6
     8ea:	82 85       	ldd	r24, Z+10	; 0x0a
     8ec:	93 85       	ldd	r25, Z+11	; 0x0b
     8ee:	9f d2       	rcall	.+1342   	; 0xe2e <setESC>

} 
     8f0:	c6 5c       	subi	r28, 0xC6	; 198
     8f2:	dd 4f       	sbci	r29, 0xFD	; 253
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	7f 90       	pop	r7
     918:	6f 90       	pop	r6
     91a:	5f 90       	pop	r5
     91c:	4f 90       	pop	r4
     91e:	3f 90       	pop	r3
     920:	2f 90       	pop	r2
     922:	08 95       	ret

00000924 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     924:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     926:	84 85       	ldd	r24, Z+12	; 0x0c
     928:	95 85       	ldd	r25, Z+13	; 0x0d
     92a:	9b 01       	movw	r18, r22
     92c:	28 1b       	sub	r18, r24
     92e:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     930:	86 85       	ldd	r24, Z+14	; 0x0e
     932:	97 85       	ldd	r25, Z+15	; 0x0f
     934:	86 1b       	sub	r24, r22
     936:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     938:	12 16       	cp	r1, r18
     93a:	13 06       	cpc	r1, r19
     93c:	f4 f4       	brge	.+60     	; 0x97a <compute_degree_of_membership+0x56>
     93e:	18 16       	cp	r1, r24
     940:	19 06       	cpc	r1, r25
     942:	f4 f4       	brge	.+60     	; 0x980 <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     944:	60 89       	ldd	r22, Z+16	; 0x10
     946:	71 89       	ldd	r23, Z+17	; 0x11
     948:	a2 89       	ldd	r26, Z+18	; 0x12
     94a:	b3 89       	ldd	r27, Z+19	; 0x13
     94c:	8a 9f       	mul	r24, r26
     94e:	a0 01       	movw	r20, r0
     950:	8b 9f       	mul	r24, r27
     952:	50 0d       	add	r21, r0
     954:	9a 9f       	mul	r25, r26
     956:	50 0d       	add	r21, r0
     958:	11 24       	eor	r1, r1
     95a:	26 9f       	mul	r18, r22
     95c:	c0 01       	movw	r24, r0
     95e:	27 9f       	mul	r18, r23
     960:	90 0d       	add	r25, r0
     962:	36 9f       	mul	r19, r22
     964:	90 0d       	add	r25, r0
     966:	11 24       	eor	r1, r1
     968:	48 17       	cp	r20, r24
     96a:	59 07       	cpc	r21, r25
     96c:	0c f4       	brge	.+2      	; 0x970 <compute_degree_of_membership+0x4c>
     96e:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     970:	8f 3f       	cpi	r24, 0xFF	; 255
     972:	91 05       	cpc	r25, r1
     974:	09 f0       	breq	.+2      	; 0x978 <compute_degree_of_membership+0x54>
     976:	3c f4       	brge	.+14     	; 0x986 <compute_degree_of_membership+0x62>
     978:	08 c0       	rjmp	.+16     	; 0x98a <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	05 c0       	rjmp	.+10     	; 0x98a <compute_degree_of_membership+0x66>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     98a:	93 87       	std	Z+11, r25	; 0x0b
     98c:	82 87       	std	Z+10, r24	; 0x0a
     98e:	08 95       	ret

00000990 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     99a:	c6 85       	ldd	r28, Z+14	; 0x0e
     99c:	d7 85       	ldd	r29, Z+15	; 0x0f
     99e:	84 85       	ldd	r24, Z+12	; 0x0c
     9a0:	95 85       	ldd	r25, Z+13	; 0x0d
     9a2:	c8 1b       	sub	r28, r24
     9a4:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     9a6:	22 85       	ldd	r18, Z+10	; 0x0a
     9a8:	33 85       	ldd	r19, Z+11	; 0x0b
     9aa:	60 89       	ldd	r22, Z+16	; 0x10
     9ac:	71 89       	ldd	r23, Z+17	; 0x11
     9ae:	c9 01       	movw	r24, r18
     9b0:	0f d5       	rcall	.+2590   	; 0x13d0 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     9b2:	8e 01       	movw	r16, r28
     9b4:	06 1b       	sub	r16, r22
     9b6:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     9b8:	62 89       	ldd	r22, Z+18	; 0x12
     9ba:	73 89       	ldd	r23, Z+19	; 0x13
     9bc:	c9 01       	movw	r24, r18
     9be:	08 d5       	rcall	.+2576   	; 0x13d0 <__divmodhi4>
    top = base - run_1 - run_2;
     9c0:	06 1b       	sub	r16, r22
     9c2:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     9c4:	c0 0f       	add	r28, r16
     9c6:	d1 1f       	adc	r29, r17
     9c8:	2c 9f       	mul	r18, r28
     9ca:	c0 01       	movw	r24, r0
     9cc:	2d 9f       	mul	r18, r29
     9ce:	90 0d       	add	r25, r0
     9d0:	3c 9f       	mul	r19, r28
     9d2:	90 0d       	add	r25, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	99 23       	and	r25, r25
     9d8:	0c f4       	brge	.+2      	; 0x9dc <compute_area_of_trapezoid+0x4c>
     9da:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     9dc:	95 95       	asr	r25
     9de:	87 95       	ror	r24
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     9f2:	00 91 f5 01 	lds	r16, 0x01F5
     9f6:	10 91 f6 01 	lds	r17, 0x01F6
     9fa:	01 15       	cp	r16, r1
     9fc:	11 05       	cpc	r17, r1
     9fe:	b9 f0       	breq	.+46     	; 0xa2e <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     a00:	f8 01       	movw	r30, r16
     a02:	c4 85       	ldd	r28, Z+12	; 0x0c
     a04:	d5 85       	ldd	r29, Z+13	; 0x0d
     a06:	20 97       	sbiw	r28, 0x00	; 0
     a08:	61 f0       	breq	.+24     	; 0xa22 <fuzzification+0x38>
            if (mf!=NULL) {
     a0a:	20 97       	sbiw	r28, 0x00	; 0
     a0c:	29 f0       	breq	.+10     	; 0xa18 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     a0e:	f8 01       	movw	r30, r16
     a10:	62 85       	ldd	r22, Z+10	; 0x0a
     a12:	73 85       	ldd	r23, Z+11	; 0x0b
     a14:	ce 01       	movw	r24, r28
     a16:	86 df       	rcall	.-244    	; 0x924 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     a18:	0c 88       	ldd	r0, Y+20	; 0x14
     a1a:	dd 89       	ldd	r29, Y+21	; 0x15
     a1c:	c0 2d       	mov	r28, r0
     a1e:	20 97       	sbiw	r28, 0x00	; 0
     a20:	a1 f7       	brne	.-24     	; 0xa0a <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     a22:	f8 01       	movw	r30, r16
     a24:	06 85       	ldd	r16, Z+14	; 0x0e
     a26:	17 85       	ldd	r17, Z+15	; 0x0f
     a28:	01 15       	cp	r16, r1
     a2a:	11 05       	cpc	r17, r1
     a2c:	49 f7       	brne	.-46     	; 0xa00 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     a40:	c0 91 f7 01 	lds	r28, 0x01F7
     a44:	d0 91 f8 01 	lds	r29, 0x01F8
     a48:	20 97       	sbiw	r28, 0x00	; 0
     a4a:	b9 f1       	breq	.+110    	; 0xaba <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     a50:	e8 81       	ld	r30, Y
     a52:	f9 81       	ldd	r31, Y+1	; 0x01
     a54:	30 97       	sbiw	r30, 0x00	; 0
     a56:	81 f0       	breq	.+32     	; 0xa78 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     a58:	20 2f       	mov	r18, r16
     a5a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     a5c:	a0 81       	ld	r26, Z
     a5e:	b1 81       	ldd	r27, Z+1	; 0x01
     a60:	8d 91       	ld	r24, X+
     a62:	9c 91       	ld	r25, X
     a64:	82 17       	cp	r24, r18
     a66:	93 07       	cpc	r25, r19
     a68:	0c f4       	brge	.+2      	; 0xa6c <rule_evaluation+0x34>
     a6a:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     a6c:	02 80       	ldd	r0, Z+2	; 0x02
     a6e:	f3 81       	ldd	r31, Z+3	; 0x03
     a70:	e0 2d       	mov	r30, r0
     a72:	30 97       	sbiw	r30, 0x00	; 0
     a74:	99 f7       	brne	.-26     	; 0xa5c <rule_evaluation+0x24>
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     a78:	20 2f       	mov	r18, r16
     a7a:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     a7c:	ea 81       	ldd	r30, Y+2	; 0x02
     a7e:	fb 81       	ldd	r31, Y+3	; 0x03
     a80:	30 97       	sbiw	r30, 0x00	; 0
     a82:	b1 f0       	breq	.+44     	; 0xab0 <rule_evaluation+0x78>
     a84:	72 2f       	mov	r23, r18
     a86:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     a88:	a0 81       	ld	r26, Z
     a8a:	b1 81       	ldd	r27, Z+1	; 0x01
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	57 2f       	mov	r21, r23
     a94:	46 2f       	mov	r20, r22
     a96:	28 17       	cp	r18, r24
     a98:	39 07       	cpc	r19, r25
     a9a:	14 f4       	brge	.+4      	; 0xaa0 <rule_evaluation+0x68>
     a9c:	58 2f       	mov	r21, r24
     a9e:	49 2f       	mov	r20, r25
     aa0:	5c 93       	st	X, r21
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     aa6:	02 80       	ldd	r0, Z+2	; 0x02
     aa8:	f3 81       	ldd	r31, Z+3	; 0x03
     aaa:	e0 2d       	mov	r30, r0
     aac:	30 97       	sbiw	r30, 0x00	; 0
     aae:	61 f7       	brne	.-40     	; 0xa88 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     ab0:	0c 80       	ldd	r0, Y+4	; 0x04
     ab2:	dd 81       	ldd	r29, Y+5	; 0x05
     ab4:	c0 2d       	mov	r28, r0
     ab6:	20 97       	sbiw	r28, 0x00	; 0
     ab8:	59 f6       	brne	.-106    	; 0xa50 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	08 95       	ret

00000ac4 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <defuzzification+0x26>
     aea:	00 d0       	rcall	.+0      	; 0xaec <defuzzification+0x28>
     aec:	00 d0       	rcall	.+0      	; 0xaee <defuzzification+0x2a>
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     af2:	80 91 f3 01 	lds	r24, 0x01F3
     af6:	90 91 f4 01 	lds	r25, 0x01F4
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	8b 83       	std	Y+3, r24	; 0x03
     afe:	89 2b       	or	r24, r25
     b00:	09 f4       	brne	.+2      	; 0xb04 <defuzzification+0x40>
     b02:	84 c0       	rjmp	.+264    	; 0xc0c <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     b04:	eb 81       	ldd	r30, Y+3	; 0x03
     b06:	fc 81       	ldd	r31, Y+4	; 0x04
     b08:	04 84       	ldd	r0, Z+12	; 0x0c
     b0a:	f5 85       	ldd	r31, Z+13	; 0x0d
     b0c:	e0 2d       	mov	r30, r0
     b0e:	fe 83       	std	Y+6, r31	; 0x06
     b10:	ed 83       	std	Y+5, r30	; 0x05
     b12:	ef 2b       	or	r30, r31
     b14:	09 f4       	brne	.+2      	; 0xb18 <defuzzification+0x54>
     b16:	66 c0       	rjmp	.+204    	; 0xbe4 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     b18:	51 2c       	mov	r5, r1
     b1a:	61 2c       	mov	r6, r1
     b1c:	71 2c       	mov	r7, r1
     b1e:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     b20:	31 2c       	mov	r3, r1
     b22:	21 2c       	mov	r2, r1
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	31 df       	rcall	.-414    	; 0x990 <compute_area_of_trapezoid>
     b2e:	bc 01       	movw	r22, r24
     b30:	88 27       	eor	r24, r24
     b32:	77 fd       	sbrc	r23, 7
     b34:	80 95       	com	r24
     b36:	98 2f       	mov	r25, r24
     b38:	5c d3       	rcall	.+1720   	; 0x11f2 <__floatsisf>
     b3a:	6b 01       	movw	r12, r22
     b3c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     b3e:	ed 81       	ldd	r30, Y+5	; 0x05
     b40:	fe 81       	ldd	r31, Y+6	; 0x06
     b42:	04 85       	ldd	r16, Z+12	; 0x0c
     b44:	15 85       	ldd	r17, Z+13	; 0x0d
     b46:	b8 01       	movw	r22, r16
     b48:	88 27       	eor	r24, r24
     b4a:	77 fd       	sbrc	r23, 7
     b4c:	80 95       	com	r24
     b4e:	98 2f       	mov	r25, r24
     b50:	50 d3       	rcall	.+1696   	; 0x11f2 <__floatsisf>
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     b56:	ed 81       	ldd	r30, Y+5	; 0x05
     b58:	fe 81       	ldd	r31, Y+6	; 0x06
     b5a:	86 85       	ldd	r24, Z+14	; 0x0e
     b5c:	97 85       	ldd	r25, Z+15	; 0x0f
     b5e:	80 1b       	sub	r24, r16
     b60:	91 0b       	sbc	r25, r17
     b62:	bc 01       	movw	r22, r24
     b64:	12 f4       	brpl	.+4      	; 0xb6a <defuzzification+0xa6>
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	75 95       	asr	r23
     b6c:	67 95       	ror	r22
            centroid = centroid + intermed;
     b6e:	88 27       	eor	r24, r24
     b70:	77 fd       	sbrc	r23, 7
     b72:	80 95       	com	r24
     b74:	98 2f       	mov	r25, r24
     b76:	3d d3       	rcall	.+1658   	; 0x11f2 <__floatsisf>
     b78:	a5 01       	movw	r20, r10
     b7a:	94 01       	movw	r18, r8
     b7c:	3b d2       	rcall	.+1142   	; 0xff4 <__addsf3>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	c1 d3       	rcall	.+1922   	; 0x130a <__mulsf3>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	63 2d       	mov	r22, r3
     b8e:	72 2d       	mov	r23, r2
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	2f d2       	rcall	.+1118   	; 0xff4 <__addsf3>
     b96:	36 2e       	mov	r3, r22
     b98:	27 2e       	mov	r2, r23
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     b9e:	a7 01       	movw	r20, r14
     ba0:	96 01       	movw	r18, r12
     ba2:	65 2d       	mov	r22, r5
     ba4:	76 2d       	mov	r23, r6
     ba6:	87 2d       	mov	r24, r7
     ba8:	94 2d       	mov	r25, r4
     baa:	24 d2       	rcall	.+1096   	; 0xff4 <__addsf3>
     bac:	56 2e       	mov	r5, r22
     bae:	67 2e       	mov	r6, r23
     bb0:	78 2e       	mov	r7, r24
     bb2:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     bb4:	ed 81       	ldd	r30, Y+5	; 0x05
     bb6:	fe 81       	ldd	r31, Y+6	; 0x06
     bb8:	04 88       	ldd	r0, Z+20	; 0x14
     bba:	f5 89       	ldd	r31, Z+21	; 0x15
     bbc:	e0 2d       	mov	r30, r0
     bbe:	fe 83       	std	Y+6, r31	; 0x06
     bc0:	ed 83       	std	Y+5, r30	; 0x05
     bc2:	ef 2b       	or	r30, r31
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <defuzzification+0x104>
     bc6:	b0 cf       	rjmp	.-160    	; 0xb28 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     bc8:	26 2f       	mov	r18, r22
     bca:	37 2f       	mov	r19, r23
     bcc:	48 2f       	mov	r20, r24
     bce:	59 2f       	mov	r21, r25
     bd0:	63 2d       	mov	r22, r3
     bd2:	72 2d       	mov	r23, r2
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	71 d2       	rcall	.+1250   	; 0x10bc <__divsf3>
     bda:	26 2f       	mov	r18, r22
     bdc:	37 2f       	mov	r19, r23
     bde:	48 2f       	mov	r20, r24
     be0:	59 2f       	mov	r21, r25
     be2:	04 c0       	rjmp	.+8      	; 0xbec <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     bec:	62 2f       	mov	r22, r18
     bee:	73 2f       	mov	r23, r19
     bf0:	84 2f       	mov	r24, r20
     bf2:	95 2f       	mov	r25, r21
     bf4:	cb d2       	rcall	.+1430   	; 0x118c <__fixsfsi>
     bf6:	eb 81       	ldd	r30, Y+3	; 0x03
     bf8:	fc 81       	ldd	r31, Y+4	; 0x04
     bfa:	73 87       	std	Z+11, r23	; 0x0b
     bfc:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     bfe:	86 85       	ldd	r24, Z+14	; 0x0e
     c00:	97 85       	ldd	r25, Z+15	; 0x0f
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	89 2b       	or	r24, r25
     c08:	09 f0       	breq	.+2      	; 0xc0c <defuzzification+0x148>
     c0a:	7c cf       	rjmp	.-264    	; 0xb04 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     c0c:	26 96       	adiw	r28, 0x06	; 6
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	3f 90       	pop	r3
     c3a:	2f 90       	pop	r2
     c3c:	08 95       	ret

00000c3e <MATLAB_MF>:
/* This function takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format in general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
     c54:	6a 01       	movw	r12, r20
     c56:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     c58:	e2 d3       	rcall	.+1988   	; 0x141e <strcpy>
    newMf->value = 0;
     c5a:	1b 86       	std	Y+11, r1	; 0x0b
     c5c:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     c5e:	dd 86       	std	Y+13, r13	; 0x0d
     c60:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     c62:	ff 86       	std	Y+15, r15	; 0x0f
     c64:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     c66:	b5 01       	movw	r22, r10
     c68:	6c 19       	sub	r22, r12
     c6a:	7d 09       	sbc	r23, r13
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	31 e0       	ldi	r19, 0x01	; 1
     c70:	c9 01       	movw	r24, r18
     c72:	ae d3       	rcall	.+1884   	; 0x13d0 <__divmodhi4>
     c74:	79 8b       	std	Y+17, r23	; 0x11
     c76:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     c78:	b7 01       	movw	r22, r14
     c7a:	60 1b       	sub	r22, r16
     c7c:	71 0b       	sbc	r23, r17
     c7e:	c9 01       	movw	r24, r18
     c80:	a7 d3       	rcall	.+1870   	; 0x13d0 <__divmodhi4>
     c82:	7b 8b       	std	Y+19, r23	; 0x13
     c84:	6a 8b       	std	Y+18, r22	; 0x12
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	08 95       	ret

00000c9c <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	80 91 ce 00 	lds	r24, 0x00CE
     cb6:	8f 3f       	cpi	r24, 0xFF	; 255
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <__vector_28+0x28>
     cba:	10 92 1a 02 	sts	0x021A, r1
     cbe:	10 92 19 02 	sts	0x0219, r1
     cc2:	10 c0       	rjmp	.+32     	; 0xce4 <__vector_28+0x48>
     cc4:	e0 91 19 02 	lds	r30, 0x0219
     cc8:	f0 91 1a 02 	lds	r31, 0x021A
     ccc:	e7 50       	subi	r30, 0x07	; 7
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	80 83       	st	Z, r24
     cd2:	80 91 19 02 	lds	r24, 0x0219
     cd6:	90 91 1a 02 	lds	r25, 0x021A
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	90 93 1a 02 	sts	0x021A, r25
     ce0:	80 93 19 02 	sts	0x0219, r24
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	0f 90       	pop	r0
     cee:	0b be       	out	0x3b, r0	; 59
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <SPI_slaveInit>:
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	84 b9       	out	0x04, r24	; 4
     cfe:	80 ec       	ldi	r24, 0xC0	; 192
     d00:	8c bd       	out	0x2c, r24	; 44
     d02:	08 95       	ret

00000d04 <carInit>:
     d04:	85 d0       	rcall	.+266    	; 0xe10 <pwmInit>
     d06:	f9 df       	rcall	.-14     	; 0xcfa <SPI_slaveInit>
     d08:	8d ec       	ldi	r24, 0xCD	; 205
     d0a:	9a e0       	ldi	r25, 0x0A	; 10
     d0c:	90 d0       	rcall	.+288    	; 0xe2e <setESC>
     d0e:	84 e6       	ldi	r24, 0x64	; 100
     d10:	9a e0       	ldi	r25, 0x0A	; 10
     d12:	a8 c0       	rjmp	.+336    	; 0xe64 <setServo>
     d14:	08 95       	ret

00000d16 <USART1_init>:
     d16:	ec ec       	ldi	r30, 0xCC	; 204
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	11 82       	std	Z+1, r1	; 0x01
     d1c:	10 82       	st	Z, r1
     d1e:	20 e9       	ldi	r18, 0x90	; 144
     d20:	20 93 c9 00 	sts	0x00C9, r18
     d24:	2e e0       	ldi	r18, 0x0E	; 14
     d26:	20 93 ca 00 	sts	0x00CA, r18
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	08 95       	ret

00000d30 <Sens_info_read>:
     d30:	dc 01       	movw	r26, r24
     d32:	e9 ec       	ldi	r30, 0xC9	; 201
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	80 83       	st	Z, r24
     d3c:	80 91 f9 01 	lds	r24, 0x01F9
     d40:	8c 93       	st	X, r24
     d42:	80 91 fa 01 	lds	r24, 0x01FA
     d46:	1e 96       	adiw	r26, 0x0e	; 14
     d48:	8c 93       	st	X, r24
     d4a:	1e 97       	sbiw	r26, 0x0e	; 14
     d4c:	80 91 fb 01 	lds	r24, 0x01FB
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	8c 93       	st	X, r24
     d54:	10 92 1a 02 	sts	0x021A, r1
     d58:	10 92 19 02 	sts	0x0219, r1
     d5c:	80 81       	ld	r24, Z
     d5e:	80 68       	ori	r24, 0x80	; 128
     d60:	80 83       	st	Z, r24
     d62:	08 95       	ret

00000d64 <__vector_18>:
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	2f 93       	push	r18
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	80 91 64 01 	lds	r24, 0x0164
     d78:	90 91 65 01 	lds	r25, 0x0165
     d7c:	8b 39       	cpi	r24, 0x9B	; 155
     d7e:	26 e9       	ldi	r18, 0x96	; 150
     d80:	92 07       	cpc	r25, r18
     d82:	30 f4       	brcc	.+12     	; 0xd90 <__vector_18+0x2c>
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	90 93 65 01 	sts	0x0165, r25
     d8a:	80 93 64 01 	sts	0x0164, r24
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <__vector_18+0x3e>
     d90:	80 91 66 01 	lds	r24, 0x0166
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 93 66 01 	sts	0x0166, r24
     d9a:	10 92 65 01 	sts	0x0165, r1
     d9e:	10 92 64 01 	sts	0x0164, r1
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <main>:
	}

	/* main function
	*/
	int main (void)
	{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	60 97       	sbiw	r28, 0x10	; 16
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
		
		carInit();
     dc6:	9e df       	rcall	.-196    	; 0xd04 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	90 ee       	ldi	r25, 0xE0	; 224
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	90 40       	sbci	r25, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <main+0x1c>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <main+0x26>
     dd8:	00 00       	nop
		_delay_ms(5000);
		sei();
     dda:	78 94       	sei
		sens_info_ptr = &sensor_info;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a df       	rcall	.-204    	; 0xd16 <USART1_init>
		int v;
		int d;
		

		//Setting for Testing
		DDRA = 0xFF;
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	81 b9       	out	0x01, r24	; 1
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
				PORTA = sensor_info.dist_sonic_middle;
				cli();
				
				FLC_obstacle(OCR1A, d);
     de6:	08 e8       	ldi	r16, 0x88	; 136
     de8:	10 e0       	ldi	r17, 0x00	; 0
		DDRA = 0xFF;
		//End of test setting
		
		while (1) {
			
			 if (counter_UART1_reciever > 2) {
     dea:	80 91 19 02 	lds	r24, 0x0219
     dee:	90 91 1a 02 	lds	r25, 0x021A
     df2:	03 97       	sbiw	r24, 0x03	; 3
     df4:	d4 f3       	brlt	.-12     	; 0xdea <main+0x38>
				
				Sens_info_read(sens_info_ptr);
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	9a df       	rcall	.-204    	; 0xd30 <Sens_info_read>
				
				c = (int) sensor_info.dist_right_line;
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
     dfc:	6a 81       	ldd	r22, Y+2	; 0x02
				PORTA = sensor_info.dist_sonic_middle;
     dfe:	62 b9       	out	0x02, r22	; 2
				cli();
     e00:	f8 94       	cli
				
				FLC_obstacle(OCR1A, d);
     e02:	f8 01       	movw	r30, r16
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
				
				Sens_info_read(sens_info_ptr);
				
				c = (int) sensor_info.dist_right_line;
				v = (int) sensor_info.angular_diff;
				d = (int) sensor_info.dist_sonic_middle;
     e08:	70 e0       	ldi	r23, 0x00	; 0
				PORTA = sensor_info.dist_sonic_middle;
				cli();
				
				FLC_obstacle(OCR1A, d);
     e0a:	5f d9       	rcall	.-3394   	; 0xca <FLC_obstacle>
				//FLC_steering(125, 2660, 40);
				sei();
     e0c:	78 94       	sei
     e0e:	ed cf       	rjmp	.-38     	; 0xdea <main+0x38>

00000e10 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     e10:	80 e3       	ldi	r24, 0x30	; 48
     e12:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     e14:	82 ea       	ldi	r24, 0xA2	; 162
     e16:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f e8       	ldi	r25, 0x8F	; 143
     e1e:	90 93 87 00 	sts	0x0087, r25
     e22:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     e26:	8a e1       	ldi	r24, 0x1A	; 26
     e28:	80 93 81 00 	sts	0x0081, r24
     e2c:	08 95       	ret

00000e2e <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     e2e:	80 36       	cpi	r24, 0x60	; 96
     e30:	2a e0       	ldi	r18, 0x0A	; 10
     e32:	92 07       	cpc	r25, r18
     e34:	3c f4       	brge	.+14     	; 0xe44 <setESC+0x16>
	{
		OCR1A = MINESC;
     e36:	8f e5       	ldi	r24, 0x5F	; 95
     e38:	9a e0       	ldi	r25, 0x0A	; 10
     e3a:	90 93 89 00 	sts	0x0089, r25
     e3e:	80 93 88 00 	sts	0x0088, r24
     e42:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     e44:	8b 33       	cpi	r24, 0x3B	; 59
     e46:	2b e0       	ldi	r18, 0x0B	; 11
     e48:	92 07       	cpc	r25, r18
     e4a:	3c f0       	brlt	.+14     	; 0xe5a <setESC+0x2c>
	{
		OCR1A = MAXESC;
     e4c:	8b e3       	ldi	r24, 0x3B	; 59
     e4e:	9b e0       	ldi	r25, 0x0B	; 11
     e50:	90 93 89 00 	sts	0x0089, r25
     e54:	80 93 88 00 	sts	0x0088, r24
     e58:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     e5a:	90 93 89 00 	sts	0x0089, r25
     e5e:	80 93 88 00 	sts	0x0088, r24
     e62:	08 95       	ret

00000e64 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     e64:	87 3e       	cpi	r24, 0xE7	; 231
     e66:	27 e0       	ldi	r18, 0x07	; 7
     e68:	92 07       	cpc	r25, r18
     e6a:	3c f4       	brge	.+14     	; 0xe7a <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     e6c:	86 ee       	ldi	r24, 0xE6	; 230
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	90 93 8b 00 	sts	0x008B, r25
     e74:	80 93 8a 00 	sts	0x008A, r24
     e78:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     e7a:	8f 33       	cpi	r24, 0x3F	; 63
     e7c:	2c e0       	ldi	r18, 0x0C	; 12
     e7e:	92 07       	cpc	r25, r18
     e80:	3c f0       	brlt	.+14     	; 0xe90 <setServo+0x2c>

		OCR1B = MAXLEFT;
     e82:	8f e3       	ldi	r24, 0x3F	; 63
     e84:	9c e0       	ldi	r25, 0x0C	; 12
     e86:	90 93 8b 00 	sts	0x008B, r25
     e8a:	80 93 8a 00 	sts	0x008A, r24
     e8e:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     e90:	90 93 8b 00 	sts	0x008B, r25
     e94:	80 93 8a 00 	sts	0x008A, r24
     e98:	08 95       	ret

00000e9a <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	0b b6       	in	r0, 0x3b	; 59
     ea6:	0f 92       	push	r0
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     eba:	80 91 f1 01 	lds	r24, 0x01F1
     ebe:	90 91 f2 01 	lds	r25, 0x01F2
     ec2:	80 34       	cpi	r24, 0x40	; 64
     ec4:	91 05       	cpc	r25, r1
     ec6:	31 f4       	brne	.+12     	; 0xed4 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 27 02 	sts	0x0227, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     ece:	80 91 c6 00 	lds	r24, 0x00C6
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     ed4:	80 34       	cpi	r24, 0x40	; 64
     ed6:	91 05       	cpc	r25, r1
     ed8:	e8 f4       	brcc	.+58     	; 0xf14 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     eda:	ef ee       	ldi	r30, 0xEF	; 239
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	20 81       	ld	r18, Z
     ee0:	31 81       	ldd	r19, Z+1	; 0x01
     ee2:	40 91 c6 00 	lds	r20, 0x00C6
     ee6:	d9 01       	movw	r26, r18
     ee8:	a3 55       	subi	r26, 0x53	; 83
     eea:	be 4f       	sbci	r27, 0xFE	; 254
     eec:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	31 83       	std	Z+1, r19	; 0x01
     ef4:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	90 93 f2 01 	sts	0x01F2, r25
     efc:	80 93 f1 01 	sts	0x01F1, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     f00:	80 91 f1 01 	lds	r24, 0x01F1
     f04:	90 91 f2 01 	lds	r25, 0x01F2
     f08:	80 34       	cpi	r24, 0x40	; 64
     f0a:	91 05       	cpc	r25, r1
     f0c:	19 f4       	brne	.+6      	; 0xf14 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 25 02 	sts	0x0225, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     f14:	80 91 ef 01 	lds	r24, 0x01EF
     f18:	90 91 f0 01 	lds	r25, 0x01F0
     f1c:	80 34       	cpi	r24, 0x40	; 64
     f1e:	91 05       	cpc	r25, r1
     f20:	21 f4       	brne	.+8      	; 0xf2a <__vector_20+0x90>
		rx_uart0.i_last = 0;
     f22:	10 92 f0 01 	sts	0x01F0, r1
     f26:	10 92 ef 01 	sts	0x01EF, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 24 02 	sts	0x0224, r24
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0b be       	out	0x3b, r0	; 59
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <__vector_22>:




ISR(USART0_TX_vect)
{
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	0b b6       	in	r0, 0x3b	; 59
     f5c:	0f 92       	push	r0
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     f66:	80 91 ab 01 	lds	r24, 0x01AB
     f6a:	90 91 ac 01 	lds	r25, 0x01AC
     f6e:	80 34       	cpi	r24, 0x40	; 64
     f70:	91 05       	cpc	r25, r1
     f72:	19 f4       	brne	.+6      	; 0xf7a <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     f74:	10 92 23 02 	sts	0x0223, r1
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     f7a:	89 2b       	or	r24, r25
     f7c:	b9 f0       	breq	.+46     	; 0xfac <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     f7e:	e0 91 a7 01 	lds	r30, 0x01A7
     f82:	f0 91 a8 01 	lds	r31, 0x01A8
     f86:	e9 59       	subi	r30, 0x99	; 153
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	80 81       	ld	r24, Z
     f8c:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     f90:	e7 ea       	ldi	r30, 0xA7	; 167
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     f9e:	eb ea       	ldi	r30, 0xAB	; 171
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     fac:	80 91 a7 01 	lds	r24, 0x01A7
     fb0:	90 91 a8 01 	lds	r25, 0x01A8
     fb4:	80 34       	cpi	r24, 0x40	; 64
     fb6:	91 05       	cpc	r25, r1
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <__vector_22+0x72>
		tx_uart0.i_first = 0;
     fba:	10 92 a8 01 	sts	0x01A8, r1
     fbe:	10 92 a7 01 	sts	0x01A7, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     fc2:	80 91 ab 01 	lds	r24, 0x01AB
     fc6:	90 91 ac 01 	lds	r25, 0x01AC
     fca:	89 2b       	or	r24, r25
     fcc:	39 f4       	brne	.+14     	; 0xfdc <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     fce:	10 92 26 02 	sts	0x0226, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     fd2:	e1 ec       	ldi	r30, 0xC1	; 193
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	0f 90       	pop	r0
     fe6:	0b be       	out	0x3b, r0	; 59
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__subsf3>:
     ff2:	50 58       	subi	r21, 0x80	; 128

00000ff4 <__addsf3>:
     ff4:	bb 27       	eor	r27, r27
     ff6:	aa 27       	eor	r26, r26
     ff8:	0e d0       	rcall	.+28     	; 0x1016 <__addsf3x>
     ffa:	4d c1       	rjmp	.+666    	; 0x1296 <__fp_round>
     ffc:	3e d1       	rcall	.+636    	; 0x127a <__fp_pscA>
     ffe:	30 f0       	brcs	.+12     	; 0x100c <__addsf3+0x18>
    1000:	43 d1       	rcall	.+646    	; 0x1288 <__fp_pscB>
    1002:	20 f0       	brcs	.+8      	; 0x100c <__addsf3+0x18>
    1004:	31 f4       	brne	.+12     	; 0x1012 <__addsf3+0x1e>
    1006:	9f 3f       	cpi	r25, 0xFF	; 255
    1008:	11 f4       	brne	.+4      	; 0x100e <__addsf3+0x1a>
    100a:	1e f4       	brtc	.+6      	; 0x1012 <__addsf3+0x1e>
    100c:	33 c1       	rjmp	.+614    	; 0x1274 <__fp_nan>
    100e:	0e f4       	brtc	.+2      	; 0x1012 <__addsf3+0x1e>
    1010:	e0 95       	com	r30
    1012:	e7 fb       	bst	r30, 7
    1014:	29 c1       	rjmp	.+594    	; 0x1268 <__fp_inf>

00001016 <__addsf3x>:
    1016:	e9 2f       	mov	r30, r25
    1018:	4f d1       	rcall	.+670    	; 0x12b8 <__fp_split3>
    101a:	80 f3       	brcs	.-32     	; 0xffc <__addsf3+0x8>
    101c:	ba 17       	cp	r27, r26
    101e:	62 07       	cpc	r22, r18
    1020:	73 07       	cpc	r23, r19
    1022:	84 07       	cpc	r24, r20
    1024:	95 07       	cpc	r25, r21
    1026:	18 f0       	brcs	.+6      	; 0x102e <__addsf3x+0x18>
    1028:	71 f4       	brne	.+28     	; 0x1046 <__addsf3x+0x30>
    102a:	9e f5       	brtc	.+102    	; 0x1092 <__addsf3x+0x7c>
    102c:	67 c1       	rjmp	.+718    	; 0x12fc <__fp_zero>
    102e:	0e f4       	brtc	.+2      	; 0x1032 <__addsf3x+0x1c>
    1030:	e0 95       	com	r30
    1032:	0b 2e       	mov	r0, r27
    1034:	ba 2f       	mov	r27, r26
    1036:	a0 2d       	mov	r26, r0
    1038:	0b 01       	movw	r0, r22
    103a:	b9 01       	movw	r22, r18
    103c:	90 01       	movw	r18, r0
    103e:	0c 01       	movw	r0, r24
    1040:	ca 01       	movw	r24, r20
    1042:	a0 01       	movw	r20, r0
    1044:	11 24       	eor	r1, r1
    1046:	ff 27       	eor	r31, r31
    1048:	59 1b       	sub	r21, r25
    104a:	99 f0       	breq	.+38     	; 0x1072 <__addsf3x+0x5c>
    104c:	59 3f       	cpi	r21, 0xF9	; 249
    104e:	50 f4       	brcc	.+20     	; 0x1064 <__addsf3x+0x4e>
    1050:	50 3e       	cpi	r21, 0xE0	; 224
    1052:	68 f1       	brcs	.+90     	; 0x10ae <__addsf3x+0x98>
    1054:	1a 16       	cp	r1, r26
    1056:	f0 40       	sbci	r31, 0x00	; 0
    1058:	a2 2f       	mov	r26, r18
    105a:	23 2f       	mov	r18, r19
    105c:	34 2f       	mov	r19, r20
    105e:	44 27       	eor	r20, r20
    1060:	58 5f       	subi	r21, 0xF8	; 248
    1062:	f3 cf       	rjmp	.-26     	; 0x104a <__addsf3x+0x34>
    1064:	46 95       	lsr	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	a7 95       	ror	r26
    106c:	f0 40       	sbci	r31, 0x00	; 0
    106e:	53 95       	inc	r21
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__addsf3x+0x4e>
    1072:	7e f4       	brtc	.+30     	; 0x1092 <__addsf3x+0x7c>
    1074:	1f 16       	cp	r1, r31
    1076:	ba 0b       	sbc	r27, r26
    1078:	62 0b       	sbc	r22, r18
    107a:	73 0b       	sbc	r23, r19
    107c:	84 0b       	sbc	r24, r20
    107e:	ba f0       	brmi	.+46     	; 0x10ae <__addsf3x+0x98>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	a1 f0       	breq	.+40     	; 0x10ac <__addsf3x+0x96>
    1084:	ff 0f       	add	r31, r31
    1086:	bb 1f       	adc	r27, r27
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	c2 f7       	brpl	.-16     	; 0x1080 <__addsf3x+0x6a>
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <__addsf3x+0x98>
    1092:	ba 0f       	add	r27, r26
    1094:	62 1f       	adc	r22, r18
    1096:	73 1f       	adc	r23, r19
    1098:	84 1f       	adc	r24, r20
    109a:	48 f4       	brcc	.+18     	; 0x10ae <__addsf3x+0x98>
    109c:	87 95       	ror	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <__addsf3x+0x96>
    10aa:	b3 cf       	rjmp	.-154    	; 0x1012 <__addsf3+0x1e>
    10ac:	93 95       	inc	r25
    10ae:	88 0f       	add	r24, r24
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__addsf3x+0x9e>
    10b2:	99 27       	eor	r25, r25
    10b4:	ee 0f       	add	r30, r30
    10b6:	97 95       	ror	r25
    10b8:	87 95       	ror	r24
    10ba:	08 95       	ret

000010bc <__divsf3>:
    10bc:	0c d0       	rcall	.+24     	; 0x10d6 <__divsf3x>
    10be:	eb c0       	rjmp	.+470    	; 0x1296 <__fp_round>
    10c0:	e3 d0       	rcall	.+454    	; 0x1288 <__fp_pscB>
    10c2:	40 f0       	brcs	.+16     	; 0x10d4 <__divsf3+0x18>
    10c4:	da d0       	rcall	.+436    	; 0x127a <__fp_pscA>
    10c6:	30 f0       	brcs	.+12     	; 0x10d4 <__divsf3+0x18>
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <__divsf3+0x16>
    10ca:	5f 3f       	cpi	r21, 0xFF	; 255
    10cc:	19 f0       	breq	.+6      	; 0x10d4 <__divsf3+0x18>
    10ce:	cc c0       	rjmp	.+408    	; 0x1268 <__fp_inf>
    10d0:	51 11       	cpse	r21, r1
    10d2:	15 c1       	rjmp	.+554    	; 0x12fe <__fp_szero>
    10d4:	cf c0       	rjmp	.+414    	; 0x1274 <__fp_nan>

000010d6 <__divsf3x>:
    10d6:	f0 d0       	rcall	.+480    	; 0x12b8 <__fp_split3>
    10d8:	98 f3       	brcs	.-26     	; 0x10c0 <__divsf3+0x4>

000010da <__divsf3_pse>:
    10da:	99 23       	and	r25, r25
    10dc:	c9 f3       	breq	.-14     	; 0x10d0 <__divsf3+0x14>
    10de:	55 23       	and	r21, r21
    10e0:	b1 f3       	breq	.-20     	; 0x10ce <__divsf3+0x12>
    10e2:	95 1b       	sub	r25, r21
    10e4:	55 0b       	sbc	r21, r21
    10e6:	bb 27       	eor	r27, r27
    10e8:	aa 27       	eor	r26, r26
    10ea:	62 17       	cp	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	38 f0       	brcs	.+14     	; 0x1100 <__divsf3_pse+0x26>
    10f2:	9f 5f       	subi	r25, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	44 1f       	adc	r20, r20
    10fc:	aa 1f       	adc	r26, r26
    10fe:	a9 f3       	breq	.-22     	; 0x10ea <__divsf3_pse+0x10>
    1100:	33 d0       	rcall	.+102    	; 0x1168 <__divsf3_pse+0x8e>
    1102:	0e 2e       	mov	r0, r30
    1104:	3a f0       	brmi	.+14     	; 0x1114 <__divsf3_pse+0x3a>
    1106:	e0 e8       	ldi	r30, 0x80	; 128
    1108:	30 d0       	rcall	.+96     	; 0x116a <__divsf3_pse+0x90>
    110a:	91 50       	subi	r25, 0x01	; 1
    110c:	50 40       	sbci	r21, 0x00	; 0
    110e:	e6 95       	lsr	r30
    1110:	00 1c       	adc	r0, r0
    1112:	ca f7       	brpl	.-14     	; 0x1106 <__divsf3_pse+0x2c>
    1114:	29 d0       	rcall	.+82     	; 0x1168 <__divsf3_pse+0x8e>
    1116:	fe 2f       	mov	r31, r30
    1118:	27 d0       	rcall	.+78     	; 0x1168 <__divsf3_pse+0x8e>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	bb 1f       	adc	r27, r27
    1122:	26 17       	cp	r18, r22
    1124:	37 07       	cpc	r19, r23
    1126:	48 07       	cpc	r20, r24
    1128:	ab 07       	cpc	r26, r27
    112a:	b0 e8       	ldi	r27, 0x80	; 128
    112c:	09 f0       	breq	.+2      	; 0x1130 <__divsf3_pse+0x56>
    112e:	bb 0b       	sbc	r27, r27
    1130:	80 2d       	mov	r24, r0
    1132:	bf 01       	movw	r22, r30
    1134:	ff 27       	eor	r31, r31
    1136:	93 58       	subi	r25, 0x83	; 131
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	2a f0       	brmi	.+10     	; 0x1146 <__divsf3_pse+0x6c>
    113c:	9e 3f       	cpi	r25, 0xFE	; 254
    113e:	51 05       	cpc	r21, r1
    1140:	68 f0       	brcs	.+26     	; 0x115c <__divsf3_pse+0x82>
    1142:	92 c0       	rjmp	.+292    	; 0x1268 <__fp_inf>
    1144:	dc c0       	rjmp	.+440    	; 0x12fe <__fp_szero>
    1146:	5f 3f       	cpi	r21, 0xFF	; 255
    1148:	ec f3       	brlt	.-6      	; 0x1144 <__divsf3_pse+0x6a>
    114a:	98 3e       	cpi	r25, 0xE8	; 232
    114c:	dc f3       	brlt	.-10     	; 0x1144 <__divsf3_pse+0x6a>
    114e:	86 95       	lsr	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	f7 95       	ror	r31
    1158:	9f 5f       	subi	r25, 0xFF	; 255
    115a:	c9 f7       	brne	.-14     	; 0x114e <__divsf3_pse+0x74>
    115c:	88 0f       	add	r24, r24
    115e:	91 1d       	adc	r25, r1
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret
    1168:	e1 e0       	ldi	r30, 0x01	; 1
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	bb 1f       	adc	r27, r27
    1172:	62 17       	cp	r22, r18
    1174:	73 07       	cpc	r23, r19
    1176:	84 07       	cpc	r24, r20
    1178:	ba 07       	cpc	r27, r26
    117a:	20 f0       	brcs	.+8      	; 0x1184 <__divsf3_pse+0xaa>
    117c:	62 1b       	sub	r22, r18
    117e:	73 0b       	sbc	r23, r19
    1180:	84 0b       	sbc	r24, r20
    1182:	ba 0b       	sbc	r27, r26
    1184:	ee 1f       	adc	r30, r30
    1186:	88 f7       	brcc	.-30     	; 0x116a <__divsf3_pse+0x90>
    1188:	e0 95       	com	r30
    118a:	08 95       	ret

0000118c <__fixsfsi>:
    118c:	04 d0       	rcall	.+8      	; 0x1196 <__fixunssfsi>
    118e:	68 94       	set
    1190:	b1 11       	cpse	r27, r1
    1192:	b5 c0       	rjmp	.+362    	; 0x12fe <__fp_szero>
    1194:	08 95       	ret

00001196 <__fixunssfsi>:
    1196:	98 d0       	rcall	.+304    	; 0x12c8 <__fp_splitA>
    1198:	88 f0       	brcs	.+34     	; 0x11bc <__fixunssfsi+0x26>
    119a:	9f 57       	subi	r25, 0x7F	; 127
    119c:	90 f0       	brcs	.+36     	; 0x11c2 <__fixunssfsi+0x2c>
    119e:	b9 2f       	mov	r27, r25
    11a0:	99 27       	eor	r25, r25
    11a2:	b7 51       	subi	r27, 0x17	; 23
    11a4:	a0 f0       	brcs	.+40     	; 0x11ce <__fixunssfsi+0x38>
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <__fixunssfsi+0x46>
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	1a f0       	brmi	.+6      	; 0x11b8 <__fixunssfsi+0x22>
    11b2:	ba 95       	dec	r27
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__fixunssfsi+0x12>
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <__fixunssfsi+0x46>
    11b8:	b1 30       	cpi	r27, 0x01	; 1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <__fixunssfsi+0x46>
    11bc:	9f d0       	rcall	.+318    	; 0x12fc <__fp_zero>
    11be:	b1 e0       	ldi	r27, 0x01	; 1
    11c0:	08 95       	ret
    11c2:	9c c0       	rjmp	.+312    	; 0x12fc <__fp_zero>
    11c4:	67 2f       	mov	r22, r23
    11c6:	78 2f       	mov	r23, r24
    11c8:	88 27       	eor	r24, r24
    11ca:	b8 5f       	subi	r27, 0xF8	; 248
    11cc:	39 f0       	breq	.+14     	; 0x11dc <__fixunssfsi+0x46>
    11ce:	b9 3f       	cpi	r27, 0xF9	; 249
    11d0:	cc f3       	brlt	.-14     	; 0x11c4 <__fixunssfsi+0x2e>
    11d2:	86 95       	lsr	r24
    11d4:	77 95       	ror	r23
    11d6:	67 95       	ror	r22
    11d8:	b3 95       	inc	r27
    11da:	d9 f7       	brne	.-10     	; 0x11d2 <__fixunssfsi+0x3c>
    11dc:	3e f4       	brtc	.+14     	; 0x11ec <__fixunssfsi+0x56>
    11de:	90 95       	com	r25
    11e0:	80 95       	com	r24
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	08 95       	ret

000011ee <__floatunsisf>:
    11ee:	e8 94       	clt
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <__floatsisf+0x12>

000011f2 <__floatsisf>:
    11f2:	97 fb       	bst	r25, 7
    11f4:	3e f4       	brtc	.+14     	; 0x1204 <__floatsisf+0x12>
    11f6:	90 95       	com	r25
    11f8:	80 95       	com	r24
    11fa:	70 95       	com	r23
    11fc:	61 95       	neg	r22
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8f 4f       	sbci	r24, 0xFF	; 255
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	99 23       	and	r25, r25
    1206:	a9 f0       	breq	.+42     	; 0x1232 <__floatsisf+0x40>
    1208:	f9 2f       	mov	r31, r25
    120a:	96 e9       	ldi	r25, 0x96	; 150
    120c:	bb 27       	eor	r27, r27
    120e:	93 95       	inc	r25
    1210:	f6 95       	lsr	r31
    1212:	87 95       	ror	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b7 95       	ror	r27
    121a:	f1 11       	cpse	r31, r1
    121c:	f8 cf       	rjmp	.-16     	; 0x120e <__floatsisf+0x1c>
    121e:	fa f4       	brpl	.+62     	; 0x125e <__floatsisf+0x6c>
    1220:	bb 0f       	add	r27, r27
    1222:	11 f4       	brne	.+4      	; 0x1228 <__floatsisf+0x36>
    1224:	60 ff       	sbrs	r22, 0
    1226:	1b c0       	rjmp	.+54     	; 0x125e <__floatsisf+0x6c>
    1228:	6f 5f       	subi	r22, 0xFF	; 255
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	16 c0       	rjmp	.+44     	; 0x125e <__floatsisf+0x6c>
    1232:	88 23       	and	r24, r24
    1234:	11 f0       	breq	.+4      	; 0x123a <__floatsisf+0x48>
    1236:	96 e9       	ldi	r25, 0x96	; 150
    1238:	11 c0       	rjmp	.+34     	; 0x125c <__floatsisf+0x6a>
    123a:	77 23       	and	r23, r23
    123c:	21 f0       	breq	.+8      	; 0x1246 <__floatsisf+0x54>
    123e:	9e e8       	ldi	r25, 0x8E	; 142
    1240:	87 2f       	mov	r24, r23
    1242:	76 2f       	mov	r23, r22
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <__floatsisf+0x5e>
    1246:	66 23       	and	r22, r22
    1248:	71 f0       	breq	.+28     	; 0x1266 <__floatsisf+0x74>
    124a:	96 e8       	ldi	r25, 0x86	; 134
    124c:	86 2f       	mov	r24, r22
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	2a f0       	brmi	.+10     	; 0x125e <__floatsisf+0x6c>
    1254:	9a 95       	dec	r25
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	da f7       	brpl	.-10     	; 0x1254 <__floatsisf+0x62>
    125e:	88 0f       	add	r24, r24
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret

00001268 <__fp_inf>:
    1268:	97 f9       	bld	r25, 7
    126a:	9f 67       	ori	r25, 0x7F	; 127
    126c:	80 e8       	ldi	r24, 0x80	; 128
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	08 95       	ret

00001274 <__fp_nan>:
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	80 ec       	ldi	r24, 0xC0	; 192
    1278:	08 95       	ret

0000127a <__fp_pscA>:
    127a:	00 24       	eor	r0, r0
    127c:	0a 94       	dec	r0
    127e:	16 16       	cp	r1, r22
    1280:	17 06       	cpc	r1, r23
    1282:	18 06       	cpc	r1, r24
    1284:	09 06       	cpc	r0, r25
    1286:	08 95       	ret

00001288 <__fp_pscB>:
    1288:	00 24       	eor	r0, r0
    128a:	0a 94       	dec	r0
    128c:	12 16       	cp	r1, r18
    128e:	13 06       	cpc	r1, r19
    1290:	14 06       	cpc	r1, r20
    1292:	05 06       	cpc	r0, r21
    1294:	08 95       	ret

00001296 <__fp_round>:
    1296:	09 2e       	mov	r0, r25
    1298:	03 94       	inc	r0
    129a:	00 0c       	add	r0, r0
    129c:	11 f4       	brne	.+4      	; 0x12a2 <__fp_round+0xc>
    129e:	88 23       	and	r24, r24
    12a0:	52 f0       	brmi	.+20     	; 0x12b6 <__fp_round+0x20>
    12a2:	bb 0f       	add	r27, r27
    12a4:	40 f4       	brcc	.+16     	; 0x12b6 <__fp_round+0x20>
    12a6:	bf 2b       	or	r27, r31
    12a8:	11 f4       	brne	.+4      	; 0x12ae <__fp_round+0x18>
    12aa:	60 ff       	sbrs	r22, 0
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <__fp_round+0x20>
    12ae:	6f 5f       	subi	r22, 0xFF	; 255
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	08 95       	ret

000012b8 <__fp_split3>:
    12b8:	57 fd       	sbrc	r21, 7
    12ba:	90 58       	subi	r25, 0x80	; 128
    12bc:	44 0f       	add	r20, r20
    12be:	55 1f       	adc	r21, r21
    12c0:	59 f0       	breq	.+22     	; 0x12d8 <__fp_splitA+0x10>
    12c2:	5f 3f       	cpi	r21, 0xFF	; 255
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <__fp_splitA+0x1a>
    12c6:	47 95       	ror	r20

000012c8 <__fp_splitA>:
    12c8:	88 0f       	add	r24, r24
    12ca:	97 fb       	bst	r25, 7
    12cc:	99 1f       	adc	r25, r25
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <__fp_splitA+0x20>
    12d0:	9f 3f       	cpi	r25, 0xFF	; 255
    12d2:	79 f0       	breq	.+30     	; 0x12f2 <__fp_splitA+0x2a>
    12d4:	87 95       	ror	r24
    12d6:	08 95       	ret
    12d8:	12 16       	cp	r1, r18
    12da:	13 06       	cpc	r1, r19
    12dc:	14 06       	cpc	r1, r20
    12de:	55 1f       	adc	r21, r21
    12e0:	f2 cf       	rjmp	.-28     	; 0x12c6 <__fp_split3+0xe>
    12e2:	46 95       	lsr	r20
    12e4:	f1 df       	rcall	.-30     	; 0x12c8 <__fp_splitA>
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <__fp_splitA+0x30>
    12e8:	16 16       	cp	r1, r22
    12ea:	17 06       	cpc	r1, r23
    12ec:	18 06       	cpc	r1, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	f1 cf       	rjmp	.-30     	; 0x12d4 <__fp_splitA+0xc>
    12f2:	86 95       	lsr	r24
    12f4:	71 05       	cpc	r23, r1
    12f6:	61 05       	cpc	r22, r1
    12f8:	08 94       	sec
    12fa:	08 95       	ret

000012fc <__fp_zero>:
    12fc:	e8 94       	clt

000012fe <__fp_szero>:
    12fe:	bb 27       	eor	r27, r27
    1300:	66 27       	eor	r22, r22
    1302:	77 27       	eor	r23, r23
    1304:	cb 01       	movw	r24, r22
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret

0000130a <__mulsf3>:
    130a:	0b d0       	rcall	.+22     	; 0x1322 <__mulsf3x>
    130c:	c4 cf       	rjmp	.-120    	; 0x1296 <__fp_round>
    130e:	b5 df       	rcall	.-150    	; 0x127a <__fp_pscA>
    1310:	28 f0       	brcs	.+10     	; 0x131c <__mulsf3+0x12>
    1312:	ba df       	rcall	.-140    	; 0x1288 <__fp_pscB>
    1314:	18 f0       	brcs	.+6      	; 0x131c <__mulsf3+0x12>
    1316:	95 23       	and	r25, r21
    1318:	09 f0       	breq	.+2      	; 0x131c <__mulsf3+0x12>
    131a:	a6 cf       	rjmp	.-180    	; 0x1268 <__fp_inf>
    131c:	ab cf       	rjmp	.-170    	; 0x1274 <__fp_nan>
    131e:	11 24       	eor	r1, r1
    1320:	ee cf       	rjmp	.-36     	; 0x12fe <__fp_szero>

00001322 <__mulsf3x>:
    1322:	ca df       	rcall	.-108    	; 0x12b8 <__fp_split3>
    1324:	a0 f3       	brcs	.-24     	; 0x130e <__mulsf3+0x4>

00001326 <__mulsf3_pse>:
    1326:	95 9f       	mul	r25, r21
    1328:	d1 f3       	breq	.-12     	; 0x131e <__mulsf3+0x14>
    132a:	95 0f       	add	r25, r21
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	55 1f       	adc	r21, r21
    1330:	62 9f       	mul	r22, r18
    1332:	f0 01       	movw	r30, r0
    1334:	72 9f       	mul	r23, r18
    1336:	bb 27       	eor	r27, r27
    1338:	f0 0d       	add	r31, r0
    133a:	b1 1d       	adc	r27, r1
    133c:	63 9f       	mul	r22, r19
    133e:	aa 27       	eor	r26, r26
    1340:	f0 0d       	add	r31, r0
    1342:	b1 1d       	adc	r27, r1
    1344:	aa 1f       	adc	r26, r26
    1346:	64 9f       	mul	r22, r20
    1348:	66 27       	eor	r22, r22
    134a:	b0 0d       	add	r27, r0
    134c:	a1 1d       	adc	r26, r1
    134e:	66 1f       	adc	r22, r22
    1350:	82 9f       	mul	r24, r18
    1352:	22 27       	eor	r18, r18
    1354:	b0 0d       	add	r27, r0
    1356:	a1 1d       	adc	r26, r1
    1358:	62 1f       	adc	r22, r18
    135a:	73 9f       	mul	r23, r19
    135c:	b0 0d       	add	r27, r0
    135e:	a1 1d       	adc	r26, r1
    1360:	62 1f       	adc	r22, r18
    1362:	83 9f       	mul	r24, r19
    1364:	a0 0d       	add	r26, r0
    1366:	61 1d       	adc	r22, r1
    1368:	22 1f       	adc	r18, r18
    136a:	74 9f       	mul	r23, r20
    136c:	33 27       	eor	r19, r19
    136e:	a0 0d       	add	r26, r0
    1370:	61 1d       	adc	r22, r1
    1372:	23 1f       	adc	r18, r19
    1374:	84 9f       	mul	r24, r20
    1376:	60 0d       	add	r22, r0
    1378:	21 1d       	adc	r18, r1
    137a:	82 2f       	mov	r24, r18
    137c:	76 2f       	mov	r23, r22
    137e:	6a 2f       	mov	r22, r26
    1380:	11 24       	eor	r1, r1
    1382:	9f 57       	subi	r25, 0x7F	; 127
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	8a f0       	brmi	.+34     	; 0x13aa <__mulsf3_pse+0x84>
    1388:	e1 f0       	breq	.+56     	; 0x13c2 <__mulsf3_pse+0x9c>
    138a:	88 23       	and	r24, r24
    138c:	4a f0       	brmi	.+18     	; 0x13a0 <__mulsf3_pse+0x7a>
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	bb 1f       	adc	r27, r27
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	91 50       	subi	r25, 0x01	; 1
    139c:	50 40       	sbci	r21, 0x00	; 0
    139e:	a9 f7       	brne	.-22     	; 0x138a <__mulsf3_pse+0x64>
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	51 05       	cpc	r21, r1
    13a4:	70 f0       	brcs	.+28     	; 0x13c2 <__mulsf3_pse+0x9c>
    13a6:	60 cf       	rjmp	.-320    	; 0x1268 <__fp_inf>
    13a8:	aa cf       	rjmp	.-172    	; 0x12fe <__fp_szero>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	ec f3       	brlt	.-6      	; 0x13a8 <__mulsf3_pse+0x82>
    13ae:	98 3e       	cpi	r25, 0xE8	; 232
    13b0:	dc f3       	brlt	.-10     	; 0x13a8 <__mulsf3_pse+0x82>
    13b2:	86 95       	lsr	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	e7 95       	ror	r30
    13be:	9f 5f       	subi	r25, 0xFF	; 255
    13c0:	c1 f7       	brne	.-16     	; 0x13b2 <__mulsf3_pse+0x8c>
    13c2:	fe 2b       	or	r31, r30
    13c4:	88 0f       	add	r24, r24
    13c6:	91 1d       	adc	r25, r1
    13c8:	96 95       	lsr	r25
    13ca:	87 95       	ror	r24
    13cc:	97 f9       	bld	r25, 7
    13ce:	08 95       	ret

000013d0 <__divmodhi4>:
    13d0:	97 fb       	bst	r25, 7
    13d2:	07 2e       	mov	r0, r23
    13d4:	16 f4       	brtc	.+4      	; 0x13da <__divmodhi4+0xa>
    13d6:	00 94       	com	r0
    13d8:	06 d0       	rcall	.+12     	; 0x13e6 <__divmodhi4_neg1>
    13da:	77 fd       	sbrc	r23, 7
    13dc:	08 d0       	rcall	.+16     	; 0x13ee <__divmodhi4_neg2>
    13de:	0b d0       	rcall	.+22     	; 0x13f6 <__udivmodhi4>
    13e0:	07 fc       	sbrc	r0, 7
    13e2:	05 d0       	rcall	.+10     	; 0x13ee <__divmodhi4_neg2>
    13e4:	3e f4       	brtc	.+14     	; 0x13f4 <__divmodhi4_exit>

000013e6 <__divmodhi4_neg1>:
    13e6:	90 95       	com	r25
    13e8:	81 95       	neg	r24
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__divmodhi4_neg2>:
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255

000013f4 <__divmodhi4_exit>:
    13f4:	08 95       	ret

000013f6 <__udivmodhi4>:
    13f6:	aa 1b       	sub	r26, r26
    13f8:	bb 1b       	sub	r27, r27
    13fa:	51 e1       	ldi	r21, 0x11	; 17
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <__udivmodhi4_ep>

000013fe <__udivmodhi4_loop>:
    13fe:	aa 1f       	adc	r26, r26
    1400:	bb 1f       	adc	r27, r27
    1402:	a6 17       	cp	r26, r22
    1404:	b7 07       	cpc	r27, r23
    1406:	10 f0       	brcs	.+4      	; 0x140c <__udivmodhi4_ep>
    1408:	a6 1b       	sub	r26, r22
    140a:	b7 0b       	sbc	r27, r23

0000140c <__udivmodhi4_ep>:
    140c:	88 1f       	adc	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	5a 95       	dec	r21
    1412:	a9 f7       	brne	.-22     	; 0x13fe <__udivmodhi4_loop>
    1414:	80 95       	com	r24
    1416:	90 95       	com	r25
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	08 95       	ret

0000141e <strcpy>:
    141e:	fb 01       	movw	r30, r22
    1420:	dc 01       	movw	r26, r24
    1422:	01 90       	ld	r0, Z+
    1424:	0d 92       	st	X+, r0
    1426:	00 20       	and	r0, r0
    1428:	e1 f7       	brne	.-8      	; 0x1422 <strcpy+0x4>
    142a:	08 95       	ret

0000142c <_exit>:
    142c:	f8 94       	cli

0000142e <__stop_program>:
    142e:	ff cf       	rjmp	.-2      	; 0x142e <__stop_program>
