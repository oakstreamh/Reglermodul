
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00002810  000028a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  0080020a  0080020a  000029ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039a0  00000000  00000000  00002bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d1f  00000000  00000000  0000658e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a68  00000000  00000000  000072ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006bc  00000000  00000000  00009d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010cf0  00000000  00000000  0000a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019d6  00000000  00000000  0001b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  0001ca9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b13  00000000  00000000  0001cc52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_19>
      50:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e1       	ldi	r30, 0x10	; 16
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 35       	cpi	r26, 0x54	; 84
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <main>
      c6:	0c 94 06 14 	jmp	0x280c	; 0x280c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	31 f4       	brne	.+12     	; 0xf2 <count+0x26>
	{
		TCNT3 = 0;
      e6:	10 92 95 00 	sts	0x0095, r1
      ea:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (0<<CS32)|(0<<CS30);
      ee:	10 92 91 00 	sts	0x0091, r1
      f2:	08 95       	ret

000000f4 <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
	int req_count = (int) req_delay*F_CPU/1024-1;
	if(TCNT3<req_count)
      f8:	e0 91 94 00 	lds	r30, 0x0094
      fc:	f0 91 95 00 	lds	r31, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024-1;
     100:	dc 01       	movw	r26, r24
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	41 ee       	ldi	r20, 0xE1	; 225
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulshisi3>
     10e:	8b 01       	movw	r16, r22
     110:	9c 01       	movw	r18, r24
     112:	99 23       	and	r25, r25
     114:	24 f4       	brge	.+8      	; 0x11e <checkCount+0x2a>
     116:	01 50       	subi	r16, 0x01	; 1
     118:	1c 4f       	sbci	r17, 0xFC	; 252
     11a:	2f 4f       	sbci	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	d9 01       	movw	r26, r18
     120:	c8 01       	movw	r24, r16
     122:	07 2e       	mov	r0, r23
     124:	7a e0       	ldi	r23, 0x0A	; 10
     126:	b5 95       	asr	r27
     128:	a7 95       	ror	r26
     12a:	97 95       	ror	r25
     12c:	87 95       	ror	r24
     12e:	7a 95       	dec	r23
     130:	d1 f7       	brne	.-12     	; 0x126 <checkCount+0x32>
     132:	70 2d       	mov	r23, r0
     134:	01 97       	sbiw	r24, 0x01	; 1
	if(TCNT3<req_count)
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	e8 17       	cp	r30, r24
     13c:	f9 07       	cpc	r31, r25
     13e:	10 f4       	brcc	.+4      	; 0x144 <checkCount+0x50>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 0;
	}
	return 1;
     144:	c9 01       	movw	r24, r18
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <doFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void doFuzzy(int c, int v)
{
     14c:	2f 92       	push	r2
     14e:	3f 92       	push	r3
     150:	4f 92       	push	r4
     152:	5f 92       	push	r5
     154:	6f 92       	push	r6
     156:	7f 92       	push	r7
     158:	8f 92       	push	r8
     15a:	9f 92       	push	r9
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	c4 5c       	subi	r28, 0xC4	; 196
     176:	d1 40       	sbci	r29, 0x01	; 1
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	cd bf       	out	0x3d, r28	; 61
     182:	2c 01       	movw	r4, r24
     184:	6b 01       	movw	r12, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
     186:	88 e0       	ldi	r24, 0x08	; 8
     188:	e4 e0       	ldi	r30, 0x04	; 4
     18a:	f1 e0       	ldi	r31, 0x01	; 1
     18c:	de 01       	movw	r26, r28
     18e:	11 96       	adiw	r26, 0x01	; 1
     190:	01 90       	ld	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	8a 95       	dec	r24
     196:	e1 f7       	brne	.-8      	; 0x190 <doFuzzy+0x44>
	
	struct mf_type rightSide;
	MATLAB_MF(&rightSide, "rightSide", 99, 100, 120, 135); // Min_value = 100
     198:	3e 01       	movw	r6, r28
     19a:	21 e1       	ldi	r18, 0x11	; 17
     19c:	62 0e       	add	r6, r18
     19e:	71 1c       	adc	r7, r1
     1a0:	0f 2e       	mov	r0, r31
     1a2:	f7 e8       	ldi	r31, 0x87	; 135
     1a4:	ef 2e       	mov	r14, r31
     1a6:	f1 2c       	mov	r15, r1
     1a8:	f0 2d       	mov	r31, r0
     1aa:	08 e7       	ldi	r16, 0x78	; 120
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	24 e6       	ldi	r18, 0x64	; 100
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	43 e6       	ldi	r20, 0x63	; 99
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	6c e0       	ldi	r22, 0x0C	; 12
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	c3 01       	movw	r24, r6
     1bc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 125, 145, 155, 175);
     1c0:	4e 01       	movw	r8, r28
     1c2:	47 e2       	ldi	r20, 0x27	; 39
     1c4:	84 0e       	add	r8, r20
     1c6:	91 1c       	adc	r9, r1
     1c8:	0f 2e       	mov	r0, r31
     1ca:	ff ea       	ldi	r31, 0xAF	; 175
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f1 2c       	mov	r15, r1
     1d0:	f0 2d       	mov	r31, r0
     1d2:	0b e9       	ldi	r16, 0x9B	; 155
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	21 e9       	ldi	r18, 0x91	; 145
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	4d e7       	ldi	r20, 0x7D	; 125
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	66 e1       	ldi	r22, 0x16	; 22
     1e0:	71 e0       	ldi	r23, 0x01	; 1
     1e2:	c4 01       	movw	r24, r8
     1e4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type leftSide;
	MATLAB_MF(&leftSide, "leftSide", 175, 186, 199, 200);  // Max_value = 199
     1e8:	5e 01       	movw	r10, r28
     1ea:	5d e3       	ldi	r21, 0x3D	; 61
     1ec:	a5 0e       	add	r10, r21
     1ee:	b1 1c       	adc	r11, r1
     1f0:	0f 2e       	mov	r0, r31
     1f2:	f8 ec       	ldi	r31, 0xC8	; 200
     1f4:	ef 2e       	mov	r14, r31
     1f6:	f1 2c       	mov	r15, r1
     1f8:	f0 2d       	mov	r31, r0
     1fa:	07 ec       	ldi	r16, 0xC7	; 199
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	2a eb       	ldi	r18, 0xBA	; 186
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	4f ea       	ldi	r20, 0xAF	; 175
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	6d e1       	ldi	r22, 0x1D	; 29
     208:	71 e0       	ldi	r23, 0x01	; 1
     20a:	c5 01       	movw	r24, r10
     20c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	
	delta_C.membership_functions = &rightSide;
     210:	7e 86       	std	Y+14, r7	; 0x0e
     212:	6d 86       	std	Y+13, r6	; 0x0d
	rightSide.next = &centre;
     214:	9e a2       	std	Y+38, r9	; 0x26
     216:	8d a2       	std	Y+37, r8	; 0x25
	centre.next = &leftSide;
     218:	bc ae       	std	Y+60, r11	; 0x3c
     21a:	ab ae       	std	Y+59, r10	; 0x3b
	leftSide.next = NULL;
     21c:	63 96       	adiw	r28, 0x13	; 19
     21e:	1f ae       	std	Y+63, r1	; 0x3f
     220:	1e ae       	std	Y+62, r1	; 0x3e
     222:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	48 16       	cp	r4, r24
     228:	51 04       	cpc	r5, r1
     22a:	2c f4       	brge	.+10     	; 0x236 <doFuzzy+0xea>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
     22c:	84 e6       	ldi	r24, 0x64	; 100
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	9c 87       	std	Y+12, r25	; 0x0c
     232:	8b 87       	std	Y+11, r24	; 0x0b
     234:	0b c0       	rjmp	.+22     	; 0x24c <doFuzzy+0x100>
	}
	else if(c>199)			// if sensor value is bigger than delta_C's input set's upper limit
     236:	a8 ec       	ldi	r26, 0xC8	; 200
     238:	4a 16       	cp	r4, r26
     23a:	51 04       	cpc	r5, r1
     23c:	2c f0       	brlt	.+10     	; 0x248 <doFuzzy+0xfc>
	{
		delta_C.value = 199;  // force input value to lowest point in delta_C's input set
     23e:	87 ec       	ldi	r24, 0xC7	; 199
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	9c 87       	std	Y+12, r25	; 0x0c
     244:	8b 87       	std	Y+11, r24	; 0x0b
     246:	02 c0       	rjmp	.+4      	; 0x24c <doFuzzy+0x100>
	}
	else
	{
		delta_C.value = c;
     248:	5c 86       	std	Y+12, r5	; 0x0c
     24a:	4b 86       	std	Y+11, r4	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     24c:	88 e0       	ldi	r24, 0x08	; 8
     24e:	e6 e2       	ldi	r30, 0x26	; 38
     250:	f1 e0       	ldi	r31, 0x01	; 1
     252:	de 01       	movw	r26, r28
     254:	ad 5a       	subi	r26, 0xAD	; 173
     256:	bf 4f       	sbci	r27, 0xFF	; 255
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <doFuzzy+0x10c>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", 0, 1, 20, 35); // min V is 1
     260:	3e 01       	movw	r6, r28
     262:	b3 e6       	ldi	r27, 0x63	; 99
     264:	6b 0e       	add	r6, r27
     266:	71 1c       	adc	r7, r1
     268:	0f 2e       	mov	r0, r31
     26a:	f3 e2       	ldi	r31, 0x23	; 35
     26c:	ef 2e       	mov	r14, r31
     26e:	f1 2c       	mov	r15, r1
     270:	f0 2d       	mov	r31, r0
     272:	04 e1       	ldi	r16, 0x14	; 20
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	21 e0       	ldi	r18, 0x01	; 1
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	6e e2       	ldi	r22, 0x2E	; 46
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	c3 01       	movw	r24, r6
     284:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 15, 35, 40, 55);
     288:	4e 01       	movw	r8, r28
     28a:	e9 e7       	ldi	r30, 0x79	; 121
     28c:	8e 0e       	add	r8, r30
     28e:	91 1c       	adc	r9, r1
     290:	0f 2e       	mov	r0, r31
     292:	f7 e3       	ldi	r31, 0x37	; 55
     294:	ef 2e       	mov	r14, r31
     296:	f1 2c       	mov	r15, r1
     298:	f0 2d       	mov	r31, r0
     29a:	08 e2       	ldi	r16, 0x28	; 40
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	23 e2       	ldi	r18, 0x23	; 35
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	4f e0       	ldi	r20, 0x0F	; 15
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	66 e3       	ldi	r22, 0x36	; 54
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	c4 01       	movw	r24, r8
     2ac:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 35, 50, 74 , 75); // max V is 74
     2b0:	5e 01       	movw	r10, r28
     2b2:	ff e8       	ldi	r31, 0x8F	; 143
     2b4:	af 0e       	add	r10, r31
     2b6:	b1 1c       	adc	r11, r1
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fb e4       	ldi	r31, 0x4B	; 75
     2bc:	ef 2e       	mov	r14, r31
     2be:	f1 2c       	mov	r15, r1
     2c0:	f0 2d       	mov	r31, r0
     2c2:	0a e4       	ldi	r16, 0x4A	; 74
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	22 e3       	ldi	r18, 0x32	; 50
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	43 e2       	ldi	r20, 0x23	; 35
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	6d e3       	ldi	r22, 0x3D	; 61
     2d0:	71 e0       	ldi	r23, 0x01	; 1
     2d2:	c5 01       	movw	r24, r10
     2d4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     2d8:	a1 96       	adiw	r28, 0x21	; 33
     2da:	7f ae       	std	Y+63, r7	; 0x3f
     2dc:	6e ae       	std	Y+62, r6	; 0x3e
     2de:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     2e0:	d3 01       	movw	r26, r6
     2e2:	55 96       	adiw	r26, 0x15	; 21
     2e4:	9c 92       	st	X, r9
     2e6:	8e 92       	st	-X, r8
     2e8:	54 97       	sbiw	r26, 0x14	; 20
	inNyll.next = &inPlus;
     2ea:	f4 01       	movw	r30, r8
     2ec:	b5 8a       	std	Z+21, r11	; 0x15
     2ee:	a4 8a       	std	Z+20, r10	; 0x14
	inPlus.next = NULL;
     2f0:	d5 01       	movw	r26, r10
     2f2:	55 96       	adiw	r26, 0x15	; 21
     2f4:	1c 92       	st	X, r1
     2f6:	1e 92       	st	-X, r1
     2f8:	54 97       	sbiw	r26, 0x14	; 20
	
	// set V's input value to V´s value
	if(v<1)				// if sensor value is smaller than error's input set lower limit
     2fa:	1c 14       	cp	r1, r12
     2fc:	1d 04       	cpc	r1, r13
     2fe:	3c f0       	brlt	.+14     	; 0x30e <doFuzzy+0x1c2>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	6f 96       	adiw	r28, 0x1f	; 31
     306:	9f af       	std	Y+63, r25	; 0x3f
     308:	8e af       	std	Y+62, r24	; 0x3e
     30a:	6f 97       	sbiw	r28, 0x1f	; 31
     30c:	0f c0       	rjmp	.+30     	; 0x32c <doFuzzy+0x1e0>
	}
	else if(v>74)			// if sensor value is bigger than error's input set's upper limit
     30e:	bb e4       	ldi	r27, 0x4B	; 75
     310:	cb 16       	cp	r12, r27
     312:	d1 04       	cpc	r13, r1
     314:	3c f0       	brlt	.+14     	; 0x324 <doFuzzy+0x1d8>
	{
		delta_V.value = 74;  // force input value to lowest point in error's input set
     316:	8a e4       	ldi	r24, 0x4A	; 74
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	6f 96       	adiw	r28, 0x1f	; 31
     31c:	9f af       	std	Y+63, r25	; 0x3f
     31e:	8e af       	std	Y+62, r24	; 0x3e
     320:	6f 97       	sbiw	r28, 0x1f	; 31
     322:	04 c0       	rjmp	.+8      	; 0x32c <doFuzzy+0x1e0>
	}
	else
	{
		delta_V.value = v;
     324:	6f 96       	adiw	r28, 0x1f	; 31
     326:	df ae       	std	Y+63, r13	; 0x3f
     328:	ce ae       	std	Y+62, r12	; 0x3e
     32a:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     32c:	1e 01       	movw	r2, r28
     32e:	e5 ea       	ldi	r30, 0xA5	; 165
     330:	2e 0e       	add	r2, r30
     332:	31 1c       	adc	r3, r1
     334:	89 e0       	ldi	r24, 0x09	; 9
     336:	e4 e4       	ldi	r30, 0x44	; 68
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	d1 01       	movw	r26, r2
     33c:	01 90       	ld	r0, Z+
     33e:	0d 92       	st	X+, r0
     340:	8a 95       	dec	r24
     342:	e1 f7       	brne	.-8      	; 0x33c <doFuzzy+0x1f0>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", 2359, 2360, 2360, 2460);
     344:	2e 01       	movw	r4, r28
     346:	f5 eb       	ldi	r31, 0xB5	; 181
     348:	4f 0e       	add	r4, r31
     34a:	51 1c       	adc	r5, r1
     34c:	0f 2e       	mov	r0, r31
     34e:	fc e9       	ldi	r31, 0x9C	; 156
     350:	ef 2e       	mov	r14, r31
     352:	f9 e0       	ldi	r31, 0x09	; 9
     354:	ff 2e       	mov	r15, r31
     356:	f0 2d       	mov	r31, r0
     358:	08 e3       	ldi	r16, 0x38	; 56
     35a:	19 e0       	ldi	r17, 0x09	; 9
     35c:	28 e3       	ldi	r18, 0x38	; 56
     35e:	39 e0       	ldi	r19, 0x09	; 9
     360:	47 e3       	ldi	r20, 0x37	; 55
     362:	59 e0       	ldi	r21, 0x09	; 9
     364:	6d e4       	ldi	r22, 0x4D	; 77
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	c2 01       	movw	r24, r4
     36a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2400, 2460, 2460, 2560);
     36e:	3e 01       	movw	r6, r28
     370:	2b ec       	ldi	r18, 0xCB	; 203
     372:	62 0e       	add	r6, r18
     374:	71 1c       	adc	r7, r1
     376:	0f 2e       	mov	r0, r31
     378:	e1 2c       	mov	r14, r1
     37a:	fa e0       	ldi	r31, 0x0A	; 10
     37c:	ff 2e       	mov	r15, r31
     37e:	f0 2d       	mov	r31, r0
     380:	0c e9       	ldi	r16, 0x9C	; 156
     382:	19 e0       	ldi	r17, 0x09	; 9
     384:	2c e9       	ldi	r18, 0x9C	; 156
     386:	39 e0       	ldi	r19, 0x09	; 9
     388:	40 e6       	ldi	r20, 0x60	; 96
     38a:	59 e0       	ldi	r21, 0x09	; 9
     38c:	64 e0       	ldi	r22, 0x04	; 4
     38e:	72 e0       	ldi	r23, 0x02	; 2
     390:	c3 01       	movw	r24, r6
     392:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2520, 2660, 2660, 2720);
     396:	6e 01       	movw	r12, r28
     398:	41 ee       	ldi	r20, 0xE1	; 225
     39a:	c4 0e       	add	r12, r20
     39c:	d1 1c       	adc	r13, r1
     39e:	0f 2e       	mov	r0, r31
     3a0:	f0 ea       	ldi	r31, 0xA0	; 160
     3a2:	ef 2e       	mov	r14, r31
     3a4:	fa e0       	ldi	r31, 0x0A	; 10
     3a6:	ff 2e       	mov	r15, r31
     3a8:	f0 2d       	mov	r31, r0
     3aa:	04 e6       	ldi	r16, 0x64	; 100
     3ac:	1a e0       	ldi	r17, 0x0A	; 10
     3ae:	24 e6       	ldi	r18, 0x64	; 100
     3b0:	3a e0       	ldi	r19, 0x0A	; 10
     3b2:	48 ed       	ldi	r20, 0xD8	; 216
     3b4:	59 e0       	ldi	r21, 0x09	; 9
     3b6:	67 e5       	ldi	r22, 0x57	; 87
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	c6 01       	movw	r24, r12
     3bc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2700, 2800, 2800, 2900);
     3c0:	4e 01       	movw	r8, r28
     3c2:	57 ef       	ldi	r21, 0xF7	; 247
     3c4:	85 0e       	add	r8, r21
     3c6:	91 1c       	adc	r9, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	f4 e5       	ldi	r31, 0x54	; 84
     3cc:	ef 2e       	mov	r14, r31
     3ce:	fb e0       	ldi	r31, 0x0B	; 11
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	00 ef       	ldi	r16, 0xF0	; 240
     3d6:	1a e0       	ldi	r17, 0x0A	; 10
     3d8:	20 ef       	ldi	r18, 0xF0	; 240
     3da:	3a e0       	ldi	r19, 0x0A	; 10
     3dc:	4c e8       	ldi	r20, 0x8C	; 140
     3de:	5a e0       	ldi	r21, 0x0A	; 10
     3e0:	6a ef       	ldi	r22, 0xFA	; 250
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	c4 01       	movw	r24, r8
     3e6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 2860, 2960, 2960, 2961);
     3ea:	5e 01       	movw	r10, r28
     3ec:	83 ef       	ldi	r24, 0xF3	; 243
     3ee:	a8 1a       	sub	r10, r24
     3f0:	8e ef       	ldi	r24, 0xFE	; 254
     3f2:	b8 0a       	sbc	r11, r24
     3f4:	0f 2e       	mov	r0, r31
     3f6:	f1 e9       	ldi	r31, 0x91	; 145
     3f8:	ef 2e       	mov	r14, r31
     3fa:	fb e0       	ldi	r31, 0x0B	; 11
     3fc:	ff 2e       	mov	r15, r31
     3fe:	f0 2d       	mov	r31, r0
     400:	00 e9       	ldi	r16, 0x90	; 144
     402:	1b e0       	ldi	r17, 0x0B	; 11
     404:	20 e9       	ldi	r18, 0x90	; 144
     406:	3b e0       	ldi	r19, 0x0B	; 11
     408:	4c e2       	ldi	r20, 0x2C	; 44
     40a:	5b e0       	ldi	r21, 0x0B	; 11
     40c:	60 e6       	ldi	r22, 0x60	; 96
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	c5 01       	movw	r24, r10
     412:	ed d7       	rcall	.+4058   	; 0x13ee <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     414:	d1 01       	movw	r26, r2
     416:	1d 96       	adiw	r26, 0x0d	; 13
     418:	bc 92       	st	X, r11
     41a:	ae 92       	st	-X, r10
     41c:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
     41e:	f5 01       	movw	r30, r10
     420:	95 8a       	std	Z+21, r9	; 0x15
     422:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &straight;
     424:	d4 01       	movw	r26, r8
     426:	55 96       	adiw	r26, 0x15	; 21
     428:	dc 92       	st	X, r13
     42a:	ce 92       	st	-X, r12
     42c:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
     42e:	f6 01       	movw	r30, r12
     430:	75 8a       	std	Z+21, r7	; 0x15
     432:	64 8a       	std	Z+20, r6	; 0x14
	left.next = &sharpLeft;
     434:	d3 01       	movw	r26, r6
     436:	55 96       	adiw	r26, 0x15	; 21
     438:	5c 92       	st	X, r5
     43a:	4e 92       	st	-X, r4
     43c:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
     43e:	f2 01       	movw	r30, r4
     440:	15 8a       	std	Z+21, r1	; 0x15
     442:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	90 93 2b 03 	sts	0x032B, r25
     44c:	80 93 2a 03 	sts	0x032A, r24
	delta_C.next = &delta_V;
     450:	e2 56       	subi	r30, 0x62	; 98
     452:	f1 09       	sbc	r31, r1
     454:	f8 8b       	std	Y+16, r31	; 0x10
     456:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     458:	17 86       	std	Z+15, r1	; 0x0f
     45a:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     45c:	30 92 29 03 	sts	0x0329, r3
     460:	20 92 28 03 	sts	0x0328, r2
	steering.next = NULL;
     464:	d1 01       	movw	r26, r2
     466:	1f 96       	adiw	r26, 0x0f	; 15
     468:	1c 92       	st	X, r1
     46a:	1e 92       	st	-X, r1
     46c:	1e 97       	sbiw	r26, 0x0e	; 14
	
	
	
	//RULE 9 "if C is centre AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     46e:	a2 58       	subi	r26, 0x82	; 130
     470:	bf 4f       	sbci	r27, 0xFF	; 255
     472:	73 01       	movw	r14, r6
     474:	ea e0       	ldi	r30, 0x0A	; 10
     476:	ee 0e       	add	r14, r30
     478:	f1 1c       	adc	r15, r1
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	fc 92       	st	X, r15
     47e:	ee 92       	st	-X, r14
	then9.next = NULL;
     480:	13 96       	adiw	r26, 0x03	; 3
     482:	1c 92       	st	X, r1
     484:	1e 92       	st	-X, r1
     486:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     488:	9e 01       	movw	r18, r28
     48a:	29 5d       	subi	r18, 0xD9	; 217
     48c:	3e 4f       	sbci	r19, 0xFE	; 254
     48e:	3e 01       	movw	r6, r28
     490:	f9 e9       	ldi	r31, 0x99	; 153
     492:	6f 0e       	add	r6, r31
     494:	71 1c       	adc	r7, r1
     496:	f9 01       	movw	r30, r18
     498:	71 82       	std	Z+1, r7	; 0x01
     49a:	60 82       	st	Z, r6
	if92.next = NULL;
     49c:	13 82       	std	Z+3, r1	; 0x03
     49e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if91;
	if91.value = &centre.value;
     4a0:	86 5d       	subi	r24, 0xD6	; 214
     4a2:	9e 4f       	sbci	r25, 0xFE	; 254
     4a4:	8e 01       	movw	r16, r28
     4a6:	0f 5c       	subi	r16, 0xCF	; 207
     4a8:	1f 4f       	sbci	r17, 0xFF	; 255
     4aa:	fc 01       	movw	r30, r24
     4ac:	11 83       	std	Z+1, r17	; 0x01
     4ae:	00 83       	st	Z, r16
	if91.next = &if92;
     4b0:	33 83       	std	Z+3, r19	; 0x03
     4b2:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     4b4:	34 96       	adiw	r30, 0x04	; 4
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
	rule9.then_side = &then9;
     4ba:	b3 83       	std	Z+3, r27	; 0x03
     4bc:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = NULL;
     4be:	15 82       	std	Z+5, r1	; 0x05
     4c0:	14 82       	std	Z+4, r1	; 0x04

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
     4c2:	22 5f       	subi	r18, 0xF2	; 242
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	4a e0       	ldi	r20, 0x0A	; 10
     4c8:	84 0e       	add	r8, r20
     4ca:	91 1c       	adc	r9, r1
     4cc:	d9 01       	movw	r26, r18
     4ce:	11 96       	adiw	r26, 0x01	; 1
     4d0:	9c 92       	st	X, r9
     4d2:	8e 92       	st	-X, r8
	then8.next = NULL;
     4d4:	13 96       	adiw	r26, 0x03	; 3
     4d6:	1c 92       	st	X, r1
     4d8:	1e 92       	st	-X, r1
     4da:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if82;
	if82.value = &inPlus.value;
     4dc:	be 01       	movw	r22, r28
     4de:	67 5c       	subi	r22, 0xC7	; 199
     4e0:	7e 4f       	sbci	r23, 0xFE	; 254
     4e2:	db 01       	movw	r26, r22
     4e4:	11 96       	adiw	r26, 0x01	; 1
     4e6:	7c 92       	st	X, r7
     4e8:	6e 92       	st	-X, r6
	if82.next = NULL;
     4ea:	13 96       	adiw	r26, 0x03	; 3
     4ec:	1c 92       	st	X, r1
     4ee:	1e 92       	st	-X, r1
     4f0:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if81;
	if81.value = &leftSide.value;
     4f2:	ae 01       	movw	r20, r28
     4f4:	43 5c       	subi	r20, 0xC3	; 195
     4f6:	5e 4f       	sbci	r21, 0xFE	; 254
     4f8:	84 5e       	subi	r24, 0xE4	; 228
     4fa:	91 09       	sbc	r25, r1
     4fc:	da 01       	movw	r26, r20
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	9c 93       	st	X, r25
     502:	8e 93       	st	-X, r24
	if81.next = &if82;
     504:	13 96       	adiw	r26, 0x03	; 3
     506:	7c 93       	st	X, r23
     508:	6e 93       	st	-X, r22
     50a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule8;
	rule8.if_side = &if81;
     50c:	14 96       	adiw	r26, 0x04	; 4
     50e:	11 96       	adiw	r26, 0x01	; 1
     510:	5c 93       	st	X, r21
     512:	4e 93       	st	-X, r20
	rule8.then_side = &then8;
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	3c 93       	st	X, r19
     518:	2e 93       	st	-X, r18
     51a:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     51c:	15 96       	adiw	r26, 0x05	; 5
     51e:	fc 93       	st	X, r31
     520:	ee 93       	st	-X, r30
     522:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
     524:	46 5f       	subi	r20, 0xF6	; 246
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	ea e0       	ldi	r30, 0x0A	; 10
     52a:	ae 0e       	add	r10, r30
     52c:	b1 1c       	adc	r11, r1
     52e:	fa 01       	movw	r30, r20
     530:	b1 82       	std	Z+1, r11	; 0x01
     532:	a0 82       	st	Z, r10
	then7.next = NULL;
     534:	13 82       	std	Z+3, r1	; 0x03
     536:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if72;
	if72.value = &inNyll.value;
     538:	5e 01       	movw	r10, r28
     53a:	f5 eb       	ldi	r31, 0xB5	; 181
     53c:	af 1a       	sub	r10, r31
     53e:	fe ef       	ldi	r31, 0xFE	; 254
     540:	bf 0a       	sbc	r11, r31
     542:	22 5b       	subi	r18, 0xB2	; 178
     544:	31 09       	sbc	r19, r1
     546:	f5 01       	movw	r30, r10
     548:	31 83       	std	Z+1, r19	; 0x01
     54a:	20 83       	st	Z, r18
	if72.next = NULL;
     54c:	13 82       	std	Z+3, r1	; 0x03
     54e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if71;
	if71.value = &leftSide.value;
     550:	6a 5e       	subi	r22, 0xEA	; 234
     552:	7f 4f       	sbci	r23, 0xFF	; 255
     554:	fb 01       	movw	r30, r22
     556:	91 83       	std	Z+1, r25	; 0x01
     558:	80 83       	st	Z, r24
	if71.next = &if72;
     55a:	b3 82       	std	Z+3, r11	; 0x03
     55c:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule7;
	rule7.if_side = &if71;
     55e:	34 96       	adiw	r30, 0x04	; 4
     560:	71 83       	std	Z+1, r23	; 0x01
     562:	60 83       	st	Z, r22
	rule7.then_side = &then7;
     564:	53 83       	std	Z+3, r21	; 0x03
     566:	42 83       	std	Z+2, r20	; 0x02
	rule7.next = &rule8;
     568:	b5 83       	std	Z+5, r27	; 0x05
     56a:	a4 83       	std	Z+4, r26	; 0x04
	
	
	//RULE 6 "if C is positive AND V is minus then servo is straight"
	struct rule_element_type then6;
	then6.value = &straight.value;
     56c:	4a e0       	ldi	r20, 0x0A	; 10
     56e:	c4 0e       	add	r12, r20
     570:	d1 1c       	adc	r13, r1
     572:	c7 5a       	subi	r28, 0xA7	; 167
     574:	de 4f       	sbci	r29, 0xFE	; 254
     576:	d9 82       	std	Y+1, r13	; 0x01
     578:	c8 82       	st	Y, r12
     57a:	c9 55       	subi	r28, 0x59	; 89
     57c:	d1 40       	sbci	r29, 0x01	; 1
	then6.next = NULL;
     57e:	c5 5a       	subi	r28, 0xA5	; 165
     580:	de 4f       	sbci	r29, 0xFE	; 254
     582:	19 82       	std	Y+1, r1	; 0x01
     584:	18 82       	st	Y, r1
     586:	cb 55       	subi	r28, 0x5B	; 91
     588:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if62;
	if62.value = &inMinus.value;
     58a:	62 5f       	subi	r22, 0xF2	; 242
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	5e 01       	movw	r10, r28
     590:	5d e6       	ldi	r21, 0x6D	; 109
     592:	a5 0e       	add	r10, r21
     594:	b1 1c       	adc	r11, r1
     596:	db 01       	movw	r26, r22
     598:	11 96       	adiw	r26, 0x01	; 1
     59a:	bc 92       	st	X, r11
     59c:	ae 92       	st	-X, r10
	if62.next = NULL;
     59e:	13 96       	adiw	r26, 0x03	; 3
     5a0:	1c 92       	st	X, r1
     5a2:	1e 92       	st	-X, r1
     5a4:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &leftSide.value;
     5a6:	ae 01       	movw	r20, r28
     5a8:	4f 59       	subi	r20, 0x9F	; 159
     5aa:	5e 4f       	sbci	r21, 0xFE	; 254
     5ac:	da 01       	movw	r26, r20
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	9c 93       	st	X, r25
     5b2:	8e 93       	st	-X, r24
	if61.next = &if62;
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	7c 93       	st	X, r23
     5b8:	6e 93       	st	-X, r22
     5ba:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule6;
	rule6.if_side = &if61;
     5bc:	82 5e       	subi	r24, 0xE2	; 226
     5be:	9e 4f       	sbci	r25, 0xFE	; 254
     5c0:	dc 01       	movw	r26, r24
     5c2:	11 96       	adiw	r26, 0x01	; 1
     5c4:	5c 93       	st	X, r21
     5c6:	4e 93       	st	-X, r20
	rule6.then_side = &then6;
     5c8:	49 e5       	ldi	r20, 0x59	; 89
     5ca:	51 e0       	ldi	r21, 0x01	; 1
     5cc:	4c 0f       	add	r20, r28
     5ce:	5d 1f       	adc	r21, r29
     5d0:	13 96       	adiw	r26, 0x03	; 3
     5d2:	5c 93       	st	X, r21
     5d4:	4e 93       	st	-X, r20
     5d6:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     5d8:	15 96       	adiw	r26, 0x05	; 5
     5da:	fc 93       	st	X, r31
     5dc:	ee 93       	st	-X, r30
     5de:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
     5e0:	16 96       	adiw	r26, 0x06	; 6
     5e2:	5a e0       	ldi	r21, 0x0A	; 10
     5e4:	45 0e       	add	r4, r21
     5e6:	51 1c       	adc	r5, r1
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	5c 92       	st	X, r5
     5ec:	4e 92       	st	-X, r4
	then5.next = NULL;
     5ee:	13 96       	adiw	r26, 0x03	; 3
     5f0:	1c 92       	st	X, r1
     5f2:	1e 92       	st	-X, r1
     5f4:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
     5f6:	2e 01       	movw	r4, r28
     5f8:	e1 e9       	ldi	r30, 0x91	; 145
     5fa:	4e 1a       	sub	r4, r30
     5fc:	ee ef       	ldi	r30, 0xFE	; 254
     5fe:	5e 0a       	sbc	r5, r30
     600:	f2 01       	movw	r30, r4
     602:	31 83       	std	Z+1, r19	; 0x01
     604:	20 83       	st	Z, r18
	if52.next = NULL;
     606:	13 82       	std	Z+3, r1	; 0x03
     608:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &rightSide.value;
     60a:	6a 5e       	subi	r22, 0xEA	; 234
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	ae 01       	movw	r20, r28
     610:	45 5e       	subi	r20, 0xE5	; 229
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	fb 01       	movw	r30, r22
     616:	51 83       	std	Z+1, r21	; 0x01
     618:	40 83       	st	Z, r20
	if51.next = &if52;
     61a:	53 82       	std	Z+3, r5	; 0x03
     61c:	42 82       	std	Z+2, r4	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     61e:	34 96       	adiw	r30, 0x04	; 4
     620:	71 83       	std	Z+1, r23	; 0x01
     622:	60 83       	st	Z, r22
	rule5.then_side = &then5;
     624:	b3 83       	std	Z+3, r27	; 0x03
     626:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     628:	95 83       	std	Z+5, r25	; 0x05
     62a:	84 83       	std	Z+4, r24	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
     62c:	66 5f       	subi	r22, 0xF6	; 246
     62e:	7f 4f       	sbci	r23, 0xFF	; 255
     630:	db 01       	movw	r26, r22
     632:	11 96       	adiw	r26, 0x01	; 1
     634:	dc 92       	st	X, r13
     636:	ce 92       	st	-X, r12
	then4.next = NULL;
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	1c 92       	st	X, r1
     63c:	1e 92       	st	-X, r1
     63e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
     640:	4c 96       	adiw	r24, 0x1c	; 28
     642:	dc 01       	movw	r26, r24
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	3c 93       	st	X, r19
     648:	2e 93       	st	-X, r18
	if42.next = NULL;
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	1c 92       	st	X, r1
     64e:	1e 92       	st	-X, r1
     650:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &centre.value;
     652:	2e 5f       	subi	r18, 0xFE	; 254
     654:	3e 4f       	sbci	r19, 0xFE	; 254
     656:	d9 01       	movw	r26, r18
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	1c 93       	st	X, r17
     65c:	0e 93       	st	-X, r16
	if41.next = &if42;
     65e:	13 96       	adiw	r26, 0x03	; 3
     660:	9c 93       	st	X, r25
     662:	8e 93       	st	-X, r24
     664:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     666:	08 96       	adiw	r24, 0x08	; 8
     668:	dc 01       	movw	r26, r24
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	3c 93       	st	X, r19
     66e:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     670:	13 96       	adiw	r26, 0x03	; 3
     672:	7c 93       	st	X, r23
     674:	6e 93       	st	-X, r22
     676:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     678:	15 96       	adiw	r26, 0x05	; 5
     67a:	fc 93       	st	X, r31
     67c:	ee 93       	st	-X, r30
     67e:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &straight.value;
     680:	6e 5e       	subi	r22, 0xEE	; 238
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	fb 01       	movw	r30, r22
     686:	d1 82       	std	Z+1, r13	; 0x01
     688:	c0 82       	st	Z, r12
	then3.next = NULL;
     68a:	13 82       	std	Z+3, r1	; 0x03
     68c:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inPlus.value;
     68e:	1a 96       	adiw	r26, 0x0a	; 10
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	7c 92       	st	X, r7
     694:	6e 92       	st	-X, r6
	if32.next = NULL;
     696:	13 96       	adiw	r26, 0x03	; 3
     698:	1c 92       	st	X, r1
     69a:	1e 92       	st	-X, r1
     69c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &rightSide.value;
     69e:	2e 5e       	subi	r18, 0xEE	; 238
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	f9 01       	movw	r30, r18
     6a4:	51 83       	std	Z+1, r21	; 0x01
     6a6:	40 83       	st	Z, r20
	if31.next = &if32;
     6a8:	b3 83       	std	Z+3, r27	; 0x03
     6aa:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     6ac:	18 96       	adiw	r26, 0x08	; 8
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	3c 93       	st	X, r19
     6b2:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
     6b4:	13 96       	adiw	r26, 0x03	; 3
     6b6:	7c 93       	st	X, r23
     6b8:	6e 93       	st	-X, r22
     6ba:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     6bc:	15 96       	adiw	r26, 0x05	; 5
     6be:	9c 93       	st	X, r25
     6c0:	8e 93       	st	-X, r24
     6c2:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
     6c4:	6e 5e       	subi	r22, 0xEE	; 238
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	fb 01       	movw	r30, r22
     6ca:	f1 82       	std	Z+1, r15	; 0x01
     6cc:	e0 82       	st	Z, r14
	then2.next = NULL;
     6ce:	13 82       	std	Z+3, r1	; 0x03
     6d0:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
     6d2:	4c 96       	adiw	r24, 0x1c	; 28
     6d4:	fc 01       	movw	r30, r24
     6d6:	b1 82       	std	Z+1, r11	; 0x01
     6d8:	a0 82       	st	Z, r10
	if22.next = NULL;
     6da:	13 82       	std	Z+3, r1	; 0x03
     6dc:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &rightSide.value;
     6de:	2e 5e       	subi	r18, 0xEE	; 238
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	f9 01       	movw	r30, r18
     6e4:	51 83       	std	Z+1, r21	; 0x01
     6e6:	40 83       	st	Z, r20
	if21.next = &if22;
     6e8:	93 83       	std	Z+3, r25	; 0x03
     6ea:	82 83       	std	Z+2, r24	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     6ec:	08 96       	adiw	r24, 0x08	; 8
     6ee:	fc 01       	movw	r30, r24
     6f0:	31 83       	std	Z+1, r19	; 0x01
     6f2:	20 83       	st	Z, r18
	rule2.then_side = &then2;
     6f4:	73 83       	std	Z+3, r23	; 0x03
     6f6:	62 83       	std	Z+2, r22	; 0x02
	rule2.next = &rule3;
     6f8:	b5 83       	std	Z+5, r27	; 0x05
     6fa:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
     6fc:	58 96       	adiw	r26, 0x18	; 24
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	9c 92       	st	X, r9
     702:	8e 92       	st	-X, r8
	then1.next = NULL;
     704:	13 96       	adiw	r26, 0x03	; 3
     706:	1c 92       	st	X, r1
     708:	1e 92       	st	-X, r1
     70a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &inMinus.value;
     70c:	44 56       	subi	r20, 0x64	; 100
     70e:	5e 4f       	sbci	r21, 0xFE	; 254
     710:	fa 01       	movw	r30, r20
     712:	b1 82       	std	Z+1, r11	; 0x01
     714:	a0 82       	st	Z, r10
	if12.next = NULL;
     716:	13 82       	std	Z+3, r1	; 0x03
     718:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &centre.value;
     71a:	2e 5e       	subi	r18, 0xEE	; 238
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	f9 01       	movw	r30, r18
     720:	11 83       	std	Z+1, r17	; 0x01
     722:	00 83       	st	Z, r16
	if11.next = &if12;
     724:	53 83       	std	Z+3, r21	; 0x03
     726:	42 83       	std	Z+2, r20	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     728:	34 96       	adiw	r30, 0x04	; 4
     72a:	31 83       	std	Z+1, r19	; 0x01
     72c:	20 83       	st	Z, r18
	rule1.then_side = &then1;
     72e:	b3 83       	std	Z+3, r27	; 0x03
     730:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     732:	95 83       	std	Z+5, r25	; 0x05
     734:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
     736:	f0 93 2d 03 	sts	0x032D, r31
     73a:	e0 93 2c 03 	sts	0x032C, r30
	
	
	// the methods performing the FLC
	fuzzification();
     73e:	24 d5       	rcall	.+2632   	; 0x1188 <fuzzification>
	rule_evaluation();
     740:	4a d5       	rcall	.+2708   	; 0x11d6 <rule_evaluation>
	defuzzification();
     742:	8f d5       	rcall	.+2846   	; 0x1262 <defuzzification>
	if (steering.value < MAXLEFT)
     744:	d1 01       	movw	r26, r2
     746:	1a 96       	adiw	r26, 0x0a	; 10
     748:	8d 91       	ld	r24, X+
     74a:	9c 91       	ld	r25, X
     74c:	1b 97       	sbiw	r26, 0x0b	; 11
     74e:	86 3e       	cpi	r24, 0xE6	; 230
     750:	b7 e0       	ldi	r27, 0x07	; 7
     752:	9b 07       	cpc	r25, r27
     754:	2c f4       	brge	.+10     	; 0x760 <doFuzzy+0x614>
	{
		setServo(MAXLEFT);
     756:	86 ee       	ldi	r24, 0xE6	; 230
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <setServo>
     75e:	0b c0       	rjmp	.+22     	; 0x776 <doFuzzy+0x62a>
	}
	else if (steering.value >MAXRIGHT)
     760:	85 3e       	cpi	r24, 0xE5	; 229
     762:	ec e0       	ldi	r30, 0x0C	; 12
     764:	9e 07       	cpc	r25, r30
     766:	2c f0       	brlt	.+10     	; 0x772 <doFuzzy+0x626>
	{
		setServo(MAXRIGHT);
     768:	84 ee       	ldi	r24, 0xE4	; 228
     76a:	9c e0       	ldi	r25, 0x0C	; 12
     76c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <setServo>
     770:	02 c0       	rjmp	.+4      	; 0x776 <doFuzzy+0x62a>
	}
	else
	{
		setServo(steering.value);
     772:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <setServo>
	}
}
     776:	cc 53       	subi	r28, 0x3C	; 60
     778:	de 4f       	sbci	r29, 0xFE	; 254
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	6f 90       	pop	r6
     7a0:	5f 90       	pop	r5
     7a2:	4f 90       	pop	r4
     7a4:	3f 90       	pop	r3
     7a6:	2f 90       	pop	r2
     7a8:	08 95       	ret

000007aa <FLC_steering>:
int FLC_steering(int c, int v)
{
    
    
    
	if ((c == 1) & (v == 81))        // right curvature, turn right
     7aa:	31 e0       	ldi	r19, 0x01	; 1
     7ac:	61 35       	cpi	r22, 0x51	; 81
     7ae:	71 05       	cpc	r23, r1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <FLC_steering+0xa>
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	91 05       	cpc	r25, r1
     7ba:	09 f0       	breq	.+2      	; 0x7be <FLC_steering+0x14>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	22 23       	and	r18, r18
     7c0:	39 f0       	breq	.+14     	; 0x7d0 <FLC_steering+0x26>
     7c2:	33 23       	and	r19, r19
     7c4:	29 f0       	breq	.+10     	; 0x7d0 <FLC_steering+0x26>
	{
		setServo(MAXRIGHT);
     7c6:	84 ee       	ldi	r24, 0xE4	; 228
     7c8:	9c e0       	ldi	r25, 0x0C	; 12
     7ca:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <setServo>
     7ce:	0f c0       	rjmp	.+30     	; 0x7ee <FLC_steering+0x44>
	}
	else if ((c == 2) & (v == 81))       // left curvature, turn left
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	91 05       	cpc	r25, r1
     7d6:	09 f0       	breq	.+2      	; 0x7da <FLC_steering+0x30>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	22 23       	and	r18, r18
     7dc:	39 f0       	breq	.+14     	; 0x7ec <FLC_steering+0x42>
     7de:	33 23       	and	r19, r19
     7e0:	29 f0       	breq	.+10     	; 0x7ec <FLC_steering+0x42>
	{
		setServo(MAXLEFT);
     7e2:	86 ee       	ldi	r24, 0xE6	; 230
     7e4:	97 e0       	ldi	r25, 0x07	; 7
     7e6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <setServo>
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <FLC_steering+0x44>
	}
	else                                   // straight road, do fuzzy
	{
		doFuzzy(c,v);
     7ec:	af dc       	rcall	.-1698   	; 0x14c <doFuzzy>
	}
	
	
	return 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	08 95       	ret

000007f4 <doFuzzy2>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void doFuzzy2(int currentOCR1A, int midSonicRange)
{
     7f4:	2f 92       	push	r2
     7f6:	3f 92       	push	r3
     7f8:	4f 92       	push	r4
     7fa:	5f 92       	push	r5
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	c4 53       	subi	r28, 0x34	; 52
     81e:	d2 40       	sbci	r29, 0x02	; 2
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
// DECLARATION OF DISTANCE INPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type distance; strcpy(distance.name, "distance");
     82a:	29 e0       	ldi	r18, 0x09	; 9
     82c:	eb e6       	ldi	r30, 0x6B	; 107
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	de 01       	movw	r26, r28
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	2a 95       	dec	r18
     83a:	e1 f7       	brne	.-8      	; 0x834 <doFuzzy2+0x40>
struct io_type speed; strcpy(speed.name, "speed");
     83c:	26 e0       	ldi	r18, 0x06	; 6
     83e:	e4 e7       	ldi	r30, 0x74	; 116
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	de 01       	movw	r26, r28
     844:	51 96       	adiw	r26, 0x11	; 17
     846:	01 90       	ld	r0, Z+
     848:	0d 92       	st	X+, r0
     84a:	2a 95       	dec	r18
     84c:	e1 f7       	brne	.-8      	; 0x846 <doFuzzy2+0x52>

// Variable assigned its reference value
if (currentOCR1A<MIN_SPEED) {
     84e:	84 3b       	cpi	r24, 0xB4	; 180
     850:	2a e0       	ldi	r18, 0x0A	; 10
     852:	92 07       	cpc	r25, r18
     854:	2c f4       	brge	.+10     	; 0x860 <doFuzzy2+0x6c>
speed.value = MIN_SPEED;
     856:	84 eb       	ldi	r24, 0xB4	; 180
     858:	9a e0       	ldi	r25, 0x0A	; 10
     85a:	9c 8f       	std	Y+28, r25	; 0x1c
     85c:	8b 8f       	std	Y+27, r24	; 0x1b
     85e:	0b c0       	rjmp	.+22     	; 0x876 <doFuzzy2+0x82>
}
else if (currentOCR1A>MAX_SPEED)
     860:	85 35       	cpi	r24, 0x55	; 85
     862:	4b e0       	ldi	r20, 0x0B	; 11
     864:	94 07       	cpc	r25, r20
     866:	2c f0       	brlt	.+10     	; 0x872 <doFuzzy2+0x7e>
{
speed.value = MAX_SPEED;
     868:	84 e5       	ldi	r24, 0x54	; 84
     86a:	9b e0       	ldi	r25, 0x0B	; 11
     86c:	9c 8f       	std	Y+28, r25	; 0x1c
     86e:	8b 8f       	std	Y+27, r24	; 0x1b
     870:	02 c0       	rjmp	.+4      	; 0x876 <doFuzzy2+0x82>
}
else
{
speed.value = currentOCR1A;
     872:	9c 8f       	std	Y+28, r25	; 0x1c
     874:	8b 8f       	std	Y+27, r24	; 0x1b
}

// Variable assigned its reference value
if(midSonicRange < MIN_DISTANCE)
     876:	77 23       	and	r23, r23
     878:	1c f4       	brge	.+6      	; 0x880 <doFuzzy2+0x8c>
{
distance.value = MIN_DISTANCE;
     87a:	1c 86       	std	Y+12, r1	; 0x0c
     87c:	1b 86       	std	Y+11, r1	; 0x0b
     87e:	0a c0       	rjmp	.+20     	; 0x894 <doFuzzy2+0xa0>
}
else if (midSonicRange > MAX_DISTANCE)
     880:	6b 3f       	cpi	r22, 0xFB	; 251
     882:	71 05       	cpc	r23, r1
     884:	2c f0       	brlt	.+10     	; 0x890 <doFuzzy2+0x9c>
{
distance.value = MAX_DISTANCE;
     886:	8a ef       	ldi	r24, 0xFA	; 250
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9c 87       	std	Y+12, r25	; 0x0c
     88c:	8b 87       	std	Y+11, r24	; 0x0b
     88e:	02 c0       	rjmp	.+4      	; 0x894 <doFuzzy2+0xa0>
}
else
{
distance.value = midSonicRange;
     890:	7c 87       	std	Y+12, r23	; 0x0c
     892:	6b 87       	std	Y+11, r22	; 0x0b
}


// Set MFs
struct mf_type stopDist;
MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 20);
     894:	6e 01       	movw	r12, r28
     896:	51 e2       	ldi	r21, 0x21	; 33
     898:	c5 0e       	add	r12, r21
     89a:	d1 1c       	adc	r13, r1
     89c:	0f 2e       	mov	r0, r31
     89e:	f4 e1       	ldi	r31, 0x14	; 20
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f1 2c       	mov	r15, r1
     8a4:	f0 2d       	mov	r31, r0
     8a6:	0c e0       	ldi	r16, 0x0C	; 12
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	4f ef       	ldi	r20, 0xFF	; 255
     8b0:	5f ef       	ldi	r21, 0xFF	; 255
     8b2:	6a e7       	ldi	r22, 0x7A	; 122
     8b4:	71 e0       	ldi	r23, 0x01	; 1
     8b6:	c6 01       	movw	r24, r12
     8b8:	9a d5       	rcall	.+2868   	; 0x13ee <MATLAB_MF>
struct mf_type oneM;
MATLAB_MF(&oneM, "oneM", 18, 60, 60, 95);
     8ba:	3e 01       	movw	r6, r28
     8bc:	67 e3       	ldi	r22, 0x37	; 55
     8be:	66 0e       	add	r6, r22
     8c0:	71 1c       	adc	r7, r1
     8c2:	0f 2e       	mov	r0, r31
     8c4:	ff e5       	ldi	r31, 0x5F	; 95
     8c6:	ef 2e       	mov	r14, r31
     8c8:	f1 2c       	mov	r15, r1
     8ca:	f0 2d       	mov	r31, r0
     8cc:	0c e3       	ldi	r16, 0x3C	; 60
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	2c e3       	ldi	r18, 0x3C	; 60
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	42 e1       	ldi	r20, 0x12	; 18
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	63 e8       	ldi	r22, 0x83	; 131
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	c3 01       	movw	r24, r6
     8de:	87 d5       	rcall	.+2830   	; 0x13ee <MATLAB_MF>
struct mf_type twoM;
MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     8e0:	0f 2e       	mov	r0, r31
     8e2:	ff ea       	ldi	r31, 0xAF	; 175
     8e4:	ef 2e       	mov	r14, r31
     8e6:	f1 2c       	mov	r15, r1
     8e8:	f0 2d       	mov	r31, r0
     8ea:	0d e7       	ldi	r16, 0x7D	; 125
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	2d e7       	ldi	r18, 0x7D	; 125
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	4b e4       	ldi	r20, 0x4B	; 75
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	68 e8       	ldi	r22, 0x88	; 136
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	ce 01       	movw	r24, r28
     8fc:	83 5b       	subi	r24, 0xB3	; 179
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	76 d5       	rcall	.+2796   	; 0x13ee <MATLAB_MF>
struct mf_type threeM;
MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     902:	0f 2e       	mov	r0, r31
     904:	fb ef       	ldi	r31, 0xFB	; 251
     906:	ef 2e       	mov	r14, r31
     908:	f1 2c       	mov	r15, r1
     90a:	f0 2d       	mov	r31, r0
     90c:	0a ef       	ldi	r16, 0xFA	; 250
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	2a ef       	ldi	r18, 0xFA	; 250
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	46 e9       	ldi	r20, 0x96	; 150
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	6d e8       	ldi	r22, 0x8D	; 141
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	ce 01       	movw	r24, r28
     91e:	8d 59       	subi	r24, 0x9D	; 157
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	65 d5       	rcall	.+2762   	; 0x13ee <MATLAB_MF>

// Linked list for MFs
distance.membership_functions = &stopDist;
     924:	de 86       	std	Y+14, r13	; 0x0e
     926:	cd 86       	std	Y+13, r12	; 0x0d
stopDist.next = &oneM;
     928:	7e aa       	std	Y+54, r7	; 0x36
     92a:	6d aa       	std	Y+53, r6	; 0x35
oneM.next = &twoM;
     92c:	8d e4       	ldi	r24, 0x4D	; 77
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	8c 0f       	add	r24, r28
     932:	9d 1f       	adc	r25, r29
     934:	2d 96       	adiw	r28, 0x0d	; 13
     936:	9f af       	std	Y+63, r25	; 0x3f
     938:	8e af       	std	Y+62, r24	; 0x3e
     93a:	2d 97       	sbiw	r28, 0x0d	; 13
twoM.next = &threeM;
     93c:	a3 e6       	ldi	r26, 0x63	; 99
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	ac 0f       	add	r26, r28
     942:	bd 1f       	adc	r27, r29
     944:	a3 96       	adiw	r28, 0x23	; 35
     946:	bf af       	std	Y+63, r27	; 0x3f
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	a3 97       	sbiw	r28, 0x23	; 35
threeM.next = NULL;
     94c:	e9 96       	adiw	r28, 0x39	; 57
     94e:	1f ae       	std	Y+63, r1	; 0x3f
     950:	1e ae       	std	Y+62, r1	; 0x3e
     952:	e9 97       	sbiw	r28, 0x39	; 57
//////////////////////////////////////////////////////////////////////////////


// Set MFs
struct mf_type still;
MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     954:	0f 2e       	mov	r0, r31
     956:	ee 24       	eor	r14, r14
     958:	ea 94       	dec	r14
     95a:	fa e0       	ldi	r31, 0x0A	; 10
     95c:	ff 2e       	mov	r15, r31
     95e:	f0 2d       	mov	r31, r0
     960:	04 eb       	ldi	r16, 0xB4	; 180
     962:	1a e0       	ldi	r17, 0x0A	; 10
     964:	24 eb       	ldi	r18, 0xB4	; 180
     966:	3a e0       	ldi	r19, 0x0A	; 10
     968:	43 eb       	ldi	r20, 0xB3	; 179
     96a:	5a e0       	ldi	r21, 0x0A	; 10
     96c:	64 e9       	ldi	r22, 0x94	; 148
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	8c 96       	adiw	r24, 0x2c	; 44
     972:	3d d5       	rcall	.+2682   	; 0x13ee <MATLAB_MF>
struct mf_type low;
MATLAB_MF(&low, "low", 2825, 2830, 2830, 2835);
     974:	5e 01       	movw	r10, r28
     976:	bf e8       	ldi	r27, 0x8F	; 143
     978:	ab 0e       	add	r10, r27
     97a:	b1 1c       	adc	r11, r1
     97c:	0f 2e       	mov	r0, r31
     97e:	f3 e1       	ldi	r31, 0x13	; 19
     980:	ef 2e       	mov	r14, r31
     982:	fb e0       	ldi	r31, 0x0B	; 11
     984:	ff 2e       	mov	r15, r31
     986:	f0 2d       	mov	r31, r0
     988:	0e e0       	ldi	r16, 0x0E	; 14
     98a:	1b e0       	ldi	r17, 0x0B	; 11
     98c:	2e e0       	ldi	r18, 0x0E	; 14
     98e:	3b e0       	ldi	r19, 0x0B	; 11
     990:	49 e0       	ldi	r20, 0x09	; 9
     992:	5b e0       	ldi	r21, 0x0B	; 11
     994:	68 eb       	ldi	r22, 0xB8	; 184
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	c5 01       	movw	r24, r10
     99a:	29 d5       	rcall	.+2642   	; 0x13ee <MATLAB_MF>
struct mf_type cruising;
MATLAB_MF(&cruising, "cruising", 2830, 2835, 2835, 2840);
     99c:	0f 2e       	mov	r0, r31
     99e:	f8 e1       	ldi	r31, 0x18	; 24
     9a0:	ef 2e       	mov	r14, r31
     9a2:	fb e0       	ldi	r31, 0x0B	; 11
     9a4:	ff 2e       	mov	r15, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	03 e1       	ldi	r16, 0x13	; 19
     9aa:	1b e0       	ldi	r17, 0x0B	; 11
     9ac:	23 e1       	ldi	r18, 0x13	; 19
     9ae:	3b e0       	ldi	r19, 0x0B	; 11
     9b0:	4e e0       	ldi	r20, 0x0E	; 14
     9b2:	5b e0       	ldi	r21, 0x0B	; 11
     9b4:	6a e9       	ldi	r22, 0x9A	; 154
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	ce 01       	movw	r24, r28
     9ba:	8b 55       	subi	r24, 0x5B	; 91
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	17 d5       	rcall	.+2606   	; 0x13ee <MATLAB_MF>
struct mf_type medium;
MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     9c0:	2e 01       	movw	r4, r28
     9c2:	eb eb       	ldi	r30, 0xBB	; 187
     9c4:	4e 0e       	add	r4, r30
     9c6:	51 1c       	adc	r5, r1
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f2 e2       	ldi	r31, 0x22	; 34
     9cc:	ef 2e       	mov	r14, r31
     9ce:	fb e0       	ldi	r31, 0x0B	; 11
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	08 e1       	ldi	r16, 0x18	; 24
     9d6:	1b e0       	ldi	r17, 0x0B	; 11
     9d8:	28 e1       	ldi	r18, 0x18	; 24
     9da:	3b e0       	ldi	r19, 0x0B	; 11
     9dc:	4e e0       	ldi	r20, 0x0E	; 14
     9de:	5b e0       	ldi	r21, 0x0B	; 11
     9e0:	63 ea       	ldi	r22, 0xA3	; 163
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	c2 01       	movw	r24, r4
     9e6:	03 d5       	rcall	.+2566   	; 0x13ee <MATLAB_MF>
struct mf_type high;
MATLAB_MF(&high, "high", 2835, 2845, 28545, 2855);
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f7 e2       	ldi	r31, 0x27	; 39
     9ec:	ef 2e       	mov	r14, r31
     9ee:	fb e0       	ldi	r31, 0x0B	; 11
     9f0:	ff 2e       	mov	r15, r31
     9f2:	f0 2d       	mov	r31, r0
     9f4:	01 e8       	ldi	r16, 0x81	; 129
     9f6:	1f e6       	ldi	r17, 0x6F	; 111
     9f8:	2d e1       	ldi	r18, 0x1D	; 29
     9fa:	3b e0       	ldi	r19, 0x0B	; 11
     9fc:	43 e1       	ldi	r20, 0x13	; 19
     9fe:	5b e0       	ldi	r21, 0x0B	; 11
     a00:	6a ea       	ldi	r22, 0xAA	; 170
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	ce 01       	movw	r24, r28
     a06:	8f 52       	subi	r24, 0x2F	; 47
     a08:	9f 4f       	sbci	r25, 0xFF	; 255
     a0a:	f1 d4       	rcall	.+2530   	; 0x13ee <MATLAB_MF>

// Linked list for MFs
speed.membership_functions = &still;
     a0c:	49 e7       	ldi	r20, 0x79	; 121
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	4c 0f       	add	r20, r28
     a12:	5d 1f       	adc	r21, r29
     a14:	5e 8f       	std	Y+30, r21	; 0x1e
     a16:	4d 8f       	std	Y+29, r20	; 0x1d
still.next = &low;
     a18:	c3 57       	subi	r28, 0x73	; 115
     a1a:	df 4f       	sbci	r29, 0xFF	; 255
     a1c:	b9 82       	std	Y+1, r11	; 0x01
     a1e:	a8 82       	st	Y, r10
     a20:	cd 58       	subi	r28, 0x8D	; 141
     a22:	d0 40       	sbci	r29, 0x00	; 0
low.next = &cruising;
     a24:	e5 ea       	ldi	r30, 0xA5	; 165
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	ec 0f       	add	r30, r28
     a2a:	fd 1f       	adc	r31, r29
     a2c:	d5 01       	movw	r26, r10
     a2e:	55 96       	adiw	r26, 0x15	; 21
     a30:	fc 93       	st	X, r31
     a32:	ee 93       	st	-X, r30
     a34:	54 97       	sbiw	r26, 0x14	; 20
cruising.next = &medium;
     a36:	c7 54       	subi	r28, 0x47	; 71
     a38:	df 4f       	sbci	r29, 0xFF	; 255
     a3a:	59 82       	std	Y+1, r5	; 0x01
     a3c:	48 82       	st	Y, r4
     a3e:	c9 5b       	subi	r28, 0xB9	; 185
     a40:	d0 40       	sbci	r29, 0x00	; 0
medium.next = &high;
     a42:	e1 ed       	ldi	r30, 0xD1	; 209
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	ec 0f       	add	r30, r28
     a48:	fd 1f       	adc	r31, r29
     a4a:	d2 01       	movw	r26, r4
     a4c:	55 96       	adiw	r26, 0x15	; 21
     a4e:	fc 93       	st	X, r31
     a50:	ee 93       	st	-X, r30
     a52:	54 97       	sbiw	r26, 0x14	; 20
high.next = NULL;
     a54:	cb 51       	subi	r28, 0x1B	; 27
     a56:	df 4f       	sbci	r29, 0xFF	; 255
     a58:	19 82       	std	Y+1, r1	; 0x01
     a5a:	18 82       	st	Y, r1
     a5c:	c5 5e       	subi	r28, 0xE5	; 229
     a5e:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF PWM OUTPUT VARIABLE
//////////////////////////////////////////////////////////////////////////////

struct io_type pwm; strcpy(pwm.name, "pwm");
     a60:	80 e7       	ldi	r24, 0x70	; 112
     a62:	97 e7       	ldi	r25, 0x77	; 119
     a64:	ad e6       	ldi	r26, 0x6D	; 109
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	c9 51       	subi	r28, 0x19	; 25
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	88 83       	st	Y, r24
     a6e:	99 83       	std	Y+1, r25	; 0x01
     a70:	aa 83       	std	Y+2, r26	; 0x02
     a72:	bb 83       	std	Y+3, r27	; 0x03
     a74:	c7 5e       	subi	r28, 0xE7	; 231
     a76:	d0 40       	sbci	r29, 0x00	; 0

// Set MFs
struct mf_type noSpeed;
MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     a78:	4e 01       	movw	r8, r28
     a7a:	f7 ef       	ldi	r31, 0xF7	; 247
     a7c:	8f 0e       	add	r8, r31
     a7e:	91 1c       	adc	r9, r1
     a80:	0f 2e       	mov	r0, r31
     a82:	ee 24       	eor	r14, r14
     a84:	ea 94       	dec	r14
     a86:	fa e0       	ldi	r31, 0x0A	; 10
     a88:	ff 2e       	mov	r15, r31
     a8a:	f0 2d       	mov	r31, r0
     a8c:	04 eb       	ldi	r16, 0xB4	; 180
     a8e:	1a e0       	ldi	r17, 0x0A	; 10
     a90:	24 eb       	ldi	r18, 0xB4	; 180
     a92:	3a e0       	ldi	r19, 0x0A	; 10
     a94:	43 eb       	ldi	r20, 0xB3	; 179
     a96:	5a e0       	ldi	r21, 0x0A	; 10
     a98:	6f ea       	ldi	r22, 0xAF	; 175
     a9a:	71 e0       	ldi	r23, 0x01	; 1
     a9c:	c4 01       	movw	r24, r8
     a9e:	a7 d4       	rcall	.+2382   	; 0x13ee <MATLAB_MF>
struct mf_type slow;
MATLAB_MF(&slow, "slow", 2825, 2830, 2830, 2835);
     aa0:	6e 01       	movw	r12, r28
     aa2:	23 ef       	ldi	r18, 0xF3	; 243
     aa4:	c2 1a       	sub	r12, r18
     aa6:	2e ef       	ldi	r18, 0xFE	; 254
     aa8:	d2 0a       	sbc	r13, r18
     aaa:	0f 2e       	mov	r0, r31
     aac:	f3 e1       	ldi	r31, 0x13	; 19
     aae:	ef 2e       	mov	r14, r31
     ab0:	fb e0       	ldi	r31, 0x0B	; 11
     ab2:	ff 2e       	mov	r15, r31
     ab4:	f0 2d       	mov	r31, r0
     ab6:	0e e0       	ldi	r16, 0x0E	; 14
     ab8:	1b e0       	ldi	r17, 0x0B	; 11
     aba:	2e e0       	ldi	r18, 0x0E	; 14
     abc:	3b e0       	ldi	r19, 0x0B	; 11
     abe:	49 e0       	ldi	r20, 0x09	; 9
     ac0:	5b e0       	ldi	r21, 0x0B	; 11
     ac2:	67 eb       	ldi	r22, 0xB7	; 183
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	c6 01       	movw	r24, r12
     ac8:	92 d4       	rcall	.+2340   	; 0x13ee <MATLAB_MF>
struct mf_type cruise;
MATLAB_MF(&cruise, "cruise", 2830, 2835, 2835, 2840);
     aca:	1e 01       	movw	r2, r28
     acc:	4d ed       	ldi	r20, 0xDD	; 221
     ace:	24 1a       	sub	r2, r20
     ad0:	4e ef       	ldi	r20, 0xFE	; 254
     ad2:	34 0a       	sbc	r3, r20
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f8 e1       	ldi	r31, 0x18	; 24
     ad8:	ef 2e       	mov	r14, r31
     ada:	fb e0       	ldi	r31, 0x0B	; 11
     adc:	ff 2e       	mov	r15, r31
     ade:	f0 2d       	mov	r31, r0
     ae0:	03 e1       	ldi	r16, 0x13	; 19
     ae2:	1b e0       	ldi	r17, 0x0B	; 11
     ae4:	23 e1       	ldi	r18, 0x13	; 19
     ae6:	3b e0       	ldi	r19, 0x0B	; 11
     ae8:	4e e0       	ldi	r20, 0x0E	; 14
     aea:	5b e0       	ldi	r21, 0x0B	; 11
     aec:	6c eb       	ldi	r22, 0xBC	; 188
     aee:	71 e0       	ldi	r23, 0x01	; 1
     af0:	c1 01       	movw	r24, r2
     af2:	7d d4       	rcall	.+2298   	; 0x13ee <MATLAB_MF>
struct mf_type medHigh;
MATLAB_MF(&medHigh, "medHigh", 2830, 2840, 2840, 2850);
     af4:	0f 2e       	mov	r0, r31
     af6:	f2 e2       	ldi	r31, 0x22	; 34
     af8:	ef 2e       	mov	r14, r31
     afa:	fb e0       	ldi	r31, 0x0B	; 11
     afc:	ff 2e       	mov	r15, r31
     afe:	f0 2d       	mov	r31, r0
     b00:	08 e1       	ldi	r16, 0x18	; 24
     b02:	1b e0       	ldi	r17, 0x0B	; 11
     b04:	28 e1       	ldi	r18, 0x18	; 24
     b06:	3b e0       	ldi	r19, 0x0B	; 11
     b08:	4e e0       	ldi	r20, 0x0E	; 14
     b0a:	5b e0       	ldi	r21, 0x0B	; 11
     b0c:	63 ec       	ldi	r22, 0xC3	; 195
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	ce 01       	movw	r24, r28
     b12:	87 5c       	subi	r24, 0xC7	; 199
     b14:	9e 4f       	sbci	r25, 0xFE	; 254
     b16:	6b d4       	rcall	.+2262   	; 0x13ee <MATLAB_MF>
struct mf_type max;
MATLAB_MF(&max, "max", 2835, 2845, 28545, 2855);
     b18:	0f 2e       	mov	r0, r31
     b1a:	f7 e2       	ldi	r31, 0x27	; 39
     b1c:	ef 2e       	mov	r14, r31
     b1e:	fb e0       	ldi	r31, 0x0B	; 11
     b20:	ff 2e       	mov	r15, r31
     b22:	f0 2d       	mov	r31, r0
     b24:	01 e8       	ldi	r16, 0x81	; 129
     b26:	1f e6       	ldi	r17, 0x6F	; 111
     b28:	2d e1       	ldi	r18, 0x1D	; 29
     b2a:	3b e0       	ldi	r19, 0x0B	; 11
     b2c:	43 e1       	ldi	r20, 0x13	; 19
     b2e:	5b e0       	ldi	r21, 0x0B	; 11
     b30:	6b ec       	ldi	r22, 0xCB	; 203
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	ce 01       	movw	r24, r28
     b36:	81 5b       	subi	r24, 0xB1	; 177
     b38:	9e 4f       	sbci	r25, 0xFE	; 254
     b3a:	59 d4       	rcall	.+2226   	; 0x13ee <MATLAB_MF>

// Linked list for MFs
pwm.membership_functions = &noSpeed;
     b3c:	cd 50       	subi	r28, 0x0D	; 13
     b3e:	df 4f       	sbci	r29, 0xFF	; 255
     b40:	99 82       	std	Y+1, r9	; 0x01
     b42:	88 82       	st	Y, r8
     b44:	c3 5f       	subi	r28, 0xF3	; 243
     b46:	d0 40       	sbci	r29, 0x00	; 0
noSpeed.next = &slow;
     b48:	d4 01       	movw	r26, r8
     b4a:	55 96       	adiw	r26, 0x15	; 21
     b4c:	dc 92       	st	X, r13
     b4e:	ce 92       	st	-X, r12
     b50:	54 97       	sbiw	r26, 0x14	; 20
slow.next = &cruise;
     b52:	f6 01       	movw	r30, r12
     b54:	35 8a       	std	Z+21, r3	; 0x15
     b56:	24 8a       	std	Z+20, r2	; 0x14
cruise.next = &medHigh;
     b58:	e9 e3       	ldi	r30, 0x39	; 57
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	ec 0f       	add	r30, r28
     b5e:	fd 1f       	adc	r31, r29
     b60:	d1 01       	movw	r26, r2
     b62:	55 96       	adiw	r26, 0x15	; 21
     b64:	fc 93       	st	X, r31
     b66:	ee 93       	st	-X, r30
     b68:	54 97       	sbiw	r26, 0x14	; 20
medHigh.next = &max;
     b6a:	4f e4       	ldi	r20, 0x4F	; 79
     b6c:	51 e0       	ldi	r21, 0x01	; 1
     b6e:	4c 0f       	add	r20, r28
     b70:	5d 1f       	adc	r21, r29
     b72:	c3 5b       	subi	r28, 0xB3	; 179
     b74:	de 4f       	sbci	r29, 0xFE	; 254
     b76:	59 83       	std	Y+1, r21	; 0x01
     b78:	48 83       	st	Y, r20
     b7a:	cd 54       	subi	r28, 0x4D	; 77
     b7c:	d1 40       	sbci	r29, 0x01	; 1
max.next = NULL;
     b7e:	cd 59       	subi	r28, 0x9D	; 157
     b80:	de 4f       	sbci	r29, 0xFE	; 254
     b82:	19 82       	std	Y+1, r1	; 0x01
     b84:	18 82       	st	Y, r1
     b86:	c3 56       	subi	r28, 0x63	; 99
     b88:	d1 40       	sbci	r29, 0x01	; 1


// SETTING I/O LINKED LISTS
//////////////////////////////////////////////////////////////////////////////

System_Inputs = &distance;
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 2b 03 	sts	0x032B, r25
     b92:	80 93 2a 03 	sts	0x032A, r24
distance.next = &speed;
     b96:	40 96       	adiw	r24, 0x10	; 16
     b98:	98 8b       	std	Y+16, r25	; 0x10
     b9a:	8f 87       	std	Y+15, r24	; 0x0f
speed.next = NULL;
     b9c:	18 a2       	std	Y+32, r1	; 0x20
     b9e:	1f 8e       	std	Y+31, r1	; 0x1f

System_Outputs = &pwm;
     ba0:	87 ee       	ldi	r24, 0xE7	; 231
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	8c 0f       	add	r24, r28
     ba6:	9d 1f       	adc	r25, r29
     ba8:	90 93 29 03 	sts	0x0329, r25
     bac:	80 93 28 03 	sts	0x0328, r24
pwm.next = NULL;
     bb0:	cb 50       	subi	r28, 0x0B	; 11
     bb2:	df 4f       	sbci	r29, 0xFF	; 255
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	18 82       	st	Y, r1
     bb8:	c5 5f       	subi	r28, 0xF5	; 245
     bba:	d0 40       	sbci	r29, 0x00	; 0


// DECLARATION OF RULES AND LISTS
//////////////////////////////////////////////////////////////////////////////

struct rule_type rule1; Rule_Base = &rule1;
     bbc:	9e 01       	movw	r18, r28
     bbe:	2b 59       	subi	r18, 0x9B	; 155
     bc0:	3e 4f       	sbci	r19, 0xFE	; 254
     bc2:	30 93 2d 03 	sts	0x032D, r19
     bc6:	20 93 2c 03 	sts	0x032C, r18
struct rule_type rule2; rule1.next = &rule2;
     bca:	8c 57       	subi	r24, 0x7C	; 124
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	d9 01       	movw	r26, r18
     bd0:	15 96       	adiw	r26, 0x05	; 5
     bd2:	9c 93       	st	X, r25
     bd4:	8e 93       	st	-X, r24
     bd6:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule3; rule2.next = &rule3;
     bd8:	1c 96       	adiw	r26, 0x0c	; 12
     bda:	fc 01       	movw	r30, r24
     bdc:	b5 83       	std	Z+5, r27	; 0x05
     bde:	a4 83       	std	Z+4, r26	; 0x04
struct rule_type rule4; rule3.next = &rule4;
     be0:	47 e7       	ldi	r20, 0x77	; 119
     be2:	51 e0       	ldi	r21, 0x01	; 1
     be4:	4c 0f       	add	r20, r28
     be6:	5d 1f       	adc	r21, r29
     be8:	15 96       	adiw	r26, 0x05	; 5
     bea:	5c 93       	st	X, r21
     bec:	4e 93       	st	-X, r20
     bee:	14 97       	sbiw	r26, 0x04	; 4
struct rule_type rule5; rule4.next = &rule5;
     bf0:	8e 01       	movw	r16, r28
     bf2:	03 58       	subi	r16, 0x83	; 131
     bf4:	1e 4f       	sbci	r17, 0xFE	; 254
     bf6:	c5 58       	subi	r28, 0x85	; 133
     bf8:	de 4f       	sbci	r29, 0xFE	; 254
     bfa:	19 83       	std	Y+1, r17	; 0x01
     bfc:	08 83       	st	Y, r16
     bfe:	cb 57       	subi	r28, 0x7B	; 123
     c00:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule6; rule5.next = &rule6;
     c02:	7e 01       	movw	r14, r28
     c04:	5d e7       	ldi	r21, 0x7D	; 125
     c06:	e5 1a       	sub	r14, r21
     c08:	5e ef       	ldi	r21, 0xFE	; 254
     c0a:	f5 0a       	sbc	r15, r21
     c0c:	f8 01       	movw	r30, r16
     c0e:	f5 82       	std	Z+5, r15	; 0x05
     c10:	e4 82       	std	Z+4, r14	; 0x04
struct rule_type rule7; rule6.next = &rule7;
     c12:	49 e8       	ldi	r20, 0x89	; 137
     c14:	51 e0       	ldi	r21, 0x01	; 1
     c16:	4c 0f       	add	r20, r28
     c18:	5d 1f       	adc	r21, r29
     c1a:	f7 01       	movw	r30, r14
     c1c:	55 83       	std	Z+5, r21	; 0x05
     c1e:	44 83       	std	Z+4, r20	; 0x04
struct rule_type rule8; rule7.next = &rule8;
     c20:	ef e8       	ldi	r30, 0x8F	; 143
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	ec 0f       	add	r30, r28
     c26:	fd 1f       	adc	r31, r29
     c28:	c3 57       	subi	r28, 0x73	; 115
     c2a:	de 4f       	sbci	r29, 0xFE	; 254
     c2c:	f9 83       	std	Y+1, r31	; 0x01
     c2e:	e8 83       	st	Y, r30
     c30:	cd 58       	subi	r28, 0x8D	; 141
     c32:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule9; rule8.next = &rule9;
     c34:	45 e9       	ldi	r20, 0x95	; 149
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	4c 0f       	add	r20, r28
     c3a:	5d 1f       	adc	r21, r29
     c3c:	cd 56       	subi	r28, 0x6D	; 109
     c3e:	de 4f       	sbci	r29, 0xFE	; 254
     c40:	59 83       	std	Y+1, r21	; 0x01
     c42:	48 83       	st	Y, r20
     c44:	c3 59       	subi	r28, 0x93	; 147
     c46:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule10; rule9.next = &rule10;
     c48:	eb e9       	ldi	r30, 0x9B	; 155
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	ec 0f       	add	r30, r28
     c4e:	fd 1f       	adc	r31, r29
     c50:	c7 56       	subi	r28, 0x67	; 103
     c52:	de 4f       	sbci	r29, 0xFE	; 254
     c54:	f9 83       	std	Y+1, r31	; 0x01
     c56:	e8 83       	st	Y, r30
     c58:	c9 59       	subi	r28, 0x99	; 153
     c5a:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule11; rule10.next = &rule11;
     c5c:	41 ea       	ldi	r20, 0xA1	; 161
     c5e:	51 e0       	ldi	r21, 0x01	; 1
     c60:	4c 0f       	add	r20, r28
     c62:	5d 1f       	adc	r21, r29
     c64:	c1 56       	subi	r28, 0x61	; 97
     c66:	de 4f       	sbci	r29, 0xFE	; 254
     c68:	59 83       	std	Y+1, r21	; 0x01
     c6a:	48 83       	st	Y, r20
     c6c:	cf 59       	subi	r28, 0x9F	; 159
     c6e:	d1 40       	sbci	r29, 0x01	; 1
struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     c70:	e7 ea       	ldi	r30, 0xA7	; 167
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	ec 0f       	add	r30, r28
     c76:	fd 1f       	adc	r31, r29
     c78:	cb 55       	subi	r28, 0x5B	; 91
     c7a:	de 4f       	sbci	r29, 0xFE	; 254
     c7c:	f9 83       	std	Y+1, r31	; 0x01
     c7e:	e8 83       	st	Y, r30
     c80:	c5 5a       	subi	r28, 0xA5	; 165
     c82:	d1 40       	sbci	r29, 0x01	; 1
     c84:	c5 55       	subi	r28, 0x55	; 85
     c86:	de 4f       	sbci	r29, 0xFE	; 254
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	18 82       	st	Y, r1
     c8c:	cb 5a       	subi	r28, 0xAB	; 171
     c8e:	d1 40       	sbci	r29, 0x01	; 1
// RULE SETUP
//////////////////////////////////////////////////////////////////////////////

// if distance is stopDist then pwm is noSpeed
struct rule_element_type if11, then1;
rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c90:	be 01       	movw	r22, r28
     c92:	63 55       	subi	r22, 0x53	; 83
     c94:	7e 4f       	sbci	r23, 0xFE	; 254
     c96:	f9 01       	movw	r30, r18
     c98:	71 83       	std	Z+1, r23	; 0x01
     c9a:	60 83       	st	Z, r22
     c9c:	fb 01       	movw	r30, r22
     c9e:	13 82       	std	Z+3, r1	; 0x03
     ca0:	12 82       	std	Z+2, r1	; 0x02
     ca2:	40 5f       	subi	r20, 0xF0	; 240
     ca4:	5f 4f       	sbci	r21, 0xFF	; 255
     ca6:	f9 01       	movw	r30, r18
     ca8:	53 83       	std	Z+3, r21	; 0x03
     caa:	42 83       	std	Z+2, r20	; 0x02
     cac:	fa 01       	movw	r30, r20
     cae:	13 82       	std	Z+3, r1	; 0x03
     cb0:	12 82       	std	Z+2, r1	; 0x02
if11.value = &stopDist.value; then1.value = &noSpeed.value;
     cb2:	2a 53       	subi	r18, 0x3A	; 58
     cb4:	31 40       	sbci	r19, 0x01	; 1
     cb6:	fb 01       	movw	r30, r22
     cb8:	31 83       	std	Z+1, r19	; 0x01
     cba:	20 83       	st	Z, r18
     cbc:	fa e0       	ldi	r31, 0x0A	; 10
     cbe:	8f 0e       	add	r8, r31
     cc0:	91 1c       	adc	r9, r1
     cc2:	fa 01       	movw	r30, r20
     cc4:	91 82       	std	Z+1, r9	; 0x01
     cc6:	80 82       	st	Z, r8

// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
struct rule_element_type if21, if22, then2;
rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     cc8:	68 5f       	subi	r22, 0xF8	; 248
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	fc 01       	movw	r30, r24
     cce:	71 83       	std	Z+1, r23	; 0x01
     cd0:	60 83       	st	Z, r22
     cd2:	48 5f       	subi	r20, 0xF8	; 248
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	fb 01       	movw	r30, r22
     cd8:	53 83       	std	Z+3, r21	; 0x03
     cda:	42 83       	std	Z+2, r20	; 0x02
     cdc:	fa 01       	movw	r30, r20
     cde:	13 82       	std	Z+3, r1	; 0x03
     ce0:	12 82       	std	Z+2, r1	; 0x02
     ce2:	2e 56       	subi	r18, 0x6E	; 110
     ce4:	3e 4f       	sbci	r19, 0xFE	; 254
     ce6:	fc 01       	movw	r30, r24
     ce8:	33 83       	std	Z+3, r19	; 0x03
     cea:	22 83       	std	Z+2, r18	; 0x02
     cec:	f9 01       	movw	r30, r18
     cee:	13 82       	std	Z+3, r1	; 0x03
     cf0:	12 82       	std	Z+2, r1	; 0x02
if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     cf2:	fa e0       	ldi	r31, 0x0A	; 10
     cf4:	af 0e       	add	r10, r31
     cf6:	b1 1c       	adc	r11, r1
     cf8:	fb 01       	movw	r30, r22
     cfa:	b1 82       	std	Z+1, r11	; 0x01
     cfc:	a0 82       	st	Z, r10
     cfe:	fa e0       	ldi	r31, 0x0A	; 10
     d00:	6f 0e       	add	r6, r31
     d02:	71 1c       	adc	r7, r1
     d04:	fa 01       	movw	r30, r20
     d06:	71 82       	std	Z+1, r7	; 0x01
     d08:	60 82       	st	Z, r6
     d0a:	fa e0       	ldi	r31, 0x0A	; 10
     d0c:	cf 0e       	add	r12, r31
     d0e:	d1 1c       	adc	r13, r1
     d10:	f9 01       	movw	r30, r18
     d12:	d1 82       	std	Z+1, r13	; 0x01
     d14:	c0 82       	st	Z, r12

// if speed is medium and distance is oneM then speed is cruise
struct rule_element_type if31, if32, then3;
rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     d16:	48 5f       	subi	r20, 0xF8	; 248
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	5c 93       	st	X, r21
     d1e:	4e 93       	st	-X, r20
     d20:	28 5f       	subi	r18, 0xF8	; 248
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	fa 01       	movw	r30, r20
     d26:	33 83       	std	Z+3, r19	; 0x03
     d28:	22 83       	std	Z+2, r18	; 0x02
     d2a:	f9 01       	movw	r30, r18
     d2c:	13 82       	std	Z+3, r1	; 0x03
     d2e:	12 82       	std	Z+2, r1	; 0x02
     d30:	82 5a       	subi	r24, 0xA2	; 162
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	13 96       	adiw	r26, 0x03	; 3
     d36:	9c 93       	st	X, r25
     d38:	8e 93       	st	-X, r24
     d3a:	12 97       	sbiw	r26, 0x02	; 2
     d3c:	dc 01       	movw	r26, r24
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	1c 92       	st	X, r1
     d42:	1e 92       	st	-X, r1
     d44:	12 97       	sbiw	r26, 0x02	; 2
if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     d46:	ba e0       	ldi	r27, 0x0A	; 10
     d48:	4b 0e       	add	r4, r27
     d4a:	51 1c       	adc	r5, r1
     d4c:	fa 01       	movw	r30, r20
     d4e:	51 82       	std	Z+1, r5	; 0x01
     d50:	40 82       	st	Z, r4
     d52:	d9 01       	movw	r26, r18
     d54:	6d 92       	st	X+, r6
     d56:	7c 92       	st	X, r7
     d58:	ba e0       	ldi	r27, 0x0A	; 10
     d5a:	2b 0e       	add	r2, r27
     d5c:	31 1c       	adc	r3, r1
     d5e:	fc 01       	movw	r30, r24
     d60:	31 82       	std	Z+1, r3	; 0x01
     d62:	20 82       	st	Z, r2

// if speed is high and distance is oneM then speed is cruise
struct rule_element_type if41, if42, then4;
rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     d64:	28 5f       	subi	r18, 0xF8	; 248
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	c9 58       	subi	r28, 0x89	; 137
     d6a:	de 4f       	sbci	r29, 0xFE	; 254
     d6c:	39 83       	std	Y+1, r19	; 0x01
     d6e:	28 83       	st	Y, r18
     d70:	c7 57       	subi	r28, 0x77	; 119
     d72:	d1 40       	sbci	r29, 0x01	; 1
     d74:	08 96       	adiw	r24, 0x08	; 8
     d76:	d9 01       	movw	r26, r18
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	9c 93       	st	X, r25
     d7c:	8e 93       	st	-X, r24
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	fc 01       	movw	r30, r24
     d82:	13 82       	std	Z+3, r1	; 0x03
     d84:	12 82       	std	Z+2, r1	; 0x02
     d86:	18 96       	adiw	r26, 0x08	; 8
     d88:	c7 58       	subi	r28, 0x87	; 135
     d8a:	de 4f       	sbci	r29, 0xFE	; 254
     d8c:	b9 83       	std	Y+1, r27	; 0x01
     d8e:	a8 83       	st	Y, r26
     d90:	c9 57       	subi	r28, 0x79	; 121
     d92:	d1 40       	sbci	r29, 0x01	; 1
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	1c 92       	st	X, r1
     d98:	1e 92       	st	-X, r1
     d9a:	12 97       	sbiw	r26, 0x02	; 2
if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d9c:	41 ed       	ldi	r20, 0xD1	; 209
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	4c 0f       	add	r20, r28
     da2:	5d 1f       	adc	r21, r29
     da4:	46 5f       	subi	r20, 0xF6	; 246
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	f9 01       	movw	r30, r18
     daa:	51 83       	std	Z+1, r21	; 0x01
     dac:	40 83       	st	Z, r20
     dae:	fc 01       	movw	r30, r24
     db0:	71 82       	std	Z+1, r7	; 0x01
     db2:	60 82       	st	Z, r6
     db4:	2d 92       	st	X+, r2
     db6:	3c 92       	st	X, r3

// if speed is still and distance is oneM then speed is slow
struct rule_element_type if51, if52, then5;
rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     db8:	08 96       	adiw	r24, 0x08	; 8
     dba:	d8 01       	movw	r26, r16
     dbc:	8d 93       	st	X+, r24
     dbe:	9c 93       	st	X, r25
     dc0:	68 5d       	subi	r22, 0xD8	; 216
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	fc 01       	movw	r30, r24
     dc6:	73 83       	std	Z+3, r23	; 0x03
     dc8:	62 83       	std	Z+2, r22	; 0x02
     dca:	db 01       	movw	r26, r22
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	1c 92       	st	X, r1
     dd0:	1e 92       	st	-X, r1
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	38 96       	adiw	r30, 0x08	; 8
     dd6:	d8 01       	movw	r26, r16
     dd8:	13 96       	adiw	r26, 0x03	; 3
     dda:	fc 93       	st	X, r31
     ddc:	ee 93       	st	-X, r30
     dde:	12 97       	sbiw	r26, 0x02	; 2
     de0:	13 82       	std	Z+3, r1	; 0x03
     de2:	12 82       	std	Z+2, r1	; 0x02
if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     de4:	29 e7       	ldi	r18, 0x79	; 121
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	2c 0f       	add	r18, r28
     dea:	3d 1f       	adc	r19, r29
     dec:	26 5f       	subi	r18, 0xF6	; 246
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	dc 01       	movw	r26, r24
     df2:	2d 93       	st	X+, r18
     df4:	3c 93       	st	X, r19
     df6:	db 01       	movw	r26, r22
     df8:	6d 92       	st	X+, r6
     dfa:	7c 92       	st	X, r7
     dfc:	d1 82       	std	Z+1, r13	; 0x01
     dfe:	c0 82       	st	Z, r12

// if speed is cruising and distance is oneM then speed is slow
struct rule_element_type if61, if62, then6;
rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     e00:	0c 96       	adiw	r24, 0x0c	; 12
     e02:	f7 01       	movw	r30, r14
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	04 59       	subi	r16, 0x94	; 148
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	dc 01       	movw	r26, r24
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	1c 93       	st	X, r17
     e12:	0e 93       	st	-X, r16
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	f8 01       	movw	r30, r16
     e18:	13 82       	std	Z+3, r1	; 0x03
     e1a:	12 82       	std	Z+2, r1	; 0x02
     e1c:	34 96       	adiw	r30, 0x04	; 4
     e1e:	d7 01       	movw	r26, r14
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	fc 93       	st	X, r31
     e24:	ee 93       	st	-X, r30
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	13 82       	std	Z+3, r1	; 0x03
     e2a:	12 82       	std	Z+2, r1	; 0x02
if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     e2c:	65 ea       	ldi	r22, 0xA5	; 165
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	6c 0f       	add	r22, r28
     e32:	7d 1f       	adc	r23, r29
     e34:	66 5f       	subi	r22, 0xF6	; 246
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	dc 01       	movw	r26, r24
     e3a:	6d 93       	st	X+, r22
     e3c:	7c 93       	st	X, r23
     e3e:	d8 01       	movw	r26, r16
     e40:	6d 92       	st	X+, r6
     e42:	7c 92       	st	X, r7
     e44:	d1 82       	std	Z+1, r13	; 0x01
     e46:	c0 82       	st	Z, r12

// if speed is low and distance is twoM then speed is cruise
struct rule_element_type if71, if72, then7;
rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     e48:	0c 96       	adiw	r24, 0x0c	; 12
     e4a:	c7 57       	subi	r28, 0x77	; 119
     e4c:	de 4f       	sbci	r29, 0xFE	; 254
     e4e:	99 83       	std	Y+1, r25	; 0x01
     e50:	88 83       	st	Y, r24
     e52:	c9 58       	subi	r28, 0x89	; 137
     e54:	d1 40       	sbci	r29, 0x01	; 1
     e56:	04 5f       	subi	r16, 0xF4	; 244
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	fc 01       	movw	r30, r24
     e5c:	13 83       	std	Z+3, r17	; 0x03
     e5e:	02 83       	std	Z+2, r16	; 0x02
     e60:	d8 01       	movw	r26, r16
     e62:	13 96       	adiw	r26, 0x03	; 3
     e64:	1c 92       	st	X, r1
     e66:	1e 92       	st	-X, r1
     e68:	12 97       	sbiw	r26, 0x02	; 2
     e6a:	38 96       	adiw	r30, 0x08	; 8
     e6c:	c5 57       	subi	r28, 0x75	; 117
     e6e:	de 4f       	sbci	r29, 0xFE	; 254
     e70:	f9 83       	std	Y+1, r31	; 0x01
     e72:	e8 83       	st	Y, r30
     e74:	cb 58       	subi	r28, 0x8B	; 139
     e76:	d1 40       	sbci	r29, 0x01	; 1
     e78:	13 82       	std	Z+3, r1	; 0x03
     e7a:	12 82       	std	Z+2, r1	; 0x02
if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     e7c:	dc 01       	movw	r26, r24
     e7e:	ad 92       	st	X+, r10
     e80:	bc 92       	st	X, r11
     e82:	8d e4       	ldi	r24, 0x4D	; 77
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	8c 0f       	add	r24, r28
     e88:	9d 1f       	adc	r25, r29
     e8a:	0a 96       	adiw	r24, 0x0a	; 10
     e8c:	d8 01       	movw	r26, r16
     e8e:	8d 93       	st	X+, r24
     e90:	9c 93       	st	X, r25
     e92:	31 82       	std	Z+1, r3	; 0x01
     e94:	20 82       	st	Z, r2

// if speed is medium and distance is twoM then speed is medHigh
struct rule_element_type if81, if82, then8;
rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e96:	08 5f       	subi	r16, 0xF8	; 248
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	c1 57       	subi	r28, 0x71	; 113
     e9c:	de 4f       	sbci	r29, 0xFE	; 254
     e9e:	19 83       	std	Y+1, r17	; 0x01
     ea0:	08 83       	st	Y, r16
     ea2:	cf 58       	subi	r28, 0x8F	; 143
     ea4:	d1 40       	sbci	r29, 0x01	; 1
     ea6:	7e 01       	movw	r14, r28
     ea8:	bf ef       	ldi	r27, 0xFF	; 255
     eaa:	eb 1a       	sub	r14, r27
     eac:	bd ef       	ldi	r27, 0xFD	; 253
     eae:	fb 0a       	sbc	r15, r27
     eb0:	f8 01       	movw	r30, r16
     eb2:	f3 82       	std	Z+3, r15	; 0x03
     eb4:	e2 82       	std	Z+2, r14	; 0x02
     eb6:	d7 01       	movw	r26, r14
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	1c 92       	st	X, r1
     ebc:	1e 92       	st	-X, r1
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	14 96       	adiw	r26, 0x04	; 4
     ec2:	cf 56       	subi	r28, 0x6F	; 111
     ec4:	de 4f       	sbci	r29, 0xFE	; 254
     ec6:	b9 83       	std	Y+1, r27	; 0x01
     ec8:	a8 83       	st	Y, r26
     eca:	c1 59       	subi	r28, 0x91	; 145
     ecc:	d1 40       	sbci	r29, 0x01	; 1
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	1c 92       	st	X, r1
     ed2:	1e 92       	st	-X, r1
     ed4:	12 97       	sbiw	r26, 0x02	; 2
if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     ed6:	51 82       	std	Z+1, r5	; 0x01
     ed8:	40 82       	st	Z, r4
     eda:	f7 01       	movw	r30, r14
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	0f 2e       	mov	r0, r31
     ee2:	f9 e3       	ldi	r31, 0x39	; 57
     ee4:	cf 2e       	mov	r12, r31
     ee6:	dd 24       	eor	r13, r13
     ee8:	d3 94       	inc	r13
     eea:	f0 2d       	mov	r31, r0
     eec:	cc 0e       	add	r12, r28
     eee:	dd 1e       	adc	r13, r29
     ef0:	fa e0       	ldi	r31, 0x0A	; 10
     ef2:	cf 0e       	add	r12, r31
     ef4:	d1 1c       	adc	r13, r1
     ef6:	cd 92       	st	X+, r12
     ef8:	dc 92       	st	X, r13

// if speed is high and distance is twoM then speed is medHigh
struct rule_element_type if91, if92, then9;
rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     efa:	7e 01       	movw	r14, r28
     efc:	a7 ef       	ldi	r26, 0xF7	; 247
     efe:	ea 1a       	sub	r14, r26
     f00:	ad ef       	ldi	r26, 0xFD	; 253
     f02:	fa 0a       	sbc	r15, r26
     f04:	cb 56       	subi	r28, 0x6B	; 107
     f06:	de 4f       	sbci	r29, 0xFE	; 254
     f08:	f9 82       	std	Y+1, r15	; 0x01
     f0a:	e8 82       	st	Y, r14
     f0c:	c5 59       	subi	r28, 0x95	; 149
     f0e:	d1 40       	sbci	r29, 0x01	; 1
     f10:	00 5f       	subi	r16, 0xF0	; 240
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	f7 01       	movw	r30, r14
     f16:	13 83       	std	Z+3, r17	; 0x03
     f18:	02 83       	std	Z+2, r16	; 0x02
     f1a:	d8 01       	movw	r26, r16
     f1c:	13 96       	adiw	r26, 0x03	; 3
     f1e:	1c 92       	st	X, r1
     f20:	1e 92       	st	-X, r1
     f22:	12 97       	sbiw	r26, 0x02	; 2
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	c9 56       	subi	r28, 0x69	; 105
     f28:	de 4f       	sbci	r29, 0xFE	; 254
     f2a:	b9 83       	std	Y+1, r27	; 0x01
     f2c:	a8 83       	st	Y, r26
     f2e:	c7 59       	subi	r28, 0x97	; 151
     f30:	d1 40       	sbci	r29, 0x01	; 1
     f32:	13 96       	adiw	r26, 0x03	; 3
     f34:	1c 92       	st	X, r1
     f36:	1e 92       	st	-X, r1
     f38:	12 97       	sbiw	r26, 0x02	; 2
if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     f3a:	51 83       	std	Z+1, r21	; 0x01
     f3c:	40 83       	st	Z, r20
     f3e:	f8 01       	movw	r30, r16
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	cd 92       	st	X+, r12
     f46:	dc 92       	st	X, r13

// if speed is still and distance is twoM then speed is cruise
struct rule_element_type if101, if102, then10;
rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     f48:	08 5f       	subi	r16, 0xF8	; 248
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	c5 56       	subi	r28, 0x65	; 101
     f4e:	de 4f       	sbci	r29, 0xFE	; 254
     f50:	19 83       	std	Y+1, r17	; 0x01
     f52:	08 83       	st	Y, r16
     f54:	cb 59       	subi	r28, 0x9B	; 155
     f56:	d1 40       	sbci	r29, 0x01	; 1
     f58:	42 5c       	subi	r20, 0xC2	; 194
     f5a:	5e 4f       	sbci	r21, 0xFE	; 254
     f5c:	d8 01       	movw	r26, r16
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	5c 93       	st	X, r21
     f62:	4e 93       	st	-X, r20
     f64:	12 97       	sbiw	r26, 0x02	; 2
     f66:	fa 01       	movw	r30, r20
     f68:	13 82       	std	Z+3, r1	; 0x03
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	18 96       	adiw	r26, 0x08	; 8
     f6e:	c3 56       	subi	r28, 0x63	; 99
     f70:	de 4f       	sbci	r29, 0xFE	; 254
     f72:	b9 83       	std	Y+1, r27	; 0x01
     f74:	a8 83       	st	Y, r26
     f76:	cd 59       	subi	r28, 0x9D	; 157
     f78:	d1 40       	sbci	r29, 0x01	; 1
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	1c 92       	st	X, r1
     f7e:	1e 92       	st	-X, r1
     f80:	12 97       	sbiw	r26, 0x02	; 2
if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     f82:	f8 01       	movw	r30, r16
     f84:	31 83       	std	Z+1, r19	; 0x01
     f86:	20 83       	st	Z, r18
     f88:	fa 01       	movw	r30, r20
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	2d 92       	st	X+, r2
     f90:	3c 92       	st	X, r3

// if speed is cruising and distance is twoM then speed is medHigh
struct rule_element_type if111, if112, then11;
rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f92:	48 5f       	subi	r20, 0xF8	; 248
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	cf 55       	subi	r28, 0x5F	; 95
     f98:	de 4f       	sbci	r29, 0xFE	; 254
     f9a:	59 83       	std	Y+1, r21	; 0x01
     f9c:	48 83       	st	Y, r20
     f9e:	c1 5a       	subi	r28, 0xA1	; 161
     fa0:	d1 40       	sbci	r29, 0x01	; 1
     fa2:	2e 55       	subi	r18, 0x5E	; 94
     fa4:	3e 4f       	sbci	r19, 0xFE	; 254
     fa6:	da 01       	movw	r26, r20
     fa8:	13 96       	adiw	r26, 0x03	; 3
     faa:	3c 93       	st	X, r19
     fac:	2e 93       	st	-X, r18
     fae:	12 97       	sbiw	r26, 0x02	; 2
     fb0:	f9 01       	movw	r30, r18
     fb2:	13 82       	std	Z+3, r1	; 0x03
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	18 96       	adiw	r26, 0x08	; 8
     fb8:	cd 55       	subi	r28, 0x5D	; 93
     fba:	de 4f       	sbci	r29, 0xFE	; 254
     fbc:	b9 83       	std	Y+1, r27	; 0x01
     fbe:	a8 83       	st	Y, r26
     fc0:	c3 5a       	subi	r28, 0xA3	; 163
     fc2:	d1 40       	sbci	r29, 0x01	; 1
     fc4:	13 96       	adiw	r26, 0x03	; 3
     fc6:	1c 92       	st	X, r1
     fc8:	1e 92       	st	-X, r1
     fca:	12 97       	sbiw	r26, 0x02	; 2
if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     fcc:	fa 01       	movw	r30, r20
     fce:	71 83       	std	Z+1, r23	; 0x01
     fd0:	60 83       	st	Z, r22
     fd2:	f9 01       	movw	r30, r18
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	dc 92       	st	X, r13
     fdc:	ce 92       	st	-X, r12

// if distance is threeM then speed is max
struct rule_element_type if121, then12;
rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     fde:	14 96       	adiw	r26, 0x04	; 4
     fe0:	c9 55       	subi	r28, 0x59	; 89
     fe2:	de 4f       	sbci	r29, 0xFE	; 254
     fe4:	b9 83       	std	Y+1, r27	; 0x01
     fe6:	a8 83       	st	Y, r26
     fe8:	c7 5a       	subi	r28, 0xA7	; 167
     fea:	d1 40       	sbci	r29, 0x01	; 1
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	1c 92       	st	X, r1
     ff0:	1e 92       	st	-X, r1
     ff2:	12 97       	sbiw	r26, 0x02	; 2
     ff4:	3c 96       	adiw	r30, 0x0c	; 12
     ff6:	c7 55       	subi	r28, 0x57	; 87
     ff8:	de 4f       	sbci	r29, 0xFE	; 254
     ffa:	f9 83       	std	Y+1, r31	; 0x01
     ffc:	e8 83       	st	Y, r30
     ffe:	c9 5a       	subi	r28, 0xA9	; 169
    1000:	d1 40       	sbci	r29, 0x01	; 1
    1002:	13 82       	std	Z+3, r1	; 0x03
    1004:	12 82       	std	Z+2, r1	; 0x02
if121.value = &threeM.value; then12.value = &max.value;
    1006:	83 e6       	ldi	r24, 0x63	; 99
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8c 0f       	add	r24, r28
    100c:	9d 1f       	adc	r25, r29
    100e:	0a 96       	adiw	r24, 0x0a	; 10
    1010:	8d 93       	st	X+, r24
    1012:	9c 93       	st	X, r25
    1014:	8f e4       	ldi	r24, 0x4F	; 79
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	8c 0f       	add	r24, r28
    101a:	9d 1f       	adc	r25, r29
    101c:	0a 96       	adiw	r24, 0x0a	; 10
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24


// EXECUTING FUZZY LOGIC & OUTPUT VALUE
//////////////////////////////////////////////////////////////////////////////

fuzzification();
    1022:	b2 d0       	rcall	.+356    	; 0x1188 <fuzzification>
rule_evaluation();
    1024:	d8 d0       	rcall	.+432    	; 0x11d6 <rule_evaluation>
defuzzification();
    1026:	1d d1       	rcall	.+570    	; 0x1262 <defuzzification>

if (pwm.value > 2845)
    1028:	cf 50       	subi	r28, 0x0F	; 15
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	88 81       	ld	r24, Y
    102e:	99 81       	ldd	r25, Y+1	; 0x01
    1030:	c1 5f       	subi	r28, 0xF1	; 241
    1032:	d0 40       	sbci	r29, 0x00	; 0
    1034:	8e 31       	cpi	r24, 0x1E	; 30
    1036:	fb e0       	ldi	r31, 0x0B	; 11
    1038:	9f 07       	cpc	r25, r31
    103a:	44 f0       	brlt	.+16     	; 0x104c <doFuzzy2+0x858>
{
setESC(2845+adjustment);
    103c:	80 91 0a 02 	lds	r24, 0x020A
    1040:	90 91 0b 02 	lds	r25, 0x020B
    1044:	83 5e       	subi	r24, 0xE3	; 227
    1046:	94 4f       	sbci	r25, 0xF4	; 244
    1048:	ef d5       	rcall	.+3038   	; 0x1c28 <setESC>
    104a:	0f c0       	rjmp	.+30     	; 0x106a <doFuzzy2+0x876>
}
else if (pwm.value < 2750)
    104c:	8e 3b       	cpi	r24, 0xBE	; 190
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	92 07       	cpc	r25, r18
    1052:	24 f4       	brge	.+8      	; 0x105c <doFuzzy2+0x868>
{
setESC(2750);
    1054:	8e eb       	ldi	r24, 0xBE	; 190
    1056:	9a e0       	ldi	r25, 0x0A	; 10
    1058:	e7 d5       	rcall	.+3022   	; 0x1c28 <setESC>
    105a:	07 c0       	rjmp	.+14     	; 0x106a <doFuzzy2+0x876>
}
else
{
setESC(pwm.value+adjustment);
    105c:	20 91 0a 02 	lds	r18, 0x020A
    1060:	30 91 0b 02 	lds	r19, 0x020B
    1064:	82 0f       	add	r24, r18
    1066:	93 1f       	adc	r25, r19
    1068:	df d5       	rcall	.+3006   	; 0x1c28 <setESC>
}



}
    106a:	cc 5c       	subi	r28, 0xCC	; 204
    106c:	dd 4f       	sbci	r29, 0xFD	; 253
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	7f 90       	pop	r7
    1092:	6f 90       	pop	r6
    1094:	5f 90       	pop	r5
    1096:	4f 90       	pop	r4
    1098:	3f 90       	pop	r3
    109a:	2f 90       	pop	r2
    109c:	08 95       	ret

0000109e <FLC_obstacle>:

void FLC_obstacle(int currentOCR1A, int midSonicRange, int v)
{
if(v == 81)
    109e:	41 35       	cpi	r20, 0x51	; 81
    10a0:	51 05       	cpc	r21, r1
    10a2:	39 f4       	brne	.+14     	; 0x10b2 <FLC_obstacle+0x14>
{
adjustment = -5;
    10a4:	2b ef       	ldi	r18, 0xFB	; 251
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	30 93 0b 02 	sts	0x020B, r19
    10ac:	20 93 0a 02 	sts	0x020A, r18
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <FLC_obstacle+0x1c>
}
else
{
adjustment = 0;
    10b2:	10 92 0b 02 	sts	0x020B, r1
    10b6:	10 92 0a 02 	sts	0x020A, r1
}

doFuzzy2(currentOCR1A,midSonicRange);
    10ba:	9c cb       	rjmp	.-2248   	; 0x7f4 <doFuzzy2>
    10bc:	08 95       	ret

000010be <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    10be:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    10c0:	84 85       	ldd	r24, Z+12	; 0x0c
    10c2:	95 85       	ldd	r25, Z+13	; 0x0d
    10c4:	9b 01       	movw	r18, r22
    10c6:	28 1b       	sub	r18, r24
    10c8:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    10ca:	86 85       	ldd	r24, Z+14	; 0x0e
    10cc:	97 85       	ldd	r25, Z+15	; 0x0f
    10ce:	86 1b       	sub	r24, r22
    10d0:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    10d2:	12 16       	cp	r1, r18
    10d4:	13 06       	cpc	r1, r19
    10d6:	f4 f4       	brge	.+60     	; 0x1114 <compute_degree_of_membership+0x56>
    10d8:	18 16       	cp	r1, r24
    10da:	19 06       	cpc	r1, r25
    10dc:	f4 f4       	brge	.+60     	; 0x111a <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    10de:	60 89       	ldd	r22, Z+16	; 0x10
    10e0:	71 89       	ldd	r23, Z+17	; 0x11
    10e2:	a2 89       	ldd	r26, Z+18	; 0x12
    10e4:	b3 89       	ldd	r27, Z+19	; 0x13
    10e6:	8a 9f       	mul	r24, r26
    10e8:	a0 01       	movw	r20, r0
    10ea:	8b 9f       	mul	r24, r27
    10ec:	50 0d       	add	r21, r0
    10ee:	9a 9f       	mul	r25, r26
    10f0:	50 0d       	add	r21, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	26 9f       	mul	r18, r22
    10f6:	c0 01       	movw	r24, r0
    10f8:	27 9f       	mul	r18, r23
    10fa:	90 0d       	add	r25, r0
    10fc:	36 9f       	mul	r19, r22
    10fe:	90 0d       	add	r25, r0
    1100:	11 24       	eor	r1, r1
    1102:	48 17       	cp	r20, r24
    1104:	59 07       	cpc	r21, r25
    1106:	0c f4       	brge	.+2      	; 0x110a <compute_degree_of_membership+0x4c>
    1108:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	91 05       	cpc	r25, r1
    110e:	09 f0       	breq	.+2      	; 0x1112 <compute_degree_of_membership+0x54>
    1110:	3c f4       	brge	.+14     	; 0x1120 <compute_degree_of_membership+0x62>
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <compute_degree_of_membership+0x66>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1124:	93 87       	std	Z+11, r25	; 0x0b
    1126:	82 87       	std	Z+10, r24	; 0x0a
    1128:	08 95       	ret

0000112a <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    1134:	c6 85       	ldd	r28, Z+14	; 0x0e
    1136:	d7 85       	ldd	r29, Z+15	; 0x0f
    1138:	84 85       	ldd	r24, Z+12	; 0x0c
    113a:	95 85       	ldd	r25, Z+13	; 0x0d
    113c:	c8 1b       	sub	r28, r24
    113e:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    1140:	22 85       	ldd	r18, Z+10	; 0x0a
    1142:	33 85       	ldd	r19, Z+11	; 0x0b
    1144:	60 89       	ldd	r22, Z+16	; 0x10
    1146:	71 89       	ldd	r23, Z+17	; 0x11
    1148:	c9 01       	movw	r24, r18
    114a:	0e 94 b9 13 	call	0x2772	; 0x2772 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    114e:	8e 01       	movw	r16, r28
    1150:	06 1b       	sub	r16, r22
    1152:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    1154:	62 89       	ldd	r22, Z+18	; 0x12
    1156:	73 89       	ldd	r23, Z+19	; 0x13
    1158:	c9 01       	movw	r24, r18
    115a:	0e 94 b9 13 	call	0x2772	; 0x2772 <__divmodhi4>
    top = base - run_1 - run_2;
    115e:	06 1b       	sub	r16, r22
    1160:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    1162:	c0 0f       	add	r28, r16
    1164:	d1 1f       	adc	r29, r17
    1166:	2c 9f       	mul	r18, r28
    1168:	c0 01       	movw	r24, r0
    116a:	2d 9f       	mul	r18, r29
    116c:	90 0d       	add	r25, r0
    116e:	3c 9f       	mul	r19, r28
    1170:	90 0d       	add	r25, r0
    1172:	11 24       	eor	r1, r1
    1174:	99 23       	and	r25, r25
    1176:	0c f4       	brge	.+2      	; 0x117a <compute_area_of_trapezoid+0x50>
    1178:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    117a:	95 95       	asr	r25
    117c:	87 95       	ror	r24
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1190:	00 91 2a 03 	lds	r16, 0x032A
    1194:	10 91 2b 03 	lds	r17, 0x032B
    1198:	01 15       	cp	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	b9 f0       	breq	.+46     	; 0x11cc <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    119e:	f8 01       	movw	r30, r16
    11a0:	c4 85       	ldd	r28, Z+12	; 0x0c
    11a2:	d5 85       	ldd	r29, Z+13	; 0x0d
    11a4:	20 97       	sbiw	r28, 0x00	; 0
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <fuzzification+0x38>
            if (mf!=NULL) {
    11a8:	20 97       	sbiw	r28, 0x00	; 0
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    11ac:	f8 01       	movw	r30, r16
    11ae:	62 85       	ldd	r22, Z+10	; 0x0a
    11b0:	73 85       	ldd	r23, Z+11	; 0x0b
    11b2:	ce 01       	movw	r24, r28
    11b4:	84 df       	rcall	.-248    	; 0x10be <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    11b6:	0c 88       	ldd	r0, Y+20	; 0x14
    11b8:	dd 89       	ldd	r29, Y+21	; 0x15
    11ba:	c0 2d       	mov	r28, r0
    11bc:	20 97       	sbiw	r28, 0x00	; 0
    11be:	a1 f7       	brne	.-24     	; 0x11a8 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    11c0:	f8 01       	movw	r30, r16
    11c2:	06 85       	ldd	r16, Z+14	; 0x0e
    11c4:	17 85       	ldd	r17, Z+15	; 0x0f
    11c6:	01 15       	cp	r16, r1
    11c8:	11 05       	cpc	r17, r1
    11ca:	49 f7       	brne	.-46     	; 0x119e <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	08 95       	ret

000011d6 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    11de:	c0 91 2c 03 	lds	r28, 0x032C
    11e2:	d0 91 2d 03 	lds	r29, 0x032D
    11e6:	20 97       	sbiw	r28, 0x00	; 0
    11e8:	b9 f1       	breq	.+110    	; 0x1258 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    11ee:	e8 81       	ld	r30, Y
    11f0:	f9 81       	ldd	r31, Y+1	; 0x01
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	81 f0       	breq	.+32     	; 0x1216 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    11f6:	20 2f       	mov	r18, r16
    11f8:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    11fa:	a0 81       	ld	r26, Z
    11fc:	b1 81       	ldd	r27, Z+1	; 0x01
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	82 17       	cp	r24, r18
    1204:	93 07       	cpc	r25, r19
    1206:	0c f4       	brge	.+2      	; 0x120a <rule_evaluation+0x34>
    1208:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    120a:	02 80       	ldd	r0, Z+2	; 0x02
    120c:	f3 81       	ldd	r31, Z+3	; 0x03
    120e:	e0 2d       	mov	r30, r0
    1210:	30 97       	sbiw	r30, 0x00	; 0
    1212:	99 f7       	brne	.-26     	; 0x11fa <rule_evaluation+0x24>
    1214:	02 c0       	rjmp	.+4      	; 0x121a <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1216:	20 2f       	mov	r18, r16
    1218:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    121a:	ea 81       	ldd	r30, Y+2	; 0x02
    121c:	fb 81       	ldd	r31, Y+3	; 0x03
    121e:	30 97       	sbiw	r30, 0x00	; 0
    1220:	b1 f0       	breq	.+44     	; 0x124e <rule_evaluation+0x78>
    1222:	72 2f       	mov	r23, r18
    1224:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1226:	a0 81       	ld	r26, Z
    1228:	b1 81       	ldd	r27, Z+1	; 0x01
    122a:	8d 91       	ld	r24, X+
    122c:	9c 91       	ld	r25, X
    122e:	11 97       	sbiw	r26, 0x01	; 1
    1230:	57 2f       	mov	r21, r23
    1232:	46 2f       	mov	r20, r22
    1234:	28 17       	cp	r18, r24
    1236:	39 07       	cpc	r19, r25
    1238:	14 f4       	brge	.+4      	; 0x123e <rule_evaluation+0x68>
    123a:	58 2f       	mov	r21, r24
    123c:	49 2f       	mov	r20, r25
    123e:	5c 93       	st	X, r21
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1244:	02 80       	ldd	r0, Z+2	; 0x02
    1246:	f3 81       	ldd	r31, Z+3	; 0x03
    1248:	e0 2d       	mov	r30, r0
    124a:	30 97       	sbiw	r30, 0x00	; 0
    124c:	61 f7       	brne	.-40     	; 0x1226 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    124e:	0c 80       	ldd	r0, Y+4	; 0x04
    1250:	dd 81       	ldd	r29, Y+5	; 0x05
    1252:	c0 2d       	mov	r28, r0
    1254:	20 97       	sbiw	r28, 0x00	; 0
    1256:	59 f6       	brne	.-106    	; 0x11ee <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    1262:	2f 92       	push	r2
    1264:	3f 92       	push	r3
    1266:	4f 92       	push	r4
    1268:	5f 92       	push	r5
    126a:	6f 92       	push	r6
    126c:	7f 92       	push	r7
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 d0       	rcall	.+0      	; 0x1288 <defuzzification+0x26>
    1288:	00 d0       	rcall	.+0      	; 0x128a <defuzzification+0x28>
    128a:	00 d0       	rcall	.+0      	; 0x128c <defuzzification+0x2a>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1290:	80 91 28 03 	lds	r24, 0x0328
    1294:	90 91 29 03 	lds	r25, 0x0329
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	89 2b       	or	r24, r25
    129e:	09 f4       	brne	.+2      	; 0x12a2 <defuzzification+0x40>
    12a0:	8d c0       	rjmp	.+282    	; 0x13bc <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	04 84       	ldd	r0, Z+12	; 0x0c
    12a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    12aa:	e0 2d       	mov	r30, r0
    12ac:	fe 83       	std	Y+6, r31	; 0x06
    12ae:	ed 83       	std	Y+5, r30	; 0x05
    12b0:	ef 2b       	or	r30, r31
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <defuzzification+0x54>
    12b4:	6e c0       	rjmp	.+220    	; 0x1392 <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    12b6:	51 2c       	mov	r5, r1
    12b8:	61 2c       	mov	r6, r1
    12ba:	71 2c       	mov	r7, r1
    12bc:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    12be:	31 2c       	mov	r3, r1
    12c0:	21 2c       	mov	r2, r1
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	2f df       	rcall	.-418    	; 0x112a <compute_area_of_trapezoid>
    12cc:	bc 01       	movw	r22, r24
    12ce:	88 27       	eor	r24, r24
    12d0:	77 fd       	sbrc	r23, 7
    12d2:	80 95       	com	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	0e 94 ca 12 	call	0x2594	; 0x2594 <__floatsisf>
    12da:	6b 01       	movw	r12, r22
    12dc:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    12de:	ed 81       	ldd	r30, Y+5	; 0x05
    12e0:	fe 81       	ldd	r31, Y+6	; 0x06
    12e2:	04 85       	ldd	r16, Z+12	; 0x0c
    12e4:	15 85       	ldd	r17, Z+13	; 0x0d
    12e6:	b8 01       	movw	r22, r16
    12e8:	88 27       	eor	r24, r24
    12ea:	77 fd       	sbrc	r23, 7
    12ec:	80 95       	com	r24
    12ee:	98 2f       	mov	r25, r24
    12f0:	0e 94 ca 12 	call	0x2594	; 0x2594 <__floatsisf>
    12f4:	4b 01       	movw	r8, r22
    12f6:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    12f8:	ed 81       	ldd	r30, Y+5	; 0x05
    12fa:	fe 81       	ldd	r31, Y+6	; 0x06
    12fc:	86 85       	ldd	r24, Z+14	; 0x0e
    12fe:	97 85       	ldd	r25, Z+15	; 0x0f
    1300:	80 1b       	sub	r24, r16
    1302:	91 0b       	sbc	r25, r17
    1304:	bc 01       	movw	r22, r24
    1306:	12 f4       	brpl	.+4      	; 0x130c <defuzzification+0xaa>
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	75 95       	asr	r23
    130e:	67 95       	ror	r22
            centroid = centroid + intermed;
    1310:	88 27       	eor	r24, r24
    1312:	77 fd       	sbrc	r23, 7
    1314:	80 95       	com	r24
    1316:	98 2f       	mov	r25, r24
    1318:	0e 94 ca 12 	call	0x2594	; 0x2594 <__floatsisf>
    131c:	a5 01       	movw	r20, r10
    131e:	94 01       	movw	r18, r8
    1320:	0e 94 cb 11 	call	0x2396	; 0x2396 <__addsf3>
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsf3>
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	63 2d       	mov	r22, r3
    1336:	72 2d       	mov	r23, r2
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	0e 94 cb 11 	call	0x2396	; 0x2396 <__addsf3>
    1340:	36 2e       	mov	r3, r22
    1342:	27 2e       	mov	r2, r23
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1348:	a7 01       	movw	r20, r14
    134a:	96 01       	movw	r18, r12
    134c:	65 2d       	mov	r22, r5
    134e:	76 2d       	mov	r23, r6
    1350:	87 2d       	mov	r24, r7
    1352:	94 2d       	mov	r25, r4
    1354:	0e 94 cb 11 	call	0x2396	; 0x2396 <__addsf3>
    1358:	56 2e       	mov	r5, r22
    135a:	67 2e       	mov	r6, r23
    135c:	78 2e       	mov	r7, r24
    135e:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1360:	ed 81       	ldd	r30, Y+5	; 0x05
    1362:	fe 81       	ldd	r31, Y+6	; 0x06
    1364:	04 88       	ldd	r0, Z+20	; 0x14
    1366:	f5 89       	ldd	r31, Z+21	; 0x15
    1368:	e0 2d       	mov	r30, r0
    136a:	fe 83       	std	Y+6, r31	; 0x06
    136c:	ed 83       	std	Y+5, r30	; 0x05
    136e:	ef 2b       	or	r30, r31
    1370:	09 f0       	breq	.+2      	; 0x1374 <defuzzification+0x112>
    1372:	a9 cf       	rjmp	.-174    	; 0x12c6 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    1374:	26 2f       	mov	r18, r22
    1376:	37 2f       	mov	r19, r23
    1378:	48 2f       	mov	r20, r24
    137a:	59 2f       	mov	r21, r25
    137c:	63 2d       	mov	r22, r3
    137e:	72 2d       	mov	r23, r2
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	0e 94 2f 12 	call	0x245e	; 0x245e <__divsf3>
    1388:	26 2f       	mov	r18, r22
    138a:	37 2f       	mov	r19, r23
    138c:	48 2f       	mov	r20, r24
    138e:	59 2f       	mov	r21, r25
    1390:	04 c0       	rjmp	.+8      	; 0x139a <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    139a:	62 2f       	mov	r22, r18
    139c:	73 2f       	mov	r23, r19
    139e:	84 2f       	mov	r24, r20
    13a0:	95 2f       	mov	r25, r21
    13a2:	0e 94 97 12 	call	0x252e	; 0x252e <__fixsfsi>
    13a6:	eb 81       	ldd	r30, Y+3	; 0x03
    13a8:	fc 81       	ldd	r31, Y+4	; 0x04
    13aa:	73 87       	std	Z+11, r23	; 0x0b
    13ac:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    13ae:	86 85       	ldd	r24, Z+14	; 0x0e
    13b0:	97 85       	ldd	r25, Z+15	; 0x0f
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f0       	breq	.+2      	; 0x13bc <defuzzification+0x15a>
    13ba:	73 cf       	rjmp	.-282    	; 0x12a2 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    13bc:	26 96       	adiw	r28, 0x06	; 6
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	7f 90       	pop	r7
    13e2:	6f 90       	pop	r6
    13e4:	5f 90       	pop	r5
    13e6:	4f 90       	pop	r4
    13e8:	3f 90       	pop	r3
    13ea:	2f 90       	pop	r2
    13ec:	08 95       	ret

000013ee <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
    1404:	6a 01       	movw	r12, r20
    1406:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    1408:	0e 94 ff 13 	call	0x27fe	; 0x27fe <strcpy>
    newMf->value = 0;
    140c:	1b 86       	std	Y+11, r1	; 0x0b
    140e:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    1410:	dd 86       	std	Y+13, r13	; 0x0d
    1412:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    1414:	ff 86       	std	Y+15, r15	; 0x0f
    1416:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    1418:	b5 01       	movw	r22, r10
    141a:	6c 19       	sub	r22, r12
    141c:	7d 09       	sbc	r23, r13
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	31 e0       	ldi	r19, 0x01	; 1
    1422:	c9 01       	movw	r24, r18
    1424:	0e 94 b9 13 	call	0x2772	; 0x2772 <__divmodhi4>
    1428:	79 8b       	std	Y+17, r23	; 0x11
    142a:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    142c:	b7 01       	movw	r22, r14
    142e:	60 1b       	sub	r22, r16
    1430:	71 0b       	sbc	r23, r17
    1432:	c9 01       	movw	r24, r18
    1434:	0e 94 b9 13 	call	0x2772	; 0x2772 <__divmodhi4>
    1438:	7b 8b       	std	Y+19, r23	; 0x13
    143a:	6a 8b       	std	Y+18, r22	; 0x12
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	af 90       	pop	r10
    1450:	08 95       	ret

00001452 <rightTurn>:
void leftTurn(int gyro);



void rightTurn(int gyro)
{
    1452:	2f 92       	push	r2
    1454:	3f 92       	push	r3
    1456:	4f 92       	push	r4
    1458:	5f 92       	push	r5
    145a:	6f 92       	push	r6
    145c:	7f 92       	push	r7
    145e:	8f 92       	push	r8
    1460:	9f 92       	push	r9
    1462:	af 92       	push	r10
    1464:	bf 92       	push	r11
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	ce 5c       	subi	r28, 0xCE	; 206
    147c:	d1 09       	sbc	r29, r1
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type turn; strcpy(turn.name, "turn");
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	ef ec       	ldi	r30, 0xCF	; 207
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	9e 01       	movw	r18, r28
    1490:	2f 5f       	subi	r18, 0xFF	; 255
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	19 01       	movw	r2, r18
    1496:	d9 01       	movw	r26, r18
    1498:	01 90       	ld	r0, Z+
    149a:	0d 92       	st	X+, r0
    149c:	8a 95       	dec	r24
    149e:	e1 f7       	brne	.-8      	; 0x1498 <rightTurn+0x46>
	
	// Set MFs
	struct mf_type start;
	MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    14a0:	5e 01       	movw	r10, r28
    14a2:	31 e1       	ldi	r19, 0x11	; 17
    14a4:	a3 0e       	add	r10, r19
    14a6:	b1 1c       	adc	r11, r1
    14a8:	0f 2e       	mov	r0, r31
    14aa:	fd e2       	ldi	r31, 0x2D	; 45
    14ac:	ef 2e       	mov	r14, r31
    14ae:	f1 2c       	mov	r15, r1
    14b0:	f0 2d       	mov	r31, r0
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4f ef       	ldi	r20, 0xFF	; 255
    14bc:	5f ef       	ldi	r21, 0xFF	; 255
    14be:	64 ed       	ldi	r22, 0xD4	; 212
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	c5 01       	movw	r24, r10
    14c4:	94 df       	rcall	.-216    	; 0x13ee <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    14c6:	6e 01       	movw	r12, r28
    14c8:	87 e2       	ldi	r24, 0x27	; 39
    14ca:	c8 0e       	add	r12, r24
    14cc:	d1 1c       	adc	r13, r1
    14ce:	0f 2e       	mov	r0, r31
    14d0:	fc e3       	ldi	r31, 0x3C	; 60
    14d2:	ef 2e       	mov	r14, r31
    14d4:	f1 2c       	mov	r15, r1
    14d6:	f0 2d       	mov	r31, r0
    14d8:	0d e2       	ldi	r16, 0x2D	; 45
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	2d e2       	ldi	r18, 0x2D	; 45
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4e e1       	ldi	r20, 0x1E	; 30
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	6a ed       	ldi	r22, 0xDA	; 218
    14e6:	71 e0       	ldi	r23, 0x01	; 1
    14e8:	c6 01       	movw	r24, r12
    14ea:	81 df       	rcall	.-254    	; 0x13ee <MATLAB_MF>
	struct mf_type end;
	MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    14ec:	2e 01       	movw	r4, r28
    14ee:	ed e3       	ldi	r30, 0x3D	; 61
    14f0:	4e 0e       	add	r4, r30
    14f2:	51 1c       	adc	r5, r1
    14f4:	0f 2e       	mov	r0, r31
    14f6:	fe e7       	ldi	r31, 0x7E	; 126
    14f8:	ef 2e       	mov	r14, r31
    14fa:	f1 2c       	mov	r15, r1
    14fc:	f0 2d       	mov	r31, r0
    14fe:	0d e7       	ldi	r16, 0x7D	; 125
    1500:	10 e0       	ldi	r17, 0x00	; 0
    1502:	2d e2       	ldi	r18, 0x2D	; 45
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4d e2       	ldi	r20, 0x2D	; 45
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	61 ee       	ldi	r22, 0xE1	; 225
    150c:	71 e0       	ldi	r23, 0x01	; 1
    150e:	c2 01       	movw	r24, r4
    1510:	6e df       	rcall	.-292    	; 0x13ee <MATLAB_MF>

	// Linked list for MFs
	turn.membership_functions = &start;
    1512:	be 86       	std	Y+14, r11	; 0x0e
    1514:	ad 86       	std	Y+13, r10	; 0x0d
	start.next = &middle;
    1516:	de a2       	std	Y+38, r13	; 0x26
    1518:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &end;
    151a:	5c ae       	std	Y+60, r5	; 0x3c
    151c:	4b ae       	std	Y+59, r4	; 0x3b
	end.next = NULL;
    151e:	63 96       	adiw	r28, 0x13	; 19
    1520:	1f ae       	std	Y+63, r1	; 0x3f
    1522:	1e ae       	std	Y+62, r1	; 0x3e
    1524:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    1526:	6e 01       	movw	r12, r28
    1528:	f3 e5       	ldi	r31, 0x53	; 83
    152a:	cf 0e       	add	r12, r31
    152c:	d1 1c       	adc	r13, r1
    152e:	86 e0       	ldi	r24, 0x06	; 6
    1530:	e5 ee       	ldi	r30, 0xE5	; 229
    1532:	f1 e0       	ldi	r31, 0x01	; 1
    1534:	d6 01       	movw	r26, r12
    1536:	01 90       	ld	r0, Z+
    1538:	0d 92       	st	X+, r0
    153a:	8a 95       	dec	r24
    153c:	e1 f7       	brne	.-8      	; 0x1536 <rightTurn+0xe4>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2739, 2740, 2740, 2815);
    153e:	5e 01       	movw	r10, r28
    1540:	23 e6       	ldi	r18, 0x63	; 99
    1542:	a2 0e       	add	r10, r18
    1544:	b1 1c       	adc	r11, r1
    1546:	0f 2e       	mov	r0, r31
    1548:	ee 24       	eor	r14, r14
    154a:	ea 94       	dec	r14
    154c:	fa e0       	ldi	r31, 0x0A	; 10
    154e:	ff 2e       	mov	r15, r31
    1550:	f0 2d       	mov	r31, r0
    1552:	04 eb       	ldi	r16, 0xB4	; 180
    1554:	1a e0       	ldi	r17, 0x0A	; 10
    1556:	24 eb       	ldi	r18, 0xB4	; 180
    1558:	3a e0       	ldi	r19, 0x0A	; 10
    155a:	43 eb       	ldi	r20, 0xB3	; 179
    155c:	5a e0       	ldi	r21, 0x0A	; 10
    155e:	67 e5       	ldi	r22, 0x57	; 87
    1560:	71 e0       	ldi	r23, 0x01	; 1
    1562:	c5 01       	movw	r24, r10
    1564:	44 df       	rcall	.-376    	; 0x13ee <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2804, 2820, 2820, 2836);
    1566:	4e 01       	movw	r8, r28
    1568:	39 e7       	ldi	r19, 0x79	; 121
    156a:	83 0e       	add	r8, r19
    156c:	91 1c       	adc	r9, r1
    156e:	0f 2e       	mov	r0, r31
    1570:	f4 e1       	ldi	r31, 0x14	; 20
    1572:	ef 2e       	mov	r14, r31
    1574:	fb e0       	ldi	r31, 0x0B	; 11
    1576:	ff 2e       	mov	r15, r31
    1578:	f0 2d       	mov	r31, r0
    157a:	04 e0       	ldi	r16, 0x04	; 4
    157c:	1b e0       	ldi	r17, 0x0B	; 11
    157e:	24 e0       	ldi	r18, 0x04	; 4
    1580:	3b e0       	ldi	r19, 0x0B	; 11
    1582:	44 ef       	ldi	r20, 0xF4	; 244
    1584:	5a e0       	ldi	r21, 0x0A	; 10
    1586:	6a ef       	ldi	r22, 0xFA	; 250
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	c4 01       	movw	r24, r8
    158c:	30 df       	rcall	.-416    	; 0x13ee <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", MAXRIGHT-1, MAXRIGHT, MAXRIGHT, MAXRIGHT+1);
    158e:	3e 01       	movw	r6, r28
    1590:	8f e8       	ldi	r24, 0x8F	; 143
    1592:	68 0e       	add	r6, r24
    1594:	71 1c       	adc	r7, r1
    1596:	0f 2e       	mov	r0, r31
    1598:	f5 ee       	ldi	r31, 0xE5	; 229
    159a:	ef 2e       	mov	r14, r31
    159c:	fc e0       	ldi	r31, 0x0C	; 12
    159e:	ff 2e       	mov	r15, r31
    15a0:	f0 2d       	mov	r31, r0
    15a2:	04 ee       	ldi	r16, 0xE4	; 228
    15a4:	1c e0       	ldi	r17, 0x0C	; 12
    15a6:	24 ee       	ldi	r18, 0xE4	; 228
    15a8:	3c e0       	ldi	r19, 0x0C	; 12
    15aa:	43 ee       	ldi	r20, 0xE3	; 227
    15ac:	5c e0       	ldi	r21, 0x0C	; 12
    15ae:	60 e6       	ldi	r22, 0x60	; 96
    15b0:	71 e0       	ldi	r23, 0x01	; 1
    15b2:	c3 01       	movw	r24, r6
    15b4:	1c df       	rcall	.-456    	; 0x13ee <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    15b6:	f6 01       	movw	r30, r12
    15b8:	b5 86       	std	Z+13, r11	; 0x0d
    15ba:	a4 86       	std	Z+12, r10	; 0x0c
	straight.next = &right;
    15bc:	f5 01       	movw	r30, r10
    15be:	95 8a       	std	Z+21, r9	; 0x15
    15c0:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &sharpRight;
    15c2:	f4 01       	movw	r30, r8
    15c4:	75 8a       	std	Z+21, r7	; 0x15
    15c6:	64 8a       	std	Z+20, r6	; 0x14
	sharpRight.next = NULL;
    15c8:	f3 01       	movw	r30, r6
    15ca:	15 8a       	std	Z+21, r1	; 0x15
    15cc:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &turn;
    15ce:	30 92 2b 03 	sts	0x032B, r3
    15d2:	20 92 2a 03 	sts	0x032A, r2
	turn.next = NULL;
    15d6:	18 8a       	std	Y+16, r1	; 0x10
    15d8:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    15da:	d0 92 29 03 	sts	0x0329, r13
    15de:	c0 92 28 03 	sts	0x0328, r12
	servo.next = NULL;
    15e2:	f6 01       	movw	r30, r12
    15e4:	17 86       	std	Z+15, r1	; 0x0f
    15e6:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    15e8:	ce 01       	movw	r24, r28
    15ea:	8b 55       	subi	r24, 0x5B	; 91
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	90 93 2d 03 	sts	0x032D, r25
    15f2:	80 93 2c 03 	sts	0x032C, r24
	struct rule_type rule2; rule1.next = &rule2;
    15f6:	de 01       	movw	r26, r28
    15f8:	a5 55       	subi	r26, 0x55	; 85
    15fa:	bf 4f       	sbci	r27, 0xFF	; 255
    15fc:	fc 01       	movw	r30, r24
    15fe:	b5 83       	std	Z+5, r27	; 0x05
    1600:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1602:	be 01       	movw	r22, r28
    1604:	6f 54       	subi	r22, 0x4F	; 79
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	15 96       	adiw	r26, 0x05	; 5
    160a:	7c 93       	st	X, r23
    160c:	6e 93       	st	-X, r22
    160e:	14 97       	sbiw	r26, 0x04	; 4
    1610:	fb 01       	movw	r30, r22
    1612:	15 82       	std	Z+5, r1	; 0x05
    1614:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1616:	ae 01       	movw	r20, r28
    1618:	49 54       	subi	r20, 0x49	; 73
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	fc 01       	movw	r30, r24
    161e:	51 83       	std	Z+1, r21	; 0x01
    1620:	40 83       	st	Z, r20
    1622:	fa 01       	movw	r30, r20
    1624:	13 82       	std	Z+3, r1	; 0x03
    1626:	12 82       	std	Z+2, r1	; 0x02
    1628:	9e 01       	movw	r18, r28
    162a:	25 54       	subi	r18, 0x45	; 69
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	fc 01       	movw	r30, r24
    1630:	33 83       	std	Z+3, r19	; 0x03
    1632:	22 83       	std	Z+2, r18	; 0x02
    1634:	f9 01       	movw	r30, r18
    1636:	13 82       	std	Z+3, r1	; 0x03
    1638:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &start.value; then1.value = &sharpRight.value;
    163a:	8a 58       	subi	r24, 0x8A	; 138
    163c:	91 09       	sbc	r25, r1
    163e:	fa 01       	movw	r30, r20
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	fa e0       	ldi	r31, 0x0A	; 10
    1646:	6f 0e       	add	r6, r31
    1648:	71 1c       	adc	r7, r1
    164a:	f9 01       	movw	r30, r18
    164c:	71 82       	std	Z+1, r7	; 0x01
    164e:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1650:	2c 5f       	subi	r18, 0xFC	; 252
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	11 96       	adiw	r26, 0x01	; 1
    1656:	3c 93       	st	X, r19
    1658:	2e 93       	st	-X, r18
    165a:	f9 01       	movw	r30, r18
    165c:	13 82       	std	Z+3, r1	; 0x03
    165e:	12 82       	std	Z+2, r1	; 0x02
    1660:	88 55       	subi	r24, 0x58	; 88
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	13 96       	adiw	r26, 0x03	; 3
    1666:	9c 93       	st	X, r25
    1668:	8e 93       	st	-X, r24
    166a:	12 97       	sbiw	r26, 0x02	; 2
    166c:	fc 01       	movw	r30, r24
    166e:	13 82       	std	Z+3, r1	; 0x03
    1670:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &middle.value; then2.value = &right.value;
    1672:	46 58       	subi	r20, 0x86	; 134
    1674:	51 09       	sbc	r21, r1
    1676:	f9 01       	movw	r30, r18
    1678:	51 83       	std	Z+1, r21	; 0x01
    167a:	40 83       	st	Z, r20
    167c:	fa e0       	ldi	r31, 0x0A	; 10
    167e:	8f 0e       	add	r8, r31
    1680:	91 1c       	adc	r9, r1
    1682:	fc 01       	movw	r30, r24
    1684:	91 82       	std	Z+1, r9	; 0x01
    1686:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1688:	04 96       	adiw	r24, 0x04	; 4
    168a:	fb 01       	movw	r30, r22
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	fc 01       	movw	r30, r24
    1692:	13 82       	std	Z+3, r1	; 0x03
    1694:	12 82       	std	Z+2, r1	; 0x02
    1696:	90 96       	adiw	r26, 0x20	; 32
    1698:	fb 01       	movw	r30, r22
    169a:	b3 83       	std	Z+3, r27	; 0x03
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	13 96       	adiw	r26, 0x03	; 3
    16a0:	1c 92       	st	X, r1
    16a2:	1e 92       	st	-X, r1
    16a4:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &end.value; then3.value = &straight.value;
    16a6:	fa e0       	ldi	r31, 0x0A	; 10
    16a8:	4f 0e       	add	r4, r31
    16aa:	51 1c       	adc	r5, r1
    16ac:	fc 01       	movw	r30, r24
    16ae:	51 82       	std	Z+1, r5	; 0x01
    16b0:	40 82       	st	Z, r4
    16b2:	fa e0       	ldi	r31, 0x0A	; 10
    16b4:	af 0e       	add	r10, r31
    16b6:	b1 1c       	adc	r11, r1
    16b8:	ad 92       	st	X+, r10
    16ba:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    16bc:	65 dd       	rcall	.-1334   	; 0x1188 <fuzzification>
	rule_evaluation();
    16be:	8b dd       	rcall	.-1258   	; 0x11d6 <rule_evaluation>
	defuzzification();
    16c0:	d0 dd       	rcall	.-1120   	; 0x1262 <defuzzification>
	if (servo.value > MAXLEFT)
    16c2:	f6 01       	movw	r30, r12
    16c4:	82 85       	ldd	r24, Z+10	; 0x0a
    16c6:	93 85       	ldd	r25, Z+11	; 0x0b
    16c8:	87 3e       	cpi	r24, 0xE7	; 231
    16ca:	f7 e0       	ldi	r31, 0x07	; 7
    16cc:	9f 07       	cpc	r25, r31
    16ce:	24 f0       	brlt	.+8      	; 0x16d8 <rightTurn+0x286>
	{
		setServo(MAXLEFT);
    16d0:	86 ee       	ldi	r24, 0xE6	; 230
    16d2:	97 e0       	ldi	r25, 0x07	; 7
    16d4:	c4 d2       	rcall	.+1416   	; 0x1c5e <setServo>
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <rightTurn+0x298>
	}
	else if (servo.value < MAXRIGHT)
    16d8:	84 3e       	cpi	r24, 0xE4	; 228
    16da:	2c e0       	ldi	r18, 0x0C	; 12
    16dc:	92 07       	cpc	r25, r18
    16de:	24 f4       	brge	.+8      	; 0x16e8 <rightTurn+0x296>
	{
		setServo(MAXRIGHT);
    16e0:	84 ee       	ldi	r24, 0xE4	; 228
    16e2:	9c e0       	ldi	r25, 0x0C	; 12
    16e4:	bc d2       	rcall	.+1400   	; 0x1c5e <setServo>
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <rightTurn+0x298>
	}
	else
	{
		setServo(servo.value);
    16e8:	ba d2       	rcall	.+1396   	; 0x1c5e <setServo>
	}
}
    16ea:	c2 53       	subi	r28, 0x32	; 50
    16ec:	df 4f       	sbci	r29, 0xFF	; 255
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	af 90       	pop	r10
    170c:	9f 90       	pop	r9
    170e:	8f 90       	pop	r8
    1710:	7f 90       	pop	r7
    1712:	6f 90       	pop	r6
    1714:	5f 90       	pop	r5
    1716:	4f 90       	pop	r4
    1718:	3f 90       	pop	r3
    171a:	2f 90       	pop	r2
    171c:	08 95       	ret

0000171e <leftTurn>:

/*
 * This function deals with left turns
 */
void leftTurn(int gyro)
{
    171e:	2f 92       	push	r2
    1720:	3f 92       	push	r3
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	ce 5c       	subi	r28, 0xCE	; 206
    1748:	d1 09       	sbc	r29, r1
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    
    // DECLARATION OF GYRO INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type turn; strcpy(turn.name, "turn");
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	ef ec       	ldi	r30, 0xCF	; 207
    1758:	f1 e0       	ldi	r31, 0x01	; 1
    175a:	9e 01       	movw	r18, r28
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	19 01       	movw	r2, r18
    1762:	d9 01       	movw	r26, r18
    1764:	01 90       	ld	r0, Z+
    1766:	0d 92       	st	X+, r0
    1768:	8a 95       	dec	r24
    176a:	e1 f7       	brne	.-8      	; 0x1764 <leftTurn+0x46>
    
    // Set MFs
    struct mf_type start;
    MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    176c:	5e 01       	movw	r10, r28
    176e:	31 e1       	ldi	r19, 0x11	; 17
    1770:	a3 0e       	add	r10, r19
    1772:	b1 1c       	adc	r11, r1
    1774:	0f 2e       	mov	r0, r31
    1776:	fd e2       	ldi	r31, 0x2D	; 45
    1778:	ef 2e       	mov	r14, r31
    177a:	f1 2c       	mov	r15, r1
    177c:	f0 2d       	mov	r31, r0
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4f ef       	ldi	r20, 0xFF	; 255
    1788:	5f ef       	ldi	r21, 0xFF	; 255
    178a:	64 ed       	ldi	r22, 0xD4	; 212
    178c:	71 e0       	ldi	r23, 0x01	; 1
    178e:	c5 01       	movw	r24, r10
    1790:	2e de       	rcall	.-932    	; 0x13ee <MATLAB_MF>
    struct mf_type middle;
    MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1792:	6e 01       	movw	r12, r28
    1794:	87 e2       	ldi	r24, 0x27	; 39
    1796:	c8 0e       	add	r12, r24
    1798:	d1 1c       	adc	r13, r1
    179a:	0f 2e       	mov	r0, r31
    179c:	fc e3       	ldi	r31, 0x3C	; 60
    179e:	ef 2e       	mov	r14, r31
    17a0:	f1 2c       	mov	r15, r1
    17a2:	f0 2d       	mov	r31, r0
    17a4:	0d e2       	ldi	r16, 0x2D	; 45
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	2d e2       	ldi	r18, 0x2D	; 45
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4e e1       	ldi	r20, 0x1E	; 30
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	6a ed       	ldi	r22, 0xDA	; 218
    17b2:	71 e0       	ldi	r23, 0x01	; 1
    17b4:	c6 01       	movw	r24, r12
    17b6:	1b de       	rcall	.-970    	; 0x13ee <MATLAB_MF>
    struct mf_type end;
    MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    17b8:	2e 01       	movw	r4, r28
    17ba:	ed e3       	ldi	r30, 0x3D	; 61
    17bc:	4e 0e       	add	r4, r30
    17be:	51 1c       	adc	r5, r1
    17c0:	0f 2e       	mov	r0, r31
    17c2:	fe e7       	ldi	r31, 0x7E	; 126
    17c4:	ef 2e       	mov	r14, r31
    17c6:	f1 2c       	mov	r15, r1
    17c8:	f0 2d       	mov	r31, r0
    17ca:	0d e7       	ldi	r16, 0x7D	; 125
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	2d e2       	ldi	r18, 0x2D	; 45
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4d e2       	ldi	r20, 0x2D	; 45
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	61 ee       	ldi	r22, 0xE1	; 225
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	c2 01       	movw	r24, r4
    17dc:	08 de       	rcall	.-1008   	; 0x13ee <MATLAB_MF>

    // Linked list for MFs
    turn.membership_functions = &start;
    17de:	be 86       	std	Y+14, r11	; 0x0e
    17e0:	ad 86       	std	Y+13, r10	; 0x0d
    start.next = &middle;
    17e2:	de a2       	std	Y+38, r13	; 0x26
    17e4:	cd a2       	std	Y+37, r12	; 0x25
    middle.next = &end;
    17e6:	5c ae       	std	Y+60, r5	; 0x3c
    17e8:	4b ae       	std	Y+59, r4	; 0x3b
    end.next = NULL;
    17ea:	63 96       	adiw	r28, 0x13	; 19
    17ec:	1f ae       	std	Y+63, r1	; 0x3f
    17ee:	1e ae       	std	Y+62, r1	; 0x3e
    17f0:	63 97       	sbiw	r28, 0x13	; 19
    
    
    // DECLARATION OF SERVO OUTPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type servo; strcpy(servo.name, "servo");
    17f2:	6e 01       	movw	r12, r28
    17f4:	f3 e5       	ldi	r31, 0x53	; 83
    17f6:	cf 0e       	add	r12, r31
    17f8:	d1 1c       	adc	r13, r1
    17fa:	86 e0       	ldi	r24, 0x06	; 6
    17fc:	e5 ee       	ldi	r30, 0xE5	; 229
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	d6 01       	movw	r26, r12
    1802:	01 90       	ld	r0, Z+
    1804:	0d 92       	st	X+, r0
    1806:	8a 95       	dec	r24
    1808:	e1 f7       	brne	.-8      	; 0x1802 <leftTurn+0xe4>
    
    // Set MFs
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2460, 2560, 2560, 2660);
    180a:	5e 01       	movw	r10, r28
    180c:	23 e6       	ldi	r18, 0x63	; 99
    180e:	a2 0e       	add	r10, r18
    1810:	b1 1c       	adc	r11, r1
    1812:	0f 2e       	mov	r0, r31
    1814:	f4 e6       	ldi	r31, 0x64	; 100
    1816:	ef 2e       	mov	r14, r31
    1818:	fa e0       	ldi	r31, 0x0A	; 10
    181a:	ff 2e       	mov	r15, r31
    181c:	f0 2d       	mov	r31, r0
    181e:	00 e0       	ldi	r16, 0x00	; 0
    1820:	1a e0       	ldi	r17, 0x0A	; 10
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3a e0       	ldi	r19, 0x0A	; 10
    1826:	4c e9       	ldi	r20, 0x9C	; 156
    1828:	59 e0       	ldi	r21, 0x09	; 9
    182a:	67 e5       	ldi	r22, 0x57	; 87
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	c5 01       	movw	r24, r10
    1830:	de dd       	rcall	.-1092   	; 0x13ee <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2240, 2240, 2400, 2560);
    1832:	4e 01       	movw	r8, r28
    1834:	39 e7       	ldi	r19, 0x79	; 121
    1836:	83 0e       	add	r8, r19
    1838:	91 1c       	adc	r9, r1
    183a:	0f 2e       	mov	r0, r31
    183c:	e1 2c       	mov	r14, r1
    183e:	fa e0       	ldi	r31, 0x0A	; 10
    1840:	ff 2e       	mov	r15, r31
    1842:	f0 2d       	mov	r31, r0
    1844:	00 e6       	ldi	r16, 0x60	; 96
    1846:	19 e0       	ldi	r17, 0x09	; 9
    1848:	20 ec       	ldi	r18, 0xC0	; 192
    184a:	38 e0       	ldi	r19, 0x08	; 8
    184c:	40 ec       	ldi	r20, 0xC0	; 192
    184e:	58 e0       	ldi	r21, 0x08	; 8
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	72 e0       	ldi	r23, 0x02	; 2
    1854:	c4 01       	movw	r24, r8
    1856:	cb dd       	rcall	.-1130   	; 0x13ee <MATLAB_MF>
    struct mf_type sharpLeft;
    MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT-1, MAXLEFT, MAXLEFT, MAXLEFT+1);
    1858:	3e 01       	movw	r6, r28
    185a:	8f e8       	ldi	r24, 0x8F	; 143
    185c:	68 0e       	add	r6, r24
    185e:	71 1c       	adc	r7, r1
    1860:	0f 2e       	mov	r0, r31
    1862:	f7 ee       	ldi	r31, 0xE7	; 231
    1864:	ef 2e       	mov	r14, r31
    1866:	f7 e0       	ldi	r31, 0x07	; 7
    1868:	ff 2e       	mov	r15, r31
    186a:	f0 2d       	mov	r31, r0
    186c:	06 ee       	ldi	r16, 0xE6	; 230
    186e:	17 e0       	ldi	r17, 0x07	; 7
    1870:	26 ee       	ldi	r18, 0xE6	; 230
    1872:	37 e0       	ldi	r19, 0x07	; 7
    1874:	45 ee       	ldi	r20, 0xE5	; 229
    1876:	57 e0       	ldi	r21, 0x07	; 7
    1878:	6d e4       	ldi	r22, 0x4D	; 77
    187a:	71 e0       	ldi	r23, 0x01	; 1
    187c:	c3 01       	movw	r24, r6
    187e:	b7 dd       	rcall	.-1170   	; 0x13ee <MATLAB_MF>

    // Linked list for MFs
    servo.membership_functions = &straight;
    1880:	f6 01       	movw	r30, r12
    1882:	b5 86       	std	Z+13, r11	; 0x0d
    1884:	a4 86       	std	Z+12, r10	; 0x0c
    straight.next = &left;
    1886:	f5 01       	movw	r30, r10
    1888:	95 8a       	std	Z+21, r9	; 0x15
    188a:	84 8a       	std	Z+20, r8	; 0x14
    left.next = &sharpLeft;
    188c:	f4 01       	movw	r30, r8
    188e:	75 8a       	std	Z+21, r7	; 0x15
    1890:	64 8a       	std	Z+20, r6	; 0x14
    sharpLeft.next = NULL;
    1892:	f3 01       	movw	r30, r6
    1894:	15 8a       	std	Z+21, r1	; 0x15
    1896:	14 8a       	std	Z+20, r1	; 0x14
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &turn;
    1898:	30 92 2b 03 	sts	0x032B, r3
    189c:	20 92 2a 03 	sts	0x032A, r2
    turn.next = NULL;
    18a0:	18 8a       	std	Y+16, r1	; 0x10
    18a2:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
    18a4:	d0 92 29 03 	sts	0x0329, r13
    18a8:	c0 92 28 03 	sts	0x0328, r12
    servo.next = NULL;
    18ac:	f6 01       	movw	r30, r12
    18ae:	17 86       	std	Z+15, r1	; 0x0f
    18b0:	16 86       	std	Z+14, r1	; 0x0e
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
    18b2:	ce 01       	movw	r24, r28
    18b4:	8b 55       	subi	r24, 0x5B	; 91
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	90 93 2d 03 	sts	0x032D, r25
    18bc:	80 93 2c 03 	sts	0x032C, r24
    struct rule_type rule2; rule1.next = &rule2;
    18c0:	de 01       	movw	r26, r28
    18c2:	a5 55       	subi	r26, 0x55	; 85
    18c4:	bf 4f       	sbci	r27, 0xFF	; 255
    18c6:	fc 01       	movw	r30, r24
    18c8:	b5 83       	std	Z+5, r27	; 0x05
    18ca:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    18cc:	be 01       	movw	r22, r28
    18ce:	6f 54       	subi	r22, 0x4F	; 79
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	15 96       	adiw	r26, 0x05	; 5
    18d4:	7c 93       	st	X, r23
    18d6:	6e 93       	st	-X, r22
    18d8:	14 97       	sbiw	r26, 0x04	; 4
    18da:	fb 01       	movw	r30, r22
    18dc:	15 82       	std	Z+5, r1	; 0x05
    18de:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if gyro is start then servo is noSpeed
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    18e0:	ae 01       	movw	r20, r28
    18e2:	49 54       	subi	r20, 0x49	; 73
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
    18e6:	fc 01       	movw	r30, r24
    18e8:	51 83       	std	Z+1, r21	; 0x01
    18ea:	40 83       	st	Z, r20
    18ec:	fa 01       	movw	r30, r20
    18ee:	13 82       	std	Z+3, r1	; 0x03
    18f0:	12 82       	std	Z+2, r1	; 0x02
    18f2:	9e 01       	movw	r18, r28
    18f4:	25 54       	subi	r18, 0x45	; 69
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	fc 01       	movw	r30, r24
    18fa:	33 83       	std	Z+3, r19	; 0x03
    18fc:	22 83       	std	Z+2, r18	; 0x02
    18fe:	f9 01       	movw	r30, r18
    1900:	13 82       	std	Z+3, r1	; 0x03
    1902:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &start.value; then1.value = &sharpLeft.value;
    1904:	8a 58       	subi	r24, 0x8A	; 138
    1906:	91 09       	sbc	r25, r1
    1908:	fa 01       	movw	r30, r20
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	fa e0       	ldi	r31, 0x0A	; 10
    1910:	6f 0e       	add	r6, r31
    1912:	71 1c       	adc	r7, r1
    1914:	f9 01       	movw	r30, r18
    1916:	71 82       	std	Z+1, r7	; 0x01
    1918:	60 82       	st	Z, r6
    
    // if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    191a:	2c 5f       	subi	r18, 0xFC	; 252
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	3c 93       	st	X, r19
    1922:	2e 93       	st	-X, r18
    1924:	f9 01       	movw	r30, r18
    1926:	13 82       	std	Z+3, r1	; 0x03
    1928:	12 82       	std	Z+2, r1	; 0x02
    192a:	88 55       	subi	r24, 0x58	; 88
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	13 96       	adiw	r26, 0x03	; 3
    1930:	9c 93       	st	X, r25
    1932:	8e 93       	st	-X, r24
    1934:	12 97       	sbiw	r26, 0x02	; 2
    1936:	fc 01       	movw	r30, r24
    1938:	13 82       	std	Z+3, r1	; 0x03
    193a:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &middle.value; then2.value = &left.value;
    193c:	46 58       	subi	r20, 0x86	; 134
    193e:	51 09       	sbc	r21, r1
    1940:	f9 01       	movw	r30, r18
    1942:	51 83       	std	Z+1, r21	; 0x01
    1944:	40 83       	st	Z, r20
    1946:	fa e0       	ldi	r31, 0x0A	; 10
    1948:	8f 0e       	add	r8, r31
    194a:	91 1c       	adc	r9, r1
    194c:	fc 01       	movw	r30, r24
    194e:	91 82       	std	Z+1, r9	; 0x01
    1950:	80 82       	st	Z, r8
    
    // if speed is medium and distance is oneM then speed is cruise
    struct rule_element_type if31, then3;
    rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1952:	04 96       	adiw	r24, 0x04	; 4
    1954:	fb 01       	movw	r30, r22
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	fc 01       	movw	r30, r24
    195c:	13 82       	std	Z+3, r1	; 0x03
    195e:	12 82       	std	Z+2, r1	; 0x02
    1960:	90 96       	adiw	r26, 0x20	; 32
    1962:	fb 01       	movw	r30, r22
    1964:	b3 83       	std	Z+3, r27	; 0x03
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	13 96       	adiw	r26, 0x03	; 3
    196a:	1c 92       	st	X, r1
    196c:	1e 92       	st	-X, r1
    196e:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &end.value; then3.value = &straight.value;
    1970:	fa e0       	ldi	r31, 0x0A	; 10
    1972:	4f 0e       	add	r4, r31
    1974:	51 1c       	adc	r5, r1
    1976:	fc 01       	movw	r30, r24
    1978:	51 82       	std	Z+1, r5	; 0x01
    197a:	40 82       	st	Z, r4
    197c:	fa e0       	ldi	r31, 0x0A	; 10
    197e:	af 0e       	add	r10, r31
    1980:	b1 1c       	adc	r11, r1
    1982:	ad 92       	st	X+, r10
    1984:	bc 92       	st	X, r11
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
    1986:	00 dc       	rcall	.-2048   	; 0x1188 <fuzzification>
    rule_evaluation();
    1988:	26 dc       	rcall	.-1972   	; 0x11d6 <rule_evaluation>
    defuzzification();
    198a:	6b dc       	rcall	.-1834   	; 0x1262 <defuzzification>
    if (servo.value > MAXLEFT)
    198c:	f6 01       	movw	r30, r12
    198e:	82 85       	ldd	r24, Z+10	; 0x0a
    1990:	93 85       	ldd	r25, Z+11	; 0x0b
    1992:	87 3e       	cpi	r24, 0xE7	; 231
    1994:	f7 e0       	ldi	r31, 0x07	; 7
    1996:	9f 07       	cpc	r25, r31
    1998:	24 f0       	brlt	.+8      	; 0x19a2 <leftTurn+0x284>
    {
	    setServo(MAXLEFT);
    199a:	86 ee       	ldi	r24, 0xE6	; 230
    199c:	97 e0       	ldi	r25, 0x07	; 7
    199e:	5f d1       	rcall	.+702    	; 0x1c5e <setServo>
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <leftTurn+0x296>
    }
    else if (servo.value < MAXRIGHT)
    19a2:	84 3e       	cpi	r24, 0xE4	; 228
    19a4:	2c e0       	ldi	r18, 0x0C	; 12
    19a6:	92 07       	cpc	r25, r18
    19a8:	24 f4       	brge	.+8      	; 0x19b2 <leftTurn+0x294>
    {
	    setServo(MAXRIGHT);
    19aa:	84 ee       	ldi	r24, 0xE4	; 228
    19ac:	9c e0       	ldi	r25, 0x0C	; 12
    19ae:	57 d1       	rcall	.+686    	; 0x1c5e <setServo>
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <leftTurn+0x296>
    }
    else
    {
	    setServo(servo.value);
    19b2:	55 d1       	rcall	.+682    	; 0x1c5e <setServo>
    }
    
}
    19b4:	c2 53       	subi	r28, 0x32	; 50
    19b6:	df 4f       	sbci	r29, 0xFF	; 255
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	bf 90       	pop	r11
    19d4:	af 90       	pop	r10
    19d6:	9f 90       	pop	r9
    19d8:	8f 90       	pop	r8
    19da:	7f 90       	pop	r7
    19dc:	6f 90       	pop	r6
    19de:	5f 90       	pop	r5
    19e0:	4f 90       	pop	r4
    19e2:	3f 90       	pop	r3
    19e4:	2f 90       	pop	r2
    19e6:	08 95       	ret

000019e8 <intersection>:


void intersection(int type, int gyro, int c, int v)
{
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	8a 01       	movw	r16, r20
    19f6:	79 01       	movw	r14, r18
    19f8:	fb 01       	movw	r30, r22
    19fa:	ff 23       	and	r31, r31
    19fc:	24 f4       	brge	.+8      	; 0x1a06 <intersection+0x1e>
    19fe:	ee 27       	eor	r30, r30
    1a00:	ff 27       	eor	r31, r31
    1a02:	e6 1b       	sub	r30, r22
    1a04:	f7 0b       	sbc	r31, r23
    1a06:	ef 01       	movw	r28, r30
    1a08:	ee 37       	cpi	r30, 0x7E	; 126
    1a0a:	f1 05       	cpc	r31, r1
    1a0c:	14 f0       	brlt	.+4      	; 0x1a12 <intersection+0x2a>
    1a0e:	cd e7       	ldi	r28, 0x7D	; 125
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
    1a12:	82 37       	cpi	r24, 0x72	; 114
    1a14:	91 05       	cpc	r25, r1
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <intersection+0x36>
    {
		rightTurn(gyro);
    1a18:	ce 01       	movw	r24, r28
    1a1a:	1b dd       	rcall	.-1482   	; 0x1452 <rightTurn>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <intersection+0x5e>
    }
	else if (type == 'l')
    1a1e:	8c 36       	cpi	r24, 0x6C	; 108
    1a20:	91 05       	cpc	r25, r1
    1a22:	89 f4       	brne	.+34     	; 0x1a46 <intersection+0x5e>
	{
		if (checkCount(500) == 0) // if count less than 500 ms then, keep straight
    1a24:	84 ef       	ldi	r24, 0xF4	; 244
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	0e 94 7a 00 	call	0xf4	; 0xf4 <checkCount>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	29 f4       	brne	.+10     	; 0x1a3a <intersection+0x52>
		{
			FLC_steering(c,v);
    1a30:	b7 01       	movw	r22, r14
    1a32:	c8 01       	movw	r24, r16
    1a34:	0e 94 d5 03 	call	0x7aa	; 0x7aa <FLC_steering>
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <intersection+0x5e>
		}
		else
		{
		count(0);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 66 00 	call	0xcc	; 0xcc <count>
		leftTurn(gyro);	
    1a42:	ce 01       	movw	r24, r28
    1a44:	6c de       	rcall	.-808    	; 0x171e <leftTurn>
		}
	}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	08 95       	ret

00001a54 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	0b b6       	in	r0, 0x3b	; 59
    1a60:	0f 92       	push	r0
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	80 91 ce 00 	lds	r24, 0x00CE
    1a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <__vector_28+0x28>
    1a72:	10 92 0d 02 	sts	0x020D, r1
    1a76:	10 92 0c 02 	sts	0x020C, r1
    1a7a:	10 c0       	rjmp	.+32     	; 0x1a9c <__vector_28+0x48>
    1a7c:	e0 91 0c 02 	lds	r30, 0x020C
    1a80:	f0 91 0d 02 	lds	r31, 0x020D
    1a84:	e2 5d       	subi	r30, 0xD2	; 210
    1a86:	fc 4f       	sbci	r31, 0xFC	; 252
    1a88:	80 83       	st	Z, r24
    1a8a:	80 91 0c 02 	lds	r24, 0x020C
    1a8e:	90 91 0d 02 	lds	r25, 0x020D
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	90 93 0d 02 	sts	0x020D, r25
    1a98:	80 93 0c 02 	sts	0x020C, r24
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	0f 90       	pop	r0
    1aa6:	0b be       	out	0x3b, r0	; 59
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <carInit>:
    1ab2:	ab d0       	rcall	.+342    	; 0x1c0a <pwmInit>
    1ab4:	a5 d1       	rcall	.+842    	; 0x1e00 <spi_slave_init>
    1ab6:	8d ec       	ldi	r24, 0xCD	; 205
    1ab8:	9a e0       	ldi	r25, 0x0A	; 10
    1aba:	90 93 89 00 	sts	0x0089, r25
    1abe:	80 93 88 00 	sts	0x0088, r24
    1ac2:	84 e6       	ldi	r24, 0x64	; 100
    1ac4:	9a e0       	ldi	r25, 0x0A	; 10
    1ac6:	90 93 8b 00 	sts	0x008B, r25
    1aca:	80 93 8a 00 	sts	0x008A, r24
    1ace:	08 95       	ret

00001ad0 <main>:




int main (void)
{
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	2b 97       	sbiw	r28, 0x0b	; 11
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
	




	carInit();
    1ae4:	e6 df       	rcall	.-52     	; 0x1ab2 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae6:	2f ef       	ldi	r18, 0xFF	; 255
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	90 ee       	ldi	r25, 0xE0	; 224
    1aec:	21 50       	subi	r18, 0x01	; 1
    1aee:	80 40       	sbci	r24, 0x00	; 0
    1af0:	90 40       	sbci	r25, 0x00	; 0
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <main+0x1c>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <main+0x26>
    1af6:	00 00       	nop
	//USART1_init(baud_setting);
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    1afc:	78 94       	sei
					setServo(STRAIGHT);
				}
			}
			else if (control_mode == 1)
			{
				FLC_obstacle(OCR1A, sF, v);
    1afe:	0f 2e       	mov	r0, r31
    1b00:	f8 e8       	ldi	r31, 0x88	; 136
    1b02:	ef 2e       	mov	r14, r31
    1b04:	f1 2c       	mov	r15, r1
    1b06:	f0 2d       	mov	r31, r0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1b08:	0f 2e       	mov	r0, r31
    1b0a:	fa e8       	ldi	r31, 0x8A	; 138
    1b0c:	6f 2e       	mov	r6, r31
    1b0e:	71 2c       	mov	r7, r1
    1b10:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (is_package_recieved()) {
    1b12:	d5 d1       	rcall	.+938    	; 0x1ebe <is_package_recieved>
    1b14:	88 23       	and	r24, r24
    1b16:	e9 f3       	breq	.-6      	; 0x1b12 <main+0x42>
			

			//Reading Information
			prev_control_mode = control_mode;
    1b18:	3b 84       	ldd	r3, Y+11	; 0x0b
			read_sensor_info(&control_mode, sens_info_ptr);
    1b1a:	be 01       	movw	r22, r28
    1b1c:	6f 5f       	subi	r22, 0xFF	; 255
    1b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b20:	ce 01       	movw	r24, r28
    1b22:	0b 96       	adiw	r24, 0x0b	; 11
    1b24:	d6 d1       	rcall	.+940    	; 0x1ed2 <read_sensor_info>
			//Sens_info_read(sens_info_ptr);
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    1b26:	ab 80       	ldd	r10, Y+3	; 0x03
    1b28:	b1 2c       	mov	r11, r1
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    1b2a:	c9 80       	ldd	r12, Y+1	; 0x01
    1b2c:	d1 2c       	mov	r13, r1
			int v = (int) sensor_info.angular_diff;
    1b2e:	0a 81       	ldd	r16, Y+2	; 0x02
    1b30:	10 e0       	ldi	r17, 0x00	; 0
			int gyro_angle = (int) sensor_info.angle - 125;
    1b32:	28 84       	ldd	r2, Y+8	; 0x08
			int intersection_type = (int) sensor_info.next_turn_decision;
    1b34:	8a 84       	ldd	r8, Y+10	; 0x0a
    1b36:	91 2c       	mov	r9, r1
			
			//Save k-value from stop line when control mode changes from 0 to 4
			if(control_mode == 0x04 && prev_control_mode == 0x00){
    1b38:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	79 f4       	brne	.+30     	; 0x1b5c <main+0x8c>
    1b3e:	31 10       	cpse	r3, r1
    1b40:	1b c0       	rjmp	.+54     	; 0x1b78 <main+0xa8>
				count(1);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			k_value_stop_line = (int) sensor_info.dist_to_stop_line - 40;			
    1b4a:	49 84       	ldd	r4, Y+9	; 0x09
    1b4c:	51 2c       	mov	r5, r1
    1b4e:	e8 e2       	ldi	r30, 0x28	; 40
    1b50:	4e 1a       	sub	r4, r30
    1b52:	51 08       	sbc	r5, r1
			}
			if (control_mode == 1 && control_mode != prev_control_mode && intersection_type == 'l') // if left turn is initiated
    1b54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	79 f4       	brne	.+30     	; 0x1b78 <main+0xa8>
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <main+0x98>
    1b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	59 f4       	brne	.+22     	; 0x1b78 <main+0xa8>
    1b62:	f1 e0       	ldi	r31, 0x01	; 1
    1b64:	3f 16       	cp	r3, r31
    1b66:	41 f0       	breq	.+16     	; 0x1b78 <main+0xa8>
    1b68:	2c e6       	ldi	r18, 0x6C	; 108
    1b6a:	82 16       	cp	r8, r18
    1b6c:	91 04       	cpc	r9, r1
    1b6e:	21 f4       	brne	.+8      	; 0x1b78 <main+0xa8>
			{
				count(1);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			}
			
			
			
			
			cli();
    1b78:	f8 94       	cli
			
			if (control_mode == 0)
    1b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	0b c0       	rjmp	.+22     	; 0x1b96 <main+0xc6>
			{
				FLC_obstacle(OCR1A, sF, v);
    1b80:	f7 01       	movw	r30, r14
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	a8 01       	movw	r20, r16
    1b88:	b5 01       	movw	r22, r10
    1b8a:	89 da       	rcall	.-2798   	; 0x109e <FLC_obstacle>
				FLC_steering(c,v);
    1b8c:	b8 01       	movw	r22, r16
    1b8e:	c6 01       	movw	r24, r12
    1b90:	0e 94 d5 03 	call	0x7aa	; 0x7aa <FLC_steering>
    1b94:	2a c0       	rjmp	.+84     	; 0x1bea <main+0x11a>
			}
			else if (control_mode == 4)
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	c1 f4       	brne	.+48     	; 0x1bca <main+0xfa>
			{
				if (TCNT3 < 300) // 0.3 seconds
    1b9a:	e4 e9       	ldi	r30, 0x94	; 148
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	8c 32       	cpi	r24, 0x2C	; 44
    1ba4:	91 40       	sbci	r25, 0x01	; 1
    1ba6:	30 f4       	brcc	.+12     	; 0x1bb4 <main+0xe4>
				{
					setESC(2835);
    1ba8:	83 e1       	ldi	r24, 0x13	; 19
    1baa:	9b e0       	ldi	r25, 0x0B	; 11
    1bac:	3d d0       	rcall	.+122    	; 0x1c28 <setESC>
					stop(k_value_stop_line);
    1bae:	c2 01       	movw	r24, r4
    1bb0:	cf d1       	rcall	.+926    	; 0x1f50 <stop>
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <main+0x11a>
				}
				else
				{
					count(0);
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 66 00 	call	0xcc	; 0xcc <count>
					setESC(NEUTRAL);
    1bbc:	8d ec       	ldi	r24, 0xCD	; 205
    1bbe:	9a e0       	ldi	r25, 0x0A	; 10
    1bc0:	33 d0       	rcall	.+102    	; 0x1c28 <setESC>
					setServo(STRAIGHT);
    1bc2:	84 e6       	ldi	r24, 0x64	; 100
    1bc4:	9a e0       	ldi	r25, 0x0A	; 10
    1bc6:	4b d0       	rcall	.+150    	; 0x1c5e <setServo>
    1bc8:	10 c0       	rjmp	.+32     	; 0x1bea <main+0x11a>
				}
			}
			else if (control_mode == 1)
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	71 f4       	brne	.+28     	; 0x1bea <main+0x11a>
			{
				FLC_obstacle(OCR1A, sF, v);
    1bce:	f7 01       	movw	r30, r14
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	a8 01       	movw	r20, r16
    1bd6:	b5 01       	movw	r22, r10
    1bd8:	62 da       	rcall	.-2876   	; 0x109e <FLC_obstacle>
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro_angle = (int) sensor_info.angle - 125;
    1bda:	82 2d       	mov	r24, r2
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			else if (control_mode == 1)
			{
				FLC_obstacle(OCR1A, sF, v);
				intersection(gyro_angle, intersection_type, c, v);
    1bde:	98 01       	movw	r18, r16
    1be0:	a6 01       	movw	r20, r12
    1be2:	b4 01       	movw	r22, r8
    1be4:	8d 57       	subi	r24, 0x7D	; 125
    1be6:	91 09       	sbc	r25, r1
    1be8:	ff de       	rcall	.-514    	; 0x19e8 <intersection>
			}
			

			
			sei();
    1bea:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    1bec:	f7 01       	movw	r30, r14
    1bee:	c0 80       	ld	r12, Z
    1bf0:	d1 80       	ldd	r13, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1bf2:	f3 01       	movw	r30, r6
    1bf4:	00 81       	ld	r16, Z
    1bf6:	11 81       	ldd	r17, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte((unsigned) (char) temp_ESC);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0b d1       	rcall	.+534    	; 0x1e12 <spi_send_byte>
			spi_send_byte((unsigned) (char) (esc_value_to_send));
    1bfc:	8c 2d       	mov	r24, r12
    1bfe:	09 d1       	rcall	.+530    	; 0x1e12 <spi_send_byte>
			spi_send_byte((unsigned) (char) temp_steering);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	07 d1       	rcall	.+526    	; 0x1e12 <spi_send_byte>
			spi_send_byte((unsigned) (char) (steering_value_to_send));
    1c04:	80 2f       	mov	r24, r16
    1c06:	05 d1       	rcall	.+522    	; 0x1e12 <spi_send_byte>
    1c08:	84 cf       	rjmp	.-248    	; 0x1b12 <main+0x42>

00001c0a <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1c0a:	80 e3       	ldi	r24, 0x30	; 48
    1c0c:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1c0e:	82 ea       	ldi	r24, 0xA2	; 162
    1c10:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	9f e8       	ldi	r25, 0x8F	; 143
    1c18:	90 93 87 00 	sts	0x0087, r25
    1c1c:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1c20:	8a e1       	ldi	r24, 0x1A	; 26
    1c22:	80 93 81 00 	sts	0x0081, r24
    1c26:	08 95       	ret

00001c28 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1c28:	80 36       	cpi	r24, 0x60	; 96
    1c2a:	2a e0       	ldi	r18, 0x0A	; 10
    1c2c:	92 07       	cpc	r25, r18
    1c2e:	3c f4       	brge	.+14     	; 0x1c3e <setESC+0x16>
	{
		OCR1A = MINESC;
    1c30:	8f e5       	ldi	r24, 0x5F	; 95
    1c32:	9a e0       	ldi	r25, 0x0A	; 10
    1c34:	90 93 89 00 	sts	0x0089, r25
    1c38:	80 93 88 00 	sts	0x0088, r24
    1c3c:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1c3e:	82 32       	cpi	r24, 0x22	; 34
    1c40:	2b e0       	ldi	r18, 0x0B	; 11
    1c42:	92 07       	cpc	r25, r18
    1c44:	3c f0       	brlt	.+14     	; 0x1c54 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1c46:	82 e2       	ldi	r24, 0x22	; 34
    1c48:	9b e0       	ldi	r25, 0x0B	; 11
    1c4a:	90 93 89 00 	sts	0x0089, r25
    1c4e:	80 93 88 00 	sts	0x0088, r24
    1c52:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1c54:	90 93 89 00 	sts	0x0089, r25
    1c58:	80 93 88 00 	sts	0x0088, r24
    1c5c:	08 95       	ret

00001c5e <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1c5e:	84 3e       	cpi	r24, 0xE4	; 228
    1c60:	2c e0       	ldi	r18, 0x0C	; 12
    1c62:	92 07       	cpc	r25, r18
    1c64:	3c f0       	brlt	.+14     	; 0x1c74 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1c66:	84 ee       	ldi	r24, 0xE4	; 228
    1c68:	9c e0       	ldi	r25, 0x0C	; 12
    1c6a:	90 93 8b 00 	sts	0x008B, r25
    1c6e:	80 93 8a 00 	sts	0x008A, r24
    1c72:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1c74:	87 3e       	cpi	r24, 0xE7	; 231
    1c76:	27 e0       	ldi	r18, 0x07	; 7
    1c78:	92 07       	cpc	r25, r18
    1c7a:	3c f4       	brge	.+14     	; 0x1c8a <setServo+0x2c>

		OCR1B = MAXLEFT;
    1c7c:	86 ee       	ldi	r24, 0xE6	; 230
    1c7e:	97 e0       	ldi	r25, 0x07	; 7
    1c80:	90 93 8b 00 	sts	0x008B, r25
    1c84:	80 93 8a 00 	sts	0x008A, r24
    1c88:	08 95       	ret
		
	} else {
		OCR1B = (int) (Q1*OCR1B + Q2*counterServo) / 10;
    1c8a:	ea e8       	ldi	r30, 0x8A	; 138
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	40 91 00 01 	lds	r20, 0x0100
    1c96:	50 91 01 01 	lds	r21, 0x0101
    1c9a:	84 9f       	mul	r24, r20
    1c9c:	90 01       	movw	r18, r0
    1c9e:	85 9f       	mul	r24, r21
    1ca0:	30 0d       	add	r19, r0
    1ca2:	94 9f       	mul	r25, r20
    1ca4:	30 0d       	add	r19, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	40 91 02 01 	lds	r20, 0x0102
    1cac:	50 91 03 01 	lds	r21, 0x0103
    1cb0:	64 9f       	mul	r22, r20
    1cb2:	c0 01       	movw	r24, r0
    1cb4:	65 9f       	mul	r22, r21
    1cb6:	90 0d       	add	r25, r0
    1cb8:	74 9f       	mul	r23, r20
    1cba:	90 0d       	add	r25, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	82 0f       	add	r24, r18
    1cc0:	93 1f       	adc	r25, r19
    1cc2:	6a e0       	ldi	r22, 0x0A	; 10
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	55 d5       	rcall	.+2730   	; 0x2772 <__divmodhi4>
    1cc8:	71 83       	std	Z+1, r23	; 0x01
    1cca:	60 83       	st	Z, r22
    1ccc:	08 95       	ret

00001cce <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1cce:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1cd0:	20 91 9a 02 	lds	r18, 0x029A
    1cd4:	30 91 9b 02 	lds	r19, 0x029B
    1cd8:	21 15       	cp	r18, r1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	a9 f0       	breq	.+42     	; 0x1d08 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1cde:	e6 e9       	ldi	r30, 0x96	; 150
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
    1ce2:	40 81       	ld	r20, Z
    1ce4:	51 81       	ldd	r21, Z+1	; 0x01
    1ce6:	da 01       	movw	r26, r20
    1ce8:	aa 5a       	subi	r26, 0xAA	; 170
    1cea:	bd 4f       	sbci	r27, 0xFD	; 253
    1cec:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1cee:	4f 5f       	subi	r20, 0xFF	; 255
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	51 83       	std	Z+1, r21	; 0x01
    1cf4:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	31 09       	sbc	r19, r1
    1cfa:	30 93 9b 02 	sts	0x029B, r19
    1cfe:	20 93 9a 02 	sts	0x029A, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1d02:	23 2b       	or	r18, r19
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <spi_get_byte+0x40>
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1d08:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1d0a:	10 92 0e 02 	sts	0x020E, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1d0e:	20 91 96 02 	lds	r18, 0x0296
    1d12:	30 91 97 02 	lds	r19, 0x0297
    1d16:	20 34       	cpi	r18, 0x40	; 64
    1d18:	31 05       	cpc	r19, r1
    1d1a:	21 f4       	brne	.+8      	; 0x1d24 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1d1c:	10 92 97 02 	sts	0x0297, r1
    1d20:	10 92 96 02 	sts	0x0296, r1
	}
	

	sei();
    1d24:	78 94       	sei
	
	return value;
	
		
}
    1d26:	08 95       	ret

00001d28 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	0b b6       	in	r0, 0x3b	; 59
    1d34:	0f 92       	push	r0
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1d46:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1d48:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1d4a:	2d 3f       	cpi	r18, 0xFD	; 253
    1d4c:	a9 f0       	breq	.+42     	; 0x1d78 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1d4e:	e8 e9       	ldi	r30, 0x98	; 152
    1d50:	f2 e0       	ldi	r31, 0x02	; 2
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	dc 01       	movw	r26, r24
    1d58:	aa 5a       	subi	r26, 0xAA	; 170
    1d5a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d5c:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1d64:	ea e9       	ldi	r30, 0x9A	; 154
    1d66:	f2 e0       	ldi	r31, 0x02	; 2
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 0e 02 	sts	0x020E, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1d78:	80 91 98 02 	lds	r24, 0x0298
    1d7c:	90 91 99 02 	lds	r25, 0x0299
    1d80:	80 34       	cpi	r24, 0x40	; 64
    1d82:	91 05       	cpc	r25, r1
    1d84:	21 f4       	brne	.+8      	; 0x1d8e <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1d86:	10 92 99 02 	sts	0x0299, r1
    1d8a:	10 92 98 02 	sts	0x0298, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1d8e:	80 91 54 02 	lds	r24, 0x0254
    1d92:	90 91 55 02 	lds	r25, 0x0255
    1d96:	89 2b       	or	r24, r25
    1d98:	01 f1       	breq	.+64     	; 0x1dda <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1d9a:	e0 91 50 02 	lds	r30, 0x0250
    1d9e:	f0 91 51 02 	lds	r31, 0x0251
    1da2:	e0 5f       	subi	r30, 0xF0	; 240
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	80 81       	ld	r24, Z
    1da8:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1daa:	e0 e5       	ldi	r30, 0x50	; 80
    1dac:	f2 e0       	ldi	r31, 0x02	; 2
    1dae:	80 81       	ld	r24, Z
    1db0:	91 81       	ldd	r25, Z+1	; 0x01
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1db8:	e4 e5       	ldi	r30, 0x54	; 84
    1dba:	f2 e0       	ldi	r31, 0x02	; 2
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
    1dc0:	21 50       	subi	r18, 0x01	; 1
    1dc2:	31 09       	sbc	r19, r1
    1dc4:	31 83       	std	Z+1, r19	; 0x01
    1dc6:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1dc8:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1dca:	80 34       	cpi	r24, 0x40	; 64
    1dcc:	91 05       	cpc	r25, r1
    1dce:	49 f4       	brne	.+18     	; 0x1de2 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1dd0:	10 92 51 02 	sts	0x0251, r1
    1dd4:	10 92 50 02 	sts	0x0250, r1
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1dda:	8d ef       	ldi	r24, 0xFD	; 253
    1ddc:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1dde:	10 92 0f 02 	sts	0x020F, r1
		
	} 	
	

}
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0b be       	out	0x3b, r0	; 59
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0f 90       	pop	r0
    1dfc:	1f 90       	pop	r1
    1dfe:	18 95       	reti

00001e00 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1e00:	80 e4       	ldi	r24, 0x40	; 64
    1e02:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1e04:	80 ec       	ldi	r24, 0xC0	; 192
    1e06:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1e08:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1e0a:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1e0c:	8d ef       	ldi	r24, 0xFD	; 253
    1e0e:	8e bd       	out	0x2e, r24	; 46
    1e10:	08 95       	ret

00001e12 <spi_send_byte>:
		
}

void spi_send_byte(unsigned char value){
	
	cli();
    1e12:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1e14:	20 91 54 02 	lds	r18, 0x0254
    1e18:	30 91 55 02 	lds	r19, 0x0255
    1e1c:	20 34       	cpi	r18, 0x40	; 64
    1e1e:	31 05       	cpc	r19, r1
    1e20:	90 f4       	brcc	.+36     	; 0x1e46 <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1e22:	e2 e5       	ldi	r30, 0x52	; 82
    1e24:	f2 e0       	ldi	r31, 0x02	; 2
    1e26:	40 81       	ld	r20, Z
    1e28:	51 81       	ldd	r21, Z+1	; 0x01
    1e2a:	da 01       	movw	r26, r20
    1e2c:	a0 5f       	subi	r26, 0xF0	; 240
    1e2e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e30:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	51 83       	std	Z+1, r21	; 0x01
    1e38:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	30 93 55 02 	sts	0x0255, r19
    1e42:	20 93 54 02 	sts	0x0254, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1e46:	80 91 52 02 	lds	r24, 0x0252
    1e4a:	90 91 53 02 	lds	r25, 0x0253
    1e4e:	80 34       	cpi	r24, 0x40	; 64
    1e50:	91 05       	cpc	r25, r1
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1e54:	10 92 53 02 	sts	0x0253, r1
    1e58:	10 92 52 02 	sts	0x0252, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1e5c:	80 91 54 02 	lds	r24, 0x0254
    1e60:	90 91 55 02 	lds	r25, 0x0255
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f4       	brne	.+60     	; 0x1ea4 <spi_send_byte+0x92>
    1e68:	80 91 0f 02 	lds	r24, 0x020F
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	1a c0       	rjmp	.+52     	; 0x1ea4 <spi_send_byte+0x92>
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1e70:	e0 91 50 02 	lds	r30, 0x0250
    1e74:	f0 91 51 02 	lds	r31, 0x0251
    1e78:	e0 5f       	subi	r30, 0xF0	; 240
    1e7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1e80:	e0 e5       	ldi	r30, 0x50	; 80
    1e82:	f2 e0       	ldi	r31, 0x02	; 2
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1e8e:	e4 e5       	ldi	r30, 0x54	; 84
    1e90:	f2 e0       	ldi	r31, 0x02	; 2
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1e9c:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 0f 02 	sts	0x020F, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1ea4:	80 91 50 02 	lds	r24, 0x0250
    1ea8:	90 91 51 02 	lds	r25, 0x0251
    1eac:	80 34       	cpi	r24, 0x40	; 64
    1eae:	91 05       	cpc	r25, r1
    1eb0:	21 f4       	brne	.+8      	; 0x1eba <spi_send_byte+0xa8>
		tx_spi.i_first = 0;
    1eb2:	10 92 51 02 	sts	0x0251, r1
    1eb6:	10 92 50 02 	sts	0x0250, r1
	}
			
			

	sei();
    1eba:	78 94       	sei
    1ebc:	08 95       	ret

00001ebe <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	20 91 9a 02 	lds	r18, 0x029A
    1ec4:	30 91 9b 02 	lds	r19, 0x029B
    1ec8:	2b 30       	cpi	r18, 0x0B	; 11
    1eca:	31 05       	cpc	r19, r1
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <is_package_recieved+0x12>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1ed0:	08 95       	ret

00001ed2 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	8c 01       	movw	r16, r24
    1edc:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1ede:	20 91 9a 02 	lds	r18, 0x029A
    1ee2:	30 91 9b 02 	lds	r19, 0x029B
    1ee6:	23 2b       	or	r18, r19
    1ee8:	69 f1       	breq	.+90     	; 0x1f44 <read_sensor_info+0x72>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1eea:	e0 91 96 02 	lds	r30, 0x0296
    1eee:	f0 91 97 02 	lds	r31, 0x0297
    1ef2:	ea 5a       	subi	r30, 0xAA	; 170
    1ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    1efa:	e1 f4       	brne	.+56     	; 0x1f34 <read_sensor_info+0x62>
    1efc:	e0 df       	rcall	.-64     	; 0x1ebe <is_package_recieved>
    1efe:	88 23       	and	r24, r24
    1f00:	11 f1       	breq	.+68     	; 0x1f46 <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1f02:	e5 de       	rcall	.-566    	; 0x1cce <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1f04:	e4 de       	rcall	.-568    	; 0x1cce <spi_get_byte>
    1f06:	f8 01       	movw	r30, r16
    1f08:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1f0a:	e1 de       	rcall	.-574    	; 0x1cce <spi_get_byte>
    1f0c:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1f0e:	df de       	rcall	.-578    	; 0x1cce <spi_get_byte>
    1f10:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1f12:	dd de       	rcall	.-582    	; 0x1cce <spi_get_byte>
    1f14:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1f16:	db de       	rcall	.-586    	; 0x1cce <spi_get_byte>
    1f18:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1f1a:	d9 de       	rcall	.-590    	; 0x1cce <spi_get_byte>
    1f1c:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1f1e:	d7 de       	rcall	.-594    	; 0x1cce <spi_get_byte>
    1f20:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte;
    1f22:	87 e6       	ldi	r24, 0x67	; 103
    1f24:	9e e0       	ldi	r25, 0x0E	; 14
    1f26:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1f28:	d2 de       	rcall	.-604    	; 0x1cce <spi_get_byte>
    1f2a:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1f2c:	d0 de       	rcall	.-608    	; 0x1cce <spi_get_byte>
    1f2e:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	09 c0       	rjmp	.+18     	; 0x1f46 <read_sensor_info+0x74>
	} else if (is_package_recieved()){
    1f34:	c4 df       	rcall	.-120    	; 0x1ebe <is_package_recieved>
    1f36:	88 23       	and	r24, r24
    1f38:	31 f0       	breq	.+12     	; 0x1f46 <read_sensor_info+0x74>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1f3a:	c9 de       	rcall	.-622    	; 0x1cce <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1f3c:	be 01       	movw	r22, r28
    1f3e:	c8 01       	movw	r24, r16
    1f40:	c8 df       	rcall	.-112    	; 0x1ed2 <read_sensor_info>
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <read_sensor_info+0x74>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1f44:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	08 95       	ret

00001f50 <stop>:




void stop(int k_value)
{
    1f50:	4f 92       	push	r4
    1f52:	5f 92       	push	r5
    1f54:	6f 92       	push	r6
    1f56:	7f 92       	push	r7
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	ce 5c       	subi	r28, 0xCE	; 206
    1f76:	d1 09       	sbc	r29, r1
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61

	
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type orientation; strcpy(orientation.name, "orientatio");
    1f82:	2b e0       	ldi	r18, 0x0B	; 11
    1f84:	eb ee       	ldi	r30, 0xEB	; 235
    1f86:	f1 e0       	ldi	r31, 0x01	; 1
    1f88:	de 01       	movw	r26, r28
    1f8a:	11 96       	adiw	r26, 0x01	; 1
    1f8c:	01 90       	ld	r0, Z+
    1f8e:	0d 92       	st	X+, r0
    1f90:	2a 95       	dec	r18
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <stop+0x3c>
	
	if (k_value < -20)
    1f94:	8c 3e       	cpi	r24, 0xEC	; 236
    1f96:	2f ef       	ldi	r18, 0xFF	; 255
    1f98:	92 07       	cpc	r25, r18
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <stop+0x56>
	{
		orientation.value = -20;
    1f9c:	8c ee       	ldi	r24, 0xEC	; 236
    1f9e:	9f ef       	ldi	r25, 0xFF	; 255
    1fa0:	9c 87       	std	Y+12, r25	; 0x0c
    1fa2:	8b 87       	std	Y+11, r24	; 0x0b
    1fa4:	0a c0       	rjmp	.+20     	; 0x1fba <stop+0x6a>
	}
	else if (k_value > 20)
    1fa6:	85 31       	cpi	r24, 0x15	; 21
    1fa8:	91 05       	cpc	r25, r1
    1faa:	2c f0       	brlt	.+10     	; 0x1fb6 <stop+0x66>
	{
		orientation.value = 20;
    1fac:	84 e1       	ldi	r24, 0x14	; 20
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 87       	std	Y+12, r25	; 0x0c
    1fb2:	8b 87       	std	Y+11, r24	; 0x0b
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <stop+0x6a>
	}
	else
	{
		orientation.value = k_value;
    1fb6:	9c 87       	std	Y+12, r25	; 0x0c
    1fb8:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Set MFs
	struct mf_type off_right;
	MATLAB_MF(&off_right, "off_right", -21, -20, -20, -5);
    1fba:	5e 01       	movw	r10, r28
    1fbc:	81 e1       	ldi	r24, 0x11	; 17
    1fbe:	a8 0e       	add	r10, r24
    1fc0:	b1 1c       	adc	r11, r1
    1fc2:	0f 2e       	mov	r0, r31
    1fc4:	fb ef       	ldi	r31, 0xFB	; 251
    1fc6:	ef 2e       	mov	r14, r31
    1fc8:	ff 24       	eor	r15, r15
    1fca:	fa 94       	dec	r15
    1fcc:	f0 2d       	mov	r31, r0
    1fce:	0c ee       	ldi	r16, 0xEC	; 236
    1fd0:	1f ef       	ldi	r17, 0xFF	; 255
    1fd2:	2c ee       	ldi	r18, 0xEC	; 236
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4b ee       	ldi	r20, 0xEB	; 235
    1fd8:	5f ef       	ldi	r21, 0xFF	; 255
    1fda:	66 ef       	ldi	r22, 0xF6	; 246
    1fdc:	71 e0       	ldi	r23, 0x01	; 1
    1fde:	c5 01       	movw	r24, r10
    1fe0:	06 da       	rcall	.-3060   	; 0x13ee <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", -10, 0, 0, 10);
    1fe2:	6e 01       	movw	r12, r28
    1fe4:	e7 e2       	ldi	r30, 0x27	; 39
    1fe6:	ce 0e       	add	r12, r30
    1fe8:	d1 1c       	adc	r13, r1
    1fea:	0f 2e       	mov	r0, r31
    1fec:	fa e0       	ldi	r31, 0x0A	; 10
    1fee:	ef 2e       	mov	r14, r31
    1ff0:	f1 2c       	mov	r15, r1
    1ff2:	f0 2d       	mov	r31, r0
    1ff4:	00 e0       	ldi	r16, 0x00	; 0
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	46 ef       	ldi	r20, 0xF6	; 246
    1ffe:	5f ef       	ldi	r21, 0xFF	; 255
    2000:	6a ed       	ldi	r22, 0xDA	; 218
    2002:	71 e0       	ldi	r23, 0x01	; 1
    2004:	c6 01       	movw	r24, r12
    2006:	f3 d9       	rcall	.-3098   	; 0x13ee <MATLAB_MF>
	struct mf_type off_left;
	MATLAB_MF(&off_left, "off_left", 5, 20, 20, 21);
    2008:	2e 01       	movw	r4, r28
    200a:	fd e3       	ldi	r31, 0x3D	; 61
    200c:	4f 0e       	add	r4, r31
    200e:	51 1c       	adc	r5, r1
    2010:	0f 2e       	mov	r0, r31
    2012:	f5 e1       	ldi	r31, 0x15	; 21
    2014:	ef 2e       	mov	r14, r31
    2016:	f1 2c       	mov	r15, r1
    2018:	f0 2d       	mov	r31, r0
    201a:	04 e1       	ldi	r16, 0x14	; 20
    201c:	10 e0       	ldi	r17, 0x00	; 0
    201e:	24 e1       	ldi	r18, 0x14	; 20
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	45 e0       	ldi	r20, 0x05	; 5
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	72 e0       	ldi	r23, 0x02	; 2
    202a:	c2 01       	movw	r24, r4
    202c:	e0 d9       	rcall	.-3136   	; 0x13ee <MATLAB_MF>

	// Linked list for MFs
	orientation.membership_functions = &off_right;
    202e:	be 86       	std	Y+14, r11	; 0x0e
    2030:	ad 86       	std	Y+13, r10	; 0x0d
	off_right.next = &middle;
    2032:	de a2       	std	Y+38, r13	; 0x26
    2034:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &off_left;
    2036:	5c ae       	std	Y+60, r5	; 0x3c
    2038:	4b ae       	std	Y+59, r4	; 0x3b
	off_left.next = NULL;
    203a:	63 96       	adiw	r28, 0x13	; 19
    203c:	1f ae       	std	Y+63, r1	; 0x3f
    203e:	1e ae       	std	Y+62, r1	; 0x3e
    2040:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    2042:	6e 01       	movw	r12, r28
    2044:	23 e5       	ldi	r18, 0x53	; 83
    2046:	c2 0e       	add	r12, r18
    2048:	d1 1c       	adc	r13, r1
    204a:	86 e0       	ldi	r24, 0x06	; 6
    204c:	e5 ee       	ldi	r30, 0xE5	; 229
    204e:	f1 e0       	ldi	r31, 0x01	; 1
    2050:	d6 01       	movw	r26, r12
    2052:	01 90       	ld	r0, Z+
    2054:	0d 92       	st	X+, r0
    2056:	8a 95       	dec	r24
    2058:	e1 f7       	brne	.-8      	; 0x2052 <stop+0x102>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2600, 2660, 2660, 2720);
    205a:	3e 01       	movw	r6, r28
    205c:	83 e6       	ldi	r24, 0x63	; 99
    205e:	68 0e       	add	r6, r24
    2060:	71 1c       	adc	r7, r1
    2062:	0f 2e       	mov	r0, r31
    2064:	f0 ea       	ldi	r31, 0xA0	; 160
    2066:	ef 2e       	mov	r14, r31
    2068:	fa e0       	ldi	r31, 0x0A	; 10
    206a:	ff 2e       	mov	r15, r31
    206c:	f0 2d       	mov	r31, r0
    206e:	04 e6       	ldi	r16, 0x64	; 100
    2070:	1a e0       	ldi	r17, 0x0A	; 10
    2072:	24 e6       	ldi	r18, 0x64	; 100
    2074:	3a e0       	ldi	r19, 0x0A	; 10
    2076:	48 e2       	ldi	r20, 0x28	; 40
    2078:	5a e0       	ldi	r21, 0x0A	; 10
    207a:	67 e5       	ldi	r22, 0x57	; 87
    207c:	71 e0       	ldi	r23, 0x01	; 1
    207e:	c3 01       	movw	r24, r6
    2080:	b6 d9       	rcall	.-3220   	; 0x13ee <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2800, 2820, 2820, 2840);
    2082:	5e 01       	movw	r10, r28
    2084:	e9 e7       	ldi	r30, 0x79	; 121
    2086:	ae 0e       	add	r10, r30
    2088:	b1 1c       	adc	r11, r1
    208a:	0f 2e       	mov	r0, r31
    208c:	f8 e1       	ldi	r31, 0x18	; 24
    208e:	ef 2e       	mov	r14, r31
    2090:	fb e0       	ldi	r31, 0x0B	; 11
    2092:	ff 2e       	mov	r15, r31
    2094:	f0 2d       	mov	r31, r0
    2096:	04 e0       	ldi	r16, 0x04	; 4
    2098:	1b e0       	ldi	r17, 0x0B	; 11
    209a:	24 e0       	ldi	r18, 0x04	; 4
    209c:	3b e0       	ldi	r19, 0x0B	; 11
    209e:	40 ef       	ldi	r20, 0xF0	; 240
    20a0:	5a e0       	ldi	r21, 0x0A	; 10
    20a2:	6a ef       	ldi	r22, 0xFA	; 250
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	c5 01       	movw	r24, r10
    20a8:	a2 d9       	rcall	.-3260   	; 0x13ee <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2480, 2500, 2500, 2520);
    20aa:	4e 01       	movw	r8, r28
    20ac:	ff e8       	ldi	r31, 0x8F	; 143
    20ae:	8f 0e       	add	r8, r31
    20b0:	91 1c       	adc	r9, r1
    20b2:	0f 2e       	mov	r0, r31
    20b4:	f8 ed       	ldi	r31, 0xD8	; 216
    20b6:	ef 2e       	mov	r14, r31
    20b8:	f9 e0       	ldi	r31, 0x09	; 9
    20ba:	ff 2e       	mov	r15, r31
    20bc:	f0 2d       	mov	r31, r0
    20be:	04 ec       	ldi	r16, 0xC4	; 196
    20c0:	19 e0       	ldi	r17, 0x09	; 9
    20c2:	24 ec       	ldi	r18, 0xC4	; 196
    20c4:	39 e0       	ldi	r19, 0x09	; 9
    20c6:	40 eb       	ldi	r20, 0xB0	; 176
    20c8:	59 e0       	ldi	r21, 0x09	; 9
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	72 e0       	ldi	r23, 0x02	; 2
    20ce:	c4 01       	movw	r24, r8
    20d0:	8e d9       	rcall	.-3300   	; 0x13ee <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    20d2:	f6 01       	movw	r30, r12
    20d4:	75 86       	std	Z+13, r7	; 0x0d
    20d6:	64 86       	std	Z+12, r6	; 0x0c
	straight.next = &left;
    20d8:	f3 01       	movw	r30, r6
    20da:	95 8a       	std	Z+21, r9	; 0x15
    20dc:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &right;
    20de:	f4 01       	movw	r30, r8
    20e0:	b5 8a       	std	Z+21, r11	; 0x15
    20e2:	a4 8a       	std	Z+20, r10	; 0x14
	right.next = NULL;
    20e4:	f5 01       	movw	r30, r10
    20e6:	15 8a       	std	Z+21, r1	; 0x15
    20e8:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &orientation;
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	90 93 2b 03 	sts	0x032B, r25
    20f2:	80 93 2a 03 	sts	0x032A, r24
	orientation.next = NULL;
    20f6:	18 8a       	std	Y+16, r1	; 0x10
    20f8:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    20fa:	d0 92 29 03 	sts	0x0329, r13
    20fe:	c0 92 28 03 	sts	0x0328, r12
	servo.next = NULL;
    2102:	f6 01       	movw	r30, r12
    2104:	17 86       	std	Z+15, r1	; 0x0f
    2106:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    2108:	8c 55       	subi	r24, 0x5C	; 92
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	90 93 2d 03 	sts	0x032D, r25
    2110:	80 93 2c 03 	sts	0x032C, r24
	struct rule_type rule2; rule1.next = &rule2;
    2114:	de 01       	movw	r26, r28
    2116:	a5 55       	subi	r26, 0x55	; 85
    2118:	bf 4f       	sbci	r27, 0xFF	; 255
    211a:	fc 01       	movw	r30, r24
    211c:	b5 83       	std	Z+5, r27	; 0x05
    211e:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    2120:	be 01       	movw	r22, r28
    2122:	6f 54       	subi	r22, 0x4F	; 79
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	15 96       	adiw	r26, 0x05	; 5
    2128:	7c 93       	st	X, r23
    212a:	6e 93       	st	-X, r22
    212c:	14 97       	sbiw	r26, 0x04	; 4
    212e:	fb 01       	movw	r30, r22
    2130:	15 82       	std	Z+5, r1	; 0x05
    2132:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    2134:	ae 01       	movw	r20, r28
    2136:	49 54       	subi	r20, 0x49	; 73
    2138:	5f 4f       	sbci	r21, 0xFF	; 255
    213a:	fc 01       	movw	r30, r24
    213c:	51 83       	std	Z+1, r21	; 0x01
    213e:	40 83       	st	Z, r20
    2140:	fa 01       	movw	r30, r20
    2142:	13 82       	std	Z+3, r1	; 0x03
    2144:	12 82       	std	Z+2, r1	; 0x02
    2146:	9e 01       	movw	r18, r28
    2148:	25 54       	subi	r18, 0x45	; 69
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	fc 01       	movw	r30, r24
    214e:	33 83       	std	Z+3, r19	; 0x03
    2150:	22 83       	std	Z+2, r18	; 0x02
    2152:	f9 01       	movw	r30, r18
    2154:	13 82       	std	Z+3, r1	; 0x03
    2156:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &middle.value; then1.value = &straight.value;
    2158:	84 57       	subi	r24, 0x74	; 116
    215a:	91 09       	sbc	r25, r1
    215c:	fa 01       	movw	r30, r20
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	fa e0       	ldi	r31, 0x0A	; 10
    2164:	6f 0e       	add	r6, r31
    2166:	71 1c       	adc	r7, r1
    2168:	f9 01       	movw	r30, r18
    216a:	71 82       	std	Z+1, r7	; 0x01
    216c:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    216e:	2c 5f       	subi	r18, 0xFC	; 252
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	3c 93       	st	X, r19
    2176:	2e 93       	st	-X, r18
    2178:	f9 01       	movw	r30, r18
    217a:	13 82       	std	Z+3, r1	; 0x03
    217c:	12 82       	std	Z+2, r1	; 0x02
    217e:	8e 56       	subi	r24, 0x6E	; 110
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	13 96       	adiw	r26, 0x03	; 3
    2184:	9c 93       	st	X, r25
    2186:	8e 93       	st	-X, r24
    2188:	12 97       	sbiw	r26, 0x02	; 2
    218a:	fc 01       	movw	r30, r24
    218c:	13 82       	std	Z+3, r1	; 0x03
    218e:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &off_right.value; then2.value = &left.value;
    2190:	4c 59       	subi	r20, 0x9C	; 156
    2192:	51 09       	sbc	r21, r1
    2194:	f9 01       	movw	r30, r18
    2196:	51 83       	std	Z+1, r21	; 0x01
    2198:	40 83       	st	Z, r20
    219a:	fa e0       	ldi	r31, 0x0A	; 10
    219c:	8f 0e       	add	r8, r31
    219e:	91 1c       	adc	r9, r1
    21a0:	fc 01       	movw	r30, r24
    21a2:	91 82       	std	Z+1, r9	; 0x01
    21a4:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    21a6:	04 96       	adiw	r24, 0x04	; 4
    21a8:	fb 01       	movw	r30, r22
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
    21ae:	fc 01       	movw	r30, r24
    21b0:	13 82       	std	Z+3, r1	; 0x03
    21b2:	12 82       	std	Z+2, r1	; 0x02
    21b4:	90 96       	adiw	r26, 0x20	; 32
    21b6:	fb 01       	movw	r30, r22
    21b8:	b3 83       	std	Z+3, r27	; 0x03
    21ba:	a2 83       	std	Z+2, r26	; 0x02
    21bc:	13 96       	adiw	r26, 0x03	; 3
    21be:	1c 92       	st	X, r1
    21c0:	1e 92       	st	-X, r1
    21c2:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &off_left.value; then3.value = &right.value;
    21c4:	fa e0       	ldi	r31, 0x0A	; 10
    21c6:	4f 0e       	add	r4, r31
    21c8:	51 1c       	adc	r5, r1
    21ca:	fc 01       	movw	r30, r24
    21cc:	51 82       	std	Z+1, r5	; 0x01
    21ce:	40 82       	st	Z, r4
    21d0:	fa e0       	ldi	r31, 0x0A	; 10
    21d2:	af 0e       	add	r10, r31
    21d4:	b1 1c       	adc	r11, r1
    21d6:	ad 92       	st	X+, r10
    21d8:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    21da:	0e 94 c4 08 	call	0x1188	; 0x1188 <fuzzification>
	rule_evaluation();
    21de:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <rule_evaluation>
	defuzzification();
    21e2:	3f d8       	rcall	.-3970   	; 0x1262 <defuzzification>
	if (servo.value > MAXLEFT)
    21e4:	f6 01       	movw	r30, r12
    21e6:	82 85       	ldd	r24, Z+10	; 0x0a
    21e8:	93 85       	ldd	r25, Z+11	; 0x0b
    21ea:	87 3e       	cpi	r24, 0xE7	; 231
    21ec:	f7 e0       	ldi	r31, 0x07	; 7
    21ee:	9f 07       	cpc	r25, r31
    21f0:	24 f0       	brlt	.+8      	; 0x21fa <stop+0x2aa>
	{
		setServo(MAXLEFT);
    21f2:	86 ee       	ldi	r24, 0xE6	; 230
    21f4:	97 e0       	ldi	r25, 0x07	; 7
    21f6:	33 dd       	rcall	.-1434   	; 0x1c5e <setServo>
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <stop+0x2bc>
	}
	else if (servo.value < MAXRIGHT)
    21fa:	84 3e       	cpi	r24, 0xE4	; 228
    21fc:	2c e0       	ldi	r18, 0x0C	; 12
    21fe:	92 07       	cpc	r25, r18
    2200:	24 f4       	brge	.+8      	; 0x220a <stop+0x2ba>
	{
		setServo(MAXRIGHT);
    2202:	84 ee       	ldi	r24, 0xE4	; 228
    2204:	9c e0       	ldi	r25, 0x0C	; 12
    2206:	2b dd       	rcall	.-1450   	; 0x1c5e <setServo>
    2208:	01 c0       	rjmp	.+2      	; 0x220c <stop+0x2bc>
	}
	else
	{
		setServo(servo.value);
    220a:	29 dd       	rcall	.-1454   	; 0x1c5e <setServo>
	}
	
    220c:	c2 53       	subi	r28, 0x32	; 50
    220e:	df 4f       	sbci	r29, 0xFF	; 255
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	9f 90       	pop	r9
    2230:	8f 90       	pop	r8
    2232:	7f 90       	pop	r7
    2234:	6f 90       	pop	r6
    2236:	5f 90       	pop	r5
    2238:	4f 90       	pop	r4
    223a:	08 95       	ret

0000223c <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	0b b6       	in	r0, 0x3b	; 59
    2248:	0f 92       	push	r0
    224a:	2f 93       	push	r18
    224c:	3f 93       	push	r19
    224e:	4f 93       	push	r20
    2250:	8f 93       	push	r24
    2252:	9f 93       	push	r25
    2254:	af 93       	push	r26
    2256:	bf 93       	push	r27
    2258:	ef 93       	push	r30
    225a:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    225c:	80 91 26 03 	lds	r24, 0x0326
    2260:	90 91 27 03 	lds	r25, 0x0327
    2264:	80 34       	cpi	r24, 0x40	; 64
    2266:	91 05       	cpc	r25, r1
    2268:	31 f4       	brne	.+12     	; 0x2276 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	80 93 52 03 	sts	0x0352, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    2270:	80 91 c6 00 	lds	r24, 0x00C6
    2274:	16 c0       	rjmp	.+44     	; 0x22a2 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    2276:	80 34       	cpi	r24, 0x40	; 64
    2278:	91 05       	cpc	r25, r1
    227a:	e8 f4       	brcc	.+58     	; 0x22b6 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    227c:	e4 e2       	ldi	r30, 0x24	; 36
    227e:	f3 e0       	ldi	r31, 0x03	; 3
    2280:	20 81       	ld	r18, Z
    2282:	31 81       	ldd	r19, Z+1	; 0x01
    2284:	40 91 c6 00 	lds	r20, 0x00C6
    2288:	d9 01       	movw	r26, r18
    228a:	ae 51       	subi	r26, 0x1E	; 30
    228c:	bd 4f       	sbci	r27, 0xFD	; 253
    228e:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	31 83       	std	Z+1, r19	; 0x01
    2296:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	90 93 27 03 	sts	0x0327, r25
    229e:	80 93 26 03 	sts	0x0326, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    22a2:	80 91 26 03 	lds	r24, 0x0326
    22a6:	90 91 27 03 	lds	r25, 0x0327
    22aa:	80 34       	cpi	r24, 0x40	; 64
    22ac:	91 05       	cpc	r25, r1
    22ae:	19 f4       	brne	.+6      	; 0x22b6 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 50 03 	sts	0x0350, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    22b6:	80 91 24 03 	lds	r24, 0x0324
    22ba:	90 91 25 03 	lds	r25, 0x0325
    22be:	80 34       	cpi	r24, 0x40	; 64
    22c0:	91 05       	cpc	r25, r1
    22c2:	21 f4       	brne	.+8      	; 0x22cc <__vector_20+0x90>
		rx_uart0.i_last = 0;
    22c4:	10 92 25 03 	sts	0x0325, r1
    22c8:	10 92 24 03 	sts	0x0324, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 4f 03 	sts	0x034F, r24
}
    22d2:	ff 91       	pop	r31
    22d4:	ef 91       	pop	r30
    22d6:	bf 91       	pop	r27
    22d8:	af 91       	pop	r26
    22da:	9f 91       	pop	r25
    22dc:	8f 91       	pop	r24
    22de:	4f 91       	pop	r20
    22e0:	3f 91       	pop	r19
    22e2:	2f 91       	pop	r18
    22e4:	0f 90       	pop	r0
    22e6:	0b be       	out	0x3b, r0	; 59
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	0f 90       	pop	r0
    22ee:	1f 90       	pop	r1
    22f0:	18 95       	reti

000022f2 <__vector_22>:




ISR(USART0_TX_vect)
{
    22f2:	1f 92       	push	r1
    22f4:	0f 92       	push	r0
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	0f 92       	push	r0
    22fa:	11 24       	eor	r1, r1
    22fc:	0b b6       	in	r0, 0x3b	; 59
    22fe:	0f 92       	push	r0
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	ef 93       	push	r30
    2306:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    2308:	80 91 e0 02 	lds	r24, 0x02E0
    230c:	90 91 e1 02 	lds	r25, 0x02E1
    2310:	80 34       	cpi	r24, 0x40	; 64
    2312:	91 05       	cpc	r25, r1
    2314:	19 f4       	brne	.+6      	; 0x231c <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    2316:	10 92 4e 03 	sts	0x034E, r1
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    231c:	89 2b       	or	r24, r25
    231e:	b9 f0       	breq	.+46     	; 0x234e <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    2320:	e0 91 dc 02 	lds	r30, 0x02DC
    2324:	f0 91 dd 02 	lds	r31, 0x02DD
    2328:	e4 56       	subi	r30, 0x64	; 100
    232a:	fd 4f       	sbci	r31, 0xFD	; 253
    232c:	80 81       	ld	r24, Z
    232e:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    2332:	ec ed       	ldi	r30, 0xDC	; 220
    2334:	f2 e0       	ldi	r31, 0x02	; 2
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    2340:	e0 ee       	ldi	r30, 0xE0	; 224
    2342:	f2 e0       	ldi	r31, 0x02	; 2
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    234e:	80 91 dc 02 	lds	r24, 0x02DC
    2352:	90 91 dd 02 	lds	r25, 0x02DD
    2356:	80 34       	cpi	r24, 0x40	; 64
    2358:	91 05       	cpc	r25, r1
    235a:	21 f4       	brne	.+8      	; 0x2364 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    235c:	10 92 dd 02 	sts	0x02DD, r1
    2360:	10 92 dc 02 	sts	0x02DC, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    2364:	80 91 e0 02 	lds	r24, 0x02E0
    2368:	90 91 e1 02 	lds	r25, 0x02E1
    236c:	89 2b       	or	r24, r25
    236e:	39 f4       	brne	.+14     	; 0x237e <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    2370:	10 92 51 03 	sts	0x0351, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    2374:	e1 ec       	ldi	r30, 0xC1	; 193
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8f 7b       	andi	r24, 0xBF	; 191
    237c:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    237e:	ff 91       	pop	r31
    2380:	ef 91       	pop	r30
    2382:	9f 91       	pop	r25
    2384:	8f 91       	pop	r24
    2386:	0f 90       	pop	r0
    2388:	0b be       	out	0x3b, r0	; 59
    238a:	0f 90       	pop	r0
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	0f 90       	pop	r0
    2390:	1f 90       	pop	r1
    2392:	18 95       	reti

00002394 <__subsf3>:
    2394:	50 58       	subi	r21, 0x80	; 128

00002396 <__addsf3>:
    2396:	bb 27       	eor	r27, r27
    2398:	aa 27       	eor	r26, r26
    239a:	0e d0       	rcall	.+28     	; 0x23b8 <__addsf3x>
    239c:	4d c1       	rjmp	.+666    	; 0x2638 <__fp_round>
    239e:	3e d1       	rcall	.+636    	; 0x261c <__fp_pscA>
    23a0:	30 f0       	brcs	.+12     	; 0x23ae <__addsf3+0x18>
    23a2:	43 d1       	rcall	.+646    	; 0x262a <__fp_pscB>
    23a4:	20 f0       	brcs	.+8      	; 0x23ae <__addsf3+0x18>
    23a6:	31 f4       	brne	.+12     	; 0x23b4 <__addsf3+0x1e>
    23a8:	9f 3f       	cpi	r25, 0xFF	; 255
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <__addsf3+0x1a>
    23ac:	1e f4       	brtc	.+6      	; 0x23b4 <__addsf3+0x1e>
    23ae:	33 c1       	rjmp	.+614    	; 0x2616 <__fp_nan>
    23b0:	0e f4       	brtc	.+2      	; 0x23b4 <__addsf3+0x1e>
    23b2:	e0 95       	com	r30
    23b4:	e7 fb       	bst	r30, 7
    23b6:	29 c1       	rjmp	.+594    	; 0x260a <__fp_inf>

000023b8 <__addsf3x>:
    23b8:	e9 2f       	mov	r30, r25
    23ba:	4f d1       	rcall	.+670    	; 0x265a <__fp_split3>
    23bc:	80 f3       	brcs	.-32     	; 0x239e <__addsf3+0x8>
    23be:	ba 17       	cp	r27, r26
    23c0:	62 07       	cpc	r22, r18
    23c2:	73 07       	cpc	r23, r19
    23c4:	84 07       	cpc	r24, r20
    23c6:	95 07       	cpc	r25, r21
    23c8:	18 f0       	brcs	.+6      	; 0x23d0 <__addsf3x+0x18>
    23ca:	71 f4       	brne	.+28     	; 0x23e8 <__addsf3x+0x30>
    23cc:	9e f5       	brtc	.+102    	; 0x2434 <__addsf3x+0x7c>
    23ce:	67 c1       	rjmp	.+718    	; 0x269e <__fp_zero>
    23d0:	0e f4       	brtc	.+2      	; 0x23d4 <__addsf3x+0x1c>
    23d2:	e0 95       	com	r30
    23d4:	0b 2e       	mov	r0, r27
    23d6:	ba 2f       	mov	r27, r26
    23d8:	a0 2d       	mov	r26, r0
    23da:	0b 01       	movw	r0, r22
    23dc:	b9 01       	movw	r22, r18
    23de:	90 01       	movw	r18, r0
    23e0:	0c 01       	movw	r0, r24
    23e2:	ca 01       	movw	r24, r20
    23e4:	a0 01       	movw	r20, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	ff 27       	eor	r31, r31
    23ea:	59 1b       	sub	r21, r25
    23ec:	99 f0       	breq	.+38     	; 0x2414 <__addsf3x+0x5c>
    23ee:	59 3f       	cpi	r21, 0xF9	; 249
    23f0:	50 f4       	brcc	.+20     	; 0x2406 <__addsf3x+0x4e>
    23f2:	50 3e       	cpi	r21, 0xE0	; 224
    23f4:	68 f1       	brcs	.+90     	; 0x2450 <__addsf3x+0x98>
    23f6:	1a 16       	cp	r1, r26
    23f8:	f0 40       	sbci	r31, 0x00	; 0
    23fa:	a2 2f       	mov	r26, r18
    23fc:	23 2f       	mov	r18, r19
    23fe:	34 2f       	mov	r19, r20
    2400:	44 27       	eor	r20, r20
    2402:	58 5f       	subi	r21, 0xF8	; 248
    2404:	f3 cf       	rjmp	.-26     	; 0x23ec <__addsf3x+0x34>
    2406:	46 95       	lsr	r20
    2408:	37 95       	ror	r19
    240a:	27 95       	ror	r18
    240c:	a7 95       	ror	r26
    240e:	f0 40       	sbci	r31, 0x00	; 0
    2410:	53 95       	inc	r21
    2412:	c9 f7       	brne	.-14     	; 0x2406 <__addsf3x+0x4e>
    2414:	7e f4       	brtc	.+30     	; 0x2434 <__addsf3x+0x7c>
    2416:	1f 16       	cp	r1, r31
    2418:	ba 0b       	sbc	r27, r26
    241a:	62 0b       	sbc	r22, r18
    241c:	73 0b       	sbc	r23, r19
    241e:	84 0b       	sbc	r24, r20
    2420:	ba f0       	brmi	.+46     	; 0x2450 <__addsf3x+0x98>
    2422:	91 50       	subi	r25, 0x01	; 1
    2424:	a1 f0       	breq	.+40     	; 0x244e <__addsf3x+0x96>
    2426:	ff 0f       	add	r31, r31
    2428:	bb 1f       	adc	r27, r27
    242a:	66 1f       	adc	r22, r22
    242c:	77 1f       	adc	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	c2 f7       	brpl	.-16     	; 0x2422 <__addsf3x+0x6a>
    2432:	0e c0       	rjmp	.+28     	; 0x2450 <__addsf3x+0x98>
    2434:	ba 0f       	add	r27, r26
    2436:	62 1f       	adc	r22, r18
    2438:	73 1f       	adc	r23, r19
    243a:	84 1f       	adc	r24, r20
    243c:	48 f4       	brcc	.+18     	; 0x2450 <__addsf3x+0x98>
    243e:	87 95       	ror	r24
    2440:	77 95       	ror	r23
    2442:	67 95       	ror	r22
    2444:	b7 95       	ror	r27
    2446:	f7 95       	ror	r31
    2448:	9e 3f       	cpi	r25, 0xFE	; 254
    244a:	08 f0       	brcs	.+2      	; 0x244e <__addsf3x+0x96>
    244c:	b3 cf       	rjmp	.-154    	; 0x23b4 <__addsf3+0x1e>
    244e:	93 95       	inc	r25
    2450:	88 0f       	add	r24, r24
    2452:	08 f0       	brcs	.+2      	; 0x2456 <__addsf3x+0x9e>
    2454:	99 27       	eor	r25, r25
    2456:	ee 0f       	add	r30, r30
    2458:	97 95       	ror	r25
    245a:	87 95       	ror	r24
    245c:	08 95       	ret

0000245e <__divsf3>:
    245e:	0c d0       	rcall	.+24     	; 0x2478 <__divsf3x>
    2460:	eb c0       	rjmp	.+470    	; 0x2638 <__fp_round>
    2462:	e3 d0       	rcall	.+454    	; 0x262a <__fp_pscB>
    2464:	40 f0       	brcs	.+16     	; 0x2476 <__divsf3+0x18>
    2466:	da d0       	rcall	.+436    	; 0x261c <__fp_pscA>
    2468:	30 f0       	brcs	.+12     	; 0x2476 <__divsf3+0x18>
    246a:	21 f4       	brne	.+8      	; 0x2474 <__divsf3+0x16>
    246c:	5f 3f       	cpi	r21, 0xFF	; 255
    246e:	19 f0       	breq	.+6      	; 0x2476 <__divsf3+0x18>
    2470:	cc c0       	rjmp	.+408    	; 0x260a <__fp_inf>
    2472:	51 11       	cpse	r21, r1
    2474:	15 c1       	rjmp	.+554    	; 0x26a0 <__fp_szero>
    2476:	cf c0       	rjmp	.+414    	; 0x2616 <__fp_nan>

00002478 <__divsf3x>:
    2478:	f0 d0       	rcall	.+480    	; 0x265a <__fp_split3>
    247a:	98 f3       	brcs	.-26     	; 0x2462 <__divsf3+0x4>

0000247c <__divsf3_pse>:
    247c:	99 23       	and	r25, r25
    247e:	c9 f3       	breq	.-14     	; 0x2472 <__divsf3+0x14>
    2480:	55 23       	and	r21, r21
    2482:	b1 f3       	breq	.-20     	; 0x2470 <__divsf3+0x12>
    2484:	95 1b       	sub	r25, r21
    2486:	55 0b       	sbc	r21, r21
    2488:	bb 27       	eor	r27, r27
    248a:	aa 27       	eor	r26, r26
    248c:	62 17       	cp	r22, r18
    248e:	73 07       	cpc	r23, r19
    2490:	84 07       	cpc	r24, r20
    2492:	38 f0       	brcs	.+14     	; 0x24a2 <__divsf3_pse+0x26>
    2494:	9f 5f       	subi	r25, 0xFF	; 255
    2496:	5f 4f       	sbci	r21, 0xFF	; 255
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	44 1f       	adc	r20, r20
    249e:	aa 1f       	adc	r26, r26
    24a0:	a9 f3       	breq	.-22     	; 0x248c <__divsf3_pse+0x10>
    24a2:	33 d0       	rcall	.+102    	; 0x250a <__divsf3_pse+0x8e>
    24a4:	0e 2e       	mov	r0, r30
    24a6:	3a f0       	brmi	.+14     	; 0x24b6 <__divsf3_pse+0x3a>
    24a8:	e0 e8       	ldi	r30, 0x80	; 128
    24aa:	30 d0       	rcall	.+96     	; 0x250c <__divsf3_pse+0x90>
    24ac:	91 50       	subi	r25, 0x01	; 1
    24ae:	50 40       	sbci	r21, 0x00	; 0
    24b0:	e6 95       	lsr	r30
    24b2:	00 1c       	adc	r0, r0
    24b4:	ca f7       	brpl	.-14     	; 0x24a8 <__divsf3_pse+0x2c>
    24b6:	29 d0       	rcall	.+82     	; 0x250a <__divsf3_pse+0x8e>
    24b8:	fe 2f       	mov	r31, r30
    24ba:	27 d0       	rcall	.+78     	; 0x250a <__divsf3_pse+0x8e>
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	88 1f       	adc	r24, r24
    24c2:	bb 1f       	adc	r27, r27
    24c4:	26 17       	cp	r18, r22
    24c6:	37 07       	cpc	r19, r23
    24c8:	48 07       	cpc	r20, r24
    24ca:	ab 07       	cpc	r26, r27
    24cc:	b0 e8       	ldi	r27, 0x80	; 128
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <__divsf3_pse+0x56>
    24d0:	bb 0b       	sbc	r27, r27
    24d2:	80 2d       	mov	r24, r0
    24d4:	bf 01       	movw	r22, r30
    24d6:	ff 27       	eor	r31, r31
    24d8:	93 58       	subi	r25, 0x83	; 131
    24da:	5f 4f       	sbci	r21, 0xFF	; 255
    24dc:	2a f0       	brmi	.+10     	; 0x24e8 <__divsf3_pse+0x6c>
    24de:	9e 3f       	cpi	r25, 0xFE	; 254
    24e0:	51 05       	cpc	r21, r1
    24e2:	68 f0       	brcs	.+26     	; 0x24fe <__divsf3_pse+0x82>
    24e4:	92 c0       	rjmp	.+292    	; 0x260a <__fp_inf>
    24e6:	dc c0       	rjmp	.+440    	; 0x26a0 <__fp_szero>
    24e8:	5f 3f       	cpi	r21, 0xFF	; 255
    24ea:	ec f3       	brlt	.-6      	; 0x24e6 <__divsf3_pse+0x6a>
    24ec:	98 3e       	cpi	r25, 0xE8	; 232
    24ee:	dc f3       	brlt	.-10     	; 0x24e6 <__divsf3_pse+0x6a>
    24f0:	86 95       	lsr	r24
    24f2:	77 95       	ror	r23
    24f4:	67 95       	ror	r22
    24f6:	b7 95       	ror	r27
    24f8:	f7 95       	ror	r31
    24fa:	9f 5f       	subi	r25, 0xFF	; 255
    24fc:	c9 f7       	brne	.-14     	; 0x24f0 <__divsf3_pse+0x74>
    24fe:	88 0f       	add	r24, r24
    2500:	91 1d       	adc	r25, r1
    2502:	96 95       	lsr	r25
    2504:	87 95       	ror	r24
    2506:	97 f9       	bld	r25, 7
    2508:	08 95       	ret
    250a:	e1 e0       	ldi	r30, 0x01	; 1
    250c:	66 0f       	add	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	bb 1f       	adc	r27, r27
    2514:	62 17       	cp	r22, r18
    2516:	73 07       	cpc	r23, r19
    2518:	84 07       	cpc	r24, r20
    251a:	ba 07       	cpc	r27, r26
    251c:	20 f0       	brcs	.+8      	; 0x2526 <__divsf3_pse+0xaa>
    251e:	62 1b       	sub	r22, r18
    2520:	73 0b       	sbc	r23, r19
    2522:	84 0b       	sbc	r24, r20
    2524:	ba 0b       	sbc	r27, r26
    2526:	ee 1f       	adc	r30, r30
    2528:	88 f7       	brcc	.-30     	; 0x250c <__divsf3_pse+0x90>
    252a:	e0 95       	com	r30
    252c:	08 95       	ret

0000252e <__fixsfsi>:
    252e:	04 d0       	rcall	.+8      	; 0x2538 <__fixunssfsi>
    2530:	68 94       	set
    2532:	b1 11       	cpse	r27, r1
    2534:	b5 c0       	rjmp	.+362    	; 0x26a0 <__fp_szero>
    2536:	08 95       	ret

00002538 <__fixunssfsi>:
    2538:	98 d0       	rcall	.+304    	; 0x266a <__fp_splitA>
    253a:	88 f0       	brcs	.+34     	; 0x255e <__fixunssfsi+0x26>
    253c:	9f 57       	subi	r25, 0x7F	; 127
    253e:	90 f0       	brcs	.+36     	; 0x2564 <__fixunssfsi+0x2c>
    2540:	b9 2f       	mov	r27, r25
    2542:	99 27       	eor	r25, r25
    2544:	b7 51       	subi	r27, 0x17	; 23
    2546:	a0 f0       	brcs	.+40     	; 0x2570 <__fixunssfsi+0x38>
    2548:	d1 f0       	breq	.+52     	; 0x257e <__fixunssfsi+0x46>
    254a:	66 0f       	add	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	88 1f       	adc	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	1a f0       	brmi	.+6      	; 0x255a <__fixunssfsi+0x22>
    2554:	ba 95       	dec	r27
    2556:	c9 f7       	brne	.-14     	; 0x254a <__fixunssfsi+0x12>
    2558:	12 c0       	rjmp	.+36     	; 0x257e <__fixunssfsi+0x46>
    255a:	b1 30       	cpi	r27, 0x01	; 1
    255c:	81 f0       	breq	.+32     	; 0x257e <__fixunssfsi+0x46>
    255e:	9f d0       	rcall	.+318    	; 0x269e <__fp_zero>
    2560:	b1 e0       	ldi	r27, 0x01	; 1
    2562:	08 95       	ret
    2564:	9c c0       	rjmp	.+312    	; 0x269e <__fp_zero>
    2566:	67 2f       	mov	r22, r23
    2568:	78 2f       	mov	r23, r24
    256a:	88 27       	eor	r24, r24
    256c:	b8 5f       	subi	r27, 0xF8	; 248
    256e:	39 f0       	breq	.+14     	; 0x257e <__fixunssfsi+0x46>
    2570:	b9 3f       	cpi	r27, 0xF9	; 249
    2572:	cc f3       	brlt	.-14     	; 0x2566 <__fixunssfsi+0x2e>
    2574:	86 95       	lsr	r24
    2576:	77 95       	ror	r23
    2578:	67 95       	ror	r22
    257a:	b3 95       	inc	r27
    257c:	d9 f7       	brne	.-10     	; 0x2574 <__fixunssfsi+0x3c>
    257e:	3e f4       	brtc	.+14     	; 0x258e <__fixunssfsi+0x56>
    2580:	90 95       	com	r25
    2582:	80 95       	com	r24
    2584:	70 95       	com	r23
    2586:	61 95       	neg	r22
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	8f 4f       	sbci	r24, 0xFF	; 255
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	08 95       	ret

00002590 <__floatunsisf>:
    2590:	e8 94       	clt
    2592:	09 c0       	rjmp	.+18     	; 0x25a6 <__floatsisf+0x12>

00002594 <__floatsisf>:
    2594:	97 fb       	bst	r25, 7
    2596:	3e f4       	brtc	.+14     	; 0x25a6 <__floatsisf+0x12>
    2598:	90 95       	com	r25
    259a:	80 95       	com	r24
    259c:	70 95       	com	r23
    259e:	61 95       	neg	r22
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	8f 4f       	sbci	r24, 0xFF	; 255
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	99 23       	and	r25, r25
    25a8:	a9 f0       	breq	.+42     	; 0x25d4 <__floatsisf+0x40>
    25aa:	f9 2f       	mov	r31, r25
    25ac:	96 e9       	ldi	r25, 0x96	; 150
    25ae:	bb 27       	eor	r27, r27
    25b0:	93 95       	inc	r25
    25b2:	f6 95       	lsr	r31
    25b4:	87 95       	ror	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	b7 95       	ror	r27
    25bc:	f1 11       	cpse	r31, r1
    25be:	f8 cf       	rjmp	.-16     	; 0x25b0 <__floatsisf+0x1c>
    25c0:	fa f4       	brpl	.+62     	; 0x2600 <__floatsisf+0x6c>
    25c2:	bb 0f       	add	r27, r27
    25c4:	11 f4       	brne	.+4      	; 0x25ca <__floatsisf+0x36>
    25c6:	60 ff       	sbrs	r22, 0
    25c8:	1b c0       	rjmp	.+54     	; 0x2600 <__floatsisf+0x6c>
    25ca:	6f 5f       	subi	r22, 0xFF	; 255
    25cc:	7f 4f       	sbci	r23, 0xFF	; 255
    25ce:	8f 4f       	sbci	r24, 0xFF	; 255
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	16 c0       	rjmp	.+44     	; 0x2600 <__floatsisf+0x6c>
    25d4:	88 23       	and	r24, r24
    25d6:	11 f0       	breq	.+4      	; 0x25dc <__floatsisf+0x48>
    25d8:	96 e9       	ldi	r25, 0x96	; 150
    25da:	11 c0       	rjmp	.+34     	; 0x25fe <__floatsisf+0x6a>
    25dc:	77 23       	and	r23, r23
    25de:	21 f0       	breq	.+8      	; 0x25e8 <__floatsisf+0x54>
    25e0:	9e e8       	ldi	r25, 0x8E	; 142
    25e2:	87 2f       	mov	r24, r23
    25e4:	76 2f       	mov	r23, r22
    25e6:	05 c0       	rjmp	.+10     	; 0x25f2 <__floatsisf+0x5e>
    25e8:	66 23       	and	r22, r22
    25ea:	71 f0       	breq	.+28     	; 0x2608 <__floatsisf+0x74>
    25ec:	96 e8       	ldi	r25, 0x86	; 134
    25ee:	86 2f       	mov	r24, r22
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	2a f0       	brmi	.+10     	; 0x2600 <__floatsisf+0x6c>
    25f6:	9a 95       	dec	r25
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	da f7       	brpl	.-10     	; 0x25f6 <__floatsisf+0x62>
    2600:	88 0f       	add	r24, r24
    2602:	96 95       	lsr	r25
    2604:	87 95       	ror	r24
    2606:	97 f9       	bld	r25, 7
    2608:	08 95       	ret

0000260a <__fp_inf>:
    260a:	97 f9       	bld	r25, 7
    260c:	9f 67       	ori	r25, 0x7F	; 127
    260e:	80 e8       	ldi	r24, 0x80	; 128
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	08 95       	ret

00002616 <__fp_nan>:
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	80 ec       	ldi	r24, 0xC0	; 192
    261a:	08 95       	ret

0000261c <__fp_pscA>:
    261c:	00 24       	eor	r0, r0
    261e:	0a 94       	dec	r0
    2620:	16 16       	cp	r1, r22
    2622:	17 06       	cpc	r1, r23
    2624:	18 06       	cpc	r1, r24
    2626:	09 06       	cpc	r0, r25
    2628:	08 95       	ret

0000262a <__fp_pscB>:
    262a:	00 24       	eor	r0, r0
    262c:	0a 94       	dec	r0
    262e:	12 16       	cp	r1, r18
    2630:	13 06       	cpc	r1, r19
    2632:	14 06       	cpc	r1, r20
    2634:	05 06       	cpc	r0, r21
    2636:	08 95       	ret

00002638 <__fp_round>:
    2638:	09 2e       	mov	r0, r25
    263a:	03 94       	inc	r0
    263c:	00 0c       	add	r0, r0
    263e:	11 f4       	brne	.+4      	; 0x2644 <__fp_round+0xc>
    2640:	88 23       	and	r24, r24
    2642:	52 f0       	brmi	.+20     	; 0x2658 <__fp_round+0x20>
    2644:	bb 0f       	add	r27, r27
    2646:	40 f4       	brcc	.+16     	; 0x2658 <__fp_round+0x20>
    2648:	bf 2b       	or	r27, r31
    264a:	11 f4       	brne	.+4      	; 0x2650 <__fp_round+0x18>
    264c:	60 ff       	sbrs	r22, 0
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <__fp_round+0x20>
    2650:	6f 5f       	subi	r22, 0xFF	; 255
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	8f 4f       	sbci	r24, 0xFF	; 255
    2656:	9f 4f       	sbci	r25, 0xFF	; 255
    2658:	08 95       	ret

0000265a <__fp_split3>:
    265a:	57 fd       	sbrc	r21, 7
    265c:	90 58       	subi	r25, 0x80	; 128
    265e:	44 0f       	add	r20, r20
    2660:	55 1f       	adc	r21, r21
    2662:	59 f0       	breq	.+22     	; 0x267a <__fp_splitA+0x10>
    2664:	5f 3f       	cpi	r21, 0xFF	; 255
    2666:	71 f0       	breq	.+28     	; 0x2684 <__fp_splitA+0x1a>
    2668:	47 95       	ror	r20

0000266a <__fp_splitA>:
    266a:	88 0f       	add	r24, r24
    266c:	97 fb       	bst	r25, 7
    266e:	99 1f       	adc	r25, r25
    2670:	61 f0       	breq	.+24     	; 0x268a <__fp_splitA+0x20>
    2672:	9f 3f       	cpi	r25, 0xFF	; 255
    2674:	79 f0       	breq	.+30     	; 0x2694 <__fp_splitA+0x2a>
    2676:	87 95       	ror	r24
    2678:	08 95       	ret
    267a:	12 16       	cp	r1, r18
    267c:	13 06       	cpc	r1, r19
    267e:	14 06       	cpc	r1, r20
    2680:	55 1f       	adc	r21, r21
    2682:	f2 cf       	rjmp	.-28     	; 0x2668 <__fp_split3+0xe>
    2684:	46 95       	lsr	r20
    2686:	f1 df       	rcall	.-30     	; 0x266a <__fp_splitA>
    2688:	08 c0       	rjmp	.+16     	; 0x269a <__fp_splitA+0x30>
    268a:	16 16       	cp	r1, r22
    268c:	17 06       	cpc	r1, r23
    268e:	18 06       	cpc	r1, r24
    2690:	99 1f       	adc	r25, r25
    2692:	f1 cf       	rjmp	.-30     	; 0x2676 <__fp_splitA+0xc>
    2694:	86 95       	lsr	r24
    2696:	71 05       	cpc	r23, r1
    2698:	61 05       	cpc	r22, r1
    269a:	08 94       	sec
    269c:	08 95       	ret

0000269e <__fp_zero>:
    269e:	e8 94       	clt

000026a0 <__fp_szero>:
    26a0:	bb 27       	eor	r27, r27
    26a2:	66 27       	eor	r22, r22
    26a4:	77 27       	eor	r23, r23
    26a6:	cb 01       	movw	r24, r22
    26a8:	97 f9       	bld	r25, 7
    26aa:	08 95       	ret

000026ac <__mulsf3>:
    26ac:	0b d0       	rcall	.+22     	; 0x26c4 <__mulsf3x>
    26ae:	c4 cf       	rjmp	.-120    	; 0x2638 <__fp_round>
    26b0:	b5 df       	rcall	.-150    	; 0x261c <__fp_pscA>
    26b2:	28 f0       	brcs	.+10     	; 0x26be <__mulsf3+0x12>
    26b4:	ba df       	rcall	.-140    	; 0x262a <__fp_pscB>
    26b6:	18 f0       	brcs	.+6      	; 0x26be <__mulsf3+0x12>
    26b8:	95 23       	and	r25, r21
    26ba:	09 f0       	breq	.+2      	; 0x26be <__mulsf3+0x12>
    26bc:	a6 cf       	rjmp	.-180    	; 0x260a <__fp_inf>
    26be:	ab cf       	rjmp	.-170    	; 0x2616 <__fp_nan>
    26c0:	11 24       	eor	r1, r1
    26c2:	ee cf       	rjmp	.-36     	; 0x26a0 <__fp_szero>

000026c4 <__mulsf3x>:
    26c4:	ca df       	rcall	.-108    	; 0x265a <__fp_split3>
    26c6:	a0 f3       	brcs	.-24     	; 0x26b0 <__mulsf3+0x4>

000026c8 <__mulsf3_pse>:
    26c8:	95 9f       	mul	r25, r21
    26ca:	d1 f3       	breq	.-12     	; 0x26c0 <__mulsf3+0x14>
    26cc:	95 0f       	add	r25, r21
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	55 1f       	adc	r21, r21
    26d2:	62 9f       	mul	r22, r18
    26d4:	f0 01       	movw	r30, r0
    26d6:	72 9f       	mul	r23, r18
    26d8:	bb 27       	eor	r27, r27
    26da:	f0 0d       	add	r31, r0
    26dc:	b1 1d       	adc	r27, r1
    26de:	63 9f       	mul	r22, r19
    26e0:	aa 27       	eor	r26, r26
    26e2:	f0 0d       	add	r31, r0
    26e4:	b1 1d       	adc	r27, r1
    26e6:	aa 1f       	adc	r26, r26
    26e8:	64 9f       	mul	r22, r20
    26ea:	66 27       	eor	r22, r22
    26ec:	b0 0d       	add	r27, r0
    26ee:	a1 1d       	adc	r26, r1
    26f0:	66 1f       	adc	r22, r22
    26f2:	82 9f       	mul	r24, r18
    26f4:	22 27       	eor	r18, r18
    26f6:	b0 0d       	add	r27, r0
    26f8:	a1 1d       	adc	r26, r1
    26fa:	62 1f       	adc	r22, r18
    26fc:	73 9f       	mul	r23, r19
    26fe:	b0 0d       	add	r27, r0
    2700:	a1 1d       	adc	r26, r1
    2702:	62 1f       	adc	r22, r18
    2704:	83 9f       	mul	r24, r19
    2706:	a0 0d       	add	r26, r0
    2708:	61 1d       	adc	r22, r1
    270a:	22 1f       	adc	r18, r18
    270c:	74 9f       	mul	r23, r20
    270e:	33 27       	eor	r19, r19
    2710:	a0 0d       	add	r26, r0
    2712:	61 1d       	adc	r22, r1
    2714:	23 1f       	adc	r18, r19
    2716:	84 9f       	mul	r24, r20
    2718:	60 0d       	add	r22, r0
    271a:	21 1d       	adc	r18, r1
    271c:	82 2f       	mov	r24, r18
    271e:	76 2f       	mov	r23, r22
    2720:	6a 2f       	mov	r22, r26
    2722:	11 24       	eor	r1, r1
    2724:	9f 57       	subi	r25, 0x7F	; 127
    2726:	50 40       	sbci	r21, 0x00	; 0
    2728:	8a f0       	brmi	.+34     	; 0x274c <__mulsf3_pse+0x84>
    272a:	e1 f0       	breq	.+56     	; 0x2764 <__mulsf3_pse+0x9c>
    272c:	88 23       	and	r24, r24
    272e:	4a f0       	brmi	.+18     	; 0x2742 <__mulsf3_pse+0x7a>
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	bb 1f       	adc	r27, r27
    2736:	66 1f       	adc	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	91 50       	subi	r25, 0x01	; 1
    273e:	50 40       	sbci	r21, 0x00	; 0
    2740:	a9 f7       	brne	.-22     	; 0x272c <__mulsf3_pse+0x64>
    2742:	9e 3f       	cpi	r25, 0xFE	; 254
    2744:	51 05       	cpc	r21, r1
    2746:	70 f0       	brcs	.+28     	; 0x2764 <__mulsf3_pse+0x9c>
    2748:	60 cf       	rjmp	.-320    	; 0x260a <__fp_inf>
    274a:	aa cf       	rjmp	.-172    	; 0x26a0 <__fp_szero>
    274c:	5f 3f       	cpi	r21, 0xFF	; 255
    274e:	ec f3       	brlt	.-6      	; 0x274a <__mulsf3_pse+0x82>
    2750:	98 3e       	cpi	r25, 0xE8	; 232
    2752:	dc f3       	brlt	.-10     	; 0x274a <__mulsf3_pse+0x82>
    2754:	86 95       	lsr	r24
    2756:	77 95       	ror	r23
    2758:	67 95       	ror	r22
    275a:	b7 95       	ror	r27
    275c:	f7 95       	ror	r31
    275e:	e7 95       	ror	r30
    2760:	9f 5f       	subi	r25, 0xFF	; 255
    2762:	c1 f7       	brne	.-16     	; 0x2754 <__mulsf3_pse+0x8c>
    2764:	fe 2b       	or	r31, r30
    2766:	88 0f       	add	r24, r24
    2768:	91 1d       	adc	r25, r1
    276a:	96 95       	lsr	r25
    276c:	87 95       	ror	r24
    276e:	97 f9       	bld	r25, 7
    2770:	08 95       	ret

00002772 <__divmodhi4>:
    2772:	97 fb       	bst	r25, 7
    2774:	07 2e       	mov	r0, r23
    2776:	16 f4       	brtc	.+4      	; 0x277c <__divmodhi4+0xa>
    2778:	00 94       	com	r0
    277a:	06 d0       	rcall	.+12     	; 0x2788 <__divmodhi4_neg1>
    277c:	77 fd       	sbrc	r23, 7
    277e:	08 d0       	rcall	.+16     	; 0x2790 <__divmodhi4_neg2>
    2780:	11 d0       	rcall	.+34     	; 0x27a4 <__udivmodhi4>
    2782:	07 fc       	sbrc	r0, 7
    2784:	05 d0       	rcall	.+10     	; 0x2790 <__divmodhi4_neg2>
    2786:	3e f4       	brtc	.+14     	; 0x2796 <__divmodhi4_exit>

00002788 <__divmodhi4_neg1>:
    2788:	90 95       	com	r25
    278a:	81 95       	neg	r24
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	08 95       	ret

00002790 <__divmodhi4_neg2>:
    2790:	70 95       	com	r23
    2792:	61 95       	neg	r22
    2794:	7f 4f       	sbci	r23, 0xFF	; 255

00002796 <__divmodhi4_exit>:
    2796:	08 95       	ret

00002798 <__mulshisi3>:
    2798:	b7 ff       	sbrs	r27, 7
    279a:	18 c0       	rjmp	.+48     	; 0x27cc <__muluhisi3>

0000279c <__mulohisi3>:
    279c:	17 d0       	rcall	.+46     	; 0x27cc <__muluhisi3>
    279e:	82 1b       	sub	r24, r18
    27a0:	93 0b       	sbc	r25, r19
    27a2:	08 95       	ret

000027a4 <__udivmodhi4>:
    27a4:	aa 1b       	sub	r26, r26
    27a6:	bb 1b       	sub	r27, r27
    27a8:	51 e1       	ldi	r21, 0x11	; 17
    27aa:	07 c0       	rjmp	.+14     	; 0x27ba <__udivmodhi4_ep>

000027ac <__udivmodhi4_loop>:
    27ac:	aa 1f       	adc	r26, r26
    27ae:	bb 1f       	adc	r27, r27
    27b0:	a6 17       	cp	r26, r22
    27b2:	b7 07       	cpc	r27, r23
    27b4:	10 f0       	brcs	.+4      	; 0x27ba <__udivmodhi4_ep>
    27b6:	a6 1b       	sub	r26, r22
    27b8:	b7 0b       	sbc	r27, r23

000027ba <__udivmodhi4_ep>:
    27ba:	88 1f       	adc	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	5a 95       	dec	r21
    27c0:	a9 f7       	brne	.-22     	; 0x27ac <__udivmodhi4_loop>
    27c2:	80 95       	com	r24
    27c4:	90 95       	com	r25
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	08 95       	ret

000027cc <__muluhisi3>:
    27cc:	09 d0       	rcall	.+18     	; 0x27e0 <__umulhisi3>
    27ce:	a5 9f       	mul	r26, r21
    27d0:	90 0d       	add	r25, r0
    27d2:	b4 9f       	mul	r27, r20
    27d4:	90 0d       	add	r25, r0
    27d6:	a4 9f       	mul	r26, r20
    27d8:	80 0d       	add	r24, r0
    27da:	91 1d       	adc	r25, r1
    27dc:	11 24       	eor	r1, r1
    27de:	08 95       	ret

000027e0 <__umulhisi3>:
    27e0:	a2 9f       	mul	r26, r18
    27e2:	b0 01       	movw	r22, r0
    27e4:	b3 9f       	mul	r27, r19
    27e6:	c0 01       	movw	r24, r0
    27e8:	a3 9f       	mul	r26, r19
    27ea:	70 0d       	add	r23, r0
    27ec:	81 1d       	adc	r24, r1
    27ee:	11 24       	eor	r1, r1
    27f0:	91 1d       	adc	r25, r1
    27f2:	b2 9f       	mul	r27, r18
    27f4:	70 0d       	add	r23, r0
    27f6:	81 1d       	adc	r24, r1
    27f8:	11 24       	eor	r1, r1
    27fa:	91 1d       	adc	r25, r1
    27fc:	08 95       	ret

000027fe <strcpy>:
    27fe:	fb 01       	movw	r30, r22
    2800:	dc 01       	movw	r26, r24
    2802:	01 90       	ld	r0, Z+
    2804:	0d 92       	st	X+, r0
    2806:	00 20       	and	r0, r0
    2808:	e1 f7       	brne	.-8      	; 0x2802 <strcpy+0x4>
    280a:	08 95       	ret

0000280c <_exit>:
    280c:	f8 94       	cli

0000280e <__stop_program>:
    280e:	ff cf       	rjmp	.-2      	; 0x280e <__stop_program>
