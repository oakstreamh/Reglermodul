
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000012fc  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  0080014e  0080014e  000013de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001986  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000869  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018bb  00000000  00000000  0000376d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00005028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010af0  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001161  00000000  00000000  00015f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000170c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cf6  00000000  00000000  00017221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c6       	rjmp	.+3136   	; 0xc8e <__vector_19>
      4e:	00 00       	nop
      50:	8a c6       	rjmp	.+3348   	; 0xd66 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	e1 c6       	rjmp	.+3522   	; 0xe1c <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c5       	rjmp	.+2646   	; 0xac8 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ef       	ldi	r30, 0xFC	; 252
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 34       	cpi	r26, 0x4E	; 78
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae e4       	ldi	r26, 0x4E	; 78
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 39       	cpi	r26, 0x98	; 152
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	67 d5       	rcall	.+2766   	; 0xb92 <main>
      c4:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <gettingReady>:




void gettingReady(int sonicL, int sonicF)
{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c8 59       	subi	r28, 0x98	; 152
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	2c 01       	movw	r4, r24
     102:	3b 01       	movw	r6, r22
    ////////////////////////////////////////////////////////////////////////////////
    ///// SETUP FOR INPUT VARIABLE DISTF ///////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type distF; strcpy(distF.name, "distF");
     104:	86 e0       	ldi	r24, 0x06	; 6
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	de 01       	movw	r26, r28
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	01 90       	ld	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	8a 95       	dec	r24
     114:	e1 f7       	brne	.-8      	; 0x10e <gettingReady+0x44>
    
    // 2. Set MFs
    
    struct mf_type smallF;
    MATLAB_MF(&smallF, "smallF", MIN_DIST-1, MIN_DIST, 0, 20);
     116:	4e 01       	movw	r8, r28
     118:	41 e1       	ldi	r20, 0x11	; 17
     11a:	84 0e       	add	r8, r20
     11c:	91 1c       	adc	r9, r1
     11e:	0f 2e       	mov	r0, r31
     120:	f4 e1       	ldi	r31, 0x14	; 20
     122:	ef 2e       	mov	r14, r31
     124:	f1 2c       	mov	r15, r1
     126:	f0 2d       	mov	r31, r0
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	4f ef       	ldi	r20, 0xFF	; 255
     132:	5f ef       	ldi	r21, 0xFF	; 255
     134:	66 e0       	ldi	r22, 0x06	; 6
     136:	71 e0       	ldi	r23, 0x01	; 1
     138:	c4 01       	movw	r24, r8
     13a:	97 d4       	rcall	.+2350   	; 0xa6a <MATLAB_MF>
    struct mf_type mediumF;
    MATLAB_MF(&mediumF, "mediumF", 10, 40, 40, 60);
     13c:	5e 01       	movw	r10, r28
     13e:	57 e2       	ldi	r21, 0x27	; 39
     140:	a5 0e       	add	r10, r21
     142:	b1 1c       	adc	r11, r1
     144:	0f 2e       	mov	r0, r31
     146:	fc e3       	ldi	r31, 0x3C	; 60
     148:	ef 2e       	mov	r14, r31
     14a:	f1 2c       	mov	r15, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	08 e2       	ldi	r16, 0x28	; 40
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	28 e2       	ldi	r18, 0x28	; 40
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	4a e0       	ldi	r20, 0x0A	; 10
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	6d e0       	ldi	r22, 0x0D	; 13
     15c:	71 e0       	ldi	r23, 0x01	; 1
     15e:	c5 01       	movw	r24, r10
     160:	84 d4       	rcall	.+2312   	; 0xa6a <MATLAB_MF>
    struct mf_type bigF;
    MATLAB_MF(&bigF, "bigF", 40, 70, MAX_FRONT, MAX_FRONT+1);
     162:	6e 01       	movw	r12, r28
     164:	6d e3       	ldi	r22, 0x3D	; 61
     166:	c6 0e       	add	r12, r22
     168:	d1 1c       	adc	r13, r1
     16a:	0f 2e       	mov	r0, r31
     16c:	f5 e6       	ldi	r31, 0x65	; 101
     16e:	ef 2e       	mov	r14, r31
     170:	f1 2c       	mov	r15, r1
     172:	f0 2d       	mov	r31, r0
     174:	04 e6       	ldi	r16, 0x64	; 100
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	26 e4       	ldi	r18, 0x46	; 70
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	48 e2       	ldi	r20, 0x28	; 40
     17e:	50 e0       	ldi	r21, 0x00	; 0
     180:	65 e1       	ldi	r22, 0x15	; 21
     182:	71 e0       	ldi	r23, 0x01	; 1
     184:	c6 01       	movw	r24, r12
     186:	71 d4       	rcall	.+2274   	; 0xa6a <MATLAB_MF>
    
    // 3. Linked list for MFs
    
    distF.membership_functions = &smallF;
     188:	9e 86       	std	Y+14, r9	; 0x0e
     18a:	8d 86       	std	Y+13, r8	; 0x0d
    smallF.next = &mediumF;
     18c:	be a2       	std	Y+38, r11	; 0x26
     18e:	ad a2       	std	Y+37, r10	; 0x25
    mediumF.next = &bigF;
     190:	dc ae       	std	Y+60, r13	; 0x3c
     192:	cb ae       	std	Y+59, r12	; 0x3b
    bigF.next = NULL;
     194:	63 96       	adiw	r28, 0x13	; 19
     196:	1f ae       	std	Y+63, r1	; 0x3f
     198:	1e ae       	std	Y+62, r1	; 0x3e
     19a:	63 97       	sbiw	r28, 0x13	; 19
    
    // 4. Variable assigned its reference value
    
    if(sonicF < MIN_DIST)
     19c:	77 20       	and	r7, r7
     19e:	1c f4       	brge	.+6      	; 0x1a6 <gettingReady+0xdc>
    {
        distF.value = MIN_DIST;
     1a0:	1c 86       	std	Y+12, r1	; 0x0c
     1a2:	1b 86       	std	Y+11, r1	; 0x0b
     1a4:	0b c0       	rjmp	.+22     	; 0x1bc <gettingReady+0xf2>
    }
    else if (sonicF > MAX_FRONT)
     1a6:	85 e6       	ldi	r24, 0x65	; 101
     1a8:	68 16       	cp	r6, r24
     1aa:	71 04       	cpc	r7, r1
     1ac:	2c f0       	brlt	.+10     	; 0x1b8 <gettingReady+0xee>
    {
        distF.value = MAX_FRONT;
     1ae:	84 e6       	ldi	r24, 0x64	; 100
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9c 87       	std	Y+12, r25	; 0x0c
     1b4:	8b 87       	std	Y+11, r24	; 0x0b
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <gettingReady+0xf2>
    }
    else
    {
        distF.value = sonicF;
     1b8:	7c 86       	std	Y+12, r7	; 0x0c
     1ba:	6b 86       	std	Y+11, r6	; 0x0b
    ////////////////////////////////////////////////////////////////////////////////
    ///// SETUP FOR INPUT VARIABLE distL ///////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type distL; strcpy(distL.name, "distL");
     1bc:	86 e0       	ldi	r24, 0x06	; 6
     1be:	ea e1       	ldi	r30, 0x1A	; 26
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	de 01       	movw	r26, r28
     1c4:	ad 5a       	subi	r26, 0xAD	; 173
     1c6:	bf 4f       	sbci	r27, 0xFF	; 255
     1c8:	01 90       	ld	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	8a 95       	dec	r24
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <gettingReady+0xfe>
    
    // 2. Set MFs
    
    struct mf_type smallL;
    MATLAB_MF(&smallL, "smallL", MIN_DIST-1, MIN_DIST, MIN_DIST, 20);
     1d0:	4e 01       	movw	r8, r28
     1d2:	93 e6       	ldi	r25, 0x63	; 99
     1d4:	89 0e       	add	r8, r25
     1d6:	91 1c       	adc	r9, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	f4 e1       	ldi	r31, 0x14	; 20
     1dc:	ef 2e       	mov	r14, r31
     1de:	f1 2c       	mov	r15, r1
     1e0:	f0 2d       	mov	r31, r0
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	4f ef       	ldi	r20, 0xFF	; 255
     1ec:	5f ef       	ldi	r21, 0xFF	; 255
     1ee:	60 e2       	ldi	r22, 0x20	; 32
     1f0:	71 e0       	ldi	r23, 0x01	; 1
     1f2:	c4 01       	movw	r24, r8
     1f4:	3a d4       	rcall	.+2164   	; 0xa6a <MATLAB_MF>
    struct mf_type mediumL;
    MATLAB_MF(&mediumL, "mediumL", 10, 30, 30, 50);
     1f6:	5e 01       	movw	r10, r28
     1f8:	e9 e7       	ldi	r30, 0x79	; 121
     1fa:	ae 0e       	add	r10, r30
     1fc:	b1 1c       	adc	r11, r1
     1fe:	0f 2e       	mov	r0, r31
     200:	f2 e3       	ldi	r31, 0x32	; 50
     202:	ef 2e       	mov	r14, r31
     204:	f1 2c       	mov	r15, r1
     206:	f0 2d       	mov	r31, r0
     208:	0e e1       	ldi	r16, 0x1E	; 30
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	2e e1       	ldi	r18, 0x1E	; 30
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	67 e2       	ldi	r22, 0x27	; 39
     216:	71 e0       	ldi	r23, 0x01	; 1
     218:	c5 01       	movw	r24, r10
     21a:	27 d4       	rcall	.+2126   	; 0xa6a <MATLAB_MF>
    struct mf_type bigL;
    MATLAB_MF(&bigL, "bigL", 40, 60, MAX_RIGHT, MAX_RIGHT+1);
     21c:	6e 01       	movw	r12, r28
     21e:	ff e8       	ldi	r31, 0x8F	; 143
     220:	cf 0e       	add	r12, r31
     222:	d1 1c       	adc	r13, r1
     224:	0f 2e       	mov	r0, r31
     226:	f5 e6       	ldi	r31, 0x65	; 101
     228:	ef 2e       	mov	r14, r31
     22a:	f1 2c       	mov	r15, r1
     22c:	f0 2d       	mov	r31, r0
     22e:	04 e6       	ldi	r16, 0x64	; 100
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	2c e3       	ldi	r18, 0x3C	; 60
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	48 e2       	ldi	r20, 0x28	; 40
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	6f e2       	ldi	r22, 0x2F	; 47
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	c6 01       	movw	r24, r12
     240:	14 d4       	rcall	.+2088   	; 0xa6a <MATLAB_MF>
    
    // 3. Linked list for MFs
    
    distL.membership_functions = &smallL;
     242:	a1 96       	adiw	r28, 0x21	; 33
     244:	9f ae       	std	Y+63, r9	; 0x3f
     246:	8e ae       	std	Y+62, r8	; 0x3e
     248:	a1 97       	sbiw	r28, 0x21	; 33
    smallL.next = &mediumL;
     24a:	f4 01       	movw	r30, r8
     24c:	b5 8a       	std	Z+21, r11	; 0x15
     24e:	a4 8a       	std	Z+20, r10	; 0x14
    mediumL.next = &bigL;
     250:	f5 01       	movw	r30, r10
     252:	d5 8a       	std	Z+21, r13	; 0x15
     254:	c4 8a       	std	Z+20, r12	; 0x14
    bigL.next = NULL;
     256:	f6 01       	movw	r30, r12
     258:	15 8a       	std	Z+21, r1	; 0x15
     25a:	14 8a       	std	Z+20, r1	; 0x14
    
    // 4. Variable assigned its reference value
    
    if(sonicL < MIN_DIST)
     25c:	55 20       	and	r5, r5
     25e:	2c f4       	brge	.+10     	; 0x26a <gettingReady+0x1a0>
    {
        distL.value = MIN_DIST;
     260:	6f 96       	adiw	r28, 0x1f	; 31
     262:	1f ae       	std	Y+63, r1	; 0x3f
     264:	1e ae       	std	Y+62, r1	; 0x3e
     266:	6f 97       	sbiw	r28, 0x1f	; 31
     268:	0f c0       	rjmp	.+30     	; 0x288 <gettingReady+0x1be>
    }
    else if (sonicL > MAX_RIGHT)
     26a:	f5 e6       	ldi	r31, 0x65	; 101
     26c:	4f 16       	cp	r4, r31
     26e:	51 04       	cpc	r5, r1
     270:	3c f0       	brlt	.+14     	; 0x280 <gettingReady+0x1b6>
    {
        distL.value = MAX_RIGHT;
     272:	84 e6       	ldi	r24, 0x64	; 100
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	6f 96       	adiw	r28, 0x1f	; 31
     278:	9f af       	std	Y+63, r25	; 0x3f
     27a:	8e af       	std	Y+62, r24	; 0x3e
     27c:	6f 97       	sbiw	r28, 0x1f	; 31
     27e:	04 c0       	rjmp	.+8      	; 0x288 <gettingReady+0x1be>
    }
    else
    {
        distL.value = sonicL;
     280:	6f 96       	adiw	r28, 0x1f	; 31
     282:	5f ae       	std	Y+63, r5	; 0x3f
     284:	4e ae       	std	Y+62, r4	; 0x3e
     286:	6f 97       	sbiw	r28, 0x1f	; 31
    ////////////////////////////////////////////////////////////////////////////////
    ////// SETUP FOR OUTPUT VARIABLE  SERVO ////////////////////////////////////////
    
    // 1. Declaration
    
    struct io_type servo; strcpy(servo.name, "servo");
     288:	1e 01       	movw	r2, r28
     28a:	45 ea       	ldi	r20, 0xA5	; 165
     28c:	24 0e       	add	r2, r20
     28e:	31 1c       	adc	r3, r1
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	e4 e3       	ldi	r30, 0x34	; 52
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	d1 01       	movw	r26, r2
     298:	01 90       	ld	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	8a 95       	dec	r24
     29e:	e1 f7       	brne	.-8      	; 0x298 <gettingReady+0x1ce>
    
    // 2. Set MFs
    struct mf_type right;
    MATLAB_MF(&right, "right", 2185, 2250, 2250, 2400);
     2a0:	5e 01       	movw	r10, r28
     2a2:	55 eb       	ldi	r21, 0xB5	; 181
     2a4:	a5 0e       	add	r10, r21
     2a6:	b1 1c       	adc	r11, r1
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f0 e6       	ldi	r31, 0x60	; 96
     2ac:	ef 2e       	mov	r14, r31
     2ae:	f9 e0       	ldi	r31, 0x09	; 9
     2b0:	ff 2e       	mov	r15, r31
     2b2:	f0 2d       	mov	r31, r0
     2b4:	0a ec       	ldi	r16, 0xCA	; 202
     2b6:	18 e0       	ldi	r17, 0x08	; 8
     2b8:	2a ec       	ldi	r18, 0xCA	; 202
     2ba:	38 e0       	ldi	r19, 0x08	; 8
     2bc:	49 e8       	ldi	r20, 0x89	; 137
     2be:	58 e0       	ldi	r21, 0x08	; 8
     2c0:	6a e3       	ldi	r22, 0x3A	; 58
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	c5 01       	movw	r24, r10
     2c6:	d1 d3       	rcall	.+1954   	; 0xa6a <MATLAB_MF>
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2532, 2660, 2660, 2788);
     2c8:	6e 01       	movw	r12, r28
     2ca:	6b ec       	ldi	r22, 0xCB	; 203
     2cc:	c6 0e       	add	r12, r22
     2ce:	d1 1c       	adc	r13, r1
     2d0:	0f 2e       	mov	r0, r31
     2d2:	f4 ee       	ldi	r31, 0xE4	; 228
     2d4:	ef 2e       	mov	r14, r31
     2d6:	fa e0       	ldi	r31, 0x0A	; 10
     2d8:	ff 2e       	mov	r15, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	04 e6       	ldi	r16, 0x64	; 100
     2de:	1a e0       	ldi	r17, 0x0A	; 10
     2e0:	24 e6       	ldi	r18, 0x64	; 100
     2e2:	3a e0       	ldi	r19, 0x0A	; 10
     2e4:	44 ee       	ldi	r20, 0xE4	; 228
     2e6:	59 e0       	ldi	r21, 0x09	; 9
     2e8:	60 e4       	ldi	r22, 0x40	; 64
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	c6 01       	movw	r24, r12
     2ee:	bd d3       	rcall	.+1914   	; 0xa6a <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 3000, 3100, 3100, MAXLEFT);
     2f0:	4e 01       	movw	r8, r28
     2f2:	81 ee       	ldi	r24, 0xE1	; 225
     2f4:	88 0e       	add	r8, r24
     2f6:	91 1c       	adc	r9, r1
     2f8:	0f 2e       	mov	r0, r31
     2fa:	ff e3       	ldi	r31, 0x3F	; 63
     2fc:	ef 2e       	mov	r14, r31
     2fe:	fc e0       	ldi	r31, 0x0C	; 12
     300:	ff 2e       	mov	r15, r31
     302:	f0 2d       	mov	r31, r0
     304:	0c e1       	ldi	r16, 0x1C	; 28
     306:	1c e0       	ldi	r17, 0x0C	; 12
     308:	2c e1       	ldi	r18, 0x1C	; 28
     30a:	3c e0       	ldi	r19, 0x0C	; 12
     30c:	48 eb       	ldi	r20, 0xB8	; 184
     30e:	5b e0       	ldi	r21, 0x0B	; 11
     310:	69 e4       	ldi	r22, 0x49	; 73
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	c4 01       	movw	r24, r8
     316:	a9 d3       	rcall	.+1874   	; 0xa6a <MATLAB_MF>
  
    
    // 3. Linked list for MFs
    servo.membership_functions = &right;
     318:	f1 01       	movw	r30, r2
     31a:	b5 86       	std	Z+13, r11	; 0x0d
     31c:	a4 86       	std	Z+12, r10	; 0x0c
    right.next = &straight;
     31e:	f5 01       	movw	r30, r10
     320:	d5 8a       	std	Z+21, r13	; 0x15
     322:	c4 8a       	std	Z+20, r12	; 0x14
    straight.next = &left;
     324:	f6 01       	movw	r30, r12
     326:	95 8a       	std	Z+21, r9	; 0x15
     328:	84 8a       	std	Z+20, r8	; 0x14
    left.next = NULL;
     32a:	f4 01       	movw	r30, r8
     32c:	15 8a       	std	Z+21, r1	; 0x15
     32e:	14 8a       	std	Z+20, r1	; 0x14
    
    
    ////////////////////////////////////////////////////////////////////////////////
    ////// LINKED LISTS FOR VARIABLES //////////////////////////////////////////////
    
    System_Inputs = &distL;
     330:	ee 58       	subi	r30, 0x8E	; 142
     332:	f1 09       	sbc	r31, r1
     334:	f0 93 6d 02 	sts	0x026D, r31
     338:	e0 93 6c 02 	sts	0x026C, r30
    distL.next = &distF;
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	97 87       	std	Z+15, r25	; 0x0f
     342:	86 87       	std	Z+14, r24	; 0x0e
    distF.next = NULL;
     344:	18 8a       	std	Y+16, r1	; 0x10
     346:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
     348:	30 92 6b 02 	sts	0x026B, r3
     34c:	20 92 6a 02 	sts	0x026A, r2
    servo.next = NULL;
     350:	f1 01       	movw	r30, r2
     352:	17 86       	std	Z+15, r1	; 0x0f
     354:	16 86       	std	Z+14, r1	; 0x0e
    struct rule_type rule9;
    
    
    // 2. Linked lists for rule_types
    
    Rule_Base = &rule1;
     356:	9e 01       	movw	r18, r28
     358:	29 50       	subi	r18, 0x09	; 9
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	30 93 6f 02 	sts	0x026F, r19
     360:	20 93 6e 02 	sts	0x026E, r18
    rule1.next = &rule2;
     364:	84 50       	subi	r24, 0x04	; 4
     366:	9f 4f       	sbci	r25, 0xFF	; 255
     368:	f9 01       	movw	r30, r18
     36a:	95 83       	std	Z+5, r25	; 0x05
     36c:	84 83       	std	Z+4, r24	; 0x04
    rule2.next = &rule3;
     36e:	de 01       	movw	r26, r28
     370:	ad 5f       	subi	r26, 0xFD	; 253
     372:	be 4f       	sbci	r27, 0xFE	; 254
     374:	fc 01       	movw	r30, r24
     376:	b5 83       	std	Z+5, r27	; 0x05
     378:	a4 83       	std	Z+4, r26	; 0x04
    rule3.next = &rule4;
     37a:	49 e0       	ldi	r20, 0x09	; 9
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	4c 0f       	add	r20, r28
     380:	5d 1f       	adc	r21, r29
     382:	15 96       	adiw	r26, 0x05	; 5
     384:	5c 93       	st	X, r21
     386:	4e 93       	st	-X, r20
     388:	14 97       	sbiw	r26, 0x04	; 4
    rule4.next = &rule5;
     38a:	ef e0       	ldi	r30, 0x0F	; 15
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	ec 0f       	add	r30, r28
     390:	fd 1f       	adc	r31, r29
     392:	c3 5f       	subi	r28, 0xF3	; 243
     394:	de 4f       	sbci	r29, 0xFE	; 254
     396:	f9 83       	std	Y+1, r31	; 0x01
     398:	e8 83       	st	Y, r30
     39a:	cd 50       	subi	r28, 0x0D	; 13
     39c:	d1 40       	sbci	r29, 0x01	; 1
    rule5.next = &rule6;
     39e:	45 e1       	ldi	r20, 0x15	; 21
     3a0:	51 e0       	ldi	r21, 0x01	; 1
     3a2:	4c 0f       	add	r20, r28
     3a4:	5d 1f       	adc	r21, r29
     3a6:	cd 5e       	subi	r28, 0xED	; 237
     3a8:	de 4f       	sbci	r29, 0xFE	; 254
     3aa:	59 83       	std	Y+1, r21	; 0x01
     3ac:	48 83       	st	Y, r20
     3ae:	c3 51       	subi	r28, 0x13	; 19
     3b0:	d1 40       	sbci	r29, 0x01	; 1
    rule6.next = &rule7;
     3b2:	eb e1       	ldi	r30, 0x1B	; 27
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	ec 0f       	add	r30, r28
     3b8:	fd 1f       	adc	r31, r29
     3ba:	c7 5e       	subi	r28, 0xE7	; 231
     3bc:	de 4f       	sbci	r29, 0xFE	; 254
     3be:	f9 83       	std	Y+1, r31	; 0x01
     3c0:	e8 83       	st	Y, r30
     3c2:	c9 51       	subi	r28, 0x19	; 25
     3c4:	d1 40       	sbci	r29, 0x01	; 1
    rule7.next = &rule8;
     3c6:	41 e2       	ldi	r20, 0x21	; 33
     3c8:	51 e0       	ldi	r21, 0x01	; 1
     3ca:	4c 0f       	add	r20, r28
     3cc:	5d 1f       	adc	r21, r29
     3ce:	c1 5e       	subi	r28, 0xE1	; 225
     3d0:	de 4f       	sbci	r29, 0xFE	; 254
     3d2:	59 83       	std	Y+1, r21	; 0x01
     3d4:	48 83       	st	Y, r20
     3d6:	cf 51       	subi	r28, 0x1F	; 31
     3d8:	d1 40       	sbci	r29, 0x01	; 1
    rule8.next = &rule9;
     3da:	e7 e2       	ldi	r30, 0x27	; 39
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	ec 0f       	add	r30, r28
     3e0:	fd 1f       	adc	r31, r29
     3e2:	cb 5d       	subi	r28, 0xDB	; 219
     3e4:	de 4f       	sbci	r29, 0xFE	; 254
     3e6:	f9 83       	std	Y+1, r31	; 0x01
     3e8:	e8 83       	st	Y, r30
     3ea:	c5 52       	subi	r28, 0x25	; 37
     3ec:	d1 40       	sbci	r29, 0x01	; 1
    rule9.next = NULL;
     3ee:	c5 5d       	subi	r28, 0xD5	; 213
     3f0:	de 4f       	sbci	r29, 0xFE	; 254
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	18 82       	st	Y, r1
     3f6:	cb 52       	subi	r28, 0x2B	; 43
     3f8:	d1 40       	sbci	r29, 0x01	; 1
    
    // 3. Declaration of rule_element_types
    
    struct rule_element_type if11, if12, then1;
    rule1.if_side = &if11; if11.next = &if12; if12.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     3fa:	8e 01       	movw	r16, r28
     3fc:	03 5d       	subi	r16, 0xD3	; 211
     3fe:	1e 4f       	sbci	r17, 0xFE	; 254
     400:	f9 01       	movw	r30, r18
     402:	11 83       	std	Z+1, r17	; 0x01
     404:	00 83       	st	Z, r16
     406:	be 01       	movw	r22, r28
     408:	6f 5c       	subi	r22, 0xCF	; 207
     40a:	7e 4f       	sbci	r23, 0xFE	; 254
     40c:	f8 01       	movw	r30, r16
     40e:	73 83       	std	Z+3, r23	; 0x03
     410:	62 83       	std	Z+2, r22	; 0x02
     412:	fb 01       	movw	r30, r22
     414:	13 82       	std	Z+3, r1	; 0x03
     416:	12 82       	std	Z+2, r1	; 0x02
     418:	4c 5e       	subi	r20, 0xEC	; 236
     41a:	5f 4f       	sbci	r21, 0xFF	; 255
     41c:	f9 01       	movw	r30, r18
     41e:	53 83       	std	Z+3, r21	; 0x03
     420:	42 83       	std	Z+2, r20	; 0x02
     422:	fa 01       	movw	r30, r20
     424:	13 82       	std	Z+3, r1	; 0x03
     426:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &smallL.value; if12.value = &smallF.value; then1.value = &right.value;
     428:	2a 58       	subi	r18, 0x8A	; 138
     42a:	31 09       	sbc	r19, r1
     42c:	f8 01       	movw	r30, r16
     42e:	31 83       	std	Z+1, r19	; 0x01
     430:	20 83       	st	Z, r18
     432:	7e 01       	movw	r14, r28
     434:	fb e1       	ldi	r31, 0x1B	; 27
     436:	ef 0e       	add	r14, r31
     438:	f1 1c       	adc	r15, r1
     43a:	fb 01       	movw	r30, r22
     43c:	f1 82       	std	Z+1, r15	; 0x01
     43e:	e0 82       	st	Z, r14
     440:	fa e0       	ldi	r31, 0x0A	; 10
     442:	af 0e       	add	r10, r31
     444:	b1 1c       	adc	r11, r1
     446:	fa 01       	movw	r30, r20
     448:	b1 82       	std	Z+1, r11	; 0x01
     44a:	a0 82       	st	Z, r10
    
    struct rule_element_type if21, if22, then2;
    rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     44c:	04 5f       	subi	r16, 0xF4	; 244
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	fc 01       	movw	r30, r24
     452:	11 83       	std	Z+1, r17	; 0x01
     454:	00 83       	st	Z, r16
     456:	64 5f       	subi	r22, 0xF4	; 244
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	f8 01       	movw	r30, r16
     45c:	73 83       	std	Z+3, r23	; 0x03
     45e:	62 83       	std	Z+2, r22	; 0x02
     460:	fb 01       	movw	r30, r22
     462:	13 82       	std	Z+3, r1	; 0x03
     464:	12 82       	std	Z+2, r1	; 0x02
     466:	44 5f       	subi	r20, 0xF4	; 244
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	fc 01       	movw	r30, r24
     46c:	53 83       	std	Z+3, r21	; 0x03
     46e:	42 83       	std	Z+2, r20	; 0x02
     470:	fa 01       	movw	r30, r20
     472:	13 82       	std	Z+3, r1	; 0x03
     474:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &smallL.value; if22.value = &mediumF.value; then2.value = &right.value;
     476:	f8 01       	movw	r30, r16
     478:	31 83       	std	Z+1, r19	; 0x01
     47a:	20 83       	st	Z, r18
     47c:	8c 5c       	subi	r24, 0xCC	; 204
     47e:	91 09       	sbc	r25, r1
     480:	fb 01       	movw	r30, r22
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	80 83       	st	Z, r24
     486:	fa 01       	movw	r30, r20
     488:	b1 82       	std	Z+1, r11	; 0x01
     48a:	a0 82       	st	Z, r10
    
    struct rule_element_type if31, if32, then3;
    rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     48c:	04 5f       	subi	r16, 0xF4	; 244
     48e:	1f 4f       	sbci	r17, 0xFF	; 255
     490:	11 96       	adiw	r26, 0x01	; 1
     492:	1c 93       	st	X, r17
     494:	0e 93       	st	-X, r16
     496:	64 5f       	subi	r22, 0xF4	; 244
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	f8 01       	movw	r30, r16
     49c:	73 83       	std	Z+3, r23	; 0x03
     49e:	62 83       	std	Z+2, r22	; 0x02
     4a0:	fb 01       	movw	r30, r22
     4a2:	13 82       	std	Z+3, r1	; 0x03
     4a4:	12 82       	std	Z+2, r1	; 0x02
     4a6:	44 5f       	subi	r20, 0xF4	; 244
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	13 96       	adiw	r26, 0x03	; 3
     4ac:	5c 93       	st	X, r21
     4ae:	4e 93       	st	-X, r20
     4b0:	12 97       	sbiw	r26, 0x02	; 2
     4b2:	fa 01       	movw	r30, r20
     4b4:	13 82       	std	Z+3, r1	; 0x03
     4b6:	12 82       	std	Z+2, r1	; 0x02
    if31.value = &smallL.value; if32.value = &bigF.value; then3.value = &straight.value;
     4b8:	f8 01       	movw	r30, r16
     4ba:	31 83       	std	Z+1, r19	; 0x01
     4bc:	20 83       	st	Z, r18
     4be:	26 52       	subi	r18, 0x26	; 38
     4c0:	31 09       	sbc	r19, r1
     4c2:	fb 01       	movw	r30, r22
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
     4c8:	fa e0       	ldi	r31, 0x0A	; 10
     4ca:	cf 0e       	add	r12, r31
     4cc:	d1 1c       	adc	r13, r1
     4ce:	fa 01       	movw	r30, r20
     4d0:	d1 82       	std	Z+1, r13	; 0x01
     4d2:	c0 82       	st	Z, r12
    
    struct rule_element_type if41, if42, then4;
    rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     4d4:	68 5f       	subi	r22, 0xF8	; 248
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	c7 5f       	subi	r28, 0xF7	; 247
     4da:	de 4f       	sbci	r29, 0xFE	; 254
     4dc:	79 83       	std	Y+1, r23	; 0x01
     4de:	68 83       	st	Y, r22
     4e0:	c9 50       	subi	r28, 0x09	; 9
     4e2:	d1 40       	sbci	r29, 0x01	; 1
     4e4:	48 5f       	subi	r20, 0xF8	; 248
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	fb 01       	movw	r30, r22
     4ea:	53 83       	std	Z+3, r21	; 0x03
     4ec:	42 83       	std	Z+2, r20	; 0x02
     4ee:	fa 01       	movw	r30, r20
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
     4f4:	aa 5a       	subi	r26, 0xAA	; 170
     4f6:	bf 4f       	sbci	r27, 0xFF	; 255
     4f8:	c5 5f       	subi	r28, 0xF5	; 245
     4fa:	de 4f       	sbci	r29, 0xFE	; 254
     4fc:	b9 83       	std	Y+1, r27	; 0x01
     4fe:	a8 83       	st	Y, r26
     500:	cb 50       	subi	r28, 0x0B	; 11
     502:	d1 40       	sbci	r29, 0x01	; 1
     504:	13 96       	adiw	r26, 0x03	; 3
     506:	1c 92       	st	X, r1
     508:	1e 92       	st	-X, r1
     50a:	12 97       	sbiw	r26, 0x02	; 2
    if41.value = &mediumL.value; if42.value = &smallF.value; then4.value = &left.value;
     50c:	02 5c       	subi	r16, 0xC2	; 194
     50e:	11 09       	sbc	r17, r1
     510:	fb 01       	movw	r30, r22
     512:	11 83       	std	Z+1, r17	; 0x01
     514:	00 83       	st	Z, r16
     516:	fa 01       	movw	r30, r20
     518:	f1 82       	std	Z+1, r15	; 0x01
     51a:	e0 82       	st	Z, r14
     51c:	fa e0       	ldi	r31, 0x0A	; 10
     51e:	8f 0e       	add	r8, r31
     520:	91 1c       	adc	r9, r1
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	9c 92       	st	X, r9
     526:	8e 92       	st	-X, r8
    
    struct rule_element_type if51, if52, then5;
    rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     528:	64 5f       	subi	r22, 0xF4	; 244
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	c1 5f       	subi	r28, 0xF1	; 241
     52e:	de 4f       	sbci	r29, 0xFE	; 254
     530:	79 83       	std	Y+1, r23	; 0x01
     532:	68 83       	st	Y, r22
     534:	cf 50       	subi	r28, 0x0F	; 15
     536:	d1 40       	sbci	r29, 0x01	; 1
     538:	44 5f       	subi	r20, 0xF4	; 244
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	fb 01       	movw	r30, r22
     53e:	53 83       	std	Z+3, r21	; 0x03
     540:	42 83       	std	Z+2, r20	; 0x02
     542:	fa 01       	movw	r30, r20
     544:	13 82       	std	Z+3, r1	; 0x03
     546:	12 82       	std	Z+2, r1	; 0x02
     548:	1c 96       	adiw	r26, 0x0c	; 12
     54a:	cf 5e       	subi	r28, 0xEF	; 239
     54c:	de 4f       	sbci	r29, 0xFE	; 254
     54e:	b9 83       	std	Y+1, r27	; 0x01
     550:	a8 83       	st	Y, r26
     552:	c1 51       	subi	r28, 0x11	; 17
     554:	d1 40       	sbci	r29, 0x01	; 1
     556:	13 96       	adiw	r26, 0x03	; 3
     558:	1c 92       	st	X, r1
     55a:	1e 92       	st	-X, r1
     55c:	12 97       	sbiw	r26, 0x02	; 2
    if51.value = &mediumL.value; if52.value = &mediumF.value; then5.value = &right.value;
     55e:	fb 01       	movw	r30, r22
     560:	11 83       	std	Z+1, r17	; 0x01
     562:	00 83       	st	Z, r16
     564:	fa 01       	movw	r30, r20
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	11 96       	adiw	r26, 0x01	; 1
     56c:	bc 92       	st	X, r11
     56e:	ae 92       	st	-X, r10
    
    struct rule_element_type if61, if62, then6;
    rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     570:	64 5f       	subi	r22, 0xF4	; 244
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	cb 5e       	subi	r28, 0xEB	; 235
     576:	de 4f       	sbci	r29, 0xFE	; 254
     578:	79 83       	std	Y+1, r23	; 0x01
     57a:	68 83       	st	Y, r22
     57c:	c5 51       	subi	r28, 0x15	; 21
     57e:	d1 40       	sbci	r29, 0x01	; 1
     580:	44 5f       	subi	r20, 0xF4	; 244
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	fb 01       	movw	r30, r22
     586:	53 83       	std	Z+3, r21	; 0x03
     588:	42 83       	std	Z+2, r20	; 0x02
     58a:	fa 01       	movw	r30, r20
     58c:	13 82       	std	Z+3, r1	; 0x03
     58e:	12 82       	std	Z+2, r1	; 0x02
     590:	1c 96       	adiw	r26, 0x0c	; 12
     592:	c9 5e       	subi	r28, 0xE9	; 233
     594:	de 4f       	sbci	r29, 0xFE	; 254
     596:	b9 83       	std	Y+1, r27	; 0x01
     598:	a8 83       	st	Y, r26
     59a:	c7 51       	subi	r28, 0x17	; 23
     59c:	d1 40       	sbci	r29, 0x01	; 1
     59e:	13 96       	adiw	r26, 0x03	; 3
     5a0:	1c 92       	st	X, r1
     5a2:	1e 92       	st	-X, r1
     5a4:	12 97       	sbiw	r26, 0x02	; 2
    if61.value = &mediumL.value; if62.value = &bigF.value; then6.value = &straight.value;
     5a6:	fb 01       	movw	r30, r22
     5a8:	11 83       	std	Z+1, r17	; 0x01
     5aa:	00 83       	st	Z, r16
     5ac:	fa 01       	movw	r30, r20
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	20 83       	st	Z, r18
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	dc 92       	st	X, r13
     5b6:	ce 92       	st	-X, r12
    
    struct rule_element_type if71, if72, then7;
    rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     5b8:	48 5f       	subi	r20, 0xF8	; 248
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	c5 5e       	subi	r28, 0xE5	; 229
     5be:	de 4f       	sbci	r29, 0xFE	; 254
     5c0:	59 83       	std	Y+1, r21	; 0x01
     5c2:	48 83       	st	Y, r20
     5c4:	cb 51       	subi	r28, 0x1B	; 27
     5c6:	d1 40       	sbci	r29, 0x01	; 1
     5c8:	18 96       	adiw	r26, 0x08	; 8
     5ca:	fa 01       	movw	r30, r20
     5cc:	b3 83       	std	Z+3, r27	; 0x03
     5ce:	a2 83       	std	Z+2, r26	; 0x02
     5d0:	13 96       	adiw	r26, 0x03	; 3
     5d2:	1c 92       	st	X, r1
     5d4:	1e 92       	st	-X, r1
     5d6:	12 97       	sbiw	r26, 0x02	; 2
     5d8:	06 50       	subi	r16, 0x06	; 6
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	c3 5e       	subi	r28, 0xE3	; 227
     5de:	de 4f       	sbci	r29, 0xFE	; 254
     5e0:	19 83       	std	Y+1, r17	; 0x01
     5e2:	08 83       	st	Y, r16
     5e4:	cd 51       	subi	r28, 0x1D	; 29
     5e6:	d1 40       	sbci	r29, 0x01	; 1
     5e8:	f8 01       	movw	r30, r16
     5ea:	13 82       	std	Z+3, r1	; 0x03
     5ec:	12 82       	std	Z+2, r1	; 0x02
    if71.value = &bigL.value; if72.value = &smallF.value; then7.value = &left.value;
     5ee:	60 5d       	subi	r22, 0xD0	; 208
     5f0:	71 09       	sbc	r23, r1
     5f2:	fa 01       	movw	r30, r20
     5f4:	71 83       	std	Z+1, r23	; 0x01
     5f6:	60 83       	st	Z, r22
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	fc 92       	st	X, r15
     5fc:	ee 92       	st	-X, r14
     5fe:	f8 01       	movw	r30, r16
     600:	91 82       	std	Z+1, r9	; 0x01
     602:	80 82       	st	Z, r8
    
    struct rule_element_type if81, if82, then8;
    rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     604:	44 5f       	subi	r20, 0xF4	; 244
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	cf 5d       	subi	r28, 0xDF	; 223
     60a:	de 4f       	sbci	r29, 0xFE	; 254
     60c:	59 83       	std	Y+1, r21	; 0x01
     60e:	48 83       	st	Y, r20
     610:	c1 52       	subi	r28, 0x21	; 33
     612:	d1 40       	sbci	r29, 0x01	; 1
     614:	1c 96       	adiw	r26, 0x0c	; 12
     616:	fa 01       	movw	r30, r20
     618:	b3 83       	std	Z+3, r27	; 0x03
     61a:	a2 83       	std	Z+2, r26	; 0x02
     61c:	13 96       	adiw	r26, 0x03	; 3
     61e:	1c 92       	st	X, r1
     620:	1e 92       	st	-X, r1
     622:	12 97       	sbiw	r26, 0x02	; 2
     624:	04 5f       	subi	r16, 0xF4	; 244
     626:	1f 4f       	sbci	r17, 0xFF	; 255
     628:	cd 5d       	subi	r28, 0xDD	; 221
     62a:	de 4f       	sbci	r29, 0xFE	; 254
     62c:	19 83       	std	Y+1, r17	; 0x01
     62e:	08 83       	st	Y, r16
     630:	c3 52       	subi	r28, 0x23	; 35
     632:	d1 40       	sbci	r29, 0x01	; 1
     634:	f8 01       	movw	r30, r16
     636:	13 82       	std	Z+3, r1	; 0x03
     638:	12 82       	std	Z+2, r1	; 0x02
    if81.value = &bigL.value; if82.value = &mediumF.value; then8.value = &right.value;
     63a:	fa 01       	movw	r30, r20
     63c:	71 83       	std	Z+1, r23	; 0x01
     63e:	60 83       	st	Z, r22
     640:	11 96       	adiw	r26, 0x01	; 1
     642:	9c 93       	st	X, r25
     644:	8e 93       	st	-X, r24
     646:	f8 01       	movw	r30, r16
     648:	b1 82       	std	Z+1, r11	; 0x01
     64a:	a0 82       	st	Z, r10
    
    struct rule_element_type if91, if92, then9;
    rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     64c:	84 5a       	subi	r24, 0xA4	; 164
     64e:	9e 4f       	sbci	r25, 0xFE	; 254
     650:	c9 5d       	subi	r28, 0xD9	; 217
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	99 83       	std	Y+1, r25	; 0x01
     656:	88 83       	st	Y, r24
     658:	c7 52       	subi	r28, 0x27	; 39
     65a:	d1 40       	sbci	r29, 0x01	; 1
     65c:	1c 96       	adiw	r26, 0x0c	; 12
     65e:	fc 01       	movw	r30, r24
     660:	b3 83       	std	Z+3, r27	; 0x03
     662:	a2 83       	std	Z+2, r26	; 0x02
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	1c 92       	st	X, r1
     668:	1e 92       	st	-X, r1
     66a:	12 97       	sbiw	r26, 0x02	; 2
     66c:	4c 5e       	subi	r20, 0xEC	; 236
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	c7 5d       	subi	r28, 0xD7	; 215
     672:	de 4f       	sbci	r29, 0xFE	; 254
     674:	59 83       	std	Y+1, r21	; 0x01
     676:	48 83       	st	Y, r20
     678:	c9 52       	subi	r28, 0x29	; 41
     67a:	d1 40       	sbci	r29, 0x01	; 1
     67c:	fa 01       	movw	r30, r20
     67e:	13 82       	std	Z+3, r1	; 0x03
     680:	12 82       	std	Z+2, r1	; 0x02
    if91.value = &bigL.value; if92.value = &bigF.value; then9.value = &left.value;
     682:	fc 01       	movw	r30, r24
     684:	71 83       	std	Z+1, r23	; 0x01
     686:	60 83       	st	Z, r22
     688:	2d 93       	st	X+, r18
     68a:	3c 93       	st	X, r19
     68c:	fa 01       	movw	r30, r20
     68e:	91 82       	std	Z+1, r9	; 0x01
     690:	80 82       	st	Z, r8
    
    
    // the methods performing the FLC
    fuzzification();
     692:	c1 d0       	rcall	.+386    	; 0x816 <fuzzification>
    rule_evaluation();
     694:	e7 d0       	rcall	.+462    	; 0x864 <rule_evaluation>
    defuzzification();
     696:	2c d1       	rcall	.+600    	; 0x8f0 <defuzzification>
    setServo(servo.value);
     698:	f1 01       	movw	r30, r2
     69a:	82 85       	ldd	r24, Z+10	; 0x0a
     69c:	93 85       	ldd	r25, Z+11	; 0x0b
     69e:	dc d2       	rcall	.+1464   	; 0xc58 <setServo>
	
	if (sonicL < 15 & sonicF < 40)
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	f8 e2       	ldi	r31, 0x28	; 40
     6a4:	6f 16       	cp	r6, r31
     6a6:	71 04       	cpc	r7, r1
     6a8:	0c f0       	brlt	.+2      	; 0x6ac <gettingReady+0x5e2>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	88 23       	and	r24, r24
     6ae:	71 f0       	breq	.+28     	; 0x6cc <gettingReady+0x602>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	4f e0       	ldi	r20, 0x0F	; 15
     6b4:	44 16       	cp	r4, r20
     6b6:	51 04       	cpc	r5, r1
     6b8:	0c f0       	brlt	.+2      	; 0x6bc <gettingReady+0x5f2>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	88 23       	and	r24, r24
     6be:	31 f0       	breq	.+12     	; 0x6cc <gettingReady+0x602>
	{
		readyToPark = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 4f 01 	sts	0x014F, r25
     6c8:	80 93 4e 01 	sts	0x014E, r24
    
    
    
    
    
}
     6cc:	c8 56       	subi	r28, 0x68	; 104
     6ce:	de 4f       	sbci	r29, 0xFE	; 254
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret

00000700 <fuzzy_parking>:




void fuzzy_parking(int sonicL, int sonicF, int speedCount)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	8c 01       	movw	r16, r24
     70a:	eb 01       	movw	r28, r22
    
    if (sonicF >50)
     70c:	63 33       	cpi	r22, 0x33	; 51
     70e:	71 05       	cpc	r23, r1
     710:	1c f0       	brlt	.+6      	; 0x718 <fuzzy_parking+0x18>
    {
		setESC(2840);
     712:	88 e1       	ldi	r24, 0x18	; 24
     714:	9b e0       	ldi	r25, 0x0B	; 11
     716:	85 d2       	rcall	.+1290   	; 0xc22 <setESC>
    }
	if (sonicF<10)
     718:	2a 97       	sbiw	r28, 0x0a	; 10
     71a:	1c f4       	brge	.+6      	; 0x722 <fuzzy_parking+0x22>
	{
		setESC(2650);
     71c:	8a e5       	ldi	r24, 0x5A	; 90
     71e:	9a e0       	ldi	r25, 0x0A	; 10
     720:	80 d2       	rcall	.+1280   	; 0xc22 <setESC>
	}
    
	if (readyToPark == 0)
     722:	20 91 4e 01 	lds	r18, 0x014E
     726:	30 91 4f 01 	lds	r19, 0x014F
     72a:	23 2b       	or	r18, r19
     72c:	19 f4       	brne	.+6      	; 0x734 <fuzzy_parking+0x34>
    {
		gettingReady(sonicL, sonicL);
     72e:	b8 01       	movw	r22, r16
     730:	c8 01       	movw	r24, r16
     732:	cb dc       	rcall	.-1642   	; 0xca <gettingReady>
    }
    
    if (readyToPark == 1)
     734:	80 91 4e 01 	lds	r24, 0x014E
     738:	90 91 4f 01 	lds	r25, 0x014F
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	19 f4       	brne	.+6      	; 0x746 <fuzzy_parking+0x46>
    {
		setESC(NEUTRAL);
     740:	8d ec       	ldi	r24, 0xCD	; 205
     742:	9a e0       	ldi	r25, 0x0A	; 10
     744:	6e d2       	rcall	.+1244   	; 0xc22 <setESC>
        
    }
    
    
    
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     750:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     752:	84 85       	ldd	r24, Z+12	; 0x0c
     754:	95 85       	ldd	r25, Z+13	; 0x0d
     756:	9b 01       	movw	r18, r22
     758:	28 1b       	sub	r18, r24
     75a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     75c:	86 85       	ldd	r24, Z+14	; 0x0e
     75e:	97 85       	ldd	r25, Z+15	; 0x0f
     760:	86 1b       	sub	r24, r22
     762:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     764:	12 16       	cp	r1, r18
     766:	13 06       	cpc	r1, r19
     768:	f4 f4       	brge	.+60     	; 0x7a6 <compute_degree_of_membership+0x56>
     76a:	18 16       	cp	r1, r24
     76c:	19 06       	cpc	r1, r25
     76e:	f4 f4       	brge	.+60     	; 0x7ac <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     770:	60 89       	ldd	r22, Z+16	; 0x10
     772:	71 89       	ldd	r23, Z+17	; 0x11
     774:	a2 89       	ldd	r26, Z+18	; 0x12
     776:	b3 89       	ldd	r27, Z+19	; 0x13
     778:	8a 9f       	mul	r24, r26
     77a:	a0 01       	movw	r20, r0
     77c:	8b 9f       	mul	r24, r27
     77e:	50 0d       	add	r21, r0
     780:	9a 9f       	mul	r25, r26
     782:	50 0d       	add	r21, r0
     784:	11 24       	eor	r1, r1
     786:	26 9f       	mul	r18, r22
     788:	c0 01       	movw	r24, r0
     78a:	27 9f       	mul	r18, r23
     78c:	90 0d       	add	r25, r0
     78e:	36 9f       	mul	r19, r22
     790:	90 0d       	add	r25, r0
     792:	11 24       	eor	r1, r1
     794:	48 17       	cp	r20, r24
     796:	59 07       	cpc	r21, r25
     798:	0c f4       	brge	.+2      	; 0x79c <compute_degree_of_membership+0x4c>
     79a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     79c:	8f 3f       	cpi	r24, 0xFF	; 255
     79e:	91 05       	cpc	r25, r1
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <compute_degree_of_membership+0x54>
     7a2:	3c f4       	brge	.+14     	; 0x7b2 <compute_degree_of_membership+0x62>
     7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <compute_degree_of_membership+0x66>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     7b6:	93 87       	std	Z+11, r25	; 0x0b
     7b8:	82 87       	std	Z+10, r24	; 0x0a
     7ba:	08 95       	ret

000007bc <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     7c6:	c6 85       	ldd	r28, Z+14	; 0x0e
     7c8:	d7 85       	ldd	r29, Z+15	; 0x0f
     7ca:	84 85       	ldd	r24, Z+12	; 0x0c
     7cc:	95 85       	ldd	r25, Z+13	; 0x0d
     7ce:	c8 1b       	sub	r28, r24
     7d0:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     7d2:	22 85       	ldd	r18, Z+10	; 0x0a
     7d4:	33 85       	ldd	r19, Z+11	; 0x0b
     7d6:	60 89       	ldd	r22, Z+16	; 0x10
     7d8:	71 89       	ldd	r23, Z+17	; 0x11
     7da:	c9 01       	movw	r24, r18
     7dc:	5f d5       	rcall	.+2750   	; 0x129c <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     7de:	8e 01       	movw	r16, r28
     7e0:	06 1b       	sub	r16, r22
     7e2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     7e4:	62 89       	ldd	r22, Z+18	; 0x12
     7e6:	73 89       	ldd	r23, Z+19	; 0x13
     7e8:	c9 01       	movw	r24, r18
     7ea:	58 d5       	rcall	.+2736   	; 0x129c <__divmodhi4>
    top = base - run_1 - run_2;
     7ec:	06 1b       	sub	r16, r22
     7ee:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     7f0:	c0 0f       	add	r28, r16
     7f2:	d1 1f       	adc	r29, r17
     7f4:	2c 9f       	mul	r18, r28
     7f6:	c0 01       	movw	r24, r0
     7f8:	2d 9f       	mul	r18, r29
     7fa:	90 0d       	add	r25, r0
     7fc:	3c 9f       	mul	r19, r28
     7fe:	90 0d       	add	r25, r0
     800:	11 24       	eor	r1, r1
     802:	99 23       	and	r25, r25
     804:	0c f4       	brge	.+2      	; 0x808 <compute_area_of_trapezoid+0x4c>
     806:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     808:	95 95       	asr	r25
     80a:	87 95       	ror	r24
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     81e:	00 91 6c 02 	lds	r16, 0x026C
     822:	10 91 6d 02 	lds	r17, 0x026D
     826:	01 15       	cp	r16, r1
     828:	11 05       	cpc	r17, r1
     82a:	b9 f0       	breq	.+46     	; 0x85a <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     82c:	f8 01       	movw	r30, r16
     82e:	c4 85       	ldd	r28, Z+12	; 0x0c
     830:	d5 85       	ldd	r29, Z+13	; 0x0d
     832:	20 97       	sbiw	r28, 0x00	; 0
     834:	61 f0       	breq	.+24     	; 0x84e <fuzzification+0x38>
            if (mf!=NULL) {
     836:	20 97       	sbiw	r28, 0x00	; 0
     838:	29 f0       	breq	.+10     	; 0x844 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     83a:	f8 01       	movw	r30, r16
     83c:	62 85       	ldd	r22, Z+10	; 0x0a
     83e:	73 85       	ldd	r23, Z+11	; 0x0b
     840:	ce 01       	movw	r24, r28
     842:	86 df       	rcall	.-244    	; 0x750 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     844:	0c 88       	ldd	r0, Y+20	; 0x14
     846:	dd 89       	ldd	r29, Y+21	; 0x15
     848:	c0 2d       	mov	r28, r0
     84a:	20 97       	sbiw	r28, 0x00	; 0
     84c:	a1 f7       	brne	.-24     	; 0x836 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     84e:	f8 01       	movw	r30, r16
     850:	06 85       	ldd	r16, Z+14	; 0x0e
     852:	17 85       	ldd	r17, Z+15	; 0x0f
     854:	01 15       	cp	r16, r1
     856:	11 05       	cpc	r17, r1
     858:	49 f7       	brne	.-46     	; 0x82c <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     86c:	c0 91 6e 02 	lds	r28, 0x026E
     870:	d0 91 6f 02 	lds	r29, 0x026F
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	b9 f1       	breq	.+110    	; 0x8e6 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     87c:	e8 81       	ld	r30, Y
     87e:	f9 81       	ldd	r31, Y+1	; 0x01
     880:	30 97       	sbiw	r30, 0x00	; 0
     882:	81 f0       	breq	.+32     	; 0x8a4 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     884:	20 2f       	mov	r18, r16
     886:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     888:	a0 81       	ld	r26, Z
     88a:	b1 81       	ldd	r27, Z+1	; 0x01
     88c:	8d 91       	ld	r24, X+
     88e:	9c 91       	ld	r25, X
     890:	82 17       	cp	r24, r18
     892:	93 07       	cpc	r25, r19
     894:	0c f4       	brge	.+2      	; 0x898 <rule_evaluation+0x34>
     896:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     898:	02 80       	ldd	r0, Z+2	; 0x02
     89a:	f3 81       	ldd	r31, Z+3	; 0x03
     89c:	e0 2d       	mov	r30, r0
     89e:	30 97       	sbiw	r30, 0x00	; 0
     8a0:	99 f7       	brne	.-26     	; 0x888 <rule_evaluation+0x24>
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     8a4:	20 2f       	mov	r18, r16
     8a6:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     8a8:	ea 81       	ldd	r30, Y+2	; 0x02
     8aa:	fb 81       	ldd	r31, Y+3	; 0x03
     8ac:	30 97       	sbiw	r30, 0x00	; 0
     8ae:	b1 f0       	breq	.+44     	; 0x8dc <rule_evaluation+0x78>
     8b0:	72 2f       	mov	r23, r18
     8b2:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     8b4:	a0 81       	ld	r26, Z
     8b6:	b1 81       	ldd	r27, Z+1	; 0x01
     8b8:	8d 91       	ld	r24, X+
     8ba:	9c 91       	ld	r25, X
     8bc:	11 97       	sbiw	r26, 0x01	; 1
     8be:	57 2f       	mov	r21, r23
     8c0:	46 2f       	mov	r20, r22
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	14 f4       	brge	.+4      	; 0x8cc <rule_evaluation+0x68>
     8c8:	58 2f       	mov	r21, r24
     8ca:	49 2f       	mov	r20, r25
     8cc:	5c 93       	st	X, r21
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     8d2:	02 80       	ldd	r0, Z+2	; 0x02
     8d4:	f3 81       	ldd	r31, Z+3	; 0x03
     8d6:	e0 2d       	mov	r30, r0
     8d8:	30 97       	sbiw	r30, 0x00	; 0
     8da:	61 f7       	brne	.-40     	; 0x8b4 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     8dc:	0c 80       	ldd	r0, Y+4	; 0x04
     8de:	dd 81       	ldd	r29, Y+5	; 0x05
     8e0:	c0 2d       	mov	r28, r0
     8e2:	20 97       	sbiw	r28, 0x00	; 0
     8e4:	59 f6       	brne	.-106    	; 0x87c <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     8f0:	2f 92       	push	r2
     8f2:	3f 92       	push	r3
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <defuzzification+0x26>
     916:	00 d0       	rcall	.+0      	; 0x918 <defuzzification+0x28>
     918:	00 d0       	rcall	.+0      	; 0x91a <defuzzification+0x2a>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     91e:	80 91 6a 02 	lds	r24, 0x026A
     922:	90 91 6b 02 	lds	r25, 0x026B
     926:	9c 83       	std	Y+4, r25	; 0x04
     928:	8b 83       	std	Y+3, r24	; 0x03
     92a:	89 2b       	or	r24, r25
     92c:	09 f4       	brne	.+2      	; 0x930 <defuzzification+0x40>
     92e:	84 c0       	rjmp	.+264    	; 0xa38 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     930:	eb 81       	ldd	r30, Y+3	; 0x03
     932:	fc 81       	ldd	r31, Y+4	; 0x04
     934:	04 84       	ldd	r0, Z+12	; 0x0c
     936:	f5 85       	ldd	r31, Z+13	; 0x0d
     938:	e0 2d       	mov	r30, r0
     93a:	fe 83       	std	Y+6, r31	; 0x06
     93c:	ed 83       	std	Y+5, r30	; 0x05
     93e:	ef 2b       	or	r30, r31
     940:	09 f4       	brne	.+2      	; 0x944 <defuzzification+0x54>
     942:	66 c0       	rjmp	.+204    	; 0xa10 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     944:	51 2c       	mov	r5, r1
     946:	61 2c       	mov	r6, r1
     948:	71 2c       	mov	r7, r1
     94a:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     94c:	31 2c       	mov	r3, r1
     94e:	21 2c       	mov	r2, r1
     950:	19 82       	std	Y+1, r1	; 0x01
     952:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     954:	8d 81       	ldd	r24, Y+5	; 0x05
     956:	9e 81       	ldd	r25, Y+6	; 0x06
     958:	31 df       	rcall	.-414    	; 0x7bc <compute_area_of_trapezoid>
     95a:	bc 01       	movw	r22, r24
     95c:	88 27       	eor	r24, r24
     95e:	77 fd       	sbrc	r23, 7
     960:	80 95       	com	r24
     962:	98 2f       	mov	r25, r24
     964:	ac d3       	rcall	.+1880   	; 0x10be <__floatsisf>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     96a:	ed 81       	ldd	r30, Y+5	; 0x05
     96c:	fe 81       	ldd	r31, Y+6	; 0x06
     96e:	04 85       	ldd	r16, Z+12	; 0x0c
     970:	15 85       	ldd	r17, Z+13	; 0x0d
     972:	b8 01       	movw	r22, r16
     974:	88 27       	eor	r24, r24
     976:	77 fd       	sbrc	r23, 7
     978:	80 95       	com	r24
     97a:	98 2f       	mov	r25, r24
     97c:	a0 d3       	rcall	.+1856   	; 0x10be <__floatsisf>
     97e:	4b 01       	movw	r8, r22
     980:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     982:	ed 81       	ldd	r30, Y+5	; 0x05
     984:	fe 81       	ldd	r31, Y+6	; 0x06
     986:	86 85       	ldd	r24, Z+14	; 0x0e
     988:	97 85       	ldd	r25, Z+15	; 0x0f
     98a:	80 1b       	sub	r24, r16
     98c:	91 0b       	sbc	r25, r17
     98e:	bc 01       	movw	r22, r24
     990:	12 f4       	brpl	.+4      	; 0x996 <defuzzification+0xa6>
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	75 95       	asr	r23
     998:	67 95       	ror	r22
            centroid = centroid + intermed;
     99a:	88 27       	eor	r24, r24
     99c:	77 fd       	sbrc	r23, 7
     99e:	80 95       	com	r24
     9a0:	98 2f       	mov	r25, r24
     9a2:	8d d3       	rcall	.+1818   	; 0x10be <__floatsisf>
     9a4:	a5 01       	movw	r20, r10
     9a6:	94 01       	movw	r18, r8
     9a8:	8b d2       	rcall	.+1302   	; 0xec0 <__addsf3>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	11 d4       	rcall	.+2082   	; 0x11d6 <__mulsf3>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	63 2d       	mov	r22, r3
     9ba:	72 2d       	mov	r23, r2
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	7f d2       	rcall	.+1278   	; 0xec0 <__addsf3>
     9c2:	36 2e       	mov	r3, r22
     9c4:	27 2e       	mov	r2, r23
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     9ca:	a7 01       	movw	r20, r14
     9cc:	96 01       	movw	r18, r12
     9ce:	65 2d       	mov	r22, r5
     9d0:	76 2d       	mov	r23, r6
     9d2:	87 2d       	mov	r24, r7
     9d4:	94 2d       	mov	r25, r4
     9d6:	74 d2       	rcall	.+1256   	; 0xec0 <__addsf3>
     9d8:	56 2e       	mov	r5, r22
     9da:	67 2e       	mov	r6, r23
     9dc:	78 2e       	mov	r7, r24
     9de:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     9e0:	ed 81       	ldd	r30, Y+5	; 0x05
     9e2:	fe 81       	ldd	r31, Y+6	; 0x06
     9e4:	04 88       	ldd	r0, Z+20	; 0x14
     9e6:	f5 89       	ldd	r31, Z+21	; 0x15
     9e8:	e0 2d       	mov	r30, r0
     9ea:	fe 83       	std	Y+6, r31	; 0x06
     9ec:	ed 83       	std	Y+5, r30	; 0x05
     9ee:	ef 2b       	or	r30, r31
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <defuzzification+0x104>
     9f2:	b0 cf       	rjmp	.-160    	; 0x954 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     9f4:	26 2f       	mov	r18, r22
     9f6:	37 2f       	mov	r19, r23
     9f8:	48 2f       	mov	r20, r24
     9fa:	59 2f       	mov	r21, r25
     9fc:	63 2d       	mov	r22, r3
     9fe:	72 2d       	mov	r23, r2
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	c1 d2       	rcall	.+1410   	; 0xf88 <__divsf3>
     a06:	26 2f       	mov	r18, r22
     a08:	37 2f       	mov	r19, r23
     a0a:	48 2f       	mov	r20, r24
     a0c:	59 2f       	mov	r21, r25
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     a18:	62 2f       	mov	r22, r18
     a1a:	73 2f       	mov	r23, r19
     a1c:	84 2f       	mov	r24, r20
     a1e:	95 2f       	mov	r25, r21
     a20:	1b d3       	rcall	.+1590   	; 0x1058 <__fixsfsi>
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	73 87       	std	Z+11, r23	; 0x0b
     a28:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     a2a:	86 85       	ldd	r24, Z+14	; 0x0e
     a2c:	97 85       	ldd	r25, Z+15	; 0x0f
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	89 2b       	or	r24, r25
     a34:	09 f0       	breq	.+2      	; 0xa38 <defuzzification+0x148>
     a36:	7c cf       	rjmp	.-264    	; 0x930 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     a38:	26 96       	adiw	r28, 0x06	; 6
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ec 01       	movw	r28, r24
     a80:	6a 01       	movw	r12, r20
     a82:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     a84:	32 d4       	rcall	.+2148   	; 0x12ea <strcpy>
    newMf->value = 0;
     a86:	1b 86       	std	Y+11, r1	; 0x0b
     a88:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     a8a:	dd 86       	std	Y+13, r13	; 0x0d
     a8c:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     a8e:	ff 86       	std	Y+15, r15	; 0x0f
     a90:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     a92:	b5 01       	movw	r22, r10
     a94:	6c 19       	sub	r22, r12
     a96:	7d 09       	sbc	r23, r13
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	31 e0       	ldi	r19, 0x01	; 1
     a9c:	c9 01       	movw	r24, r18
     a9e:	fe d3       	rcall	.+2044   	; 0x129c <__divmodhi4>
     aa0:	79 8b       	std	Y+17, r23	; 0x11
     aa2:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     aa4:	b7 01       	movw	r22, r14
     aa6:	60 1b       	sub	r22, r16
     aa8:	71 0b       	sbc	r23, r17
     aaa:	c9 01       	movw	r24, r18
     aac:	f7 d3       	rcall	.+2030   	; 0x129c <__divmodhi4>
     aae:	7b 8b       	std	Y+19, r23	; 0x13
     ab0:	6a 8b       	std	Y+18, r22	; 0x12
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	08 95       	ret

00000ac8 <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile int counter_UART1_reciever;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	0b b6       	in	r0, 0x3b	; 59
     ad4:	0f 92       	push	r0
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
     ade:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
     ae2:	8f 3f       	cpi	r24, 0xFF	; 255
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <__vector_28+0x28>
		counter_UART1_reciever = 0;
     ae6:	10 92 91 02 	sts	0x0291, r1
     aea:	10 92 90 02 	sts	0x0290, r1
     aee:	10 c0       	rjmp	.+32     	; 0xb10 <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
     af0:	e0 91 90 02 	lds	r30, 0x0290
     af4:	f0 91 91 02 	lds	r31, 0x0291
     af8:	e0 59       	subi	r30, 0x90	; 144
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	80 83       	st	Z, r24
		counter_UART1_reciever++;
     afe:	80 91 90 02 	lds	r24, 0x0290
     b02:	90 91 91 02 	lds	r25, 0x0291
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 91 02 	sts	0x0291, r25
     b0c:	80 93 90 02 	sts	0x0290, r24
	
	//Enabling interrupts
	//sei();

	
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
     b26:	6e d0       	rcall	.+220    	; 0xc04 <pwmInit>
	//spi_slave_init();
	setESC(NEUTRAL);
     b28:	8d ec       	ldi	r24, 0xCD	; 205
     b2a:	9a e0       	ldi	r25, 0x0A	; 10
     b2c:	7a d0       	rcall	.+244    	; 0xc22 <setESC>
	setServo(STRAIGHT);
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	9a e0       	ldi	r25, 0x0A	; 10
     b32:	92 c0       	rjmp	.+292    	; 0xc58 <setServo>
     b34:	08 95       	ret

00000b36 <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
     b36:	ec ec       	ldi	r30, 0xCC	; 204
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	11 82       	std	Z+1, r1	; 0x01
     b3c:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
     b3e:	20 e9       	ldi	r18, 0x90	; 144
     b40:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
     b44:	2e e0       	ldi	r18, 0x0E	; 14
     b46:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
     b50:	dc 01       	movw	r26, r24
	
	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
     b52:	e9 ec       	ldi	r30, 0xC9	; 201
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	80 83       	st	Z, r24
	
	//Assigning values from buffer to sens_info
	//	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[0];
	//	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[1];
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[0];
     b5c:	80 91 70 02 	lds	r24, 0x0270
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	8c 93       	st	X, r24
     b64:	14 97       	sbiw	r26, 0x04	; 4
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[1];
     b66:	80 91 71 02 	lds	r24, 0x0271
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8c 93       	st	X, r24
     b6e:	12 97       	sbiw	r26, 0x02	; 2
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[2];
     b70:	80 91 72 02 	lds	r24, 0x0272
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	8c 93       	st	X, r24
     b78:	13 97       	sbiw	r26, 0x03	; 3
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[3];
     b7a:	80 91 73 02 	lds	r24, 0x0273
     b7e:	15 96       	adiw	r26, 0x05	; 5
     b80:	8c 93       	st	X, r24
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
     b82:	10 92 91 02 	sts	0x0291, r1
     b86:	10 92 90 02 	sts	0x0290, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
     b8a:	80 81       	ld	r24, Z
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	80 83       	st	Z, r24
     b90:	08 95       	ret

00000b92 <main>:




int main (void)
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2a 97       	sbiw	r28, 0x0a	; 10
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
	
	
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
	
	carInit();
     ba6:	bf df       	rcall	.-130    	; 0xb26 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	90 ee       	ldi	r25, 0xE0	; 224
     bae:	21 50       	subi	r18, 0x01	; 1
     bb0:	80 40       	sbci	r24, 0x00	; 0
     bb2:	90 40       	sbci	r25, 0x00	; 0
     bb4:	e1 f7       	brne	.-8      	; 0xbae <main+0x1c>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <main+0x26>
     bb8:	00 00       	nop
	_delay_ms(5000);
	
	
	
	sei();
     bba:	78 94       	sei
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	ba df       	rcall	.-140    	; 0xb36 <USART1_init>
			
			cli();
			
			//FLC_obstacle(OCR1A, d);
			//FLC_steering(c, v);
			fuzzy_parking(sL,sF, OCR1A);
     bc2:	08 e8       	ldi	r16, 0x88	; 136
     bc4:	10 e0       	ldi	r17, 0x00	; 0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     bc6:	0f 2e       	mov	r0, r31
     bc8:	fa e8       	ldi	r31, 0x8A	; 138
     bca:	ef 2e       	mov	r14, r31
     bcc:	f1 2c       	mov	r15, r1
     bce:	f0 2d       	mov	r31, r0
	//DDRA = 0xFF;
	//End of test setting
	
	while (1) {
		
		if (counter_UART1_reciever > 3) {
     bd0:	80 91 90 02 	lds	r24, 0x0290
     bd4:	90 91 91 02 	lds	r25, 0x0291
     bd8:	04 97       	sbiw	r24, 0x04	; 4
     bda:	d4 f3       	brlt	.-12     	; 0xbd0 <main+0x3e>
			
			//Reading Information
			//read_sensor_info(&control_mode, sens_info_ptr);
			Sens_info_read(sens_info_ptr);
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	b7 df       	rcall	.-146    	; 0xb50 <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
     be2:	6b 81       	ldd	r22, Y+3	; 0x03
     be4:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	90 e0       	ldi	r25, 0x00	; 0
			int sB = (int) sensor_info.dist_sonic_back;
			//d = (int) sensor_info.dist_sonic_middle;
			
			cli();
     bea:	f8 94       	cli
			
			//FLC_obstacle(OCR1A, d);
			//FLC_steering(c, v);
			fuzzy_parking(sL,sF, OCR1A);
     bec:	f8 01       	movw	r30, r16
     bee:	40 81       	ld	r20, Z
     bf0:	51 81       	ldd	r21, Z+1	; 0x01
     bf2:	86 dd       	rcall	.-1268   	; 0x700 <fuzzy_parking>
			sei();
     bf4:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
     bf6:	f8 01       	movw	r30, r16
     bf8:	80 81       	ld	r24, Z
     bfa:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     bfc:	f7 01       	movw	r30, r14
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	e6 cf       	rjmp	.-52     	; 0xbd0 <main+0x3e>

00000c04 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     c04:	80 e3       	ldi	r24, 0x30	; 48
     c06:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     c08:	82 ea       	ldi	r24, 0xA2	; 162
     c0a:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	9f e8       	ldi	r25, 0x8F	; 143
     c12:	90 93 87 00 	sts	0x0087, r25
     c16:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     c1a:	8a e1       	ldi	r24, 0x1A	; 26
     c1c:	80 93 81 00 	sts	0x0081, r24
     c20:	08 95       	ret

00000c22 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     c22:	80 36       	cpi	r24, 0x60	; 96
     c24:	2a e0       	ldi	r18, 0x0A	; 10
     c26:	92 07       	cpc	r25, r18
     c28:	3c f4       	brge	.+14     	; 0xc38 <setESC+0x16>
	{
		OCR1A = MINESC;
     c2a:	8f e5       	ldi	r24, 0x5F	; 95
     c2c:	9a e0       	ldi	r25, 0x0A	; 10
     c2e:	90 93 89 00 	sts	0x0089, r25
     c32:	80 93 88 00 	sts	0x0088, r24
     c36:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     c38:	8b 33       	cpi	r24, 0x3B	; 59
     c3a:	2b e0       	ldi	r18, 0x0B	; 11
     c3c:	92 07       	cpc	r25, r18
     c3e:	3c f0       	brlt	.+14     	; 0xc4e <setESC+0x2c>
	{
		OCR1A = MAXESC;
     c40:	8b e3       	ldi	r24, 0x3B	; 59
     c42:	9b e0       	ldi	r25, 0x0B	; 11
     c44:	90 93 89 00 	sts	0x0089, r25
     c48:	80 93 88 00 	sts	0x0088, r24
     c4c:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     c4e:	90 93 89 00 	sts	0x0089, r25
     c52:	80 93 88 00 	sts	0x0088, r24
     c56:	08 95       	ret

00000c58 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     c58:	87 3e       	cpi	r24, 0xE7	; 231
     c5a:	27 e0       	ldi	r18, 0x07	; 7
     c5c:	92 07       	cpc	r25, r18
     c5e:	3c f4       	brge	.+14     	; 0xc6e <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     c60:	86 ee       	ldi	r24, 0xE6	; 230
     c62:	97 e0       	ldi	r25, 0x07	; 7
     c64:	90 93 8b 00 	sts	0x008B, r25
     c68:	80 93 8a 00 	sts	0x008A, r24
     c6c:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     c6e:	8f 33       	cpi	r24, 0x3F	; 63
     c70:	2c e0       	ldi	r18, 0x0C	; 12
     c72:	92 07       	cpc	r25, r18
     c74:	3c f0       	brlt	.+14     	; 0xc84 <setServo+0x2c>

		OCR1B = MAXLEFT;
     c76:	8f e3       	ldi	r24, 0x3F	; 63
     c78:	9c e0       	ldi	r25, 0x0C	; 12
     c7a:	90 93 8b 00 	sts	0x008B, r25
     c7e:	80 93 8a 00 	sts	0x008A, r24
     c82:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     c84:	90 93 8b 00 	sts	0x008B, r25
     c88:	80 93 8a 00 	sts	0x008A, r24
     c8c:	08 95       	ret

00000c8e <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	0b b6       	in	r0, 0x3b	; 59
     c9a:	0f 92       	push	r0
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	af 93       	push	r26
     ca6:	bf 93       	push	r27
     ca8:	ef 93       	push	r30
     caa:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
     cac:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
     cae:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
     cb0:	2d 3f       	cpi	r18, 0xFD	; 253
     cb2:	a9 f0       	breq	.+42     	; 0xcde <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
     cb4:	ea ed       	ldi	r30, 0xDA	; 218
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	80 81       	ld	r24, Z
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	dc 01       	movw	r26, r24
     cbe:	a8 56       	subi	r26, 0x68	; 104
     cc0:	be 4f       	sbci	r27, 0xFE	; 254
     cc2:	2c 93       	st	X, r18
		rx_spi.i_last++;
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
     cca:	ec ed       	ldi	r30, 0xDC	; 220
     ccc:	f1 e0       	ldi	r31, 0x01	; 1
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 50 01 	sts	0x0150, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
     cde:	80 91 da 01 	lds	r24, 0x01DA
     ce2:	90 91 db 01 	lds	r25, 0x01DB
     ce6:	80 34       	cpi	r24, 0x40	; 64
     ce8:	91 05       	cpc	r25, r1
     cea:	21 f4       	brne	.+8      	; 0xcf4 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
     cec:	10 92 db 01 	sts	0x01DB, r1
     cf0:	10 92 da 01 	sts	0x01DA, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
     cf4:	80 91 96 01 	lds	r24, 0x0196
     cf8:	90 91 97 01 	lds	r25, 0x0197
     cfc:	89 2b       	or	r24, r25
     cfe:	01 f1       	breq	.+64     	; 0xd40 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
     d00:	e0 91 92 01 	lds	r30, 0x0192
     d04:	f0 91 93 01 	lds	r31, 0x0193
     d08:	ee 5a       	subi	r30, 0xAE	; 174
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	80 81       	ld	r24, Z
     d0e:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
     d10:	e2 e9       	ldi	r30, 0x92	; 146
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
     d1e:	e6 e9       	ldi	r30, 0x96	; 150
     d20:	f1 e0       	ldi	r31, 0x01	; 1
     d22:	20 81       	ld	r18, Z
     d24:	31 81       	ldd	r19, Z+1	; 0x01
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	31 09       	sbc	r19, r1
     d2a:	31 83       	std	Z+1, r19	; 0x01
     d2c:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
     d2e:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
     d30:	80 34       	cpi	r24, 0x40	; 64
     d32:	91 05       	cpc	r25, r1
     d34:	49 f4       	brne	.+18     	; 0xd48 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
     d36:	10 92 93 01 	sts	0x0193, r1
     d3a:	10 92 92 01 	sts	0x0192, r1
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
     d40:	8d ef       	ldi	r24, 0xFD	; 253
     d42:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
     d44:	10 92 51 01 	sts	0x0151, r1
		
	} 	
	

}
     d48:	ff 91       	pop	r31
     d4a:	ef 91       	pop	r30
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0b be       	out	0x3b, r0	; 59
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	0b b6       	in	r0, 0x3b	; 59
     d72:	0f 92       	push	r0
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     d86:	80 91 68 02 	lds	r24, 0x0268
     d8a:	90 91 69 02 	lds	r25, 0x0269
     d8e:	80 34       	cpi	r24, 0x40	; 64
     d90:	91 05       	cpc	r25, r1
     d92:	31 f4       	brne	.+12     	; 0xda0 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 96 02 	sts	0x0296, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     d9a:	80 91 c6 00 	lds	r24, 0x00C6
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	91 05       	cpc	r25, r1
     da4:	e8 f4       	brcc	.+58     	; 0xde0 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     da6:	e6 e6       	ldi	r30, 0x66	; 102
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	20 81       	ld	r18, Z
     dac:	31 81       	ldd	r19, Z+1	; 0x01
     dae:	40 91 c6 00 	lds	r20, 0x00C6
     db2:	d9 01       	movw	r26, r18
     db4:	ac 5d       	subi	r26, 0xDC	; 220
     db6:	bd 4f       	sbci	r27, 0xFD	; 253
     db8:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	90 93 69 02 	sts	0x0269, r25
     dc8:	80 93 68 02 	sts	0x0268, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     dcc:	80 91 68 02 	lds	r24, 0x0268
     dd0:	90 91 69 02 	lds	r25, 0x0269
     dd4:	80 34       	cpi	r24, 0x40	; 64
     dd6:	91 05       	cpc	r25, r1
     dd8:	19 f4       	brne	.+6      	; 0xde0 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 94 02 	sts	0x0294, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     de0:	80 91 66 02 	lds	r24, 0x0266
     de4:	90 91 67 02 	lds	r25, 0x0267
     de8:	80 34       	cpi	r24, 0x40	; 64
     dea:	91 05       	cpc	r25, r1
     dec:	21 f4       	brne	.+8      	; 0xdf6 <__vector_20+0x90>
		rx_uart0.i_last = 0;
     dee:	10 92 67 02 	sts	0x0267, r1
     df2:	10 92 66 02 	sts	0x0266, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 93 02 	sts	0x0293, r24
}
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_22>:




ISR(USART0_TX_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     e32:	80 91 22 02 	lds	r24, 0x0222
     e36:	90 91 23 02 	lds	r25, 0x0223
     e3a:	80 34       	cpi	r24, 0x40	; 64
     e3c:	91 05       	cpc	r25, r1
     e3e:	19 f4       	brne	.+6      	; 0xe46 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     e40:	10 92 92 02 	sts	0x0292, r1
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     e46:	89 2b       	or	r24, r25
     e48:	b9 f0       	breq	.+46     	; 0xe78 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     e4a:	e0 91 1e 02 	lds	r30, 0x021E
     e4e:	f0 91 1f 02 	lds	r31, 0x021F
     e52:	e2 52       	subi	r30, 0x22	; 34
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	80 81       	ld	r24, Z
     e58:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     e5c:	ee e1       	ldi	r30, 0x1E	; 30
     e5e:	f2 e0       	ldi	r31, 0x02	; 2
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     e6a:	e2 e2       	ldi	r30, 0x22	; 34
     e6c:	f2 e0       	ldi	r31, 0x02	; 2
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     e78:	80 91 1e 02 	lds	r24, 0x021E
     e7c:	90 91 1f 02 	lds	r25, 0x021F
     e80:	80 34       	cpi	r24, 0x40	; 64
     e82:	91 05       	cpc	r25, r1
     e84:	21 f4       	brne	.+8      	; 0xe8e <__vector_22+0x72>
		tx_uart0.i_first = 0;
     e86:	10 92 1f 02 	sts	0x021F, r1
     e8a:	10 92 1e 02 	sts	0x021E, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     e8e:	80 91 22 02 	lds	r24, 0x0222
     e92:	90 91 23 02 	lds	r25, 0x0223
     e96:	89 2b       	or	r24, r25
     e98:	39 f4       	brne	.+14     	; 0xea8 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     e9a:	10 92 95 02 	sts	0x0295, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     e9e:	e1 ec       	ldi	r30, 0xC1	; 193
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__subsf3>:
     ebe:	50 58       	subi	r21, 0x80	; 128

00000ec0 <__addsf3>:
     ec0:	bb 27       	eor	r27, r27
     ec2:	aa 27       	eor	r26, r26
     ec4:	0e d0       	rcall	.+28     	; 0xee2 <__addsf3x>
     ec6:	4d c1       	rjmp	.+666    	; 0x1162 <__fp_round>
     ec8:	3e d1       	rcall	.+636    	; 0x1146 <__fp_pscA>
     eca:	30 f0       	brcs	.+12     	; 0xed8 <__addsf3+0x18>
     ecc:	43 d1       	rcall	.+646    	; 0x1154 <__fp_pscB>
     ece:	20 f0       	brcs	.+8      	; 0xed8 <__addsf3+0x18>
     ed0:	31 f4       	brne	.+12     	; 0xede <__addsf3+0x1e>
     ed2:	9f 3f       	cpi	r25, 0xFF	; 255
     ed4:	11 f4       	brne	.+4      	; 0xeda <__addsf3+0x1a>
     ed6:	1e f4       	brtc	.+6      	; 0xede <__addsf3+0x1e>
     ed8:	33 c1       	rjmp	.+614    	; 0x1140 <__fp_nan>
     eda:	0e f4       	brtc	.+2      	; 0xede <__addsf3+0x1e>
     edc:	e0 95       	com	r30
     ede:	e7 fb       	bst	r30, 7
     ee0:	29 c1       	rjmp	.+594    	; 0x1134 <__fp_inf>

00000ee2 <__addsf3x>:
     ee2:	e9 2f       	mov	r30, r25
     ee4:	4f d1       	rcall	.+670    	; 0x1184 <__fp_split3>
     ee6:	80 f3       	brcs	.-32     	; 0xec8 <__addsf3+0x8>
     ee8:	ba 17       	cp	r27, r26
     eea:	62 07       	cpc	r22, r18
     eec:	73 07       	cpc	r23, r19
     eee:	84 07       	cpc	r24, r20
     ef0:	95 07       	cpc	r25, r21
     ef2:	18 f0       	brcs	.+6      	; 0xefa <__addsf3x+0x18>
     ef4:	71 f4       	brne	.+28     	; 0xf12 <__addsf3x+0x30>
     ef6:	9e f5       	brtc	.+102    	; 0xf5e <__addsf3x+0x7c>
     ef8:	67 c1       	rjmp	.+718    	; 0x11c8 <__fp_zero>
     efa:	0e f4       	brtc	.+2      	; 0xefe <__addsf3x+0x1c>
     efc:	e0 95       	com	r30
     efe:	0b 2e       	mov	r0, r27
     f00:	ba 2f       	mov	r27, r26
     f02:	a0 2d       	mov	r26, r0
     f04:	0b 01       	movw	r0, r22
     f06:	b9 01       	movw	r22, r18
     f08:	90 01       	movw	r18, r0
     f0a:	0c 01       	movw	r0, r24
     f0c:	ca 01       	movw	r24, r20
     f0e:	a0 01       	movw	r20, r0
     f10:	11 24       	eor	r1, r1
     f12:	ff 27       	eor	r31, r31
     f14:	59 1b       	sub	r21, r25
     f16:	99 f0       	breq	.+38     	; 0xf3e <__addsf3x+0x5c>
     f18:	59 3f       	cpi	r21, 0xF9	; 249
     f1a:	50 f4       	brcc	.+20     	; 0xf30 <__addsf3x+0x4e>
     f1c:	50 3e       	cpi	r21, 0xE0	; 224
     f1e:	68 f1       	brcs	.+90     	; 0xf7a <__addsf3x+0x98>
     f20:	1a 16       	cp	r1, r26
     f22:	f0 40       	sbci	r31, 0x00	; 0
     f24:	a2 2f       	mov	r26, r18
     f26:	23 2f       	mov	r18, r19
     f28:	34 2f       	mov	r19, r20
     f2a:	44 27       	eor	r20, r20
     f2c:	58 5f       	subi	r21, 0xF8	; 248
     f2e:	f3 cf       	rjmp	.-26     	; 0xf16 <__addsf3x+0x34>
     f30:	46 95       	lsr	r20
     f32:	37 95       	ror	r19
     f34:	27 95       	ror	r18
     f36:	a7 95       	ror	r26
     f38:	f0 40       	sbci	r31, 0x00	; 0
     f3a:	53 95       	inc	r21
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__addsf3x+0x4e>
     f3e:	7e f4       	brtc	.+30     	; 0xf5e <__addsf3x+0x7c>
     f40:	1f 16       	cp	r1, r31
     f42:	ba 0b       	sbc	r27, r26
     f44:	62 0b       	sbc	r22, r18
     f46:	73 0b       	sbc	r23, r19
     f48:	84 0b       	sbc	r24, r20
     f4a:	ba f0       	brmi	.+46     	; 0xf7a <__addsf3x+0x98>
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <__addsf3x+0x96>
     f50:	ff 0f       	add	r31, r31
     f52:	bb 1f       	adc	r27, r27
     f54:	66 1f       	adc	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	c2 f7       	brpl	.-16     	; 0xf4c <__addsf3x+0x6a>
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <__addsf3x+0x98>
     f5e:	ba 0f       	add	r27, r26
     f60:	62 1f       	adc	r22, r18
     f62:	73 1f       	adc	r23, r19
     f64:	84 1f       	adc	r24, r20
     f66:	48 f4       	brcc	.+18     	; 0xf7a <__addsf3x+0x98>
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f7 95       	ror	r31
     f72:	9e 3f       	cpi	r25, 0xFE	; 254
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__addsf3x+0x96>
     f76:	b3 cf       	rjmp	.-154    	; 0xede <__addsf3+0x1e>
     f78:	93 95       	inc	r25
     f7a:	88 0f       	add	r24, r24
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <__addsf3x+0x9e>
     f7e:	99 27       	eor	r25, r25
     f80:	ee 0f       	add	r30, r30
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	08 95       	ret

00000f88 <__divsf3>:
     f88:	0c d0       	rcall	.+24     	; 0xfa2 <__divsf3x>
     f8a:	eb c0       	rjmp	.+470    	; 0x1162 <__fp_round>
     f8c:	e3 d0       	rcall	.+454    	; 0x1154 <__fp_pscB>
     f8e:	40 f0       	brcs	.+16     	; 0xfa0 <__divsf3+0x18>
     f90:	da d0       	rcall	.+436    	; 0x1146 <__fp_pscA>
     f92:	30 f0       	brcs	.+12     	; 0xfa0 <__divsf3+0x18>
     f94:	21 f4       	brne	.+8      	; 0xf9e <__divsf3+0x16>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	19 f0       	breq	.+6      	; 0xfa0 <__divsf3+0x18>
     f9a:	cc c0       	rjmp	.+408    	; 0x1134 <__fp_inf>
     f9c:	51 11       	cpse	r21, r1
     f9e:	15 c1       	rjmp	.+554    	; 0x11ca <__fp_szero>
     fa0:	cf c0       	rjmp	.+414    	; 0x1140 <__fp_nan>

00000fa2 <__divsf3x>:
     fa2:	f0 d0       	rcall	.+480    	; 0x1184 <__fp_split3>
     fa4:	98 f3       	brcs	.-26     	; 0xf8c <__divsf3+0x4>

00000fa6 <__divsf3_pse>:
     fa6:	99 23       	and	r25, r25
     fa8:	c9 f3       	breq	.-14     	; 0xf9c <__divsf3+0x14>
     faa:	55 23       	and	r21, r21
     fac:	b1 f3       	breq	.-20     	; 0xf9a <__divsf3+0x12>
     fae:	95 1b       	sub	r25, r21
     fb0:	55 0b       	sbc	r21, r21
     fb2:	bb 27       	eor	r27, r27
     fb4:	aa 27       	eor	r26, r26
     fb6:	62 17       	cp	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	38 f0       	brcs	.+14     	; 0xfcc <__divsf3_pse+0x26>
     fbe:	9f 5f       	subi	r25, 0xFF	; 255
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	44 1f       	adc	r20, r20
     fc8:	aa 1f       	adc	r26, r26
     fca:	a9 f3       	breq	.-22     	; 0xfb6 <__divsf3_pse+0x10>
     fcc:	33 d0       	rcall	.+102    	; 0x1034 <__divsf3_pse+0x8e>
     fce:	0e 2e       	mov	r0, r30
     fd0:	3a f0       	brmi	.+14     	; 0xfe0 <__divsf3_pse+0x3a>
     fd2:	e0 e8       	ldi	r30, 0x80	; 128
     fd4:	30 d0       	rcall	.+96     	; 0x1036 <__divsf3_pse+0x90>
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	50 40       	sbci	r21, 0x00	; 0
     fda:	e6 95       	lsr	r30
     fdc:	00 1c       	adc	r0, r0
     fde:	ca f7       	brpl	.-14     	; 0xfd2 <__divsf3_pse+0x2c>
     fe0:	29 d0       	rcall	.+82     	; 0x1034 <__divsf3_pse+0x8e>
     fe2:	fe 2f       	mov	r31, r30
     fe4:	27 d0       	rcall	.+78     	; 0x1034 <__divsf3_pse+0x8e>
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	bb 1f       	adc	r27, r27
     fee:	26 17       	cp	r18, r22
     ff0:	37 07       	cpc	r19, r23
     ff2:	48 07       	cpc	r20, r24
     ff4:	ab 07       	cpc	r26, r27
     ff6:	b0 e8       	ldi	r27, 0x80	; 128
     ff8:	09 f0       	breq	.+2      	; 0xffc <__divsf3_pse+0x56>
     ffa:	bb 0b       	sbc	r27, r27
     ffc:	80 2d       	mov	r24, r0
     ffe:	bf 01       	movw	r22, r30
    1000:	ff 27       	eor	r31, r31
    1002:	93 58       	subi	r25, 0x83	; 131
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	2a f0       	brmi	.+10     	; 0x1012 <__divsf3_pse+0x6c>
    1008:	9e 3f       	cpi	r25, 0xFE	; 254
    100a:	51 05       	cpc	r21, r1
    100c:	68 f0       	brcs	.+26     	; 0x1028 <__divsf3_pse+0x82>
    100e:	92 c0       	rjmp	.+292    	; 0x1134 <__fp_inf>
    1010:	dc c0       	rjmp	.+440    	; 0x11ca <__fp_szero>
    1012:	5f 3f       	cpi	r21, 0xFF	; 255
    1014:	ec f3       	brlt	.-6      	; 0x1010 <__divsf3_pse+0x6a>
    1016:	98 3e       	cpi	r25, 0xE8	; 232
    1018:	dc f3       	brlt	.-10     	; 0x1010 <__divsf3_pse+0x6a>
    101a:	86 95       	lsr	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b7 95       	ror	r27
    1022:	f7 95       	ror	r31
    1024:	9f 5f       	subi	r25, 0xFF	; 255
    1026:	c9 f7       	brne	.-14     	; 0x101a <__divsf3_pse+0x74>
    1028:	88 0f       	add	r24, r24
    102a:	91 1d       	adc	r25, r1
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret
    1034:	e1 e0       	ldi	r30, 0x01	; 1
    1036:	66 0f       	add	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	bb 1f       	adc	r27, r27
    103e:	62 17       	cp	r22, r18
    1040:	73 07       	cpc	r23, r19
    1042:	84 07       	cpc	r24, r20
    1044:	ba 07       	cpc	r27, r26
    1046:	20 f0       	brcs	.+8      	; 0x1050 <__divsf3_pse+0xaa>
    1048:	62 1b       	sub	r22, r18
    104a:	73 0b       	sbc	r23, r19
    104c:	84 0b       	sbc	r24, r20
    104e:	ba 0b       	sbc	r27, r26
    1050:	ee 1f       	adc	r30, r30
    1052:	88 f7       	brcc	.-30     	; 0x1036 <__divsf3_pse+0x90>
    1054:	e0 95       	com	r30
    1056:	08 95       	ret

00001058 <__fixsfsi>:
    1058:	04 d0       	rcall	.+8      	; 0x1062 <__fixunssfsi>
    105a:	68 94       	set
    105c:	b1 11       	cpse	r27, r1
    105e:	b5 c0       	rjmp	.+362    	; 0x11ca <__fp_szero>
    1060:	08 95       	ret

00001062 <__fixunssfsi>:
    1062:	98 d0       	rcall	.+304    	; 0x1194 <__fp_splitA>
    1064:	88 f0       	brcs	.+34     	; 0x1088 <__fixunssfsi+0x26>
    1066:	9f 57       	subi	r25, 0x7F	; 127
    1068:	90 f0       	brcs	.+36     	; 0x108e <__fixunssfsi+0x2c>
    106a:	b9 2f       	mov	r27, r25
    106c:	99 27       	eor	r25, r25
    106e:	b7 51       	subi	r27, 0x17	; 23
    1070:	a0 f0       	brcs	.+40     	; 0x109a <__fixunssfsi+0x38>
    1072:	d1 f0       	breq	.+52     	; 0x10a8 <__fixunssfsi+0x46>
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	1a f0       	brmi	.+6      	; 0x1084 <__fixunssfsi+0x22>
    107e:	ba 95       	dec	r27
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__fixunssfsi+0x12>
    1082:	12 c0       	rjmp	.+36     	; 0x10a8 <__fixunssfsi+0x46>
    1084:	b1 30       	cpi	r27, 0x01	; 1
    1086:	81 f0       	breq	.+32     	; 0x10a8 <__fixunssfsi+0x46>
    1088:	9f d0       	rcall	.+318    	; 0x11c8 <__fp_zero>
    108a:	b1 e0       	ldi	r27, 0x01	; 1
    108c:	08 95       	ret
    108e:	9c c0       	rjmp	.+312    	; 0x11c8 <__fp_zero>
    1090:	67 2f       	mov	r22, r23
    1092:	78 2f       	mov	r23, r24
    1094:	88 27       	eor	r24, r24
    1096:	b8 5f       	subi	r27, 0xF8	; 248
    1098:	39 f0       	breq	.+14     	; 0x10a8 <__fixunssfsi+0x46>
    109a:	b9 3f       	cpi	r27, 0xF9	; 249
    109c:	cc f3       	brlt	.-14     	; 0x1090 <__fixunssfsi+0x2e>
    109e:	86 95       	lsr	r24
    10a0:	77 95       	ror	r23
    10a2:	67 95       	ror	r22
    10a4:	b3 95       	inc	r27
    10a6:	d9 f7       	brne	.-10     	; 0x109e <__fixunssfsi+0x3c>
    10a8:	3e f4       	brtc	.+14     	; 0x10b8 <__fixunssfsi+0x56>
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	08 95       	ret

000010ba <__floatunsisf>:
    10ba:	e8 94       	clt
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <__floatsisf+0x12>

000010be <__floatsisf>:
    10be:	97 fb       	bst	r25, 7
    10c0:	3e f4       	brtc	.+14     	; 0x10d0 <__floatsisf+0x12>
    10c2:	90 95       	com	r25
    10c4:	80 95       	com	r24
    10c6:	70 95       	com	r23
    10c8:	61 95       	neg	r22
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	99 23       	and	r25, r25
    10d2:	a9 f0       	breq	.+42     	; 0x10fe <__floatsisf+0x40>
    10d4:	f9 2f       	mov	r31, r25
    10d6:	96 e9       	ldi	r25, 0x96	; 150
    10d8:	bb 27       	eor	r27, r27
    10da:	93 95       	inc	r25
    10dc:	f6 95       	lsr	r31
    10de:	87 95       	ror	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f1 11       	cpse	r31, r1
    10e8:	f8 cf       	rjmp	.-16     	; 0x10da <__floatsisf+0x1c>
    10ea:	fa f4       	brpl	.+62     	; 0x112a <__floatsisf+0x6c>
    10ec:	bb 0f       	add	r27, r27
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__floatsisf+0x36>
    10f0:	60 ff       	sbrs	r22, 0
    10f2:	1b c0       	rjmp	.+54     	; 0x112a <__floatsisf+0x6c>
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	16 c0       	rjmp	.+44     	; 0x112a <__floatsisf+0x6c>
    10fe:	88 23       	and	r24, r24
    1100:	11 f0       	breq	.+4      	; 0x1106 <__floatsisf+0x48>
    1102:	96 e9       	ldi	r25, 0x96	; 150
    1104:	11 c0       	rjmp	.+34     	; 0x1128 <__floatsisf+0x6a>
    1106:	77 23       	and	r23, r23
    1108:	21 f0       	breq	.+8      	; 0x1112 <__floatsisf+0x54>
    110a:	9e e8       	ldi	r25, 0x8E	; 142
    110c:	87 2f       	mov	r24, r23
    110e:	76 2f       	mov	r23, r22
    1110:	05 c0       	rjmp	.+10     	; 0x111c <__floatsisf+0x5e>
    1112:	66 23       	and	r22, r22
    1114:	71 f0       	breq	.+28     	; 0x1132 <__floatsisf+0x74>
    1116:	96 e8       	ldi	r25, 0x86	; 134
    1118:	86 2f       	mov	r24, r22
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	2a f0       	brmi	.+10     	; 0x112a <__floatsisf+0x6c>
    1120:	9a 95       	dec	r25
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	da f7       	brpl	.-10     	; 0x1120 <__floatsisf+0x62>
    112a:	88 0f       	add	r24, r24
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__fp_inf>:
    1134:	97 f9       	bld	r25, 7
    1136:	9f 67       	ori	r25, 0x7F	; 127
    1138:	80 e8       	ldi	r24, 0x80	; 128
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	08 95       	ret

00001140 <__fp_nan>:
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	80 ec       	ldi	r24, 0xC0	; 192
    1144:	08 95       	ret

00001146 <__fp_pscA>:
    1146:	00 24       	eor	r0, r0
    1148:	0a 94       	dec	r0
    114a:	16 16       	cp	r1, r22
    114c:	17 06       	cpc	r1, r23
    114e:	18 06       	cpc	r1, r24
    1150:	09 06       	cpc	r0, r25
    1152:	08 95       	ret

00001154 <__fp_pscB>:
    1154:	00 24       	eor	r0, r0
    1156:	0a 94       	dec	r0
    1158:	12 16       	cp	r1, r18
    115a:	13 06       	cpc	r1, r19
    115c:	14 06       	cpc	r1, r20
    115e:	05 06       	cpc	r0, r21
    1160:	08 95       	ret

00001162 <__fp_round>:
    1162:	09 2e       	mov	r0, r25
    1164:	03 94       	inc	r0
    1166:	00 0c       	add	r0, r0
    1168:	11 f4       	brne	.+4      	; 0x116e <__fp_round+0xc>
    116a:	88 23       	and	r24, r24
    116c:	52 f0       	brmi	.+20     	; 0x1182 <__fp_round+0x20>
    116e:	bb 0f       	add	r27, r27
    1170:	40 f4       	brcc	.+16     	; 0x1182 <__fp_round+0x20>
    1172:	bf 2b       	or	r27, r31
    1174:	11 f4       	brne	.+4      	; 0x117a <__fp_round+0x18>
    1176:	60 ff       	sbrs	r22, 0
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <__fp_round+0x20>
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	08 95       	ret

00001184 <__fp_split3>:
    1184:	57 fd       	sbrc	r21, 7
    1186:	90 58       	subi	r25, 0x80	; 128
    1188:	44 0f       	add	r20, r20
    118a:	55 1f       	adc	r21, r21
    118c:	59 f0       	breq	.+22     	; 0x11a4 <__fp_splitA+0x10>
    118e:	5f 3f       	cpi	r21, 0xFF	; 255
    1190:	71 f0       	breq	.+28     	; 0x11ae <__fp_splitA+0x1a>
    1192:	47 95       	ror	r20

00001194 <__fp_splitA>:
    1194:	88 0f       	add	r24, r24
    1196:	97 fb       	bst	r25, 7
    1198:	99 1f       	adc	r25, r25
    119a:	61 f0       	breq	.+24     	; 0x11b4 <__fp_splitA+0x20>
    119c:	9f 3f       	cpi	r25, 0xFF	; 255
    119e:	79 f0       	breq	.+30     	; 0x11be <__fp_splitA+0x2a>
    11a0:	87 95       	ror	r24
    11a2:	08 95       	ret
    11a4:	12 16       	cp	r1, r18
    11a6:	13 06       	cpc	r1, r19
    11a8:	14 06       	cpc	r1, r20
    11aa:	55 1f       	adc	r21, r21
    11ac:	f2 cf       	rjmp	.-28     	; 0x1192 <__fp_split3+0xe>
    11ae:	46 95       	lsr	r20
    11b0:	f1 df       	rcall	.-30     	; 0x1194 <__fp_splitA>
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <__fp_splitA+0x30>
    11b4:	16 16       	cp	r1, r22
    11b6:	17 06       	cpc	r1, r23
    11b8:	18 06       	cpc	r1, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	f1 cf       	rjmp	.-30     	; 0x11a0 <__fp_splitA+0xc>
    11be:	86 95       	lsr	r24
    11c0:	71 05       	cpc	r23, r1
    11c2:	61 05       	cpc	r22, r1
    11c4:	08 94       	sec
    11c6:	08 95       	ret

000011c8 <__fp_zero>:
    11c8:	e8 94       	clt

000011ca <__fp_szero>:
    11ca:	bb 27       	eor	r27, r27
    11cc:	66 27       	eor	r22, r22
    11ce:	77 27       	eor	r23, r23
    11d0:	cb 01       	movw	r24, r22
    11d2:	97 f9       	bld	r25, 7
    11d4:	08 95       	ret

000011d6 <__mulsf3>:
    11d6:	0b d0       	rcall	.+22     	; 0x11ee <__mulsf3x>
    11d8:	c4 cf       	rjmp	.-120    	; 0x1162 <__fp_round>
    11da:	b5 df       	rcall	.-150    	; 0x1146 <__fp_pscA>
    11dc:	28 f0       	brcs	.+10     	; 0x11e8 <__mulsf3+0x12>
    11de:	ba df       	rcall	.-140    	; 0x1154 <__fp_pscB>
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <__mulsf3+0x12>
    11e2:	95 23       	and	r25, r21
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <__mulsf3+0x12>
    11e6:	a6 cf       	rjmp	.-180    	; 0x1134 <__fp_inf>
    11e8:	ab cf       	rjmp	.-170    	; 0x1140 <__fp_nan>
    11ea:	11 24       	eor	r1, r1
    11ec:	ee cf       	rjmp	.-36     	; 0x11ca <__fp_szero>

000011ee <__mulsf3x>:
    11ee:	ca df       	rcall	.-108    	; 0x1184 <__fp_split3>
    11f0:	a0 f3       	brcs	.-24     	; 0x11da <__mulsf3+0x4>

000011f2 <__mulsf3_pse>:
    11f2:	95 9f       	mul	r25, r21
    11f4:	d1 f3       	breq	.-12     	; 0x11ea <__mulsf3+0x14>
    11f6:	95 0f       	add	r25, r21
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	55 1f       	adc	r21, r21
    11fc:	62 9f       	mul	r22, r18
    11fe:	f0 01       	movw	r30, r0
    1200:	72 9f       	mul	r23, r18
    1202:	bb 27       	eor	r27, r27
    1204:	f0 0d       	add	r31, r0
    1206:	b1 1d       	adc	r27, r1
    1208:	63 9f       	mul	r22, r19
    120a:	aa 27       	eor	r26, r26
    120c:	f0 0d       	add	r31, r0
    120e:	b1 1d       	adc	r27, r1
    1210:	aa 1f       	adc	r26, r26
    1212:	64 9f       	mul	r22, r20
    1214:	66 27       	eor	r22, r22
    1216:	b0 0d       	add	r27, r0
    1218:	a1 1d       	adc	r26, r1
    121a:	66 1f       	adc	r22, r22
    121c:	82 9f       	mul	r24, r18
    121e:	22 27       	eor	r18, r18
    1220:	b0 0d       	add	r27, r0
    1222:	a1 1d       	adc	r26, r1
    1224:	62 1f       	adc	r22, r18
    1226:	73 9f       	mul	r23, r19
    1228:	b0 0d       	add	r27, r0
    122a:	a1 1d       	adc	r26, r1
    122c:	62 1f       	adc	r22, r18
    122e:	83 9f       	mul	r24, r19
    1230:	a0 0d       	add	r26, r0
    1232:	61 1d       	adc	r22, r1
    1234:	22 1f       	adc	r18, r18
    1236:	74 9f       	mul	r23, r20
    1238:	33 27       	eor	r19, r19
    123a:	a0 0d       	add	r26, r0
    123c:	61 1d       	adc	r22, r1
    123e:	23 1f       	adc	r18, r19
    1240:	84 9f       	mul	r24, r20
    1242:	60 0d       	add	r22, r0
    1244:	21 1d       	adc	r18, r1
    1246:	82 2f       	mov	r24, r18
    1248:	76 2f       	mov	r23, r22
    124a:	6a 2f       	mov	r22, r26
    124c:	11 24       	eor	r1, r1
    124e:	9f 57       	subi	r25, 0x7F	; 127
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	8a f0       	brmi	.+34     	; 0x1276 <__mulsf3_pse+0x84>
    1254:	e1 f0       	breq	.+56     	; 0x128e <__mulsf3_pse+0x9c>
    1256:	88 23       	and	r24, r24
    1258:	4a f0       	brmi	.+18     	; 0x126c <__mulsf3_pse+0x7a>
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	bb 1f       	adc	r27, r27
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	91 50       	subi	r25, 0x01	; 1
    1268:	50 40       	sbci	r21, 0x00	; 0
    126a:	a9 f7       	brne	.-22     	; 0x1256 <__mulsf3_pse+0x64>
    126c:	9e 3f       	cpi	r25, 0xFE	; 254
    126e:	51 05       	cpc	r21, r1
    1270:	70 f0       	brcs	.+28     	; 0x128e <__mulsf3_pse+0x9c>
    1272:	60 cf       	rjmp	.-320    	; 0x1134 <__fp_inf>
    1274:	aa cf       	rjmp	.-172    	; 0x11ca <__fp_szero>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	ec f3       	brlt	.-6      	; 0x1274 <__mulsf3_pse+0x82>
    127a:	98 3e       	cpi	r25, 0xE8	; 232
    127c:	dc f3       	brlt	.-10     	; 0x1274 <__mulsf3_pse+0x82>
    127e:	86 95       	lsr	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b7 95       	ror	r27
    1286:	f7 95       	ror	r31
    1288:	e7 95       	ror	r30
    128a:	9f 5f       	subi	r25, 0xFF	; 255
    128c:	c1 f7       	brne	.-16     	; 0x127e <__mulsf3_pse+0x8c>
    128e:	fe 2b       	or	r31, r30
    1290:	88 0f       	add	r24, r24
    1292:	91 1d       	adc	r25, r1
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret

0000129c <__divmodhi4>:
    129c:	97 fb       	bst	r25, 7
    129e:	07 2e       	mov	r0, r23
    12a0:	16 f4       	brtc	.+4      	; 0x12a6 <__divmodhi4+0xa>
    12a2:	00 94       	com	r0
    12a4:	06 d0       	rcall	.+12     	; 0x12b2 <__divmodhi4_neg1>
    12a6:	77 fd       	sbrc	r23, 7
    12a8:	08 d0       	rcall	.+16     	; 0x12ba <__divmodhi4_neg2>
    12aa:	0b d0       	rcall	.+22     	; 0x12c2 <__udivmodhi4>
    12ac:	07 fc       	sbrc	r0, 7
    12ae:	05 d0       	rcall	.+10     	; 0x12ba <__divmodhi4_neg2>
    12b0:	3e f4       	brtc	.+14     	; 0x12c0 <__divmodhi4_exit>

000012b2 <__divmodhi4_neg1>:
    12b2:	90 95       	com	r25
    12b4:	81 95       	neg	r24
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	08 95       	ret

000012ba <__divmodhi4_neg2>:
    12ba:	70 95       	com	r23
    12bc:	61 95       	neg	r22
    12be:	7f 4f       	sbci	r23, 0xFF	; 255

000012c0 <__divmodhi4_exit>:
    12c0:	08 95       	ret

000012c2 <__udivmodhi4>:
    12c2:	aa 1b       	sub	r26, r26
    12c4:	bb 1b       	sub	r27, r27
    12c6:	51 e1       	ldi	r21, 0x11	; 17
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <__udivmodhi4_ep>

000012ca <__udivmodhi4_loop>:
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	a6 17       	cp	r26, r22
    12d0:	b7 07       	cpc	r27, r23
    12d2:	10 f0       	brcs	.+4      	; 0x12d8 <__udivmodhi4_ep>
    12d4:	a6 1b       	sub	r26, r22
    12d6:	b7 0b       	sbc	r27, r23

000012d8 <__udivmodhi4_ep>:
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	5a 95       	dec	r21
    12de:	a9 f7       	brne	.-22     	; 0x12ca <__udivmodhi4_loop>
    12e0:	80 95       	com	r24
    12e2:	90 95       	com	r25
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	08 95       	ret

000012ea <strcpy>:
    12ea:	fb 01       	movw	r30, r22
    12ec:	dc 01       	movw	r26, r24
    12ee:	01 90       	ld	r0, Z+
    12f0:	0d 92       	st	X+, r0
    12f2:	00 20       	and	r0, r0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <strcpy+0x4>
    12f6:	08 95       	ret

000012f8 <_exit>:
    12f8:	f8 94       	cli

000012fa <__stop_program>:
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <__stop_program>
