
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001bd2  00001c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001da  008001da  00001d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002606  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b5  00000000  00000000  00004506  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e70  00000000  00000000  00004ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  00006d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ba5  00000000  00000000  000071f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001328  00000000  00000000  00017d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000190bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003831  00000000  00000000  00019225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_19>
      50:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ed       	ldi	r30, 0xD2	; 210
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 32       	cpi	r26, 0x22	; 34
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <main>
      c6:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <theFuzzySteering>:
 * The fuzzy logic controller is designed to manage the fourth state
 */


void theFuzzySteering(int c, int v)
{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c4 5c       	subi	r28, 0xC4	; 196
      f6:	d1 40       	sbci	r29, 0x01	; 1
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	2c 01       	movw	r4, r24
     104:	6b 01       	movw	r12, r22

	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");  //5-15 rakt på höger sida
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	e0 e0       	ldi	r30, 0x00	; 0
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	de 01       	movw	r26, r28
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	01 90       	ld	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	8a 95       	dec	r24
     116:	e1 f7       	brne	.-8      	; 0x110 <theFuzzySteering+0x44>
	
	struct mf_type inNegative;
	MATLAB_MF(&inNegative, "inNegative", 34, 35, 60, 110);
     118:	3e 01       	movw	r6, r28
     11a:	21 e1       	ldi	r18, 0x11	; 17
     11c:	62 0e       	add	r6, r18
     11e:	71 1c       	adc	r7, r1
     120:	0f 2e       	mov	r0, r31
     122:	fe e6       	ldi	r31, 0x6E	; 110
     124:	ef 2e       	mov	r14, r31
     126:	f1 2c       	mov	r15, r1
     128:	f0 2d       	mov	r31, r0
     12a:	0c e3       	ldi	r16, 0x3C	; 60
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	23 e2       	ldi	r18, 0x23	; 35
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	42 e2       	ldi	r20, 0x22	; 34
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	68 e0       	ldi	r22, 0x08	; 8
     138:	71 e0       	ldi	r23, 0x01	; 1
     13a:	c3 01       	movw	r24, r6
     13c:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type inZero;
	MATLAB_MF(&inZero, "inZero", 75, 125, 125, 175);
     140:	4e 01       	movw	r8, r28
     142:	47 e2       	ldi	r20, 0x27	; 39
     144:	84 0e       	add	r8, r20
     146:	91 1c       	adc	r9, r1
     148:	0f 2e       	mov	r0, r31
     14a:	ff ea       	ldi	r31, 0xAF	; 175
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 2c       	mov	r15, r1
     150:	f0 2d       	mov	r31, r0
     152:	0d e7       	ldi	r16, 0x7D	; 125
     154:	10 e0       	ldi	r17, 0x00	; 0
     156:	2d e7       	ldi	r18, 0x7D	; 125
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	4b e4       	ldi	r20, 0x4B	; 75
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	63 e1       	ldi	r22, 0x13	; 19
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	c4 01       	movw	r24, r8
     164:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type inPositive;
	MATLAB_MF(&inPositive, "inPositive", 140, 190, 205, 206);
     168:	5e 01       	movw	r10, r28
     16a:	5d e3       	ldi	r21, 0x3D	; 61
     16c:	a5 0e       	add	r10, r21
     16e:	b1 1c       	adc	r11, r1
     170:	0f 2e       	mov	r0, r31
     172:	fe ec       	ldi	r31, 0xCE	; 206
     174:	ef 2e       	mov	r14, r31
     176:	f1 2c       	mov	r15, r1
     178:	f0 2d       	mov	r31, r0
     17a:	0d ec       	ldi	r16, 0xCD	; 205
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	2e eb       	ldi	r18, 0xBE	; 190
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4c e8       	ldi	r20, 0x8C	; 140
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	6a e1       	ldi	r22, 0x1A	; 26
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	c5 01       	movw	r24, r10
     18c:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	
	delta_C.membership_functions = &inNegative;
     190:	7e 86       	std	Y+14, r7	; 0x0e
     192:	6d 86       	std	Y+13, r6	; 0x0d
	inNegative.next = &inZero;
     194:	9e a2       	std	Y+38, r9	; 0x26
     196:	8d a2       	std	Y+37, r8	; 0x25
	inZero.next = &inPositive;
     198:	bc ae       	std	Y+60, r11	; 0x3c
     19a:	ab ae       	std	Y+59, r10	; 0x3b
	inPositive.next = NULL;
     19c:	63 96       	adiw	r28, 0x13	; 19
     19e:	1f ae       	std	Y+63, r1	; 0x3f
     1a0:	1e ae       	std	Y+62, r1	; 0x3e
     1a2:	63 97       	sbiw	r28, 0x13	; 19
	
	// set iErr's input value to measErr value
	if(c<35)				// if sensor value is smaller than delta_C's input set's lower limit
     1a4:	83 e2       	ldi	r24, 0x23	; 35
     1a6:	48 16       	cp	r4, r24
     1a8:	51 04       	cpc	r5, r1
     1aa:	2c f4       	brge	.+10     	; 0x1b6 <theFuzzySteering+0xea>
	{
		delta_C.value = 35;  // force input value to lowest point in delta_C's input set
     1ac:	83 e2       	ldi	r24, 0x23	; 35
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	9c 87       	std	Y+12, r25	; 0x0c
     1b2:	8b 87       	std	Y+11, r24	; 0x0b
     1b4:	0b c0       	rjmp	.+22     	; 0x1cc <theFuzzySteering+0x100>
	}
	else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     1b6:	ae ec       	ldi	r26, 0xCE	; 206
     1b8:	4a 16       	cp	r4, r26
     1ba:	51 04       	cpc	r5, r1
     1bc:	2c f0       	brlt	.+10     	; 0x1c8 <theFuzzySteering+0xfc>
	{
		delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     1be:	8d ec       	ldi	r24, 0xCD	; 205
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <theFuzzySteering+0x100>
	}
	else
	{
		delta_C.value = c;
     1c8:	5c 86       	std	Y+12, r5	; 0x0c
     1ca:	4b 86       	std	Y+11, r4	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	e5 e2       	ldi	r30, 0x25	; 37
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	de 01       	movw	r26, r28
     1d4:	ad 5a       	subi	r26, 0xAD	; 173
     1d6:	bf 4f       	sbci	r27, 0xFF	; 255
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <theFuzzySteering+0x10c>
	
	struct mf_type inMinus;
	MATLAB_MF(&inMinus, "inMinus", -1, 0, 10, 30);
     1e0:	3e 01       	movw	r6, r28
     1e2:	b3 e6       	ldi	r27, 0x63	; 99
     1e4:	6b 0e       	add	r6, r27
     1e6:	71 1c       	adc	r7, r1
     1e8:	0f 2e       	mov	r0, r31
     1ea:	fe e1       	ldi	r31, 0x1E	; 30
     1ec:	ef 2e       	mov	r14, r31
     1ee:	f1 2c       	mov	r15, r1
     1f0:	f0 2d       	mov	r31, r0
     1f2:	0a e0       	ldi	r16, 0x0A	; 10
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	4f ef       	ldi	r20, 0xFF	; 255
     1fc:	5f ef       	ldi	r21, 0xFF	; 255
     1fe:	6d e2       	ldi	r22, 0x2D	; 45
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	c3 01       	movw	r24, r6
     204:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type inNyll;
	MATLAB_MF(&inNyll, "inNyll", 20 , 40, 40, 60);
     208:	4e 01       	movw	r8, r28
     20a:	e9 e7       	ldi	r30, 0x79	; 121
     20c:	8e 0e       	add	r8, r30
     20e:	91 1c       	adc	r9, r1
     210:	0f 2e       	mov	r0, r31
     212:	fc e3       	ldi	r31, 0x3C	; 60
     214:	ef 2e       	mov	r14, r31
     216:	f1 2c       	mov	r15, r1
     218:	f0 2d       	mov	r31, r0
     21a:	08 e2       	ldi	r16, 0x28	; 40
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	28 e2       	ldi	r18, 0x28	; 40
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	44 e1       	ldi	r20, 0x14	; 20
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	65 e3       	ldi	r22, 0x35	; 53
     228:	71 e0       	ldi	r23, 0x01	; 1
     22a:	c4 01       	movw	r24, r8
     22c:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type inPlus;
	MATLAB_MF(&inPlus, "inPlus", 50, 70, 80, 81);
     230:	5e 01       	movw	r10, r28
     232:	ff e8       	ldi	r31, 0x8F	; 143
     234:	af 0e       	add	r10, r31
     236:	b1 1c       	adc	r11, r1
     238:	0f 2e       	mov	r0, r31
     23a:	f1 e5       	ldi	r31, 0x51	; 81
     23c:	ef 2e       	mov	r14, r31
     23e:	f1 2c       	mov	r15, r1
     240:	f0 2d       	mov	r31, r0
     242:	00 e5       	ldi	r16, 0x50	; 80
     244:	10 e0       	ldi	r17, 0x00	; 0
     246:	26 e4       	ldi	r18, 0x46	; 70
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	42 e3       	ldi	r20, 0x32	; 50
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	6c e3       	ldi	r22, 0x3C	; 60
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	c5 01       	movw	r24, r10
     254:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	
	delta_V.membership_functions = &inMinus;
     258:	a1 96       	adiw	r28, 0x21	; 33
     25a:	7f ae       	std	Y+63, r7	; 0x3f
     25c:	6e ae       	std	Y+62, r6	; 0x3e
     25e:	a1 97       	sbiw	r28, 0x21	; 33
	inMinus.next = &inNyll;
     260:	d3 01       	movw	r26, r6
     262:	55 96       	adiw	r26, 0x15	; 21
     264:	9c 92       	st	X, r9
     266:	8e 92       	st	-X, r8
     268:	54 97       	sbiw	r26, 0x14	; 20
	inNyll.next = &inPlus;
     26a:	f4 01       	movw	r30, r8
     26c:	b5 8a       	std	Z+21, r11	; 0x15
     26e:	a4 8a       	std	Z+20, r10	; 0x14
	inPlus.next = NULL;
     270:	d5 01       	movw	r26, r10
     272:	55 96       	adiw	r26, 0x15	; 21
     274:	1c 92       	st	X, r1
     276:	1e 92       	st	-X, r1
     278:	54 97       	sbiw	r26, 0x14	; 20
	
	// set V's input value to V´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
     27a:	dd 20       	and	r13, r13
     27c:	2c f4       	brge	.+10     	; 0x288 <theFuzzySteering+0x1bc>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     27e:	6f 96       	adiw	r28, 0x1f	; 31
     280:	1f ae       	std	Y+63, r1	; 0x3f
     282:	1e ae       	std	Y+62, r1	; 0x3e
     284:	6f 97       	sbiw	r28, 0x1f	; 31
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <theFuzzySteering+0x1da>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     288:	b1 e5       	ldi	r27, 0x51	; 81
     28a:	cb 16       	cp	r12, r27
     28c:	d1 04       	cpc	r13, r1
     28e:	3c f0       	brlt	.+14     	; 0x29e <theFuzzySteering+0x1d2>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
     290:	80 e5       	ldi	r24, 0x50	; 80
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	6f 96       	adiw	r28, 0x1f	; 31
     296:	9f af       	std	Y+63, r25	; 0x3f
     298:	8e af       	std	Y+62, r24	; 0x3e
     29a:	6f 97       	sbiw	r28, 0x1f	; 31
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <theFuzzySteering+0x1da>
	}
	else
	{
		delta_V.value = v;
     29e:	6f 96       	adiw	r28, 0x1f	; 31
     2a0:	df ae       	std	Y+63, r13	; 0x3f
     2a2:	ce ae       	std	Y+62, r12	; 0x3e
     2a4:	6f 97       	sbiw	r28, 0x1f	; 31
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering");
     2a6:	1e 01       	movw	r2, r28
     2a8:	e5 ea       	ldi	r30, 0xA5	; 165
     2aa:	2e 0e       	add	r2, r30
     2ac:	31 1c       	adc	r3, r1
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	e3 e4       	ldi	r30, 0x43	; 67
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	d1 01       	movw	r26, r2
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <theFuzzySteering+0x1ea>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT, 2260, 2260, 2360);
     2be:	2e 01       	movw	r4, r28
     2c0:	f5 eb       	ldi	r31, 0xB5	; 181
     2c2:	4f 0e       	add	r4, r31
     2c4:	51 1c       	adc	r5, r1
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f8 e3       	ldi	r31, 0x38	; 56
     2ca:	ef 2e       	mov	r14, r31
     2cc:	f9 e0       	ldi	r31, 0x09	; 9
     2ce:	ff 2e       	mov	r15, r31
     2d0:	f0 2d       	mov	r31, r0
     2d2:	04 ed       	ldi	r16, 0xD4	; 212
     2d4:	18 e0       	ldi	r17, 0x08	; 8
     2d6:	24 ed       	ldi	r18, 0xD4	; 212
     2d8:	38 e0       	ldi	r19, 0x08	; 8
     2da:	46 ee       	ldi	r20, 0xE6	; 230
     2dc:	57 e0       	ldi	r21, 0x07	; 7
     2de:	6c e4       	ldi	r22, 0x4C	; 76
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	c2 01       	movw	r24, r4
     2e4:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2360, 2460, 2460, 2560);
     2e8:	3e 01       	movw	r6, r28
     2ea:	2b ec       	ldi	r18, 0xCB	; 203
     2ec:	62 0e       	add	r6, r18
     2ee:	71 1c       	adc	r7, r1
     2f0:	0f 2e       	mov	r0, r31
     2f2:	e1 2c       	mov	r14, r1
     2f4:	fa e0       	ldi	r31, 0x0A	; 10
     2f6:	ff 2e       	mov	r15, r31
     2f8:	f0 2d       	mov	r31, r0
     2fa:	0c e9       	ldi	r16, 0x9C	; 156
     2fc:	19 e0       	ldi	r17, 0x09	; 9
     2fe:	2c e9       	ldi	r18, 0x9C	; 156
     300:	39 e0       	ldi	r19, 0x09	; 9
     302:	48 e3       	ldi	r20, 0x38	; 56
     304:	59 e0       	ldi	r21, 0x09	; 9
     306:	66 e5       	ldi	r22, 0x56	; 86
     308:	71 e0       	ldi	r23, 0x01	; 1
     30a:	c3 01       	movw	r24, r6
     30c:	0e 94 95 09 	call	0x132a	; 0x132a <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2560, 2660, 2660, 2760);
     310:	6e 01       	movw	r12, r28
     312:	41 ee       	ldi	r20, 0xE1	; 225
     314:	c4 0e       	add	r12, r20
     316:	d1 1c       	adc	r13, r1
     318:	0f 2e       	mov	r0, r31
     31a:	f8 ec       	ldi	r31, 0xC8	; 200
     31c:	ef 2e       	mov	r14, r31
     31e:	fa e0       	ldi	r31, 0x0A	; 10
     320:	ff 2e       	mov	r15, r31
     322:	f0 2d       	mov	r31, r0
     324:	04 e6       	ldi	r16, 0x64	; 100
     326:	1a e0       	ldi	r17, 0x0A	; 10
     328:	24 e6       	ldi	r18, 0x64	; 100
     32a:	3a e0       	ldi	r19, 0x0A	; 10
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5a e0       	ldi	r21, 0x0A	; 10
     330:	6b e5       	ldi	r22, 0x5B	; 91
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	c6 01       	movw	r24, r12
     336:	f9 d7       	rcall	.+4082   	; 0x132a <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2760, 2860, 2860, 3000);
     338:	4e 01       	movw	r8, r28
     33a:	57 ef       	ldi	r21, 0xF7	; 247
     33c:	85 0e       	add	r8, r21
     33e:	91 1c       	adc	r9, r1
     340:	0f 2e       	mov	r0, r31
     342:	f8 eb       	ldi	r31, 0xB8	; 184
     344:	ef 2e       	mov	r14, r31
     346:	fb e0       	ldi	r31, 0x0B	; 11
     348:	ff 2e       	mov	r15, r31
     34a:	f0 2d       	mov	r31, r0
     34c:	0c e2       	ldi	r16, 0x2C	; 44
     34e:	1b e0       	ldi	r17, 0x0B	; 11
     350:	2c e2       	ldi	r18, 0x2C	; 44
     352:	3b e0       	ldi	r19, 0x0B	; 11
     354:	48 ec       	ldi	r20, 0xC8	; 200
     356:	5a e0       	ldi	r21, 0x0A	; 10
     358:	64 e6       	ldi	r22, 0x64	; 100
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	c4 01       	movw	r24, r8
     35e:	e5 d7       	rcall	.+4042   	; 0x132a <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", 3000, 3060, 3060, MAXRIGHT);
     360:	5e 01       	movw	r10, r28
     362:	83 ef       	ldi	r24, 0xF3	; 243
     364:	a8 1a       	sub	r10, r24
     366:	8e ef       	ldi	r24, 0xFE	; 254
     368:	b8 0a       	sbc	r11, r24
     36a:	0f 2e       	mov	r0, r31
     36c:	ff e3       	ldi	r31, 0x3F	; 63
     36e:	ef 2e       	mov	r14, r31
     370:	fc e0       	ldi	r31, 0x0C	; 12
     372:	ff 2e       	mov	r15, r31
     374:	f0 2d       	mov	r31, r0
     376:	04 ef       	ldi	r16, 0xF4	; 244
     378:	1b e0       	ldi	r17, 0x0B	; 11
     37a:	24 ef       	ldi	r18, 0xF4	; 244
     37c:	3b e0       	ldi	r19, 0x0B	; 11
     37e:	48 eb       	ldi	r20, 0xB8	; 184
     380:	5b e0       	ldi	r21, 0x0B	; 11
     382:	6a e6       	ldi	r22, 0x6A	; 106
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	c5 01       	movw	r24, r10
     388:	d0 d7       	rcall	.+4000   	; 0x132a <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
     38a:	d1 01       	movw	r26, r2
     38c:	1d 96       	adiw	r26, 0x0d	; 13
     38e:	bc 92       	st	X, r11
     390:	ae 92       	st	-X, r10
     392:	1c 97       	sbiw	r26, 0x0c	; 12
	sharpRight.next = &right;
     394:	f5 01       	movw	r30, r10
     396:	95 8a       	std	Z+21, r9	; 0x15
     398:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &straight;
     39a:	d4 01       	movw	r26, r8
     39c:	55 96       	adiw	r26, 0x15	; 21
     39e:	dc 92       	st	X, r13
     3a0:	ce 92       	st	-X, r12
     3a2:	54 97       	sbiw	r26, 0x14	; 20
	straight.next = &left;
     3a4:	f6 01       	movw	r30, r12
     3a6:	75 8a       	std	Z+21, r7	; 0x15
     3a8:	64 8a       	std	Z+20, r6	; 0x14
	left.next = &sharpLeft;
     3aa:	d3 01       	movw	r26, r6
     3ac:	55 96       	adiw	r26, 0x15	; 21
     3ae:	5c 92       	st	X, r5
     3b0:	4e 92       	st	-X, r4
     3b2:	54 97       	sbiw	r26, 0x14	; 20
	sharpLeft.next = NULL;
     3b4:	f2 01       	movw	r30, r4
     3b6:	15 8a       	std	Z+21, r1	; 0x15
     3b8:	14 8a       	std	Z+20, r1	; 0x14
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	90 93 f9 02 	sts	0x02F9, r25
     3c2:	80 93 f8 02 	sts	0x02F8, r24
	delta_C.next = &delta_V;
     3c6:	e2 56       	subi	r30, 0x62	; 98
     3c8:	f1 09       	sbc	r31, r1
     3ca:	f8 8b       	std	Y+16, r31	; 0x10
     3cc:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
     3ce:	17 86       	std	Z+15, r1	; 0x0f
     3d0:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
     3d2:	30 92 f7 02 	sts	0x02F7, r3
     3d6:	20 92 f6 02 	sts	0x02F6, r2
	steering.next = NULL;
     3da:	d1 01       	movw	r26, r2
     3dc:	1f 96       	adiw	r26, 0x0f	; 15
     3de:	1c 92       	st	X, r1
     3e0:	1e 92       	st	-X, r1
     3e2:	1e 97       	sbiw	r26, 0x0e	; 14
	
	
	
	//RULE 9 "if C is zero AND V is high then servo is left"
	struct rule_element_type then9;
	then9.value = &left.value;
     3e4:	a2 58       	subi	r26, 0x82	; 130
     3e6:	bf 4f       	sbci	r27, 0xFF	; 255
     3e8:	73 01       	movw	r14, r6
     3ea:	ea e0       	ldi	r30, 0x0A	; 10
     3ec:	ee 0e       	add	r14, r30
     3ee:	f1 1c       	adc	r15, r1
     3f0:	11 96       	adiw	r26, 0x01	; 1
     3f2:	fc 92       	st	X, r15
     3f4:	ee 92       	st	-X, r14
	then9.next = NULL;
     3f6:	13 96       	adiw	r26, 0x03	; 3
     3f8:	1c 92       	st	X, r1
     3fa:	1e 92       	st	-X, r1
     3fc:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if92;
	if92.value = &inPlus.value;
     3fe:	9e 01       	movw	r18, r28
     400:	29 5d       	subi	r18, 0xD9	; 217
     402:	3e 4f       	sbci	r19, 0xFE	; 254
     404:	3e 01       	movw	r6, r28
     406:	f9 e9       	ldi	r31, 0x99	; 153
     408:	6f 0e       	add	r6, r31
     40a:	71 1c       	adc	r7, r1
     40c:	f9 01       	movw	r30, r18
     40e:	71 82       	std	Z+1, r7	; 0x01
     410:	60 82       	st	Z, r6
	if92.next = NULL;
     412:	13 82       	std	Z+3, r1	; 0x03
     414:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if91;
	if91.value = &inZero.value;
     416:	86 5d       	subi	r24, 0xD6	; 214
     418:	9e 4f       	sbci	r25, 0xFE	; 254
     41a:	8e 01       	movw	r16, r28
     41c:	0f 5c       	subi	r16, 0xCF	; 207
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	fc 01       	movw	r30, r24
     422:	11 83       	std	Z+1, r17	; 0x01
     424:	00 83       	st	Z, r16
	if91.next = &if92;
     426:	33 83       	std	Z+3, r19	; 0x03
     428:	22 83       	std	Z+2, r18	; 0x02

	struct rule_type rule9;
	rule9.if_side = &if91;
     42a:	34 96       	adiw	r30, 0x04	; 4
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
	rule9.then_side = &then9;
     430:	b3 83       	std	Z+3, r27	; 0x03
     432:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = NULL;
     434:	15 82       	std	Z+5, r1	; 0x05
     436:	14 82       	std	Z+4, r1	; 0x04

	
	//RULE 8 "if C is positive AND V is inPlus then servo is right"
	struct rule_element_type then8;
	then8.value = &right.value;
     438:	22 5f       	subi	r18, 0xF2	; 242
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	4a e0       	ldi	r20, 0x0A	; 10
     43e:	84 0e       	add	r8, r20
     440:	91 1c       	adc	r9, r1
     442:	d9 01       	movw	r26, r18
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	9c 92       	st	X, r9
     448:	8e 92       	st	-X, r8
	then8.next = NULL;
     44a:	13 96       	adiw	r26, 0x03	; 3
     44c:	1c 92       	st	X, r1
     44e:	1e 92       	st	-X, r1
     450:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if82;
	if82.value = &inPlus.value;
     452:	be 01       	movw	r22, r28
     454:	67 5c       	subi	r22, 0xC7	; 199
     456:	7e 4f       	sbci	r23, 0xFE	; 254
     458:	db 01       	movw	r26, r22
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	7c 92       	st	X, r7
     45e:	6e 92       	st	-X, r6
	if82.next = NULL;
     460:	13 96       	adiw	r26, 0x03	; 3
     462:	1c 92       	st	X, r1
     464:	1e 92       	st	-X, r1
     466:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if81;
	if81.value = &inPositive.value;
     468:	ae 01       	movw	r20, r28
     46a:	43 5c       	subi	r20, 0xC3	; 195
     46c:	5e 4f       	sbci	r21, 0xFE	; 254
     46e:	84 5e       	subi	r24, 0xE4	; 228
     470:	91 09       	sbc	r25, r1
     472:	da 01       	movw	r26, r20
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	9c 93       	st	X, r25
     478:	8e 93       	st	-X, r24
	if81.next = &if82;
     47a:	13 96       	adiw	r26, 0x03	; 3
     47c:	7c 93       	st	X, r23
     47e:	6e 93       	st	-X, r22
     480:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule8;
	rule8.if_side = &if81;
     482:	14 96       	adiw	r26, 0x04	; 4
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	5c 93       	st	X, r21
     488:	4e 93       	st	-X, r20
	rule8.then_side = &then8;
     48a:	13 96       	adiw	r26, 0x03	; 3
     48c:	3c 93       	st	X, r19
     48e:	2e 93       	st	-X, r18
     490:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     492:	15 96       	adiw	r26, 0x05	; 5
     494:	fc 93       	st	X, r31
     496:	ee 93       	st	-X, r30
     498:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
	struct rule_element_type then7;
	then7.value = &sharpRight.value;
     49a:	46 5f       	subi	r20, 0xF6	; 246
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	ea e0       	ldi	r30, 0x0A	; 10
     4a0:	ae 0e       	add	r10, r30
     4a2:	b1 1c       	adc	r11, r1
     4a4:	fa 01       	movw	r30, r20
     4a6:	b1 82       	std	Z+1, r11	; 0x01
     4a8:	a0 82       	st	Z, r10
	then7.next = NULL;
     4aa:	13 82       	std	Z+3, r1	; 0x03
     4ac:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if72;
	if72.value = &inNyll.value;
     4ae:	5e 01       	movw	r10, r28
     4b0:	f5 eb       	ldi	r31, 0xB5	; 181
     4b2:	af 1a       	sub	r10, r31
     4b4:	fe ef       	ldi	r31, 0xFE	; 254
     4b6:	bf 0a       	sbc	r11, r31
     4b8:	22 5b       	subi	r18, 0xB2	; 178
     4ba:	31 09       	sbc	r19, r1
     4bc:	f5 01       	movw	r30, r10
     4be:	31 83       	std	Z+1, r19	; 0x01
     4c0:	20 83       	st	Z, r18
	if72.next = NULL;
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if71;
	if71.value = &inPositive.value;
     4c6:	6a 5e       	subi	r22, 0xEA	; 234
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	fb 01       	movw	r30, r22
     4cc:	91 83       	std	Z+1, r25	; 0x01
     4ce:	80 83       	st	Z, r24
	if71.next = &if72;
     4d0:	b3 82       	std	Z+3, r11	; 0x03
     4d2:	a2 82       	std	Z+2, r10	; 0x02

	struct rule_type rule7;
	rule7.if_side = &if71;
     4d4:	34 96       	adiw	r30, 0x04	; 4
     4d6:	71 83       	std	Z+1, r23	; 0x01
     4d8:	60 83       	st	Z, r22
	rule7.then_side = &then7;
     4da:	53 83       	std	Z+3, r21	; 0x03
     4dc:	42 83       	std	Z+2, r20	; 0x02
	rule7.next = &rule8;
     4de:	b5 83       	std	Z+5, r27	; 0x05
     4e0:	a4 83       	std	Z+4, r26	; 0x04
	
	
	//RULE 6 "if C is positive AND V is minus then servo is straight"
	struct rule_element_type then6;
	then6.value = &straight.value;
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	c4 0e       	add	r12, r20
     4e6:	d1 1c       	adc	r13, r1
     4e8:	c7 5a       	subi	r28, 0xA7	; 167
     4ea:	de 4f       	sbci	r29, 0xFE	; 254
     4ec:	d9 82       	std	Y+1, r13	; 0x01
     4ee:	c8 82       	st	Y, r12
     4f0:	c9 55       	subi	r28, 0x59	; 89
     4f2:	d1 40       	sbci	r29, 0x01	; 1
	then6.next = NULL;
     4f4:	c5 5a       	subi	r28, 0xA5	; 165
     4f6:	de 4f       	sbci	r29, 0xFE	; 254
     4f8:	19 82       	std	Y+1, r1	; 0x01
     4fa:	18 82       	st	Y, r1
     4fc:	cb 55       	subi	r28, 0x5B	; 91
     4fe:	d1 40       	sbci	r29, 0x01	; 1

	struct rule_element_type if62;
	if62.value = &inMinus.value;
     500:	62 5f       	subi	r22, 0xF2	; 242
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	5e 01       	movw	r10, r28
     506:	5d e6       	ldi	r21, 0x6D	; 109
     508:	a5 0e       	add	r10, r21
     50a:	b1 1c       	adc	r11, r1
     50c:	db 01       	movw	r26, r22
     50e:	11 96       	adiw	r26, 0x01	; 1
     510:	bc 92       	st	X, r11
     512:	ae 92       	st	-X, r10
	if62.next = NULL;
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	1c 92       	st	X, r1
     518:	1e 92       	st	-X, r1
     51a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if61;
	if61.value = &inPositive.value;
     51c:	ae 01       	movw	r20, r28
     51e:	4f 59       	subi	r20, 0x9F	; 159
     520:	5e 4f       	sbci	r21, 0xFE	; 254
     522:	da 01       	movw	r26, r20
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	9c 93       	st	X, r25
     528:	8e 93       	st	-X, r24
	if61.next = &if62;
     52a:	13 96       	adiw	r26, 0x03	; 3
     52c:	7c 93       	st	X, r23
     52e:	6e 93       	st	-X, r22
     530:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule6;
	rule6.if_side = &if61;
     532:	82 5e       	subi	r24, 0xE2	; 226
     534:	9e 4f       	sbci	r25, 0xFE	; 254
     536:	dc 01       	movw	r26, r24
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	5c 93       	st	X, r21
     53c:	4e 93       	st	-X, r20
	rule6.then_side = &then6;
     53e:	49 e5       	ldi	r20, 0x59	; 89
     540:	51 e0       	ldi	r21, 0x01	; 1
     542:	4c 0f       	add	r20, r28
     544:	5d 1f       	adc	r21, r29
     546:	13 96       	adiw	r26, 0x03	; 3
     548:	5c 93       	st	X, r21
     54a:	4e 93       	st	-X, r20
     54c:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     54e:	15 96       	adiw	r26, 0x05	; 5
     550:	fc 93       	st	X, r31
     552:	ee 93       	st	-X, r30
     554:	14 97       	sbiw	r26, 0x04	; 4

	

	//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
	struct rule_element_type then5;
	then5.value = &sharpLeft.value;
     556:	16 96       	adiw	r26, 0x06	; 6
     558:	5a e0       	ldi	r21, 0x0A	; 10
     55a:	45 0e       	add	r4, r21
     55c:	51 1c       	adc	r5, r1
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	5c 92       	st	X, r5
     562:	4e 92       	st	-X, r4
	then5.next = NULL;
     564:	13 96       	adiw	r26, 0x03	; 3
     566:	1c 92       	st	X, r1
     568:	1e 92       	st	-X, r1
     56a:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if52;
	if52.value = &inNyll.value;
     56c:	2e 01       	movw	r4, r28
     56e:	e1 e9       	ldi	r30, 0x91	; 145
     570:	4e 1a       	sub	r4, r30
     572:	ee ef       	ldi	r30, 0xFE	; 254
     574:	5e 0a       	sbc	r5, r30
     576:	f2 01       	movw	r30, r4
     578:	31 83       	std	Z+1, r19	; 0x01
     57a:	20 83       	st	Z, r18
	if52.next = NULL;
     57c:	13 82       	std	Z+3, r1	; 0x03
     57e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if51;
	if51.value = &inNegative.value;
     580:	6a 5e       	subi	r22, 0xEA	; 234
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	ae 01       	movw	r20, r28
     586:	45 5e       	subi	r20, 0xE5	; 229
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	fb 01       	movw	r30, r22
     58c:	51 83       	std	Z+1, r21	; 0x01
     58e:	40 83       	st	Z, r20
	if51.next = &if52;
     590:	53 82       	std	Z+3, r5	; 0x03
     592:	42 82       	std	Z+2, r4	; 0x02

	struct rule_type rule5;
	rule5.if_side = &if51;
     594:	34 96       	adiw	r30, 0x04	; 4
     596:	71 83       	std	Z+1, r23	; 0x01
     598:	60 83       	st	Z, r22
	rule5.then_side = &then5;
     59a:	b3 83       	std	Z+3, r27	; 0x03
     59c:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     59e:	95 83       	std	Z+5, r25	; 0x05
     5a0:	84 83       	std	Z+4, r24	; 0x04

	

	//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
	struct rule_element_type then4;
	then4.value = &straight.value;
     5a2:	66 5f       	subi	r22, 0xF6	; 246
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	db 01       	movw	r26, r22
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	dc 92       	st	X, r13
     5ac:	ce 92       	st	-X, r12
	then4.next = NULL;
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	1c 92       	st	X, r1
     5b2:	1e 92       	st	-X, r1
     5b4:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &inNyll.value;
     5b6:	4c 96       	adiw	r24, 0x1c	; 28
     5b8:	dc 01       	movw	r26, r24
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	3c 93       	st	X, r19
     5be:	2e 93       	st	-X, r18
	if42.next = NULL;
     5c0:	13 96       	adiw	r26, 0x03	; 3
     5c2:	1c 92       	st	X, r1
     5c4:	1e 92       	st	-X, r1
     5c6:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &inZero.value;
     5c8:	2e 5f       	subi	r18, 0xFE	; 254
     5ca:	3e 4f       	sbci	r19, 0xFE	; 254
     5cc:	d9 01       	movw	r26, r18
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	1c 93       	st	X, r17
     5d2:	0e 93       	st	-X, r16
	if41.next = &if42;
     5d4:	13 96       	adiw	r26, 0x03	; 3
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
     5da:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_type rule4;
	rule4.if_side = &if41;
     5dc:	08 96       	adiw	r24, 0x08	; 8
     5de:	dc 01       	movw	r26, r24
     5e0:	11 96       	adiw	r26, 0x01	; 1
     5e2:	3c 93       	st	X, r19
     5e4:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     5e6:	13 96       	adiw	r26, 0x03	; 3
     5e8:	7c 93       	st	X, r23
     5ea:	6e 93       	st	-X, r22
     5ec:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     5ee:	15 96       	adiw	r26, 0x05	; 5
     5f0:	fc 93       	st	X, r31
     5f2:	ee 93       	st	-X, r30
     5f4:	14 97       	sbiw	r26, 0x04	; 4
	
	//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
	struct rule_element_type then3;
	then3.value = &straight.value;
     5f6:	6e 5e       	subi	r22, 0xEE	; 238
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	fb 01       	movw	r30, r22
     5fc:	d1 82       	std	Z+1, r13	; 0x01
     5fe:	c0 82       	st	Z, r12
	then3.next = NULL;
     600:	13 82       	std	Z+3, r1	; 0x03
     602:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &inPlus.value;
     604:	1a 96       	adiw	r26, 0x0a	; 10
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	7c 92       	st	X, r7
     60a:	6e 92       	st	-X, r6
	if32.next = NULL;
     60c:	13 96       	adiw	r26, 0x03	; 3
     60e:	1c 92       	st	X, r1
     610:	1e 92       	st	-X, r1
     612:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &inNegative.value;
     614:	2e 5e       	subi	r18, 0xEE	; 238
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	f9 01       	movw	r30, r18
     61a:	51 83       	std	Z+1, r21	; 0x01
     61c:	40 83       	st	Z, r20
	if31.next = &if32;
     61e:	b3 83       	std	Z+3, r27	; 0x03
     620:	a2 83       	std	Z+2, r26	; 0x02

	struct rule_type rule3;
	rule3.if_side = &if31;
     622:	18 96       	adiw	r26, 0x08	; 8
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	3c 93       	st	X, r19
     628:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
     62a:	13 96       	adiw	r26, 0x03	; 3
     62c:	7c 93       	st	X, r23
     62e:	6e 93       	st	-X, r22
     630:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     632:	15 96       	adiw	r26, 0x05	; 5
     634:	9c 93       	st	X, r25
     636:	8e 93       	st	-X, r24
     638:	14 97       	sbiw	r26, 0x04	; 4
	
	
	//RULE 2 "if C is negative AND V is minus then servo is Left"
	struct rule_element_type then2;
	then2.value = &left.value;
     63a:	6e 5e       	subi	r22, 0xEE	; 238
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	fb 01       	movw	r30, r22
     640:	f1 82       	std	Z+1, r15	; 0x01
     642:	e0 82       	st	Z, r14
	then2.next = NULL;
     644:	13 82       	std	Z+3, r1	; 0x03
     646:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if22;
	if22.value = &inMinus.value;
     648:	4c 96       	adiw	r24, 0x1c	; 28
     64a:	fc 01       	movw	r30, r24
     64c:	b1 82       	std	Z+1, r11	; 0x01
     64e:	a0 82       	st	Z, r10
	if22.next = NULL;
     650:	13 82       	std	Z+3, r1	; 0x03
     652:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &inNegative.value;
     654:	2e 5e       	subi	r18, 0xEE	; 238
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f9 01       	movw	r30, r18
     65a:	51 83       	std	Z+1, r21	; 0x01
     65c:	40 83       	st	Z, r20
	if21.next = &if22;
     65e:	93 83       	std	Z+3, r25	; 0x03
     660:	82 83       	std	Z+2, r24	; 0x02

	struct rule_type rule2;
	rule2.if_side = &if21;
     662:	08 96       	adiw	r24, 0x08	; 8
     664:	fc 01       	movw	r30, r24
     666:	31 83       	std	Z+1, r19	; 0x01
     668:	20 83       	st	Z, r18
	rule2.then_side = &then2;
     66a:	73 83       	std	Z+3, r23	; 0x03
     66c:	62 83       	std	Z+2, r22	; 0x02
	rule2.next = &rule3;
     66e:	b5 83       	std	Z+5, r27	; 0x05
     670:	a4 83       	std	Z+4, r26	; 0x04

	//RULE 1 "if C is zero AND V is minus then steering is right"
	struct rule_element_type then1;
	then1.value = &right.value;
     672:	58 96       	adiw	r26, 0x18	; 24
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	9c 92       	st	X, r9
     678:	8e 92       	st	-X, r8
	then1.next = NULL;
     67a:	13 96       	adiw	r26, 0x03	; 3
     67c:	1c 92       	st	X, r1
     67e:	1e 92       	st	-X, r1
     680:	12 97       	sbiw	r26, 0x02	; 2

	struct rule_element_type if12;
	if12.value = &inMinus.value;
     682:	44 56       	subi	r20, 0x64	; 100
     684:	5e 4f       	sbci	r21, 0xFE	; 254
     686:	fa 01       	movw	r30, r20
     688:	b1 82       	std	Z+1, r11	; 0x01
     68a:	a0 82       	st	Z, r10
	if12.next = NULL;
     68c:	13 82       	std	Z+3, r1	; 0x03
     68e:	12 82       	std	Z+2, r1	; 0x02

	struct rule_element_type if11;
	if11.value = &inZero.value;
     690:	2e 5e       	subi	r18, 0xEE	; 238
     692:	3f 4f       	sbci	r19, 0xFF	; 255
     694:	f9 01       	movw	r30, r18
     696:	11 83       	std	Z+1, r17	; 0x01
     698:	00 83       	st	Z, r16
	if11.next = &if12;
     69a:	53 83       	std	Z+3, r21	; 0x03
     69c:	42 83       	std	Z+2, r20	; 0x02

	struct rule_type rule1;
	rule1.if_side = &if11;
     69e:	34 96       	adiw	r30, 0x04	; 4
     6a0:	31 83       	std	Z+1, r19	; 0x01
     6a2:	20 83       	st	Z, r18
	rule1.then_side = &then1;
     6a4:	b3 83       	std	Z+3, r27	; 0x03
     6a6:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     6a8:	95 83       	std	Z+5, r25	; 0x05
     6aa:	84 83       	std	Z+4, r24	; 0x04
	Rule_Base = &rule1;
     6ac:	f0 93 fb 02 	sts	0x02FB, r31
     6b0:	e0 93 fa 02 	sts	0x02FA, r30
	
	
	// the methods performing the FLC
	fuzzification();
     6b4:	10 d5       	rcall	.+2592   	; 0x10d6 <fuzzification>
	rule_evaluation();
     6b6:	36 d5       	rcall	.+2668   	; 0x1124 <rule_evaluation>
	defuzzification();
     6b8:	7b d5       	rcall	.+2806   	; 0x11b0 <defuzzification>
	if (steering.value < MAXLEFT)
     6ba:	d1 01       	movw	r26, r2
     6bc:	1a 96       	adiw	r26, 0x0a	; 10
     6be:	8d 91       	ld	r24, X+
     6c0:	9c 91       	ld	r25, X
     6c2:	1b 97       	sbiw	r26, 0x0b	; 11
     6c4:	86 3e       	cpi	r24, 0xE6	; 230
     6c6:	b7 e0       	ldi	r27, 0x07	; 7
     6c8:	9b 07       	cpc	r25, r27
     6ca:	24 f4       	brge	.+8      	; 0x6d4 <theFuzzySteering+0x608>
	{
		setServo(MAXLEFT);
     6cc:	86 ee       	ldi	r24, 0xE6	; 230
     6ce:	97 e0       	ldi	r25, 0x07	; 7
     6d0:	2e d7       	rcall	.+3676   	; 0x152e <setServo>
     6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <theFuzzySteering+0x61a>
	}
	else if (steering.value >MAXRIGHT)
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	ec e0       	ldi	r30, 0x0C	; 12
     6d8:	9e 07       	cpc	r25, r30
     6da:	24 f0       	brlt	.+8      	; 0x6e4 <theFuzzySteering+0x618>
	{
		setServo(MAXRIGHT);
     6dc:	8f e3       	ldi	r24, 0x3F	; 63
     6de:	9c e0       	ldi	r25, 0x0C	; 12
     6e0:	26 d7       	rcall	.+3660   	; 0x152e <setServo>
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <theFuzzySteering+0x61a>
	}
	else
	{
		setServo(steering.value);
     6e4:	24 d7       	rcall	.+3656   	; 0x152e <setServo>
	}
	
	
	
}
     6e6:	cc 53       	subi	r28, 0x3C	; 60
     6e8:	de 4f       	sbci	r29, 0xFE	; 254
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	7f 90       	pop	r7
     70e:	6f 90       	pop	r6
     710:	5f 90       	pop	r5
     712:	4f 90       	pop	r4
     714:	3f 90       	pop	r3
     716:	2f 90       	pop	r2
     718:	08 95       	ret

0000071a <FLC_steering>:



int FLC_steering(int c, int v)
{
	if ((c == 227) & (v == 45))            // No lines detected
     71a:	31 e0       	ldi	r19, 0x01	; 1
     71c:	6d 32       	cpi	r22, 0x2D	; 45
     71e:	71 05       	cpc	r23, r1
     720:	09 f0       	breq	.+2      	; 0x724 <FLC_steering+0xa>
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	83 3e       	cpi	r24, 0xE3	; 227
     728:	91 05       	cpc	r25, r1
     72a:	09 f0       	breq	.+2      	; 0x72e <FLC_steering+0x14>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	22 23       	and	r18, r18
     730:	31 f0       	breq	.+12     	; 0x73e <FLC_steering+0x24>
     732:	33 23       	and	r19, r19
     734:	21 f0       	breq	.+8      	; 0x73e <FLC_steering+0x24>
	{
		setServo(STRAIGHT);
     736:	84 e6       	ldi	r24, 0x64	; 100
     738:	9a e0       	ldi	r25, 0x0A	; 10
     73a:	f9 d6       	rcall	.+3570   	; 0x152e <setServo>
     73c:	1b c0       	rjmp	.+54     	; 0x774 <FLC_steering+0x5a>
	}
	else if ((c == 20) & (v == 45))        // right curvature, turn right
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	84 31       	cpi	r24, 0x14	; 20
     742:	91 05       	cpc	r25, r1
     744:	09 f0       	breq	.+2      	; 0x748 <FLC_steering+0x2e>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	22 23       	and	r18, r18
     74a:	31 f0       	breq	.+12     	; 0x758 <FLC_steering+0x3e>
     74c:	33 23       	and	r19, r19
     74e:	21 f0       	breq	.+8      	; 0x758 <FLC_steering+0x3e>
	{
		setServo(MAXRIGHT);
     750:	8f e3       	ldi	r24, 0x3F	; 63
     752:	9c e0       	ldi	r25, 0x0C	; 12
     754:	ec d6       	rcall	.+3544   	; 0x152e <setServo>
     756:	0e c0       	rjmp	.+28     	; 0x774 <FLC_steering+0x5a>
	}
	else if ((c == 210) & (v == 45))       // left curvature, turn left
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	82 3d       	cpi	r24, 0xD2	; 210
     75c:	91 05       	cpc	r25, r1
     75e:	09 f0       	breq	.+2      	; 0x762 <FLC_steering+0x48>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	22 23       	and	r18, r18
     764:	31 f0       	breq	.+12     	; 0x772 <FLC_steering+0x58>
     766:	33 23       	and	r19, r19
     768:	21 f0       	breq	.+8      	; 0x772 <FLC_steering+0x58>
	{
		setServo(MAXLEFT);
     76a:	86 ee       	ldi	r24, 0xE6	; 230
     76c:	97 e0       	ldi	r25, 0x07	; 7
     76e:	df d6       	rcall	.+3518   	; 0x152e <setServo>
     770:	01 c0       	rjmp	.+2      	; 0x774 <FLC_steering+0x5a>
	}
	else                                   // straight road, do fuzzy
	{
		theFuzzySteering(c,v);
     772:	ac dc       	rcall	.-1704   	; 0xcc <theFuzzySteering>
	}
	
	return 0;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 95       	ret

0000077a <FLC_obstacle>:

// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////

void FLC_obstacle(int currentOCR1A, int midSonicRange)
{
     77a:	2f 92       	push	r2
     77c:	3f 92       	push	r3
     77e:	4f 92       	push	r4
     780:	5f 92       	push	r5
     782:	6f 92       	push	r6
     784:	7f 92       	push	r7
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	c4 53       	subi	r28, 0x34	; 52
     7a4:	d2 40       	sbci	r29, 0x02	; 2
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
	
		// DECLARATION OF DISTANCE INPUT VARIABLE
		//////////////////////////////////////////////////////////////////////////////
		
		struct io_type distance; strcpy(distance.name, "distance");
     7b0:	29 e0       	ldi	r18, 0x09	; 9
     7b2:	e5 e7       	ldi	r30, 0x75	; 117
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	de 01       	movw	r26, r28
     7b8:	11 96       	adiw	r26, 0x01	; 1
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	2a 95       	dec	r18
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <FLC_obstacle+0x40>
		struct io_type speed; strcpy(speed.name, "speed");
     7c2:	26 e0       	ldi	r18, 0x06	; 6
     7c4:	ee e7       	ldi	r30, 0x7E	; 126
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	de 01       	movw	r26, r28
     7ca:	51 96       	adiw	r26, 0x11	; 17
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	2a 95       	dec	r18
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <FLC_obstacle+0x52>
		
		// Variable assigned its reference value
		if (currentOCR1A<MIN_SPEED) {
     7d4:	84 3b       	cpi	r24, 0xB4	; 180
     7d6:	2a e0       	ldi	r18, 0x0A	; 10
     7d8:	92 07       	cpc	r25, r18
     7da:	2c f4       	brge	.+10     	; 0x7e6 <FLC_obstacle+0x6c>
			speed.value = MIN_SPEED;
     7dc:	84 eb       	ldi	r24, 0xB4	; 180
     7de:	9a e0       	ldi	r25, 0x0A	; 10
     7e0:	9c 8f       	std	Y+28, r25	; 0x1c
     7e2:	8b 8f       	std	Y+27, r24	; 0x1b
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <FLC_obstacle+0x82>
		}
		else if (currentOCR1A>MAX_SPEED)
     7e6:	87 33       	cpi	r24, 0x37	; 55
     7e8:	4b e0       	ldi	r20, 0x0B	; 11
     7ea:	94 07       	cpc	r25, r20
     7ec:	2c f0       	brlt	.+10     	; 0x7f8 <FLC_obstacle+0x7e>
		{
			speed.value = MAX_SPEED;
     7ee:	86 e3       	ldi	r24, 0x36	; 54
     7f0:	9b e0       	ldi	r25, 0x0B	; 11
     7f2:	9c 8f       	std	Y+28, r25	; 0x1c
     7f4:	8b 8f       	std	Y+27, r24	; 0x1b
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <FLC_obstacle+0x82>
		}
		else
		{
			speed.value = currentOCR1A;
     7f8:	9c 8f       	std	Y+28, r25	; 0x1c
     7fa:	8b 8f       	std	Y+27, r24	; 0x1b
		}
		
		// Variable assigned its reference value
		if(midSonicRange < MIN_DISTANCE)
     7fc:	77 23       	and	r23, r23
     7fe:	1c f4       	brge	.+6      	; 0x806 <FLC_obstacle+0x8c>
		{
			distance.value = MIN_DISTANCE;
     800:	1c 86       	std	Y+12, r1	; 0x0c
     802:	1b 86       	std	Y+11, r1	; 0x0b
     804:	0a c0       	rjmp	.+20     	; 0x81a <FLC_obstacle+0xa0>
		}
		else if (midSonicRange > MAX_DISTANCE)
     806:	6b 3f       	cpi	r22, 0xFB	; 251
     808:	71 05       	cpc	r23, r1
     80a:	2c f0       	brlt	.+10     	; 0x816 <FLC_obstacle+0x9c>
		{
			distance.value = MAX_DISTANCE;
     80c:	8a ef       	ldi	r24, 0xFA	; 250
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	9c 87       	std	Y+12, r25	; 0x0c
     812:	8b 87       	std	Y+11, r24	; 0x0b
     814:	02 c0       	rjmp	.+4      	; 0x81a <FLC_obstacle+0xa0>
		}
		else
		{
			distance.value = midSonicRange;
     816:	7c 87       	std	Y+12, r23	; 0x0c
     818:	6b 87       	std	Y+11, r22	; 0x0b
		}
		
		
		// Set MFs
		struct mf_type stopDist;
		MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 52);
     81a:	6e 01       	movw	r12, r28
     81c:	51 e2       	ldi	r21, 0x21	; 33
     81e:	c5 0e       	add	r12, r21
     820:	d1 1c       	adc	r13, r1
     822:	0f 2e       	mov	r0, r31
     824:	f4 e3       	ldi	r31, 0x34	; 52
     826:	ef 2e       	mov	r14, r31
     828:	f1 2c       	mov	r15, r1
     82a:	f0 2d       	mov	r31, r0
     82c:	0c e0       	ldi	r16, 0x0C	; 12
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4f ef       	ldi	r20, 0xFF	; 255
     836:	5f ef       	ldi	r21, 0xFF	; 255
     838:	64 e8       	ldi	r22, 0x84	; 132
     83a:	71 e0       	ldi	r23, 0x01	; 1
     83c:	c6 01       	movw	r24, r12
     83e:	75 d5       	rcall	.+2794   	; 0x132a <MATLAB_MF>
		struct mf_type oneM;
		MATLAB_MF(&oneM, "oneM", 30, 60, 60, 95);
     840:	3e 01       	movw	r6, r28
     842:	67 e3       	ldi	r22, 0x37	; 55
     844:	66 0e       	add	r6, r22
     846:	71 1c       	adc	r7, r1
     848:	0f 2e       	mov	r0, r31
     84a:	ff e5       	ldi	r31, 0x5F	; 95
     84c:	ef 2e       	mov	r14, r31
     84e:	f1 2c       	mov	r15, r1
     850:	f0 2d       	mov	r31, r0
     852:	0c e3       	ldi	r16, 0x3C	; 60
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	2c e3       	ldi	r18, 0x3C	; 60
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	4e e1       	ldi	r20, 0x1E	; 30
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	6d e8       	ldi	r22, 0x8D	; 141
     860:	71 e0       	ldi	r23, 0x01	; 1
     862:	c3 01       	movw	r24, r6
     864:	62 d5       	rcall	.+2756   	; 0x132a <MATLAB_MF>
		struct mf_type twoM;
		MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     866:	0f 2e       	mov	r0, r31
     868:	ff ea       	ldi	r31, 0xAF	; 175
     86a:	ef 2e       	mov	r14, r31
     86c:	f1 2c       	mov	r15, r1
     86e:	f0 2d       	mov	r31, r0
     870:	0d e7       	ldi	r16, 0x7D	; 125
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	2d e7       	ldi	r18, 0x7D	; 125
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	4b e4       	ldi	r20, 0x4B	; 75
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	62 e9       	ldi	r22, 0x92	; 146
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	ce 01       	movw	r24, r28
     882:	83 5b       	subi	r24, 0xB3	; 179
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	51 d5       	rcall	.+2722   	; 0x132a <MATLAB_MF>
		struct mf_type threeM;
		MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     888:	0f 2e       	mov	r0, r31
     88a:	fb ef       	ldi	r31, 0xFB	; 251
     88c:	ef 2e       	mov	r14, r31
     88e:	f1 2c       	mov	r15, r1
     890:	f0 2d       	mov	r31, r0
     892:	0a ef       	ldi	r16, 0xFA	; 250
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	2a ef       	ldi	r18, 0xFA	; 250
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	46 e9       	ldi	r20, 0x96	; 150
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	67 e9       	ldi	r22, 0x97	; 151
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	ce 01       	movw	r24, r28
     8a4:	8d 59       	subi	r24, 0x9D	; 157
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	40 d5       	rcall	.+2688   	; 0x132a <MATLAB_MF>
		
		// Linked list for MFs
		distance.membership_functions = &stopDist;
     8aa:	de 86       	std	Y+14, r13	; 0x0e
     8ac:	cd 86       	std	Y+13, r12	; 0x0d
		stopDist.next = &oneM;
     8ae:	7e aa       	std	Y+54, r7	; 0x36
     8b0:	6d aa       	std	Y+53, r6	; 0x35
		oneM.next = &twoM;
     8b2:	8d e4       	ldi	r24, 0x4D	; 77
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	8c 0f       	add	r24, r28
     8b8:	9d 1f       	adc	r25, r29
     8ba:	2d 96       	adiw	r28, 0x0d	; 13
     8bc:	9f af       	std	Y+63, r25	; 0x3f
     8be:	8e af       	std	Y+62, r24	; 0x3e
     8c0:	2d 97       	sbiw	r28, 0x0d	; 13
		twoM.next = &threeM;
     8c2:	a3 e6       	ldi	r26, 0x63	; 99
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	ac 0f       	add	r26, r28
     8c8:	bd 1f       	adc	r27, r29
     8ca:	a3 96       	adiw	r28, 0x23	; 35
     8cc:	bf af       	std	Y+63, r27	; 0x3f
     8ce:	ae af       	std	Y+62, r26	; 0x3e
     8d0:	a3 97       	sbiw	r28, 0x23	; 35
		threeM.next = NULL;
     8d2:	e9 96       	adiw	r28, 0x39	; 57
     8d4:	1f ae       	std	Y+63, r1	; 0x3f
     8d6:	1e ae       	std	Y+62, r1	; 0x3e
     8d8:	e9 97       	sbiw	r28, 0x39	; 57
		//////////////////////////////////////////////////////////////////////////////
		

		// Set MFs
		struct mf_type still;
		MATLAB_MF(&still, "still", 2739, 2740, 2740, 2815);
     8da:	0f 2e       	mov	r0, r31
     8dc:	ee 24       	eor	r14, r14
     8de:	ea 94       	dec	r14
     8e0:	fa e0       	ldi	r31, 0x0A	; 10
     8e2:	ff 2e       	mov	r15, r31
     8e4:	f0 2d       	mov	r31, r0
     8e6:	04 eb       	ldi	r16, 0xB4	; 180
     8e8:	1a e0       	ldi	r17, 0x0A	; 10
     8ea:	24 eb       	ldi	r18, 0xB4	; 180
     8ec:	3a e0       	ldi	r19, 0x0A	; 10
     8ee:	43 eb       	ldi	r20, 0xB3	; 179
     8f0:	5a e0       	ldi	r21, 0x0A	; 10
     8f2:	6e e9       	ldi	r22, 0x9E	; 158
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	8c 96       	adiw	r24, 0x2c	; 44
     8f8:	18 d5       	rcall	.+2608   	; 0x132a <MATLAB_MF>
		struct mf_type low;
		MATLAB_MF(&low, "low", 2804, 2830, 2830, 2840);
     8fa:	5e 01       	movw	r10, r28
     8fc:	bf e8       	ldi	r27, 0x8F	; 143
     8fe:	ab 0e       	add	r10, r27
     900:	b1 1c       	adc	r11, r1
     902:	0f 2e       	mov	r0, r31
     904:	f8 e1       	ldi	r31, 0x18	; 24
     906:	ef 2e       	mov	r14, r31
     908:	fb e0       	ldi	r31, 0x0B	; 11
     90a:	ff 2e       	mov	r15, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	0e e0       	ldi	r16, 0x0E	; 14
     910:	1b e0       	ldi	r17, 0x0B	; 11
     912:	2e e0       	ldi	r18, 0x0E	; 14
     914:	3b e0       	ldi	r19, 0x0B	; 11
     916:	44 ef       	ldi	r20, 0xF4	; 244
     918:	5a e0       	ldi	r21, 0x0A	; 10
     91a:	62 ec       	ldi	r22, 0xC2	; 194
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	c5 01       	movw	r24, r10
     920:	04 d5       	rcall	.+2568   	; 0x132a <MATLAB_MF>
		struct mf_type cruising;
		MATLAB_MF(&cruising, "cruising", 2830, 2840, 2840, 2850);
     922:	0f 2e       	mov	r0, r31
     924:	f2 e2       	ldi	r31, 0x22	; 34
     926:	ef 2e       	mov	r14, r31
     928:	fb e0       	ldi	r31, 0x0B	; 11
     92a:	ff 2e       	mov	r15, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	08 e1       	ldi	r16, 0x18	; 24
     930:	1b e0       	ldi	r17, 0x0B	; 11
     932:	28 e1       	ldi	r18, 0x18	; 24
     934:	3b e0       	ldi	r19, 0x0B	; 11
     936:	4e e0       	ldi	r20, 0x0E	; 14
     938:	5b e0       	ldi	r21, 0x0B	; 11
     93a:	64 ea       	ldi	r22, 0xA4	; 164
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	ce 01       	movw	r24, r28
     940:	8b 55       	subi	r24, 0x5B	; 91
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	f2 d4       	rcall	.+2532   	; 0x132a <MATLAB_MF>
		struct mf_type medium;
		MATLAB_MF(&medium, "medium", 2840, 2850, 2850, 2860);
     946:	2e 01       	movw	r4, r28
     948:	eb eb       	ldi	r30, 0xBB	; 187
     94a:	4e 0e       	add	r4, r30
     94c:	51 1c       	adc	r5, r1
     94e:	0f 2e       	mov	r0, r31
     950:	fc e2       	ldi	r31, 0x2C	; 44
     952:	ef 2e       	mov	r14, r31
     954:	fb e0       	ldi	r31, 0x0B	; 11
     956:	ff 2e       	mov	r15, r31
     958:	f0 2d       	mov	r31, r0
     95a:	02 e2       	ldi	r16, 0x22	; 34
     95c:	1b e0       	ldi	r17, 0x0B	; 11
     95e:	22 e2       	ldi	r18, 0x22	; 34
     960:	3b e0       	ldi	r19, 0x0B	; 11
     962:	48 e1       	ldi	r20, 0x18	; 24
     964:	5b e0       	ldi	r21, 0x0B	; 11
     966:	6d ea       	ldi	r22, 0xAD	; 173
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	c2 01       	movw	r24, r4
     96c:	de d4       	rcall	.+2492   	; 0x132a <MATLAB_MF>
		struct mf_type high;
		MATLAB_MF(&high, "high", 2850, 2860, 2860, 2870);
     96e:	0f 2e       	mov	r0, r31
     970:	f6 e3       	ldi	r31, 0x36	; 54
     972:	ef 2e       	mov	r14, r31
     974:	fb e0       	ldi	r31, 0x0B	; 11
     976:	ff 2e       	mov	r15, r31
     978:	f0 2d       	mov	r31, r0
     97a:	0c e2       	ldi	r16, 0x2C	; 44
     97c:	1b e0       	ldi	r17, 0x0B	; 11
     97e:	2c e2       	ldi	r18, 0x2C	; 44
     980:	3b e0       	ldi	r19, 0x0B	; 11
     982:	42 e2       	ldi	r20, 0x22	; 34
     984:	5b e0       	ldi	r21, 0x0B	; 11
     986:	64 eb       	ldi	r22, 0xB4	; 180
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	ce 01       	movw	r24, r28
     98c:	8f 52       	subi	r24, 0x2F	; 47
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	cc d4       	rcall	.+2456   	; 0x132a <MATLAB_MF>
		
		// Linked list for MFs
		speed.membership_functions = &still;
     992:	49 e7       	ldi	r20, 0x79	; 121
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	4c 0f       	add	r20, r28
     998:	5d 1f       	adc	r21, r29
     99a:	5e 8f       	std	Y+30, r21	; 0x1e
     99c:	4d 8f       	std	Y+29, r20	; 0x1d
		still.next = &low;
     99e:	c3 57       	subi	r28, 0x73	; 115
     9a0:	df 4f       	sbci	r29, 0xFF	; 255
     9a2:	b9 82       	std	Y+1, r11	; 0x01
     9a4:	a8 82       	st	Y, r10
     9a6:	cd 58       	subi	r28, 0x8D	; 141
     9a8:	d0 40       	sbci	r29, 0x00	; 0
		low.next = &cruising;
     9aa:	e5 ea       	ldi	r30, 0xA5	; 165
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ec 0f       	add	r30, r28
     9b0:	fd 1f       	adc	r31, r29
     9b2:	d5 01       	movw	r26, r10
     9b4:	55 96       	adiw	r26, 0x15	; 21
     9b6:	fc 93       	st	X, r31
     9b8:	ee 93       	st	-X, r30
     9ba:	54 97       	sbiw	r26, 0x14	; 20
		cruising.next = &medium;
     9bc:	c7 54       	subi	r28, 0x47	; 71
     9be:	df 4f       	sbci	r29, 0xFF	; 255
     9c0:	59 82       	std	Y+1, r5	; 0x01
     9c2:	48 82       	st	Y, r4
     9c4:	c9 5b       	subi	r28, 0xB9	; 185
     9c6:	d0 40       	sbci	r29, 0x00	; 0
		medium.next = &high;
     9c8:	e1 ed       	ldi	r30, 0xD1	; 209
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ec 0f       	add	r30, r28
     9ce:	fd 1f       	adc	r31, r29
     9d0:	d2 01       	movw	r26, r4
     9d2:	55 96       	adiw	r26, 0x15	; 21
     9d4:	fc 93       	st	X, r31
     9d6:	ee 93       	st	-X, r30
     9d8:	54 97       	sbiw	r26, 0x14	; 20
		high.next = NULL;
     9da:	cb 51       	subi	r28, 0x1B	; 27
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	19 82       	std	Y+1, r1	; 0x01
     9e0:	18 82       	st	Y, r1
     9e2:	c5 5e       	subi	r28, 0xE5	; 229
     9e4:	d0 40       	sbci	r29, 0x00	; 0

		
		// DECLARATION OF PWM OUTPUT VARIABLE
		//////////////////////////////////////////////////////////////////////////////
		
		struct io_type pwm; strcpy(pwm.name, "pwm");
     9e6:	80 e7       	ldi	r24, 0x70	; 112
     9e8:	97 e7       	ldi	r25, 0x77	; 119
     9ea:	ad e6       	ldi	r26, 0x6D	; 109
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	c9 51       	subi	r28, 0x19	; 25
     9f0:	df 4f       	sbci	r29, 0xFF	; 255
     9f2:	88 83       	st	Y, r24
     9f4:	99 83       	std	Y+1, r25	; 0x01
     9f6:	aa 83       	std	Y+2, r26	; 0x02
     9f8:	bb 83       	std	Y+3, r27	; 0x03
     9fa:	c7 5e       	subi	r28, 0xE7	; 231
     9fc:	d0 40       	sbci	r29, 0x00	; 0
		
		// Set MFs
		struct mf_type noSpeed;
		MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     9fe:	4e 01       	movw	r8, r28
     a00:	f7 ef       	ldi	r31, 0xF7	; 247
     a02:	8f 0e       	add	r8, r31
     a04:	91 1c       	adc	r9, r1
     a06:	0f 2e       	mov	r0, r31
     a08:	ee 24       	eor	r14, r14
     a0a:	ea 94       	dec	r14
     a0c:	fa e0       	ldi	r31, 0x0A	; 10
     a0e:	ff 2e       	mov	r15, r31
     a10:	f0 2d       	mov	r31, r0
     a12:	04 eb       	ldi	r16, 0xB4	; 180
     a14:	1a e0       	ldi	r17, 0x0A	; 10
     a16:	24 eb       	ldi	r18, 0xB4	; 180
     a18:	3a e0       	ldi	r19, 0x0A	; 10
     a1a:	43 eb       	ldi	r20, 0xB3	; 179
     a1c:	5a e0       	ldi	r21, 0x0A	; 10
     a1e:	69 eb       	ldi	r22, 0xB9	; 185
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	c4 01       	movw	r24, r8
     a24:	82 d4       	rcall	.+2308   	; 0x132a <MATLAB_MF>
		struct mf_type slow;
		MATLAB_MF(&slow, "slow", 2804, 2830, 2830, 2840);
     a26:	6e 01       	movw	r12, r28
     a28:	23 ef       	ldi	r18, 0xF3	; 243
     a2a:	c2 1a       	sub	r12, r18
     a2c:	2e ef       	ldi	r18, 0xFE	; 254
     a2e:	d2 0a       	sbc	r13, r18
     a30:	0f 2e       	mov	r0, r31
     a32:	f8 e1       	ldi	r31, 0x18	; 24
     a34:	ef 2e       	mov	r14, r31
     a36:	fb e0       	ldi	r31, 0x0B	; 11
     a38:	ff 2e       	mov	r15, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	0e e0       	ldi	r16, 0x0E	; 14
     a3e:	1b e0       	ldi	r17, 0x0B	; 11
     a40:	2e e0       	ldi	r18, 0x0E	; 14
     a42:	3b e0       	ldi	r19, 0x0B	; 11
     a44:	44 ef       	ldi	r20, 0xF4	; 244
     a46:	5a e0       	ldi	r21, 0x0A	; 10
     a48:	61 ec       	ldi	r22, 0xC1	; 193
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	c6 01       	movw	r24, r12
     a4e:	6d d4       	rcall	.+2266   	; 0x132a <MATLAB_MF>
		struct mf_type cruise;
		MATLAB_MF(&cruise, "cruise", 2830, 2840, 2840, 2850);
     a50:	1e 01       	movw	r2, r28
     a52:	4d ed       	ldi	r20, 0xDD	; 221
     a54:	24 1a       	sub	r2, r20
     a56:	4e ef       	ldi	r20, 0xFE	; 254
     a58:	34 0a       	sbc	r3, r20
     a5a:	0f 2e       	mov	r0, r31
     a5c:	f2 e2       	ldi	r31, 0x22	; 34
     a5e:	ef 2e       	mov	r14, r31
     a60:	fb e0       	ldi	r31, 0x0B	; 11
     a62:	ff 2e       	mov	r15, r31
     a64:	f0 2d       	mov	r31, r0
     a66:	08 e1       	ldi	r16, 0x18	; 24
     a68:	1b e0       	ldi	r17, 0x0B	; 11
     a6a:	28 e1       	ldi	r18, 0x18	; 24
     a6c:	3b e0       	ldi	r19, 0x0B	; 11
     a6e:	4e e0       	ldi	r20, 0x0E	; 14
     a70:	5b e0       	ldi	r21, 0x0B	; 11
     a72:	66 ec       	ldi	r22, 0xC6	; 198
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	c1 01       	movw	r24, r2
     a78:	58 d4       	rcall	.+2224   	; 0x132a <MATLAB_MF>
		struct mf_type medHigh;
		MATLAB_MF(&medHigh, "medHigh", 2840, 2850, 2850, 2860);
     a7a:	0f 2e       	mov	r0, r31
     a7c:	fc e2       	ldi	r31, 0x2C	; 44
     a7e:	ef 2e       	mov	r14, r31
     a80:	fb e0       	ldi	r31, 0x0B	; 11
     a82:	ff 2e       	mov	r15, r31
     a84:	f0 2d       	mov	r31, r0
     a86:	02 e2       	ldi	r16, 0x22	; 34
     a88:	1b e0       	ldi	r17, 0x0B	; 11
     a8a:	22 e2       	ldi	r18, 0x22	; 34
     a8c:	3b e0       	ldi	r19, 0x0B	; 11
     a8e:	48 e1       	ldi	r20, 0x18	; 24
     a90:	5b e0       	ldi	r21, 0x0B	; 11
     a92:	6d ec       	ldi	r22, 0xCD	; 205
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	ce 01       	movw	r24, r28
     a98:	87 5c       	subi	r24, 0xC7	; 199
     a9a:	9e 4f       	sbci	r25, 0xFE	; 254
     a9c:	46 d4       	rcall	.+2188   	; 0x132a <MATLAB_MF>
		struct mf_type max;
		MATLAB_MF(&max, "max", 2850, 2860, 2860, 2870);
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f6 e3       	ldi	r31, 0x36	; 54
     aa2:	ef 2e       	mov	r14, r31
     aa4:	fb e0       	ldi	r31, 0x0B	; 11
     aa6:	ff 2e       	mov	r15, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	0c e2       	ldi	r16, 0x2C	; 44
     aac:	1b e0       	ldi	r17, 0x0B	; 11
     aae:	2c e2       	ldi	r18, 0x2C	; 44
     ab0:	3b e0       	ldi	r19, 0x0B	; 11
     ab2:	42 e2       	ldi	r20, 0x22	; 34
     ab4:	5b e0       	ldi	r21, 0x0B	; 11
     ab6:	65 ed       	ldi	r22, 0xD5	; 213
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	ce 01       	movw	r24, r28
     abc:	81 5b       	subi	r24, 0xB1	; 177
     abe:	9e 4f       	sbci	r25, 0xFE	; 254
     ac0:	34 d4       	rcall	.+2152   	; 0x132a <MATLAB_MF>
		
		// Linked list for MFs
		pwm.membership_functions = &noSpeed;
     ac2:	cd 50       	subi	r28, 0x0D	; 13
     ac4:	df 4f       	sbci	r29, 0xFF	; 255
     ac6:	99 82       	std	Y+1, r9	; 0x01
     ac8:	88 82       	st	Y, r8
     aca:	c3 5f       	subi	r28, 0xF3	; 243
     acc:	d0 40       	sbci	r29, 0x00	; 0
		noSpeed.next = &slow;
     ace:	d4 01       	movw	r26, r8
     ad0:	55 96       	adiw	r26, 0x15	; 21
     ad2:	dc 92       	st	X, r13
     ad4:	ce 92       	st	-X, r12
     ad6:	54 97       	sbiw	r26, 0x14	; 20
		slow.next = &cruise;
     ad8:	f6 01       	movw	r30, r12
     ada:	35 8a       	std	Z+21, r3	; 0x15
     adc:	24 8a       	std	Z+20, r2	; 0x14
		cruise.next = &medHigh;
     ade:	e9 e3       	ldi	r30, 0x39	; 57
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	ec 0f       	add	r30, r28
     ae4:	fd 1f       	adc	r31, r29
     ae6:	d1 01       	movw	r26, r2
     ae8:	55 96       	adiw	r26, 0x15	; 21
     aea:	fc 93       	st	X, r31
     aec:	ee 93       	st	-X, r30
     aee:	54 97       	sbiw	r26, 0x14	; 20
		medHigh.next = &max;
     af0:	4f e4       	ldi	r20, 0x4F	; 79
     af2:	51 e0       	ldi	r21, 0x01	; 1
     af4:	4c 0f       	add	r20, r28
     af6:	5d 1f       	adc	r21, r29
     af8:	c3 5b       	subi	r28, 0xB3	; 179
     afa:	de 4f       	sbci	r29, 0xFE	; 254
     afc:	59 83       	std	Y+1, r21	; 0x01
     afe:	48 83       	st	Y, r20
     b00:	cd 54       	subi	r28, 0x4D	; 77
     b02:	d1 40       	sbci	r29, 0x01	; 1
		max.next = NULL;
     b04:	cd 59       	subi	r28, 0x9D	; 157
     b06:	de 4f       	sbci	r29, 0xFE	; 254
     b08:	19 82       	std	Y+1, r1	; 0x01
     b0a:	18 82       	st	Y, r1
     b0c:	c3 56       	subi	r28, 0x63	; 99
     b0e:	d1 40       	sbci	r29, 0x01	; 1
		
		
		// SETTING I/O LINKED LISTS
		//////////////////////////////////////////////////////////////////////////////
		
		System_Inputs = &distance;
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	90 93 f9 02 	sts	0x02F9, r25
     b18:	80 93 f8 02 	sts	0x02F8, r24
		distance.next = &speed;
     b1c:	40 96       	adiw	r24, 0x10	; 16
     b1e:	98 8b       	std	Y+16, r25	; 0x10
     b20:	8f 87       	std	Y+15, r24	; 0x0f
		speed.next = NULL;
     b22:	18 a2       	std	Y+32, r1	; 0x20
     b24:	1f 8e       	std	Y+31, r1	; 0x1f
		
		System_Outputs = &pwm;
     b26:	87 ee       	ldi	r24, 0xE7	; 231
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	8c 0f       	add	r24, r28
     b2c:	9d 1f       	adc	r25, r29
     b2e:	90 93 f7 02 	sts	0x02F7, r25
     b32:	80 93 f6 02 	sts	0x02F6, r24
		pwm.next = NULL;
     b36:	cb 50       	subi	r28, 0x0B	; 11
     b38:	df 4f       	sbci	r29, 0xFF	; 255
     b3a:	19 82       	std	Y+1, r1	; 0x01
     b3c:	18 82       	st	Y, r1
     b3e:	c5 5f       	subi	r28, 0xF5	; 245
     b40:	d0 40       	sbci	r29, 0x00	; 0

		
		// DECLARATION OF RULES AND LISTS
		//////////////////////////////////////////////////////////////////////////////
		
		struct rule_type rule1; Rule_Base = &rule1;
     b42:	9e 01       	movw	r18, r28
     b44:	2b 59       	subi	r18, 0x9B	; 155
     b46:	3e 4f       	sbci	r19, 0xFE	; 254
     b48:	30 93 fb 02 	sts	0x02FB, r19
     b4c:	20 93 fa 02 	sts	0x02FA, r18
		struct rule_type rule2; rule1.next = &rule2;
     b50:	8c 57       	subi	r24, 0x7C	; 124
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	d9 01       	movw	r26, r18
     b56:	15 96       	adiw	r26, 0x05	; 5
     b58:	9c 93       	st	X, r25
     b5a:	8e 93       	st	-X, r24
     b5c:	14 97       	sbiw	r26, 0x04	; 4
		struct rule_type rule3; rule2.next = &rule3;
     b5e:	1c 96       	adiw	r26, 0x0c	; 12
     b60:	fc 01       	movw	r30, r24
     b62:	b5 83       	std	Z+5, r27	; 0x05
     b64:	a4 83       	std	Z+4, r26	; 0x04
		struct rule_type rule4; rule3.next = &rule4;
     b66:	47 e7       	ldi	r20, 0x77	; 119
     b68:	51 e0       	ldi	r21, 0x01	; 1
     b6a:	4c 0f       	add	r20, r28
     b6c:	5d 1f       	adc	r21, r29
     b6e:	15 96       	adiw	r26, 0x05	; 5
     b70:	5c 93       	st	X, r21
     b72:	4e 93       	st	-X, r20
     b74:	14 97       	sbiw	r26, 0x04	; 4
		struct rule_type rule5; rule4.next = &rule5;
     b76:	8e 01       	movw	r16, r28
     b78:	03 58       	subi	r16, 0x83	; 131
     b7a:	1e 4f       	sbci	r17, 0xFE	; 254
     b7c:	c5 58       	subi	r28, 0x85	; 133
     b7e:	de 4f       	sbci	r29, 0xFE	; 254
     b80:	19 83       	std	Y+1, r17	; 0x01
     b82:	08 83       	st	Y, r16
     b84:	cb 57       	subi	r28, 0x7B	; 123
     b86:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule6; rule5.next = &rule6;
     b88:	7e 01       	movw	r14, r28
     b8a:	5d e7       	ldi	r21, 0x7D	; 125
     b8c:	e5 1a       	sub	r14, r21
     b8e:	5e ef       	ldi	r21, 0xFE	; 254
     b90:	f5 0a       	sbc	r15, r21
     b92:	f8 01       	movw	r30, r16
     b94:	f5 82       	std	Z+5, r15	; 0x05
     b96:	e4 82       	std	Z+4, r14	; 0x04
		struct rule_type rule7; rule6.next = &rule7;
     b98:	49 e8       	ldi	r20, 0x89	; 137
     b9a:	51 e0       	ldi	r21, 0x01	; 1
     b9c:	4c 0f       	add	r20, r28
     b9e:	5d 1f       	adc	r21, r29
     ba0:	f7 01       	movw	r30, r14
     ba2:	55 83       	std	Z+5, r21	; 0x05
     ba4:	44 83       	std	Z+4, r20	; 0x04
		struct rule_type rule8; rule7.next = &rule8;
     ba6:	ef e8       	ldi	r30, 0x8F	; 143
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	c3 57       	subi	r28, 0x73	; 115
     bb0:	de 4f       	sbci	r29, 0xFE	; 254
     bb2:	f9 83       	std	Y+1, r31	; 0x01
     bb4:	e8 83       	st	Y, r30
     bb6:	cd 58       	subi	r28, 0x8D	; 141
     bb8:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule9; rule8.next = &rule9;
     bba:	45 e9       	ldi	r20, 0x95	; 149
     bbc:	51 e0       	ldi	r21, 0x01	; 1
     bbe:	4c 0f       	add	r20, r28
     bc0:	5d 1f       	adc	r21, r29
     bc2:	cd 56       	subi	r28, 0x6D	; 109
     bc4:	de 4f       	sbci	r29, 0xFE	; 254
     bc6:	59 83       	std	Y+1, r21	; 0x01
     bc8:	48 83       	st	Y, r20
     bca:	c3 59       	subi	r28, 0x93	; 147
     bcc:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule10; rule9.next = &rule10;
     bce:	eb e9       	ldi	r30, 0x9B	; 155
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	ec 0f       	add	r30, r28
     bd4:	fd 1f       	adc	r31, r29
     bd6:	c7 56       	subi	r28, 0x67	; 103
     bd8:	de 4f       	sbci	r29, 0xFE	; 254
     bda:	f9 83       	std	Y+1, r31	; 0x01
     bdc:	e8 83       	st	Y, r30
     bde:	c9 59       	subi	r28, 0x99	; 153
     be0:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule11; rule10.next = &rule11;
     be2:	41 ea       	ldi	r20, 0xA1	; 161
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	4c 0f       	add	r20, r28
     be8:	5d 1f       	adc	r21, r29
     bea:	c1 56       	subi	r28, 0x61	; 97
     bec:	de 4f       	sbci	r29, 0xFE	; 254
     bee:	59 83       	std	Y+1, r21	; 0x01
     bf0:	48 83       	st	Y, r20
     bf2:	cf 59       	subi	r28, 0x9F	; 159
     bf4:	d1 40       	sbci	r29, 0x01	; 1
		struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     bf6:	e7 ea       	ldi	r30, 0xA7	; 167
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	ec 0f       	add	r30, r28
     bfc:	fd 1f       	adc	r31, r29
     bfe:	cb 55       	subi	r28, 0x5B	; 91
     c00:	de 4f       	sbci	r29, 0xFE	; 254
     c02:	f9 83       	std	Y+1, r31	; 0x01
     c04:	e8 83       	st	Y, r30
     c06:	c5 5a       	subi	r28, 0xA5	; 165
     c08:	d1 40       	sbci	r29, 0x01	; 1
     c0a:	c5 55       	subi	r28, 0x55	; 85
     c0c:	de 4f       	sbci	r29, 0xFE	; 254
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	18 82       	st	Y, r1
     c12:	cb 5a       	subi	r28, 0xAB	; 171
     c14:	d1 40       	sbci	r29, 0x01	; 1
		// RULE SETUP
		//////////////////////////////////////////////////////////////////////////////
		
		// if distance is stopDist then pwm is noSpeed
		struct rule_element_type if11, then1;
		rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c16:	be 01       	movw	r22, r28
     c18:	63 55       	subi	r22, 0x53	; 83
     c1a:	7e 4f       	sbci	r23, 0xFE	; 254
     c1c:	f9 01       	movw	r30, r18
     c1e:	71 83       	std	Z+1, r23	; 0x01
     c20:	60 83       	st	Z, r22
     c22:	fb 01       	movw	r30, r22
     c24:	13 82       	std	Z+3, r1	; 0x03
     c26:	12 82       	std	Z+2, r1	; 0x02
     c28:	40 5f       	subi	r20, 0xF0	; 240
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	f9 01       	movw	r30, r18
     c2e:	53 83       	std	Z+3, r21	; 0x03
     c30:	42 83       	std	Z+2, r20	; 0x02
     c32:	fa 01       	movw	r30, r20
     c34:	13 82       	std	Z+3, r1	; 0x03
     c36:	12 82       	std	Z+2, r1	; 0x02
		if11.value = &stopDist.value; then1.value = &noSpeed.value;
     c38:	2a 53       	subi	r18, 0x3A	; 58
     c3a:	31 40       	sbci	r19, 0x01	; 1
     c3c:	fb 01       	movw	r30, r22
     c3e:	31 83       	std	Z+1, r19	; 0x01
     c40:	20 83       	st	Z, r18
     c42:	fa e0       	ldi	r31, 0x0A	; 10
     c44:	8f 0e       	add	r8, r31
     c46:	91 1c       	adc	r9, r1
     c48:	fa 01       	movw	r30, r20
     c4a:	91 82       	std	Z+1, r9	; 0x01
     c4c:	80 82       	st	Z, r8
		
		// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
		struct rule_element_type if21, if22, then2;
		rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     c4e:	68 5f       	subi	r22, 0xF8	; 248
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	fc 01       	movw	r30, r24
     c54:	71 83       	std	Z+1, r23	; 0x01
     c56:	60 83       	st	Z, r22
     c58:	48 5f       	subi	r20, 0xF8	; 248
     c5a:	5f 4f       	sbci	r21, 0xFF	; 255
     c5c:	fb 01       	movw	r30, r22
     c5e:	53 83       	std	Z+3, r21	; 0x03
     c60:	42 83       	std	Z+2, r20	; 0x02
     c62:	fa 01       	movw	r30, r20
     c64:	13 82       	std	Z+3, r1	; 0x03
     c66:	12 82       	std	Z+2, r1	; 0x02
     c68:	2e 56       	subi	r18, 0x6E	; 110
     c6a:	3e 4f       	sbci	r19, 0xFE	; 254
     c6c:	fc 01       	movw	r30, r24
     c6e:	33 83       	std	Z+3, r19	; 0x03
     c70:	22 83       	std	Z+2, r18	; 0x02
     c72:	f9 01       	movw	r30, r18
     c74:	13 82       	std	Z+3, r1	; 0x03
     c76:	12 82       	std	Z+2, r1	; 0x02
		if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     c78:	fa e0       	ldi	r31, 0x0A	; 10
     c7a:	af 0e       	add	r10, r31
     c7c:	b1 1c       	adc	r11, r1
     c7e:	fb 01       	movw	r30, r22
     c80:	b1 82       	std	Z+1, r11	; 0x01
     c82:	a0 82       	st	Z, r10
     c84:	fa e0       	ldi	r31, 0x0A	; 10
     c86:	6f 0e       	add	r6, r31
     c88:	71 1c       	adc	r7, r1
     c8a:	fa 01       	movw	r30, r20
     c8c:	71 82       	std	Z+1, r7	; 0x01
     c8e:	60 82       	st	Z, r6
     c90:	fa e0       	ldi	r31, 0x0A	; 10
     c92:	cf 0e       	add	r12, r31
     c94:	d1 1c       	adc	r13, r1
     c96:	f9 01       	movw	r30, r18
     c98:	d1 82       	std	Z+1, r13	; 0x01
     c9a:	c0 82       	st	Z, r12
		
		// if speed is medium and distance is oneM then speed is cruise
		struct rule_element_type if31, if32, then3;
		rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     c9c:	48 5f       	subi	r20, 0xF8	; 248
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	5c 93       	st	X, r21
     ca4:	4e 93       	st	-X, r20
     ca6:	28 5f       	subi	r18, 0xF8	; 248
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	fa 01       	movw	r30, r20
     cac:	33 83       	std	Z+3, r19	; 0x03
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	f9 01       	movw	r30, r18
     cb2:	13 82       	std	Z+3, r1	; 0x03
     cb4:	12 82       	std	Z+2, r1	; 0x02
     cb6:	82 5a       	subi	r24, 0xA2	; 162
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	9c 93       	st	X, r25
     cbe:	8e 93       	st	-X, r24
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	dc 01       	movw	r26, r24
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	1c 92       	st	X, r1
     cc8:	1e 92       	st	-X, r1
     cca:	12 97       	sbiw	r26, 0x02	; 2
		if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     ccc:	ba e0       	ldi	r27, 0x0A	; 10
     cce:	4b 0e       	add	r4, r27
     cd0:	51 1c       	adc	r5, r1
     cd2:	fa 01       	movw	r30, r20
     cd4:	51 82       	std	Z+1, r5	; 0x01
     cd6:	40 82       	st	Z, r4
     cd8:	d9 01       	movw	r26, r18
     cda:	6d 92       	st	X+, r6
     cdc:	7c 92       	st	X, r7
     cde:	ba e0       	ldi	r27, 0x0A	; 10
     ce0:	2b 0e       	add	r2, r27
     ce2:	31 1c       	adc	r3, r1
     ce4:	fc 01       	movw	r30, r24
     ce6:	31 82       	std	Z+1, r3	; 0x01
     ce8:	20 82       	st	Z, r2
		
		// if speed is high and distance is oneM then speed is cruise
		struct rule_element_type if41, if42, then4;
		rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     cea:	28 5f       	subi	r18, 0xF8	; 248
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	c9 58       	subi	r28, 0x89	; 137
     cf0:	de 4f       	sbci	r29, 0xFE	; 254
     cf2:	39 83       	std	Y+1, r19	; 0x01
     cf4:	28 83       	st	Y, r18
     cf6:	c7 57       	subi	r28, 0x77	; 119
     cf8:	d1 40       	sbci	r29, 0x01	; 1
     cfa:	08 96       	adiw	r24, 0x08	; 8
     cfc:	d9 01       	movw	r26, r18
     cfe:	13 96       	adiw	r26, 0x03	; 3
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	12 97       	sbiw	r26, 0x02	; 2
     d06:	fc 01       	movw	r30, r24
     d08:	13 82       	std	Z+3, r1	; 0x03
     d0a:	12 82       	std	Z+2, r1	; 0x02
     d0c:	18 96       	adiw	r26, 0x08	; 8
     d0e:	c7 58       	subi	r28, 0x87	; 135
     d10:	de 4f       	sbci	r29, 0xFE	; 254
     d12:	b9 83       	std	Y+1, r27	; 0x01
     d14:	a8 83       	st	Y, r26
     d16:	c9 57       	subi	r28, 0x79	; 121
     d18:	d1 40       	sbci	r29, 0x01	; 1
     d1a:	13 96       	adiw	r26, 0x03	; 3
     d1c:	1c 92       	st	X, r1
     d1e:	1e 92       	st	-X, r1
     d20:	12 97       	sbiw	r26, 0x02	; 2
		if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d22:	41 ed       	ldi	r20, 0xD1	; 209
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	4c 0f       	add	r20, r28
     d28:	5d 1f       	adc	r21, r29
     d2a:	46 5f       	subi	r20, 0xF6	; 246
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	f9 01       	movw	r30, r18
     d30:	51 83       	std	Z+1, r21	; 0x01
     d32:	40 83       	st	Z, r20
     d34:	fc 01       	movw	r30, r24
     d36:	71 82       	std	Z+1, r7	; 0x01
     d38:	60 82       	st	Z, r6
     d3a:	2d 92       	st	X+, r2
     d3c:	3c 92       	st	X, r3
		
		// if speed is still and distance is oneM then speed is slow
		struct rule_element_type if51, if52, then5;
		rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     d3e:	08 96       	adiw	r24, 0x08	; 8
     d40:	d8 01       	movw	r26, r16
     d42:	8d 93       	st	X+, r24
     d44:	9c 93       	st	X, r25
     d46:	68 5d       	subi	r22, 0xD8	; 216
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	fc 01       	movw	r30, r24
     d4c:	73 83       	std	Z+3, r23	; 0x03
     d4e:	62 83       	std	Z+2, r22	; 0x02
     d50:	db 01       	movw	r26, r22
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	1c 92       	st	X, r1
     d56:	1e 92       	st	-X, r1
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	38 96       	adiw	r30, 0x08	; 8
     d5c:	d8 01       	movw	r26, r16
     d5e:	13 96       	adiw	r26, 0x03	; 3
     d60:	fc 93       	st	X, r31
     d62:	ee 93       	st	-X, r30
     d64:	12 97       	sbiw	r26, 0x02	; 2
     d66:	13 82       	std	Z+3, r1	; 0x03
     d68:	12 82       	std	Z+2, r1	; 0x02
		if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     d6a:	29 e7       	ldi	r18, 0x79	; 121
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	2c 0f       	add	r18, r28
     d70:	3d 1f       	adc	r19, r29
     d72:	26 5f       	subi	r18, 0xF6	; 246
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	dc 01       	movw	r26, r24
     d78:	2d 93       	st	X+, r18
     d7a:	3c 93       	st	X, r19
     d7c:	db 01       	movw	r26, r22
     d7e:	6d 92       	st	X+, r6
     d80:	7c 92       	st	X, r7
     d82:	d1 82       	std	Z+1, r13	; 0x01
     d84:	c0 82       	st	Z, r12
		
		// if speed is cruising and distance is oneM then speed is slow
		struct rule_element_type if61, if62, then6;
		rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     d86:	0c 96       	adiw	r24, 0x0c	; 12
     d88:	f7 01       	movw	r30, r14
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	04 59       	subi	r16, 0x94	; 148
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	dc 01       	movw	r26, r24
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	1c 93       	st	X, r17
     d98:	0e 93       	st	-X, r16
     d9a:	12 97       	sbiw	r26, 0x02	; 2
     d9c:	f8 01       	movw	r30, r16
     d9e:	13 82       	std	Z+3, r1	; 0x03
     da0:	12 82       	std	Z+2, r1	; 0x02
     da2:	34 96       	adiw	r30, 0x04	; 4
     da4:	d7 01       	movw	r26, r14
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	fc 93       	st	X, r31
     daa:	ee 93       	st	-X, r30
     dac:	12 97       	sbiw	r26, 0x02	; 2
     dae:	13 82       	std	Z+3, r1	; 0x03
     db0:	12 82       	std	Z+2, r1	; 0x02
		if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     db2:	65 ea       	ldi	r22, 0xA5	; 165
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	6c 0f       	add	r22, r28
     db8:	7d 1f       	adc	r23, r29
     dba:	66 5f       	subi	r22, 0xF6	; 246
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	dc 01       	movw	r26, r24
     dc0:	6d 93       	st	X+, r22
     dc2:	7c 93       	st	X, r23
     dc4:	d8 01       	movw	r26, r16
     dc6:	6d 92       	st	X+, r6
     dc8:	7c 92       	st	X, r7
     dca:	d1 82       	std	Z+1, r13	; 0x01
     dcc:	c0 82       	st	Z, r12
		
		// if speed is low and distance is twoM then speed is cruise
		struct rule_element_type if71, if72, then7;
		rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     dce:	0c 96       	adiw	r24, 0x0c	; 12
     dd0:	c7 57       	subi	r28, 0x77	; 119
     dd2:	de 4f       	sbci	r29, 0xFE	; 254
     dd4:	99 83       	std	Y+1, r25	; 0x01
     dd6:	88 83       	st	Y, r24
     dd8:	c9 58       	subi	r28, 0x89	; 137
     dda:	d1 40       	sbci	r29, 0x01	; 1
     ddc:	04 5f       	subi	r16, 0xF4	; 244
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	13 83       	std	Z+3, r17	; 0x03
     de4:	02 83       	std	Z+2, r16	; 0x02
     de6:	d8 01       	movw	r26, r16
     de8:	13 96       	adiw	r26, 0x03	; 3
     dea:	1c 92       	st	X, r1
     dec:	1e 92       	st	-X, r1
     dee:	12 97       	sbiw	r26, 0x02	; 2
     df0:	38 96       	adiw	r30, 0x08	; 8
     df2:	c5 57       	subi	r28, 0x75	; 117
     df4:	de 4f       	sbci	r29, 0xFE	; 254
     df6:	f9 83       	std	Y+1, r31	; 0x01
     df8:	e8 83       	st	Y, r30
     dfa:	cb 58       	subi	r28, 0x8B	; 139
     dfc:	d1 40       	sbci	r29, 0x01	; 1
     dfe:	13 82       	std	Z+3, r1	; 0x03
     e00:	12 82       	std	Z+2, r1	; 0x02
		if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     e02:	dc 01       	movw	r26, r24
     e04:	ad 92       	st	X+, r10
     e06:	bc 92       	st	X, r11
     e08:	8d e4       	ldi	r24, 0x4D	; 77
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	8c 0f       	add	r24, r28
     e0e:	9d 1f       	adc	r25, r29
     e10:	0a 96       	adiw	r24, 0x0a	; 10
     e12:	d8 01       	movw	r26, r16
     e14:	8d 93       	st	X+, r24
     e16:	9c 93       	st	X, r25
     e18:	31 82       	std	Z+1, r3	; 0x01
     e1a:	20 82       	st	Z, r2
		
		// if speed is medium and distance is twoM then speed is medHigh
		struct rule_element_type if81, if82, then8;
		rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e1c:	08 5f       	subi	r16, 0xF8	; 248
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	c1 57       	subi	r28, 0x71	; 113
     e22:	de 4f       	sbci	r29, 0xFE	; 254
     e24:	19 83       	std	Y+1, r17	; 0x01
     e26:	08 83       	st	Y, r16
     e28:	cf 58       	subi	r28, 0x8F	; 143
     e2a:	d1 40       	sbci	r29, 0x01	; 1
     e2c:	7e 01       	movw	r14, r28
     e2e:	bf ef       	ldi	r27, 0xFF	; 255
     e30:	eb 1a       	sub	r14, r27
     e32:	bd ef       	ldi	r27, 0xFD	; 253
     e34:	fb 0a       	sbc	r15, r27
     e36:	f8 01       	movw	r30, r16
     e38:	f3 82       	std	Z+3, r15	; 0x03
     e3a:	e2 82       	std	Z+2, r14	; 0x02
     e3c:	d7 01       	movw	r26, r14
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	1c 92       	st	X, r1
     e42:	1e 92       	st	-X, r1
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	cf 56       	subi	r28, 0x6F	; 111
     e4a:	de 4f       	sbci	r29, 0xFE	; 254
     e4c:	b9 83       	std	Y+1, r27	; 0x01
     e4e:	a8 83       	st	Y, r26
     e50:	c1 59       	subi	r28, 0x91	; 145
     e52:	d1 40       	sbci	r29, 0x01	; 1
     e54:	13 96       	adiw	r26, 0x03	; 3
     e56:	1c 92       	st	X, r1
     e58:	1e 92       	st	-X, r1
     e5a:	12 97       	sbiw	r26, 0x02	; 2
		if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     e5c:	51 82       	std	Z+1, r5	; 0x01
     e5e:	40 82       	st	Z, r4
     e60:	f7 01       	movw	r30, r14
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	0f 2e       	mov	r0, r31
     e68:	f9 e3       	ldi	r31, 0x39	; 57
     e6a:	cf 2e       	mov	r12, r31
     e6c:	dd 24       	eor	r13, r13
     e6e:	d3 94       	inc	r13
     e70:	f0 2d       	mov	r31, r0
     e72:	cc 0e       	add	r12, r28
     e74:	dd 1e       	adc	r13, r29
     e76:	fa e0       	ldi	r31, 0x0A	; 10
     e78:	cf 0e       	add	r12, r31
     e7a:	d1 1c       	adc	r13, r1
     e7c:	cd 92       	st	X+, r12
     e7e:	dc 92       	st	X, r13
		
		// if speed is high and distance is twoM then speed is medHigh
		struct rule_element_type if91, if92, then9;
		rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     e80:	7e 01       	movw	r14, r28
     e82:	a7 ef       	ldi	r26, 0xF7	; 247
     e84:	ea 1a       	sub	r14, r26
     e86:	ad ef       	ldi	r26, 0xFD	; 253
     e88:	fa 0a       	sbc	r15, r26
     e8a:	cb 56       	subi	r28, 0x6B	; 107
     e8c:	de 4f       	sbci	r29, 0xFE	; 254
     e8e:	f9 82       	std	Y+1, r15	; 0x01
     e90:	e8 82       	st	Y, r14
     e92:	c5 59       	subi	r28, 0x95	; 149
     e94:	d1 40       	sbci	r29, 0x01	; 1
     e96:	00 5f       	subi	r16, 0xF0	; 240
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	f7 01       	movw	r30, r14
     e9c:	13 83       	std	Z+3, r17	; 0x03
     e9e:	02 83       	std	Z+2, r16	; 0x02
     ea0:	d8 01       	movw	r26, r16
     ea2:	13 96       	adiw	r26, 0x03	; 3
     ea4:	1c 92       	st	X, r1
     ea6:	1e 92       	st	-X, r1
     ea8:	12 97       	sbiw	r26, 0x02	; 2
     eaa:	14 96       	adiw	r26, 0x04	; 4
     eac:	c9 56       	subi	r28, 0x69	; 105
     eae:	de 4f       	sbci	r29, 0xFE	; 254
     eb0:	b9 83       	std	Y+1, r27	; 0x01
     eb2:	a8 83       	st	Y, r26
     eb4:	c7 59       	subi	r28, 0x97	; 151
     eb6:	d1 40       	sbci	r29, 0x01	; 1
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	1c 92       	st	X, r1
     ebc:	1e 92       	st	-X, r1
     ebe:	12 97       	sbiw	r26, 0x02	; 2
		if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     ec0:	51 83       	std	Z+1, r21	; 0x01
     ec2:	40 83       	st	Z, r20
     ec4:	f8 01       	movw	r30, r16
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
     eca:	cd 92       	st	X+, r12
     ecc:	dc 92       	st	X, r13
		
		// if speed is still and distance is twoM then speed is cruise
		struct rule_element_type if101, if102, then10;
		rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     ece:	08 5f       	subi	r16, 0xF8	; 248
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	c5 56       	subi	r28, 0x65	; 101
     ed4:	de 4f       	sbci	r29, 0xFE	; 254
     ed6:	19 83       	std	Y+1, r17	; 0x01
     ed8:	08 83       	st	Y, r16
     eda:	cb 59       	subi	r28, 0x9B	; 155
     edc:	d1 40       	sbci	r29, 0x01	; 1
     ede:	42 5c       	subi	r20, 0xC2	; 194
     ee0:	5e 4f       	sbci	r21, 0xFE	; 254
     ee2:	d8 01       	movw	r26, r16
     ee4:	13 96       	adiw	r26, 0x03	; 3
     ee6:	5c 93       	st	X, r21
     ee8:	4e 93       	st	-X, r20
     eea:	12 97       	sbiw	r26, 0x02	; 2
     eec:	fa 01       	movw	r30, r20
     eee:	13 82       	std	Z+3, r1	; 0x03
     ef0:	12 82       	std	Z+2, r1	; 0x02
     ef2:	18 96       	adiw	r26, 0x08	; 8
     ef4:	c3 56       	subi	r28, 0x63	; 99
     ef6:	de 4f       	sbci	r29, 0xFE	; 254
     ef8:	b9 83       	std	Y+1, r27	; 0x01
     efa:	a8 83       	st	Y, r26
     efc:	cd 59       	subi	r28, 0x9D	; 157
     efe:	d1 40       	sbci	r29, 0x01	; 1
     f00:	13 96       	adiw	r26, 0x03	; 3
     f02:	1c 92       	st	X, r1
     f04:	1e 92       	st	-X, r1
     f06:	12 97       	sbiw	r26, 0x02	; 2
		if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     f08:	f8 01       	movw	r30, r16
     f0a:	31 83       	std	Z+1, r19	; 0x01
     f0c:	20 83       	st	Z, r18
     f0e:	fa 01       	movw	r30, r20
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	2d 92       	st	X+, r2
     f16:	3c 92       	st	X, r3
		
		// if speed is cruising and distance is twoM then speed is medHigh
		struct rule_element_type if111, if112, then11;
		rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f18:	48 5f       	subi	r20, 0xF8	; 248
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	cf 55       	subi	r28, 0x5F	; 95
     f1e:	de 4f       	sbci	r29, 0xFE	; 254
     f20:	59 83       	std	Y+1, r21	; 0x01
     f22:	48 83       	st	Y, r20
     f24:	c1 5a       	subi	r28, 0xA1	; 161
     f26:	d1 40       	sbci	r29, 0x01	; 1
     f28:	2e 55       	subi	r18, 0x5E	; 94
     f2a:	3e 4f       	sbci	r19, 0xFE	; 254
     f2c:	da 01       	movw	r26, r20
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	3c 93       	st	X, r19
     f32:	2e 93       	st	-X, r18
     f34:	12 97       	sbiw	r26, 0x02	; 2
     f36:	f9 01       	movw	r30, r18
     f38:	13 82       	std	Z+3, r1	; 0x03
     f3a:	12 82       	std	Z+2, r1	; 0x02
     f3c:	18 96       	adiw	r26, 0x08	; 8
     f3e:	cd 55       	subi	r28, 0x5D	; 93
     f40:	de 4f       	sbci	r29, 0xFE	; 254
     f42:	b9 83       	std	Y+1, r27	; 0x01
     f44:	a8 83       	st	Y, r26
     f46:	c3 5a       	subi	r28, 0xA3	; 163
     f48:	d1 40       	sbci	r29, 0x01	; 1
     f4a:	13 96       	adiw	r26, 0x03	; 3
     f4c:	1c 92       	st	X, r1
     f4e:	1e 92       	st	-X, r1
     f50:	12 97       	sbiw	r26, 0x02	; 2
		if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     f52:	fa 01       	movw	r30, r20
     f54:	71 83       	std	Z+1, r23	; 0x01
     f56:	60 83       	st	Z, r22
     f58:	f9 01       	movw	r30, r18
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	dc 92       	st	X, r13
     f62:	ce 92       	st	-X, r12
		
		// if distance is threeM then speed is max
		struct rule_element_type if121, then12;
		rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     f64:	14 96       	adiw	r26, 0x04	; 4
     f66:	c9 55       	subi	r28, 0x59	; 89
     f68:	de 4f       	sbci	r29, 0xFE	; 254
     f6a:	b9 83       	std	Y+1, r27	; 0x01
     f6c:	a8 83       	st	Y, r26
     f6e:	c7 5a       	subi	r28, 0xA7	; 167
     f70:	d1 40       	sbci	r29, 0x01	; 1
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	1c 92       	st	X, r1
     f76:	1e 92       	st	-X, r1
     f78:	12 97       	sbiw	r26, 0x02	; 2
     f7a:	3c 96       	adiw	r30, 0x0c	; 12
     f7c:	c7 55       	subi	r28, 0x57	; 87
     f7e:	de 4f       	sbci	r29, 0xFE	; 254
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	e8 83       	st	Y, r30
     f84:	c9 5a       	subi	r28, 0xA9	; 169
     f86:	d1 40       	sbci	r29, 0x01	; 1
     f88:	13 82       	std	Z+3, r1	; 0x03
     f8a:	12 82       	std	Z+2, r1	; 0x02
		if121.value = &threeM.value; then12.value = &max.value;
     f8c:	83 e6       	ldi	r24, 0x63	; 99
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	8c 0f       	add	r24, r28
     f92:	9d 1f       	adc	r25, r29
     f94:	0a 96       	adiw	r24, 0x0a	; 10
     f96:	8d 93       	st	X+, r24
     f98:	9c 93       	st	X, r25
     f9a:	8f e4       	ldi	r24, 0x4F	; 79
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	8c 0f       	add	r24, r28
     fa0:	9d 1f       	adc	r25, r29
     fa2:	0a 96       	adiw	r24, 0x0a	; 10
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
		
		
		// EXECUTING FUZZY LOGIC & OUTPUT VALUE
		//////////////////////////////////////////////////////////////////////////////
		
		fuzzification();
     fa8:	96 d0       	rcall	.+300    	; 0x10d6 <fuzzification>
		rule_evaluation();
     faa:	bc d0       	rcall	.+376    	; 0x1124 <rule_evaluation>
		defuzzification();
     fac:	01 d1       	rcall	.+514    	; 0x11b0 <defuzzification>
		
		if (pwm.value > 2830) 
     fae:	cf 50       	subi	r28, 0x0F	; 15
     fb0:	df 4f       	sbci	r29, 0xFF	; 255
     fb2:	88 81       	ld	r24, Y
     fb4:	99 81       	ldd	r25, Y+1	; 0x01
     fb6:	c1 5f       	subi	r28, 0xF1	; 241
     fb8:	d0 40       	sbci	r29, 0x00	; 0
     fba:	8f 30       	cpi	r24, 0x0F	; 15
     fbc:	fb e0       	ldi	r31, 0x0B	; 11
     fbe:	9f 07       	cpc	r25, r31
     fc0:	24 f0       	brlt	.+8      	; 0xfca <FLC_obstacle+0x850>
		{
			setESC(2830);
     fc2:	8e e0       	ldi	r24, 0x0E	; 14
     fc4:	9b e0       	ldi	r25, 0x0B	; 11
     fc6:	98 d2       	rcall	.+1328   	; 0x14f8 <setESC>
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <FLC_obstacle+0x862>
		}
		
		else if (pwm.value < NEUTRAL)
     fca:	8d 3c       	cpi	r24, 0xCD	; 205
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	92 07       	cpc	r25, r18
     fd0:	24 f4       	brge	.+8      	; 0xfda <FLC_obstacle+0x860>
		{
			setESC(NEUTRAL);
     fd2:	8d ec       	ldi	r24, 0xCD	; 205
     fd4:	9a e0       	ldi	r25, 0x0A	; 10
     fd6:	90 d2       	rcall	.+1312   	; 0x14f8 <setESC>
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <FLC_obstacle+0x862>
		}
		else
		{
			setESC(pwm.value);
     fda:	8e d2       	rcall	.+1308   	; 0x14f8 <setESC>
		}
	
	
}
     fdc:	cc 5c       	subi	r28, 0xCC	; 204
     fde:	dd 4f       	sbci	r29, 0xFD	; 253
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	8f 90       	pop	r8
    1002:	7f 90       	pop	r7
    1004:	6f 90       	pop	r6
    1006:	5f 90       	pop	r5
    1008:	4f 90       	pop	r4
    100a:	3f 90       	pop	r3
    100c:	2f 90       	pop	r2
    100e:	08 95       	ret

00001010 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1010:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1012:	84 85       	ldd	r24, Z+12	; 0x0c
    1014:	95 85       	ldd	r25, Z+13	; 0x0d
    1016:	9b 01       	movw	r18, r22
    1018:	28 1b       	sub	r18, r24
    101a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    101c:	86 85       	ldd	r24, Z+14	; 0x0e
    101e:	97 85       	ldd	r25, Z+15	; 0x0f
    1020:	86 1b       	sub	r24, r22
    1022:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1024:	12 16       	cp	r1, r18
    1026:	13 06       	cpc	r1, r19
    1028:	f4 f4       	brge	.+60     	; 0x1066 <compute_degree_of_membership+0x56>
    102a:	18 16       	cp	r1, r24
    102c:	19 06       	cpc	r1, r25
    102e:	f4 f4       	brge	.+60     	; 0x106c <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1030:	60 89       	ldd	r22, Z+16	; 0x10
    1032:	71 89       	ldd	r23, Z+17	; 0x11
    1034:	a2 89       	ldd	r26, Z+18	; 0x12
    1036:	b3 89       	ldd	r27, Z+19	; 0x13
    1038:	8a 9f       	mul	r24, r26
    103a:	a0 01       	movw	r20, r0
    103c:	8b 9f       	mul	r24, r27
    103e:	50 0d       	add	r21, r0
    1040:	9a 9f       	mul	r25, r26
    1042:	50 0d       	add	r21, r0
    1044:	11 24       	eor	r1, r1
    1046:	26 9f       	mul	r18, r22
    1048:	c0 01       	movw	r24, r0
    104a:	27 9f       	mul	r18, r23
    104c:	90 0d       	add	r25, r0
    104e:	36 9f       	mul	r19, r22
    1050:	90 0d       	add	r25, r0
    1052:	11 24       	eor	r1, r1
    1054:	48 17       	cp	r20, r24
    1056:	59 07       	cpc	r21, r25
    1058:	0c f4       	brge	.+2      	; 0x105c <compute_degree_of_membership+0x4c>
    105a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    105c:	8f 3f       	cpi	r24, 0xFF	; 255
    105e:	91 05       	cpc	r25, r1
    1060:	09 f0       	breq	.+2      	; 0x1064 <compute_degree_of_membership+0x54>
    1062:	3c f4       	brge	.+14     	; 0x1072 <compute_degree_of_membership+0x62>
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <compute_degree_of_membership+0x66>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1076:	93 87       	std	Z+11, r25	; 0x0b
    1078:	82 87       	std	Z+10, r24	; 0x0a
    107a:	08 95       	ret

0000107c <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    1086:	c6 85       	ldd	r28, Z+14	; 0x0e
    1088:	d7 85       	ldd	r29, Z+15	; 0x0f
    108a:	84 85       	ldd	r24, Z+12	; 0x0c
    108c:	95 85       	ldd	r25, Z+13	; 0x0d
    108e:	c8 1b       	sub	r28, r24
    1090:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    1092:	22 85       	ldd	r18, Z+10	; 0x0a
    1094:	33 85       	ldd	r19, Z+11	; 0x0b
    1096:	60 89       	ldd	r22, Z+16	; 0x10
    1098:	71 89       	ldd	r23, Z+17	; 0x11
    109a:	c9 01       	movw	r24, r18
    109c:	6a d5       	rcall	.+2772   	; 0x1b72 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    109e:	8e 01       	movw	r16, r28
    10a0:	06 1b       	sub	r16, r22
    10a2:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    10a4:	62 89       	ldd	r22, Z+18	; 0x12
    10a6:	73 89       	ldd	r23, Z+19	; 0x13
    10a8:	c9 01       	movw	r24, r18
    10aa:	63 d5       	rcall	.+2758   	; 0x1b72 <__divmodhi4>
    top = base - run_1 - run_2;
    10ac:	06 1b       	sub	r16, r22
    10ae:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    10b0:	c0 0f       	add	r28, r16
    10b2:	d1 1f       	adc	r29, r17
    10b4:	2c 9f       	mul	r18, r28
    10b6:	c0 01       	movw	r24, r0
    10b8:	2d 9f       	mul	r18, r29
    10ba:	90 0d       	add	r25, r0
    10bc:	3c 9f       	mul	r19, r28
    10be:	90 0d       	add	r25, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	99 23       	and	r25, r25
    10c4:	0c f4       	brge	.+2      	; 0x10c8 <compute_area_of_trapezoid+0x4c>
    10c6:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    10c8:	95 95       	asr	r25
    10ca:	87 95       	ror	r24
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    10de:	00 91 f8 02 	lds	r16, 0x02F8
    10e2:	10 91 f9 02 	lds	r17, 0x02F9
    10e6:	01 15       	cp	r16, r1
    10e8:	11 05       	cpc	r17, r1
    10ea:	b9 f0       	breq	.+46     	; 0x111a <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    10ec:	f8 01       	movw	r30, r16
    10ee:	c4 85       	ldd	r28, Z+12	; 0x0c
    10f0:	d5 85       	ldd	r29, Z+13	; 0x0d
    10f2:	20 97       	sbiw	r28, 0x00	; 0
    10f4:	61 f0       	breq	.+24     	; 0x110e <fuzzification+0x38>
            if (mf!=NULL) {
    10f6:	20 97       	sbiw	r28, 0x00	; 0
    10f8:	29 f0       	breq	.+10     	; 0x1104 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    10fa:	f8 01       	movw	r30, r16
    10fc:	62 85       	ldd	r22, Z+10	; 0x0a
    10fe:	73 85       	ldd	r23, Z+11	; 0x0b
    1100:	ce 01       	movw	r24, r28
    1102:	86 df       	rcall	.-244    	; 0x1010 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1104:	0c 88       	ldd	r0, Y+20	; 0x14
    1106:	dd 89       	ldd	r29, Y+21	; 0x15
    1108:	c0 2d       	mov	r28, r0
    110a:	20 97       	sbiw	r28, 0x00	; 0
    110c:	a1 f7       	brne	.-24     	; 0x10f6 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    110e:	f8 01       	movw	r30, r16
    1110:	06 85       	ldd	r16, Z+14	; 0x0e
    1112:	17 85       	ldd	r17, Z+15	; 0x0f
    1114:	01 15       	cp	r16, r1
    1116:	11 05       	cpc	r17, r1
    1118:	49 f7       	brne	.-46     	; 0x10ec <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    112c:	c0 91 fa 02 	lds	r28, 0x02FA
    1130:	d0 91 fb 02 	lds	r29, 0x02FB
    1134:	20 97       	sbiw	r28, 0x00	; 0
    1136:	b9 f1       	breq	.+110    	; 0x11a6 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    113c:	e8 81       	ld	r30, Y
    113e:	f9 81       	ldd	r31, Y+1	; 0x01
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	81 f0       	breq	.+32     	; 0x1164 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1144:	20 2f       	mov	r18, r16
    1146:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    1148:	a0 81       	ld	r26, Z
    114a:	b1 81       	ldd	r27, Z+1	; 0x01
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	82 17       	cp	r24, r18
    1152:	93 07       	cpc	r25, r19
    1154:	0c f4       	brge	.+2      	; 0x1158 <rule_evaluation+0x34>
    1156:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1158:	02 80       	ldd	r0, Z+2	; 0x02
    115a:	f3 81       	ldd	r31, Z+3	; 0x03
    115c:	e0 2d       	mov	r30, r0
    115e:	30 97       	sbiw	r30, 0x00	; 0
    1160:	99 f7       	brne	.-26     	; 0x1148 <rule_evaluation+0x24>
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1164:	20 2f       	mov	r18, r16
    1166:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	b1 f0       	breq	.+44     	; 0x119c <rule_evaluation+0x78>
    1170:	72 2f       	mov	r23, r18
    1172:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1174:	a0 81       	ld	r26, Z
    1176:	b1 81       	ldd	r27, Z+1	; 0x01
    1178:	8d 91       	ld	r24, X+
    117a:	9c 91       	ld	r25, X
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	57 2f       	mov	r21, r23
    1180:	46 2f       	mov	r20, r22
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	14 f4       	brge	.+4      	; 0x118c <rule_evaluation+0x68>
    1188:	58 2f       	mov	r21, r24
    118a:	49 2f       	mov	r20, r25
    118c:	5c 93       	st	X, r21
    118e:	11 96       	adiw	r26, 0x01	; 1
    1190:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1192:	02 80       	ldd	r0, Z+2	; 0x02
    1194:	f3 81       	ldd	r31, Z+3	; 0x03
    1196:	e0 2d       	mov	r30, r0
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	61 f7       	brne	.-40     	; 0x1174 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    119c:	0c 80       	ldd	r0, Y+4	; 0x04
    119e:	dd 81       	ldd	r29, Y+5	; 0x05
    11a0:	c0 2d       	mov	r28, r0
    11a2:	20 97       	sbiw	r28, 0x00	; 0
    11a4:	59 f6       	brne	.-106    	; 0x113c <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <defuzzification+0x26>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <defuzzification+0x28>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <defuzzification+0x2a>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    11de:	80 91 f6 02 	lds	r24, 0x02F6
    11e2:	90 91 f7 02 	lds	r25, 0x02F7
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    11e8:	8b 83       	std	Y+3, r24	; 0x03
    11ea:	89 2b       	or	r24, r25
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <defuzzification+0x40>
    11ee:	84 c0       	rjmp	.+264    	; 0x12f8 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    11f0:	eb 81       	ldd	r30, Y+3	; 0x03
    11f2:	fc 81       	ldd	r31, Y+4	; 0x04
    11f4:	04 84       	ldd	r0, Z+12	; 0x0c
    11f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    11f8:	e0 2d       	mov	r30, r0
    11fa:	fe 83       	std	Y+6, r31	; 0x06
    11fc:	ed 83       	std	Y+5, r30	; 0x05
    11fe:	ef 2b       	or	r30, r31
    1200:	09 f4       	brne	.+2      	; 0x1204 <defuzzification+0x54>
    1202:	66 c0       	rjmp	.+204    	; 0x12d0 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1204:	51 2c       	mov	r5, r1
    1206:	61 2c       	mov	r6, r1
    1208:	71 2c       	mov	r7, r1
    120a:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    120c:	31 2c       	mov	r3, r1
    120e:	21 2c       	mov	r2, r1
    1210:	19 82       	std	Y+1, r1	; 0x01
    1212:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	31 df       	rcall	.-414    	; 0x107c <compute_area_of_trapezoid>
    121a:	bc 01       	movw	r22, r24
    121c:	88 27       	eor	r24, r24
    121e:	77 fd       	sbrc	r23, 7
    1220:	80 95       	com	r24
    1222:	98 2f       	mov	r25, r24
    1224:	b7 d3       	rcall	.+1902   	; 0x1994 <__floatsisf>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    122a:	ed 81       	ldd	r30, Y+5	; 0x05
    122c:	fe 81       	ldd	r31, Y+6	; 0x06
    122e:	04 85       	ldd	r16, Z+12	; 0x0c
    1230:	15 85       	ldd	r17, Z+13	; 0x0d
    1232:	b8 01       	movw	r22, r16
    1234:	88 27       	eor	r24, r24
    1236:	77 fd       	sbrc	r23, 7
    1238:	80 95       	com	r24
    123a:	98 2f       	mov	r25, r24
    123c:	ab d3       	rcall	.+1878   	; 0x1994 <__floatsisf>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1242:	ed 81       	ldd	r30, Y+5	; 0x05
    1244:	fe 81       	ldd	r31, Y+6	; 0x06
    1246:	86 85       	ldd	r24, Z+14	; 0x0e
    1248:	97 85       	ldd	r25, Z+15	; 0x0f
    124a:	80 1b       	sub	r24, r16
    124c:	91 0b       	sbc	r25, r17
    124e:	bc 01       	movw	r22, r24
    1250:	12 f4       	brpl	.+4      	; 0x1256 <defuzzification+0xa6>
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	75 95       	asr	r23
    1258:	67 95       	ror	r22
            centroid = centroid + intermed;
    125a:	88 27       	eor	r24, r24
    125c:	77 fd       	sbrc	r23, 7
    125e:	80 95       	com	r24
    1260:	98 2f       	mov	r25, r24
    1262:	98 d3       	rcall	.+1840   	; 0x1994 <__floatsisf>
    1264:	a5 01       	movw	r20, r10
    1266:	94 01       	movw	r18, r8
    1268:	96 d2       	rcall	.+1324   	; 0x1796 <__addsf3>
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    126e:	c7 01       	movw	r24, r14
    1270:	b6 01       	movw	r22, r12
    1272:	1c d4       	rcall	.+2104   	; 0x1aac <__mulsf3>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	63 2d       	mov	r22, r3
    127a:	72 2d       	mov	r23, r2
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	8a d2       	rcall	.+1300   	; 0x1796 <__addsf3>
    1282:	36 2e       	mov	r3, r22
    1284:	27 2e       	mov	r2, r23
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    128a:	a7 01       	movw	r20, r14
    128c:	96 01       	movw	r18, r12
    128e:	65 2d       	mov	r22, r5
    1290:	76 2d       	mov	r23, r6
    1292:	87 2d       	mov	r24, r7
    1294:	94 2d       	mov	r25, r4
    1296:	7f d2       	rcall	.+1278   	; 0x1796 <__addsf3>
    1298:	56 2e       	mov	r5, r22
    129a:	67 2e       	mov	r6, r23
    129c:	78 2e       	mov	r7, r24
    129e:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    12a0:	ed 81       	ldd	r30, Y+5	; 0x05
    12a2:	fe 81       	ldd	r31, Y+6	; 0x06
    12a4:	04 88       	ldd	r0, Z+20	; 0x14
    12a6:	f5 89       	ldd	r31, Z+21	; 0x15
    12a8:	e0 2d       	mov	r30, r0
    12aa:	fe 83       	std	Y+6, r31	; 0x06
    12ac:	ed 83       	std	Y+5, r30	; 0x05
    12ae:	ef 2b       	or	r30, r31
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <defuzzification+0x104>
    12b2:	b0 cf       	rjmp	.-160    	; 0x1214 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    12b4:	26 2f       	mov	r18, r22
    12b6:	37 2f       	mov	r19, r23
    12b8:	48 2f       	mov	r20, r24
    12ba:	59 2f       	mov	r21, r25
    12bc:	63 2d       	mov	r22, r3
    12be:	72 2d       	mov	r23, r2
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	cc d2       	rcall	.+1432   	; 0x185e <__divsf3>
    12c6:	26 2f       	mov	r18, r22
    12c8:	37 2f       	mov	r19, r23
    12ca:	48 2f       	mov	r20, r24
    12cc:	59 2f       	mov	r21, r25
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    12d8:	62 2f       	mov	r22, r18
    12da:	73 2f       	mov	r23, r19
    12dc:	84 2f       	mov	r24, r20
    12de:	95 2f       	mov	r25, r21
    12e0:	26 d3       	rcall	.+1612   	; 0x192e <__fixsfsi>
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	73 87       	std	Z+11, r23	; 0x0b
    12e8:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    12ea:	86 85       	ldd	r24, Z+14	; 0x0e
    12ec:	97 85       	ldd	r25, Z+15	; 0x0f
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	8b 83       	std	Y+3, r24	; 0x03
    12f2:	89 2b       	or	r24, r25
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <defuzzification+0x148>
    12f6:	7c cf       	rjmp	.-264    	; 0x11f0 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    12f8:	26 96       	adiw	r28, 0x06	; 6
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	3f 90       	pop	r3
    1326:	2f 90       	pop	r2
    1328:	08 95       	ret

0000132a <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	6a 01       	movw	r12, r20
    1342:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
    1344:	3d d4       	rcall	.+2170   	; 0x1bc0 <strcpy>
    newMf->value = 0;
    1346:	1b 86       	std	Y+11, r1	; 0x0b
    1348:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
    134a:	dd 86       	std	Y+13, r13	; 0x0d
    134c:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
    134e:	ff 86       	std	Y+15, r15	; 0x0f
    1350:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
    1352:	b5 01       	movw	r22, r10
    1354:	6c 19       	sub	r22, r12
    1356:	7d 09       	sbc	r23, r13
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	31 e0       	ldi	r19, 0x01	; 1
    135c:	c9 01       	movw	r24, r18
    135e:	09 d4       	rcall	.+2066   	; 0x1b72 <__divmodhi4>
    1360:	79 8b       	std	Y+17, r23	; 0x11
    1362:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
    1364:	b7 01       	movw	r22, r14
    1366:	60 1b       	sub	r22, r16
    1368:	71 0b       	sbc	r23, r17
    136a:	c9 01       	movw	r24, r18
    136c:	02 d4       	rcall	.+2052   	; 0x1b72 <__divmodhi4>
    136e:	7b 8b       	std	Y+19, r23	; 0x13
    1370:	6a 8b       	std	Y+18, r22	; 0x12
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	08 95       	ret

00001388 <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile unsigned int counter_UART1_reciever = 0;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
    1388:	1f 92       	push	r1
    138a:	0f 92       	push	r0
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	0f 92       	push	r0
    1390:	11 24       	eor	r1, r1
    1392:	0b b6       	in	r0, 0x3b	; 59
    1394:	0f 92       	push	r0
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
    139e:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
    13a2:	8f 3f       	cpi	r24, 0xFF	; 255
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <__vector_28+0x28>
		counter_UART1_reciever = 0;
    13a6:	10 92 db 01 	sts	0x01DB, r1
    13aa:	10 92 da 01 	sts	0x01DA, r1
    13ae:	10 c0       	rjmp	.+32     	; 0x13d0 <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
    13b0:	e0 91 da 01 	lds	r30, 0x01DA
    13b4:	f0 91 db 01 	lds	r31, 0x01DB
    13b8:	e4 50       	subi	r30, 0x04	; 4
    13ba:	fd 4f       	sbci	r31, 0xFD	; 253
    13bc:	80 83       	st	Z, r24
		counter_UART1_reciever++;
    13be:	80 91 da 01 	lds	r24, 0x01DA
    13c2:	90 91 db 01 	lds	r25, 0x01DB
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	90 93 db 01 	sts	0x01DB, r25
    13cc:	80 93 da 01 	sts	0x01DA, r24
	
	//Enabling interrupts
	//sei();

	
}
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti

000013e6 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
    13e6:	79 d0       	rcall	.+242    	; 0x14da <pwmInit>
	//spi_slave_init();
	setESC(NEUTRAL);
    13e8:	8d ec       	ldi	r24, 0xCD	; 205
    13ea:	9a e0       	ldi	r25, 0x0A	; 10
    13ec:	85 d0       	rcall	.+266    	; 0x14f8 <setESC>
	setServo(STRAIGHT);
    13ee:	84 e6       	ldi	r24, 0x64	; 100
    13f0:	9a e0       	ldi	r25, 0x0A	; 10
    13f2:	9d c0       	rjmp	.+314    	; 0x152e <setServo>
    13f4:	08 95       	ret

000013f6 <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
    13f6:	ec ec       	ldi	r30, 0xCC	; 204
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	11 82       	std	Z+1, r1	; 0x01
    13fc:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
    13fe:	20 e9       	ldi	r18, 0x90	; 144
    1400:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
    1404:	2e e0       	ldi	r18, 0x0E	; 14
    1406:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
	counter_UART1_reciever = 0;
    140e:	10 92 db 01 	sts	0x01DB, r1
    1412:	10 92 da 01 	sts	0x01DA, r1
    1416:	08 95       	ret

00001418 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
    1418:	fc 01       	movw	r30, r24

	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
    141a:	a9 ec       	ldi	r26, 0xC9	; 201
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	8c 91       	ld	r24, X
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24
	
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[0];
    1424:	80 91 fc 02 	lds	r24, 0x02FC
    1428:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[1];
    142a:	80 91 fd 02 	lds	r24, 0x02FD
    142e:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[2];
    1430:	80 91 fe 02 	lds	r24, 0x02FE
    1434:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[3];
    1436:	80 91 ff 02 	lds	r24, 0x02FF
    143a:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[4];
    143c:	80 91 00 03 	lds	r24, 0x0300
    1440:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[5];
    1442:	80 91 01 03 	lds	r24, 0x0301
    1446:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
    1448:	10 92 db 01 	sts	0x01DB, r1
    144c:	10 92 da 01 	sts	0x01DA, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    1450:	8c 91       	ld	r24, X
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	8c 93       	st	X, r24
    1456:	08 95       	ret

00001458 <main>:




int main (void)
{
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2a 97       	sbiw	r28, 0x0a	; 10
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
	// FOR TESTING
	//	FLC_obstacle(2800, 150);
 
	carInit();
    146c:	bc df       	rcall	.-136    	; 0x13e6 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    146e:	2f ef       	ldi	r18, 0xFF	; 255
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	90 ee       	ldi	r25, 0xE0	; 224
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	80 40       	sbci	r24, 0x00	; 0
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <main+0x1c>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <main+0x26>
    147e:	00 00       	nop
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    1480:	87 e0       	ldi	r24, 0x07	; 7
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	b8 df       	rcall	.-144    	; 0x13f6 <USART1_init>
	//End of init for UART
	
	//Setting for Testing
	DDRA = 0xFF;
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    148a:	78 94       	sei
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			
			cli();
			
			FLC_obstacle(OCR1A, sF);
    148c:	08 e8       	ldi	r16, 0x88	; 136
    148e:	10 e0       	ldi	r17, 0x00	; 0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    1490:	0f 2e       	mov	r0, r31
    1492:	fa e8       	ldi	r31, 0x8A	; 138
    1494:	af 2e       	mov	r10, r31
    1496:	b1 2c       	mov	r11, r1
    1498:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	
	while (1) {
		
		if (counter_UART1_reciever > 5) {
    149a:	80 91 da 01 	lds	r24, 0x01DA
    149e:	90 91 db 01 	lds	r25, 0x01DB
    14a2:	06 97       	sbiw	r24, 0x06	; 6
    14a4:	d0 f3       	brcs	.-12     	; 0x149a <main+0x42>
			
			
			
			//Reading Information
			//read_sensor_info(&control_mode, sens_info_ptr);
			Sens_info_read(sens_info_ptr);
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	b6 df       	rcall	.-148    	; 0x1418 <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    14ac:	6b 81       	ldd	r22, Y+3	; 0x03
    14ae:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    14b0:	e9 80       	ldd	r14, Y+1	; 0x01
    14b2:	f1 2c       	mov	r15, r1
			int v = (int) sensor_info.angular_diff;
    14b4:	ca 80       	ldd	r12, Y+2	; 0x02
    14b6:	d1 2c       	mov	r13, r1
			
			cli();
    14b8:	f8 94       	cli
			
			FLC_obstacle(OCR1A, sF);
    14ba:	f8 01       	movw	r30, r16
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	5c d9       	rcall	.-3400   	; 0x77a <FLC_obstacle>
			FLC_steering(c,v);
    14c2:	b6 01       	movw	r22, r12
    14c4:	c7 01       	movw	r24, r14
    14c6:	29 d9       	rcall	.-3502   	; 0x71a <FLC_steering>
			
			sei();
    14c8:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    14d0:	f5 01       	movw	r30, r10
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
			//Big endian
			//spi_send_byte((unsigned) (char) (esc_value_to_send<<8));
			//spi_send_byte((unsigned) (char) (esc_value_to_send));
			//spi_send_byte((unsigned) (char) (steering_value_to_send<<8));
			//spi_send_byte((unsigned) (char) (steering_value_to_send));
			 PORTA = 0x0;
    14d6:	12 b8       	out	0x02, r1	; 2
    14d8:	e0 cf       	rjmp	.-64     	; 0x149a <main+0x42>

000014da <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    14de:	82 ea       	ldi	r24, 0xA2	; 162
    14e0:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f e8       	ldi	r25, 0x8F	; 143
    14e8:	90 93 87 00 	sts	0x0087, r25
    14ec:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    14f0:	8a e1       	ldi	r24, 0x1A	; 26
    14f2:	80 93 81 00 	sts	0x0081, r24
    14f6:	08 95       	ret

000014f8 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    14f8:	80 36       	cpi	r24, 0x60	; 96
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	92 07       	cpc	r25, r18
    14fe:	3c f4       	brge	.+14     	; 0x150e <setESC+0x16>
	{
		OCR1A = MINESC;
    1500:	8f e5       	ldi	r24, 0x5F	; 95
    1502:	9a e0       	ldi	r25, 0x0A	; 10
    1504:	90 93 89 00 	sts	0x0089, r25
    1508:	80 93 88 00 	sts	0x0088, r24
    150c:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    150e:	8b 33       	cpi	r24, 0x3B	; 59
    1510:	2b e0       	ldi	r18, 0x0B	; 11
    1512:	92 07       	cpc	r25, r18
    1514:	3c f0       	brlt	.+14     	; 0x1524 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1516:	8b e3       	ldi	r24, 0x3B	; 59
    1518:	9b e0       	ldi	r25, 0x0B	; 11
    151a:	90 93 89 00 	sts	0x0089, r25
    151e:	80 93 88 00 	sts	0x0088, r24
    1522:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1524:	90 93 89 00 	sts	0x0089, r25
    1528:	80 93 88 00 	sts	0x0088, r24
    152c:	08 95       	ret

0000152e <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo > MAXRIGHT){
    152e:	80 34       	cpi	r24, 0x40	; 64
    1530:	2c e0       	ldi	r18, 0x0C	; 12
    1532:	92 07       	cpc	r25, r18
    1534:	3c f0       	brlt	.+14     	; 0x1544 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1536:	8f e3       	ldi	r24, 0x3F	; 63
    1538:	9c e0       	ldi	r25, 0x0C	; 12
    153a:	90 93 8b 00 	sts	0x008B, r25
    153e:	80 93 8a 00 	sts	0x008A, r24
    1542:	08 95       	ret
		
	}	else if (counterServo < MAXLEFT){
    1544:	86 3e       	cpi	r24, 0xE6	; 230
    1546:	27 e0       	ldi	r18, 0x07	; 7
    1548:	92 07       	cpc	r25, r18
    154a:	3c f4       	brge	.+14     	; 0x155a <setServo+0x2c>

		OCR1B = MAXLEFT;
    154c:	86 ee       	ldi	r24, 0xE6	; 230
    154e:	97 e0       	ldi	r25, 0x07	; 7
    1550:	90 93 8b 00 	sts	0x008B, r25
    1554:	80 93 8a 00 	sts	0x008A, r24
    1558:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;
    155a:	90 93 8b 00 	sts	0x008B, r25
    155e:	80 93 8a 00 	sts	0x008A, r24
    1562:	08 95       	ret

00001564 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	0b b6       	in	r0, 0x3b	; 59
    1570:	0f 92       	push	r0
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1582:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1584:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1586:	2d 3f       	cpi	r18, 0xFD	; 253
    1588:	a9 f0       	breq	.+42     	; 0x15b4 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    158a:	e6 e6       	ldi	r30, 0x66	; 102
    158c:	f2 e0       	ldi	r31, 0x02	; 2
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	dc 01       	movw	r26, r24
    1594:	ac 5d       	subi	r26, 0xDC	; 220
    1596:	bd 4f       	sbci	r27, 0xFD	; 253
    1598:	2c 93       	st	X, r18
		rx_spi.i_last++;
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    15a0:	e8 e6       	ldi	r30, 0x68	; 104
    15a2:	f2 e0       	ldi	r31, 0x02	; 2
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 93 dc 01 	sts	0x01DC, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    15b4:	80 91 66 02 	lds	r24, 0x0266
    15b8:	90 91 67 02 	lds	r25, 0x0267
    15bc:	80 34       	cpi	r24, 0x40	; 64
    15be:	91 05       	cpc	r25, r1
    15c0:	21 f4       	brne	.+8      	; 0x15ca <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    15c2:	10 92 67 02 	sts	0x0267, r1
    15c6:	10 92 66 02 	sts	0x0266, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    15ca:	80 91 22 02 	lds	r24, 0x0222
    15ce:	90 91 23 02 	lds	r25, 0x0223
    15d2:	89 2b       	or	r24, r25
    15d4:	01 f1       	breq	.+64     	; 0x1616 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    15d6:	e0 91 1e 02 	lds	r30, 0x021E
    15da:	f0 91 1f 02 	lds	r31, 0x021F
    15de:	e2 52       	subi	r30, 0x22	; 34
    15e0:	fe 4f       	sbci	r31, 0xFE	; 254
    15e2:	80 81       	ld	r24, Z
    15e4:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    15e6:	ee e1       	ldi	r30, 0x1E	; 30
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    15f4:	e2 e2       	ldi	r30, 0x22	; 34
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	20 81       	ld	r18, Z
    15fa:	31 81       	ldd	r19, Z+1	; 0x01
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	31 09       	sbc	r19, r1
    1600:	31 83       	std	Z+1, r19	; 0x01
    1602:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1604:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1606:	80 34       	cpi	r24, 0x40	; 64
    1608:	91 05       	cpc	r25, r1
    160a:	49 f4       	brne	.+18     	; 0x161e <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    160c:	10 92 1f 02 	sts	0x021F, r1
    1610:	10 92 1e 02 	sts	0x021E, r1
    1614:	04 c0       	rjmp	.+8      	; 0x161e <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1616:	8d ef       	ldi	r24, 0xFD	; 253
    1618:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    161a:	10 92 dd 01 	sts	0x01DD, r1
		
	} 	
	

}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0b be       	out	0x3b, r0	; 59
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	0b b6       	in	r0, 0x3b	; 59
    1648:	0f 92       	push	r0
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    165c:	80 91 f4 02 	lds	r24, 0x02F4
    1660:	90 91 f5 02 	lds	r25, 0x02F5
    1664:	80 34       	cpi	r24, 0x40	; 64
    1666:	91 05       	cpc	r25, r1
    1668:	31 f4       	brne	.+12     	; 0x1676 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 20 03 	sts	0x0320, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1670:	80 91 c6 00 	lds	r24, 0x00C6
    1674:	16 c0       	rjmp	.+44     	; 0x16a2 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1676:	80 34       	cpi	r24, 0x40	; 64
    1678:	91 05       	cpc	r25, r1
    167a:	e8 f4       	brcc	.+58     	; 0x16b6 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    167c:	e2 ef       	ldi	r30, 0xF2	; 242
    167e:	f2 e0       	ldi	r31, 0x02	; 2
    1680:	20 81       	ld	r18, Z
    1682:	31 81       	ldd	r19, Z+1	; 0x01
    1684:	40 91 c6 00 	lds	r20, 0x00C6
    1688:	d9 01       	movw	r26, r18
    168a:	a0 55       	subi	r26, 0x50	; 80
    168c:	bd 4f       	sbci	r27, 0xFD	; 253
    168e:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1690:	2f 5f       	subi	r18, 0xFF	; 255
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	31 83       	std	Z+1, r19	; 0x01
    1696:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	90 93 f5 02 	sts	0x02F5, r25
    169e:	80 93 f4 02 	sts	0x02F4, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    16a2:	80 91 f4 02 	lds	r24, 0x02F4
    16a6:	90 91 f5 02 	lds	r25, 0x02F5
    16aa:	80 34       	cpi	r24, 0x40	; 64
    16ac:	91 05       	cpc	r25, r1
    16ae:	19 f4       	brne	.+6      	; 0x16b6 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	80 93 1e 03 	sts	0x031E, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    16b6:	80 91 f2 02 	lds	r24, 0x02F2
    16ba:	90 91 f3 02 	lds	r25, 0x02F3
    16be:	80 34       	cpi	r24, 0x40	; 64
    16c0:	91 05       	cpc	r25, r1
    16c2:	21 f4       	brne	.+8      	; 0x16cc <__vector_20+0x90>
		rx_uart0.i_last = 0;
    16c4:	10 92 f3 02 	sts	0x02F3, r1
    16c8:	10 92 f2 02 	sts	0x02F2, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 1d 03 	sts	0x031D, r24
}
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	bf 91       	pop	r27
    16d8:	af 91       	pop	r26
    16da:	9f 91       	pop	r25
    16dc:	8f 91       	pop	r24
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0b be       	out	0x3b, r0	; 59
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_22>:




ISR(USART0_TX_vect)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	0b b6       	in	r0, 0x3b	; 59
    16fe:	0f 92       	push	r0
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	ef 93       	push	r30
    1706:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1708:	80 91 ae 02 	lds	r24, 0x02AE
    170c:	90 91 af 02 	lds	r25, 0x02AF
    1710:	80 34       	cpi	r24, 0x40	; 64
    1712:	91 05       	cpc	r25, r1
    1714:	19 f4       	brne	.+6      	; 0x171c <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1716:	10 92 1c 03 	sts	0x031C, r1
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    171c:	89 2b       	or	r24, r25
    171e:	b9 f0       	breq	.+46     	; 0x174e <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1720:	e0 91 aa 02 	lds	r30, 0x02AA
    1724:	f0 91 ab 02 	lds	r31, 0x02AB
    1728:	e6 59       	subi	r30, 0x96	; 150
    172a:	fd 4f       	sbci	r31, 0xFD	; 253
    172c:	80 81       	ld	r24, Z
    172e:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1732:	ea ea       	ldi	r30, 0xAA	; 170
    1734:	f2 e0       	ldi	r31, 0x02	; 2
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1740:	ee ea       	ldi	r30, 0xAE	; 174
    1742:	f2 e0       	ldi	r31, 0x02	; 2
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    174e:	80 91 aa 02 	lds	r24, 0x02AA
    1752:	90 91 ab 02 	lds	r25, 0x02AB
    1756:	80 34       	cpi	r24, 0x40	; 64
    1758:	91 05       	cpc	r25, r1
    175a:	21 f4       	brne	.+8      	; 0x1764 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    175c:	10 92 ab 02 	sts	0x02AB, r1
    1760:	10 92 aa 02 	sts	0x02AA, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1764:	80 91 ae 02 	lds	r24, 0x02AE
    1768:	90 91 af 02 	lds	r25, 0x02AF
    176c:	89 2b       	or	r24, r25
    176e:	39 f4       	brne	.+14     	; 0x177e <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1770:	10 92 1f 03 	sts	0x031F, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1774:	e1 ec       	ldi	r30, 0xC1	; 193
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8f 7b       	andi	r24, 0xBF	; 191
    177c:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    177e:	ff 91       	pop	r31
    1780:	ef 91       	pop	r30
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	0f 90       	pop	r0
    1788:	0b be       	out	0x3b, r0	; 59
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__subsf3>:
    1794:	50 58       	subi	r21, 0x80	; 128

00001796 <__addsf3>:
    1796:	bb 27       	eor	r27, r27
    1798:	aa 27       	eor	r26, r26
    179a:	0e d0       	rcall	.+28     	; 0x17b8 <__addsf3x>
    179c:	4d c1       	rjmp	.+666    	; 0x1a38 <__fp_round>
    179e:	3e d1       	rcall	.+636    	; 0x1a1c <__fp_pscA>
    17a0:	30 f0       	brcs	.+12     	; 0x17ae <__addsf3+0x18>
    17a2:	43 d1       	rcall	.+646    	; 0x1a2a <__fp_pscB>
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <__addsf3+0x18>
    17a6:	31 f4       	brne	.+12     	; 0x17b4 <__addsf3+0x1e>
    17a8:	9f 3f       	cpi	r25, 0xFF	; 255
    17aa:	11 f4       	brne	.+4      	; 0x17b0 <__addsf3+0x1a>
    17ac:	1e f4       	brtc	.+6      	; 0x17b4 <__addsf3+0x1e>
    17ae:	33 c1       	rjmp	.+614    	; 0x1a16 <__fp_nan>
    17b0:	0e f4       	brtc	.+2      	; 0x17b4 <__addsf3+0x1e>
    17b2:	e0 95       	com	r30
    17b4:	e7 fb       	bst	r30, 7
    17b6:	29 c1       	rjmp	.+594    	; 0x1a0a <__fp_inf>

000017b8 <__addsf3x>:
    17b8:	e9 2f       	mov	r30, r25
    17ba:	4f d1       	rcall	.+670    	; 0x1a5a <__fp_split3>
    17bc:	80 f3       	brcs	.-32     	; 0x179e <__addsf3+0x8>
    17be:	ba 17       	cp	r27, r26
    17c0:	62 07       	cpc	r22, r18
    17c2:	73 07       	cpc	r23, r19
    17c4:	84 07       	cpc	r24, r20
    17c6:	95 07       	cpc	r25, r21
    17c8:	18 f0       	brcs	.+6      	; 0x17d0 <__addsf3x+0x18>
    17ca:	71 f4       	brne	.+28     	; 0x17e8 <__addsf3x+0x30>
    17cc:	9e f5       	brtc	.+102    	; 0x1834 <__addsf3x+0x7c>
    17ce:	67 c1       	rjmp	.+718    	; 0x1a9e <__fp_zero>
    17d0:	0e f4       	brtc	.+2      	; 0x17d4 <__addsf3x+0x1c>
    17d2:	e0 95       	com	r30
    17d4:	0b 2e       	mov	r0, r27
    17d6:	ba 2f       	mov	r27, r26
    17d8:	a0 2d       	mov	r26, r0
    17da:	0b 01       	movw	r0, r22
    17dc:	b9 01       	movw	r22, r18
    17de:	90 01       	movw	r18, r0
    17e0:	0c 01       	movw	r0, r24
    17e2:	ca 01       	movw	r24, r20
    17e4:	a0 01       	movw	r20, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	ff 27       	eor	r31, r31
    17ea:	59 1b       	sub	r21, r25
    17ec:	99 f0       	breq	.+38     	; 0x1814 <__addsf3x+0x5c>
    17ee:	59 3f       	cpi	r21, 0xF9	; 249
    17f0:	50 f4       	brcc	.+20     	; 0x1806 <__addsf3x+0x4e>
    17f2:	50 3e       	cpi	r21, 0xE0	; 224
    17f4:	68 f1       	brcs	.+90     	; 0x1850 <__addsf3x+0x98>
    17f6:	1a 16       	cp	r1, r26
    17f8:	f0 40       	sbci	r31, 0x00	; 0
    17fa:	a2 2f       	mov	r26, r18
    17fc:	23 2f       	mov	r18, r19
    17fe:	34 2f       	mov	r19, r20
    1800:	44 27       	eor	r20, r20
    1802:	58 5f       	subi	r21, 0xF8	; 248
    1804:	f3 cf       	rjmp	.-26     	; 0x17ec <__addsf3x+0x34>
    1806:	46 95       	lsr	r20
    1808:	37 95       	ror	r19
    180a:	27 95       	ror	r18
    180c:	a7 95       	ror	r26
    180e:	f0 40       	sbci	r31, 0x00	; 0
    1810:	53 95       	inc	r21
    1812:	c9 f7       	brne	.-14     	; 0x1806 <__addsf3x+0x4e>
    1814:	7e f4       	brtc	.+30     	; 0x1834 <__addsf3x+0x7c>
    1816:	1f 16       	cp	r1, r31
    1818:	ba 0b       	sbc	r27, r26
    181a:	62 0b       	sbc	r22, r18
    181c:	73 0b       	sbc	r23, r19
    181e:	84 0b       	sbc	r24, r20
    1820:	ba f0       	brmi	.+46     	; 0x1850 <__addsf3x+0x98>
    1822:	91 50       	subi	r25, 0x01	; 1
    1824:	a1 f0       	breq	.+40     	; 0x184e <__addsf3x+0x96>
    1826:	ff 0f       	add	r31, r31
    1828:	bb 1f       	adc	r27, r27
    182a:	66 1f       	adc	r22, r22
    182c:	77 1f       	adc	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	c2 f7       	brpl	.-16     	; 0x1822 <__addsf3x+0x6a>
    1832:	0e c0       	rjmp	.+28     	; 0x1850 <__addsf3x+0x98>
    1834:	ba 0f       	add	r27, r26
    1836:	62 1f       	adc	r22, r18
    1838:	73 1f       	adc	r23, r19
    183a:	84 1f       	adc	r24, r20
    183c:	48 f4       	brcc	.+18     	; 0x1850 <__addsf3x+0x98>
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	f7 95       	ror	r31
    1848:	9e 3f       	cpi	r25, 0xFE	; 254
    184a:	08 f0       	brcs	.+2      	; 0x184e <__addsf3x+0x96>
    184c:	b3 cf       	rjmp	.-154    	; 0x17b4 <__addsf3+0x1e>
    184e:	93 95       	inc	r25
    1850:	88 0f       	add	r24, r24
    1852:	08 f0       	brcs	.+2      	; 0x1856 <__addsf3x+0x9e>
    1854:	99 27       	eor	r25, r25
    1856:	ee 0f       	add	r30, r30
    1858:	97 95       	ror	r25
    185a:	87 95       	ror	r24
    185c:	08 95       	ret

0000185e <__divsf3>:
    185e:	0c d0       	rcall	.+24     	; 0x1878 <__divsf3x>
    1860:	eb c0       	rjmp	.+470    	; 0x1a38 <__fp_round>
    1862:	e3 d0       	rcall	.+454    	; 0x1a2a <__fp_pscB>
    1864:	40 f0       	brcs	.+16     	; 0x1876 <__divsf3+0x18>
    1866:	da d0       	rcall	.+436    	; 0x1a1c <__fp_pscA>
    1868:	30 f0       	brcs	.+12     	; 0x1876 <__divsf3+0x18>
    186a:	21 f4       	brne	.+8      	; 0x1874 <__divsf3+0x16>
    186c:	5f 3f       	cpi	r21, 0xFF	; 255
    186e:	19 f0       	breq	.+6      	; 0x1876 <__divsf3+0x18>
    1870:	cc c0       	rjmp	.+408    	; 0x1a0a <__fp_inf>
    1872:	51 11       	cpse	r21, r1
    1874:	15 c1       	rjmp	.+554    	; 0x1aa0 <__fp_szero>
    1876:	cf c0       	rjmp	.+414    	; 0x1a16 <__fp_nan>

00001878 <__divsf3x>:
    1878:	f0 d0       	rcall	.+480    	; 0x1a5a <__fp_split3>
    187a:	98 f3       	brcs	.-26     	; 0x1862 <__divsf3+0x4>

0000187c <__divsf3_pse>:
    187c:	99 23       	and	r25, r25
    187e:	c9 f3       	breq	.-14     	; 0x1872 <__divsf3+0x14>
    1880:	55 23       	and	r21, r21
    1882:	b1 f3       	breq	.-20     	; 0x1870 <__divsf3+0x12>
    1884:	95 1b       	sub	r25, r21
    1886:	55 0b       	sbc	r21, r21
    1888:	bb 27       	eor	r27, r27
    188a:	aa 27       	eor	r26, r26
    188c:	62 17       	cp	r22, r18
    188e:	73 07       	cpc	r23, r19
    1890:	84 07       	cpc	r24, r20
    1892:	38 f0       	brcs	.+14     	; 0x18a2 <__divsf3_pse+0x26>
    1894:	9f 5f       	subi	r25, 0xFF	; 255
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	44 1f       	adc	r20, r20
    189e:	aa 1f       	adc	r26, r26
    18a0:	a9 f3       	breq	.-22     	; 0x188c <__divsf3_pse+0x10>
    18a2:	33 d0       	rcall	.+102    	; 0x190a <__divsf3_pse+0x8e>
    18a4:	0e 2e       	mov	r0, r30
    18a6:	3a f0       	brmi	.+14     	; 0x18b6 <__divsf3_pse+0x3a>
    18a8:	e0 e8       	ldi	r30, 0x80	; 128
    18aa:	30 d0       	rcall	.+96     	; 0x190c <__divsf3_pse+0x90>
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	e6 95       	lsr	r30
    18b2:	00 1c       	adc	r0, r0
    18b4:	ca f7       	brpl	.-14     	; 0x18a8 <__divsf3_pse+0x2c>
    18b6:	29 d0       	rcall	.+82     	; 0x190a <__divsf3_pse+0x8e>
    18b8:	fe 2f       	mov	r31, r30
    18ba:	27 d0       	rcall	.+78     	; 0x190a <__divsf3_pse+0x8e>
    18bc:	66 0f       	add	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	bb 1f       	adc	r27, r27
    18c4:	26 17       	cp	r18, r22
    18c6:	37 07       	cpc	r19, r23
    18c8:	48 07       	cpc	r20, r24
    18ca:	ab 07       	cpc	r26, r27
    18cc:	b0 e8       	ldi	r27, 0x80	; 128
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__divsf3_pse+0x56>
    18d0:	bb 0b       	sbc	r27, r27
    18d2:	80 2d       	mov	r24, r0
    18d4:	bf 01       	movw	r22, r30
    18d6:	ff 27       	eor	r31, r31
    18d8:	93 58       	subi	r25, 0x83	; 131
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	2a f0       	brmi	.+10     	; 0x18e8 <__divsf3_pse+0x6c>
    18de:	9e 3f       	cpi	r25, 0xFE	; 254
    18e0:	51 05       	cpc	r21, r1
    18e2:	68 f0       	brcs	.+26     	; 0x18fe <__divsf3_pse+0x82>
    18e4:	92 c0       	rjmp	.+292    	; 0x1a0a <__fp_inf>
    18e6:	dc c0       	rjmp	.+440    	; 0x1aa0 <__fp_szero>
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	ec f3       	brlt	.-6      	; 0x18e6 <__divsf3_pse+0x6a>
    18ec:	98 3e       	cpi	r25, 0xE8	; 232
    18ee:	dc f3       	brlt	.-10     	; 0x18e6 <__divsf3_pse+0x6a>
    18f0:	86 95       	lsr	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	b7 95       	ror	r27
    18f8:	f7 95       	ror	r31
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c9 f7       	brne	.-14     	; 0x18f0 <__divsf3_pse+0x74>
    18fe:	88 0f       	add	r24, r24
    1900:	91 1d       	adc	r25, r1
    1902:	96 95       	lsr	r25
    1904:	87 95       	ror	r24
    1906:	97 f9       	bld	r25, 7
    1908:	08 95       	ret
    190a:	e1 e0       	ldi	r30, 0x01	; 1
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	bb 1f       	adc	r27, r27
    1914:	62 17       	cp	r22, r18
    1916:	73 07       	cpc	r23, r19
    1918:	84 07       	cpc	r24, r20
    191a:	ba 07       	cpc	r27, r26
    191c:	20 f0       	brcs	.+8      	; 0x1926 <__divsf3_pse+0xaa>
    191e:	62 1b       	sub	r22, r18
    1920:	73 0b       	sbc	r23, r19
    1922:	84 0b       	sbc	r24, r20
    1924:	ba 0b       	sbc	r27, r26
    1926:	ee 1f       	adc	r30, r30
    1928:	88 f7       	brcc	.-30     	; 0x190c <__divsf3_pse+0x90>
    192a:	e0 95       	com	r30
    192c:	08 95       	ret

0000192e <__fixsfsi>:
    192e:	04 d0       	rcall	.+8      	; 0x1938 <__fixunssfsi>
    1930:	68 94       	set
    1932:	b1 11       	cpse	r27, r1
    1934:	b5 c0       	rjmp	.+362    	; 0x1aa0 <__fp_szero>
    1936:	08 95       	ret

00001938 <__fixunssfsi>:
    1938:	98 d0       	rcall	.+304    	; 0x1a6a <__fp_splitA>
    193a:	88 f0       	brcs	.+34     	; 0x195e <__fixunssfsi+0x26>
    193c:	9f 57       	subi	r25, 0x7F	; 127
    193e:	90 f0       	brcs	.+36     	; 0x1964 <__fixunssfsi+0x2c>
    1940:	b9 2f       	mov	r27, r25
    1942:	99 27       	eor	r25, r25
    1944:	b7 51       	subi	r27, 0x17	; 23
    1946:	a0 f0       	brcs	.+40     	; 0x1970 <__fixunssfsi+0x38>
    1948:	d1 f0       	breq	.+52     	; 0x197e <__fixunssfsi+0x46>
    194a:	66 0f       	add	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	1a f0       	brmi	.+6      	; 0x195a <__fixunssfsi+0x22>
    1954:	ba 95       	dec	r27
    1956:	c9 f7       	brne	.-14     	; 0x194a <__fixunssfsi+0x12>
    1958:	12 c0       	rjmp	.+36     	; 0x197e <__fixunssfsi+0x46>
    195a:	b1 30       	cpi	r27, 0x01	; 1
    195c:	81 f0       	breq	.+32     	; 0x197e <__fixunssfsi+0x46>
    195e:	9f d0       	rcall	.+318    	; 0x1a9e <__fp_zero>
    1960:	b1 e0       	ldi	r27, 0x01	; 1
    1962:	08 95       	ret
    1964:	9c c0       	rjmp	.+312    	; 0x1a9e <__fp_zero>
    1966:	67 2f       	mov	r22, r23
    1968:	78 2f       	mov	r23, r24
    196a:	88 27       	eor	r24, r24
    196c:	b8 5f       	subi	r27, 0xF8	; 248
    196e:	39 f0       	breq	.+14     	; 0x197e <__fixunssfsi+0x46>
    1970:	b9 3f       	cpi	r27, 0xF9	; 249
    1972:	cc f3       	brlt	.-14     	; 0x1966 <__fixunssfsi+0x2e>
    1974:	86 95       	lsr	r24
    1976:	77 95       	ror	r23
    1978:	67 95       	ror	r22
    197a:	b3 95       	inc	r27
    197c:	d9 f7       	brne	.-10     	; 0x1974 <__fixunssfsi+0x3c>
    197e:	3e f4       	brtc	.+14     	; 0x198e <__fixunssfsi+0x56>
    1980:	90 95       	com	r25
    1982:	80 95       	com	r24
    1984:	70 95       	com	r23
    1986:	61 95       	neg	r22
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	08 95       	ret

00001990 <__floatunsisf>:
    1990:	e8 94       	clt
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <__floatsisf+0x12>

00001994 <__floatsisf>:
    1994:	97 fb       	bst	r25, 7
    1996:	3e f4       	brtc	.+14     	; 0x19a6 <__floatsisf+0x12>
    1998:	90 95       	com	r25
    199a:	80 95       	com	r24
    199c:	70 95       	com	r23
    199e:	61 95       	neg	r22
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	99 23       	and	r25, r25
    19a8:	a9 f0       	breq	.+42     	; 0x19d4 <__floatsisf+0x40>
    19aa:	f9 2f       	mov	r31, r25
    19ac:	96 e9       	ldi	r25, 0x96	; 150
    19ae:	bb 27       	eor	r27, r27
    19b0:	93 95       	inc	r25
    19b2:	f6 95       	lsr	r31
    19b4:	87 95       	ror	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b7 95       	ror	r27
    19bc:	f1 11       	cpse	r31, r1
    19be:	f8 cf       	rjmp	.-16     	; 0x19b0 <__floatsisf+0x1c>
    19c0:	fa f4       	brpl	.+62     	; 0x1a00 <__floatsisf+0x6c>
    19c2:	bb 0f       	add	r27, r27
    19c4:	11 f4       	brne	.+4      	; 0x19ca <__floatsisf+0x36>
    19c6:	60 ff       	sbrs	r22, 0
    19c8:	1b c0       	rjmp	.+54     	; 0x1a00 <__floatsisf+0x6c>
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8f 4f       	sbci	r24, 0xFF	; 255
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	16 c0       	rjmp	.+44     	; 0x1a00 <__floatsisf+0x6c>
    19d4:	88 23       	and	r24, r24
    19d6:	11 f0       	breq	.+4      	; 0x19dc <__floatsisf+0x48>
    19d8:	96 e9       	ldi	r25, 0x96	; 150
    19da:	11 c0       	rjmp	.+34     	; 0x19fe <__floatsisf+0x6a>
    19dc:	77 23       	and	r23, r23
    19de:	21 f0       	breq	.+8      	; 0x19e8 <__floatsisf+0x54>
    19e0:	9e e8       	ldi	r25, 0x8E	; 142
    19e2:	87 2f       	mov	r24, r23
    19e4:	76 2f       	mov	r23, r22
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <__floatsisf+0x5e>
    19e8:	66 23       	and	r22, r22
    19ea:	71 f0       	breq	.+28     	; 0x1a08 <__floatsisf+0x74>
    19ec:	96 e8       	ldi	r25, 0x86	; 134
    19ee:	86 2f       	mov	r24, r22
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	2a f0       	brmi	.+10     	; 0x1a00 <__floatsisf+0x6c>
    19f6:	9a 95       	dec	r25
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	da f7       	brpl	.-10     	; 0x19f6 <__floatsisf+0x62>
    1a00:	88 0f       	add	r24, r24
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	97 f9       	bld	r25, 7
    1a08:	08 95       	ret

00001a0a <__fp_inf>:
    1a0a:	97 f9       	bld	r25, 7
    1a0c:	9f 67       	ori	r25, 0x7F	; 127
    1a0e:	80 e8       	ldi	r24, 0x80	; 128
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	08 95       	ret

00001a16 <__fp_nan>:
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	80 ec       	ldi	r24, 0xC0	; 192
    1a1a:	08 95       	ret

00001a1c <__fp_pscA>:
    1a1c:	00 24       	eor	r0, r0
    1a1e:	0a 94       	dec	r0
    1a20:	16 16       	cp	r1, r22
    1a22:	17 06       	cpc	r1, r23
    1a24:	18 06       	cpc	r1, r24
    1a26:	09 06       	cpc	r0, r25
    1a28:	08 95       	ret

00001a2a <__fp_pscB>:
    1a2a:	00 24       	eor	r0, r0
    1a2c:	0a 94       	dec	r0
    1a2e:	12 16       	cp	r1, r18
    1a30:	13 06       	cpc	r1, r19
    1a32:	14 06       	cpc	r1, r20
    1a34:	05 06       	cpc	r0, r21
    1a36:	08 95       	ret

00001a38 <__fp_round>:
    1a38:	09 2e       	mov	r0, r25
    1a3a:	03 94       	inc	r0
    1a3c:	00 0c       	add	r0, r0
    1a3e:	11 f4       	brne	.+4      	; 0x1a44 <__fp_round+0xc>
    1a40:	88 23       	and	r24, r24
    1a42:	52 f0       	brmi	.+20     	; 0x1a58 <__fp_round+0x20>
    1a44:	bb 0f       	add	r27, r27
    1a46:	40 f4       	brcc	.+16     	; 0x1a58 <__fp_round+0x20>
    1a48:	bf 2b       	or	r27, r31
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <__fp_round+0x18>
    1a4c:	60 ff       	sbrs	r22, 0
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <__fp_round+0x20>
    1a50:	6f 5f       	subi	r22, 0xFF	; 255
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	8f 4f       	sbci	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	08 95       	ret

00001a5a <__fp_split3>:
    1a5a:	57 fd       	sbrc	r21, 7
    1a5c:	90 58       	subi	r25, 0x80	; 128
    1a5e:	44 0f       	add	r20, r20
    1a60:	55 1f       	adc	r21, r21
    1a62:	59 f0       	breq	.+22     	; 0x1a7a <__fp_splitA+0x10>
    1a64:	5f 3f       	cpi	r21, 0xFF	; 255
    1a66:	71 f0       	breq	.+28     	; 0x1a84 <__fp_splitA+0x1a>
    1a68:	47 95       	ror	r20

00001a6a <__fp_splitA>:
    1a6a:	88 0f       	add	r24, r24
    1a6c:	97 fb       	bst	r25, 7
    1a6e:	99 1f       	adc	r25, r25
    1a70:	61 f0       	breq	.+24     	; 0x1a8a <__fp_splitA+0x20>
    1a72:	9f 3f       	cpi	r25, 0xFF	; 255
    1a74:	79 f0       	breq	.+30     	; 0x1a94 <__fp_splitA+0x2a>
    1a76:	87 95       	ror	r24
    1a78:	08 95       	ret
    1a7a:	12 16       	cp	r1, r18
    1a7c:	13 06       	cpc	r1, r19
    1a7e:	14 06       	cpc	r1, r20
    1a80:	55 1f       	adc	r21, r21
    1a82:	f2 cf       	rjmp	.-28     	; 0x1a68 <__fp_split3+0xe>
    1a84:	46 95       	lsr	r20
    1a86:	f1 df       	rcall	.-30     	; 0x1a6a <__fp_splitA>
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <__fp_splitA+0x30>
    1a8a:	16 16       	cp	r1, r22
    1a8c:	17 06       	cpc	r1, r23
    1a8e:	18 06       	cpc	r1, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	f1 cf       	rjmp	.-30     	; 0x1a76 <__fp_splitA+0xc>
    1a94:	86 95       	lsr	r24
    1a96:	71 05       	cpc	r23, r1
    1a98:	61 05       	cpc	r22, r1
    1a9a:	08 94       	sec
    1a9c:	08 95       	ret

00001a9e <__fp_zero>:
    1a9e:	e8 94       	clt

00001aa0 <__fp_szero>:
    1aa0:	bb 27       	eor	r27, r27
    1aa2:	66 27       	eor	r22, r22
    1aa4:	77 27       	eor	r23, r23
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	08 95       	ret

00001aac <__mulsf3>:
    1aac:	0b d0       	rcall	.+22     	; 0x1ac4 <__mulsf3x>
    1aae:	c4 cf       	rjmp	.-120    	; 0x1a38 <__fp_round>
    1ab0:	b5 df       	rcall	.-150    	; 0x1a1c <__fp_pscA>
    1ab2:	28 f0       	brcs	.+10     	; 0x1abe <__mulsf3+0x12>
    1ab4:	ba df       	rcall	.-140    	; 0x1a2a <__fp_pscB>
    1ab6:	18 f0       	brcs	.+6      	; 0x1abe <__mulsf3+0x12>
    1ab8:	95 23       	and	r25, r21
    1aba:	09 f0       	breq	.+2      	; 0x1abe <__mulsf3+0x12>
    1abc:	a6 cf       	rjmp	.-180    	; 0x1a0a <__fp_inf>
    1abe:	ab cf       	rjmp	.-170    	; 0x1a16 <__fp_nan>
    1ac0:	11 24       	eor	r1, r1
    1ac2:	ee cf       	rjmp	.-36     	; 0x1aa0 <__fp_szero>

00001ac4 <__mulsf3x>:
    1ac4:	ca df       	rcall	.-108    	; 0x1a5a <__fp_split3>
    1ac6:	a0 f3       	brcs	.-24     	; 0x1ab0 <__mulsf3+0x4>

00001ac8 <__mulsf3_pse>:
    1ac8:	95 9f       	mul	r25, r21
    1aca:	d1 f3       	breq	.-12     	; 0x1ac0 <__mulsf3+0x14>
    1acc:	95 0f       	add	r25, r21
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	55 1f       	adc	r21, r21
    1ad2:	62 9f       	mul	r22, r18
    1ad4:	f0 01       	movw	r30, r0
    1ad6:	72 9f       	mul	r23, r18
    1ad8:	bb 27       	eor	r27, r27
    1ada:	f0 0d       	add	r31, r0
    1adc:	b1 1d       	adc	r27, r1
    1ade:	63 9f       	mul	r22, r19
    1ae0:	aa 27       	eor	r26, r26
    1ae2:	f0 0d       	add	r31, r0
    1ae4:	b1 1d       	adc	r27, r1
    1ae6:	aa 1f       	adc	r26, r26
    1ae8:	64 9f       	mul	r22, r20
    1aea:	66 27       	eor	r22, r22
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	66 1f       	adc	r22, r22
    1af2:	82 9f       	mul	r24, r18
    1af4:	22 27       	eor	r18, r18
    1af6:	b0 0d       	add	r27, r0
    1af8:	a1 1d       	adc	r26, r1
    1afa:	62 1f       	adc	r22, r18
    1afc:	73 9f       	mul	r23, r19
    1afe:	b0 0d       	add	r27, r0
    1b00:	a1 1d       	adc	r26, r1
    1b02:	62 1f       	adc	r22, r18
    1b04:	83 9f       	mul	r24, r19
    1b06:	a0 0d       	add	r26, r0
    1b08:	61 1d       	adc	r22, r1
    1b0a:	22 1f       	adc	r18, r18
    1b0c:	74 9f       	mul	r23, r20
    1b0e:	33 27       	eor	r19, r19
    1b10:	a0 0d       	add	r26, r0
    1b12:	61 1d       	adc	r22, r1
    1b14:	23 1f       	adc	r18, r19
    1b16:	84 9f       	mul	r24, r20
    1b18:	60 0d       	add	r22, r0
    1b1a:	21 1d       	adc	r18, r1
    1b1c:	82 2f       	mov	r24, r18
    1b1e:	76 2f       	mov	r23, r22
    1b20:	6a 2f       	mov	r22, r26
    1b22:	11 24       	eor	r1, r1
    1b24:	9f 57       	subi	r25, 0x7F	; 127
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	8a f0       	brmi	.+34     	; 0x1b4c <__mulsf3_pse+0x84>
    1b2a:	e1 f0       	breq	.+56     	; 0x1b64 <__mulsf3_pse+0x9c>
    1b2c:	88 23       	and	r24, r24
    1b2e:	4a f0       	brmi	.+18     	; 0x1b42 <__mulsf3_pse+0x7a>
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	bb 1f       	adc	r27, r27
    1b36:	66 1f       	adc	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	88 1f       	adc	r24, r24
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	50 40       	sbci	r21, 0x00	; 0
    1b40:	a9 f7       	brne	.-22     	; 0x1b2c <__mulsf3_pse+0x64>
    1b42:	9e 3f       	cpi	r25, 0xFE	; 254
    1b44:	51 05       	cpc	r21, r1
    1b46:	70 f0       	brcs	.+28     	; 0x1b64 <__mulsf3_pse+0x9c>
    1b48:	60 cf       	rjmp	.-320    	; 0x1a0a <__fp_inf>
    1b4a:	aa cf       	rjmp	.-172    	; 0x1aa0 <__fp_szero>
    1b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4e:	ec f3       	brlt	.-6      	; 0x1b4a <__mulsf3_pse+0x82>
    1b50:	98 3e       	cpi	r25, 0xE8	; 232
    1b52:	dc f3       	brlt	.-10     	; 0x1b4a <__mulsf3_pse+0x82>
    1b54:	86 95       	lsr	r24
    1b56:	77 95       	ror	r23
    1b58:	67 95       	ror	r22
    1b5a:	b7 95       	ror	r27
    1b5c:	f7 95       	ror	r31
    1b5e:	e7 95       	ror	r30
    1b60:	9f 5f       	subi	r25, 0xFF	; 255
    1b62:	c1 f7       	brne	.-16     	; 0x1b54 <__mulsf3_pse+0x8c>
    1b64:	fe 2b       	or	r31, r30
    1b66:	88 0f       	add	r24, r24
    1b68:	91 1d       	adc	r25, r1
    1b6a:	96 95       	lsr	r25
    1b6c:	87 95       	ror	r24
    1b6e:	97 f9       	bld	r25, 7
    1b70:	08 95       	ret

00001b72 <__divmodhi4>:
    1b72:	97 fb       	bst	r25, 7
    1b74:	07 2e       	mov	r0, r23
    1b76:	16 f4       	brtc	.+4      	; 0x1b7c <__divmodhi4+0xa>
    1b78:	00 94       	com	r0
    1b7a:	06 d0       	rcall	.+12     	; 0x1b88 <__divmodhi4_neg1>
    1b7c:	77 fd       	sbrc	r23, 7
    1b7e:	08 d0       	rcall	.+16     	; 0x1b90 <__divmodhi4_neg2>
    1b80:	0b d0       	rcall	.+22     	; 0x1b98 <__udivmodhi4>
    1b82:	07 fc       	sbrc	r0, 7
    1b84:	05 d0       	rcall	.+10     	; 0x1b90 <__divmodhi4_neg2>
    1b86:	3e f4       	brtc	.+14     	; 0x1b96 <__divmodhi4_exit>

00001b88 <__divmodhi4_neg1>:
    1b88:	90 95       	com	r25
    1b8a:	81 95       	neg	r24
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	08 95       	ret

00001b90 <__divmodhi4_neg2>:
    1b90:	70 95       	com	r23
    1b92:	61 95       	neg	r22
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255

00001b96 <__divmodhi4_exit>:
    1b96:	08 95       	ret

00001b98 <__udivmodhi4>:
    1b98:	aa 1b       	sub	r26, r26
    1b9a:	bb 1b       	sub	r27, r27
    1b9c:	51 e1       	ldi	r21, 0x11	; 17
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <__udivmodhi4_ep>

00001ba0 <__udivmodhi4_loop>:
    1ba0:	aa 1f       	adc	r26, r26
    1ba2:	bb 1f       	adc	r27, r27
    1ba4:	a6 17       	cp	r26, r22
    1ba6:	b7 07       	cpc	r27, r23
    1ba8:	10 f0       	brcs	.+4      	; 0x1bae <__udivmodhi4_ep>
    1baa:	a6 1b       	sub	r26, r22
    1bac:	b7 0b       	sbc	r27, r23

00001bae <__udivmodhi4_ep>:
    1bae:	88 1f       	adc	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	5a 95       	dec	r21
    1bb4:	a9 f7       	brne	.-22     	; 0x1ba0 <__udivmodhi4_loop>
    1bb6:	80 95       	com	r24
    1bb8:	90 95       	com	r25
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	08 95       	ret

00001bc0 <strcpy>:
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0d 92       	st	X+, r0
    1bc8:	00 20       	and	r0, r0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <strcpy+0x4>
    1bcc:	08 95       	ret

00001bce <_exit>:
    1bce:	f8 94       	cli

00001bd0 <__stop_program>:
    1bd0:	ff cf       	rjmp	.-2      	; 0x1bd0 <__stop_program>
