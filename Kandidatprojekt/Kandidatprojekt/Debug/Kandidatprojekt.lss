
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000142  00800100  00800100  000004e4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d8f  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000067d  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000016a7  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000298  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000107b7  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005fc  00000000  00000000  00013b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0001413b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000034da  00000000  00000000  00014213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c8 c0       	rjmp	.+400    	; 0x1de <__vector_19>
  4e:	00 00       	nop
  50:	61 c1       	rjmp	.+706    	; 0x314 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	b8 c1       	rjmp	.+880    	; 0x3ca <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 34       	cpi	r26, 0x42	; 66
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d0       	rcall	.+116    	; 0x138 <main>
  c4:	d3 c1       	rjmp	.+934    	; 0x46c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_28>:
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
  de:	80 91 ce 00 	lds	r24, 0x00CE
  e2:	8f 3f       	cpi	r24, 0xFF	; 255
  e4:	29 f4       	brne	.+10     	; 0xf0 <__vector_28+0x28>
  e6:	10 92 3b 02 	sts	0x023B, r1
  ea:	10 92 3a 02 	sts	0x023A, r1
  ee:	10 c0       	rjmp	.+32     	; 0x110 <__vector_28+0x48>
  f0:	e0 91 3a 02 	lds	r30, 0x023A
  f4:	f0 91 3b 02 	lds	r31, 0x023B
  f8:	e6 5e       	subi	r30, 0xE6	; 230
  fa:	fd 4f       	sbci	r31, 0xFD	; 253
  fc:	80 83       	st	Z, r24
  fe:	80 91 3a 02 	lds	r24, 0x023A
 102:	90 91 3b 02 	lds	r25, 0x023B
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 3b 02 	sts	0x023B, r25
 10c:	80 93 3a 02 	sts	0x023A, r24
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0b be       	out	0x3b, r0	; 59
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <carInit>:
 126:	16 d0       	rcall	.+44     	; 0x154 <pwmInit>
 128:	c6 d0       	rcall	.+396    	; 0x2b6 <spi_slave_init>
 12a:	8d ec       	ldi	r24, 0xCD	; 205
 12c:	9a e0       	ldi	r25, 0x0A	; 10
 12e:	21 d0       	rcall	.+66     	; 0x172 <setESC>
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	9a e0       	ldi	r25, 0x0A	; 10
 134:	39 c0       	rjmp	.+114    	; 0x1a8 <setServo>
 136:	08 95       	ret

00000138 <main>:
int main (void)
{
	// FOR TESTING
	//	FLC_obstacle(2800, 150);

	carInit();
 138:	f6 df       	rcall	.-20     	; 0x126 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	90 ee       	ldi	r25, 0xE0	; 224
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x8>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x12>
 14a:	00 00       	nop
	_delay_ms(5000);
	
	testSteering();
 14c:	bd d0       	rcall	.+378    	; 0x2c8 <testSteering>
			////spi_send_byte((unsigned) (char) (esc_value_to_send));
			////spi_send_byte((unsigned) (char) (steering_value_to_send<<8));
			////spi_send_byte((unsigned) (char) (steering_value_to_send));
		//}
	//}
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret

00000154 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
 158:	82 ea       	ldi	r24, 0xA2	; 162
 15a:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f e8       	ldi	r25, 0x8F	; 143
 162:	90 93 87 00 	sts	0x0087, r25
 166:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
 16a:	8a e1       	ldi	r24, 0x1A	; 26
 16c:	80 93 81 00 	sts	0x0081, r24
 170:	08 95       	ret

00000172 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
 172:	80 36       	cpi	r24, 0x60	; 96
 174:	2a e0       	ldi	r18, 0x0A	; 10
 176:	92 07       	cpc	r25, r18
 178:	3c f4       	brge	.+14     	; 0x188 <setESC+0x16>
	{
		OCR1A = MINESC;
 17a:	8f e5       	ldi	r24, 0x5F	; 95
 17c:	9a e0       	ldi	r25, 0x0A	; 10
 17e:	90 93 89 00 	sts	0x0089, r25
 182:	80 93 88 00 	sts	0x0088, r24
 186:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
 188:	8b 33       	cpi	r24, 0x3B	; 59
 18a:	2b e0       	ldi	r18, 0x0B	; 11
 18c:	92 07       	cpc	r25, r18
 18e:	3c f0       	brlt	.+14     	; 0x19e <setESC+0x2c>
	{
		OCR1A = MAXESC;
 190:	8b e3       	ldi	r24, 0x3B	; 59
 192:	9b e0       	ldi	r25, 0x0B	; 11
 194:	90 93 89 00 	sts	0x0089, r25
 198:	80 93 88 00 	sts	0x0088, r24
 19c:	08 95       	ret
	} else {
		OCR1A = counterEsc;
 19e:	90 93 89 00 	sts	0x0089, r25
 1a2:	80 93 88 00 	sts	0x0088, r24
 1a6:	08 95       	ret

000001a8 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo > MAXRIGHT){
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	2c e0       	ldi	r18, 0x0C	; 12
 1ac:	92 07       	cpc	r25, r18
 1ae:	3c f0       	brlt	.+14     	; 0x1be <setServo+0x16>
		
		OCR1B = MAXRIGHT;
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e0       	ldi	r25, 0x0C	; 12
 1b4:	90 93 8b 00 	sts	0x008B, r25
 1b8:	80 93 8a 00 	sts	0x008A, r24
 1bc:	08 95       	ret
		
	}	else if (counterServo < MAXLEFT){
 1be:	86 3e       	cpi	r24, 0xE6	; 230
 1c0:	27 e0       	ldi	r18, 0x07	; 7
 1c2:	92 07       	cpc	r25, r18
 1c4:	3c f4       	brge	.+14     	; 0x1d4 <setServo+0x2c>

		OCR1B = MAXLEFT;
 1c6:	86 ee       	ldi	r24, 0xE6	; 230
 1c8:	97 e0       	ldi	r25, 0x07	; 7
 1ca:	90 93 8b 00 	sts	0x008B, r25
 1ce:	80 93 8a 00 	sts	0x008A, r24
 1d2:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;
 1d4:	90 93 8b 00 	sts	0x008B, r25
 1d8:	80 93 8a 00 	sts	0x008A, r24
 1dc:	08 95       	ret

000001de <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
 1fc:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
 1fe:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
 200:	2d 3f       	cpi	r18, 0xFD	; 253
 202:	a9 f0       	breq	.+42     	; 0x22e <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
 204:	ea e8       	ldi	r30, 0x8A	; 138
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 81       	ld	r24, Z
 20a:	91 81       	ldd	r25, Z+1	; 0x01
 20c:	dc 01       	movw	r26, r24
 20e:	a8 5b       	subi	r26, 0xB8	; 184
 210:	be 4f       	sbci	r27, 0xFE	; 254
 212:	2c 93       	st	X, r18
		rx_spi.i_last++;
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
 21a:	ec e8       	ldi	r30, 0x8C	; 140
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	91 83       	std	Z+1, r25	; 0x01
 226:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 00 01 	sts	0x0100, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
 22e:	80 91 8a 01 	lds	r24, 0x018A
 232:	90 91 8b 01 	lds	r25, 0x018B
 236:	80 34       	cpi	r24, 0x40	; 64
 238:	91 05       	cpc	r25, r1
 23a:	21 f4       	brne	.+8      	; 0x244 <__vector_19+0x66>
		
		rx_spi.i_last = 0;
 23c:	10 92 8b 01 	sts	0x018B, r1
 240:	10 92 8a 01 	sts	0x018A, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
 244:	80 91 46 01 	lds	r24, 0x0146
 248:	90 91 47 01 	lds	r25, 0x0147
 24c:	89 2b       	or	r24, r25
 24e:	01 f1       	breq	.+64     	; 0x290 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
 250:	e0 91 42 01 	lds	r30, 0x0142
 254:	f0 91 43 01 	lds	r31, 0x0143
 258:	ee 5f       	subi	r30, 0xFE	; 254
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	80 81       	ld	r24, Z
 25e:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
 260:	e2 e4       	ldi	r30, 0x42	; 66
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	91 83       	std	Z+1, r25	; 0x01
 26c:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
 26e:	e6 e4       	ldi	r30, 0x46	; 70
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	20 81       	ld	r18, Z
 274:	31 81       	ldd	r19, Z+1	; 0x01
 276:	21 50       	subi	r18, 0x01	; 1
 278:	31 09       	sbc	r19, r1
 27a:	31 83       	std	Z+1, r19	; 0x01
 27c:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
 27e:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
 280:	80 34       	cpi	r24, 0x40	; 64
 282:	91 05       	cpc	r25, r1
 284:	49 f4       	brne	.+18     	; 0x298 <__vector_19+0xba>
			
			tx_spi.i_first = 0;
 286:	10 92 43 01 	sts	0x0143, r1
 28a:	10 92 42 01 	sts	0x0142, r1
 28e:	04 c0       	rjmp	.+8      	; 0x298 <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
 290:	8d ef       	ldi	r24, 0xFD	; 253
 292:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
 294:	10 92 01 01 	sts	0x0101, r1
		
	} 	
	

}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0b be       	out	0x3b, r0	; 59
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
 2be:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
 2c0:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
 2c2:	8d ef       	ldi	r24, 0xFD	; 253
 2c4:	8e bd       	out	0x2e, r24	; 46
 2c6:	08 95       	ret

000002c8 <testSteering>:
 * 3386 => 1.86 ms too much left
 * 3586 => 1.96 ms too much left
 * 3686 => 2.0 ms too much left
 */
void testSteering(void)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29

//
int steer = STRAIGHT;

while (OCR1B<MAXRIGHT)
 2d0:	80 91 8a 00 	lds	r24, 0x008A
 2d4:	90 91 8b 00 	lds	r25, 0x008B
 2d8:	8f 33       	cpi	r24, 0x3F	; 63
 2da:	9c 40       	sbci	r25, 0x0C	; 12
 2dc:	b0 f4       	brcc	.+44     	; 0x30a <testSteering+0x42>
 */
void testSteering(void)
{

//
int steer = STRAIGHT;
 2de:	c4 e6       	ldi	r28, 0x64	; 100
 2e0:	da e0       	ldi	r29, 0x0A	; 10

while (OCR1B<MAXRIGHT)
 2e2:	0a e8       	ldi	r16, 0x8A	; 138
 2e4:	10 e0       	ldi	r17, 0x00	; 0
{
	steer +=10;
 2e6:	2a 96       	adiw	r28, 0x0a	; 10
	setServo(steer);
 2e8:	ce 01       	movw	r24, r28
 2ea:	5e df       	rcall	.-324    	; 0x1a8 <setServo>
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	9f e7       	ldi	r25, 0x7F	; 127
 2f0:	e6 e1       	ldi	r30, 0x16	; 22
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e0 40       	sbci	r30, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <testSteering+0x2a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <testSteering+0x34>
 2fc:	00 00       	nop
{

//
int steer = STRAIGHT;

while (OCR1B<MAXRIGHT)
 2fe:	f8 01       	movw	r30, r16
 300:	80 81       	ld	r24, Z
 302:	91 81       	ldd	r25, Z+1	; 0x01
 304:	8f 33       	cpi	r24, 0x3F	; 63
 306:	9c 40       	sbci	r25, 0x0C	; 12
 308:	70 f3       	brcs	.-36     	; 0x2e6 <testSteering+0x1e>



//setServo(STRAIGHT+160);
	
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
 334:	80 91 18 02 	lds	r24, 0x0218
 338:	90 91 19 02 	lds	r25, 0x0219
 33c:	80 34       	cpi	r24, 0x40	; 64
 33e:	91 05       	cpc	r25, r1
 340:	31 f4       	brne	.+12     	; 0x34e <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 40 02 	sts	0x0240, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
 348:	80 91 c6 00 	lds	r24, 0x00C6
 34c:	16 c0       	rjmp	.+44     	; 0x37a <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
 34e:	80 34       	cpi	r24, 0x40	; 64
 350:	91 05       	cpc	r25, r1
 352:	e8 f4       	brcc	.+58     	; 0x38e <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
 354:	e6 e1       	ldi	r30, 0x16	; 22
 356:	f2 e0       	ldi	r31, 0x02	; 2
 358:	20 81       	ld	r18, Z
 35a:	31 81       	ldd	r19, Z+1	; 0x01
 35c:	40 91 c6 00 	lds	r20, 0x00C6
 360:	d9 01       	movw	r26, r18
 362:	ac 52       	subi	r26, 0x2C	; 44
 364:	be 4f       	sbci	r27, 0xFE	; 254
 366:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	31 83       	std	Z+1, r19	; 0x01
 36e:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 19 02 	sts	0x0219, r25
 376:	80 93 18 02 	sts	0x0218, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
 37a:	80 91 18 02 	lds	r24, 0x0218
 37e:	90 91 19 02 	lds	r25, 0x0219
 382:	80 34       	cpi	r24, 0x40	; 64
 384:	91 05       	cpc	r25, r1
 386:	19 f4       	brne	.+6      	; 0x38e <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 3e 02 	sts	0x023E, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
 38e:	80 91 16 02 	lds	r24, 0x0216
 392:	90 91 17 02 	lds	r25, 0x0217
 396:	80 34       	cpi	r24, 0x40	; 64
 398:	91 05       	cpc	r25, r1
 39a:	21 f4       	brne	.+8      	; 0x3a4 <__vector_20+0x90>
		rx_uart0.i_last = 0;
 39c:	10 92 17 02 	sts	0x0217, r1
 3a0:	10 92 16 02 	sts	0x0216, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 3d 02 	sts	0x023D, r24
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0b be       	out	0x3b, r0	; 59
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_22>:




ISR(USART0_TX_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	0f 92       	push	r0
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	ef 93       	push	r30
 3de:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
 3e0:	80 91 d2 01 	lds	r24, 0x01D2
 3e4:	90 91 d3 01 	lds	r25, 0x01D3
 3e8:	80 34       	cpi	r24, 0x40	; 64
 3ea:	91 05       	cpc	r25, r1
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
 3ee:	10 92 3c 02 	sts	0x023C, r1
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
 3f4:	89 2b       	or	r24, r25
 3f6:	b9 f0       	breq	.+46     	; 0x426 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
 3f8:	e0 91 ce 01 	lds	r30, 0x01CE
 3fc:	f0 91 cf 01 	lds	r31, 0x01CF
 400:	e2 57       	subi	r30, 0x72	; 114
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	80 81       	ld	r24, Z
 406:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
 40a:	ee ec       	ldi	r30, 0xCE	; 206
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	91 83       	std	Z+1, r25	; 0x01
 416:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
 418:	e2 ed       	ldi	r30, 0xD2	; 210
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	91 83       	std	Z+1, r25	; 0x01
 424:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
 426:	80 91 ce 01 	lds	r24, 0x01CE
 42a:	90 91 cf 01 	lds	r25, 0x01CF
 42e:	80 34       	cpi	r24, 0x40	; 64
 430:	91 05       	cpc	r25, r1
 432:	21 f4       	brne	.+8      	; 0x43c <__vector_22+0x72>
		tx_uart0.i_first = 0;
 434:	10 92 cf 01 	sts	0x01CF, r1
 438:	10 92 ce 01 	sts	0x01CE, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
 43c:	80 91 d2 01 	lds	r24, 0x01D2
 440:	90 91 d3 01 	lds	r25, 0x01D3
 444:	89 2b       	or	r24, r25
 446:	39 f4       	brne	.+14     	; 0x456 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
 448:	10 92 3f 02 	sts	0x023F, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
 44c:	e1 ec       	ldi	r30, 0xC1	; 193
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	8f 7b       	andi	r24, 0xBF	; 191
 454:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	0f 90       	pop	r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
