
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00002414  000024a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000126  008001fe  008001fe  000025a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003242  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c28  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002885  00000000  00000000  00006628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000578  00000000  00000000  00008eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ce2  00000000  00000000  00009428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000186e  00000000  00000000  0001a10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0001b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003d8d  00000000  00000000  0001bb08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_19>
      50:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e1       	ldi	r30, 0x14	; 20
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3f       	cpi	r26, 0xFE	; 254
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ef       	ldi	r26, 0xFE	; 254
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 32       	cpi	r26, 0x24	; 36
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 98 09 	call	0x1330	; 0x1330 <main>
      c6:	0c 94 08 12 	jmp	0x2410	; 0x2410 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	11 f4       	brne	.+4      	; 0xea <count+0x1e>
	{
		TCCR3B = (0<<CS32)|(0<<CS30);
      e6:	10 92 91 00 	sts	0x0091, r1
      ea:	08 95       	ret

000000ec <FLC_speed>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_speed(int currentServo, int midSonicRange, int currentEsc)
{
      ec:	2f 92       	push	r2
      ee:	3f 92       	push	r3
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ca 5b       	subi	r28, 0xBA	; 186
     116:	d2 40       	sbci	r29, 0x02	; 2
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	7b 01       	movw	r14, r22
     124:	6a 01       	movw	r12, r20
	
	int fullBatteryAdjust = 10;
	
	// Inputs
	struct io_type distance; strcpy(distance.name, "distance");
     126:	29 e0       	ldi	r18, 0x09	; 9
     128:	e0 e0       	ldi	r30, 0x00	; 0
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	de 01       	movw	r26, r28
     12e:	11 96       	adiw	r26, 0x01	; 1
     130:	01 90       	ld	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	2a 95       	dec	r18
     136:	e1 f7       	brne	.-8      	; 0x130 <FLC_speed+0x44>
	struct io_type steering; strcpy(steering.name, "steering");
     138:	29 e0       	ldi	r18, 0x09	; 9
     13a:	e9 e0       	ldi	r30, 0x09	; 9
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	de 01       	movw	r26, r28
     140:	51 96       	adiw	r26, 0x11	; 17
     142:	01 90       	ld	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	2a 95       	dec	r18
     148:	e1 f7       	brne	.-8      	; 0x142 <FLC_speed+0x56>
	struct io_type esc; strcpy(esc.name, "esc");
     14a:	05 e6       	ldi	r16, 0x65	; 101
     14c:	13 e7       	ldi	r17, 0x73	; 115
     14e:	23 e6       	ldi	r18, 0x63	; 99
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	09 a3       	std	Y+33, r16	; 0x21
     154:	1a a3       	std	Y+34, r17	; 0x22
     156:	2b a3       	std	Y+35, r18	; 0x23
     158:	3c a3       	std	Y+36, r19	; 0x24

	// Output
	struct io_type speed; strcpy(speed.name, "speed");
     15a:	26 e0       	ldi	r18, 0x06	; 6
     15c:	e2 e1       	ldi	r30, 0x12	; 18
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	de 01       	movw	r26, r28
     162:	d1 96       	adiw	r26, 0x31	; 49
     164:	01 90       	ld	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	2a 95       	dec	r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <FLC_speed+0x78>


	// Variable assigned its reference value
	if (currentServo<=MAXLEFT) {
     16c:	87 3e       	cpi	r24, 0xE7	; 231
     16e:	07 e0       	ldi	r16, 0x07	; 7
     170:	90 07       	cpc	r25, r16
     172:	2c f4       	brge	.+10     	; 0x17e <FLC_speed+0x92>
		steering.value = 202;
     174:	8a ec       	ldi	r24, 0xCA	; 202
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	9c 8f       	std	Y+28, r25	; 0x1c
     17a:	8b 8f       	std	Y+27, r24	; 0x1b
     17c:	0f c0       	rjmp	.+30     	; 0x19c <FLC_speed+0xb0>
	}
	else if (currentServo>=MAXRIGHT)
     17e:	84 3e       	cpi	r24, 0xE4	; 228
     180:	1c e0       	ldi	r17, 0x0C	; 12
     182:	91 07       	cpc	r25, r17
     184:	2c f0       	brlt	.+10     	; 0x190 <FLC_speed+0xa4>
	{
		steering.value = 330;
     186:	8a e4       	ldi	r24, 0x4A	; 74
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	9c 8f       	std	Y+28, r25	; 0x1c
     18c:	8b 8f       	std	Y+27, r24	; 0x1b
     18e:	06 c0       	rjmp	.+12     	; 0x19c <FLC_speed+0xb0>
	}
	else
	{
		steering.value = (int) currentServo / 10;
     190:	6a e0       	ldi	r22, 0x0A	; 10
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
     198:	7c 8f       	std	Y+28, r23	; 0x1c
     19a:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// Variable assigned its reference value
	if (currentEsc<2780)
     19c:	2c ed       	ldi	r18, 0xDC	; 220
     19e:	c2 16       	cp	r12, r18
     1a0:	2a e0       	ldi	r18, 0x0A	; 10
     1a2:	d2 06       	cpc	r13, r18
     1a4:	2c f4       	brge	.+10     	; 0x1b0 <FLC_speed+0xc4>
	{
		esc.value = 2780;
     1a6:	8c ed       	ldi	r24, 0xDC	; 220
     1a8:	9a e0       	ldi	r25, 0x0A	; 10
     1aa:	9c a7       	std	Y+44, r25	; 0x2c
     1ac:	8b a7       	std	Y+43, r24	; 0x2b
     1ae:	0c c0       	rjmp	.+24     	; 0x1c8 <FLC_speed+0xdc>
	}
	else if (currentEsc>MAXESC)
     1b0:	43 e2       	ldi	r20, 0x23	; 35
     1b2:	c4 16       	cp	r12, r20
     1b4:	4b e0       	ldi	r20, 0x0B	; 11
     1b6:	d4 06       	cpc	r13, r20
     1b8:	2c f0       	brlt	.+10     	; 0x1c4 <FLC_speed+0xd8>
	{
		esc.value = MAXESC;
     1ba:	82 e2       	ldi	r24, 0x22	; 34
     1bc:	9b e0       	ldi	r25, 0x0B	; 11
     1be:	9c a7       	std	Y+44, r25	; 0x2c
     1c0:	8b a7       	std	Y+43, r24	; 0x2b
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <FLC_speed+0xdc>
	}
	else
	{
		esc.value = currentEsc;
     1c4:	dc a6       	std	Y+44, r13	; 0x2c
     1c6:	cb a6       	std	Y+43, r12	; 0x2b
	}

	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     1c8:	ff 20       	and	r15, r15
     1ca:	1c f4       	brge	.+6      	; 0x1d2 <FLC_speed+0xe6>
	{
		distance.value = MIN_DISTANCE;
     1cc:	1c 86       	std	Y+12, r1	; 0x0c
     1ce:	1b 86       	std	Y+11, r1	; 0x0b
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <FLC_speed+0xfc>
	}
	else if (midSonicRange > MAX_DISTANCE)
     1d2:	6c e4       	ldi	r22, 0x4C	; 76
     1d4:	e6 16       	cp	r14, r22
     1d6:	f1 04       	cpc	r15, r1
     1d8:	2c f0       	brlt	.+10     	; 0x1e4 <FLC_speed+0xf8>
	{
		distance.value = MAX_DISTANCE;
     1da:	8b e4       	ldi	r24, 0x4B	; 75
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9c 87       	std	Y+12, r25	; 0x0c
     1e0:	8b 87       	std	Y+11, r24	; 0x0b
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <FLC_speed+0xfc>
	}
	else
	{
		distance.value = midSonicRange;
     1e4:	fc 86       	std	Y+12, r15	; 0x0c
     1e6:	eb 86       	std	Y+11, r14	; 0x0b
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type maxLeft;
	MATLAB_MF(&maxLeft, "maxLeft", 201, 202, 205, 230);
     1e8:	0f 2e       	mov	r0, r31
     1ea:	f6 ee       	ldi	r31, 0xE6	; 230
     1ec:	ef 2e       	mov	r14, r31
     1ee:	f1 2c       	mov	r15, r1
     1f0:	f0 2d       	mov	r31, r0
     1f2:	0d ec       	ldi	r16, 0xCD	; 205
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	2a ec       	ldi	r18, 0xCA	; 202
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	49 ec       	ldi	r20, 0xC9	; 201
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	68 e1       	ldi	r22, 0x18	; 24
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	ce 01       	movw	r24, r28
     204:	8f 5b       	subi	r24, 0xBF	; 191
     206:	9f 4f       	sbci	r25, 0xFF	; 255
     208:	8a d6       	rcall	.+3348   	; 0xf1e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 205, 230, 237, 262);
     20a:	0f 2e       	mov	r0, r31
     20c:	f6 e0       	ldi	r31, 0x06	; 6
     20e:	ef 2e       	mov	r14, r31
     210:	ff 24       	eor	r15, r15
     212:	f3 94       	inc	r15
     214:	f0 2d       	mov	r31, r0
     216:	0d ee       	ldi	r16, 0xED	; 237
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	26 ee       	ldi	r18, 0xE6	; 230
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	4d ec       	ldi	r20, 0xCD	; 205
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	60 e2       	ldi	r22, 0x20	; 32
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	ce 01       	movw	r24, r28
     228:	89 5a       	subi	r24, 0xA9	; 169
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	78 d6       	rcall	.+3312   	; 0xf1e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 236, 266, 266, 296);
     22e:	0f 2e       	mov	r0, r31
     230:	f8 e2       	ldi	r31, 0x28	; 40
     232:	ef 2e       	mov	r14, r31
     234:	ff 24       	eor	r15, r15
     236:	f3 94       	inc	r15
     238:	f0 2d       	mov	r31, r0
     23a:	0a e0       	ldi	r16, 0x0A	; 10
     23c:	11 e0       	ldi	r17, 0x01	; 1
     23e:	2a e0       	ldi	r18, 0x0A	; 10
     240:	31 e0       	ldi	r19, 0x01	; 1
     242:	4c ee       	ldi	r20, 0xEC	; 236
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	65 e2       	ldi	r22, 0x25	; 37
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	ce 01       	movw	r24, r28
     24c:	83 59       	subi	r24, 0x93	; 147
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	66 d6       	rcall	.+3276   	; 0xf1e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 267, 295, 302, 325);
     252:	0f 2e       	mov	r0, r31
     254:	f5 e4       	ldi	r31, 0x45	; 69
     256:	ef 2e       	mov	r14, r31
     258:	ff 24       	eor	r15, r15
     25a:	f3 94       	inc	r15
     25c:	f0 2d       	mov	r31, r0
     25e:	0e e2       	ldi	r16, 0x2E	; 46
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	27 e2       	ldi	r18, 0x27	; 39
     264:	31 e0       	ldi	r19, 0x01	; 1
     266:	4b e0       	ldi	r20, 0x0B	; 11
     268:	51 e0       	ldi	r21, 0x01	; 1
     26a:	6e e2       	ldi	r22, 0x2E	; 46
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	ce 01       	movw	r24, r28
     270:	8d 57       	subi	r24, 0x7D	; 125
     272:	9f 4f       	sbci	r25, 0xFF	; 255
     274:	54 d6       	rcall	.+3240   	; 0xf1e <MATLAB_MF>
	struct mf_type maxRight;
	MATLAB_MF(&maxRight, "maxRight", 301, 325, 330, 331);
     276:	0f 2e       	mov	r0, r31
     278:	fb e4       	ldi	r31, 0x4B	; 75
     27a:	ef 2e       	mov	r14, r31
     27c:	ff 24       	eor	r15, r15
     27e:	f3 94       	inc	r15
     280:	f0 2d       	mov	r31, r0
     282:	0a e4       	ldi	r16, 0x4A	; 74
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	25 e4       	ldi	r18, 0x45	; 69
     288:	31 e0       	ldi	r19, 0x01	; 1
     28a:	4d e2       	ldi	r20, 0x2D	; 45
     28c:	51 e0       	ldi	r21, 0x01	; 1
     28e:	64 e3       	ldi	r22, 0x34	; 52
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	ce 01       	movw	r24, r28
     294:	87 56       	subi	r24, 0x67	; 103
     296:	9f 4f       	sbci	r25, 0xFF	; 255
     298:	42 d6       	rcall	.+3204   	; 0xf1e <MATLAB_MF>
	

	// Linked list for MFs
	steering.membership_functions = &maxLeft;
     29a:	81 e4       	ldi	r24, 0x41	; 65
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	8c 0f       	add	r24, r28
     2a0:	9d 1f       	adc	r25, r29
     2a2:	9e 8f       	std	Y+30, r25	; 0x1e
     2a4:	8d 8f       	std	Y+29, r24	; 0x1d
	maxLeft.next = &left;
     2a6:	a7 e5       	ldi	r26, 0x57	; 87
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	ac 0f       	add	r26, r28
     2ac:	bd 1f       	adc	r27, r29
     2ae:	67 96       	adiw	r28, 0x17	; 23
     2b0:	bf af       	std	Y+63, r27	; 0x3f
     2b2:	ae af       	std	Y+62, r26	; 0x3e
     2b4:	67 97       	sbiw	r28, 0x17	; 23
	left.next = &straight;
     2b6:	ed e6       	ldi	r30, 0x6D	; 109
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	ec 0f       	add	r30, r28
     2bc:	fd 1f       	adc	r31, r29
     2be:	ad 96       	adiw	r28, 0x2d	; 45
     2c0:	ff af       	std	Y+63, r31	; 0x3f
     2c2:	ee af       	std	Y+62, r30	; 0x3e
     2c4:	ad 97       	sbiw	r28, 0x2d	; 45
	straight.next = &right;
     2c6:	03 e8       	ldi	r16, 0x83	; 131
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	0c 0f       	add	r16, r28
     2cc:	1d 1f       	adc	r17, r29
     2ce:	cf 57       	subi	r28, 0x7F	; 127
     2d0:	df 4f       	sbci	r29, 0xFF	; 255
     2d2:	19 83       	std	Y+1, r17	; 0x01
     2d4:	08 83       	st	Y, r16
     2d6:	c1 58       	subi	r28, 0x81	; 129
     2d8:	d0 40       	sbci	r29, 0x00	; 0
	right.next = & maxRight;
     2da:	89 e9       	ldi	r24, 0x99	; 153
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 0f       	add	r24, r28
     2e0:	9d 1f       	adc	r25, r29
     2e2:	c9 56       	subi	r28, 0x69	; 105
     2e4:	df 4f       	sbci	r29, 0xFF	; 255
     2e6:	99 83       	std	Y+1, r25	; 0x01
     2e8:	88 83       	st	Y, r24
     2ea:	c7 59       	subi	r28, 0x97	; 151
     2ec:	d0 40       	sbci	r29, 0x00	; 0
	maxRight.next = NULL;
     2ee:	c3 55       	subi	r28, 0x53	; 83
     2f0:	df 4f       	sbci	r29, 0xFF	; 255
     2f2:	19 82       	std	Y+1, r1	; 0x01
     2f4:	18 82       	st	Y, r1
     2f6:	cd 5a       	subi	r28, 0xAD	; 173
     2f8:	d0 40       	sbci	r29, 0x00	; 0
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////

	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 10, 20);
     2fa:	0f 2e       	mov	r0, r31
     2fc:	f4 e1       	ldi	r31, 0x14	; 20
     2fe:	ef 2e       	mov	r14, r31
     300:	f1 2c       	mov	r15, r1
     302:	f0 2d       	mov	r31, r0
     304:	0a e0       	ldi	r16, 0x0A	; 10
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4f ef       	ldi	r20, 0xFF	; 255
     30e:	5f ef       	ldi	r21, 0xFF	; 255
     310:	6d e3       	ldi	r22, 0x3D	; 61
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	46 96       	adiw	r24, 0x16	; 22
     316:	03 d6       	rcall	.+3078   	; 0xf1e <MATLAB_MF>
	struct mf_type close;
	MATLAB_MF(&close, "close", 10, 30, 30, 50);
     318:	5e 01       	movw	r10, r28
     31a:	95 ec       	ldi	r25, 0xC5	; 197
     31c:	a9 0e       	add	r10, r25
     31e:	b1 1c       	adc	r11, r1
     320:	0f 2e       	mov	r0, r31
     322:	f2 e3       	ldi	r31, 0x32	; 50
     324:	ef 2e       	mov	r14, r31
     326:	f1 2c       	mov	r15, r1
     328:	f0 2d       	mov	r31, r0
     32a:	0e e1       	ldi	r16, 0x1E	; 30
     32c:	10 e0       	ldi	r17, 0x00	; 0
     32e:	2e e1       	ldi	r18, 0x1E	; 30
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	4a e0       	ldi	r20, 0x0A	; 10
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	66 e4       	ldi	r22, 0x46	; 70
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	f0 d5       	rcall	.+3040   	; 0xf1e <MATLAB_MF>
	struct mf_type distant;
	MATLAB_MF(&distant, "distant", 30, 50, 50, 70);
     33e:	0f 2e       	mov	r0, r31
     340:	f6 e4       	ldi	r31, 0x46	; 70
     342:	ef 2e       	mov	r14, r31
     344:	f1 2c       	mov	r15, r1
     346:	f0 2d       	mov	r31, r0
     348:	02 e3       	ldi	r16, 0x32	; 50
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	22 e3       	ldi	r18, 0x32	; 50
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	4e e1       	ldi	r20, 0x1E	; 30
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	6c e4       	ldi	r22, 0x4C	; 76
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	ce 01       	movw	r24, r28
     35a:	85 52       	subi	r24, 0x25	; 37
     35c:	9f 4f       	sbci	r25, 0xFF	; 255
     35e:	df d5       	rcall	.+3006   	; 0xf1e <MATLAB_MF>
	struct mf_type faar;
	MATLAB_MF(&faar, "faar", 50, 70, 75, MAX_DISTANCE+1);
     360:	0f 2e       	mov	r0, r31
     362:	fc e4       	ldi	r31, 0x4C	; 76
     364:	ef 2e       	mov	r14, r31
     366:	f1 2c       	mov	r15, r1
     368:	f0 2d       	mov	r31, r0
     36a:	0b e4       	ldi	r16, 0x4B	; 75
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	26 e4       	ldi	r18, 0x46	; 70
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	42 e3       	ldi	r20, 0x32	; 50
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	64 e5       	ldi	r22, 0x54	; 84
     378:	71 e0       	ldi	r23, 0x01	; 1
     37a:	ce 01       	movw	r24, r28
     37c:	8f 50       	subi	r24, 0x0F	; 15
     37e:	9f 4f       	sbci	r25, 0xFF	; 255
     380:	ce d5       	rcall	.+2972   	; 0xf1e <MATLAB_MF>


	// Linked list for MFs
	distance.membership_functions = &stopDist;
     382:	af ea       	ldi	r26, 0xAF	; 175
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	ac 0f       	add	r26, r28
     388:	bd 1f       	adc	r27, r29
     38a:	be 87       	std	Y+14, r27	; 0x0e
     38c:	ad 87       	std	Y+13, r26	; 0x0d
	stopDist.next = &close;
     38e:	cd 53       	subi	r28, 0x3D	; 61
     390:	df 4f       	sbci	r29, 0xFF	; 255
     392:	b9 82       	std	Y+1, r11	; 0x01
     394:	a8 82       	st	Y, r10
     396:	c3 5c       	subi	r28, 0xC3	; 195
     398:	d0 40       	sbci	r29, 0x00	; 0
	close.next = &distant;
     39a:	0b ed       	ldi	r16, 0xDB	; 219
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	0c 0f       	add	r16, r28
     3a0:	1d 1f       	adc	r17, r29
     3a2:	f5 01       	movw	r30, r10
     3a4:	15 8b       	std	Z+21, r17	; 0x15
     3a6:	04 8b       	std	Z+20, r16	; 0x14
	distant.next = &faar;
     3a8:	81 ef       	ldi	r24, 0xF1	; 241
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	8c 0f       	add	r24, r28
     3ae:	9d 1f       	adc	r25, r29
     3b0:	c1 51       	subi	r28, 0x11	; 17
     3b2:	df 4f       	sbci	r29, 0xFF	; 255
     3b4:	99 83       	std	Y+1, r25	; 0x01
     3b6:	88 83       	st	Y, r24
     3b8:	cf 5e       	subi	r28, 0xEF	; 239
     3ba:	d0 40       	sbci	r29, 0x00	; 0
	faar.next = NULL;
     3bc:	cb 5f       	subi	r28, 0xFB	; 251
     3be:	de 4f       	sbci	r29, 0xFE	; 254
     3c0:	19 82       	std	Y+1, r1	; 0x01
     3c2:	18 82       	st	Y, r1
     3c4:	c5 50       	subi	r28, 0x05	; 5
     3c6:	d1 40       	sbci	r29, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type neutral;
	MATLAB_MF(&neutral, "neutral", 2779, 2780, 2800, 2830);
     3c8:	0f 2e       	mov	r0, r31
     3ca:	fe e0       	ldi	r31, 0x0E	; 14
     3cc:	ef 2e       	mov	r14, r31
     3ce:	fb e0       	ldi	r31, 0x0B	; 11
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	00 ef       	ldi	r16, 0xF0	; 240
     3d6:	1a e0       	ldi	r17, 0x0A	; 10
     3d8:	2c ed       	ldi	r18, 0xDC	; 220
     3da:	3a e0       	ldi	r19, 0x0A	; 10
     3dc:	4b ed       	ldi	r20, 0xDB	; 219
     3de:	5a e0       	ldi	r21, 0x0A	; 10
     3e0:	69 e5       	ldi	r22, 0x59	; 89
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	46 96       	adiw	r24, 0x16	; 22
     3e6:	9b d5       	rcall	.+2870   	; 0xf1e <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2825, 2835, 2835, 2845);
     3e8:	0f 2e       	mov	r0, r31
     3ea:	fd e1       	ldi	r31, 0x1D	; 29
     3ec:	ef 2e       	mov	r14, r31
     3ee:	fb e0       	ldi	r31, 0x0B	; 11
     3f0:	ff 2e       	mov	r15, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	03 e1       	ldi	r16, 0x13	; 19
     3f6:	1b e0       	ldi	r17, 0x0B	; 11
     3f8:	23 e1       	ldi	r18, 0x13	; 19
     3fa:	3b e0       	ldi	r19, 0x0B	; 11
     3fc:	49 e0       	ldi	r20, 0x09	; 9
     3fe:	5b e0       	ldi	r21, 0x0B	; 11
     400:	63 e7       	ldi	r22, 0x73	; 115
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	ce 01       	movw	r24, r28
     406:	83 5e       	subi	r24, 0xE3	; 227
     408:	9e 4f       	sbci	r25, 0xFE	; 254
     40a:	89 d5       	rcall	.+2834   	; 0xf1e <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2830, 2840, 2840, 2850);
     40c:	0f 2e       	mov	r0, r31
     40e:	f2 e2       	ldi	r31, 0x22	; 34
     410:	ef 2e       	mov	r14, r31
     412:	fb e0       	ldi	r31, 0x0B	; 11
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	08 e1       	ldi	r16, 0x18	; 24
     41a:	1b e0       	ldi	r17, 0x0B	; 11
     41c:	28 e1       	ldi	r18, 0x18	; 24
     41e:	3b e0       	ldi	r19, 0x0B	; 11
     420:	4e e0       	ldi	r20, 0x0E	; 14
     422:	5b e0       	ldi	r21, 0x0B	; 11
     424:	61 e6       	ldi	r22, 0x61	; 97
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	8d 5c       	subi	r24, 0xCD	; 205
     42c:	9e 4f       	sbci	r25, 0xFE	; 254
     42e:	77 d5       	rcall	.+2798   	; 0xf1e <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2835, 2845, 2845, 2855);
     430:	0f 2e       	mov	r0, r31
     432:	f7 e2       	ldi	r31, 0x27	; 39
     434:	ef 2e       	mov	r14, r31
     436:	fb e0       	ldi	r31, 0x0B	; 11
     438:	ff 2e       	mov	r15, r31
     43a:	f0 2d       	mov	r31, r0
     43c:	0d e1       	ldi	r16, 0x1D	; 29
     43e:	1b e0       	ldi	r17, 0x0B	; 11
     440:	2d e1       	ldi	r18, 0x1D	; 29
     442:	3b e0       	ldi	r19, 0x0B	; 11
     444:	43 e1       	ldi	r20, 0x13	; 19
     446:	5b e0       	ldi	r21, 0x0B	; 11
     448:	68 e6       	ldi	r22, 0x68	; 104
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	ce 01       	movw	r24, r28
     44e:	87 5b       	subi	r24, 0xB7	; 183
     450:	9e 4f       	sbci	r25, 0xFE	; 254
     452:	65 d5       	rcall	.+2762   	; 0xf1e <MATLAB_MF>

	// Linked list for MFs
	esc.membership_functions = &neutral;
     454:	a7 e0       	ldi	r26, 0x07	; 7
     456:	b1 e0       	ldi	r27, 0x01	; 1
     458:	ac 0f       	add	r26, r28
     45a:	bd 1f       	adc	r27, r29
     45c:	be a7       	std	Y+46, r27	; 0x2e
     45e:	ad a7       	std	Y+45, r26	; 0x2d
	neutral.next = &low;
     460:	ed e1       	ldi	r30, 0x1D	; 29
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	ec 0f       	add	r30, r28
     466:	fd 1f       	adc	r31, r29
     468:	c5 5e       	subi	r28, 0xE5	; 229
     46a:	de 4f       	sbci	r29, 0xFE	; 254
     46c:	f9 83       	std	Y+1, r31	; 0x01
     46e:	e8 83       	st	Y, r30
     470:	cb 51       	subi	r28, 0x1B	; 27
     472:	d1 40       	sbci	r29, 0x01	; 1
	low.next = &medium;
     474:	03 e3       	ldi	r16, 0x33	; 51
     476:	11 e0       	ldi	r17, 0x01	; 1
     478:	0c 0f       	add	r16, r28
     47a:	1d 1f       	adc	r17, r29
     47c:	cf 5c       	subi	r28, 0xCF	; 207
     47e:	de 4f       	sbci	r29, 0xFE	; 254
     480:	19 83       	std	Y+1, r17	; 0x01
     482:	08 83       	st	Y, r16
     484:	c1 53       	subi	r28, 0x31	; 49
     486:	d1 40       	sbci	r29, 0x01	; 1
	medium.next = &high;
     488:	89 e4       	ldi	r24, 0x49	; 73
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	8c 0f       	add	r24, r28
     48e:	9d 1f       	adc	r25, r29
     490:	c9 5b       	subi	r28, 0xB9	; 185
     492:	de 4f       	sbci	r29, 0xFE	; 254
     494:	99 83       	std	Y+1, r25	; 0x01
     496:	88 83       	st	Y, r24
     498:	c7 54       	subi	r28, 0x47	; 71
     49a:	d1 40       	sbci	r29, 0x01	; 1
	high.next = NULL;
     49c:	c3 5a       	subi	r28, 0xA3	; 163
     49e:	de 4f       	sbci	r29, 0xFE	; 254
     4a0:	19 82       	std	Y+1, r1	; 0x01
     4a2:	18 82       	st	Y, r1
     4a4:	cd 55       	subi	r28, 0x5D	; 93
     4a6:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     4a8:	a1 e0       	ldi	r26, 0x01	; 1
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	ac 0f       	add	r26, r28
     4ae:	bd 1f       	adc	r27, r29
     4b0:	b0 93 1b 03 	sts	0x031B, r27
     4b4:	a0 93 1a 03 	sts	0x031A, r26
	distance.next = &steering;
     4b8:	4e 01       	movw	r8, r28
     4ba:	b1 e1       	ldi	r27, 0x11	; 17
     4bc:	8b 0e       	add	r8, r27
     4be:	91 1c       	adc	r9, r1
     4c0:	98 8a       	std	Y+16, r9	; 0x10
     4c2:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     4c4:	3e 01       	movw	r6, r28
     4c6:	e1 e2       	ldi	r30, 0x21	; 33
     4c8:	6e 0e       	add	r6, r30
     4ca:	71 1c       	adc	r7, r1
     4cc:	78 a2       	std	Y+32, r7	; 0x20
     4ce:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     4d0:	18 aa       	std	Y+48, r1	; 0x30
     4d2:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     4d4:	6e 01       	movw	r12, r28
     4d6:	f1 e3       	ldi	r31, 0x31	; 49
     4d8:	cf 0e       	add	r12, r31
     4da:	d1 1c       	adc	r13, r1
     4dc:	d0 92 19 03 	sts	0x0319, r13
     4e0:	c0 92 18 03 	sts	0x0318, r12
	speed.next = NULL;
     4e4:	21 96       	adiw	r28, 0x01	; 1
     4e6:	1f ae       	std	Y+63, r1	; 0x3f
     4e8:	1e ae       	std	Y+62, r1	; 0x3e
     4ea:	21 97       	sbiw	r28, 0x01	; 1
	//////////////////////////////////////////////////////////////////////////////


	// Set MFs
	struct mf_type zero;
	MATLAB_MF(&zero, "zero", 2779-fullBatteryAdjust, 2780-fullBatteryAdjust, 2802-fullBatteryAdjust, 2830-fullBatteryAdjust);
     4ec:	2e 01       	movw	r4, r28
     4ee:	01 ea       	ldi	r16, 0xA1	; 161
     4f0:	40 1a       	sub	r4, r16
     4f2:	0e ef       	ldi	r16, 0xFE	; 254
     4f4:	50 0a       	sbc	r5, r16
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f4 e0       	ldi	r31, 0x04	; 4
     4fa:	ef 2e       	mov	r14, r31
     4fc:	fb e0       	ldi	r31, 0x0B	; 11
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
     502:	08 ee       	ldi	r16, 0xE8	; 232
     504:	1a e0       	ldi	r17, 0x0A	; 10
     506:	22 ed       	ldi	r18, 0xD2	; 210
     508:	3a e0       	ldi	r19, 0x0A	; 10
     50a:	41 ed       	ldi	r20, 0xD1	; 209
     50c:	5a e0       	ldi	r21, 0x0A	; 10
     50e:	6d e6       	ldi	r22, 0x6D	; 109
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	c2 01       	movw	r24, r4
     514:	04 d5       	rcall	.+2568   	; 0xf1e <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2825-fullBatteryAdjust, 2835-fullBatteryAdjust, 2835-fullBatteryAdjust, 2845-fullBatteryAdjust);
     516:	1e 01       	movw	r2, r28
     518:	1b e8       	ldi	r17, 0x8B	; 139
     51a:	21 1a       	sub	r2, r17
     51c:	1e ef       	ldi	r17, 0xFE	; 254
     51e:	31 0a       	sbc	r3, r17
     520:	0f 2e       	mov	r0, r31
     522:	f3 e1       	ldi	r31, 0x13	; 19
     524:	ef 2e       	mov	r14, r31
     526:	fb e0       	ldi	r31, 0x0B	; 11
     528:	ff 2e       	mov	r15, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	09 e0       	ldi	r16, 0x09	; 9
     52e:	1b e0       	ldi	r17, 0x0B	; 11
     530:	29 e0       	ldi	r18, 0x09	; 9
     532:	3b e0       	ldi	r19, 0x0B	; 11
     534:	4f ef       	ldi	r20, 0xFF	; 255
     536:	5a e0       	ldi	r21, 0x0A	; 10
     538:	62 e7       	ldi	r22, 0x72	; 114
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	c1 01       	movw	r24, r2
     53e:	ef d4       	rcall	.+2526   	; 0xf1e <MATLAB_MF>
	struct mf_type average;
	MATLAB_MF(&average, "average", 2828-fullBatteryAdjust, 2838-fullBatteryAdjust, 2838-fullBatteryAdjust, 2848-fullBatteryAdjust);
     540:	0f 2e       	mov	r0, r31
     542:	f6 e1       	ldi	r31, 0x16	; 22
     544:	ef 2e       	mov	r14, r31
     546:	fb e0       	ldi	r31, 0x0B	; 11
     548:	ff 2e       	mov	r15, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	0c e0       	ldi	r16, 0x0C	; 12
     54e:	1b e0       	ldi	r17, 0x0B	; 11
     550:	2c e0       	ldi	r18, 0x0C	; 12
     552:	3b e0       	ldi	r19, 0x0B	; 11
     554:	42 e0       	ldi	r20, 0x02	; 2
     556:	5b e0       	ldi	r21, 0x0B	; 11
     558:	67 e7       	ldi	r22, 0x77	; 119
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	ce 01       	movw	r24, r28
     55e:	85 57       	subi	r24, 0x75	; 117
     560:	9e 4f       	sbci	r25, 0xFE	; 254
     562:	dd d4       	rcall	.+2490   	; 0xf1e <MATLAB_MF>
	struct mf_type fast;
	MATLAB_MF(&fast, "fast", 2830-fullBatteryAdjust, 2840-fullBatteryAdjust, 2840-fullBatteryAdjust, 2850-fullBatteryAdjust);
     564:	0f 2e       	mov	r0, r31
     566:	f8 e1       	ldi	r31, 0x18	; 24
     568:	ef 2e       	mov	r14, r31
     56a:	fb e0       	ldi	r31, 0x0B	; 11
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	0e e0       	ldi	r16, 0x0E	; 14
     572:	1b e0       	ldi	r17, 0x0B	; 11
     574:	2e e0       	ldi	r18, 0x0E	; 14
     576:	3b e0       	ldi	r19, 0x0B	; 11
     578:	44 e0       	ldi	r20, 0x04	; 4
     57a:	5b e0       	ldi	r21, 0x0B	; 11
     57c:	6f e7       	ldi	r22, 0x7F	; 127
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	ce 01       	movw	r24, r28
     582:	8f 55       	subi	r24, 0x5F	; 95
     584:	9e 4f       	sbci	r25, 0xFE	; 254
     586:	cb d4       	rcall	.+2454   	; 0xf1e <MATLAB_MF>

	// Linked list for MFs
	speed.membership_functions = &zero;
     588:	5e ae       	std	Y+62, r5	; 0x3e
     58a:	4d ae       	std	Y+61, r4	; 0x3d
	zero.next = &slow;
     58c:	d2 01       	movw	r26, r4
     58e:	55 96       	adiw	r26, 0x15	; 21
     590:	3c 92       	st	X, r3
     592:	2e 92       	st	-X, r2
     594:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &average;
     596:	0b e8       	ldi	r16, 0x8B	; 139
     598:	11 e0       	ldi	r17, 0x01	; 1
     59a:	0c 0f       	add	r16, r28
     59c:	1d 1f       	adc	r17, r29
     59e:	f1 01       	movw	r30, r2
     5a0:	15 8b       	std	Z+21, r17	; 0x15
     5a2:	04 8b       	std	Z+20, r16	; 0x14
	average.next = &fast;
     5a4:	81 ea       	ldi	r24, 0xA1	; 161
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	8c 0f       	add	r24, r28
     5aa:	9d 1f       	adc	r25, r29
     5ac:	c1 56       	subi	r28, 0x61	; 97
     5ae:	de 4f       	sbci	r29, 0xFE	; 254
     5b0:	99 83       	std	Y+1, r25	; 0x01
     5b2:	88 83       	st	Y, r24
     5b4:	cf 59       	subi	r28, 0x9F	; 159
     5b6:	d1 40       	sbci	r29, 0x01	; 1
	fast.next = NULL;
     5b8:	cb 54       	subi	r28, 0x4B	; 75
     5ba:	de 4f       	sbci	r29, 0xFE	; 254
     5bc:	19 82       	std	Y+1, r1	; 0x01
     5be:	18 82       	st	Y, r1
     5c0:	c5 5b       	subi	r28, 0xB5	; 181
     5c2:	d1 40       	sbci	r29, 0x01	; 1


	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////

	System_Inputs = &distance;
     5c4:	a1 e0       	ldi	r26, 0x01	; 1
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	ac 0f       	add	r26, r28
     5ca:	bd 1f       	adc	r27, r29
     5cc:	b0 93 1b 03 	sts	0x031B, r27
     5d0:	a0 93 1a 03 	sts	0x031A, r26
	distance.next = &steering;
     5d4:	98 8a       	std	Y+16, r9	; 0x10
     5d6:	8f 86       	std	Y+15, r8	; 0x0f
	steering.next = &esc;
     5d8:	78 a2       	std	Y+32, r7	; 0x20
     5da:	6f 8e       	std	Y+31, r6	; 0x1f
	esc.next = NULL;
     5dc:	18 aa       	std	Y+48, r1	; 0x30
     5de:	1f a6       	std	Y+47, r1	; 0x2f

	System_Outputs = &speed;
     5e0:	d0 92 19 03 	sts	0x0319, r13
     5e4:	c0 92 18 03 	sts	0x0318, r12
	speed.next = NULL;
     5e8:	21 96       	adiw	r28, 0x01	; 1
     5ea:	1f ae       	std	Y+63, r1	; 0x3f
     5ec:	1e ae       	std	Y+62, r1	; 0x3e
     5ee:	21 97       	sbiw	r28, 0x01	; 1


	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////

	struct rule_type rule1; Rule_Base = &rule1;
     5f0:	be 01       	movw	r22, r28
     5f2:	69 54       	subi	r22, 0x49	; 73
     5f4:	7e 4f       	sbci	r23, 0xFE	; 254
     5f6:	70 93 1d 03 	sts	0x031D, r23
     5fa:	60 93 1c 03 	sts	0x031C, r22
	struct rule_type rule2; rule1.next = &rule2;
     5fe:	ae 01       	movw	r20, r28
     600:	43 54       	subi	r20, 0x43	; 67
     602:	5e 4f       	sbci	r21, 0xFE	; 254
     604:	fb 01       	movw	r30, r22
     606:	55 83       	std	Z+5, r21	; 0x05
     608:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
     60a:	82 96       	adiw	r24, 0x22	; 34
     60c:	da 01       	movw	r26, r20
     60e:	15 96       	adiw	r26, 0x05	; 5
     610:	9c 93       	st	X, r25
     612:	8e 93       	st	-X, r24
     614:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule4; rule3.next = &rule4;
     616:	9e 01       	movw	r18, r28
     618:	27 53       	subi	r18, 0x37	; 55
     61a:	3e 4f       	sbci	r19, 0xFE	; 254
     61c:	fc 01       	movw	r30, r24
     61e:	35 83       	std	Z+5, r19	; 0x05
     620:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5; 
     622:	52 96       	adiw	r26, 0x12	; 18
     624:	f9 01       	movw	r30, r18
     626:	b5 83       	std	Z+5, r27	; 0x05
     628:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
     62a:	05 ed       	ldi	r16, 0xD5	; 213
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	0c 0f       	add	r16, r28
     630:	1d 1f       	adc	r17, r29
     632:	15 96       	adiw	r26, 0x05	; 5
     634:	1c 93       	st	X, r17
     636:	0e 93       	st	-X, r16
     638:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule7; rule6.next = &rule7;
     63a:	6e 01       	movw	r12, r28
     63c:	15 e2       	ldi	r17, 0x25	; 37
     63e:	c1 1a       	sub	r12, r17
     640:	1e ef       	ldi	r17, 0xFE	; 254
     642:	d1 0a       	sbc	r13, r17
     644:	c7 52       	subi	r28, 0x27	; 39
     646:	de 4f       	sbci	r29, 0xFE	; 254
     648:	d9 82       	std	Y+1, r13	; 0x01
     64a:	c8 82       	st	Y, r12
     64c:	c9 5d       	subi	r28, 0xD9	; 217
     64e:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule8; rule7.next = &rule8;
     650:	4e 01       	movw	r8, r28
     652:	ef e1       	ldi	r30, 0x1F	; 31
     654:	8e 1a       	sub	r8, r30
     656:	ee ef       	ldi	r30, 0xFE	; 254
     658:	9e 0a       	sbc	r9, r30
     65a:	f6 01       	movw	r30, r12
     65c:	95 82       	std	Z+5, r9	; 0x05
     65e:	84 82       	std	Z+4, r8	; 0x04
	struct rule_type rule9; rule8.next = &rule9;
     660:	3e 01       	movw	r6, r28
     662:	f9 e1       	ldi	r31, 0x19	; 25
     664:	6f 1a       	sub	r6, r31
     666:	fe ef       	ldi	r31, 0xFE	; 254
     668:	7f 0a       	sbc	r7, r31
     66a:	f4 01       	movw	r30, r8
     66c:	75 82       	std	Z+5, r7	; 0x05
     66e:	64 82       	std	Z+4, r6	; 0x04
	struct rule_type rule10; rule9.next = &rule10;
     670:	0d ee       	ldi	r16, 0xED	; 237
     672:	11 e0       	ldi	r17, 0x01	; 1
     674:	0c 0f       	add	r16, r28
     676:	1d 1f       	adc	r17, r29
     678:	f3 01       	movw	r30, r6
     67a:	15 83       	std	Z+5, r17	; 0x05
     67c:	04 83       	std	Z+4, r16	; 0x04
	struct rule_type rule11; rule10.next = &rule11;
     67e:	e3 ef       	ldi	r30, 0xF3	; 243
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	cf 50       	subi	r28, 0x0F	; 15
     688:	de 4f       	sbci	r29, 0xFE	; 254
     68a:	f9 83       	std	Y+1, r31	; 0x01
     68c:	e8 83       	st	Y, r30
     68e:	c1 5f       	subi	r28, 0xF1	; 241
     690:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12;
     692:	09 ef       	ldi	r16, 0xF9	; 249
     694:	11 e0       	ldi	r17, 0x01	; 1
     696:	0c 0f       	add	r16, r28
     698:	1d 1f       	adc	r17, r29
     69a:	c9 50       	subi	r28, 0x09	; 9
     69c:	de 4f       	sbci	r29, 0xFE	; 254
     69e:	19 83       	std	Y+1, r17	; 0x01
     6a0:	08 83       	st	Y, r16
     6a2:	c7 5f       	subi	r28, 0xF7	; 247
     6a4:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule13; rule12.next = &rule13;
     6a6:	ef ef       	ldi	r30, 0xFF	; 255
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	c3 50       	subi	r28, 0x03	; 3
     6b0:	de 4f       	sbci	r29, 0xFE	; 254
     6b2:	f9 83       	std	Y+1, r31	; 0x01
     6b4:	e8 83       	st	Y, r30
     6b6:	cd 5f       	subi	r28, 0xFD	; 253
     6b8:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule14; rule13.next = &rule14;
     6ba:	05 e0       	ldi	r16, 0x05	; 5
     6bc:	12 e0       	ldi	r17, 0x02	; 2
     6be:	0c 0f       	add	r16, r28
     6c0:	1d 1f       	adc	r17, r29
     6c2:	cd 5f       	subi	r28, 0xFD	; 253
     6c4:	dd 4f       	sbci	r29, 0xFD	; 253
     6c6:	19 83       	std	Y+1, r17	; 0x01
     6c8:	08 83       	st	Y, r16
     6ca:	c3 50       	subi	r28, 0x03	; 3
     6cc:	d2 40       	sbci	r29, 0x02	; 2
	rule14.next = NULL;
     6ce:	c7 5f       	subi	r28, 0xF7	; 247
     6d0:	dd 4f       	sbci	r29, 0xFD	; 253
     6d2:	19 82       	std	Y+1, r1	; 0x01
     6d4:	18 82       	st	Y, r1
     6d6:	c9 50       	subi	r28, 0x09	; 9
     6d8:	d2 40       	sbci	r29, 0x02	; 2
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	// if distance is stopDist then speed is neutral
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     6da:	7e 01       	movw	r14, r28
     6dc:	15 ef       	ldi	r17, 0xF5	; 245
     6de:	e1 1a       	sub	r14, r17
     6e0:	1d ef       	ldi	r17, 0xFD	; 253
     6e2:	f1 0a       	sbc	r15, r17
     6e4:	fb 01       	movw	r30, r22
     6e6:	f1 82       	std	Z+1, r15	; 0x01
     6e8:	e0 82       	st	Z, r14
     6ea:	f7 01       	movw	r30, r14
     6ec:	13 82       	std	Z+3, r1	; 0x03
     6ee:	12 82       	std	Z+2, r1	; 0x02
     6f0:	8e 01       	movw	r16, r28
     6f2:	01 5f       	subi	r16, 0xF1	; 241
     6f4:	1d 4f       	sbci	r17, 0xFD	; 253
     6f6:	fb 01       	movw	r30, r22
     6f8:	13 83       	std	Z+3, r17	; 0x03
     6fa:	02 83       	std	Z+2, r16	; 0x02
     6fc:	f8 01       	movw	r30, r16
     6fe:	13 82       	std	Z+3, r1	; 0x03
     700:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &zero.value;
     702:	6f ea       	ldi	r22, 0xAF	; 175
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	6c 0f       	add	r22, r28
     708:	7d 1f       	adc	r23, r29
     70a:	66 5f       	subi	r22, 0xF6	; 246
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
     70e:	f7 01       	movw	r30, r14
     710:	71 83       	std	Z+1, r23	; 0x01
     712:	60 83       	st	Z, r22
     714:	fa e0       	ldi	r31, 0x0A	; 10
     716:	4f 0e       	add	r4, r31
     718:	51 1c       	adc	r5, r1
     71a:	f8 01       	movw	r30, r16
     71c:	51 82       	std	Z+1, r5	; 0x01
     71e:	40 82       	st	Z, r4

	// if dist is close then speed is slow
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     720:	0c 5f       	subi	r16, 0xFC	; 252
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	fa 01       	movw	r30, r20
     726:	11 83       	std	Z+1, r17	; 0x01
     728:	00 83       	st	Z, r16
     72a:	f8 01       	movw	r30, r16
     72c:	13 82       	std	Z+3, r1	; 0x03
     72e:	12 82       	std	Z+2, r1	; 0x02
     730:	62 5a       	subi	r22, 0xA2	; 162
     732:	7e 4f       	sbci	r23, 0xFE	; 254
     734:	fa 01       	movw	r30, r20
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	62 83       	std	Z+2, r22	; 0x02
     73a:	fb 01       	movw	r30, r22
     73c:	13 82       	std	Z+3, r1	; 0x03
     73e:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &close.value; then2.value = &slow.value;
     740:	4e 5e       	subi	r20, 0xEE	; 238
     742:	51 09       	sbc	r21, r1
     744:	f8 01       	movw	r30, r16
     746:	51 83       	std	Z+1, r21	; 0x01
     748:	40 83       	st	Z, r20
     74a:	51 01       	movw	r10, r2
     74c:	fa e0       	ldi	r31, 0x0A	; 10
     74e:	af 0e       	add	r10, r31
     750:	b1 1c       	adc	r11, r1
     752:	fb 01       	movw	r30, r22
     754:	b1 82       	std	Z+1, r11	; 0x01
     756:	a0 82       	st	Z, r10

	// if dist is faar and steering is right then speed is average
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     758:	08 5f       	subi	r16, 0xF8	; 248
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	fc 01       	movw	r30, r24
     75e:	11 83       	std	Z+1, r17	; 0x01
     760:	00 83       	st	Z, r16
     762:	40 5b       	subi	r20, 0xB0	; 176
     764:	5e 4f       	sbci	r21, 0xFE	; 254
     766:	f8 01       	movw	r30, r16
     768:	53 83       	std	Z+3, r21	; 0x03
     76a:	42 83       	std	Z+2, r20	; 0x02
     76c:	fa 01       	movw	r30, r20
     76e:	13 82       	std	Z+3, r1	; 0x03
     770:	12 82       	std	Z+2, r1	; 0x02
     772:	64 5f       	subi	r22, 0xF4	; 244
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	fc 01       	movw	r30, r24
     778:	73 83       	std	Z+3, r23	; 0x03
     77a:	62 83       	std	Z+2, r22	; 0x02
     77c:	fb 01       	movw	r30, r22
     77e:	13 82       	std	Z+3, r1	; 0x03
     780:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &faar.value; if32.value = &right.value; then3.value = &average.value;
     782:	81 ef       	ldi	r24, 0xF1	; 241
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	8c 0f       	add	r24, r28
     788:	9d 1f       	adc	r25, r29
     78a:	0a 96       	adiw	r24, 0x0a	; 10
     78c:	f8 01       	movw	r30, r16
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	80 83       	st	Z, r24
     792:	03 e8       	ldi	r16, 0x83	; 131
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	0c 0f       	add	r16, r28
     798:	1d 1f       	adc	r17, r29
     79a:	06 5f       	subi	r16, 0xF6	; 246
     79c:	1f 4f       	sbci	r17, 0xFF	; 255
     79e:	fa 01       	movw	r30, r20
     7a0:	11 83       	std	Z+1, r17	; 0x01
     7a2:	00 83       	st	Z, r16
     7a4:	4b e8       	ldi	r20, 0x8B	; 139
     7a6:	51 e0       	ldi	r21, 0x01	; 1
     7a8:	4c 0f       	add	r20, r28
     7aa:	5d 1f       	adc	r21, r29
     7ac:	46 5f       	subi	r20, 0xF6	; 246
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	fb 01       	movw	r30, r22
     7b2:	51 83       	std	Z+1, r21	; 0x01
     7b4:	40 83       	st	Z, r20

	// if dist is faar and steering is left then speed is average
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     7b6:	7e 01       	movw	r14, r28
     7b8:	f9 ed       	ldi	r31, 0xD9	; 217
     7ba:	ef 1a       	sub	r14, r31
     7bc:	fd ef       	ldi	r31, 0xFD	; 253
     7be:	ff 0a       	sbc	r15, r31
     7c0:	f9 01       	movw	r30, r18
     7c2:	f1 82       	std	Z+1, r15	; 0x01
     7c4:	e0 82       	st	Z, r14
     7c6:	02 56       	subi	r16, 0x62	; 98
     7c8:	1e 4f       	sbci	r17, 0xFE	; 254
     7ca:	f7 01       	movw	r30, r14
     7cc:	13 83       	std	Z+3, r17	; 0x03
     7ce:	02 83       	std	Z+2, r16	; 0x02
     7d0:	f8 01       	movw	r30, r16
     7d2:	13 82       	std	Z+3, r1	; 0x03
     7d4:	12 82       	std	Z+2, r1	; 0x02
     7d6:	64 5f       	subi	r22, 0xF4	; 244
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	f9 01       	movw	r30, r18
     7dc:	73 83       	std	Z+3, r23	; 0x03
     7de:	62 83       	std	Z+2, r22	; 0x02
     7e0:	fb 01       	movw	r30, r22
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &faar.value; if42.value = &left.value; then4.value = &average.value;
     7e6:	f7 01       	movw	r30, r14
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	27 e5       	ldi	r18, 0x57	; 87
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	2c 0f       	add	r18, r28
     7f2:	3d 1f       	adc	r19, r29
     7f4:	26 5f       	subi	r18, 0xF6	; 246
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	f8 01       	movw	r30, r16
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
     7fe:	fb 01       	movw	r30, r22
     800:	51 83       	std	Z+1, r21	; 0x01
     802:	40 83       	st	Z, r20

	// if dist is faar and steering is maxRight then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     804:	08 5f       	subi	r16, 0xF8	; 248
     806:	1f 4f       	sbci	r17, 0xFF	; 255
     808:	11 96       	adiw	r26, 0x01	; 1
     80a:	1c 93       	st	X, r17
     80c:	0e 93       	st	-X, r16
     80e:	68 5f       	subi	r22, 0xF8	; 248
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	f8 01       	movw	r30, r16
     814:	73 83       	std	Z+3, r23	; 0x03
     816:	62 83       	std	Z+2, r22	; 0x02
     818:	fb 01       	movw	r30, r22
     81a:	13 82       	std	Z+3, r1	; 0x03
     81c:	12 82       	std	Z+2, r1	; 0x02
     81e:	26 52       	subi	r18, 0x26	; 38
     820:	3e 4f       	sbci	r19, 0xFE	; 254
     822:	13 96       	adiw	r26, 0x03	; 3
     824:	3c 93       	st	X, r19
     826:	2e 93       	st	-X, r18
     828:	12 97       	sbiw	r26, 0x02	; 2
     82a:	d9 01       	movw	r26, r18
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	1c 92       	st	X, r1
     830:	1e 92       	st	-X, r1
     832:	12 97       	sbiw	r26, 0x02	; 2
	if51.value = &faar.value; if52.value = &maxRight.value; then5.value = &slow.value;
     834:	f8 01       	movw	r30, r16
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
     83a:	a9 e9       	ldi	r26, 0x99	; 153
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	ac 0f       	add	r26, r28
     840:	bd 1f       	adc	r27, r29
     842:	1a 96       	adiw	r26, 0x0a	; 10
     844:	fb 01       	movw	r30, r22
     846:	b1 83       	std	Z+1, r27	; 0x01
     848:	a0 83       	st	Z, r26
     84a:	d9 01       	movw	r26, r18
     84c:	ad 92       	st	X+, r10
     84e:	bc 92       	st	X, r11
	
	// if dist is faar and steering is maxLeft then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     850:	68 5f       	subi	r22, 0xF8	; 248
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	cb 52       	subi	r28, 0x2B	; 43
     856:	de 4f       	sbci	r29, 0xFE	; 254
     858:	79 83       	std	Y+1, r23	; 0x01
     85a:	68 83       	st	Y, r22
     85c:	c5 5d       	subi	r28, 0xD5	; 213
     85e:	d1 40       	sbci	r29, 0x01	; 1
     860:	28 5f       	subi	r18, 0xF8	; 248
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	fb 01       	movw	r30, r22
     866:	33 83       	std	Z+3, r19	; 0x03
     868:	22 83       	std	Z+2, r18	; 0x02
     86a:	d9 01       	movw	r26, r18
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	1c 92       	st	X, r1
     870:	1e 92       	st	-X, r1
     872:	12 97       	sbiw	r26, 0x02	; 2
     874:	14 96       	adiw	r26, 0x04	; 4
     876:	c9 52       	subi	r28, 0x29	; 41
     878:	de 4f       	sbci	r29, 0xFE	; 254
     87a:	b9 83       	std	Y+1, r27	; 0x01
     87c:	a8 83       	st	Y, r26
     87e:	c7 5d       	subi	r28, 0xD7	; 215
     880:	d1 40       	sbci	r29, 0x01	; 1
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	1c 92       	st	X, r1
     886:	1e 92       	st	-X, r1
     888:	12 97       	sbiw	r26, 0x02	; 2
	if61.value = &faar.value; if62.value = &maxLeft.value; then6.value = &slow.value;
     88a:	91 83       	std	Z+1, r25	; 0x01
     88c:	80 83       	st	Z, r24
     88e:	61 e4       	ldi	r22, 0x41	; 65
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	6c 0f       	add	r22, r28
     894:	7d 1f       	adc	r23, r29
     896:	66 5f       	subi	r22, 0xF6	; 246
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	f9 01       	movw	r30, r18
     89c:	71 83       	std	Z+1, r23	; 0x01
     89e:	60 83       	st	Z, r22
     8a0:	ad 92       	st	X+, r10
     8a2:	bc 92       	st	X, r11
	
	// if dist is distant and currentEsc is neutral then speed is slow
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     8a4:	7e 5f       	subi	r23, 0xFE	; 254
     8a6:	d6 01       	movw	r26, r12
     8a8:	6d 93       	st	X+, r22
     8aa:	7c 93       	st	X, r23
     8ac:	04 5e       	subi	r16, 0xE4	; 228
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	fb 01       	movw	r30, r22
     8b2:	13 83       	std	Z+3, r17	; 0x03
     8b4:	02 83       	std	Z+2, r16	; 0x02
     8b6:	d8 01       	movw	r26, r16
     8b8:	13 96       	adiw	r26, 0x03	; 3
     8ba:	1c 92       	st	X, r1
     8bc:	1e 92       	st	-X, r1
     8be:	12 97       	sbiw	r26, 0x02	; 2
     8c0:	38 96       	adiw	r30, 0x08	; 8
     8c2:	d6 01       	movw	r26, r12
     8c4:	13 96       	adiw	r26, 0x03	; 3
     8c6:	fc 93       	st	X, r31
     8c8:	ee 93       	st	-X, r30
     8ca:	12 97       	sbiw	r26, 0x02	; 2
     8cc:	13 82       	std	Z+3, r1	; 0x03
     8ce:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &distant.value; if72.value = &neutral.value; then7.value = &slow.value;
     8d0:	2b ed       	ldi	r18, 0xDB	; 219
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	2c 0f       	add	r18, r28
     8d6:	3d 1f       	adc	r19, r29
     8d8:	26 5f       	subi	r18, 0xF6	; 246
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	db 01       	movw	r26, r22
     8de:	2d 93       	st	X+, r18
     8e0:	3c 93       	st	X, r19
     8e2:	0f 2e       	mov	r0, r31
     8e4:	f7 e0       	ldi	r31, 0x07	; 7
     8e6:	cf 2e       	mov	r12, r31
     8e8:	dd 24       	eor	r13, r13
     8ea:	d3 94       	inc	r13
     8ec:	f0 2d       	mov	r31, r0
     8ee:	cc 0e       	add	r12, r28
     8f0:	dd 1e       	adc	r13, r29
     8f2:	ba e0       	ldi	r27, 0x0A	; 10
     8f4:	cb 0e       	add	r12, r27
     8f6:	d1 1c       	adc	r13, r1
     8f8:	d8 01       	movw	r26, r16
     8fa:	cd 92       	st	X+, r12
     8fc:	dc 92       	st	X, r13
     8fe:	b1 82       	std	Z+1, r11	; 0x01
     900:	a0 82       	st	Z, r10
	
	// if dist is distant and currentEsc is low then speed is average
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     902:	64 5f       	subi	r22, 0xF4	; 244
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	f4 01       	movw	r30, r8
     908:	71 83       	std	Z+1, r23	; 0x01
     90a:	60 83       	st	Z, r22
     90c:	04 5f       	subi	r16, 0xF4	; 244
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	db 01       	movw	r26, r22
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	1c 93       	st	X, r17
     916:	0e 93       	st	-X, r16
     918:	12 97       	sbiw	r26, 0x02	; 2
     91a:	f8 01       	movw	r30, r16
     91c:	13 82       	std	Z+3, r1	; 0x03
     91e:	12 82       	std	Z+2, r1	; 0x02
     920:	34 96       	adiw	r30, 0x04	; 4
     922:	d4 01       	movw	r26, r8
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	fc 93       	st	X, r31
     928:	ee 93       	st	-X, r30
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	13 82       	std	Z+3, r1	; 0x03
     92e:	12 82       	std	Z+2, r1	; 0x02
	if81.value = &distant.value; if82.value = &low.value; then8.value = &average.value;
     930:	db 01       	movw	r26, r22
     932:	2d 93       	st	X+, r18
     934:	3c 93       	st	X, r19
     936:	0f 2e       	mov	r0, r31
     938:	fd e1       	ldi	r31, 0x1D	; 29
     93a:	ef 2e       	mov	r14, r31
     93c:	ff 24       	eor	r15, r15
     93e:	f3 94       	inc	r15
     940:	f0 2d       	mov	r31, r0
     942:	ec 0e       	add	r14, r28
     944:	fd 1e       	adc	r15, r29
     946:	ba e0       	ldi	r27, 0x0A	; 10
     948:	eb 0e       	add	r14, r27
     94a:	f1 1c       	adc	r15, r1
     94c:	d8 01       	movw	r26, r16
     94e:	ed 92       	st	X+, r14
     950:	fc 92       	st	X, r15
     952:	51 83       	std	Z+1, r21	; 0x01
     954:	40 83       	st	Z, r20
	
	// if dist is distant and currentEsc is medium then speed is average
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     956:	64 5f       	subi	r22, 0xF4	; 244
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	f3 01       	movw	r30, r6
     95c:	71 83       	std	Z+1, r23	; 0x01
     95e:	60 83       	st	Z, r22
     960:	4e 01       	movw	r8, r28
     962:	f9 e9       	ldi	r31, 0x99	; 153
     964:	8f 1a       	sub	r8, r31
     966:	fd ef       	ldi	r31, 0xFD	; 253
     968:	9f 0a       	sbc	r9, r31
     96a:	db 01       	movw	r26, r22
     96c:	13 96       	adiw	r26, 0x03	; 3
     96e:	9c 92       	st	X, r9
     970:	8e 92       	st	-X, r8
     972:	12 97       	sbiw	r26, 0x02	; 2
     974:	f4 01       	movw	r30, r8
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	12 82       	std	Z+2, r1	; 0x02
     97a:	34 96       	adiw	r30, 0x04	; 4
     97c:	d3 01       	movw	r26, r6
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	fc 93       	st	X, r31
     982:	ee 93       	st	-X, r30
     984:	12 97       	sbiw	r26, 0x02	; 2
     986:	13 82       	std	Z+3, r1	; 0x03
     988:	12 82       	std	Z+2, r1	; 0x02
	if91.value = &distant.value; if92.value = &medium.value; then9.value = &average.value;
     98a:	db 01       	movw	r26, r22
     98c:	2d 93       	st	X+, r18
     98e:	3c 93       	st	X, r19
     990:	03 e3       	ldi	r16, 0x33	; 51
     992:	11 e0       	ldi	r17, 0x01	; 1
     994:	0c 0f       	add	r16, r28
     996:	1d 1f       	adc	r17, r29
     998:	06 5f       	subi	r16, 0xF6	; 246
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	d4 01       	movw	r26, r8
     99e:	0d 93       	st	X+, r16
     9a0:	1c 93       	st	X, r17
     9a2:	51 83       	std	Z+1, r21	; 0x01
     9a4:	40 83       	st	Z, r20
	
	// if dist is faar and steering is straight and currentEsc is neutral then speed is average
	struct rule_element_type if101, if102, if103, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = &if103; if103.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     9a6:	26 57       	subi	r18, 0x76	; 118
     9a8:	3e 4f       	sbci	r19, 0xFE	; 254
     9aa:	c3 51       	subi	r28, 0x13	; 19
     9ac:	de 4f       	sbci	r29, 0xFE	; 254
     9ae:	39 83       	std	Y+1, r19	; 0x01
     9b0:	28 83       	st	Y, r18
     9b2:	cd 5e       	subi	r28, 0xED	; 237
     9b4:	d1 40       	sbci	r29, 0x01	; 1
     9b6:	60 5f       	subi	r22, 0xF0	; 240
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	f9 01       	movw	r30, r18
     9bc:	73 83       	std	Z+3, r23	; 0x03
     9be:	62 83       	std	Z+2, r22	; 0x02
     9c0:	4e 01       	movw	r8, r28
     9c2:	f9 e8       	ldi	r31, 0x89	; 137
     9c4:	8f 1a       	sub	r8, r31
     9c6:	fd ef       	ldi	r31, 0xFD	; 253
     9c8:	9f 0a       	sbc	r9, r31
     9ca:	db 01       	movw	r26, r22
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	9c 92       	st	X, r9
     9d0:	8e 92       	st	-X, r8
     9d2:	12 97       	sbiw	r26, 0x02	; 2
     9d4:	f4 01       	movw	r30, r8
     9d6:	13 82       	std	Z+3, r1	; 0x03
     9d8:	12 82       	std	Z+2, r1	; 0x02
     9da:	34 96       	adiw	r30, 0x04	; 4
     9dc:	c1 51       	subi	r28, 0x11	; 17
     9de:	de 4f       	sbci	r29, 0xFE	; 254
     9e0:	f9 83       	std	Y+1, r31	; 0x01
     9e2:	e8 83       	st	Y, r30
     9e4:	cf 5e       	subi	r28, 0xEF	; 239
     9e6:	d1 40       	sbci	r29, 0x01	; 1
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	12 82       	std	Z+2, r1	; 0x02
	if101.value = &faar.value; if102.value = &straight.value; if103.value = &neutral.value; then10.value = &slow.value;
     9ec:	d9 01       	movw	r26, r18
     9ee:	8d 93       	st	X+, r24
     9f0:	9c 93       	st	X, r25
     9f2:	2d e6       	ldi	r18, 0x6D	; 109
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	2c 0f       	add	r18, r28
     9f8:	3d 1f       	adc	r19, r29
     9fa:	26 5f       	subi	r18, 0xF6	; 246
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	db 01       	movw	r26, r22
     a00:	2d 93       	st	X+, r18
     a02:	3c 93       	st	X, r19
     a04:	d4 01       	movw	r26, r8
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	dc 92       	st	X, r13
     a0a:	ce 92       	st	-X, r12
     a0c:	b1 82       	std	Z+1, r11	; 0x01
     a0e:	a0 82       	st	Z, r10

	// if dist is faar and steering is straight and currentEsc is low then speed is average
	struct rule_element_type if111, if112, if113, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = &if113; if113.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     a10:	6e 01       	movw	r12, r28
     a12:	b1 e8       	ldi	r27, 0x81	; 129
     a14:	cb 1a       	sub	r12, r27
     a16:	bd ef       	ldi	r27, 0xFD	; 253
     a18:	db 0a       	sbc	r13, r27
     a1a:	cd 50       	subi	r28, 0x0D	; 13
     a1c:	de 4f       	sbci	r29, 0xFE	; 254
     a1e:	d9 82       	std	Y+1, r13	; 0x01
     a20:	c8 82       	st	Y, r12
     a22:	c3 5f       	subi	r28, 0xF3	; 243
     a24:	d1 40       	sbci	r29, 0x01	; 1
     a26:	60 5f       	subi	r22, 0xF0	; 240
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	f6 01       	movw	r30, r12
     a2c:	73 83       	std	Z+3, r23	; 0x03
     a2e:	62 83       	std	Z+2, r22	; 0x02
     a30:	50 96       	adiw	r26, 0x10	; 16
     a32:	fb 01       	movw	r30, r22
     a34:	b3 83       	std	Z+3, r27	; 0x03
     a36:	a2 83       	std	Z+2, r26	; 0x02
     a38:	13 96       	adiw	r26, 0x03	; 3
     a3a:	1c 92       	st	X, r1
     a3c:	1e 92       	st	-X, r1
     a3e:	12 97       	sbiw	r26, 0x02	; 2
     a40:	5e 01       	movw	r10, r28
     a42:	f5 e7       	ldi	r31, 0x75	; 117
     a44:	af 1a       	sub	r10, r31
     a46:	fd ef       	ldi	r31, 0xFD	; 253
     a48:	bf 0a       	sbc	r11, r31
     a4a:	cb 50       	subi	r28, 0x0B	; 11
     a4c:	de 4f       	sbci	r29, 0xFE	; 254
     a4e:	b9 82       	std	Y+1, r11	; 0x01
     a50:	a8 82       	st	Y, r10
     a52:	c5 5f       	subi	r28, 0xF5	; 245
     a54:	d1 40       	sbci	r29, 0x01	; 1
     a56:	f5 01       	movw	r30, r10
     a58:	13 82       	std	Z+3, r1	; 0x03
     a5a:	12 82       	std	Z+2, r1	; 0x02
	if111.value = &faar.value; if112.value = &straight.value; if113.value = &low.value; then11.value = &average.value;
     a5c:	f6 01       	movw	r30, r12
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
     a62:	fb 01       	movw	r30, r22
     a64:	31 83       	std	Z+1, r19	; 0x01
     a66:	20 83       	st	Z, r18
     a68:	ed 92       	st	X+, r14
     a6a:	fc 92       	st	X, r15
     a6c:	d5 01       	movw	r26, r10
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	5c 93       	st	X, r21
     a72:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is medium then speed is fast
	struct rule_element_type if121, if122, if123, then12;
	rule12.if_side = &if121; if121.next = &if122; if122.next = &if123; if123.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     a74:	64 5f       	subi	r22, 0xF4	; 244
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	c7 50       	subi	r28, 0x07	; 7
     a7a:	de 4f       	sbci	r29, 0xFE	; 254
     a7c:	79 83       	std	Y+1, r23	; 0x01
     a7e:	68 83       	st	Y, r22
     a80:	c9 5f       	subi	r28, 0xF9	; 249
     a82:	d1 40       	sbci	r29, 0x01	; 1
     a84:	42 50       	subi	r20, 0x02	; 2
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	fb 01       	movw	r30, r22
     a8a:	53 83       	std	Z+3, r21	; 0x03
     a8c:	42 83       	std	Z+2, r20	; 0x02
     a8e:	1c 96       	adiw	r26, 0x0c	; 12
     a90:	fa 01       	movw	r30, r20
     a92:	b3 83       	std	Z+3, r27	; 0x03
     a94:	a2 83       	std	Z+2, r26	; 0x02
     a96:	13 96       	adiw	r26, 0x03	; 3
     a98:	1c 92       	st	X, r1
     a9a:	1e 92       	st	-X, r1
     a9c:	12 97       	sbiw	r26, 0x02	; 2
     a9e:	7e 01       	movw	r14, r28
     aa0:	f5 e6       	ldi	r31, 0x65	; 101
     aa2:	ef 1a       	sub	r14, r31
     aa4:	fd ef       	ldi	r31, 0xFD	; 253
     aa6:	ff 0a       	sbc	r15, r31
     aa8:	c5 50       	subi	r28, 0x05	; 5
     aaa:	de 4f       	sbci	r29, 0xFE	; 254
     aac:	f9 82       	std	Y+1, r15	; 0x01
     aae:	e8 82       	st	Y, r14
     ab0:	cb 5f       	subi	r28, 0xFB	; 251
     ab2:	d1 40       	sbci	r29, 0x01	; 1
     ab4:	f7 01       	movw	r30, r14
     ab6:	13 82       	std	Z+3, r1	; 0x03
     ab8:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &faar.value; if122.value = &straight.value; if123.value = &medium.value; then12.value = &fast.value;
     aba:	fb 01       	movw	r30, r22
     abc:	91 83       	std	Z+1, r25	; 0x01
     abe:	80 83       	st	Z, r24
     ac0:	fa 01       	movw	r30, r20
     ac2:	31 83       	std	Z+1, r19	; 0x01
     ac4:	20 83       	st	Z, r18
     ac6:	0d 93       	st	X+, r16
     ac8:	1c 93       	st	X, r17
     aca:	41 ea       	ldi	r20, 0xA1	; 161
     acc:	51 e0       	ldi	r21, 0x01	; 1
     ace:	4c 0f       	add	r20, r28
     ad0:	5d 1f       	adc	r21, r29
     ad2:	46 5f       	subi	r20, 0xF6	; 246
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	d7 01       	movw	r26, r14
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	5c 93       	st	X, r21
     adc:	4e 93       	st	-X, r20
	
	// if dist is faar and steering is straight and currentEsc is high then speed is fast
	struct rule_element_type if131, if132, if133, then13;
	rule13.if_side = &if131; if131.next = &if132; if132.next = &if133; if133.next = NULL; rule13.then_side = &then13; then13.next = NULL;
     ade:	0e 59       	subi	r16, 0x9E	; 158
     ae0:	1e 4f       	sbci	r17, 0xFE	; 254
     ae2:	c1 50       	subi	r28, 0x01	; 1
     ae4:	de 4f       	sbci	r29, 0xFE	; 254
     ae6:	19 83       	std	Y+1, r17	; 0x01
     ae8:	08 83       	st	Y, r16
     aea:	cf 5f       	subi	r28, 0xFF	; 255
     aec:	d1 40       	sbci	r29, 0x01	; 1
     aee:	6c 5e       	subi	r22, 0xEC	; 236
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	f8 01       	movw	r30, r16
     af4:	73 83       	std	Z+3, r23	; 0x03
     af6:	62 83       	std	Z+2, r22	; 0x02
     af8:	1c 96       	adiw	r26, 0x0c	; 12
     afa:	fb 01       	movw	r30, r22
     afc:	b3 83       	std	Z+3, r27	; 0x03
     afe:	a2 83       	std	Z+2, r26	; 0x02
     b00:	13 96       	adiw	r26, 0x03	; 3
     b02:	1c 92       	st	X, r1
     b04:	1e 92       	st	-X, r1
     b06:	12 97       	sbiw	r26, 0x02	; 2
     b08:	7e 01       	movw	r14, r28
     b0a:	f5 e5       	ldi	r31, 0x55	; 85
     b0c:	ef 1a       	sub	r14, r31
     b0e:	fd ef       	ldi	r31, 0xFD	; 253
     b10:	ff 0a       	sbc	r15, r31
     b12:	cf 5f       	subi	r28, 0xFF	; 255
     b14:	dd 4f       	sbci	r29, 0xFD	; 253
     b16:	f9 82       	std	Y+1, r15	; 0x01
     b18:	e8 82       	st	Y, r14
     b1a:	c1 50       	subi	r28, 0x01	; 1
     b1c:	d2 40       	sbci	r29, 0x02	; 2
     b1e:	f7 01       	movw	r30, r14
     b20:	13 82       	std	Z+3, r1	; 0x03
     b22:	12 82       	std	Z+2, r1	; 0x02
	if131.value = &faar.value; if132.value = &straight.value; if133.value = &high.value; then13.value = &fast.value;
     b24:	f8 01       	movw	r30, r16
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
     b2a:	fb 01       	movw	r30, r22
     b2c:	31 83       	std	Z+1, r19	; 0x01
     b2e:	20 83       	st	Z, r18
     b30:	69 e4       	ldi	r22, 0x49	; 73
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	6c 0f       	add	r22, r28
     b36:	7d 1f       	adc	r23, r29
     b38:	66 5f       	subi	r22, 0xF6	; 246
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	6d 93       	st	X+, r22
     b3e:	7c 93       	st	X, r23
     b40:	d7 01       	movw	r26, r14
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	5c 93       	st	X, r21
     b46:	4e 93       	st	-X, r20

	// if dist is faar and steering is straight then speed is fast
	struct rule_element_type if141, if142, then14;
	rule14.if_side = &if141; if141.next = &if142; if142.next = NULL; rule14.then_side = &then14; then14.next = NULL;
     b48:	64 5a       	subi	r22, 0xA4	; 164
     b4a:	7e 4f       	sbci	r23, 0xFE	; 254
     b4c:	cb 5f       	subi	r28, 0xFB	; 251
     b4e:	dd 4f       	sbci	r29, 0xFD	; 253
     b50:	79 83       	std	Y+1, r23	; 0x01
     b52:	68 83       	st	Y, r22
     b54:	c5 50       	subi	r28, 0x05	; 5
     b56:	d2 40       	sbci	r29, 0x02	; 2
     b58:	18 96       	adiw	r26, 0x08	; 8
     b5a:	fb 01       	movw	r30, r22
     b5c:	b3 83       	std	Z+3, r27	; 0x03
     b5e:	a2 83       	std	Z+2, r26	; 0x02
     b60:	13 96       	adiw	r26, 0x03	; 3
     b62:	1c 92       	st	X, r1
     b64:	1e 92       	st	-X, r1
     b66:	12 97       	sbiw	r26, 0x02	; 2
     b68:	08 5e       	subi	r16, 0xE8	; 232
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	c9 5f       	subi	r28, 0xF9	; 249
     b6e:	dd 4f       	sbci	r29, 0xFD	; 253
     b70:	19 83       	std	Y+1, r17	; 0x01
     b72:	08 83       	st	Y, r16
     b74:	c7 50       	subi	r28, 0x07	; 7
     b76:	d2 40       	sbci	r29, 0x02	; 2
     b78:	f8 01       	movw	r30, r16
     b7a:	13 82       	std	Z+3, r1	; 0x03
     b7c:	12 82       	std	Z+2, r1	; 0x02
	if141.value = &faar.value; if142.value = &straight.value; then14.value = &fast.value;
     b7e:	fb 01       	movw	r30, r22
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	80 83       	st	Z, r24
     b84:	2d 93       	st	X+, r18
     b86:	3c 93       	st	X, r19
     b88:	d8 01       	movw	r26, r16
     b8a:	4d 93       	st	X+, r20
     b8c:	5c 93       	st	X, r21


	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////

	fuzzification();
     b8e:	94 d0       	rcall	.+296    	; 0xcb8 <fuzzification>
	rule_evaluation();
     b90:	ba d0       	rcall	.+372    	; 0xd06 <rule_evaluation>
	defuzzification();
     b92:	ff d0       	rcall	.+510    	; 0xd92 <defuzzification>

	if (speed.value > MAXESC)
     b94:	8b ad       	ldd	r24, Y+59	; 0x3b
     b96:	9c ad       	ldd	r25, Y+60	; 0x3c
     b98:	83 32       	cpi	r24, 0x23	; 35
     b9a:	bb e0       	ldi	r27, 0x0B	; 11
     b9c:	9b 07       	cpc	r25, r27
     b9e:	24 f0       	brlt	.+8      	; 0xba8 <FLC_speed+0xabc>
	{
		setESC(MAXESC);
     ba0:	82 e2       	ldi	r24, 0x22	; 34
     ba2:	9b e0       	ldi	r25, 0x0B	; 11
     ba4:	f1 d7       	rcall	.+4066   	; 0x1b88 <setESC>
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <FLC_speed+0xace>
	}
	else if (speed.value < NEUTRAL)
     ba8:	8d 3c       	cpi	r24, 0xCD	; 205
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	9e 07       	cpc	r25, r30
     bae:	24 f4       	brge	.+8      	; 0xbb8 <FLC_speed+0xacc>
	{
		setESC(NEUTRAL);
     bb0:	8d ec       	ldi	r24, 0xCD	; 205
     bb2:	9a e0       	ldi	r25, 0x0A	; 10
     bb4:	e9 d7       	rcall	.+4050   	; 0x1b88 <setESC>
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <FLC_speed+0xace>
	}
	else
	{
	
		setESC(speed.value);
     bb8:	e7 d7       	rcall	.+4046   	; 0x1b88 <setESC>
	}
    
    
}
     bba:	c6 54       	subi	r28, 0x46	; 70
     bbc:	dd 4f       	sbci	r29, 0xFD	; 253
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	9f 90       	pop	r9
     bde:	8f 90       	pop	r8
     be0:	7f 90       	pop	r7
     be2:	6f 90       	pop	r6
     be4:	5f 90       	pop	r5
     be6:	4f 90       	pop	r4
     be8:	3f 90       	pop	r3
     bea:	2f 90       	pop	r2
     bec:	08 95       	ret

00000bee <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     bee:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     bf0:	84 85       	ldd	r24, Z+12	; 0x0c
     bf2:	95 85       	ldd	r25, Z+13	; 0x0d
     bf4:	9b 01       	movw	r18, r22
     bf6:	28 1b       	sub	r18, r24
     bf8:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     bfa:	86 85       	ldd	r24, Z+14	; 0x0e
     bfc:	97 85       	ldd	r25, Z+15	; 0x0f
     bfe:	86 1b       	sub	r24, r22
     c00:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     c02:	12 16       	cp	r1, r18
     c04:	13 06       	cpc	r1, r19
     c06:	f4 f4       	brge	.+60     	; 0xc44 <compute_degree_of_membership+0x56>
     c08:	18 16       	cp	r1, r24
     c0a:	19 06       	cpc	r1, r25
     c0c:	f4 f4       	brge	.+60     	; 0xc4a <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     c0e:	60 89       	ldd	r22, Z+16	; 0x10
     c10:	71 89       	ldd	r23, Z+17	; 0x11
     c12:	a2 89       	ldd	r26, Z+18	; 0x12
     c14:	b3 89       	ldd	r27, Z+19	; 0x13
     c16:	8a 9f       	mul	r24, r26
     c18:	a0 01       	movw	r20, r0
     c1a:	8b 9f       	mul	r24, r27
     c1c:	50 0d       	add	r21, r0
     c1e:	9a 9f       	mul	r25, r26
     c20:	50 0d       	add	r21, r0
     c22:	11 24       	eor	r1, r1
     c24:	26 9f       	mul	r18, r22
     c26:	c0 01       	movw	r24, r0
     c28:	27 9f       	mul	r18, r23
     c2a:	90 0d       	add	r25, r0
     c2c:	36 9f       	mul	r19, r22
     c2e:	90 0d       	add	r25, r0
     c30:	11 24       	eor	r1, r1
     c32:	48 17       	cp	r20, r24
     c34:	59 07       	cpc	r21, r25
     c36:	0c f4       	brge	.+2      	; 0xc3a <compute_degree_of_membership+0x4c>
     c38:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     c3a:	8f 3f       	cpi	r24, 0xFF	; 255
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f0       	breq	.+2      	; 0xc42 <compute_degree_of_membership+0x54>
     c40:	3c f4       	brge	.+14     	; 0xc50 <compute_degree_of_membership+0x62>
     c42:	08 c0       	rjmp	.+16     	; 0xc54 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <compute_degree_of_membership+0x66>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     c54:	93 87       	std	Z+11, r25	; 0x0b
     c56:	82 87       	std	Z+10, r24	; 0x0a
     c58:	08 95       	ret

00000c5a <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     c64:	c6 85       	ldd	r28, Z+14	; 0x0e
     c66:	d7 85       	ldd	r29, Z+15	; 0x0f
     c68:	84 85       	ldd	r24, Z+12	; 0x0c
     c6a:	95 85       	ldd	r25, Z+13	; 0x0d
     c6c:	c8 1b       	sub	r28, r24
     c6e:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     c70:	22 85       	ldd	r18, Z+10	; 0x0a
     c72:	33 85       	ldd	r19, Z+11	; 0x0b
     c74:	60 89       	ldd	r22, Z+16	; 0x10
     c76:	71 89       	ldd	r23, Z+17	; 0x11
     c78:	c9 01       	movw	r24, r18
     c7a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     c7e:	8e 01       	movw	r16, r28
     c80:	06 1b       	sub	r16, r22
     c82:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     c84:	62 89       	ldd	r22, Z+18	; 0x12
     c86:	73 89       	ldd	r23, Z+19	; 0x13
     c88:	c9 01       	movw	r24, r18
     c8a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
    top = base - run_1 - run_2;
     c8e:	06 1b       	sub	r16, r22
     c90:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     c92:	c0 0f       	add	r28, r16
     c94:	d1 1f       	adc	r29, r17
     c96:	2c 9f       	mul	r18, r28
     c98:	c0 01       	movw	r24, r0
     c9a:	2d 9f       	mul	r18, r29
     c9c:	90 0d       	add	r25, r0
     c9e:	3c 9f       	mul	r19, r28
     ca0:	90 0d       	add	r25, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	99 23       	and	r25, r25
     ca6:	0c f4       	brge	.+2      	; 0xcaa <compute_area_of_trapezoid+0x50>
     ca8:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     caa:	95 95       	asr	r25
     cac:	87 95       	ror	r24
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     cc0:	00 91 1a 03 	lds	r16, 0x031A
     cc4:	10 91 1b 03 	lds	r17, 0x031B
     cc8:	01 15       	cp	r16, r1
     cca:	11 05       	cpc	r17, r1
     ccc:	b9 f0       	breq	.+46     	; 0xcfc <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     cce:	f8 01       	movw	r30, r16
     cd0:	c4 85       	ldd	r28, Z+12	; 0x0c
     cd2:	d5 85       	ldd	r29, Z+13	; 0x0d
     cd4:	20 97       	sbiw	r28, 0x00	; 0
     cd6:	61 f0       	breq	.+24     	; 0xcf0 <fuzzification+0x38>
            if (mf!=NULL) {
     cd8:	20 97       	sbiw	r28, 0x00	; 0
     cda:	29 f0       	breq	.+10     	; 0xce6 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     cdc:	f8 01       	movw	r30, r16
     cde:	62 85       	ldd	r22, Z+10	; 0x0a
     ce0:	73 85       	ldd	r23, Z+11	; 0x0b
     ce2:	ce 01       	movw	r24, r28
     ce4:	84 df       	rcall	.-248    	; 0xbee <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     ce6:	0c 88       	ldd	r0, Y+20	; 0x14
     ce8:	dd 89       	ldd	r29, Y+21	; 0x15
     cea:	c0 2d       	mov	r28, r0
     cec:	20 97       	sbiw	r28, 0x00	; 0
     cee:	a1 f7       	brne	.-24     	; 0xcd8 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     cf0:	f8 01       	movw	r30, r16
     cf2:	06 85       	ldd	r16, Z+14	; 0x0e
     cf4:	17 85       	ldd	r17, Z+15	; 0x0f
     cf6:	01 15       	cp	r16, r1
     cf8:	11 05       	cpc	r17, r1
     cfa:	49 f7       	brne	.-46     	; 0xcce <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	08 95       	ret

00000d06 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d0e:	c0 91 1c 03 	lds	r28, 0x031C
     d12:	d0 91 1d 03 	lds	r29, 0x031D
     d16:	20 97       	sbiw	r28, 0x00	; 0
     d18:	b9 f1       	breq	.+110    	; 0xd88 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d1e:	e8 81       	ld	r30, Y
     d20:	f9 81       	ldd	r31, Y+1	; 0x01
     d22:	30 97       	sbiw	r30, 0x00	; 0
     d24:	81 f0       	breq	.+32     	; 0xd46 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d26:	20 2f       	mov	r18, r16
     d28:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     d2a:	a0 81       	ld	r26, Z
     d2c:	b1 81       	ldd	r27, Z+1	; 0x01
     d2e:	8d 91       	ld	r24, X+
     d30:	9c 91       	ld	r25, X
     d32:	82 17       	cp	r24, r18
     d34:	93 07       	cpc	r25, r19
     d36:	0c f4       	brge	.+2      	; 0xd3a <rule_evaluation+0x34>
     d38:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     d3a:	02 80       	ldd	r0, Z+2	; 0x02
     d3c:	f3 81       	ldd	r31, Z+3	; 0x03
     d3e:	e0 2d       	mov	r30, r0
     d40:	30 97       	sbiw	r30, 0x00	; 0
     d42:	99 f7       	brne	.-26     	; 0xd2a <rule_evaluation+0x24>
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     d46:	20 2f       	mov	r18, r16
     d48:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d4a:	ea 81       	ldd	r30, Y+2	; 0x02
     d4c:	fb 81       	ldd	r31, Y+3	; 0x03
     d4e:	30 97       	sbiw	r30, 0x00	; 0
     d50:	b1 f0       	breq	.+44     	; 0xd7e <rule_evaluation+0x78>
     d52:	72 2f       	mov	r23, r18
     d54:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     d56:	a0 81       	ld	r26, Z
     d58:	b1 81       	ldd	r27, Z+1	; 0x01
     d5a:	8d 91       	ld	r24, X+
     d5c:	9c 91       	ld	r25, X
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	57 2f       	mov	r21, r23
     d62:	46 2f       	mov	r20, r22
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	14 f4       	brge	.+4      	; 0xd6e <rule_evaluation+0x68>
     d6a:	58 2f       	mov	r21, r24
     d6c:	49 2f       	mov	r20, r25
     d6e:	5c 93       	st	X, r21
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     d74:	02 80       	ldd	r0, Z+2	; 0x02
     d76:	f3 81       	ldd	r31, Z+3	; 0x03
     d78:	e0 2d       	mov	r30, r0
     d7a:	30 97       	sbiw	r30, 0x00	; 0
     d7c:	61 f7       	brne	.-40     	; 0xd56 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     d7e:	0c 80       	ldd	r0, Y+4	; 0x04
     d80:	dd 81       	ldd	r29, Y+5	; 0x05
     d82:	c0 2d       	mov	r28, r0
     d84:	20 97       	sbiw	r28, 0x00	; 0
     d86:	59 f6       	brne	.-106    	; 0xd1e <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     d92:	2f 92       	push	r2
     d94:	3f 92       	push	r3
     d96:	4f 92       	push	r4
     d98:	5f 92       	push	r5
     d9a:	6f 92       	push	r6
     d9c:	7f 92       	push	r7
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <defuzzification+0x26>
     db8:	00 d0       	rcall	.+0      	; 0xdba <defuzzification+0x28>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <defuzzification+0x2a>
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     dc0:	80 91 18 03 	lds	r24, 0x0318
     dc4:	90 91 19 03 	lds	r25, 0x0319
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	89 2b       	or	r24, r25
     dce:	09 f4       	brne	.+2      	; 0xdd2 <defuzzification+0x40>
     dd0:	8d c0       	rjmp	.+282    	; 0xeec <defuzzification+0x15a>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     dd2:	eb 81       	ldd	r30, Y+3	; 0x03
     dd4:	fc 81       	ldd	r31, Y+4	; 0x04
     dd6:	04 84       	ldd	r0, Z+12	; 0x0c
     dd8:	f5 85       	ldd	r31, Z+13	; 0x0d
     dda:	e0 2d       	mov	r30, r0
     ddc:	fe 83       	std	Y+6, r31	; 0x06
     dde:	ed 83       	std	Y+5, r30	; 0x05
     de0:	ef 2b       	or	r30, r31
     de2:	09 f4       	brne	.+2      	; 0xde6 <defuzzification+0x54>
     de4:	6e c0       	rjmp	.+220    	; 0xec2 <defuzzification+0x130>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     de6:	51 2c       	mov	r5, r1
     de8:	61 2c       	mov	r6, r1
     dea:	71 2c       	mov	r7, r1
     dec:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     dee:	31 2c       	mov	r3, r1
     df0:	21 2c       	mov	r2, r1
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	2f df       	rcall	.-418    	; 0xc5a <compute_area_of_trapezoid>
     dfc:	bc 01       	movw	r22, r24
     dfe:	88 27       	eor	r24, r24
     e00:	77 fd       	sbrc	r23, 7
     e02:	80 95       	com	r24
     e04:	98 2f       	mov	r25, r24
     e06:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
     e0a:	6b 01       	movw	r12, r22
     e0c:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     e0e:	ed 81       	ldd	r30, Y+5	; 0x05
     e10:	fe 81       	ldd	r31, Y+6	; 0x06
     e12:	04 85       	ldd	r16, Z+12	; 0x0c
     e14:	15 85       	ldd	r17, Z+13	; 0x0d
     e16:	b8 01       	movw	r22, r16
     e18:	88 27       	eor	r24, r24
     e1a:	77 fd       	sbrc	r23, 7
     e1c:	80 95       	com	r24
     e1e:	98 2f       	mov	r25, r24
     e20:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
     e24:	4b 01       	movw	r8, r22
     e26:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     e28:	ed 81       	ldd	r30, Y+5	; 0x05
     e2a:	fe 81       	ldd	r31, Y+6	; 0x06
     e2c:	86 85       	ldd	r24, Z+14	; 0x0e
     e2e:	97 85       	ldd	r25, Z+15	; 0x0f
     e30:	80 1b       	sub	r24, r16
     e32:	91 0b       	sbc	r25, r17
     e34:	bc 01       	movw	r22, r24
     e36:	12 f4       	brpl	.+4      	; 0xe3c <defuzzification+0xaa>
     e38:	6f 5f       	subi	r22, 0xFF	; 255
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	75 95       	asr	r23
     e3e:	67 95       	ror	r22
            centroid = centroid + intermed;
     e40:	88 27       	eor	r24, r24
     e42:	77 fd       	sbrc	r23, 7
     e44:	80 95       	com	r24
     e46:	98 2f       	mov	r25, r24
     e48:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
     e4c:	a5 01       	movw	r20, r10
     e4e:	94 01       	movw	r18, r8
     e50:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__addsf3>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     e58:	c7 01       	movw	r24, r14
     e5a:	b6 01       	movw	r22, r12
     e5c:	0e 94 77 11 	call	0x22ee	; 0x22ee <__mulsf3>
     e60:	9b 01       	movw	r18, r22
     e62:	ac 01       	movw	r20, r24
     e64:	63 2d       	mov	r22, r3
     e66:	72 2d       	mov	r23, r2
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__addsf3>
     e70:	36 2e       	mov	r3, r22
     e72:	27 2e       	mov	r2, r23
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     e78:	a7 01       	movw	r20, r14
     e7a:	96 01       	movw	r18, r12
     e7c:	65 2d       	mov	r22, r5
     e7e:	76 2d       	mov	r23, r6
     e80:	87 2d       	mov	r24, r7
     e82:	94 2d       	mov	r25, r4
     e84:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__addsf3>
     e88:	56 2e       	mov	r5, r22
     e8a:	67 2e       	mov	r6, r23
     e8c:	78 2e       	mov	r7, r24
     e8e:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     e90:	ed 81       	ldd	r30, Y+5	; 0x05
     e92:	fe 81       	ldd	r31, Y+6	; 0x06
     e94:	04 88       	ldd	r0, Z+20	; 0x14
     e96:	f5 89       	ldd	r31, Z+21	; 0x15
     e98:	e0 2d       	mov	r30, r0
     e9a:	fe 83       	std	Y+6, r31	; 0x06
     e9c:	ed 83       	std	Y+5, r30	; 0x05
     e9e:	ef 2b       	or	r30, r31
     ea0:	09 f0       	breq	.+2      	; 0xea4 <defuzzification+0x112>
     ea2:	a9 cf       	rjmp	.-174    	; 0xdf6 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     ea4:	26 2f       	mov	r18, r22
     ea6:	37 2f       	mov	r19, r23
     ea8:	48 2f       	mov	r20, r24
     eaa:	59 2f       	mov	r21, r25
     eac:	63 2d       	mov	r22, r3
     eae:	72 2d       	mov	r23, r2
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
     eb8:	26 2f       	mov	r18, r22
     eba:	37 2f       	mov	r19, r23
     ebc:	48 2f       	mov	r20, r24
     ebe:	59 2f       	mov	r21, r25
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <defuzzification+0x138>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     eca:	62 2f       	mov	r22, r18
     ecc:	73 2f       	mov	r23, r19
     ece:	84 2f       	mov	r24, r20
     ed0:	95 2f       	mov	r25, r21
     ed2:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixsfsi>
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	73 87       	std	Z+11, r23	; 0x0b
     edc:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     ede:	86 85       	ldd	r24, Z+14	; 0x0e
     ee0:	97 85       	ldd	r25, Z+15	; 0x0f
     ee2:	9c 83       	std	Y+4, r25	; 0x04
     ee4:	8b 83       	std	Y+3, r24	; 0x03
     ee6:	89 2b       	or	r24, r25
     ee8:	09 f0       	breq	.+2      	; 0xeec <defuzzification+0x15a>
     eea:	73 cf       	rjmp	.-282    	; 0xdd2 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	8f 90       	pop	r8
     f10:	7f 90       	pop	r7
     f12:	6f 90       	pop	r6
     f14:	5f 90       	pop	r5
     f16:	4f 90       	pop	r4
     f18:	3f 90       	pop	r3
     f1a:	2f 90       	pop	r2
     f1c:	08 95       	ret

00000f1e <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	6a 01       	movw	r12, r20
     f36:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     f38:	0e 94 01 12 	call	0x2402	; 0x2402 <strcpy>
    newMf->value = 0;
     f3c:	1b 86       	std	Y+11, r1	; 0x0b
     f3e:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     f40:	dd 86       	std	Y+13, r13	; 0x0d
     f42:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     f44:	ff 86       	std	Y+15, r15	; 0x0f
     f46:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     f48:	b5 01       	movw	r22, r10
     f4a:	6c 19       	sub	r22, r12
     f4c:	7d 09       	sbc	r23, r13
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	31 e0       	ldi	r19, 0x01	; 1
     f52:	c9 01       	movw	r24, r18
     f54:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
     f58:	79 8b       	std	Y+17, r23	; 0x11
     f5a:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     f5c:	b7 01       	movw	r22, r14
     f5e:	60 1b       	sub	r22, r16
     f60:	71 0b       	sbc	r23, r17
     f62:	c9 01       	movw	r24, r18
     f64:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
     f68:	7b 8b       	std	Y+19, r23	; 0x13
     f6a:	6a 8b       	std	Y+18, r22	; 0x12
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	08 95       	ret

00000f82 <straightIntersection>:
void straightIntersection(int c1);



void straightIntersection(int c1)
{
     f82:	4f 92       	push	r4
     f84:	5f 92       	push	r5
     f86:	6f 92       	push	r6
     f88:	7f 92       	push	r7
     f8a:	8f 92       	push	r8
     f8c:	9f 92       	push	r9
     f8e:	af 92       	push	r10
     f90:	bf 92       	push	r11
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	ce 5c       	subi	r28, 0xCE	; 206
     fa8:	d1 09       	sbc	r29, r1
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
	

	
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	//
	struct io_type cPosition; strcpy(cPosition.name, "cPosition");
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	e8 e9       	ldi	r30, 0x98	; 152
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	de 01       	movw	r26, r28
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	01 90       	ld	r0, Z+
     fc0:	0d 92       	st	X+, r0
     fc2:	2a 95       	dec	r18
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <straightIntersection+0x3c>


	// set iErr's input value to measErr value
	if(c1<50)				// if sensor value is smaller than cPosition's input set's lower limit
     fc6:	82 33       	cpi	r24, 0x32	; 50
     fc8:	91 05       	cpc	r25, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <straightIntersection+0x54>
	{
		cPosition.value = 50;  // force input value to lowest point in cPosition's input set
     fcc:	82 e3       	ldi	r24, 0x32	; 50
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	8b 87       	std	Y+11, r24	; 0x0b
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <straightIntersection+0x68>
	}
	else if(c1>200)			// if sensor value is bigger than cPosition's input set's upper limit
     fd6:	89 3c       	cpi	r24, 0xC9	; 201
     fd8:	91 05       	cpc	r25, r1
     fda:	2c f0       	brlt	.+10     	; 0xfe6 <straightIntersection+0x64>
	{
		cPosition.value = 200;  // force input value to lowest point in cPosition's input set
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <straightIntersection+0x68>
	}
	else
	{
		cPosition.value = c1;
     fe6:	9c 87       	std	Y+12, r25	; 0x0c
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
	}
	struct mf_type cRight;
	MATLAB_MF(&cRight, "cRight", 49, 50, 80, 100); // Min_value = 160
     fea:	5e 01       	movw	r10, r28
     fec:	21 e1       	ldi	r18, 0x11	; 17
     fee:	a2 0e       	add	r10, r18
     ff0:	b1 1c       	adc	r11, r1
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f4 e6       	ldi	r31, 0x64	; 100
     ff6:	ef 2e       	mov	r14, r31
     ff8:	f1 2c       	mov	r15, r1
     ffa:	f0 2d       	mov	r31, r0
     ffc:	00 e5       	ldi	r16, 0x50	; 80
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	22 e3       	ldi	r18, 0x32	; 50
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	41 e3       	ldi	r20, 0x31	; 49
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	64 e8       	ldi	r22, 0x84	; 132
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	c5 01       	movw	r24, r10
    100e:	87 df       	rcall	.-242    	; 0xf1e <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 80, 120, 120, 160);
    1010:	6e 01       	movw	r12, r28
    1012:	47 e2       	ldi	r20, 0x27	; 39
    1014:	c4 0e       	add	r12, r20
    1016:	d1 1c       	adc	r13, r1
    1018:	0f 2e       	mov	r0, r31
    101a:	f0 ea       	ldi	r31, 0xA0	; 160
    101c:	ef 2e       	mov	r14, r31
    101e:	f1 2c       	mov	r15, r1
    1020:	f0 2d       	mov	r31, r0
    1022:	08 e7       	ldi	r16, 0x78	; 120
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	28 e7       	ldi	r18, 0x78	; 120
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e5       	ldi	r20, 0x50	; 80
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	6b e8       	ldi	r22, 0x8B	; 139
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	c6 01       	movw	r24, r12
    1034:	74 df       	rcall	.-280    	; 0xf1e <MATLAB_MF>
	struct mf_type cLeft;
	MATLAB_MF(&cLeft, "cLeft", 140, 180, 200, 201); // Max_value = 370
    1036:	2e 01       	movw	r4, r28
    1038:	8d e3       	ldi	r24, 0x3D	; 61
    103a:	48 0e       	add	r4, r24
    103c:	51 1c       	adc	r5, r1
    103e:	0f 2e       	mov	r0, r31
    1040:	f9 ec       	ldi	r31, 0xC9	; 201
    1042:	ef 2e       	mov	r14, r31
    1044:	f1 2c       	mov	r15, r1
    1046:	f0 2d       	mov	r31, r0
    1048:	08 ec       	ldi	r16, 0xC8	; 200
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	24 eb       	ldi	r18, 0xB4	; 180
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	4c e8       	ldi	r20, 0x8C	; 140
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	62 e9       	ldi	r22, 0x92	; 146
    1056:	71 e0       	ldi	r23, 0x01	; 1
    1058:	c2 01       	movw	r24, r4
    105a:	61 df       	rcall	.-318    	; 0xf1e <MATLAB_MF>


	cPosition.membership_functions = &cRight;
    105c:	be 86       	std	Y+14, r11	; 0x0e
    105e:	ad 86       	std	Y+13, r10	; 0x0d
	cRight.next = &centre;
    1060:	de a2       	std	Y+38, r13	; 0x26
    1062:	cd a2       	std	Y+37, r12	; 0x25
	centre.next = &cLeft;
    1064:	5c ae       	std	Y+60, r5	; 0x3c
    1066:	4b ae       	std	Y+59, r4	; 0x3b
	cLeft.next = NULL;
    1068:	63 96       	adiw	r28, 0x13	; 19
    106a:	1f ae       	std	Y+63, r1	; 0x3f
    106c:	1e ae       	std	Y+62, r1	; 0x3e
    106e:	63 97       	sbiw	r28, 0x13	; 19

	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////
	//
	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    1070:	6e 01       	movw	r12, r28
    1072:	e3 e5       	ldi	r30, 0x53	; 83
    1074:	ce 0e       	add	r12, r30
    1076:	d1 1c       	adc	r13, r1
    1078:	89 e0       	ldi	r24, 0x09	; 9
    107a:	e9 e0       	ldi	r30, 0x09	; 9
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	d6 01       	movw	r26, r12
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	8a 95       	dec	r24
    1086:	e1 f7       	brne	.-8      	; 0x1080 <straightIntersection+0xfe>

	struct mf_type left;
	MATLAB_MF(&left, "left", 246, 251, 251, 255);           // TODO: needs to be tuned
    1088:	3e 01       	movw	r6, r28
    108a:	f3 e6       	ldi	r31, 0x63	; 99
    108c:	6f 0e       	add	r6, r31
    108e:	71 1c       	adc	r7, r1
    1090:	ee 24       	eor	r14, r14
    1092:	ea 94       	dec	r14
    1094:	f1 2c       	mov	r15, r1
    1096:	0b ef       	ldi	r16, 0xFB	; 251
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	2b ef       	ldi	r18, 0xFB	; 251
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	46 ef       	ldi	r20, 0xF6	; 246
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	60 e2       	ldi	r22, 0x20	; 32
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	c3 01       	movw	r24, r6
    10a8:	3a df       	rcall	.-396    	; 0xf1e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 253, 259, 259, 265);
    10aa:	5e 01       	movw	r10, r28
    10ac:	29 e7       	ldi	r18, 0x79	; 121
    10ae:	a2 0e       	add	r10, r18
    10b0:	b1 1c       	adc	r11, r1
    10b2:	0f 2e       	mov	r0, r31
    10b4:	f9 e0       	ldi	r31, 0x09	; 9
    10b6:	ef 2e       	mov	r14, r31
    10b8:	ff 24       	eor	r15, r15
    10ba:	f3 94       	inc	r15
    10bc:	f0 2d       	mov	r31, r0
    10be:	03 e0       	ldi	r16, 0x03	; 3
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	23 e0       	ldi	r18, 0x03	; 3
    10c4:	31 e0       	ldi	r19, 0x01	; 1
    10c6:	4d ef       	ldi	r20, 0xFD	; 253
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	65 e2       	ldi	r22, 0x25	; 37
    10cc:	71 e0       	ldi	r23, 0x01	; 1
    10ce:	c5 01       	movw	r24, r10
    10d0:	26 df       	rcall	.-436    	; 0xf1e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 262, 267, 267, 272);         // TODO: needs to be tuned
    10d2:	4e 01       	movw	r8, r28
    10d4:	4f e8       	ldi	r20, 0x8F	; 143
    10d6:	84 0e       	add	r8, r20
    10d8:	91 1c       	adc	r9, r1
    10da:	68 94       	set
    10dc:	ee 24       	eor	r14, r14
    10de:	e4 f8       	bld	r14, 4
    10e0:	ff 24       	eor	r15, r15
    10e2:	f3 94       	inc	r15
    10e4:	0b e0       	ldi	r16, 0x0B	; 11
    10e6:	11 e0       	ldi	r17, 0x01	; 1
    10e8:	2b e0       	ldi	r18, 0x0B	; 11
    10ea:	31 e0       	ldi	r19, 0x01	; 1
    10ec:	46 e0       	ldi	r20, 0x06	; 6
    10ee:	51 e0       	ldi	r21, 0x01	; 1
    10f0:	6e e2       	ldi	r22, 0x2E	; 46
    10f2:	71 e0       	ldi	r23, 0x01	; 1
    10f4:	c4 01       	movw	r24, r8
    10f6:	13 df       	rcall	.-474    	; 0xf1e <MATLAB_MF>


	steering.membership_functions = &right;
    10f8:	f6 01       	movw	r30, r12
    10fa:	95 86       	std	Z+13, r9	; 0x0d
    10fc:	84 86       	std	Z+12, r8	; 0x0c
	right.next = &straight;
    10fe:	f4 01       	movw	r30, r8
    1100:	b5 8a       	std	Z+21, r11	; 0x15
    1102:	a4 8a       	std	Z+20, r10	; 0x14
	straight.next = &left;
    1104:	f5 01       	movw	r30, r10
    1106:	75 8a       	std	Z+21, r7	; 0x15
    1108:	64 8a       	std	Z+20, r6	; 0x14
	left.next = NULL;
    110a:	f3 01       	movw	r30, r6
    110c:	15 8a       	std	Z+21, r1	; 0x15
    110e:	14 8a       	std	Z+20, r1	; 0x14



	// pointers to top of lists
	//
	System_Inputs = &cPosition;
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	90 93 1b 03 	sts	0x031B, r25
    1118:	80 93 1a 03 	sts	0x031A, r24
	cPosition.next = NULL;
    111c:	18 8a       	std	Y+16, r1	; 0x10
    111e:	1f 86       	std	Y+15, r1	; 0x0f
	System_Outputs = &steering;
    1120:	d0 92 19 03 	sts	0x0319, r13
    1124:	c0 92 18 03 	sts	0x0318, r12
	steering.next = NULL;
    1128:	f6 01       	movw	r30, r12
    112a:	17 86       	std	Z+15, r1	; 0x0f
    112c:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    112e:	8c 55       	subi	r24, 0x5C	; 92
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	90 93 1d 03 	sts	0x031D, r25
    1136:	80 93 1c 03 	sts	0x031C, r24
	struct rule_type rule2; rule1.next = &rule2;
    113a:	de 01       	movw	r26, r28
    113c:	a5 55       	subi	r26, 0x55	; 85
    113e:	bf 4f       	sbci	r27, 0xFF	; 255
    1140:	fc 01       	movw	r30, r24
    1142:	b5 83       	std	Z+5, r27	; 0x05
    1144:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1146:	be 01       	movw	r22, r28
    1148:	6f 54       	subi	r22, 0x4F	; 79
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	15 96       	adiw	r26, 0x05	; 5
    114e:	7c 93       	st	X, r23
    1150:	6e 93       	st	-X, r22
    1152:	14 97       	sbiw	r26, 0x04	; 4
    1154:	fb 01       	movw	r30, r22
    1156:	15 82       	std	Z+5, r1	; 0x05
    1158:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if cPosition is cRight then steering is left"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    115a:	ae 01       	movw	r20, r28
    115c:	49 54       	subi	r20, 0x49	; 73
    115e:	5f 4f       	sbci	r21, 0xFF	; 255
    1160:	fc 01       	movw	r30, r24
    1162:	51 83       	std	Z+1, r21	; 0x01
    1164:	40 83       	st	Z, r20
    1166:	fa 01       	movw	r30, r20
    1168:	13 82       	std	Z+3, r1	; 0x03
    116a:	12 82       	std	Z+2, r1	; 0x02
    116c:	9e 01       	movw	r18, r28
    116e:	25 54       	subi	r18, 0x45	; 69
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	fc 01       	movw	r30, r24
    1174:	33 83       	std	Z+3, r19	; 0x03
    1176:	22 83       	std	Z+2, r18	; 0x02
    1178:	f9 01       	movw	r30, r18
    117a:	13 82       	std	Z+3, r1	; 0x03
    117c:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &cRight.value; then1.value = &left.value;
    117e:	8a 58       	subi	r24, 0x8A	; 138
    1180:	91 09       	sbc	r25, r1
    1182:	fa 01       	movw	r30, r20
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	fa e0       	ldi	r31, 0x0A	; 10
    118a:	6f 0e       	add	r6, r31
    118c:	71 1c       	adc	r7, r1
    118e:	f9 01       	movw	r30, r18
    1190:	71 82       	std	Z+1, r7	; 0x01
    1192:	60 82       	st	Z, r6

	////RULE 2 "if cPosition is cLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1194:	2c 5f       	subi	r18, 0xFC	; 252
    1196:	3f 4f       	sbci	r19, 0xFF	; 255
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	3c 93       	st	X, r19
    119c:	2e 93       	st	-X, r18
    119e:	f9 01       	movw	r30, r18
    11a0:	13 82       	std	Z+3, r1	; 0x03
    11a2:	12 82       	std	Z+2, r1	; 0x02
    11a4:	88 55       	subi	r24, 0x58	; 88
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
    11ae:	12 97       	sbiw	r26, 0x02	; 2
    11b0:	fc 01       	movw	r30, r24
    11b2:	13 82       	std	Z+3, r1	; 0x03
    11b4:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &cLeft.value; then2.value = &right.value;
    11b6:	fa e0       	ldi	r31, 0x0A	; 10
    11b8:	4f 0e       	add	r4, r31
    11ba:	51 1c       	adc	r5, r1
    11bc:	f9 01       	movw	r30, r18
    11be:	51 82       	std	Z+1, r5	; 0x01
    11c0:	40 82       	st	Z, r4
    11c2:	fa e0       	ldi	r31, 0x0A	; 10
    11c4:	8f 0e       	add	r8, r31
    11c6:	91 1c       	adc	r9, r1
    11c8:	fc 01       	movw	r30, r24
    11ca:	91 82       	std	Z+1, r9	; 0x01
    11cc:	80 82       	st	Z, r8

	////RULE 3 "if cPosition is centre and vOrientation is rightOriented then steering is left"
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    11ce:	04 96       	adiw	r24, 0x04	; 4
    11d0:	fb 01       	movw	r30, r22
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	fc 01       	movw	r30, r24
    11d8:	13 82       	std	Z+3, r1	; 0x03
    11da:	12 82       	std	Z+2, r1	; 0x02
    11dc:	90 96       	adiw	r26, 0x20	; 32
    11de:	fb 01       	movw	r30, r22
    11e0:	b3 83       	std	Z+3, r27	; 0x03
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	13 96       	adiw	r26, 0x03	; 3
    11e6:	1c 92       	st	X, r1
    11e8:	1e 92       	st	-X, r1
    11ea:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &centre.value; then3.value = &straight.value;
    11ec:	2e 58       	subi	r18, 0x8E	; 142
    11ee:	31 09       	sbc	r19, r1
    11f0:	fc 01       	movw	r30, r24
    11f2:	31 83       	std	Z+1, r19	; 0x01
    11f4:	20 83       	st	Z, r18
    11f6:	fa e0       	ldi	r31, 0x0A	; 10
    11f8:	af 0e       	add	r10, r31
    11fa:	b1 1c       	adc	r11, r1
    11fc:	ad 92       	st	X+, r10
    11fe:	bc 92       	st	X, r11


	// the methods performing the FLC
	fuzzification();
    1200:	5b dd       	rcall	.-1354   	; 0xcb8 <fuzzification>
	rule_evaluation();
    1202:	81 dd       	rcall	.-1278   	; 0xd06 <rule_evaluation>
	defuzzification();
    1204:	c6 dd       	rcall	.-1140   	; 0xd92 <defuzzification>
	
	steering.value = steering.value*10;
    1206:	f6 01       	movw	r30, r12
    1208:	22 85       	ldd	r18, Z+10	; 0x0a
    120a:	33 85       	ldd	r19, Z+11	; 0x0b
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	93 87       	std	Z+11, r25	; 0x0b
    1224:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1226:	86 3e       	cpi	r24, 0xE6	; 230
    1228:	f7 e0       	ldi	r31, 0x07	; 7
    122a:	9f 07       	cpc	r25, r31
    122c:	24 f4       	brge	.+8      	; 0x1236 <straightIntersection+0x2b4>
	{
		setServo(MAXLEFT);
    122e:	86 ee       	ldi	r24, 0xE6	; 230
    1230:	97 e0       	ldi	r25, 0x07	; 7
    1232:	c5 d4       	rcall	.+2442   	; 0x1bbe <setServo>
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <straightIntersection+0x2c6>
	}
	else if (steering.value >MAXRIGHT)
    1236:	85 3e       	cpi	r24, 0xE5	; 229
    1238:	2c e0       	ldi	r18, 0x0C	; 12
    123a:	92 07       	cpc	r25, r18
    123c:	24 f0       	brlt	.+8      	; 0x1246 <straightIntersection+0x2c4>
	{
		setServo(MAXRIGHT);
    123e:	84 ee       	ldi	r24, 0xE4	; 228
    1240:	9c e0       	ldi	r25, 0x0C	; 12
    1242:	bd d4       	rcall	.+2426   	; 0x1bbe <setServo>
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <straightIntersection+0x2c6>
	}
	else
	{
		setServo(steering.value);
    1246:	bb d4       	rcall	.+2422   	; 0x1bbe <setServo>
	}

}
    1248:	c2 53       	subi	r28, 0x32	; 50
    124a:	df 4f       	sbci	r29, 0xFF	; 255
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	7f 90       	pop	r7
    1270:	6f 90       	pop	r6
    1272:	5f 90       	pop	r5
    1274:	4f 90       	pop	r4
    1276:	08 95       	ret

00001278 <intersection>:


void intersection(int gyro, unsigned char type, int c, int v)
{
	if (gyro<0)
    1278:	99 23       	and	r25, r25
    127a:	24 f4       	brge	.+8      	; 0x1284 <intersection+0xc>
	{
		gyro = -gyro;
    127c:	91 95       	neg	r25
    127e:	81 95       	neg	r24
    1280:	91 09       	sbc	r25, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <intersection+0x16>
    1284:	8e 37       	cpi	r24, 0x7E	; 126
    1286:	91 05       	cpc	r25, r1
    1288:	14 f0       	brlt	.+4      	; 0x128e <intersection+0x16>
    128a:	8d e7       	ldi	r24, 0x7D	; 125
    128c:	90 e0       	ldi	r25, 0x00	; 0
	{
		gyro = maxGyro;
	}
	
	
	if (type == 'r')
    128e:	62 37       	cpi	r22, 0x72	; 114
    1290:	51 f4       	brne	.+20     	; 0x12a6 <intersection+0x2e>
	{
		// rightTurn(gyro);
		if (gyro<25)
    1292:	49 97       	sbiw	r24, 0x19	; 25
    1294:	24 f4       	brge	.+8      	; 0x129e <intersection+0x26>
		{
			setServo(MAXRIGHT-400);
    1296:	84 e5       	ldi	r24, 0x54	; 84
    1298:	9b e0       	ldi	r25, 0x0B	; 11
    129a:	91 c4       	rjmp	.+2338   	; 0x1bbe <setServo>
    129c:	08 95       	ret
		}
		else
		{
			setServo(MAXRIGHT); // maxright-180
    129e:	84 ee       	ldi	r24, 0xE4	; 228
    12a0:	9c e0       	ldi	r25, 0x0C	; 12
    12a2:	8d c4       	rjmp	.+2330   	; 0x1bbe <setServo>
    12a4:	08 95       	ret
		}
	}
	else if (type == 'l')
    12a6:	6c 36       	cpi	r22, 0x6C	; 108
    12a8:	51 f4       	brne	.+20     	; 0x12be <intersection+0x46>
	{
		// leftTurn(gyro);               // original plan
		if (gyro < 6)                  // hard coded
    12aa:	06 97       	sbiw	r24, 0x06	; 6
    12ac:	24 f4       	brge	.+8      	; 0x12b6 <intersection+0x3e>
		{
			setServo(STRAIGHT-150);
    12ae:	88 e8       	ldi	r24, 0x88	; 136
    12b0:	99 e0       	ldi	r25, 0x09	; 9
    12b2:	85 c4       	rjmp	.+2314   	; 0x1bbe <setServo>
    12b4:	08 95       	ret
		}
		else
		{
			setServo(MAXLEFT);
    12b6:	86 ee       	ldi	r24, 0xE6	; 230
    12b8:	97 e0       	ldi	r25, 0x07	; 7
    12ba:	81 c4       	rjmp	.+2306   	; 0x1bbe <setServo>
    12bc:	08 95       	ret
		}
	}
	else if (type == 'F')
    12be:	66 34       	cpi	r22, 0x46	; 70
    12c0:	61 f4       	brne	.+24     	; 0x12da <intersection+0x62>
	{
		if (v==81 && c == 2)             // State "no left side"
    12c2:	21 35       	cpi	r18, 0x51	; 81
    12c4:	31 05       	cpc	r19, r1
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <intersection+0x5e>
    12c8:	42 30       	cpi	r20, 0x02	; 2
    12ca:	51 05       	cpc	r21, r1
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <intersection+0x5e>
		{
			setServo(STRAIGHT-300);
    12ce:	82 ef       	ldi	r24, 0xF2	; 242
    12d0:	98 e0       	ldi	r25, 0x08	; 8
    12d2:	75 c4       	rjmp	.+2282   	; 0x1bbe <setServo>
    12d4:	08 95       	ret
		}
		else
		{
			//setServo(STRAIGHT);
			straightIntersection(c);
    12d6:	ca 01       	movw	r24, r20
    12d8:	54 ce       	rjmp	.-856    	; 0xf82 <straightIntersection>
    12da:	08 95       	ret

000012dc <carInit>:
* to allow the operator to turn on the ESC manually
* and thus set the neutral
*/
void carInit(void)
{
	pwmInit();
    12dc:	46 d4       	rcall	.+2188   	; 0x1b6a <pwmInit>
	spi_slave_init();
    12de:	f6 d4       	rcall	.+2540   	; 0x1ccc <spi_slave_init>
	OCR1A = NEUTRAL;
    12e0:	8d ec       	ldi	r24, 0xCD	; 205
    12e2:	9a e0       	ldi	r25, 0x0A	; 10
    12e4:	90 93 89 00 	sts	0x0089, r25
    12e8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = STRAIGHT;
    12ec:	8e e1       	ldi	r24, 0x1E	; 30
    12ee:	9a e0       	ldi	r25, 0x0A	; 10
    12f0:	90 93 8b 00 	sts	0x008B, r25
    12f4:	80 93 8a 00 	sts	0x008A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	90 ee       	ldi	r25, 0xE0	; 224
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	80 40       	sbci	r24, 0x00	; 0
    1302:	90 40       	sbci	r25, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <carInit+0x22>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <carInit+0x2c>
    1308:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 2900;
    130a:	84 e5       	ldi	r24, 0x54	; 84
    130c:	9b e0       	ldi	r25, 0x0B	; 11
    130e:	90 93 89 00 	sts	0x0089, r25
    1312:	80 93 88 00 	sts	0x0088, r24
    1316:	2f ef       	ldi	r18, 0xFF	; 255
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	90 ee       	ldi	r25, 0xE0	; 224
    131c:	21 50       	subi	r18, 0x01	; 1
    131e:	80 40       	sbci	r24, 0x00	; 0
    1320:	90 40       	sbci	r25, 0x00	; 0
    1322:	e1 f7       	brne	.-8      	; 0x131c <carInit+0x40>
    1324:	00 c0       	rjmp	.+0      	; 0x1326 <carInit+0x4a>
    1326:	00 00       	nop
	_delay_ms(5000);
	setESC(NEUTRAL);
    1328:	8d ec       	ldi	r24, 0xCD	; 205
    132a:	9a e0       	ldi	r25, 0x0A	; 10
    132c:	2d c4       	rjmp	.+2138   	; 0x1b88 <setESC>
    132e:	08 95       	ret

00001330 <main>:



//////////////// MAIN /////////////////////////////////////////////////////////////
int main (void)
{
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	2f 97       	sbiw	r28, 0x0f	; 15
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61

	int man_velocity = 0;
    1344:	1a 82       	std	Y+2, r1	; 0x02
    1346:	19 82       	std	Y+1, r1	; 0x01
	int man_steering = 0;
    1348:	1c 82       	std	Y+4, r1	; 0x04
    134a:	1b 82       	std	Y+3, r1	; 0x03

	carInit();
    134c:	c7 df       	rcall	.-114    	; 0x12dc <carInit>
	volatile struct Sensor_information sensor_info;
	struct Sensor_information* sens_info_ptr;
	sens_info_ptr = &sensor_info;
	volatile unsigned char control_mode;
	unsigned char prev_control_mode;
	sei();
    134e:	78 94       	sei
			}
			
			else if (control_mode == 1)
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
    1350:	0f 2e       	mov	r0, r31
    1352:	fa e8       	ldi	r31, 0x8A	; 138
    1354:	af 2e       	mov	r10, r31
    1356:	b1 2c       	mov	r11, r1
    1358:	f0 2d       	mov	r31, r0
    135a:	0f 2e       	mov	r0, r31
    135c:	f8 e8       	ldi	r31, 0x88	; 136
    135e:	cf 2e       	mov	r12, r31
    1360:	d1 2c       	mov	r13, r1
    1362:	f0 2d       	mov	r31, r0
	sei();
	

	while (1)
	{
		if (is_package_recieved())
    1364:	40 d5       	rcall	.+2688   	; 0x1de6 <is_package_recieved>
    1366:	88 23       	and	r24, r24
    1368:	e9 f3       	breq	.-6      	; 0x1364 <main+0x34>
		{
			
			//Reading Information
			prev_control_mode = control_mode;
    136a:	4f 84       	ldd	r4, Y+15	; 0x0f
			read_sensor_info(&control_mode, sens_info_ptr);
    136c:	be 01       	movw	r22, r28
    136e:	6b 5f       	subi	r22, 0xFB	; 251
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	ce 01       	movw	r24, r28
    1374:	0f 96       	adiw	r24, 0x0f	; 15
    1376:	41 d5       	rcall	.+2690   	; 0x1dfa <read_sensor_info>
			
			int sF = (int) sensor_info.dist_sonic_middle;
    1378:	ef 80       	ldd	r14, Y+7	; 0x07
    137a:	f1 2c       	mov	r15, r1
			int sB = (int) sensor_info.dist_sonic_back;
    137c:	5a 84       	ldd	r5, Y+10	; 0x0a
			int c = (int) sensor_info.dist_right_line;
    137e:	0d 81       	ldd	r16, Y+5	; 0x05
    1380:	10 e0       	ldi	r17, 0x00	; 0
			int v = (int) sensor_info.angular_diff;
    1382:	8e 80       	ldd	r8, Y+6	; 0x06
    1384:	91 2c       	mov	r9, r1
			int gyro = (int) sensor_info.angle - 125;
    1386:	7c 84       	ldd	r7, Y+12	; 0x0c
			unsigned char type = (unsigned) (char) sensor_info.next_turn_decision;
    1388:	8e 85       	ldd	r24, Y+14	; 0x0e
			int manualInstruction = (int) sensor_info.dist_right_line;
    138a:	6d 80       	ldd	r6, Y+5	; 0x05
			
			if(control_mode == 0x01 && prev_control_mode == 0x04){
    138c:	8f 85       	ldd	r24, Y+15	; 0x0f
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	39 f4       	brne	.+14     	; 0x13a0 <main+0x70>
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	48 12       	cpse	r4, r24
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <main+0x70>
				count(1);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 66 00 	call	0xcc	; 0xcc <count>
			}
			
			cli();
    13a0:	f8 94       	cli
			
			if (control_mode == 0)
    13a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a4:	81 11       	cpse	r24, r1
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <main+0x92>
			{
				FLC_speed(OCR1A, sF, OCR1B);
    13a8:	f5 01       	movw	r30, r10
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	f6 01       	movw	r30, r12
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	b7 01       	movw	r22, r14
    13b6:	0e 94 76 00 	call	0xec	; 0xec <FLC_speed>
				nFuzzySteering(c,v);
    13ba:	b4 01       	movw	r22, r8
    13bc:	c8 01       	movw	r24, r16
    13be:	bf d3       	rcall	.+1918   	; 0x1b3e <nFuzzySteering>
    13c0:	2d c0       	rjmp	.+90     	; 0x141c <main+0xec>
			}
			else if (control_mode == 4)
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	39 f4       	brne	.+14     	; 0x13d6 <main+0xa6>
			{
				setESC(NEUTRAL);
    13c8:	8d ec       	ldi	r24, 0xCD	; 205
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	dd d3       	rcall	.+1978   	; 0x1b88 <setESC>
				setServo(STRAIGHT);
    13ce:	8e e1       	ldi	r24, 0x1E	; 30
    13d0:	9a e0       	ldi	r25, 0x0A	; 10
    13d2:	f5 d3       	rcall	.+2026   	; 0x1bbe <setServo>
    13d4:	23 c0       	rjmp	.+70     	; 0x141c <main+0xec>
			}
			
			else if (control_mode == 1)
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 f4       	brne	.+36     	; 0x1400 <main+0xd0>
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
    13dc:	f5 01       	movw	r30, r10
    13de:	40 81       	ld	r20, Z
    13e0:	51 81       	ldd	r21, Z+1	; 0x01
    13e2:	f6 01       	movw	r30, r12
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	b7 01       	movw	r22, r14
    13ea:	0e 94 76 00 	call	0xec	; 0xec <FLC_speed>
				
			intersection(gyro, sensor_info.next_turn_decision, c, v);
    13ee:	6e 85       	ldd	r22, Y+14	; 0x0e
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			int gyro = (int) sensor_info.angle - 125;
    13f0:	87 2d       	mov	r24, r7
    13f2:	90 e0       	ldi	r25, 0x00	; 0
			else if (control_mode == 1)
			{
				
			FLC_speed(OCR1A, sF, OCR1B);
				
			intersection(gyro, sensor_info.next_turn_decision, c, v);
    13f4:	94 01       	movw	r18, r8
    13f6:	a8 01       	movw	r20, r16
    13f8:	8d 57       	subi	r24, 0x7D	; 125
    13fa:	91 09       	sbc	r25, r1
    13fc:	3d df       	rcall	.-390    	; 0x1278 <intersection>
    13fe:	0e c0       	rjmp	.+28     	; 0x141c <main+0xec>
	

			}
			else if (control_mode == 6)
    1400:	8f 85       	ldd	r24, Y+15	; 0x0f
    1402:	86 30       	cpi	r24, 0x06	; 6
    1404:	59 f4       	brne	.+22     	; 0x141c <main+0xec>
			//Reading Information
			prev_control_mode = control_mode;
			read_sensor_info(&control_mode, sens_info_ptr);
			
			int sF = (int) sensor_info.dist_sonic_middle;
			int sB = (int) sensor_info.dist_sonic_back;
    1406:	45 2d       	mov	r20, r5
    1408:	50 e0       	ldi	r21, 0x00	; 0
	

			}
			else if (control_mode == 6)
			{
				manualMode(manualInstruction, sF, sB, &man_velocity, &man_steering);
    140a:	8e 01       	movw	r16, r28
    140c:	0d 5f       	subi	r16, 0xFD	; 253
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	9e 01       	movw	r18, r28
    1412:	2f 5f       	subi	r18, 0xFF	; 255
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	b7 01       	movw	r22, r14
    1418:	86 2d       	mov	r24, r6
    141a:	10 d0       	rcall	.+32     	; 0x143c <manualMode>
			}

			
			sei();
    141c:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = OCR1A;
    141e:	f6 01       	movw	r30, r12
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = OCR1B;
    1424:	f5 01       	movw	r30, r10
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
			//Big endian
			unsigned int temp_ESC;
			temp_ESC = (esc_value_to_send<<8) & 0xFF;
			unsigned int temp_steering;
			temp_steering = (steering_value_to_send<<8) & 0xFF;
			spi_send_byte(0x05);
    142a:	85 e0       	ldi	r24, 0x05	; 5
    142c:	85 d4       	rcall	.+2314   	; 0x1d38 <spi_send_byte>
			spi_send_byte(0x06);
    142e:	86 e0       	ldi	r24, 0x06	; 6
    1430:	83 d4       	rcall	.+2310   	; 0x1d38 <spi_send_byte>
			spi_send_byte(0x07);
    1432:	87 e0       	ldi	r24, 0x07	; 7
    1434:	81 d4       	rcall	.+2306   	; 0x1d38 <spi_send_byte>
			spi_send_byte(0x08);
    1436:	88 e0       	ldi	r24, 0x08	; 8
    1438:	7f d4       	rcall	.+2302   	; 0x1d38 <spi_send_byte>
    143a:	94 cf       	rjmp	.-216    	; 0x1364 <main+0x34>

0000143c <manualMode>:
 * This method performs the manual mode of driving
 * The manual instructions are forward, left, right, reverse stored in array manualInstruction
 *
 */
void manualMode(char manualInstructions, int sF, int sB, int* man_velocity, int* man_steering)
{
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	e9 01       	movw	r28, r18
	cli(); //disable interrupts	
    1446:	f8 94       	cli
	
	if (manualInstructions & (1<<4))
    1448:	84 ff       	sbrs	r24, 4
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <manualMode+0x1c>
	{
		*man_velocity = *man_velocity +  5;
    144c:	28 81       	ld	r18, Y
    144e:	39 81       	ldd	r19, Y+1	; 0x01
    1450:	2b 5f       	subi	r18, 0xFB	; 251
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	39 83       	std	Y+1, r19	; 0x01
    1456:	28 83       	st	Y, r18
	} 
	if (manualInstructions & (1<<5))
    1458:	85 ff       	sbrs	r24, 5
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <manualMode+0x2c>
	{
		*man_velocity = *man_velocity - 5;
    145c:	28 81       	ld	r18, Y
    145e:	39 81       	ldd	r19, Y+1	; 0x01
    1460:	25 50       	subi	r18, 0x05	; 5
    1462:	31 09       	sbc	r19, r1
    1464:	39 83       	std	Y+1, r19	; 0x01
    1466:	28 83       	st	Y, r18
	}
	if (manualInstructions & (1<<0))
    1468:	80 ff       	sbrs	r24, 0
    146a:	07 c0       	rjmp	.+14     	; 0x147a <manualMode+0x3e>
	{
		*man_steering = *man_steering - 100;
    146c:	f8 01       	movw	r30, r16
    146e:	20 81       	ld	r18, Z
    1470:	31 81       	ldd	r19, Z+1	; 0x01
    1472:	24 56       	subi	r18, 0x64	; 100
    1474:	31 09       	sbc	r19, r1
    1476:	31 83       	std	Z+1, r19	; 0x01
    1478:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<1))
    147a:	81 ff       	sbrs	r24, 1
    147c:	07 c0       	rjmp	.+14     	; 0x148c <manualMode+0x50>
	{
		*man_steering = *man_steering + 100;
    147e:	f8 01       	movw	r30, r16
    1480:	20 81       	ld	r18, Z
    1482:	31 81       	ldd	r19, Z+1	; 0x01
    1484:	2c 59       	subi	r18, 0x9C	; 156
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	31 83       	std	Z+1, r19	; 0x01
    148a:	20 83       	st	Z, r18
	}
	if (manualInstructions & (1<<2))
    148c:	82 ff       	sbrs	r24, 2
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <manualMode+0x5a>
	{
		*man_steering = 0;
    1490:	f8 01       	movw	r30, r16
    1492:	11 82       	std	Z+1, r1	; 0x01
    1494:	10 82       	st	Z, r1
	}
	if (manualInstructions & (1<<3))
    1496:	83 ff       	sbrs	r24, 3
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <manualMode+0x68>
	{
		*man_steering = 0;
    149a:	f8 01       	movw	r30, r16
    149c:	11 82       	std	Z+1, r1	; 0x01
    149e:	10 82       	st	Z, r1
		*man_velocity = 0;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	18 82       	st	Y, r1
	}
	
	if (sF<30 && (*man_velocity > 0))
    14a4:	6e 31       	cpi	r22, 0x1E	; 30
    14a6:	71 05       	cpc	r23, r1
    14a8:	5c f4       	brge	.+22     	; 0x14c0 <manualMode+0x84>
    14aa:	88 81       	ld	r24, Y
    14ac:	99 81       	ldd	r25, Y+1	; 0x01
    14ae:	18 16       	cp	r1, r24
    14b0:	19 06       	cpc	r1, r25
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <manualMode+0x84>
	{
		setESC(NEUTRAL);
    14b4:	8d ec       	ldi	r24, 0xCD	; 205
    14b6:	9a e0       	ldi	r25, 0x0A	; 10
    14b8:	67 d3       	rcall	.+1742   	; 0x1b88 <setESC>
		*man_velocity = 0;
    14ba:	19 82       	std	Y+1, r1	; 0x01
    14bc:	18 82       	st	Y, r1
    14be:	12 c0       	rjmp	.+36     	; 0x14e4 <manualMode+0xa8>
	} 
	else if(sB<30 && (*man_velocity < 0))
    14c0:	4e 31       	cpi	r20, 0x1E	; 30
    14c2:	51 05       	cpc	r21, r1
    14c4:	54 f4       	brge	.+20     	; 0x14da <manualMode+0x9e>
    14c6:	88 81       	ld	r24, Y
    14c8:	99 81       	ldd	r25, Y+1	; 0x01
    14ca:	99 23       	and	r25, r25
    14cc:	34 f4       	brge	.+12     	; 0x14da <manualMode+0x9e>
	{
		setESC(NEUTRAL);
    14ce:	8d ec       	ldi	r24, 0xCD	; 205
    14d0:	9a e0       	ldi	r25, 0x0A	; 10
    14d2:	5a d3       	rcall	.+1716   	; 0x1b88 <setESC>
		*man_velocity = 0;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	18 82       	st	Y, r1
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <manualMode+0xa8>
	}
	else
	{
		setESC(NEUTRAL + *man_velocity);	
    14da:	88 81       	ld	r24, Y
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	83 53       	subi	r24, 0x33	; 51
    14e0:	95 4f       	sbci	r25, 0xF5	; 245
    14e2:	52 d3       	rcall	.+1700   	; 0x1b88 <setESC>
	}
	
	setServo(STRAIGHT + *man_steering);
    14e4:	f8 01       	movw	r30, r16
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	82 5e       	subi	r24, 0xE2	; 226
    14ec:	95 4f       	sbci	r25, 0xF5	; 245
    14ee:	67 d3       	rcall	.+1742   	; 0x1bbe <setServo>
	
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <nDoFuzzy>:
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////

void nDoFuzzy(int c, int v)
{      
    14fa:	2f 92       	push	r2
    14fc:	3f 92       	push	r3
    14fe:	4f 92       	push	r4
    1500:	5f 92       	push	r5
    1502:	6f 92       	push	r6
    1504:	7f 92       	push	r7
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	ce 5b       	subi	r28, 0xBE	; 190
    1524:	d1 40       	sbci	r29, 0x01	; 1
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	c3 54       	subi	r28, 0x43	; 67
    1532:	de 4f       	sbci	r29, 0xFE	; 254
    1534:	99 83       	std	Y+1, r25	; 0x01
    1536:	88 83       	st	Y, r24
    1538:	cd 5b       	subi	r28, 0xBD	; 189
    153a:	d1 40       	sbci	r29, 0x01	; 1
    153c:	1b 01       	movw	r2, r22
	///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
	
	
	int adjustC = 10;
	
	struct io_type delta_C; strcpy(delta_C.name, "delta_C");
    153e:	88 e0       	ldi	r24, 0x08	; 8
    1540:	e2 ea       	ldi	r30, 0xA2	; 162
    1542:	f1 e0       	ldi	r31, 0x01	; 1
    1544:	de 01       	movw	r26, r28
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	01 90       	ld	r0, Z+
    154a:	0d 92       	st	X+, r0
    154c:	8a 95       	dec	r24
    154e:	e1 f7       	brne	.-8      	; 0x1548 <nDoFuzzy+0x4e>
	
	struct mf_type farRight;
	MATLAB_MF(&farRight, "farRight", 99, 100, 120+adjustC, 130+adjustC); // Min_value = 100
    1550:	3e 01       	movw	r6, r28
    1552:	21 e1       	ldi	r18, 0x11	; 17
    1554:	62 0e       	add	r6, r18
    1556:	71 1c       	adc	r7, r1
    1558:	0f 2e       	mov	r0, r31
    155a:	fc e8       	ldi	r31, 0x8C	; 140
    155c:	ef 2e       	mov	r14, r31
    155e:	f1 2c       	mov	r15, r1
    1560:	f0 2d       	mov	r31, r0
    1562:	02 e8       	ldi	r16, 0x82	; 130
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	24 e6       	ldi	r18, 0x64	; 100
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	43 e6       	ldi	r20, 0x63	; 99
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	6a ea       	ldi	r22, 0xAA	; 170
    1570:	71 e0       	ldi	r23, 0x01	; 1
    1572:	c3 01       	movw	r24, r6
    1574:	d4 dc       	rcall	.-1624   	; 0xf1e <MATLAB_MF>
	struct mf_type smallRight;
	MATLAB_MF(&smallRight, "smallRig", 120+adjustC, 130+adjustC, 140+adjustC, 145+adjustC);
    1576:	4e 01       	movw	r8, r28
    1578:	47 e2       	ldi	r20, 0x27	; 39
    157a:	84 0e       	add	r8, r20
    157c:	91 1c       	adc	r9, r1
    157e:	0f 2e       	mov	r0, r31
    1580:	fb e9       	ldi	r31, 0x9B	; 155
    1582:	ef 2e       	mov	r14, r31
    1584:	f1 2c       	mov	r15, r1
    1586:	f0 2d       	mov	r31, r0
    1588:	06 e9       	ldi	r16, 0x96	; 150
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	2c e8       	ldi	r18, 0x8C	; 140
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	42 e8       	ldi	r20, 0x82	; 130
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	63 eb       	ldi	r22, 0xB3	; 179
    1596:	71 e0       	ldi	r23, 0x01	; 1
    1598:	c4 01       	movw	r24, r8
    159a:	c1 dc       	rcall	.-1662   	; 0xf1e <MATLAB_MF>
	struct mf_type centre;
	MATLAB_MF(&centre, "centre", 135+adjustC, 150+adjustC, 150+adjustC, 165+adjustC);
    159c:	2e 01       	movw	r4, r28
    159e:	6d e3       	ldi	r22, 0x3D	; 61
    15a0:	46 0e       	add	r4, r22
    15a2:	51 1c       	adc	r5, r1
    15a4:	0f 2e       	mov	r0, r31
    15a6:	ff ea       	ldi	r31, 0xAF	; 175
    15a8:	ef 2e       	mov	r14, r31
    15aa:	f1 2c       	mov	r15, r1
    15ac:	f0 2d       	mov	r31, r0
    15ae:	00 ea       	ldi	r16, 0xA0	; 160
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	20 ea       	ldi	r18, 0xA0	; 160
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	41 e9       	ldi	r20, 0x91	; 145
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	6b e8       	ldi	r22, 0x8B	; 139
    15bc:	71 e0       	ldi	r23, 0x01	; 1
    15be:	c2 01       	movw	r24, r4
    15c0:	ae dc       	rcall	.-1700   	; 0xf1e <MATLAB_MF>
	struct mf_type smallLeft;
	MATLAB_MF(&smallLeft, "smallLe", 155+adjustC, 160+adjustC, 170+adjustC, 180+adjustC);
    15c2:	5e 01       	movw	r10, r28
    15c4:	83 e5       	ldi	r24, 0x53	; 83
    15c6:	a8 0e       	add	r10, r24
    15c8:	b1 1c       	adc	r11, r1
    15ca:	0f 2e       	mov	r0, r31
    15cc:	fe eb       	ldi	r31, 0xBE	; 190
    15ce:	ef 2e       	mov	r14, r31
    15d0:	f1 2c       	mov	r15, r1
    15d2:	f0 2d       	mov	r31, r0
    15d4:	04 eb       	ldi	r16, 0xB4	; 180
    15d6:	10 e0       	ldi	r17, 0x00	; 0
    15d8:	2a ea       	ldi	r18, 0xAA	; 170
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	45 ea       	ldi	r20, 0xA5	; 165
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	6c eb       	ldi	r22, 0xBC	; 188
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	c5 01       	movw	r24, r10
    15e6:	9b dc       	rcall	.-1738   	; 0xf1e <MATLAB_MF>
	struct mf_type farLeft;
	MATLAB_MF(&farLeft, "farLeft", 170+adjustC, 180+adjustC, 200+adjustC, 201+adjustC);  // Max_value = 200
    15e8:	6e 01       	movw	r12, r28
    15ea:	99 e6       	ldi	r25, 0x69	; 105
    15ec:	c9 0e       	add	r12, r25
    15ee:	d1 1c       	adc	r13, r1
    15f0:	0f 2e       	mov	r0, r31
    15f2:	f3 ed       	ldi	r31, 0xD3	; 211
    15f4:	ef 2e       	mov	r14, r31
    15f6:	f1 2c       	mov	r15, r1
    15f8:	f0 2d       	mov	r31, r0
    15fa:	02 ed       	ldi	r16, 0xD2	; 210
    15fc:	10 e0       	ldi	r17, 0x00	; 0
    15fe:	2e eb       	ldi	r18, 0xBE	; 190
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	44 eb       	ldi	r20, 0xB4	; 180
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	64 ec       	ldi	r22, 0xC4	; 196
    1608:	71 e0       	ldi	r23, 0x01	; 1
    160a:	c6 01       	movw	r24, r12
    160c:	88 dc       	rcall	.-1776   	; 0xf1e <MATLAB_MF>
	
	delta_C.membership_functions = &farRight;
    160e:	7e 86       	std	Y+14, r7	; 0x0e
    1610:	6d 86       	std	Y+13, r6	; 0x0d
	farRight.next = &smallRight;
    1612:	9e a2       	std	Y+38, r9	; 0x26
    1614:	8d a2       	std	Y+37, r8	; 0x25
	smallRight.next = &centre;
    1616:	5c ae       	std	Y+60, r5	; 0x3c
    1618:	4b ae       	std	Y+59, r4	; 0x3b
	centre.next = &smallLeft;
    161a:	63 96       	adiw	r28, 0x13	; 19
    161c:	bf ae       	std	Y+63, r11	; 0x3f
    161e:	ae ae       	std	Y+62, r10	; 0x3e
    1620:	63 97       	sbiw	r28, 0x13	; 19
	smallLeft.next = &farLeft;
    1622:	f5 01       	movw	r30, r10
    1624:	d5 8a       	std	Z+21, r13	; 0x15
    1626:	c4 8a       	std	Z+20, r12	; 0x14
	farLeft.next = NULL;
    1628:	f6 01       	movw	r30, r12
    162a:	15 8a       	std	Z+21, r1	; 0x15
    162c:	14 8a       	std	Z+20, r1	; 0x14
	
	// set iErr's input value to measErr value
	if(c<100)				// if sensor value is smaller than delta_C's input set's lower limit
    162e:	c3 54       	subi	r28, 0x43	; 67
    1630:	de 4f       	sbci	r29, 0xFE	; 254
    1632:	88 81       	ld	r24, Y
    1634:	99 81       	ldd	r25, Y+1	; 0x01
    1636:	cd 5b       	subi	r28, 0xBD	; 189
    1638:	d1 40       	sbci	r29, 0x01	; 1
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	91 05       	cpc	r25, r1
    163e:	2c f4       	brge	.+10     	; 0x164a <nDoFuzzy+0x150>
	{
		delta_C.value = 100;  // force input value to lowest point in delta_C's input set
    1640:	84 e6       	ldi	r24, 0x64	; 100
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 87       	std	Y+12, r25	; 0x0c
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <nDoFuzzy+0x17c>
	}
	else if(c>200+adjustC)			// if sensor value is bigger than delta_C's input set's upper limit
    164a:	c3 54       	subi	r28, 0x43	; 67
    164c:	de 4f       	sbci	r29, 0xFE	; 254
    164e:	e8 81       	ld	r30, Y
    1650:	f9 81       	ldd	r31, Y+1	; 0x01
    1652:	cd 5b       	subi	r28, 0xBD	; 189
    1654:	d1 40       	sbci	r29, 0x01	; 1
    1656:	e3 3d       	cpi	r30, 0xD3	; 211
    1658:	f1 05       	cpc	r31, r1
    165a:	2c f0       	brlt	.+10     	; 0x1666 <nDoFuzzy+0x16c>
	{
		delta_C.value = 200+adjustC;  // force input value to lowest point in delta_C's input set
    165c:	82 ed       	ldi	r24, 0xD2	; 210
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	8b 87       	std	Y+11, r24	; 0x0b
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <nDoFuzzy+0x17c>
	}
	else
	{
		delta_C.value = c;
    1666:	c3 54       	subi	r28, 0x43	; 67
    1668:	de 4f       	sbci	r29, 0xFE	; 254
    166a:	88 81       	ld	r24, Y
    166c:	99 81       	ldd	r25, Y+1	; 0x01
    166e:	cd 5b       	subi	r28, 0xBD	; 189
    1670:	d1 40       	sbci	r29, 0x01	; 1
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
	
	struct io_type delta_V; strcpy(delta_V.name, "delta_V");
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	ec ec       	ldi	r30, 0xCC	; 204
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	de 01       	movw	r26, r28
    167e:	a1 58       	subi	r26, 0x81	; 129
    1680:	bf 4f       	sbci	r27, 0xFF	; 255
    1682:	01 90       	ld	r0, Z+
    1684:	0d 92       	st	X+, r0
    1686:	8a 95       	dec	r24
    1688:	e1 f7       	brne	.-8      	; 0x1682 <nDoFuzzy+0x188>
	
	struct mf_type leftOriented;
	MATLAB_MF(&leftOriented, "leftOri", -1, 0, 0, 60); // min V is 0
    168a:	4e 01       	movw	r8, r28
    168c:	9f e8       	ldi	r25, 0x8F	; 143
    168e:	89 0e       	add	r8, r25
    1690:	91 1c       	adc	r9, r1
    1692:	0f 2e       	mov	r0, r31
    1694:	fc e3       	ldi	r31, 0x3C	; 60
    1696:	ef 2e       	mov	r14, r31
    1698:	f1 2c       	mov	r15, r1
    169a:	f0 2d       	mov	r31, r0
    169c:	00 e0       	ldi	r16, 0x00	; 0
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4f ef       	ldi	r20, 0xFF	; 255
    16a6:	5f ef       	ldi	r21, 0xFF	; 255
    16a8:	64 ed       	ldi	r22, 0xD4	; 212
    16aa:	71 e0       	ldi	r23, 0x01	; 1
    16ac:	c4 01       	movw	r24, r8
    16ae:	37 dc       	rcall	.-1938   	; 0xf1e <MATLAB_MF>
	
	struct mf_type straightOriented;
	MATLAB_MF(&straightOriented, "straOri", 10, 40, 40, 70);
    16b0:	5e 01       	movw	r10, r28
    16b2:	e5 ea       	ldi	r30, 0xA5	; 165
    16b4:	ae 0e       	add	r10, r30
    16b6:	b1 1c       	adc	r11, r1
    16b8:	0f 2e       	mov	r0, r31
    16ba:	f6 e4       	ldi	r31, 0x46	; 70
    16bc:	ef 2e       	mov	r14, r31
    16be:	f1 2c       	mov	r15, r1
    16c0:	f0 2d       	mov	r31, r0
    16c2:	08 e2       	ldi	r16, 0x28	; 40
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	28 e2       	ldi	r18, 0x28	; 40
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4a e0       	ldi	r20, 0x0A	; 10
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	6c ed       	ldi	r22, 0xDC	; 220
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	c5 01       	movw	r24, r10
    16d4:	24 dc       	rcall	.-1976   	; 0xf1e <MATLAB_MF>
		
	struct mf_type rightOriented;
	MATLAB_MF(&rightOriented, "rightOri", 20, 80, 80, 81); // max V is 80
    16d6:	6e 01       	movw	r12, r28
    16d8:	fb eb       	ldi	r31, 0xBB	; 187
    16da:	cf 0e       	add	r12, r31
    16dc:	d1 1c       	adc	r13, r1
    16de:	0f 2e       	mov	r0, r31
    16e0:	f1 e5       	ldi	r31, 0x51	; 81
    16e2:	ef 2e       	mov	r14, r31
    16e4:	f1 2c       	mov	r15, r1
    16e6:	f0 2d       	mov	r31, r0
    16e8:	00 e5       	ldi	r16, 0x50	; 80
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	20 e5       	ldi	r18, 0x50	; 80
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	44 e1       	ldi	r20, 0x14	; 20
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	64 ee       	ldi	r22, 0xE4	; 228
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	c6 01       	movw	r24, r12
    16fa:	11 dc       	rcall	.-2014   	; 0xf1e <MATLAB_MF>

	delta_V.membership_functions = &leftOriented;
    16fc:	c5 57       	subi	r28, 0x75	; 117
    16fe:	df 4f       	sbci	r29, 0xFF	; 255
    1700:	99 82       	std	Y+1, r9	; 0x01
    1702:	88 82       	st	Y, r8
    1704:	cb 58       	subi	r28, 0x8B	; 139
    1706:	d0 40       	sbci	r29, 0x00	; 0
	leftOriented.next = &straightOriented;
    1708:	f4 01       	movw	r30, r8
    170a:	b5 8a       	std	Z+21, r11	; 0x15
    170c:	a4 8a       	std	Z+20, r10	; 0x14
	straightOriented.next = &rightOriented;
    170e:	f5 01       	movw	r30, r10
    1710:	d5 8a       	std	Z+21, r13	; 0x15
    1712:	c4 8a       	std	Z+20, r12	; 0x14
	rightOriented.next = NULL;
    1714:	f6 01       	movw	r30, r12
    1716:	15 8a       	std	Z+21, r1	; 0x15
    1718:	14 8a       	std	Z+20, r1	; 0x14
	
	// set V's input value to V´s value
	if(v<=0)				// if sensor value is smaller than error's input set lower limit
    171a:	12 14       	cp	r1, r2
    171c:	13 04       	cpc	r1, r3
    171e:	4c f0       	brlt	.+18     	; 0x1732 <nDoFuzzy+0x238>
	{
		delta_V.value = 1;  // force input value to lowest point in delta_V's input set
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	c7 57       	subi	r28, 0x77	; 119
    1726:	df 4f       	sbci	r29, 0xFF	; 255
    1728:	99 83       	std	Y+1, r25	; 0x01
    172a:	88 83       	st	Y, r24
    172c:	c9 58       	subi	r28, 0x89	; 137
    172e:	d0 40       	sbci	r29, 0x00	; 0
    1730:	13 c0       	rjmp	.+38     	; 0x1758 <nDoFuzzy+0x25e>
	}
	else if(v>=80)			// if sensor value is bigger than error's input set's upper limit
    1732:	f0 e5       	ldi	r31, 0x50	; 80
    1734:	2f 16       	cp	r2, r31
    1736:	31 04       	cpc	r3, r1
    1738:	4c f0       	brlt	.+18     	; 0x174c <nDoFuzzy+0x252>
	{
		delta_V.value = 79;  // force input value to lowest point in error's input set
    173a:	8f e4       	ldi	r24, 0x4F	; 79
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	c7 57       	subi	r28, 0x77	; 119
    1740:	df 4f       	sbci	r29, 0xFF	; 255
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	88 83       	st	Y, r24
    1746:	c9 58       	subi	r28, 0x89	; 137
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <nDoFuzzy+0x25e>
	}
	else
	{
		delta_V.value = v;
    174c:	c7 57       	subi	r28, 0x77	; 119
    174e:	df 4f       	sbci	r29, 0xFF	; 255
    1750:	39 82       	std	Y+1, r3	; 0x01
    1752:	28 82       	st	Y, r2
    1754:	c9 58       	subi	r28, 0x89	; 137
    1756:	d0 40       	sbci	r29, 0x00	; 0
	}
	
	///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

	struct io_type steering; strcpy(steering.name, "steering"); // All outputs downscaled by a factor 10
    1758:	6e 01       	movw	r12, r28
    175a:	21 ed       	ldi	r18, 0xD1	; 209
    175c:	c2 0e       	add	r12, r18
    175e:	d1 1c       	adc	r13, r1
    1760:	89 e0       	ldi	r24, 0x09	; 9
    1762:	e9 e0       	ldi	r30, 0x09	; 9
    1764:	f1 e0       	ldi	r31, 0x01	; 1
    1766:	d6 01       	movw	r26, r12
    1768:	01 90       	ld	r0, Z+
    176a:	0d 92       	st	X+, r0
    176c:	8a 95       	dec	r24
    176e:	e1 f7       	brne	.-8      	; 0x1768 <nDoFuzzy+0x26e>
	
	struct mf_type sharpLeft;
	MATLAB_MF(&sharpLeft, "sharpLe", 216, 217, 217, 235);
    1770:	0f 2e       	mov	r0, r31
    1772:	fb ee       	ldi	r31, 0xEB	; 235
    1774:	ef 2e       	mov	r14, r31
    1776:	f1 2c       	mov	r15, r1
    1778:	f0 2d       	mov	r31, r0
    177a:	09 ed       	ldi	r16, 0xD9	; 217
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	29 ed       	ldi	r18, 0xD9	; 217
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	48 ed       	ldi	r20, 0xD8	; 216
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	6d ee       	ldi	r22, 0xED	; 237
    1788:	71 e0       	ldi	r23, 0x01	; 1
    178a:	ce 01       	movw	r24, r28
    178c:	8f 51       	subi	r24, 0x1F	; 31
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	c6 db       	rcall	.-2164   	; 0xf1e <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 224, 239, 239, 254);
    1792:	2e 01       	movw	r4, r28
    1794:	47 ef       	ldi	r20, 0xF7	; 247
    1796:	44 0e       	add	r4, r20
    1798:	51 1c       	adc	r5, r1
    179a:	0f 2e       	mov	r0, r31
    179c:	fe ef       	ldi	r31, 0xFE	; 254
    179e:	ef 2e       	mov	r14, r31
    17a0:	f1 2c       	mov	r15, r1
    17a2:	f0 2d       	mov	r31, r0
    17a4:	0f ee       	ldi	r16, 0xEF	; 239
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	2f ee       	ldi	r18, 0xEF	; 239
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 ee       	ldi	r20, 0xE0	; 224
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e2       	ldi	r22, 0x20	; 32
    17b2:	71 e0       	ldi	r23, 0x01	; 1
    17b4:	c2 01       	movw	r24, r4
    17b6:	b3 db       	rcall	.-2202   	; 0xf1e <MATLAB_MF>
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 244, 259, 259, 274);
    17b8:	1e 01       	movw	r2, r28
    17ba:	63 ef       	ldi	r22, 0xF3	; 243
    17bc:	26 1a       	sub	r2, r22
    17be:	6e ef       	ldi	r22, 0xFE	; 254
    17c0:	36 0a       	sbc	r3, r22
    17c2:	0f 2e       	mov	r0, r31
    17c4:	f2 e1       	ldi	r31, 0x12	; 18
    17c6:	ef 2e       	mov	r14, r31
    17c8:	ff 24       	eor	r15, r15
    17ca:	f3 94       	inc	r15
    17cc:	f0 2d       	mov	r31, r0
    17ce:	03 e0       	ldi	r16, 0x03	; 3
    17d0:	11 e0       	ldi	r17, 0x01	; 1
    17d2:	23 e0       	ldi	r18, 0x03	; 3
    17d4:	31 e0       	ldi	r19, 0x01	; 1
    17d6:	44 ef       	ldi	r20, 0xF4	; 244
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	65 e2       	ldi	r22, 0x25	; 37
    17dc:	71 e0       	ldi	r23, 0x01	; 1
    17de:	c1 01       	movw	r24, r2
    17e0:	9e db       	rcall	.-2244   	; 0xf1e <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 264, 279, 279, 294);
    17e2:	3e 01       	movw	r6, r28
    17e4:	8d ed       	ldi	r24, 0xDD	; 221
    17e6:	68 1a       	sub	r6, r24
    17e8:	8e ef       	ldi	r24, 0xFE	; 254
    17ea:	78 0a       	sbc	r7, r24
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f6 e2       	ldi	r31, 0x26	; 38
    17f0:	ef 2e       	mov	r14, r31
    17f2:	ff 24       	eor	r15, r15
    17f4:	f3 94       	inc	r15
    17f6:	f0 2d       	mov	r31, r0
    17f8:	07 e1       	ldi	r16, 0x17	; 23
    17fa:	11 e0       	ldi	r17, 0x01	; 1
    17fc:	27 e1       	ldi	r18, 0x17	; 23
    17fe:	31 e0       	ldi	r19, 0x01	; 1
    1800:	48 e0       	ldi	r20, 0x08	; 8
    1802:	51 e0       	ldi	r21, 0x01	; 1
    1804:	6e e2       	ldi	r22, 0x2E	; 46
    1806:	71 e0       	ldi	r23, 0x01	; 1
    1808:	c3 01       	movw	r24, r6
    180a:	89 db       	rcall	.-2286   	; 0xf1e <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRi", 285, 302, 302, 303);
    180c:	5e 01       	movw	r10, r28
    180e:	97 ec       	ldi	r25, 0xC7	; 199
    1810:	a9 1a       	sub	r10, r25
    1812:	9e ef       	ldi	r25, 0xFE	; 254
    1814:	b9 0a       	sbc	r11, r25
    1816:	0f 2e       	mov	r0, r31
    1818:	ff e2       	ldi	r31, 0x2F	; 47
    181a:	ef 2e       	mov	r14, r31
    181c:	ff 24       	eor	r15, r15
    181e:	f3 94       	inc	r15
    1820:	f0 2d       	mov	r31, r0
    1822:	0e e2       	ldi	r16, 0x2E	; 46
    1824:	11 e0       	ldi	r17, 0x01	; 1
    1826:	2e e2       	ldi	r18, 0x2E	; 46
    1828:	31 e0       	ldi	r19, 0x01	; 1
    182a:	4d e1       	ldi	r20, 0x1D	; 29
    182c:	51 e0       	ldi	r21, 0x01	; 1
    182e:	65 ef       	ldi	r22, 0xF5	; 245
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	c5 01       	movw	r24, r10
    1834:	74 db       	rcall	.-2328   	; 0xf1e <MATLAB_MF>
	
	steering.membership_functions = &sharpRight;
    1836:	f6 01       	movw	r30, r12
    1838:	b5 86       	std	Z+13, r11	; 0x0d
    183a:	a4 86       	std	Z+12, r10	; 0x0c
	sharpRight.next = &right;
    183c:	f5 01       	movw	r30, r10
    183e:	75 8a       	std	Z+21, r7	; 0x15
    1840:	64 8a       	std	Z+20, r6	; 0x14
	right.next = &straight;
    1842:	f3 01       	movw	r30, r6
    1844:	35 8a       	std	Z+21, r3	; 0x15
    1846:	24 8a       	std	Z+20, r2	; 0x14
	straight.next = &left;
    1848:	f1 01       	movw	r30, r2
    184a:	55 8a       	std	Z+21, r5	; 0x15
    184c:	44 8a       	std	Z+20, r4	; 0x14
	left.next = &sharpLeft;
    184e:	81 ee       	ldi	r24, 0xE1	; 225
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	8c 0f       	add	r24, r28
    1854:	9d 1f       	adc	r25, r29
    1856:	f2 01       	movw	r30, r4
    1858:	95 8b       	std	Z+21, r25	; 0x15
    185a:	84 8b       	std	Z+20, r24	; 0x14
	sharpLeft.next = NULL;
    185c:	cb 50       	subi	r28, 0x0B	; 11
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	18 82       	st	Y, r1
    1864:	c5 5f       	subi	r28, 0xF5	; 245
    1866:	d0 40       	sbci	r29, 0x00	; 0
	
	
	
	// pointers to top of lists

	System_Inputs = &delta_C;
    1868:	80 5e       	subi	r24, 0xE0	; 224
    186a:	91 09       	sbc	r25, r1
    186c:	90 93 1b 03 	sts	0x031B, r25
    1870:	80 93 1a 03 	sts	0x031A, r24
	delta_C.next = &delta_V;
    1874:	e8 57       	subi	r30, 0x78	; 120
    1876:	f1 09       	sbc	r31, r1
    1878:	f8 8b       	std	Y+16, r31	; 0x10
    187a:	ef 87       	std	Y+15, r30	; 0x0f
	delta_V.next = NULL;
    187c:	17 86       	std	Z+15, r1	; 0x0f
    187e:	16 86       	std	Z+14, r1	; 0x0e
	System_Outputs = &steering;
    1880:	d0 92 19 03 	sts	0x0319, r13
    1884:	c0 92 18 03 	sts	0x0318, r12
	steering.next = NULL;
    1888:	f6 01       	movw	r30, r12
    188a:	17 86       	std	Z+15, r1	; 0x0f
    188c:	16 86       	std	Z+14, r1	; 0x0e


	struct rule_type rule1; Rule_Base = &rule1;
    188e:	4e 01       	movw	r8, r28
    1890:	f1 eb       	ldi	r31, 0xB1	; 177
    1892:	8f 1a       	sub	r8, r31
    1894:	fe ef       	ldi	r31, 0xFE	; 254
    1896:	9f 0a       	sbc	r9, r31
    1898:	90 92 1d 03 	sts	0x031D, r9
    189c:	80 92 1c 03 	sts	0x031C, r8
	struct rule_type rule2; rule1.next = &rule2;
    18a0:	be 01       	movw	r22, r28
    18a2:	6b 5a       	subi	r22, 0xAB	; 171
    18a4:	7e 4f       	sbci	r23, 0xFE	; 254
    18a6:	f4 01       	movw	r30, r8
    18a8:	75 83       	std	Z+5, r23	; 0x05
    18aa:	64 83       	std	Z+4, r22	; 0x04
	struct rule_type rule3; rule2.next = &rule3;
    18ac:	ae 01       	movw	r20, r28
    18ae:	45 5a       	subi	r20, 0xA5	; 165
    18b0:	5e 4f       	sbci	r21, 0xFE	; 254
    18b2:	fb 01       	movw	r30, r22
    18b4:	55 83       	std	Z+5, r21	; 0x05
    18b6:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
    18b8:	9e 01       	movw	r18, r28
    18ba:	2f 59       	subi	r18, 0x9F	; 159
    18bc:	3e 4f       	sbci	r19, 0xFE	; 254
    18be:	fa 01       	movw	r30, r20
    18c0:	35 83       	std	Z+5, r19	; 0x05
    18c2:	24 83       	std	Z+4, r18	; 0x04
	struct rule_type rule5; rule4.next = &rule5;
    18c4:	8a 59       	subi	r24, 0x9A	; 154
    18c6:	9e 4f       	sbci	r25, 0xFE	; 254
    18c8:	f9 01       	movw	r30, r18
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04
	struct rule_type rule6; rule5.next = &rule6;
    18ce:	de 01       	movw	r26, r28
    18d0:	a3 59       	subi	r26, 0x93	; 147
    18d2:	be 4f       	sbci	r27, 0xFE	; 254
    18d4:	fc 01       	movw	r30, r24
    18d6:	b5 83       	std	Z+5, r27	; 0x05
    18d8:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule7; rule6.next = &rule7;
    18da:	e3 e7       	ldi	r30, 0x73	; 115
    18dc:	f1 e0       	ldi	r31, 0x01	; 1
    18de:	ec 0f       	add	r30, r28
    18e0:	fd 1f       	adc	r31, r29
    18e2:	15 96       	adiw	r26, 0x05	; 5
    18e4:	fc 93       	st	X, r31
    18e6:	ee 93       	st	-X, r30
    18e8:	14 97       	sbiw	r26, 0x04	; 4
	rule7.next = NULL;
    18ea:	c9 58       	subi	r28, 0x89	; 137
    18ec:	de 4f       	sbci	r29, 0xFE	; 254
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	18 82       	st	Y, r1
    18f2:	c7 57       	subi	r28, 0x77	; 119
    18f4:	d1 40       	sbci	r29, 0x01	; 1
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////

	////RULE 1 "if deltaC is farLeft then steering is SharpRight"
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    18f6:	8e 01       	movw	r16, r28
    18f8:	07 58       	subi	r16, 0x87	; 135
    18fa:	1e 4f       	sbci	r17, 0xFE	; 254
    18fc:	f4 01       	movw	r30, r8
    18fe:	11 83       	std	Z+1, r17	; 0x01
    1900:	00 83       	st	Z, r16
    1902:	f8 01       	movw	r30, r16
    1904:	13 82       	std	Z+3, r1	; 0x03
    1906:	12 82       	std	Z+2, r1	; 0x02
    1908:	7e 01       	movw	r14, r28
    190a:	f3 e8       	ldi	r31, 0x83	; 131
    190c:	ef 1a       	sub	r14, r31
    190e:	fe ef       	ldi	r31, 0xFE	; 254
    1910:	ff 0a       	sbc	r15, r31
    1912:	f4 01       	movw	r30, r8
    1914:	f3 82       	std	Z+3, r15	; 0x03
    1916:	e2 82       	std	Z+2, r14	; 0x02
    1918:	f7 01       	movw	r30, r14
    191a:	13 82       	std	Z+3, r1	; 0x03
    191c:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &farLeft.value; then1.value = &sharpRight.value;
    191e:	4e 01       	movw	r8, r28
    1920:	f3 e7       	ldi	r31, 0x73	; 115
    1922:	8f 0e       	add	r8, r31
    1924:	91 1c       	adc	r9, r1
    1926:	f8 01       	movw	r30, r16
    1928:	91 82       	std	Z+1, r9	; 0x01
    192a:	80 82       	st	Z, r8
    192c:	fa e0       	ldi	r31, 0x0A	; 10
    192e:	af 0e       	add	r10, r31
    1930:	b1 1c       	adc	r11, r1
    1932:	f7 01       	movw	r30, r14
    1934:	b1 82       	std	Z+1, r11	; 0x01
    1936:	a0 82       	st	Z, r10

	////RULE 2 "if deltaC is smallLeft then steering is right"
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1938:	08 5f       	subi	r16, 0xF8	; 248
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	fb 01       	movw	r30, r22
    193e:	11 83       	std	Z+1, r17	; 0x01
    1940:	00 83       	st	Z, r16
    1942:	f8 01       	movw	r30, r16
    1944:	13 82       	std	Z+3, r1	; 0x03
    1946:	12 82       	std	Z+2, r1	; 0x02
    1948:	7e 01       	movw	r14, r28
    194a:	fb e7       	ldi	r31, 0x7B	; 123
    194c:	ef 1a       	sub	r14, r31
    194e:	fe ef       	ldi	r31, 0xFE	; 254
    1950:	ff 0a       	sbc	r15, r31
    1952:	fb 01       	movw	r30, r22
    1954:	f3 82       	std	Z+3, r15	; 0x03
    1956:	e2 82       	std	Z+2, r14	; 0x02
    1958:	f7 01       	movw	r30, r14
    195a:	13 82       	std	Z+3, r1	; 0x03
    195c:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &smallLeft.value; then2.value = &right.value;
    195e:	68 5f       	subi	r22, 0xF8	; 248
    1960:	71 09       	sbc	r23, r1
    1962:	f8 01       	movw	r30, r16
    1964:	71 83       	std	Z+1, r23	; 0x01
    1966:	60 83       	st	Z, r22
    1968:	fa e0       	ldi	r31, 0x0A	; 10
    196a:	6f 0e       	add	r6, r31
    196c:	71 1c       	adc	r7, r1
    196e:	f7 01       	movw	r30, r14
    1970:	71 82       	std	Z+1, r7	; 0x01
    1972:	60 82       	st	Z, r6

	////RULE 5 "if deltaC is centre and deltaV is rightOriented then steering is left"
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1974:	64 5d       	subi	r22, 0xD4	; 212
    1976:	7e 4f       	sbci	r23, 0xFE	; 254
    1978:	fa 01       	movw	r30, r20
    197a:	71 83       	std	Z+1, r23	; 0x01
    197c:	60 83       	st	Z, r22
    197e:	04 5f       	subi	r16, 0xF4	; 244
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	fb 01       	movw	r30, r22
    1984:	13 83       	std	Z+3, r17	; 0x03
    1986:	02 83       	std	Z+2, r16	; 0x02
    1988:	f8 01       	movw	r30, r16
    198a:	13 82       	std	Z+3, r1	; 0x03
    198c:	12 82       	std	Z+2, r1	; 0x02
    198e:	7e 01       	movw	r14, r28
    1990:	ff e6       	ldi	r31, 0x6F	; 111
    1992:	ef 1a       	sub	r14, r31
    1994:	fe ef       	ldi	r31, 0xFE	; 254
    1996:	ff 0a       	sbc	r15, r31
    1998:	fa 01       	movw	r30, r20
    199a:	f3 82       	std	Z+3, r15	; 0x03
    199c:	e2 82       	std	Z+2, r14	; 0x02
    199e:	f7 01       	movw	r30, r14
    19a0:	13 82       	std	Z+3, r1	; 0x03
    19a2:	12 82       	std	Z+2, r1	; 0x02
	if31.value = &centre.value; if32.value = &rightOriented.value; then3.value = &left.value;
    19a4:	5e 01       	movw	r10, r28
    19a6:	f7 e4       	ldi	r31, 0x47	; 71
    19a8:	af 0e       	add	r10, r31
    19aa:	b1 1c       	adc	r11, r1
    19ac:	fb 01       	movw	r30, r22
    19ae:	b1 82       	std	Z+1, r11	; 0x01
    19b0:	a0 82       	st	Z, r10
    19b2:	46 59       	subi	r20, 0x96	; 150
    19b4:	51 09       	sbc	r21, r1
    19b6:	f8 01       	movw	r30, r16
    19b8:	51 83       	std	Z+1, r21	; 0x01
    19ba:	40 83       	st	Z, r20
    19bc:	fa e0       	ldi	r31, 0x0A	; 10
    19be:	4f 0e       	add	r4, r31
    19c0:	51 1c       	adc	r5, r1
    19c2:	f7 01       	movw	r30, r14
    19c4:	51 82       	std	Z+1, r5	; 0x01
    19c6:	40 82       	st	Z, r4
	
	////RULE 6 "if deltaC is centre and deltaV is straightOriented then steering is straight"
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
    19c8:	64 5f       	subi	r22, 0xF4	; 244
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	f9 01       	movw	r30, r18
    19ce:	71 83       	std	Z+1, r23	; 0x01
    19d0:	60 83       	st	Z, r22
    19d2:	4c 52       	subi	r20, 0x2C	; 44
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	fb 01       	movw	r30, r22
    19d8:	53 83       	std	Z+3, r21	; 0x03
    19da:	42 83       	std	Z+2, r20	; 0x02
    19dc:	fa 01       	movw	r30, r20
    19de:	13 82       	std	Z+3, r1	; 0x03
    19e0:	12 82       	std	Z+2, r1	; 0x02
    19e2:	00 5f       	subi	r16, 0xF0	; 240
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	f9 01       	movw	r30, r18
    19e8:	13 83       	std	Z+3, r17	; 0x03
    19ea:	02 83       	std	Z+2, r16	; 0x02
    19ec:	f8 01       	movw	r30, r16
    19ee:	13 82       	std	Z+3, r1	; 0x03
    19f0:	12 82       	std	Z+2, r1	; 0x02
	if41.value = &centre.value; if42.value = &straightOriented.value; then4.value = &straight.value;
    19f2:	fb 01       	movw	r30, r22
    19f4:	b1 82       	std	Z+1, r11	; 0x01
    19f6:	a0 82       	st	Z, r10
    19f8:	22 5b       	subi	r18, 0xB2	; 178
    19fa:	31 09       	sbc	r19, r1
    19fc:	fa 01       	movw	r30, r20
    19fe:	31 83       	std	Z+1, r19	; 0x01
    1a00:	20 83       	st	Z, r18
    1a02:	fa e0       	ldi	r31, 0x0A	; 10
    1a04:	2f 0e       	add	r2, r31
    1a06:	31 1c       	adc	r3, r1
    1a08:	f8 01       	movw	r30, r16
    1a0a:	31 82       	std	Z+1, r3	; 0x01
    1a0c:	20 82       	st	Z, r2
	
	////RULE 5 "if deltaC is centre and deltaV is leftOriented then steering is right"
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
    1a0e:	64 5f       	subi	r22, 0xF4	; 244
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	fc 01       	movw	r30, r24
    1a14:	71 83       	std	Z+1, r23	; 0x01
    1a16:	60 83       	st	Z, r22
    1a18:	44 5f       	subi	r20, 0xF4	; 244
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	fb 01       	movw	r30, r22
    1a1e:	53 83       	std	Z+3, r21	; 0x03
    1a20:	42 83       	std	Z+2, r20	; 0x02
    1a22:	fa 01       	movw	r30, r20
    1a24:	13 82       	std	Z+3, r1	; 0x03
    1a26:	12 82       	std	Z+2, r1	; 0x02
    1a28:	26 50       	subi	r18, 0x06	; 6
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	33 83       	std	Z+3, r19	; 0x03
    1a30:	22 83       	std	Z+2, r18	; 0x02
    1a32:	f9 01       	movw	r30, r18
    1a34:	13 82       	std	Z+3, r1	; 0x03
    1a36:	12 82       	std	Z+2, r1	; 0x02
	if51.value = &centre.value; if52.value = &leftOriented.value; then5.value = &right.value;
    1a38:	fb 01       	movw	r30, r22
    1a3a:	b1 82       	std	Z+1, r11	; 0x01
    1a3c:	a0 82       	st	Z, r10
    1a3e:	8e 5c       	subi	r24, 0xCE	; 206
    1a40:	91 09       	sbc	r25, r1
    1a42:	fa 01       	movw	r30, r20
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
    1a48:	f9 01       	movw	r30, r18
    1a4a:	71 82       	std	Z+1, r7	; 0x01
    1a4c:	60 82       	st	Z, r6
	
	////RULE 6 "if deltaC is smallRight then steering is Left"
	struct rule_element_type if61, then6;
	rule6.if_side = &if61; if61.next = NULL; rule6.then_side = &then6; then6.next = NULL;
    1a4e:	2c 5f       	subi	r18, 0xFC	; 252
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	3c 93       	st	X, r19
    1a56:	2e 93       	st	-X, r18
    1a58:	f9 01       	movw	r30, r18
    1a5a:	13 82       	std	Z+3, r1	; 0x03
    1a5c:	12 82       	std	Z+2, r1	; 0x02
    1a5e:	88 5e       	subi	r24, 0xE8	; 232
    1a60:	9e 4f       	sbci	r25, 0xFE	; 254
    1a62:	13 96       	adiw	r26, 0x03	; 3
    1a64:	9c 93       	st	X, r25
    1a66:	8e 93       	st	-X, r24
    1a68:	12 97       	sbiw	r26, 0x02	; 2
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	13 82       	std	Z+3, r1	; 0x03
    1a6e:	12 82       	std	Z+2, r1	; 0x02
	if61.value = &smallRight.value; then6.value = &left.value;
    1a70:	44 57       	subi	r20, 0x74	; 116
    1a72:	51 40       	sbci	r21, 0x01	; 1
    1a74:	f9 01       	movw	r30, r18
    1a76:	51 83       	std	Z+1, r21	; 0x01
    1a78:	40 83       	st	Z, r20
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	51 82       	std	Z+1, r5	; 0x01
    1a7e:	40 82       	st	Z, r4
	
	////RULE 7 "if deltaC is farRight then steering is sharpLeft"
	struct rule_element_type if71, then7;
	rule7.if_side = &if71; if71.next = NULL; rule7.then_side = &then7; then7.next = NULL;
    1a80:	04 96       	adiw	r24, 0x04	; 4
    1a82:	cd 58       	subi	r28, 0x8D	; 141
    1a84:	de 4f       	sbci	r29, 0xFE	; 254
    1a86:	99 83       	std	Y+1, r25	; 0x01
    1a88:	88 83       	st	Y, r24
    1a8a:	c3 57       	subi	r28, 0x73	; 115
    1a8c:	d1 40       	sbci	r29, 0x01	; 1
    1a8e:	fc 01       	movw	r30, r24
    1a90:	13 82       	std	Z+3, r1	; 0x03
    1a92:	12 82       	std	Z+2, r1	; 0x02
    1a94:	a4 5b       	subi	r26, 0xB4	; 180
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	cb 58       	subi	r28, 0x8B	; 139
    1a9a:	de 4f       	sbci	r29, 0xFE	; 254
    1a9c:	b9 83       	std	Y+1, r27	; 0x01
    1a9e:	a8 83       	st	Y, r26
    1aa0:	c5 57       	subi	r28, 0x75	; 117
    1aa2:	d1 40       	sbci	r29, 0x01	; 1
    1aa4:	13 96       	adiw	r26, 0x03	; 3
    1aa6:	1c 92       	st	X, r1
    1aa8:	1e 92       	st	-X, r1
    1aaa:	12 97       	sbiw	r26, 0x02	; 2
	if71.value = &farRight.value;  then7.value = &sharpLeft.value;
    1aac:	22 59       	subi	r18, 0x92	; 146
    1aae:	31 40       	sbci	r19, 0x01	; 1
    1ab0:	31 83       	std	Z+1, r19	; 0x01
    1ab2:	20 83       	st	Z, r18
    1ab4:	81 ee       	ldi	r24, 0xE1	; 225
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	8c 0f       	add	r24, r28
    1aba:	9d 1f       	adc	r25, r29
    1abc:	0a 96       	adiw	r24, 0x0a	; 10
    1abe:	8d 93       	st	X+, r24
    1ac0:	9c 93       	st	X, r25
	

	
	
	// the methods performing the FLC
	fuzzification();
    1ac2:	fa d8       	rcall	.-3596   	; 0xcb8 <fuzzification>
	rule_evaluation();
    1ac4:	20 d9       	rcall	.-3520   	; 0xd06 <rule_evaluation>
	defuzzification();
    1ac6:	65 d9       	rcall	.-3382   	; 0xd92 <defuzzification>
	steering.value = steering.value*10;
    1ac8:	f6 01       	movw	r30, r12
    1aca:	22 85       	ldd	r18, Z+10	; 0x0a
    1acc:	33 85       	ldd	r19, Z+11	; 0x0b
    1ace:	c9 01       	movw	r24, r18
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	22 0f       	add	r18, r18
    1ade:	33 1f       	adc	r19, r19
    1ae0:	82 0f       	add	r24, r18
    1ae2:	93 1f       	adc	r25, r19
    1ae4:	93 87       	std	Z+11, r25	; 0x0b
    1ae6:	82 87       	std	Z+10, r24	; 0x0a
	if (steering.value < MAXLEFT)
    1ae8:	86 3e       	cpi	r24, 0xE6	; 230
    1aea:	f7 e0       	ldi	r31, 0x07	; 7
    1aec:	9f 07       	cpc	r25, r31
    1aee:	24 f4       	brge	.+8      	; 0x1af8 <nDoFuzzy+0x5fe>
	{
		setServo(MAXLEFT);
    1af0:	86 ee       	ldi	r24, 0xE6	; 230
    1af2:	97 e0       	ldi	r25, 0x07	; 7
    1af4:	64 d0       	rcall	.+200    	; 0x1bbe <setServo>
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <nDoFuzzy+0x610>
	}
	else if (steering.value >MAXRIGHT)
    1af8:	85 3e       	cpi	r24, 0xE5	; 229
    1afa:	2c e0       	ldi	r18, 0x0C	; 12
    1afc:	92 07       	cpc	r25, r18
    1afe:	24 f0       	brlt	.+8      	; 0x1b08 <nDoFuzzy+0x60e>
	{
		setServo(MAXRIGHT);
    1b00:	84 ee       	ldi	r24, 0xE4	; 228
    1b02:	9c e0       	ldi	r25, 0x0C	; 12
    1b04:	5c d0       	rcall	.+184    	; 0x1bbe <setServo>
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <nDoFuzzy+0x610>
	}
	else
	{
		setServo(steering.value);
    1b08:	5a d0       	rcall	.+180    	; 0x1bbe <setServo>
	}
    
}
    1b0a:	c2 54       	subi	r28, 0x42	; 66
    1b0c:	de 4f       	sbci	r29, 0xFE	; 254
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	5f 90       	pop	r5
    1b36:	4f 90       	pop	r4
    1b38:	3f 90       	pop	r3
    1b3a:	2f 90       	pop	r2
    1b3c:	08 95       	ret

00001b3e <nFuzzySteering>:
*
* The fuzzy logic controller is designed to manage the fourth state
*/
void nFuzzySteering(int c, int v)
{
	if ((c == 1) && (v == 81))        // right curvature, turn right
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <nFuzzySteering+0x14>
    1b44:	61 35       	cpi	r22, 0x51	; 81
    1b46:	71 05       	cpc	r23, r1
    1b48:	71 f4       	brne	.+28     	; 0x1b66 <nFuzzySteering+0x28>
	{
		setServo(MAXRIGHT-100);
    1b4a:	80 e8       	ldi	r24, 0x80	; 128
    1b4c:	9c e0       	ldi	r25, 0x0C	; 12
    1b4e:	37 c0       	rjmp	.+110    	; 0x1bbe <setServo>
    1b50:	08 95       	ret
	}
	else if ((c == 2) && (v == 81))       // left curvature, turn left
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	39 f4       	brne	.+14     	; 0x1b66 <nFuzzySteering+0x28>
    1b58:	61 35       	cpi	r22, 0x51	; 81
    1b5a:	71 05       	cpc	r23, r1
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <nFuzzySteering+0x28>
	{
		setServo(MAXLEFT+100);
    1b5e:	8a e4       	ldi	r24, 0x4A	; 74
    1b60:	98 e0       	ldi	r25, 0x08	; 8
    1b62:	2d c0       	rjmp	.+90     	; 0x1bbe <setServo>
    1b64:	08 95       	ret
	}
	else                                   // straight road, do fuzzy
	{
		nDoFuzzy(c,v);
    1b66:	c9 cc       	rjmp	.-1646   	; 0x14fa <nDoFuzzy>
    1b68:	08 95       	ret

00001b6a <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1b6a:	80 e3       	ldi	r24, 0x30	; 48
    1b6c:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1b6e:	82 ea       	ldi	r24, 0xA2	; 162
    1b70:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	9f e8       	ldi	r25, 0x8F	; 143
    1b78:	90 93 87 00 	sts	0x0087, r25
    1b7c:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1b80:	8a e1       	ldi	r24, 0x1A	; 26
    1b82:	80 93 81 00 	sts	0x0081, r24
    1b86:	08 95       	ret

00001b88 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1b88:	80 36       	cpi	r24, 0x60	; 96
    1b8a:	2a e0       	ldi	r18, 0x0A	; 10
    1b8c:	92 07       	cpc	r25, r18
    1b8e:	3c f4       	brge	.+14     	; 0x1b9e <setESC+0x16>
	{
		OCR1A = MINESC;
    1b90:	8f e5       	ldi	r24, 0x5F	; 95
    1b92:	9a e0       	ldi	r25, 0x0A	; 10
    1b94:	90 93 89 00 	sts	0x0089, r25
    1b98:	80 93 88 00 	sts	0x0088, r24
    1b9c:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1b9e:	82 32       	cpi	r24, 0x22	; 34
    1ba0:	2b e0       	ldi	r18, 0x0B	; 11
    1ba2:	92 07       	cpc	r25, r18
    1ba4:	3c f0       	brlt	.+14     	; 0x1bb4 <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1ba6:	82 e2       	ldi	r24, 0x22	; 34
    1ba8:	9b e0       	ldi	r25, 0x0B	; 11
    1baa:	90 93 89 00 	sts	0x0089, r25
    1bae:	80 93 88 00 	sts	0x0088, r24
    1bb2:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1bb4:	90 93 89 00 	sts	0x0089, r25
    1bb8:	80 93 88 00 	sts	0x0088, r24
    1bbc:	08 95       	ret

00001bbe <setServo>:
*/
void setServo (int counterServo)
{
	
	
	if (counterServo >= MAXRIGHT){
    1bbe:	84 3e       	cpi	r24, 0xE4	; 228
    1bc0:	2c e0       	ldi	r18, 0x0C	; 12
    1bc2:	92 07       	cpc	r25, r18
    1bc4:	3c f0       	brlt	.+14     	; 0x1bd4 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1bc6:	84 ee       	ldi	r24, 0xE4	; 228
    1bc8:	9c e0       	ldi	r25, 0x0C	; 12
    1bca:	90 93 8b 00 	sts	0x008B, r25
    1bce:	80 93 8a 00 	sts	0x008A, r24
    1bd2:	08 95       	ret
		
	}	else if (counterServo <= MAXLEFT){
    1bd4:	87 3e       	cpi	r24, 0xE7	; 231
    1bd6:	27 e0       	ldi	r18, 0x07	; 7
    1bd8:	92 07       	cpc	r25, r18
    1bda:	3c f4       	brge	.+14     	; 0x1bea <setServo+0x2c>

		OCR1B = MAXLEFT;
    1bdc:	86 ee       	ldi	r24, 0xE6	; 230
    1bde:	97 e0       	ldi	r25, 0x07	; 7
    1be0:	90 93 8b 00 	sts	0x008B, r25
    1be4:	80 93 8a 00 	sts	0x008A, r24
    1be8:	08 95       	ret
		
	} else {
		OCR1B = counterServo;
    1bea:	90 93 8b 00 	sts	0x008B, r25
    1bee:	80 93 8a 00 	sts	0x008A, r24
    1bf2:	08 95       	ret

00001bf4 <__vector_19>:
spi_buffer_typedef rx_spi = {{0}, 0 , 0 ,0}; //declaring a receive buffer
spi_buffer_typedef tx_spi = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

unsigned char spi_stc_chain_in_work = 0;

ISR(SPI_STC_vect){
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	af 93       	push	r26
    1c0c:	bf 93       	push	r27
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31


	
	//Turn PORTA0 to low so master can detect rising edge
	PORTA &= ~(1<<PORTA0);
    1c12:	10 98       	cbi	0x02, 0	; 2
	
	unsigned char in_value;
	
	//reading value from SPDR
	in_value = SPDR;
    1c14:	2e b5       	in	r18, 0x2e	; 46
	
	//if scrap value -> ignore
	//if not scrap value -> read the byte to rx-buffer
	if(in_value != 0xFD){
    1c16:	2d 3f       	cpi	r18, 0xFD	; 253
    1c18:	a9 f0       	breq	.+42     	; 0x1c44 <__vector_19+0x50>
		
		rx_spi.buffer[rx_spi.i_last] = in_value;
    1c1a:	e8 e8       	ldi	r30, 0x88	; 136
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	dc 01       	movw	r26, r24
    1c24:	aa 5b       	subi	r26, 0xBA	; 186
    1c26:	bd 4f       	sbci	r27, 0xFD	; 253
    1c28:	2c 93       	st	X, r18
		rx_spi.i_last++;
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
		rx_spi.num_bytes++;
    1c30:	ea e8       	ldi	r30, 0x8A	; 138
    1c32:	f2 e0       	ldi	r31, 0x02	; 2
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
		spi_rx_not_empty_flag = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 fe 01 	sts	0x01FE, r24
	}
	
	//Turnover for i_last
	if(rx_spi.i_last == SPI_BUFFER_SIZE){
    1c44:	80 91 88 02 	lds	r24, 0x0288
    1c48:	90 91 89 02 	lds	r25, 0x0289
    1c4c:	80 34       	cpi	r24, 0x40	; 64
    1c4e:	91 05       	cpc	r25, r1
    1c50:	21 f4       	brne	.+8      	; 0x1c5a <__vector_19+0x66>
		
		rx_spi.i_last = 0;
    1c52:	10 92 89 02 	sts	0x0289, r1
    1c56:	10 92 88 02 	sts	0x0288, r1
	}
	
	//if there is something to send, put the value in SPDR and set PORTA0 to high (handshake)
	if(tx_spi.num_bytes > 0){
    1c5a:	80 91 44 02 	lds	r24, 0x0244
    1c5e:	90 91 45 02 	lds	r25, 0x0245
    1c62:	89 2b       	or	r24, r25
    1c64:	01 f1       	breq	.+64     	; 0x1ca6 <__vector_19+0xb2>
	
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1c66:	e0 91 40 02 	lds	r30, 0x0240
    1c6a:	f0 91 41 02 	lds	r31, 0x0241
    1c6e:	e0 50       	subi	r30, 0x00	; 0
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	80 81       	ld	r24, Z
    1c74:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1c76:	e0 e4       	ldi	r30, 0x40	; 64
    1c78:	f2 e0       	ldi	r31, 0x02	; 2
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1c84:	e4 e4       	ldi	r30, 0x44	; 68
    1c86:	f2 e0       	ldi	r31, 0x02	; 2
    1c88:	20 81       	ld	r18, Z
    1c8a:	31 81       	ldd	r19, Z+1	; 0x01
    1c8c:	21 50       	subi	r18, 0x01	; 1
    1c8e:	31 09       	sbc	r19, r1
    1c90:	31 83       	std	Z+1, r19	; 0x01
    1c92:	20 83       	st	Z, r18
		
		PORTA |= (1<<PORTA0);
    1c94:	10 9a       	sbi	0x02, 0	; 2
		
		if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1c96:	80 34       	cpi	r24, 0x40	; 64
    1c98:	91 05       	cpc	r25, r1
    1c9a:	49 f4       	brne	.+18     	; 0x1cae <__vector_19+0xba>
			
			tx_spi.i_first = 0;
    1c9c:	10 92 41 02 	sts	0x0241, r1
    1ca0:	10 92 40 02 	sts	0x0240, r1
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <__vector_19+0xba>
	}
	
	else{  //if tx_spi.num_bytes == 0
		
		//put scrap in SPDR
		SPDR = 0xFD;
    1ca6:	8d ef       	ldi	r24, 0xFD	; 253
    1ca8:	8e bd       	out	0x2e, r24	; 46
		spi_stc_chain_in_work = 0;
    1caa:	10 92 ff 01 	sts	0x01FF, r1
		
	} 	
	

}
    1cae:	ff 91       	pop	r31
    1cb0:	ef 91       	pop	r30
    1cb2:	bf 91       	pop	r27
    1cb4:	af 91       	pop	r26
    1cb6:	9f 91       	pop	r25
    1cb8:	8f 91       	pop	r24
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0b be       	out	0x3b, r0	; 59
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <spi_slave_init>:
	
	
void spi_slave_init(void){
	
	//Set MISO output, all others input, DDPB6= MISO
	DDRB = (1<<DDB6);
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	84 b9       	out	0x04, r24	; 4
	//Enable SPI and enable SPI_STC interrupt
	SPCR = (1<<SPE) | (1<<SPIE) |  (0<<MSTR);
    1cd0:	80 ec       	ldi	r24, 0xC0	; 192
    1cd2:	8c bd       	out	0x2c, r24	; 44
	//Setting PORTA0 as output and set it to low, so master can detect rising edge
	DDRA |= (1<<PORTA0);
    1cd4:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1<<PORTA0);
    1cd6:	10 98       	cbi	0x02, 0	; 2
	
	SPDR = 0xFD;
    1cd8:	8d ef       	ldi	r24, 0xFD	; 253
    1cda:	8e bd       	out	0x2e, r24	; 46
    1cdc:	08 95       	ret

00001cde <spi_get_byte>:
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
	
	cli();
    1cde:	f8 94       	cli
	//If data in buffer exists, read to value
	if(rx_spi.num_bytes > 0){
    1ce0:	20 91 8a 02 	lds	r18, 0x028A
    1ce4:	30 91 8b 02 	lds	r19, 0x028B
    1ce8:	21 15       	cp	r18, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	a9 f0       	breq	.+42     	; 0x1d18 <spi_get_byte+0x3a>

		value = rx_spi.buffer[rx_spi.i_first];
    1cee:	e6 e8       	ldi	r30, 0x86	; 134
    1cf0:	f2 e0       	ldi	r31, 0x02	; 2
    1cf2:	40 81       	ld	r20, Z
    1cf4:	51 81       	ldd	r21, Z+1	; 0x01
    1cf6:	da 01       	movw	r26, r20
    1cf8:	aa 5b       	subi	r26, 0xBA	; 186
    1cfa:	bd 4f       	sbci	r27, 0xFD	; 253
    1cfc:	8c 91       	ld	r24, X
		rx_spi.i_first++;
    1cfe:	4f 5f       	subi	r20, 0xFF	; 255
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	51 83       	std	Z+1, r21	; 0x01
    1d04:	40 83       	st	Z, r20
		rx_spi.num_bytes--;
    1d06:	21 50       	subi	r18, 0x01	; 1
    1d08:	31 09       	sbc	r19, r1
    1d0a:	30 93 8b 02 	sts	0x028B, r19
    1d0e:	20 93 8a 02 	sts	0x028A, r18
	}
	
	if(rx_spi.num_bytes == 0){
    1d12:	23 2b       	or	r18, r19
    1d14:	21 f4       	brne	.+8      	; 0x1d1e <spi_get_byte+0x40>
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <spi_get_byte+0x3c>
	*otherwise, it will return null
	*FIFO ring-buffer
	*/
	
	//if there is no data, value returned will be 0xFE
	unsigned char value = 0xFE;
    1d18:	8e ef       	ldi	r24, 0xFE	; 254
		rx_spi.i_first++;
		rx_spi.num_bytes--;
	}
	
	if(rx_spi.num_bytes == 0){
		spi_rx_not_empty_flag = 0;
    1d1a:	10 92 fe 01 	sts	0x01FE, r1
	}
	
	
	//turnover for i_first
	if(rx_spi.i_first == SPI_BUFFER_SIZE){
    1d1e:	20 91 86 02 	lds	r18, 0x0286
    1d22:	30 91 87 02 	lds	r19, 0x0287
    1d26:	20 34       	cpi	r18, 0x40	; 64
    1d28:	31 05       	cpc	r19, r1
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <spi_get_byte+0x56>
		rx_spi.i_first = 0;
    1d2c:	10 92 87 02 	sts	0x0287, r1
    1d30:	10 92 86 02 	sts	0x0286, r1
	}
	

	sei();
    1d34:	78 94       	sei
	
	return value;
	
		
}
    1d36:	08 95       	ret

00001d38 <spi_send_byte>:

void spi_send_byte(unsigned char value){
	
	cli();
    1d38:	f8 94       	cli
	
	//if there is space in tx-buffer, put value in it.
	if (tx_spi.num_bytes < SPI_BUFFER_SIZE){	//if there is room in the buffer
    1d3a:	20 91 44 02 	lds	r18, 0x0244
    1d3e:	30 91 45 02 	lds	r19, 0x0245
    1d42:	20 34       	cpi	r18, 0x40	; 64
    1d44:	31 05       	cpc	r19, r1
    1d46:	90 f4       	brcc	.+36     	; 0x1d6c <spi_send_byte+0x34>
			
		tx_spi.buffer[tx_spi.i_last] = value; //data transfer to buffer
    1d48:	e2 e4       	ldi	r30, 0x42	; 66
    1d4a:	f2 e0       	ldi	r31, 0x02	; 2
    1d4c:	40 81       	ld	r20, Z
    1d4e:	51 81       	ldd	r21, Z+1	; 0x01
    1d50:	da 01       	movw	r26, r20
    1d52:	a0 50       	subi	r26, 0x00	; 0
    1d54:	be 4f       	sbci	r27, 0xFE	; 254
    1d56:	8c 93       	st	X, r24
		tx_spi.i_last++;			//inc index of most recent
    1d58:	4f 5f       	subi	r20, 0xFF	; 255
    1d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5c:	51 83       	std	Z+1, r21	; 0x01
    1d5e:	40 83       	st	Z, r20
		tx_spi.num_bytes++;		//inc number of bytes in buffer
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	30 93 45 02 	sts	0x0245, r19
    1d68:	20 93 44 02 	sts	0x0244, r18
	}
		
	//index turn-around
	if(tx_spi.i_last == SPI_BUFFER_SIZE){
    1d6c:	80 91 42 02 	lds	r24, 0x0242
    1d70:	90 91 43 02 	lds	r25, 0x0243
    1d74:	80 34       	cpi	r24, 0x40	; 64
    1d76:	91 05       	cpc	r25, r1
    1d78:	21 f4       	brne	.+8      	; 0x1d82 <spi_send_byte+0x4a>
		tx_spi.i_last = 0;
    1d7a:	10 92 43 02 	sts	0x0243, r1
    1d7e:	10 92 42 02 	sts	0x0242, r1
	
			
	//if there is only one byte in buffer, no SPI_STC is "in work"
	//Therefore, it is started by adding the byte to SPDR and requesting a send to master
	//PORTA0 is first set to low, so Master can detect rising edge
	if(tx_spi.num_bytes == 1 && !(spi_stc_chain_in_work)){
    1d82:	80 91 44 02 	lds	r24, 0x0244
    1d86:	90 91 45 02 	lds	r25, 0x0245
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f9 f4       	brne	.+62     	; 0x1dcc <spi_send_byte+0x94>
    1d8e:	80 91 ff 01 	lds	r24, 0x01FF
    1d92:	81 11       	cpse	r24, r1
    1d94:	1b c0       	rjmp	.+54     	; 0x1dcc <spi_send_byte+0x94>
		
		PORTA &= ~(1<<PORTA0); //TEST
    1d96:	10 98       	cbi	0x02, 0	; 2
		
		SPDR = tx_spi.buffer[tx_spi.i_first];
    1d98:	e0 91 40 02 	lds	r30, 0x0240
    1d9c:	f0 91 41 02 	lds	r31, 0x0241
    1da0:	e0 50       	subi	r30, 0x00	; 0
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 81       	ld	r24, Z
    1da6:	8e bd       	out	0x2e, r24	; 46
		tx_spi.i_first++;
    1da8:	e0 e4       	ldi	r30, 0x40	; 64
    1daa:	f2 e0       	ldi	r31, 0x02	; 2
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
		tx_spi.num_bytes--;
    1db6:	e4 e4       	ldi	r30, 0x44	; 68
    1db8:	f2 e0       	ldi	r31, 0x02	; 2
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
		PORTA |= (1<<PORTA0);
    1dc4:	10 9a       	sbi	0x02, 0	; 2
		spi_stc_chain_in_work = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 ff 01 	sts	0x01FF, r24
	}
			
	//index turn-around
	if(tx_spi.i_first == SPI_BUFFER_SIZE){
    1dcc:	80 91 40 02 	lds	r24, 0x0240
    1dd0:	90 91 41 02 	lds	r25, 0x0241
    1dd4:	80 34       	cpi	r24, 0x40	; 64
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <spi_send_byte+0xaa>
		tx_spi.i_first = 0;
    1dda:	10 92 41 02 	sts	0x0241, r1
    1dde:	10 92 40 02 	sts	0x0240, r1
	}
			
			

	sei();
    1de2:	78 94       	sei
    1de4:	08 95       	ret

00001de6 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	20 91 8a 02 	lds	r18, 0x028A
    1dec:	30 91 8b 02 	lds	r19, 0x028B
    1df0:	2b 30       	cpi	r18, 0x0B	; 11
    1df2:	31 05       	cpc	r19, r1
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <is_package_recieved+0x12>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    1df8:	08 95       	ret

00001dfa <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	8c 01       	movw	r16, r24
    1e04:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1e06:	20 91 8a 02 	lds	r18, 0x028A
    1e0a:	30 91 8b 02 	lds	r19, 0x028B
    1e0e:	23 2b       	or	r18, r19
    1e10:	61 f1       	breq	.+88     	; 0x1e6a <read_sensor_info+0x70>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    1e12:	e0 91 86 02 	lds	r30, 0x0286
    1e16:	f0 91 87 02 	lds	r31, 0x0287
    1e1a:	ea 5b       	subi	r30, 0xBA	; 186
    1e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e1e:	80 81       	ld	r24, Z
    1e20:	8f 3f       	cpi	r24, 0xFF	; 255
    1e22:	d9 f4       	brne	.+54     	; 0x1e5a <read_sensor_info+0x60>
    1e24:	e0 df       	rcall	.-64     	; 0x1de6 <is_package_recieved>
    1e26:	88 23       	and	r24, r24
    1e28:	11 f1       	breq	.+68     	; 0x1e6e <read_sensor_info+0x74>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1e2a:	59 df       	rcall	.-334    	; 0x1cde <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		*control_mode_ptr = spi_get_byte();
    1e2c:	58 df       	rcall	.-336    	; 0x1cde <spi_get_byte>
    1e2e:	f8 01       	movw	r30, r16
    1e30:	80 83       	st	Z, r24
		sens_info_ptr->dist_right_line = spi_get_byte();
    1e32:	55 df       	rcall	.-342    	; 0x1cde <spi_get_byte>
    1e34:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    1e36:	53 df       	rcall	.-346    	; 0x1cde <spi_get_byte>
    1e38:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    1e3a:	51 df       	rcall	.-350    	; 0x1cde <spi_get_byte>
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
    1e3e:	4f df       	rcall	.-354    	; 0x1cde <spi_get_byte>
    1e40:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
    1e42:	4d df       	rcall	.-358    	; 0x1cde <spi_get_byte>
    1e44:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
    1e46:	4b df       	rcall	.-362    	; 0x1cde <spi_get_byte>
    1e48:	8d 83       	std	Y+5, r24	; 0x05
		sens_info_ptr->angle = spi_get_byte();
    1e4a:	49 df       	rcall	.-366    	; 0x1cde <spi_get_byte>
    1e4c:	8f 83       	std	Y+7, r24	; 0x07
		sens_info_ptr->next_turn_decision = spi_get_byte();
    1e4e:	47 df       	rcall	.-370    	; 0x1cde <spi_get_byte>
    1e50:	89 87       	std	Y+9, r24	; 0x09
		sens_info_ptr->dist_to_stop_line = spi_get_byte();
    1e52:	45 df       	rcall	.-374    	; 0x1cde <spi_get_byte>
    1e54:	88 87       	std	Y+8, r24	; 0x08
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	0d c0       	rjmp	.+26     	; 0x1e74 <read_sensor_info+0x7a>
	} else if (is_package_recieved()){
    1e5a:	c5 df       	rcall	.-118    	; 0x1de6 <is_package_recieved>
    1e5c:	88 23       	and	r24, r24
    1e5e:	49 f0       	breq	.+18     	; 0x1e72 <read_sensor_info+0x78>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    1e60:	3e df       	rcall	.-388    	; 0x1cde <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    1e62:	be 01       	movw	r22, r28
    1e64:	c8 01       	movw	r24, r16
    1e66:	c9 df       	rcall	.-110    	; 0x1dfa <read_sensor_info>
    1e68:	05 c0       	rjmp	.+10     	; 0x1e74 <read_sensor_info+0x7a>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <read_sensor_info+0x7a>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
	}
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <read_sensor_info+0x7a>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
	
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	0b b6       	in	r0, 0x3b	; 59
    1e8a:	0f 92       	push	r0
    1e8c:	2f 93       	push	r18
    1e8e:	3f 93       	push	r19
    1e90:	4f 93       	push	r20
    1e92:	8f 93       	push	r24
    1e94:	9f 93       	push	r25
    1e96:	af 93       	push	r26
    1e98:	bf 93       	push	r27
    1e9a:	ef 93       	push	r30
    1e9c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1e9e:	80 91 16 03 	lds	r24, 0x0316
    1ea2:	90 91 17 03 	lds	r25, 0x0317
    1ea6:	80 34       	cpi	r24, 0x40	; 64
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 93 22 03 	sts	0x0322, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1eb2:	80 91 c6 00 	lds	r24, 0x00C6
    1eb6:	16 c0       	rjmp	.+44     	; 0x1ee4 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1eb8:	80 34       	cpi	r24, 0x40	; 64
    1eba:	91 05       	cpc	r25, r1
    1ebc:	e8 f4       	brcc	.+58     	; 0x1ef8 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1ebe:	e4 e1       	ldi	r30, 0x14	; 20
    1ec0:	f3 e0       	ldi	r31, 0x03	; 3
    1ec2:	20 81       	ld	r18, Z
    1ec4:	31 81       	ldd	r19, Z+1	; 0x01
    1ec6:	40 91 c6 00 	lds	r20, 0x00C6
    1eca:	d9 01       	movw	r26, r18
    1ecc:	ae 52       	subi	r26, 0x2E	; 46
    1ece:	bd 4f       	sbci	r27, 0xFD	; 253
    1ed0:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	31 83       	std	Z+1, r19	; 0x01
    1ed8:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	90 93 17 03 	sts	0x0317, r25
    1ee0:	80 93 16 03 	sts	0x0316, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1ee4:	80 91 16 03 	lds	r24, 0x0316
    1ee8:	90 91 17 03 	lds	r25, 0x0317
    1eec:	80 34       	cpi	r24, 0x40	; 64
    1eee:	91 05       	cpc	r25, r1
    1ef0:	19 f4       	brne	.+6      	; 0x1ef8 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 20 03 	sts	0x0320, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1ef8:	80 91 14 03 	lds	r24, 0x0314
    1efc:	90 91 15 03 	lds	r25, 0x0315
    1f00:	80 34       	cpi	r24, 0x40	; 64
    1f02:	91 05       	cpc	r25, r1
    1f04:	21 f4       	brne	.+8      	; 0x1f0e <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1f06:	10 92 15 03 	sts	0x0315, r1
    1f0a:	10 92 14 03 	sts	0x0314, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 1f 03 	sts	0x031F, r24
}
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	4f 91       	pop	r20
    1f22:	3f 91       	pop	r19
    1f24:	2f 91       	pop	r18
    1f26:	0f 90       	pop	r0
    1f28:	0b be       	out	0x3b, r0	; 59
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__vector_22>:




ISR(USART0_TX_vect)
{
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	0f 92       	push	r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	0b b6       	in	r0, 0x3b	; 59
    1f40:	0f 92       	push	r0
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	ef 93       	push	r30
    1f48:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1f4a:	80 91 d0 02 	lds	r24, 0x02D0
    1f4e:	90 91 d1 02 	lds	r25, 0x02D1
    1f52:	80 34       	cpi	r24, 0x40	; 64
    1f54:	91 05       	cpc	r25, r1
    1f56:	19 f4       	brne	.+6      	; 0x1f5e <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1f58:	10 92 1e 03 	sts	0x031E, r1
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1f5e:	89 2b       	or	r24, r25
    1f60:	b9 f0       	breq	.+46     	; 0x1f90 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1f62:	e0 91 cc 02 	lds	r30, 0x02CC
    1f66:	f0 91 cd 02 	lds	r31, 0x02CD
    1f6a:	e4 57       	subi	r30, 0x74	; 116
    1f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1f74:	ec ec       	ldi	r30, 0xCC	; 204
    1f76:	f2 e0       	ldi	r31, 0x02	; 2
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1f82:	e0 ed       	ldi	r30, 0xD0	; 208
    1f84:	f2 e0       	ldi	r31, 0x02	; 2
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1f90:	80 91 cc 02 	lds	r24, 0x02CC
    1f94:	90 91 cd 02 	lds	r25, 0x02CD
    1f98:	80 34       	cpi	r24, 0x40	; 64
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	21 f4       	brne	.+8      	; 0x1fa6 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1f9e:	10 92 cd 02 	sts	0x02CD, r1
    1fa2:	10 92 cc 02 	sts	0x02CC, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1fa6:	80 91 d0 02 	lds	r24, 0x02D0
    1faa:	90 91 d1 02 	lds	r25, 0x02D1
    1fae:	89 2b       	or	r24, r25
    1fb0:	39 f4       	brne	.+14     	; 0x1fc0 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1fb2:	10 92 21 03 	sts	0x0321, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1fb6:	e1 ec       	ldi	r30, 0xC1	; 193
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 7b       	andi	r24, 0xBF	; 191
    1fbe:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	9f 91       	pop	r25
    1fc6:	8f 91       	pop	r24
    1fc8:	0f 90       	pop	r0
    1fca:	0b be       	out	0x3b, r0	; 59
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__subsf3>:
    1fd6:	50 58       	subi	r21, 0x80	; 128

00001fd8 <__addsf3>:
    1fd8:	bb 27       	eor	r27, r27
    1fda:	aa 27       	eor	r26, r26
    1fdc:	0e d0       	rcall	.+28     	; 0x1ffa <__addsf3x>
    1fde:	4d c1       	rjmp	.+666    	; 0x227a <__fp_round>
    1fe0:	3e d1       	rcall	.+636    	; 0x225e <__fp_pscA>
    1fe2:	30 f0       	brcs	.+12     	; 0x1ff0 <__addsf3+0x18>
    1fe4:	43 d1       	rcall	.+646    	; 0x226c <__fp_pscB>
    1fe6:	20 f0       	brcs	.+8      	; 0x1ff0 <__addsf3+0x18>
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <__addsf3+0x1e>
    1fea:	9f 3f       	cpi	r25, 0xFF	; 255
    1fec:	11 f4       	brne	.+4      	; 0x1ff2 <__addsf3+0x1a>
    1fee:	1e f4       	brtc	.+6      	; 0x1ff6 <__addsf3+0x1e>
    1ff0:	33 c1       	rjmp	.+614    	; 0x2258 <__fp_nan>
    1ff2:	0e f4       	brtc	.+2      	; 0x1ff6 <__addsf3+0x1e>
    1ff4:	e0 95       	com	r30
    1ff6:	e7 fb       	bst	r30, 7
    1ff8:	29 c1       	rjmp	.+594    	; 0x224c <__fp_inf>

00001ffa <__addsf3x>:
    1ffa:	e9 2f       	mov	r30, r25
    1ffc:	4f d1       	rcall	.+670    	; 0x229c <__fp_split3>
    1ffe:	80 f3       	brcs	.-32     	; 0x1fe0 <__addsf3+0x8>
    2000:	ba 17       	cp	r27, r26
    2002:	62 07       	cpc	r22, r18
    2004:	73 07       	cpc	r23, r19
    2006:	84 07       	cpc	r24, r20
    2008:	95 07       	cpc	r25, r21
    200a:	18 f0       	brcs	.+6      	; 0x2012 <__addsf3x+0x18>
    200c:	71 f4       	brne	.+28     	; 0x202a <__addsf3x+0x30>
    200e:	9e f5       	brtc	.+102    	; 0x2076 <__addsf3x+0x7c>
    2010:	67 c1       	rjmp	.+718    	; 0x22e0 <__fp_zero>
    2012:	0e f4       	brtc	.+2      	; 0x2016 <__addsf3x+0x1c>
    2014:	e0 95       	com	r30
    2016:	0b 2e       	mov	r0, r27
    2018:	ba 2f       	mov	r27, r26
    201a:	a0 2d       	mov	r26, r0
    201c:	0b 01       	movw	r0, r22
    201e:	b9 01       	movw	r22, r18
    2020:	90 01       	movw	r18, r0
    2022:	0c 01       	movw	r0, r24
    2024:	ca 01       	movw	r24, r20
    2026:	a0 01       	movw	r20, r0
    2028:	11 24       	eor	r1, r1
    202a:	ff 27       	eor	r31, r31
    202c:	59 1b       	sub	r21, r25
    202e:	99 f0       	breq	.+38     	; 0x2056 <__addsf3x+0x5c>
    2030:	59 3f       	cpi	r21, 0xF9	; 249
    2032:	50 f4       	brcc	.+20     	; 0x2048 <__addsf3x+0x4e>
    2034:	50 3e       	cpi	r21, 0xE0	; 224
    2036:	68 f1       	brcs	.+90     	; 0x2092 <__addsf3x+0x98>
    2038:	1a 16       	cp	r1, r26
    203a:	f0 40       	sbci	r31, 0x00	; 0
    203c:	a2 2f       	mov	r26, r18
    203e:	23 2f       	mov	r18, r19
    2040:	34 2f       	mov	r19, r20
    2042:	44 27       	eor	r20, r20
    2044:	58 5f       	subi	r21, 0xF8	; 248
    2046:	f3 cf       	rjmp	.-26     	; 0x202e <__addsf3x+0x34>
    2048:	46 95       	lsr	r20
    204a:	37 95       	ror	r19
    204c:	27 95       	ror	r18
    204e:	a7 95       	ror	r26
    2050:	f0 40       	sbci	r31, 0x00	; 0
    2052:	53 95       	inc	r21
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__addsf3x+0x4e>
    2056:	7e f4       	brtc	.+30     	; 0x2076 <__addsf3x+0x7c>
    2058:	1f 16       	cp	r1, r31
    205a:	ba 0b       	sbc	r27, r26
    205c:	62 0b       	sbc	r22, r18
    205e:	73 0b       	sbc	r23, r19
    2060:	84 0b       	sbc	r24, r20
    2062:	ba f0       	brmi	.+46     	; 0x2092 <__addsf3x+0x98>
    2064:	91 50       	subi	r25, 0x01	; 1
    2066:	a1 f0       	breq	.+40     	; 0x2090 <__addsf3x+0x96>
    2068:	ff 0f       	add	r31, r31
    206a:	bb 1f       	adc	r27, r27
    206c:	66 1f       	adc	r22, r22
    206e:	77 1f       	adc	r23, r23
    2070:	88 1f       	adc	r24, r24
    2072:	c2 f7       	brpl	.-16     	; 0x2064 <__addsf3x+0x6a>
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <__addsf3x+0x98>
    2076:	ba 0f       	add	r27, r26
    2078:	62 1f       	adc	r22, r18
    207a:	73 1f       	adc	r23, r19
    207c:	84 1f       	adc	r24, r20
    207e:	48 f4       	brcc	.+18     	; 0x2092 <__addsf3x+0x98>
    2080:	87 95       	ror	r24
    2082:	77 95       	ror	r23
    2084:	67 95       	ror	r22
    2086:	b7 95       	ror	r27
    2088:	f7 95       	ror	r31
    208a:	9e 3f       	cpi	r25, 0xFE	; 254
    208c:	08 f0       	brcs	.+2      	; 0x2090 <__addsf3x+0x96>
    208e:	b3 cf       	rjmp	.-154    	; 0x1ff6 <__addsf3+0x1e>
    2090:	93 95       	inc	r25
    2092:	88 0f       	add	r24, r24
    2094:	08 f0       	brcs	.+2      	; 0x2098 <__addsf3x+0x9e>
    2096:	99 27       	eor	r25, r25
    2098:	ee 0f       	add	r30, r30
    209a:	97 95       	ror	r25
    209c:	87 95       	ror	r24
    209e:	08 95       	ret

000020a0 <__divsf3>:
    20a0:	0c d0       	rcall	.+24     	; 0x20ba <__divsf3x>
    20a2:	eb c0       	rjmp	.+470    	; 0x227a <__fp_round>
    20a4:	e3 d0       	rcall	.+454    	; 0x226c <__fp_pscB>
    20a6:	40 f0       	brcs	.+16     	; 0x20b8 <__divsf3+0x18>
    20a8:	da d0       	rcall	.+436    	; 0x225e <__fp_pscA>
    20aa:	30 f0       	brcs	.+12     	; 0x20b8 <__divsf3+0x18>
    20ac:	21 f4       	brne	.+8      	; 0x20b6 <__divsf3+0x16>
    20ae:	5f 3f       	cpi	r21, 0xFF	; 255
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <__divsf3+0x18>
    20b2:	cc c0       	rjmp	.+408    	; 0x224c <__fp_inf>
    20b4:	51 11       	cpse	r21, r1
    20b6:	15 c1       	rjmp	.+554    	; 0x22e2 <__fp_szero>
    20b8:	cf c0       	rjmp	.+414    	; 0x2258 <__fp_nan>

000020ba <__divsf3x>:
    20ba:	f0 d0       	rcall	.+480    	; 0x229c <__fp_split3>
    20bc:	98 f3       	brcs	.-26     	; 0x20a4 <__divsf3+0x4>

000020be <__divsf3_pse>:
    20be:	99 23       	and	r25, r25
    20c0:	c9 f3       	breq	.-14     	; 0x20b4 <__divsf3+0x14>
    20c2:	55 23       	and	r21, r21
    20c4:	b1 f3       	breq	.-20     	; 0x20b2 <__divsf3+0x12>
    20c6:	95 1b       	sub	r25, r21
    20c8:	55 0b       	sbc	r21, r21
    20ca:	bb 27       	eor	r27, r27
    20cc:	aa 27       	eor	r26, r26
    20ce:	62 17       	cp	r22, r18
    20d0:	73 07       	cpc	r23, r19
    20d2:	84 07       	cpc	r24, r20
    20d4:	38 f0       	brcs	.+14     	; 0x20e4 <__divsf3_pse+0x26>
    20d6:	9f 5f       	subi	r25, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	44 1f       	adc	r20, r20
    20e0:	aa 1f       	adc	r26, r26
    20e2:	a9 f3       	breq	.-22     	; 0x20ce <__divsf3_pse+0x10>
    20e4:	33 d0       	rcall	.+102    	; 0x214c <__divsf3_pse+0x8e>
    20e6:	0e 2e       	mov	r0, r30
    20e8:	3a f0       	brmi	.+14     	; 0x20f8 <__divsf3_pse+0x3a>
    20ea:	e0 e8       	ldi	r30, 0x80	; 128
    20ec:	30 d0       	rcall	.+96     	; 0x214e <__divsf3_pse+0x90>
    20ee:	91 50       	subi	r25, 0x01	; 1
    20f0:	50 40       	sbci	r21, 0x00	; 0
    20f2:	e6 95       	lsr	r30
    20f4:	00 1c       	adc	r0, r0
    20f6:	ca f7       	brpl	.-14     	; 0x20ea <__divsf3_pse+0x2c>
    20f8:	29 d0       	rcall	.+82     	; 0x214c <__divsf3_pse+0x8e>
    20fa:	fe 2f       	mov	r31, r30
    20fc:	27 d0       	rcall	.+78     	; 0x214c <__divsf3_pse+0x8e>
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	88 1f       	adc	r24, r24
    2104:	bb 1f       	adc	r27, r27
    2106:	26 17       	cp	r18, r22
    2108:	37 07       	cpc	r19, r23
    210a:	48 07       	cpc	r20, r24
    210c:	ab 07       	cpc	r26, r27
    210e:	b0 e8       	ldi	r27, 0x80	; 128
    2110:	09 f0       	breq	.+2      	; 0x2114 <__divsf3_pse+0x56>
    2112:	bb 0b       	sbc	r27, r27
    2114:	80 2d       	mov	r24, r0
    2116:	bf 01       	movw	r22, r30
    2118:	ff 27       	eor	r31, r31
    211a:	93 58       	subi	r25, 0x83	; 131
    211c:	5f 4f       	sbci	r21, 0xFF	; 255
    211e:	2a f0       	brmi	.+10     	; 0x212a <__divsf3_pse+0x6c>
    2120:	9e 3f       	cpi	r25, 0xFE	; 254
    2122:	51 05       	cpc	r21, r1
    2124:	68 f0       	brcs	.+26     	; 0x2140 <__divsf3_pse+0x82>
    2126:	92 c0       	rjmp	.+292    	; 0x224c <__fp_inf>
    2128:	dc c0       	rjmp	.+440    	; 0x22e2 <__fp_szero>
    212a:	5f 3f       	cpi	r21, 0xFF	; 255
    212c:	ec f3       	brlt	.-6      	; 0x2128 <__divsf3_pse+0x6a>
    212e:	98 3e       	cpi	r25, 0xE8	; 232
    2130:	dc f3       	brlt	.-10     	; 0x2128 <__divsf3_pse+0x6a>
    2132:	86 95       	lsr	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	b7 95       	ror	r27
    213a:	f7 95       	ror	r31
    213c:	9f 5f       	subi	r25, 0xFF	; 255
    213e:	c9 f7       	brne	.-14     	; 0x2132 <__divsf3_pse+0x74>
    2140:	88 0f       	add	r24, r24
    2142:	91 1d       	adc	r25, r1
    2144:	96 95       	lsr	r25
    2146:	87 95       	ror	r24
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret
    214c:	e1 e0       	ldi	r30, 0x01	; 1
    214e:	66 0f       	add	r22, r22
    2150:	77 1f       	adc	r23, r23
    2152:	88 1f       	adc	r24, r24
    2154:	bb 1f       	adc	r27, r27
    2156:	62 17       	cp	r22, r18
    2158:	73 07       	cpc	r23, r19
    215a:	84 07       	cpc	r24, r20
    215c:	ba 07       	cpc	r27, r26
    215e:	20 f0       	brcs	.+8      	; 0x2168 <__divsf3_pse+0xaa>
    2160:	62 1b       	sub	r22, r18
    2162:	73 0b       	sbc	r23, r19
    2164:	84 0b       	sbc	r24, r20
    2166:	ba 0b       	sbc	r27, r26
    2168:	ee 1f       	adc	r30, r30
    216a:	88 f7       	brcc	.-30     	; 0x214e <__divsf3_pse+0x90>
    216c:	e0 95       	com	r30
    216e:	08 95       	ret

00002170 <__fixsfsi>:
    2170:	04 d0       	rcall	.+8      	; 0x217a <__fixunssfsi>
    2172:	68 94       	set
    2174:	b1 11       	cpse	r27, r1
    2176:	b5 c0       	rjmp	.+362    	; 0x22e2 <__fp_szero>
    2178:	08 95       	ret

0000217a <__fixunssfsi>:
    217a:	98 d0       	rcall	.+304    	; 0x22ac <__fp_splitA>
    217c:	88 f0       	brcs	.+34     	; 0x21a0 <__fixunssfsi+0x26>
    217e:	9f 57       	subi	r25, 0x7F	; 127
    2180:	90 f0       	brcs	.+36     	; 0x21a6 <__fixunssfsi+0x2c>
    2182:	b9 2f       	mov	r27, r25
    2184:	99 27       	eor	r25, r25
    2186:	b7 51       	subi	r27, 0x17	; 23
    2188:	a0 f0       	brcs	.+40     	; 0x21b2 <__fixunssfsi+0x38>
    218a:	d1 f0       	breq	.+52     	; 0x21c0 <__fixunssfsi+0x46>
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	1a f0       	brmi	.+6      	; 0x219c <__fixunssfsi+0x22>
    2196:	ba 95       	dec	r27
    2198:	c9 f7       	brne	.-14     	; 0x218c <__fixunssfsi+0x12>
    219a:	12 c0       	rjmp	.+36     	; 0x21c0 <__fixunssfsi+0x46>
    219c:	b1 30       	cpi	r27, 0x01	; 1
    219e:	81 f0       	breq	.+32     	; 0x21c0 <__fixunssfsi+0x46>
    21a0:	9f d0       	rcall	.+318    	; 0x22e0 <__fp_zero>
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	9c c0       	rjmp	.+312    	; 0x22e0 <__fp_zero>
    21a8:	67 2f       	mov	r22, r23
    21aa:	78 2f       	mov	r23, r24
    21ac:	88 27       	eor	r24, r24
    21ae:	b8 5f       	subi	r27, 0xF8	; 248
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <__fixunssfsi+0x46>
    21b2:	b9 3f       	cpi	r27, 0xF9	; 249
    21b4:	cc f3       	brlt	.-14     	; 0x21a8 <__fixunssfsi+0x2e>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b3 95       	inc	r27
    21be:	d9 f7       	brne	.-10     	; 0x21b6 <__fixunssfsi+0x3c>
    21c0:	3e f4       	brtc	.+14     	; 0x21d0 <__fixunssfsi+0x56>
    21c2:	90 95       	com	r25
    21c4:	80 95       	com	r24
    21c6:	70 95       	com	r23
    21c8:	61 95       	neg	r22
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	08 95       	ret

000021d2 <__floatunsisf>:
    21d2:	e8 94       	clt
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <__floatsisf+0x12>

000021d6 <__floatsisf>:
    21d6:	97 fb       	bst	r25, 7
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__floatsisf+0x12>
    21da:	90 95       	com	r25
    21dc:	80 95       	com	r24
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	99 23       	and	r25, r25
    21ea:	a9 f0       	breq	.+42     	; 0x2216 <__floatsisf+0x40>
    21ec:	f9 2f       	mov	r31, r25
    21ee:	96 e9       	ldi	r25, 0x96	; 150
    21f0:	bb 27       	eor	r27, r27
    21f2:	93 95       	inc	r25
    21f4:	f6 95       	lsr	r31
    21f6:	87 95       	ror	r24
    21f8:	77 95       	ror	r23
    21fa:	67 95       	ror	r22
    21fc:	b7 95       	ror	r27
    21fe:	f1 11       	cpse	r31, r1
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <__floatsisf+0x1c>
    2202:	fa f4       	brpl	.+62     	; 0x2242 <__floatsisf+0x6c>
    2204:	bb 0f       	add	r27, r27
    2206:	11 f4       	brne	.+4      	; 0x220c <__floatsisf+0x36>
    2208:	60 ff       	sbrs	r22, 0
    220a:	1b c0       	rjmp	.+54     	; 0x2242 <__floatsisf+0x6c>
    220c:	6f 5f       	subi	r22, 0xFF	; 255
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	16 c0       	rjmp	.+44     	; 0x2242 <__floatsisf+0x6c>
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <__floatsisf+0x48>
    221a:	96 e9       	ldi	r25, 0x96	; 150
    221c:	11 c0       	rjmp	.+34     	; 0x2240 <__floatsisf+0x6a>
    221e:	77 23       	and	r23, r23
    2220:	21 f0       	breq	.+8      	; 0x222a <__floatsisf+0x54>
    2222:	9e e8       	ldi	r25, 0x8E	; 142
    2224:	87 2f       	mov	r24, r23
    2226:	76 2f       	mov	r23, r22
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <__floatsisf+0x5e>
    222a:	66 23       	and	r22, r22
    222c:	71 f0       	breq	.+28     	; 0x224a <__floatsisf+0x74>
    222e:	96 e8       	ldi	r25, 0x86	; 134
    2230:	86 2f       	mov	r24, r22
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	2a f0       	brmi	.+10     	; 0x2242 <__floatsisf+0x6c>
    2238:	9a 95       	dec	r25
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	da f7       	brpl	.-10     	; 0x2238 <__floatsisf+0x62>
    2242:	88 0f       	add	r24, r24
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__fp_inf>:
    224c:	97 f9       	bld	r25, 7
    224e:	9f 67       	ori	r25, 0x7F	; 127
    2250:	80 e8       	ldi	r24, 0x80	; 128
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	08 95       	ret

00002258 <__fp_nan>:
    2258:	9f ef       	ldi	r25, 0xFF	; 255
    225a:	80 ec       	ldi	r24, 0xC0	; 192
    225c:	08 95       	ret

0000225e <__fp_pscA>:
    225e:	00 24       	eor	r0, r0
    2260:	0a 94       	dec	r0
    2262:	16 16       	cp	r1, r22
    2264:	17 06       	cpc	r1, r23
    2266:	18 06       	cpc	r1, r24
    2268:	09 06       	cpc	r0, r25
    226a:	08 95       	ret

0000226c <__fp_pscB>:
    226c:	00 24       	eor	r0, r0
    226e:	0a 94       	dec	r0
    2270:	12 16       	cp	r1, r18
    2272:	13 06       	cpc	r1, r19
    2274:	14 06       	cpc	r1, r20
    2276:	05 06       	cpc	r0, r21
    2278:	08 95       	ret

0000227a <__fp_round>:
    227a:	09 2e       	mov	r0, r25
    227c:	03 94       	inc	r0
    227e:	00 0c       	add	r0, r0
    2280:	11 f4       	brne	.+4      	; 0x2286 <__fp_round+0xc>
    2282:	88 23       	and	r24, r24
    2284:	52 f0       	brmi	.+20     	; 0x229a <__fp_round+0x20>
    2286:	bb 0f       	add	r27, r27
    2288:	40 f4       	brcc	.+16     	; 0x229a <__fp_round+0x20>
    228a:	bf 2b       	or	r27, r31
    228c:	11 f4       	brne	.+4      	; 0x2292 <__fp_round+0x18>
    228e:	60 ff       	sbrs	r22, 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <__fp_round+0x20>
    2292:	6f 5f       	subi	r22, 0xFF	; 255
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	8f 4f       	sbci	r24, 0xFF	; 255
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	08 95       	ret

0000229c <__fp_split3>:
    229c:	57 fd       	sbrc	r21, 7
    229e:	90 58       	subi	r25, 0x80	; 128
    22a0:	44 0f       	add	r20, r20
    22a2:	55 1f       	adc	r21, r21
    22a4:	59 f0       	breq	.+22     	; 0x22bc <__fp_splitA+0x10>
    22a6:	5f 3f       	cpi	r21, 0xFF	; 255
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <__fp_splitA+0x1a>
    22aa:	47 95       	ror	r20

000022ac <__fp_splitA>:
    22ac:	88 0f       	add	r24, r24
    22ae:	97 fb       	bst	r25, 7
    22b0:	99 1f       	adc	r25, r25
    22b2:	61 f0       	breq	.+24     	; 0x22cc <__fp_splitA+0x20>
    22b4:	9f 3f       	cpi	r25, 0xFF	; 255
    22b6:	79 f0       	breq	.+30     	; 0x22d6 <__fp_splitA+0x2a>
    22b8:	87 95       	ror	r24
    22ba:	08 95       	ret
    22bc:	12 16       	cp	r1, r18
    22be:	13 06       	cpc	r1, r19
    22c0:	14 06       	cpc	r1, r20
    22c2:	55 1f       	adc	r21, r21
    22c4:	f2 cf       	rjmp	.-28     	; 0x22aa <__fp_split3+0xe>
    22c6:	46 95       	lsr	r20
    22c8:	f1 df       	rcall	.-30     	; 0x22ac <__fp_splitA>
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <__fp_splitA+0x30>
    22cc:	16 16       	cp	r1, r22
    22ce:	17 06       	cpc	r1, r23
    22d0:	18 06       	cpc	r1, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	f1 cf       	rjmp	.-30     	; 0x22b8 <__fp_splitA+0xc>
    22d6:	86 95       	lsr	r24
    22d8:	71 05       	cpc	r23, r1
    22da:	61 05       	cpc	r22, r1
    22dc:	08 94       	sec
    22de:	08 95       	ret

000022e0 <__fp_zero>:
    22e0:	e8 94       	clt

000022e2 <__fp_szero>:
    22e2:	bb 27       	eor	r27, r27
    22e4:	66 27       	eor	r22, r22
    22e6:	77 27       	eor	r23, r23
    22e8:	cb 01       	movw	r24, r22
    22ea:	97 f9       	bld	r25, 7
    22ec:	08 95       	ret

000022ee <__mulsf3>:
    22ee:	0b d0       	rcall	.+22     	; 0x2306 <__mulsf3x>
    22f0:	c4 cf       	rjmp	.-120    	; 0x227a <__fp_round>
    22f2:	b5 df       	rcall	.-150    	; 0x225e <__fp_pscA>
    22f4:	28 f0       	brcs	.+10     	; 0x2300 <__mulsf3+0x12>
    22f6:	ba df       	rcall	.-140    	; 0x226c <__fp_pscB>
    22f8:	18 f0       	brcs	.+6      	; 0x2300 <__mulsf3+0x12>
    22fa:	95 23       	and	r25, r21
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__mulsf3+0x12>
    22fe:	a6 cf       	rjmp	.-180    	; 0x224c <__fp_inf>
    2300:	ab cf       	rjmp	.-170    	; 0x2258 <__fp_nan>
    2302:	11 24       	eor	r1, r1
    2304:	ee cf       	rjmp	.-36     	; 0x22e2 <__fp_szero>

00002306 <__mulsf3x>:
    2306:	ca df       	rcall	.-108    	; 0x229c <__fp_split3>
    2308:	a0 f3       	brcs	.-24     	; 0x22f2 <__mulsf3+0x4>

0000230a <__mulsf3_pse>:
    230a:	95 9f       	mul	r25, r21
    230c:	d1 f3       	breq	.-12     	; 0x2302 <__mulsf3+0x14>
    230e:	95 0f       	add	r25, r21
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	55 1f       	adc	r21, r21
    2314:	62 9f       	mul	r22, r18
    2316:	f0 01       	movw	r30, r0
    2318:	72 9f       	mul	r23, r18
    231a:	bb 27       	eor	r27, r27
    231c:	f0 0d       	add	r31, r0
    231e:	b1 1d       	adc	r27, r1
    2320:	63 9f       	mul	r22, r19
    2322:	aa 27       	eor	r26, r26
    2324:	f0 0d       	add	r31, r0
    2326:	b1 1d       	adc	r27, r1
    2328:	aa 1f       	adc	r26, r26
    232a:	64 9f       	mul	r22, r20
    232c:	66 27       	eor	r22, r22
    232e:	b0 0d       	add	r27, r0
    2330:	a1 1d       	adc	r26, r1
    2332:	66 1f       	adc	r22, r22
    2334:	82 9f       	mul	r24, r18
    2336:	22 27       	eor	r18, r18
    2338:	b0 0d       	add	r27, r0
    233a:	a1 1d       	adc	r26, r1
    233c:	62 1f       	adc	r22, r18
    233e:	73 9f       	mul	r23, r19
    2340:	b0 0d       	add	r27, r0
    2342:	a1 1d       	adc	r26, r1
    2344:	62 1f       	adc	r22, r18
    2346:	83 9f       	mul	r24, r19
    2348:	a0 0d       	add	r26, r0
    234a:	61 1d       	adc	r22, r1
    234c:	22 1f       	adc	r18, r18
    234e:	74 9f       	mul	r23, r20
    2350:	33 27       	eor	r19, r19
    2352:	a0 0d       	add	r26, r0
    2354:	61 1d       	adc	r22, r1
    2356:	23 1f       	adc	r18, r19
    2358:	84 9f       	mul	r24, r20
    235a:	60 0d       	add	r22, r0
    235c:	21 1d       	adc	r18, r1
    235e:	82 2f       	mov	r24, r18
    2360:	76 2f       	mov	r23, r22
    2362:	6a 2f       	mov	r22, r26
    2364:	11 24       	eor	r1, r1
    2366:	9f 57       	subi	r25, 0x7F	; 127
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	8a f0       	brmi	.+34     	; 0x238e <__mulsf3_pse+0x84>
    236c:	e1 f0       	breq	.+56     	; 0x23a6 <__mulsf3_pse+0x9c>
    236e:	88 23       	and	r24, r24
    2370:	4a f0       	brmi	.+18     	; 0x2384 <__mulsf3_pse+0x7a>
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	bb 1f       	adc	r27, r27
    2378:	66 1f       	adc	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	91 50       	subi	r25, 0x01	; 1
    2380:	50 40       	sbci	r21, 0x00	; 0
    2382:	a9 f7       	brne	.-22     	; 0x236e <__mulsf3_pse+0x64>
    2384:	9e 3f       	cpi	r25, 0xFE	; 254
    2386:	51 05       	cpc	r21, r1
    2388:	70 f0       	brcs	.+28     	; 0x23a6 <__mulsf3_pse+0x9c>
    238a:	60 cf       	rjmp	.-320    	; 0x224c <__fp_inf>
    238c:	aa cf       	rjmp	.-172    	; 0x22e2 <__fp_szero>
    238e:	5f 3f       	cpi	r21, 0xFF	; 255
    2390:	ec f3       	brlt	.-6      	; 0x238c <__mulsf3_pse+0x82>
    2392:	98 3e       	cpi	r25, 0xE8	; 232
    2394:	dc f3       	brlt	.-10     	; 0x238c <__mulsf3_pse+0x82>
    2396:	86 95       	lsr	r24
    2398:	77 95       	ror	r23
    239a:	67 95       	ror	r22
    239c:	b7 95       	ror	r27
    239e:	f7 95       	ror	r31
    23a0:	e7 95       	ror	r30
    23a2:	9f 5f       	subi	r25, 0xFF	; 255
    23a4:	c1 f7       	brne	.-16     	; 0x2396 <__mulsf3_pse+0x8c>
    23a6:	fe 2b       	or	r31, r30
    23a8:	88 0f       	add	r24, r24
    23aa:	91 1d       	adc	r25, r1
    23ac:	96 95       	lsr	r25
    23ae:	87 95       	ror	r24
    23b0:	97 f9       	bld	r25, 7
    23b2:	08 95       	ret

000023b4 <__divmodhi4>:
    23b4:	97 fb       	bst	r25, 7
    23b6:	07 2e       	mov	r0, r23
    23b8:	16 f4       	brtc	.+4      	; 0x23be <__divmodhi4+0xa>
    23ba:	00 94       	com	r0
    23bc:	06 d0       	rcall	.+12     	; 0x23ca <__divmodhi4_neg1>
    23be:	77 fd       	sbrc	r23, 7
    23c0:	08 d0       	rcall	.+16     	; 0x23d2 <__divmodhi4_neg2>
    23c2:	0b d0       	rcall	.+22     	; 0x23da <__udivmodhi4>
    23c4:	07 fc       	sbrc	r0, 7
    23c6:	05 d0       	rcall	.+10     	; 0x23d2 <__divmodhi4_neg2>
    23c8:	3e f4       	brtc	.+14     	; 0x23d8 <__divmodhi4_exit>

000023ca <__divmodhi4_neg1>:
    23ca:	90 95       	com	r25
    23cc:	81 95       	neg	r24
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	08 95       	ret

000023d2 <__divmodhi4_neg2>:
    23d2:	70 95       	com	r23
    23d4:	61 95       	neg	r22
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255

000023d8 <__divmodhi4_exit>:
    23d8:	08 95       	ret

000023da <__udivmodhi4>:
    23da:	aa 1b       	sub	r26, r26
    23dc:	bb 1b       	sub	r27, r27
    23de:	51 e1       	ldi	r21, 0x11	; 17
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <__udivmodhi4_ep>

000023e2 <__udivmodhi4_loop>:
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	a6 17       	cp	r26, r22
    23e8:	b7 07       	cpc	r27, r23
    23ea:	10 f0       	brcs	.+4      	; 0x23f0 <__udivmodhi4_ep>
    23ec:	a6 1b       	sub	r26, r22
    23ee:	b7 0b       	sbc	r27, r23

000023f0 <__udivmodhi4_ep>:
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	5a 95       	dec	r21
    23f6:	a9 f7       	brne	.-22     	; 0x23e2 <__udivmodhi4_loop>
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	08 95       	ret

00002402 <strcpy>:
    2402:	fb 01       	movw	r30, r22
    2404:	dc 01       	movw	r26, r24
    2406:	01 90       	ld	r0, Z+
    2408:	0d 92       	st	X+, r0
    240a:	00 20       	and	r0, r0
    240c:	e1 f7       	brne	.-8      	; 0x2406 <strcpy+0x4>
    240e:	08 95       	ret

00002410 <_exit>:
    2410:	f8 94       	cli

00002412 <__stop_program>:
    2412:	ff cf       	rjmp	.-2      	; 0x2412 <__stop_program>
