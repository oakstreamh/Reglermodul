
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001ce8  00001d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001da  008001da  00001e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025eb  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c9  00000000  00000000  000045f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e59  00000000  00000000  00004fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b4  00000000  00000000  00006e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010be5  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001228  00000000  00000000  00017eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000190dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003831  00000000  00000000  0001923d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_19>
      50:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ee       	ldi	r30, 0xE8	; 232
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 32       	cpi	r26, 0x22	; 34
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <main>
      c6:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
 * The fuzzy logic controller is designed to manage the fourth state
 */

void FLC_steering(int c, int v)

{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c4 5c       	subi	r28, 0xC4	; 196
      f6:	d1 40       	sbci	r29, 0x01	; 1
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	6c 01       	movw	r12, r24
     104:	2b 01       	movw	r4, r22
    
    
    
	if ((c == 227) & (v == 45))            // No lines detected
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	6d 32       	cpi	r22, 0x2D	; 45
     10a:	71 05       	cpc	r23, r1
     10c:	09 f0       	breq	.+2      	; 0x110 <FLC_steering+0x44>
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	43 ee       	ldi	r20, 0xE3	; 227
     114:	c4 16       	cp	r12, r20
     116:	d1 04       	cpc	r13, r1
     118:	09 f0       	breq	.+2      	; 0x11c <FLC_steering+0x50>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	88 23       	and	r24, r24
     11e:	39 f0       	breq	.+14     	; 0x12e <FLC_steering+0x62>
     120:	99 23       	and	r25, r25
     122:	29 f0       	breq	.+10     	; 0x12e <FLC_steering+0x62>
	{
		setServo(STRAIGHT);
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	9a e0       	ldi	r25, 0x0A	; 10
     128:	0e 94 bc 0a 	call	0x1578	; 0x1578 <setServo>
     12c:	2a c3       	rjmp	.+1620   	; 0x782 <FLC_steering+0x6b6>
		
	}
	else if ((c == 20) & (v == 45))        // right curvature, turn right
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	54 e1       	ldi	r21, 0x14	; 20
     132:	c5 16       	cp	r12, r21
     134:	d1 04       	cpc	r13, r1
     136:	09 f0       	breq	.+2      	; 0x13a <FLC_steering+0x6e>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	88 23       	and	r24, r24
     13c:	39 f0       	breq	.+14     	; 0x14c <FLC_steering+0x80>
     13e:	99 23       	and	r25, r25
     140:	29 f0       	breq	.+10     	; 0x14c <FLC_steering+0x80>
	{
		setServo(MAXRIGHT);
     142:	8f e3       	ldi	r24, 0x3F	; 63
     144:	9c e0       	ldi	r25, 0x0C	; 12
     146:	0e 94 bc 0a 	call	0x1578	; 0x1578 <setServo>
     14a:	1b c3       	rjmp	.+1590   	; 0x782 <FLC_steering+0x6b6>
	}
	else if ((c == 210) & (v == 45))       // left curvature, turn left
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	62 ed       	ldi	r22, 0xD2	; 210
     150:	c6 16       	cp	r12, r22
     152:	d1 04       	cpc	r13, r1
     154:	09 f0       	breq	.+2      	; 0x158 <FLC_steering+0x8c>
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	88 23       	and	r24, r24
     15a:	39 f0       	breq	.+14     	; 0x16a <FLC_steering+0x9e>
     15c:	99 23       	and	r25, r25
     15e:	29 f0       	breq	.+10     	; 0x16a <FLC_steering+0x9e>
	{
		setServo(MAXLEFT);
     160:	86 ee       	ldi	r24, 0xE6	; 230
     162:	97 e0       	ldi	r25, 0x07	; 7
     164:	0e 94 bc 0a 	call	0x1578	; 0x1578 <setServo>
     168:	0c c3       	rjmp	.+1560   	; 0x782 <FLC_steering+0x6b6>
	{
		
		
		///// DECLARATION OF C INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_C; strcpy(delta_C.name, "delta_C");  //5-15 rakt på höger sida
     16a:	88 e0       	ldi	r24, 0x08	; 8
     16c:	e0 e0       	ldi	r30, 0x00	; 0
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	de 01       	movw	r26, r28
     172:	ad 5e       	subi	r26, 0xED	; 237
     174:	be 4f       	sbci	r27, 0xFE	; 254
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	8a 95       	dec	r24
     17c:	e1 f7       	brne	.-8      	; 0x176 <FLC_steering+0xaa>
		
		struct mf_type inNegative;
		MATLAB_MF(&inNegative, "inNegative", 34, 35, 60, 110);
     17e:	3e 01       	movw	r6, r28
     180:	8d ed       	ldi	r24, 0xDD	; 221
     182:	68 0e       	add	r6, r24
     184:	71 1c       	adc	r7, r1
     186:	0f 2e       	mov	r0, r31
     188:	fe e6       	ldi	r31, 0x6E	; 110
     18a:	ef 2e       	mov	r14, r31
     18c:	f1 2c       	mov	r15, r1
     18e:	f0 2d       	mov	r31, r0
     190:	0c e3       	ldi	r16, 0x3C	; 60
     192:	10 e0       	ldi	r17, 0x00	; 0
     194:	23 e2       	ldi	r18, 0x23	; 35
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	42 e2       	ldi	r20, 0x22	; 34
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	68 e0       	ldi	r22, 0x08	; 8
     19e:	71 e0       	ldi	r23, 0x01	; 1
     1a0:	c3 01       	movw	r24, r6
     1a2:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		struct mf_type inZero;
		MATLAB_MF(&inZero, "inZero", 75, 125, 125, 175);
     1a6:	4e 01       	movw	r8, r28
     1a8:	97 ec       	ldi	r25, 0xC7	; 199
     1aa:	89 0e       	add	r8, r25
     1ac:	91 1c       	adc	r9, r1
     1ae:	0f 2e       	mov	r0, r31
     1b0:	ff ea       	ldi	r31, 0xAF	; 175
     1b2:	ef 2e       	mov	r14, r31
     1b4:	f1 2c       	mov	r15, r1
     1b6:	f0 2d       	mov	r31, r0
     1b8:	0d e7       	ldi	r16, 0x7D	; 125
     1ba:	10 e0       	ldi	r17, 0x00	; 0
     1bc:	2d e7       	ldi	r18, 0x7D	; 125
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	4b e4       	ldi	r20, 0x4B	; 75
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	63 e1       	ldi	r22, 0x13	; 19
     1c6:	71 e0       	ldi	r23, 0x01	; 1
     1c8:	c4 01       	movw	r24, r8
     1ca:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		struct mf_type inPositive;
		MATLAB_MF(&inPositive, "inPositive", 140, 190, 205, 206);
     1ce:	5e 01       	movw	r10, r28
     1d0:	a1 eb       	ldi	r26, 0xB1	; 177
     1d2:	aa 0e       	add	r10, r26
     1d4:	b1 1c       	adc	r11, r1
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fe ec       	ldi	r31, 0xCE	; 206
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 2c       	mov	r15, r1
     1de:	f0 2d       	mov	r31, r0
     1e0:	0d ec       	ldi	r16, 0xCD	; 205
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	2e eb       	ldi	r18, 0xBE	; 190
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	4c e8       	ldi	r20, 0x8C	; 140
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	6a e1       	ldi	r22, 0x1A	; 26
     1ee:	71 e0       	ldi	r23, 0x01	; 1
     1f0:	c5 01       	movw	r24, r10
     1f2:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		
		delta_C.membership_functions = &inNegative;
     1f6:	c1 5e       	subi	r28, 0xE1	; 225
     1f8:	de 4f       	sbci	r29, 0xFE	; 254
     1fa:	79 82       	std	Y+1, r7	; 0x01
     1fc:	68 82       	st	Y, r6
     1fe:	cf 51       	subi	r28, 0x1F	; 31
     200:	d1 40       	sbci	r29, 0x01	; 1
		inNegative.next = &inZero;
     202:	f3 01       	movw	r30, r6
     204:	95 8a       	std	Z+21, r9	; 0x15
     206:	84 8a       	std	Z+20, r8	; 0x14
		inZero.next = &inPositive;
     208:	d4 01       	movw	r26, r8
     20a:	55 96       	adiw	r26, 0x15	; 21
     20c:	bc 92       	st	X, r11
     20e:	ae 92       	st	-X, r10
     210:	54 97       	sbiw	r26, 0x14	; 20
		inPositive.next = NULL;
     212:	f5 01       	movw	r30, r10
     214:	15 8a       	std	Z+21, r1	; 0x15
     216:	14 8a       	std	Z+20, r1	; 0x14
		
		// set iErr's input value to measErr value
		if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     218:	dd 20       	and	r13, r13
     21a:	3c f4       	brge	.+14     	; 0x22a <FLC_steering+0x15e>
		{
			delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     21c:	c3 5e       	subi	r28, 0xE3	; 227
     21e:	de 4f       	sbci	r29, 0xFE	; 254
     220:	19 82       	std	Y+1, r1	; 0x01
     222:	18 82       	st	Y, r1
     224:	cd 51       	subi	r28, 0x1D	; 29
     226:	d1 40       	sbci	r29, 0x01	; 1
     228:	13 c0       	rjmp	.+38     	; 0x250 <FLC_steering+0x184>
		}
		else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     22a:	fe ec       	ldi	r31, 0xCE	; 206
     22c:	cf 16       	cp	r12, r31
     22e:	d1 04       	cpc	r13, r1
     230:	4c f0       	brlt	.+18     	; 0x244 <FLC_steering+0x178>
		{
			delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     232:	8d ec       	ldi	r24, 0xCD	; 205
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	c3 5e       	subi	r28, 0xE3	; 227
     238:	de 4f       	sbci	r29, 0xFE	; 254
     23a:	99 83       	std	Y+1, r25	; 0x01
     23c:	88 83       	st	Y, r24
     23e:	cd 51       	subi	r28, 0x1D	; 29
     240:	d1 40       	sbci	r29, 0x01	; 1
     242:	06 c0       	rjmp	.+12     	; 0x250 <FLC_steering+0x184>
		}
		else
		{
			delta_C.value = c;
     244:	c3 5e       	subi	r28, 0xE3	; 227
     246:	de 4f       	sbci	r29, 0xFE	; 254
     248:	d9 82       	std	Y+1, r13	; 0x01
     24a:	c8 82       	st	Y, r12
     24c:	cd 51       	subi	r28, 0x1D	; 29
     24e:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF V INPUT VARIABLE ///////////////////////////////////
		
		struct io_type delta_V; strcpy(delta_V.name, "delta_V");
     250:	88 e0       	ldi	r24, 0x08	; 8
     252:	e5 e2       	ldi	r30, 0x25	; 37
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	de 01       	movw	r26, r28
     258:	ad 5f       	subi	r26, 0xFD	; 253
     25a:	be 4f       	sbci	r27, 0xFE	; 254
     25c:	01 90       	ld	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	8a 95       	dec	r24
     262:	e1 f7       	brne	.-8      	; 0x25c <FLC_steering+0x190>
		
		struct mf_type inMinus;
		MATLAB_MF(&inMinus, "inMinus", -1, 0, 10, 30);
     264:	4e 01       	movw	r8, r28
     266:	2b e9       	ldi	r18, 0x9B	; 155
     268:	82 0e       	add	r8, r18
     26a:	91 1c       	adc	r9, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	fe e1       	ldi	r31, 0x1E	; 30
     270:	ef 2e       	mov	r14, r31
     272:	f1 2c       	mov	r15, r1
     274:	f0 2d       	mov	r31, r0
     276:	0a e0       	ldi	r16, 0x0A	; 10
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	4f ef       	ldi	r20, 0xFF	; 255
     280:	5f ef       	ldi	r21, 0xFF	; 255
     282:	6d e2       	ldi	r22, 0x2D	; 45
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	c4 01       	movw	r24, r8
     288:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		struct mf_type inNyll;
		MATLAB_MF(&inNyll, "inNyll", 20 , 40, 40, 60);
     28c:	5e 01       	movw	r10, r28
     28e:	45 e8       	ldi	r20, 0x85	; 133
     290:	a4 0e       	add	r10, r20
     292:	b1 1c       	adc	r11, r1
     294:	0f 2e       	mov	r0, r31
     296:	fc e3       	ldi	r31, 0x3C	; 60
     298:	ef 2e       	mov	r14, r31
     29a:	f1 2c       	mov	r15, r1
     29c:	f0 2d       	mov	r31, r0
     29e:	08 e2       	ldi	r16, 0x28	; 40
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	28 e2       	ldi	r18, 0x28	; 40
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	44 e1       	ldi	r20, 0x14	; 20
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	65 e3       	ldi	r22, 0x35	; 53
     2ac:	71 e0       	ldi	r23, 0x01	; 1
     2ae:	c5 01       	movw	r24, r10
     2b0:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		struct mf_type inPlus;
		MATLAB_MF(&inPlus, "inPlus", 50, 70, 80, 81);
     2b4:	6e 01       	movw	r12, r28
     2b6:	5f e6       	ldi	r21, 0x6F	; 111
     2b8:	c5 0e       	add	r12, r21
     2ba:	d1 1c       	adc	r13, r1
     2bc:	0f 2e       	mov	r0, r31
     2be:	f1 e5       	ldi	r31, 0x51	; 81
     2c0:	ef 2e       	mov	r14, r31
     2c2:	f1 2c       	mov	r15, r1
     2c4:	f0 2d       	mov	r31, r0
     2c6:	00 e5       	ldi	r16, 0x50	; 80
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	26 e4       	ldi	r18, 0x46	; 70
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	42 e3       	ldi	r20, 0x32	; 50
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	6c e3       	ldi	r22, 0x3C	; 60
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	c6 01       	movw	r24, r12
     2d8:	0e 94 b3 09 	call	0x1366	; 0x1366 <MATLAB_MF>
		
		delta_V.membership_functions = &inMinus;
     2dc:	c1 5f       	subi	r28, 0xF1	; 241
     2de:	de 4f       	sbci	r29, 0xFE	; 254
     2e0:	99 82       	std	Y+1, r9	; 0x01
     2e2:	88 82       	st	Y, r8
     2e4:	cf 50       	subi	r28, 0x0F	; 15
     2e6:	d1 40       	sbci	r29, 0x01	; 1
		inMinus.next = &inNyll;
     2e8:	d4 01       	movw	r26, r8
     2ea:	55 96       	adiw	r26, 0x15	; 21
     2ec:	bc 92       	st	X, r11
     2ee:	ae 92       	st	-X, r10
     2f0:	54 97       	sbiw	r26, 0x14	; 20
		inNyll.next = &inPlus;
     2f2:	f5 01       	movw	r30, r10
     2f4:	d5 8a       	std	Z+21, r13	; 0x15
     2f6:	c4 8a       	std	Z+20, r12	; 0x14
		inPlus.next = NULL;
     2f8:	d6 01       	movw	r26, r12
     2fa:	55 96       	adiw	r26, 0x15	; 21
     2fc:	1c 92       	st	X, r1
     2fe:	1e 92       	st	-X, r1
     300:	54 97       	sbiw	r26, 0x14	; 20
		
		// set V's input value to V´s value
		if(v<0)				// if sensor value is smaller than error's input set lower limit
     302:	55 20       	and	r5, r5
     304:	3c f4       	brge	.+14     	; 0x314 <FLC_steering+0x248>
		{
			delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     306:	c3 5f       	subi	r28, 0xF3	; 243
     308:	de 4f       	sbci	r29, 0xFE	; 254
     30a:	19 82       	std	Y+1, r1	; 0x01
     30c:	18 82       	st	Y, r1
     30e:	cd 50       	subi	r28, 0x0D	; 13
     310:	d1 40       	sbci	r29, 0x01	; 1
     312:	13 c0       	rjmp	.+38     	; 0x33a <FLC_steering+0x26e>
		}
		else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     314:	b1 e5       	ldi	r27, 0x51	; 81
     316:	4b 16       	cp	r4, r27
     318:	51 04       	cpc	r5, r1
     31a:	4c f0       	brlt	.+18     	; 0x32e <FLC_steering+0x262>
		{
			delta_V.value = 80;  // force input value to lowest point in error's input set
     31c:	80 e5       	ldi	r24, 0x50	; 80
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	c3 5f       	subi	r28, 0xF3	; 243
     322:	de 4f       	sbci	r29, 0xFE	; 254
     324:	99 83       	std	Y+1, r25	; 0x01
     326:	88 83       	st	Y, r24
     328:	cd 50       	subi	r28, 0x0D	; 13
     32a:	d1 40       	sbci	r29, 0x01	; 1
     32c:	06 c0       	rjmp	.+12     	; 0x33a <FLC_steering+0x26e>
		}
		else
		{
			delta_V.value = v;
     32e:	c3 5f       	subi	r28, 0xF3	; 243
     330:	de 4f       	sbci	r29, 0xFE	; 254
     332:	59 82       	std	Y+1, r5	; 0x01
     334:	48 82       	st	Y, r4
     336:	cd 50       	subi	r28, 0x0D	; 13
     338:	d1 40       	sbci	r29, 0x01	; 1
		}
		
		///// DECLARATION OF STEERING OUTPUT VARIABLE ///////////////////////////////////

		struct io_type steering; strcpy(steering.name, "steering");
     33a:	1e 01       	movw	r2, r28
     33c:	e3 ef       	ldi	r30, 0xF3	; 243
     33e:	2e 0e       	add	r2, r30
     340:	31 1c       	adc	r3, r1
     342:	89 e0       	ldi	r24, 0x09	; 9
     344:	e3 e4       	ldi	r30, 0x43	; 67
     346:	f1 e0       	ldi	r31, 0x01	; 1
     348:	d1 01       	movw	r26, r2
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	8a 95       	dec	r24
     350:	e1 f7       	brne	.-8      	; 0x34a <FLC_steering+0x27e>
		
		struct mf_type sharpLeft;
		MATLAB_MF(&sharpLeft, "sharpLeft", 2259, 2260, 2260, 2360);
     352:	2e 01       	movw	r4, r28
     354:	f9 e5       	ldi	r31, 0x59	; 89
     356:	4f 0e       	add	r4, r31
     358:	51 1c       	adc	r5, r1
     35a:	0f 2e       	mov	r0, r31
     35c:	f8 e3       	ldi	r31, 0x38	; 56
     35e:	ef 2e       	mov	r14, r31
     360:	f9 e0       	ldi	r31, 0x09	; 9
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	04 ed       	ldi	r16, 0xD4	; 212
     368:	18 e0       	ldi	r17, 0x08	; 8
     36a:	24 ed       	ldi	r18, 0xD4	; 212
     36c:	38 e0       	ldi	r19, 0x08	; 8
     36e:	43 ed       	ldi	r20, 0xD3	; 211
     370:	58 e0       	ldi	r21, 0x08	; 8
     372:	6c e4       	ldi	r22, 0x4C	; 76
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	c2 01       	movw	r24, r4
     378:	f6 d7       	rcall	.+4076   	; 0x1366 <MATLAB_MF>
		struct mf_type left;
		MATLAB_MF(&left, "left", 2360, 2460, 2460, 2560);
     37a:	6e 01       	movw	r12, r28
     37c:	23 e4       	ldi	r18, 0x43	; 67
     37e:	c2 0e       	add	r12, r18
     380:	d1 1c       	adc	r13, r1
     382:	0f 2e       	mov	r0, r31
     384:	e1 2c       	mov	r14, r1
     386:	fa e0       	ldi	r31, 0x0A	; 10
     388:	ff 2e       	mov	r15, r31
     38a:	f0 2d       	mov	r31, r0
     38c:	0c e9       	ldi	r16, 0x9C	; 156
     38e:	19 e0       	ldi	r17, 0x09	; 9
     390:	2c e9       	ldi	r18, 0x9C	; 156
     392:	39 e0       	ldi	r19, 0x09	; 9
     394:	48 e3       	ldi	r20, 0x38	; 56
     396:	59 e0       	ldi	r21, 0x09	; 9
     398:	66 e5       	ldi	r22, 0x56	; 86
     39a:	71 e0       	ldi	r23, 0x01	; 1
     39c:	c6 01       	movw	r24, r12
     39e:	e3 d7       	rcall	.+4038   	; 0x1366 <MATLAB_MF>
		struct mf_type straight;
		MATLAB_MF(&straight, "straight", 2560, 2660, 2660, 2760);
     3a0:	5e 01       	movw	r10, r28
     3a2:	4d e2       	ldi	r20, 0x2D	; 45
     3a4:	a4 0e       	add	r10, r20
     3a6:	b1 1c       	adc	r11, r1
     3a8:	0f 2e       	mov	r0, r31
     3aa:	f8 ec       	ldi	r31, 0xC8	; 200
     3ac:	ef 2e       	mov	r14, r31
     3ae:	fa e0       	ldi	r31, 0x0A	; 10
     3b0:	ff 2e       	mov	r15, r31
     3b2:	f0 2d       	mov	r31, r0
     3b4:	04 e6       	ldi	r16, 0x64	; 100
     3b6:	1a e0       	ldi	r17, 0x0A	; 10
     3b8:	24 e6       	ldi	r18, 0x64	; 100
     3ba:	3a e0       	ldi	r19, 0x0A	; 10
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	5a e0       	ldi	r21, 0x0A	; 10
     3c0:	6b e5       	ldi	r22, 0x5B	; 91
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	c5 01       	movw	r24, r10
     3c6:	cf d7       	rcall	.+3998   	; 0x1366 <MATLAB_MF>
		struct mf_type right;
		MATLAB_MF(&right, "right", 2760, 2860, 2860, 2960);
     3c8:	4e 01       	movw	r8, r28
     3ca:	57 e1       	ldi	r21, 0x17	; 23
     3cc:	85 0e       	add	r8, r21
     3ce:	91 1c       	adc	r9, r1
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f0 e9       	ldi	r31, 0x90	; 144
     3d4:	ef 2e       	mov	r14, r31
     3d6:	fb e0       	ldi	r31, 0x0B	; 11
     3d8:	ff 2e       	mov	r15, r31
     3da:	f0 2d       	mov	r31, r0
     3dc:	0c e2       	ldi	r16, 0x2C	; 44
     3de:	1b e0       	ldi	r17, 0x0B	; 11
     3e0:	2c e2       	ldi	r18, 0x2C	; 44
     3e2:	3b e0       	ldi	r19, 0x0B	; 11
     3e4:	48 ec       	ldi	r20, 0xC8	; 200
     3e6:	5a e0       	ldi	r21, 0x0A	; 10
     3e8:	64 e6       	ldi	r22, 0x64	; 100
     3ea:	71 e0       	ldi	r23, 0x01	; 1
     3ec:	c4 01       	movw	r24, r8
     3ee:	bb d7       	rcall	.+3958   	; 0x1366 <MATLAB_MF>
		struct mf_type sharpRight;
		MATLAB_MF(&sharpRight, "sharpRight", 2960, 3060, 3060, 3061);
     3f0:	0f 2e       	mov	r0, r31
     3f2:	f5 ef       	ldi	r31, 0xF5	; 245
     3f4:	ef 2e       	mov	r14, r31
     3f6:	fb e0       	ldi	r31, 0x0B	; 11
     3f8:	ff 2e       	mov	r15, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	04 ef       	ldi	r16, 0xF4	; 244
     3fe:	1b e0       	ldi	r17, 0x0B	; 11
     400:	24 ef       	ldi	r18, 0xF4	; 244
     402:	3b e0       	ldi	r19, 0x0B	; 11
     404:	40 e9       	ldi	r20, 0x90	; 144
     406:	5b e0       	ldi	r21, 0x0B	; 11
     408:	6a e6       	ldi	r22, 0x6A	; 106
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	3c 01       	movw	r6, r24
     412:	a9 d7       	rcall	.+3922   	; 0x1366 <MATLAB_MF>
		
		steering.membership_functions = &sharpRight;
     414:	d1 01       	movw	r26, r2
     416:	1d 96       	adiw	r26, 0x0d	; 13
     418:	7c 92       	st	X, r7
     41a:	6e 92       	st	-X, r6
     41c:	1c 97       	sbiw	r26, 0x0c	; 12
		sharpRight.next = &right;
     41e:	9e 8a       	std	Y+22, r9	; 0x16
     420:	8d 8a       	std	Y+21, r8	; 0x15
		right.next = &straight;
     422:	bc a6       	std	Y+44, r11	; 0x2c
     424:	ab a6       	std	Y+43, r10	; 0x2b
		straight.next = &left;
     426:	23 96       	adiw	r28, 0x03	; 3
     428:	df ae       	std	Y+63, r13	; 0x3f
     42a:	ce ae       	std	Y+62, r12	; 0x3e
     42c:	23 97       	sbiw	r28, 0x03	; 3
		left.next = &sharpLeft;
     42e:	f6 01       	movw	r30, r12
     430:	55 8a       	std	Z+21, r5	; 0x15
     432:	44 8a       	std	Z+20, r4	; 0x14
		sharpLeft.next = NULL;
     434:	d2 01       	movw	r26, r4
     436:	55 96       	adiw	r26, 0x15	; 21
     438:	1c 92       	st	X, r1
     43a:	1e 92       	st	-X, r1
     43c:	54 97       	sbiw	r26, 0x14	; 20
		
		
		
		// pointers to top of lists

		System_Inputs = &delta_C;
     43e:	a6 54       	subi	r26, 0x46	; 70
     440:	bf 4f       	sbci	r27, 0xFF	; 255
     442:	b0 93 f9 02 	sts	0x02F9, r27
     446:	a0 93 f8 02 	sts	0x02F8, r26
		delta_C.next = &delta_V;
     44a:	e0 54       	subi	r30, 0x40	; 64
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	1f 96       	adiw	r26, 0x0f	; 15
     450:	fc 93       	st	X, r31
     452:	ee 93       	st	-X, r30
     454:	1e 97       	sbiw	r26, 0x0e	; 14
		delta_V.next = NULL;
     456:	17 86       	std	Z+15, r1	; 0x0f
     458:	16 86       	std	Z+14, r1	; 0x0e
		System_Outputs = &steering;
     45a:	30 92 f7 02 	sts	0x02F7, r3
     45e:	20 92 f6 02 	sts	0x02F6, r2
		steering.next = NULL;
     462:	f1 01       	movw	r30, r2
     464:	17 86       	std	Z+15, r1	; 0x0f
     466:	16 86       	std	Z+14, r1	; 0x0e
		
		
		
		//RULE 9 "if C is zero AND V is high then servo is left"
		struct rule_element_type then9;
		then9.value = &left.value;
     468:	a2 55       	subi	r26, 0x52	; 82
     46a:	bf 4f       	sbci	r27, 0xFF	; 255
     46c:	86 01       	movw	r16, r12
     46e:	06 5f       	subi	r16, 0xF6	; 246
     470:	1f 4f       	sbci	r17, 0xFF	; 255
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	1c 93       	st	X, r17
     476:	0e 93       	st	-X, r16
		then9.next = NULL;
     478:	13 96       	adiw	r26, 0x03	; 3
     47a:	1c 92       	st	X, r1
     47c:	1e 92       	st	-X, r1
     47e:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if92;
		if92.value = &inPlus.value;
     480:	ae 01       	movw	r20, r28
     482:	43 54       	subi	r20, 0x43	; 67
     484:	5e 4f       	sbci	r21, 0xFE	; 254
     486:	5e 01       	movw	r10, r28
     488:	f9 e7       	ldi	r31, 0x79	; 121
     48a:	af 0e       	add	r10, r31
     48c:	b1 1c       	adc	r11, r1
     48e:	fa 01       	movw	r30, r20
     490:	b1 82       	std	Z+1, r11	; 0x01
     492:	a0 82       	st	Z, r10
		if92.next = NULL;
     494:	13 82       	std	Z+3, r1	; 0x03
     496:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if91;
		if91.value = &inZero.value;
     498:	ce 01       	movw	r24, r28
     49a:	87 54       	subi	r24, 0x47	; 71
     49c:	9e 4f       	sbci	r25, 0xFE	; 254
     49e:	3e 01       	movw	r6, r28
     4a0:	f1 ed       	ldi	r31, 0xD1	; 209
     4a2:	6f 0e       	add	r6, r31
     4a4:	71 1c       	adc	r7, r1
     4a6:	fc 01       	movw	r30, r24
     4a8:	71 82       	std	Z+1, r7	; 0x01
     4aa:	60 82       	st	Z, r6
		if91.next = &if92;
     4ac:	53 83       	std	Z+3, r21	; 0x03
     4ae:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule9;
		rule9.if_side = &if91;
     4b0:	e6 56       	subi	r30, 0x66	; 102
     4b2:	f1 09       	sbc	r31, r1
     4b4:	91 83       	std	Z+1, r25	; 0x01
     4b6:	80 83       	st	Z, r24
		rule9.then_side = &then9;
     4b8:	b3 83       	std	Z+3, r27	; 0x03
     4ba:	a2 83       	std	Z+2, r26	; 0x02
		rule9.next = NULL;
     4bc:	15 82       	std	Z+5, r1	; 0x05
     4be:	14 82       	std	Z+4, r1	; 0x04

		
		//RULE 8 "if C is positive AND V is inPlus then servo is right"
		struct rule_element_type then8;
		then8.value = &right.value;
     4c0:	04 97       	sbiw	r24, 0x04	; 4
     4c2:	7e 01       	movw	r14, r28
     4c4:	21 e2       	ldi	r18, 0x21	; 33
     4c6:	e2 0e       	add	r14, r18
     4c8:	f1 1c       	adc	r15, r1
     4ca:	dc 01       	movw	r26, r24
     4cc:	11 96       	adiw	r26, 0x01	; 1
     4ce:	fc 92       	st	X, r15
     4d0:	ee 92       	st	-X, r14
		then8.next = NULL;
     4d2:	13 96       	adiw	r26, 0x03	; 3
     4d4:	1c 92       	st	X, r1
     4d6:	1e 92       	st	-X, r1
     4d8:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if82;
		if82.value = &inPlus.value;
     4da:	be 01       	movw	r22, r28
     4dc:	6f 54       	subi	r22, 0x4F	; 79
     4de:	7e 4f       	sbci	r23, 0xFE	; 254
     4e0:	db 01       	movw	r26, r22
     4e2:	11 96       	adiw	r26, 0x01	; 1
     4e4:	bc 92       	st	X, r11
     4e6:	ae 92       	st	-X, r10
		if82.next = NULL;
     4e8:	13 96       	adiw	r26, 0x03	; 3
     4ea:	1c 92       	st	X, r1
     4ec:	1e 92       	st	-X, r1
     4ee:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if81;
		if81.value = &inPositive.value;
     4f0:	9e 01       	movw	r18, r28
     4f2:	23 55       	subi	r18, 0x53	; 83
     4f4:	3e 4f       	sbci	r19, 0xFE	; 254
     4f6:	6e 01       	movw	r12, r28
     4f8:	bb eb       	ldi	r27, 0xBB	; 187
     4fa:	cb 0e       	add	r12, r27
     4fc:	d1 1c       	adc	r13, r1
     4fe:	d9 01       	movw	r26, r18
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	dc 92       	st	X, r13
     504:	ce 92       	st	-X, r12
		if81.next = &if82;
     506:	13 96       	adiw	r26, 0x03	; 3
     508:	7c 93       	st	X, r23
     50a:	6e 93       	st	-X, r22
     50c:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule8;
		rule8.if_side = &if81;
     50e:	a0 56       	subi	r26, 0x60	; 96
     510:	b1 09       	sbc	r27, r1
     512:	11 96       	adiw	r26, 0x01	; 1
     514:	3c 93       	st	X, r19
     516:	2e 93       	st	-X, r18
		rule8.then_side = &then8;
     518:	13 96       	adiw	r26, 0x03	; 3
     51a:	9c 93       	st	X, r25
     51c:	8e 93       	st	-X, r24
     51e:	12 97       	sbiw	r26, 0x02	; 2
		rule8.next = &rule9;
     520:	15 96       	adiw	r26, 0x05	; 5
     522:	fc 93       	st	X, r31
     524:	ee 93       	st	-X, r30
     526:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 7 "if C is positive AND V is inNyll then servo is sharpRight"
		struct rule_element_type then7;
		then7.value = &sharpRight.value;
     528:	0c 97       	sbiw	r24, 0x0c	; 12
     52a:	22 5a       	subi	r18, 0xA2	; 162
     52c:	31 40       	sbci	r19, 0x01	; 1
     52e:	fc 01       	movw	r30, r24
     530:	31 83       	std	Z+1, r19	; 0x01
     532:	20 83       	st	Z, r18
		then7.next = NULL;
     534:	13 82       	std	Z+3, r1	; 0x03
     536:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if72;
		if72.value = &inNyll.value;
     538:	6c 50       	subi	r22, 0x0C	; 12
     53a:	71 09       	sbc	r23, r1
     53c:	2c 57       	subi	r18, 0x7C	; 124
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	fb 01       	movw	r30, r22
     542:	31 83       	std	Z+1, r19	; 0x01
     544:	20 83       	st	Z, r18
		if72.next = NULL;
     546:	13 82       	std	Z+3, r1	; 0x03
     548:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if71;
		if71.value = &inPositive.value;
     54a:	4c 51       	subi	r20, 0x1C	; 28
     54c:	51 09       	sbc	r21, r1
     54e:	fa 01       	movw	r30, r20
     550:	d1 82       	std	Z+1, r13	; 0x01
     552:	c0 82       	st	Z, r12
		if71.next = &if72;
     554:	73 83       	std	Z+3, r23	; 0x03
     556:	62 83       	std	Z+2, r22	; 0x02

		struct rule_type rule7;
		rule7.if_side = &if71;
     558:	ea 55       	subi	r30, 0x5A	; 90
     55a:	f1 09       	sbc	r31, r1
     55c:	51 83       	std	Z+1, r21	; 0x01
     55e:	40 83       	st	Z, r20
		rule7.then_side = &then7;
     560:	93 83       	std	Z+3, r25	; 0x03
     562:	82 83       	std	Z+2, r24	; 0x02
		rule7.next = &rule8;
     564:	b5 83       	std	Z+5, r27	; 0x05
     566:	a4 83       	std	Z+4, r26	; 0x04
		
		
		//RULE 6 "if C is positive AND V is minus then servo is straight" 
		struct rule_element_type then6;
		then6.value = &straight.value;
     568:	82 57       	subi	r24, 0x72	; 114
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	c3 56       	subi	r28, 0x63	; 99
     56e:	de 4f       	sbci	r29, 0xFE	; 254
     570:	99 83       	std	Y+1, r25	; 0x01
     572:	88 83       	st	Y, r24
     574:	cd 59       	subi	r28, 0x9D	; 157
     576:	d1 40       	sbci	r29, 0x01	; 1
		then6.next = NULL;
     578:	c1 56       	subi	r28, 0x61	; 97
     57a:	de 4f       	sbci	r29, 0xFE	; 254
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	18 82       	st	Y, r1
     580:	cf 59       	subi	r28, 0x9F	; 159
     582:	d1 40       	sbci	r29, 0x01	; 1

		struct rule_element_type if62;
		if62.value = &inMinus.value;
     584:	6c 50       	subi	r22, 0x0C	; 12
     586:	71 09       	sbc	r23, r1
     588:	4e 01       	movw	r8, r28
     58a:	45 ea       	ldi	r20, 0xA5	; 165
     58c:	84 0e       	add	r8, r20
     58e:	91 1c       	adc	r9, r1
     590:	db 01       	movw	r26, r22
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	9c 92       	st	X, r9
     596:	8e 92       	st	-X, r8
		if62.next = NULL;
     598:	13 96       	adiw	r26, 0x03	; 3
     59a:	1c 92       	st	X, r1
     59c:	1e 92       	st	-X, r1
     59e:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if61;
		if61.value = &inPositive.value;
     5a0:	4c 50       	subi	r20, 0x0C	; 12
     5a2:	51 09       	sbc	r21, r1
     5a4:	da 01       	movw	r26, r20
     5a6:	11 96       	adiw	r26, 0x01	; 1
     5a8:	dc 92       	st	X, r13
     5aa:	ce 92       	st	-X, r12
		if61.next = &if62;
     5ac:	13 96       	adiw	r26, 0x03	; 3
     5ae:	7c 93       	st	X, r23
     5b0:	6e 93       	st	-X, r22
     5b2:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule6;
		rule6.if_side = &if61;
     5b4:	68 55       	subi	r22, 0x58	; 88
     5b6:	71 09       	sbc	r23, r1
     5b8:	db 01       	movw	r26, r22
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	5c 93       	st	X, r21
     5be:	4e 93       	st	-X, r20
		rule6.then_side = &then6;
     5c0:	4d e9       	ldi	r20, 0x9D	; 157
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	4c 0f       	add	r20, r28
     5c6:	5d 1f       	adc	r21, r29
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	5c 93       	st	X, r21
     5cc:	4e 93       	st	-X, r20
     5ce:	12 97       	sbiw	r26, 0x02	; 2
		rule6.next = &rule7;
     5d0:	15 96       	adiw	r26, 0x05	; 5
     5d2:	fc 93       	st	X, r31
     5d4:	ee 93       	st	-X, r30
     5d6:	14 97       	sbiw	r26, 0x04	; 4

		

		//RULE 5 "if C is negative  AND V is nyll then servo is sharpLeft"
		struct rule_element_type then5;
		then5.value = &sharpLeft.value;
     5d8:	a0 5b       	subi	r26, 0xB0	; 176
     5da:	bf 4f       	sbci	r27, 0xFF	; 255
     5dc:	5a e0       	ldi	r21, 0x0A	; 10
     5de:	45 0e       	add	r4, r21
     5e0:	51 1c       	adc	r5, r1
     5e2:	11 96       	adiw	r26, 0x01	; 1
     5e4:	5c 92       	st	X, r5
     5e6:	4e 92       	st	-X, r4
		then5.next = NULL;
     5e8:	13 96       	adiw	r26, 0x03	; 3
     5ea:	1c 92       	st	X, r1
     5ec:	1e 92       	st	-X, r1
     5ee:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if52;
		if52.value = &inNyll.value;
     5f0:	2e 01       	movw	r4, r28
     5f2:	e3 e7       	ldi	r30, 0x73	; 115
     5f4:	4e 1a       	sub	r4, r30
     5f6:	ee ef       	ldi	r30, 0xFE	; 254
     5f8:	5e 0a       	sbc	r5, r30
     5fa:	f2 01       	movw	r30, r4
     5fc:	31 83       	std	Z+1, r19	; 0x01
     5fe:	20 83       	st	Z, r18
		if52.next = NULL;
     600:	13 82       	std	Z+3, r1	; 0x03
     602:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if51;
		if51.value = &inNegative.value;
     604:	6e 01       	movw	r12, r28
     606:	f7 e7       	ldi	r31, 0x77	; 119
     608:	cf 1a       	sub	r12, r31
     60a:	fe ef       	ldi	r31, 0xFE	; 254
     60c:	df 0a       	sbc	r13, r31
     60e:	ae 01       	movw	r20, r28
     610:	49 51       	subi	r20, 0x19	; 25
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	f6 01       	movw	r30, r12
     616:	51 83       	std	Z+1, r21	; 0x01
     618:	40 83       	st	Z, r20
		if51.next = &if52;
     61a:	53 82       	std	Z+3, r5	; 0x03
     61c:	42 82       	std	Z+2, r4	; 0x02

		struct rule_type rule5;
		rule5.if_side = &if51;
     61e:	ee 54       	subi	r30, 0x4E	; 78
     620:	f1 09       	sbc	r31, r1
     622:	d1 82       	std	Z+1, r13	; 0x01
     624:	c0 82       	st	Z, r12
		rule5.then_side = &then5;
     626:	b3 83       	std	Z+3, r27	; 0x03
     628:	a2 83       	std	Z+2, r26	; 0x02
		rule5.next = &rule6;
     62a:	75 83       	std	Z+5, r23	; 0x05
     62c:	64 83       	std	Z+4, r22	; 0x04

		

		//RULE 4 "if C is zero t AND V is nyll then servo is Straight"
		struct rule_element_type then4;
		then4.value = &straight.value;
     62e:	6e 01       	movw	r12, r28
     630:	6b e7       	ldi	r22, 0x7B	; 123
     632:	c6 1a       	sub	r12, r22
     634:	6e ef       	ldi	r22, 0xFE	; 254
     636:	d6 0a       	sbc	r13, r22
     638:	d6 01       	movw	r26, r12
     63a:	11 96       	adiw	r26, 0x01	; 1
     63c:	9c 93       	st	X, r25
     63e:	8e 93       	st	-X, r24
		then4.next = NULL;
     640:	13 96       	adiw	r26, 0x03	; 3
     642:	1c 92       	st	X, r1
     644:	1e 92       	st	-X, r1
     646:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if42;
		if42.value = &inNyll.value;
     648:	60 5c       	subi	r22, 0xC0	; 192
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	db 01       	movw	r26, r22
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	3c 93       	st	X, r19
     652:	2e 93       	st	-X, r18
		if42.next = NULL;
     654:	13 96       	adiw	r26, 0x03	; 3
     656:	1c 92       	st	X, r1
     658:	1e 92       	st	-X, r1
     65a:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if41;
		if41.value = &inZero.value;
     65c:	22 51       	subi	r18, 0x12	; 18
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	d9 01       	movw	r26, r18
     662:	11 96       	adiw	r26, 0x01	; 1
     664:	7c 92       	st	X, r7
     666:	6e 92       	st	-X, r6
		if41.next = &if42;
     668:	13 96       	adiw	r26, 0x03	; 3
     66a:	7c 93       	st	X, r23
     66c:	6e 93       	st	-X, r22
     66e:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_type rule4;
		rule4.if_side = &if41;
     670:	6c 54       	subi	r22, 0x4C	; 76
     672:	71 09       	sbc	r23, r1
     674:	db 01       	movw	r26, r22
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	3c 93       	st	X, r19
     67a:	2e 93       	st	-X, r18
		rule4.then_side = &then4;
     67c:	13 96       	adiw	r26, 0x03	; 3
     67e:	dc 92       	st	X, r13
     680:	ce 92       	st	-X, r12
     682:	12 97       	sbiw	r26, 0x02	; 2
		rule4.next = &rule5;
     684:	15 96       	adiw	r26, 0x05	; 5
     686:	fc 93       	st	X, r31
     688:	ee 93       	st	-X, r30
     68a:	14 97       	sbiw	r26, 0x04	; 4
		
		//RULE 3 "if C is negative AND V is nyll then servo is SharpLeft"
		struct rule_element_type then3;
		then3.value = &straight.value;
     68c:	24 50       	subi	r18, 0x04	; 4
     68e:	31 09       	sbc	r19, r1
     690:	f9 01       	movw	r30, r18
     692:	91 83       	std	Z+1, r25	; 0x01
     694:	80 83       	st	Z, r24
		then3.next = NULL;
     696:	13 82       	std	Z+3, r1	; 0x03
     698:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if32;
		if32.value = &inPlus.value;
     69a:	a0 5c       	subi	r26, 0xC0	; 192
     69c:	bf 4f       	sbci	r27, 0xFF	; 255
     69e:	11 96       	adiw	r26, 0x01	; 1
     6a0:	bc 92       	st	X, r11
     6a2:	ae 92       	st	-X, r10
		if32.next = NULL;
     6a4:	13 96       	adiw	r26, 0x03	; 3
     6a6:	1c 92       	st	X, r1
     6a8:	1e 92       	st	-X, r1
     6aa:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if31;
		if31.value = &inNegative.value;
     6ac:	86 5c       	subi	r24, 0xC6	; 198
     6ae:	9e 4f       	sbci	r25, 0xFE	; 254
     6b0:	fc 01       	movw	r30, r24
     6b2:	51 83       	std	Z+1, r21	; 0x01
     6b4:	40 83       	st	Z, r20
		if31.next = &if32;
     6b6:	b3 83       	std	Z+3, r27	; 0x03
     6b8:	a2 83       	std	Z+2, r26	; 0x02

		struct rule_type rule3;
		rule3.if_side = &if31;
     6ba:	a6 54       	subi	r26, 0x46	; 70
     6bc:	b1 09       	sbc	r27, r1
     6be:	11 96       	adiw	r26, 0x01	; 1
     6c0:	9c 93       	st	X, r25
     6c2:	8e 93       	st	-X, r24
		rule3.then_side = &then3;
     6c4:	13 96       	adiw	r26, 0x03	; 3
     6c6:	3c 93       	st	X, r19
     6c8:	2e 93       	st	-X, r18
     6ca:	12 97       	sbiw	r26, 0x02	; 2
		rule3.next = &rule4;
     6cc:	15 96       	adiw	r26, 0x05	; 5
     6ce:	7c 93       	st	X, r23
     6d0:	6e 93       	st	-X, r22
     6d2:	14 97       	sbiw	r26, 0x04	; 4
		
		
		//RULE 2 "if C is negative AND V is minus then servo is Left"
		struct rule_element_type then2;
		then2.value = &left.value;
     6d4:	68 5c       	subi	r22, 0xC8	; 200
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	fb 01       	movw	r30, r22
     6da:	11 83       	std	Z+1, r17	; 0x01
     6dc:	00 83       	st	Z, r16
		then2.next = NULL;
     6de:	13 82       	std	Z+3, r1	; 0x03
     6e0:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if22;
		if22.value = &inMinus.value;
     6e2:	08 97       	sbiw	r24, 0x08	; 8
     6e4:	fc 01       	movw	r30, r24
     6e6:	91 82       	std	Z+1, r9	; 0x01
     6e8:	80 82       	st	Z, r8
		if22.next = NULL;
     6ea:	13 82       	std	Z+3, r1	; 0x03
     6ec:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if21;
		if21.value = &inNegative.value;
     6ee:	24 51       	subi	r18, 0x14	; 20
     6f0:	31 09       	sbc	r19, r1
     6f2:	f9 01       	movw	r30, r18
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	40 83       	st	Z, r20
		if21.next = &if22;
     6f8:	93 83       	std	Z+3, r25	; 0x03
     6fa:	82 83       	std	Z+2, r24	; 0x02

		struct rule_type rule2;
		rule2.if_side = &if21;
     6fc:	80 54       	subi	r24, 0x40	; 64
     6fe:	91 09       	sbc	r25, r1
     700:	fc 01       	movw	r30, r24
     702:	31 83       	std	Z+1, r19	; 0x01
     704:	20 83       	st	Z, r18
		rule2.then_side = &then2;
     706:	73 83       	std	Z+3, r23	; 0x03
     708:	62 83       	std	Z+2, r22	; 0x02
		rule2.next = &rule3;
     70a:	b5 83       	std	Z+5, r27	; 0x05
     70c:	a4 83       	std	Z+4, r26	; 0x04

		//RULE 1 "if C is zero AND V is minus then steering is right"
		struct rule_element_type then1;
		then1.value = &right.value;
     70e:	d2 96       	adiw	r26, 0x32	; 50
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	fc 92       	st	X, r15
     714:	ee 92       	st	-X, r14
		then1.next = NULL;
     716:	13 96       	adiw	r26, 0x03	; 3
     718:	1c 92       	st	X, r1
     71a:	1e 92       	st	-X, r1
     71c:	12 97       	sbiw	r26, 0x02	; 2

		struct rule_element_type if12;
		if12.value = &inMinus.value;
     71e:	4a 58       	subi	r20, 0x8A	; 138
     720:	5f 4f       	sbci	r21, 0xFF	; 255
     722:	fa 01       	movw	r30, r20
     724:	91 82       	std	Z+1, r9	; 0x01
     726:	80 82       	st	Z, r8
		if12.next = NULL;
     728:	13 82       	std	Z+3, r1	; 0x03
     72a:	12 82       	std	Z+2, r1	; 0x02

		struct rule_element_type if11;
		if11.value = &inZero.value;
     72c:	2c 50       	subi	r18, 0x0C	; 12
     72e:	31 09       	sbc	r19, r1
     730:	f9 01       	movw	r30, r18
     732:	71 82       	std	Z+1, r7	; 0x01
     734:	60 82       	st	Z, r6
		if11.next = &if12;
     736:	53 83       	std	Z+3, r21	; 0x03
     738:	42 83       	std	Z+2, r20	; 0x02

		struct rule_type rule1;
		rule1.if_side = &if11;
     73a:	f6 97       	sbiw	r30, 0x36	; 54
     73c:	31 83       	std	Z+1, r19	; 0x01
     73e:	20 83       	st	Z, r18
		rule1.then_side = &then1;
     740:	b3 83       	std	Z+3, r27	; 0x03
     742:	a2 83       	std	Z+2, r26	; 0x02
		rule1.next = &rule2;
     744:	95 83       	std	Z+5, r25	; 0x05
     746:	84 83       	std	Z+4, r24	; 0x04
		Rule_Base = &rule1;
     748:	f0 93 fb 02 	sts	0x02FB, r31
     74c:	e0 93 fa 02 	sts	0x02FA, r30
		
		
		// the methods performing the FLC
		fuzzification();
     750:	e0 d4       	rcall	.+2496   	; 0x1112 <fuzzification>
		rule_evaluation();
     752:	06 d5       	rcall	.+2572   	; 0x1160 <rule_evaluation>
		defuzzification();
     754:	4b d5       	rcall	.+2710   	; 0x11ec <defuzzification>
		if (steering.value < MAXLEFT)
     756:	d1 01       	movw	r26, r2
     758:	1a 96       	adiw	r26, 0x0a	; 10
     75a:	8d 91       	ld	r24, X+
     75c:	9c 91       	ld	r25, X
     75e:	1b 97       	sbiw	r26, 0x0b	; 11
     760:	86 3e       	cpi	r24, 0xE6	; 230
     762:	b7 e0       	ldi	r27, 0x07	; 7
     764:	9b 07       	cpc	r25, r27
     766:	24 f4       	brge	.+8      	; 0x770 <FLC_steering+0x6a4>
		{
			setServo(MAXLEFT);
     768:	86 ee       	ldi	r24, 0xE6	; 230
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	05 d7       	rcall	.+3594   	; 0x1578 <setServo>
     76e:	09 c0       	rjmp	.+18     	; 0x782 <FLC_steering+0x6b6>
		}
		else if (steering.value >MAXRIGHT)
     770:	80 34       	cpi	r24, 0x40	; 64
     772:	ec e0       	ldi	r30, 0x0C	; 12
     774:	9e 07       	cpc	r25, r30
     776:	24 f0       	brlt	.+8      	; 0x780 <FLC_steering+0x6b4>
		{
			setServo(MAXRIGHT);
     778:	8f e3       	ldi	r24, 0x3F	; 63
     77a:	9c e0       	ldi	r25, 0x0C	; 12
     77c:	fd d6       	rcall	.+3578   	; 0x1578 <setServo>
     77e:	01 c0       	rjmp	.+2      	; 0x782 <FLC_steering+0x6b6>
		}
		else
		{
			setServo(steering.value);
     780:	fb d6       	rcall	.+3574   	; 0x1578 <setServo>
		}
		
	}
     782:	cc 53       	subi	r28, 0x3C	; 60
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	bf 90       	pop	r11
     7a2:	af 90       	pop	r10
     7a4:	9f 90       	pop	r9
     7a6:	8f 90       	pop	r8
     7a8:	7f 90       	pop	r7
     7aa:	6f 90       	pop	r6
     7ac:	5f 90       	pop	r5
     7ae:	4f 90       	pop	r4
     7b0:	3f 90       	pop	r3
     7b2:	2f 90       	pop	r2
     7b4:	08 95       	ret

000007b6 <FLC_obstacle>:

// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////

void FLC_obstacle(int currentOCR1A, int midSonicRange)
{
     7b6:	2f 92       	push	r2
     7b8:	3f 92       	push	r3
     7ba:	4f 92       	push	r4
     7bc:	5f 92       	push	r5
     7be:	6f 92       	push	r6
     7c0:	7f 92       	push	r7
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	c4 53       	subi	r28, 0x34	; 52
     7e0:	d2 40       	sbci	r29, 0x02	; 2
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
	
	
	// DECLARATION OF DISTANCE INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type distance; strcpy(distance.name, "distance");
     7ec:	29 e0       	ldi	r18, 0x09	; 9
     7ee:	e5 e7       	ldi	r30, 0x75	; 117
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	de 01       	movw	r26, r28
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	2a 95       	dec	r18
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <FLC_obstacle+0x40>
	struct io_type speed; strcpy(speed.name, "speed");
     7fe:	26 e0       	ldi	r18, 0x06	; 6
     800:	ee e7       	ldi	r30, 0x7E	; 126
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	de 01       	movw	r26, r28
     806:	51 96       	adiw	r26, 0x11	; 17
     808:	01 90       	ld	r0, Z+
     80a:	0d 92       	st	X+, r0
     80c:	2a 95       	dec	r18
     80e:	e1 f7       	brne	.-8      	; 0x808 <FLC_obstacle+0x52>
	
	// Variable assigned its reference value
	if (currentOCR1A<MIN_SPEED) {
     810:	84 3b       	cpi	r24, 0xB4	; 180
     812:	2a e0       	ldi	r18, 0x0A	; 10
     814:	92 07       	cpc	r25, r18
     816:	2c f4       	brge	.+10     	; 0x822 <FLC_obstacle+0x6c>
		speed.value = MIN_SPEED;
     818:	84 eb       	ldi	r24, 0xB4	; 180
     81a:	9a e0       	ldi	r25, 0x0A	; 10
     81c:	9c 8f       	std	Y+28, r25	; 0x1c
     81e:	8b 8f       	std	Y+27, r24	; 0x1b
     820:	0b c0       	rjmp	.+22     	; 0x838 <FLC_obstacle+0x82>
	}
	else if (currentOCR1A>MAX_SPEED)
     822:	85 35       	cpi	r24, 0x55	; 85
     824:	4b e0       	ldi	r20, 0x0B	; 11
     826:	94 07       	cpc	r25, r20
     828:	2c f0       	brlt	.+10     	; 0x834 <FLC_obstacle+0x7e>
	{
		speed.value = MAX_SPEED;
     82a:	84 e5       	ldi	r24, 0x54	; 84
     82c:	9b e0       	ldi	r25, 0x0B	; 11
     82e:	9c 8f       	std	Y+28, r25	; 0x1c
     830:	8b 8f       	std	Y+27, r24	; 0x1b
     832:	02 c0       	rjmp	.+4      	; 0x838 <FLC_obstacle+0x82>
	}
	else
	{
		speed.value = currentOCR1A;
     834:	9c 8f       	std	Y+28, r25	; 0x1c
     836:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	
	// Variable assigned its reference value
	if(midSonicRange < MIN_DISTANCE)
     838:	77 23       	and	r23, r23
     83a:	1c f4       	brge	.+6      	; 0x842 <FLC_obstacle+0x8c>
	{
		distance.value = MIN_DISTANCE;
     83c:	1c 86       	std	Y+12, r1	; 0x0c
     83e:	1b 86       	std	Y+11, r1	; 0x0b
     840:	0a c0       	rjmp	.+20     	; 0x856 <FLC_obstacle+0xa0>
	}
	else if (midSonicRange > MAX_DISTANCE)
     842:	6b 3f       	cpi	r22, 0xFB	; 251
     844:	71 05       	cpc	r23, r1
     846:	2c f0       	brlt	.+10     	; 0x852 <FLC_obstacle+0x9c>
	{
		distance.value = MAX_DISTANCE;
     848:	8a ef       	ldi	r24, 0xFA	; 250
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9c 87       	std	Y+12, r25	; 0x0c
     84e:	8b 87       	std	Y+11, r24	; 0x0b
     850:	02 c0       	rjmp	.+4      	; 0x856 <FLC_obstacle+0xa0>
	}
	else
	{
		distance.value = midSonicRange;
     852:	7c 87       	std	Y+12, r23	; 0x0c
     854:	6b 87       	std	Y+11, r22	; 0x0b
	}
	
	
	// Set MFs
	struct mf_type stopDist;
	MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, 0, 12, 52);
     856:	6e 01       	movw	r12, r28
     858:	51 e2       	ldi	r21, 0x21	; 33
     85a:	c5 0e       	add	r12, r21
     85c:	d1 1c       	adc	r13, r1
     85e:	0f 2e       	mov	r0, r31
     860:	f4 e3       	ldi	r31, 0x34	; 52
     862:	ef 2e       	mov	r14, r31
     864:	f1 2c       	mov	r15, r1
     866:	f0 2d       	mov	r31, r0
     868:	0c e0       	ldi	r16, 0x0C	; 12
     86a:	10 e0       	ldi	r17, 0x00	; 0
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	4f ef       	ldi	r20, 0xFF	; 255
     872:	5f ef       	ldi	r21, 0xFF	; 255
     874:	64 e8       	ldi	r22, 0x84	; 132
     876:	71 e0       	ldi	r23, 0x01	; 1
     878:	c6 01       	movw	r24, r12
     87a:	75 d5       	rcall	.+2794   	; 0x1366 <MATLAB_MF>
	struct mf_type oneM;
	MATLAB_MF(&oneM, "oneM", 30, 60, 60, 95);
     87c:	3e 01       	movw	r6, r28
     87e:	67 e3       	ldi	r22, 0x37	; 55
     880:	66 0e       	add	r6, r22
     882:	71 1c       	adc	r7, r1
     884:	0f 2e       	mov	r0, r31
     886:	ff e5       	ldi	r31, 0x5F	; 95
     888:	ef 2e       	mov	r14, r31
     88a:	f1 2c       	mov	r15, r1
     88c:	f0 2d       	mov	r31, r0
     88e:	0c e3       	ldi	r16, 0x3C	; 60
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	2c e3       	ldi	r18, 0x3C	; 60
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4e e1       	ldi	r20, 0x1E	; 30
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	6d e8       	ldi	r22, 0x8D	; 141
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	c3 01       	movw	r24, r6
     8a0:	62 d5       	rcall	.+2756   	; 0x1366 <MATLAB_MF>
	struct mf_type twoM;
	MATLAB_MF(&twoM, "twoM", 75, 125, 125, 175);
     8a2:	0f 2e       	mov	r0, r31
     8a4:	ff ea       	ldi	r31, 0xAF	; 175
     8a6:	ef 2e       	mov	r14, r31
     8a8:	f1 2c       	mov	r15, r1
     8aa:	f0 2d       	mov	r31, r0
     8ac:	0d e7       	ldi	r16, 0x7D	; 125
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	2d e7       	ldi	r18, 0x7D	; 125
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	4b e4       	ldi	r20, 0x4B	; 75
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	62 e9       	ldi	r22, 0x92	; 146
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	ce 01       	movw	r24, r28
     8be:	83 5b       	subi	r24, 0xB3	; 179
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	51 d5       	rcall	.+2722   	; 0x1366 <MATLAB_MF>
	struct mf_type threeM;
	MATLAB_MF(&threeM, "threeM", 150, 250, 250, MAX_DISTANCE+1);
     8c4:	0f 2e       	mov	r0, r31
     8c6:	fb ef       	ldi	r31, 0xFB	; 251
     8c8:	ef 2e       	mov	r14, r31
     8ca:	f1 2c       	mov	r15, r1
     8cc:	f0 2d       	mov	r31, r0
     8ce:	0a ef       	ldi	r16, 0xFA	; 250
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	2a ef       	ldi	r18, 0xFA	; 250
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	46 e9       	ldi	r20, 0x96	; 150
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	67 e9       	ldi	r22, 0x97	; 151
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	ce 01       	movw	r24, r28
     8e0:	8d 59       	subi	r24, 0x9D	; 157
     8e2:	9f 4f       	sbci	r25, 0xFF	; 255
     8e4:	40 d5       	rcall	.+2688   	; 0x1366 <MATLAB_MF>
	
	// Linked list for MFs
	distance.membership_functions = &stopDist;
     8e6:	de 86       	std	Y+14, r13	; 0x0e
     8e8:	cd 86       	std	Y+13, r12	; 0x0d
	stopDist.next = &oneM;
     8ea:	7e aa       	std	Y+54, r7	; 0x36
     8ec:	6d aa       	std	Y+53, r6	; 0x35
	oneM.next = &twoM;
     8ee:	8d e4       	ldi	r24, 0x4D	; 77
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	8c 0f       	add	r24, r28
     8f4:	9d 1f       	adc	r25, r29
     8f6:	2d 96       	adiw	r28, 0x0d	; 13
     8f8:	9f af       	std	Y+63, r25	; 0x3f
     8fa:	8e af       	std	Y+62, r24	; 0x3e
     8fc:	2d 97       	sbiw	r28, 0x0d	; 13
	twoM.next = &threeM;
     8fe:	a3 e6       	ldi	r26, 0x63	; 99
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	ac 0f       	add	r26, r28
     904:	bd 1f       	adc	r27, r29
     906:	a3 96       	adiw	r28, 0x23	; 35
     908:	bf af       	std	Y+63, r27	; 0x3f
     90a:	ae af       	std	Y+62, r26	; 0x3e
     90c:	a3 97       	sbiw	r28, 0x23	; 35
	threeM.next = NULL;
     90e:	e9 96       	adiw	r28, 0x39	; 57
     910:	1f ae       	std	Y+63, r1	; 0x3f
     912:	1e ae       	std	Y+62, r1	; 0x3e
     914:	e9 97       	sbiw	r28, 0x39	; 57
	//////////////////////////////////////////////////////////////////////////////
	

	// Set MFs
	struct mf_type still;
	MATLAB_MF(&still, "still", MIN_SPEED-1, 2740, 2740, 2815);
     916:	0f 2e       	mov	r0, r31
     918:	ee 24       	eor	r14, r14
     91a:	ea 94       	dec	r14
     91c:	fa e0       	ldi	r31, 0x0A	; 10
     91e:	ff 2e       	mov	r15, r31
     920:	f0 2d       	mov	r31, r0
     922:	04 eb       	ldi	r16, 0xB4	; 180
     924:	1a e0       	ldi	r17, 0x0A	; 10
     926:	24 eb       	ldi	r18, 0xB4	; 180
     928:	3a e0       	ldi	r19, 0x0A	; 10
     92a:	43 eb       	ldi	r20, 0xB3	; 179
     92c:	5a e0       	ldi	r21, 0x0A	; 10
     92e:	6e e9       	ldi	r22, 0x9E	; 158
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	8c 96       	adiw	r24, 0x2c	; 44
     934:	18 d5       	rcall	.+2608   	; 0x1366 <MATLAB_MF>
	struct mf_type low;
	MATLAB_MF(&low, "low", 2804, 2820, 2820, 2836);
     936:	5e 01       	movw	r10, r28
     938:	bf e8       	ldi	r27, 0x8F	; 143
     93a:	ab 0e       	add	r10, r27
     93c:	b1 1c       	adc	r11, r1
     93e:	0f 2e       	mov	r0, r31
     940:	f4 e1       	ldi	r31, 0x14	; 20
     942:	ef 2e       	mov	r14, r31
     944:	fb e0       	ldi	r31, 0x0B	; 11
     946:	ff 2e       	mov	r15, r31
     948:	f0 2d       	mov	r31, r0
     94a:	04 e0       	ldi	r16, 0x04	; 4
     94c:	1b e0       	ldi	r17, 0x0B	; 11
     94e:	24 e0       	ldi	r18, 0x04	; 4
     950:	3b e0       	ldi	r19, 0x0B	; 11
     952:	44 ef       	ldi	r20, 0xF4	; 244
     954:	5a e0       	ldi	r21, 0x0A	; 10
     956:	62 ec       	ldi	r22, 0xC2	; 194
     958:	71 e0       	ldi	r23, 0x01	; 1
     95a:	c5 01       	movw	r24, r10
     95c:	04 d5       	rcall	.+2568   	; 0x1366 <MATLAB_MF>
	struct mf_type cruising;
	MATLAB_MF(&cruising, "cruising", 2827, 2843, 2843, 2859);
     95e:	0f 2e       	mov	r0, r31
     960:	fb e2       	ldi	r31, 0x2B	; 43
     962:	ef 2e       	mov	r14, r31
     964:	fb e0       	ldi	r31, 0x0B	; 11
     966:	ff 2e       	mov	r15, r31
     968:	f0 2d       	mov	r31, r0
     96a:	0b e1       	ldi	r16, 0x1B	; 27
     96c:	1b e0       	ldi	r17, 0x0B	; 11
     96e:	2b e1       	ldi	r18, 0x1B	; 27
     970:	3b e0       	ldi	r19, 0x0B	; 11
     972:	4b e0       	ldi	r20, 0x0B	; 11
     974:	5b e0       	ldi	r21, 0x0B	; 11
     976:	64 ea       	ldi	r22, 0xA4	; 164
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	8b 55       	subi	r24, 0x5B	; 91
     97e:	9f 4f       	sbci	r25, 0xFF	; 255
     980:	f2 d4       	rcall	.+2532   	; 0x1366 <MATLAB_MF>
	struct mf_type medium;
	MATLAB_MF(&medium, "medium", 2849, 2865, 2865, 2881);
     982:	2e 01       	movw	r4, r28
     984:	eb eb       	ldi	r30, 0xBB	; 187
     986:	4e 0e       	add	r4, r30
     988:	51 1c       	adc	r5, r1
     98a:	0f 2e       	mov	r0, r31
     98c:	f1 e4       	ldi	r31, 0x41	; 65
     98e:	ef 2e       	mov	r14, r31
     990:	fb e0       	ldi	r31, 0x0B	; 11
     992:	ff 2e       	mov	r15, r31
     994:	f0 2d       	mov	r31, r0
     996:	01 e3       	ldi	r16, 0x31	; 49
     998:	1b e0       	ldi	r17, 0x0B	; 11
     99a:	21 e3       	ldi	r18, 0x31	; 49
     99c:	3b e0       	ldi	r19, 0x0B	; 11
     99e:	41 e2       	ldi	r20, 0x21	; 33
     9a0:	5b e0       	ldi	r21, 0x0B	; 11
     9a2:	6d ea       	ldi	r22, 0xAD	; 173
     9a4:	71 e0       	ldi	r23, 0x01	; 1
     9a6:	c2 01       	movw	r24, r4
     9a8:	de d4       	rcall	.+2492   	; 0x1366 <MATLAB_MF>
	struct mf_type high;
	MATLAB_MF(&high, "high", 2870, 2900, 2900, MAX_SPEED+1);
     9aa:	0f 2e       	mov	r0, r31
     9ac:	f5 e5       	ldi	r31, 0x55	; 85
     9ae:	ef 2e       	mov	r14, r31
     9b0:	fb e0       	ldi	r31, 0x0B	; 11
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	04 e5       	ldi	r16, 0x54	; 84
     9b8:	1b e0       	ldi	r17, 0x0B	; 11
     9ba:	24 e5       	ldi	r18, 0x54	; 84
     9bc:	3b e0       	ldi	r19, 0x0B	; 11
     9be:	46 e3       	ldi	r20, 0x36	; 54
     9c0:	5b e0       	ldi	r21, 0x0B	; 11
     9c2:	64 eb       	ldi	r22, 0xB4	; 180
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	ce 01       	movw	r24, r28
     9c8:	8f 52       	subi	r24, 0x2F	; 47
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	cc d4       	rcall	.+2456   	; 0x1366 <MATLAB_MF>
	
	// Linked list for MFs
	speed.membership_functions = &still;
     9ce:	49 e7       	ldi	r20, 0x79	; 121
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	4c 0f       	add	r20, r28
     9d4:	5d 1f       	adc	r21, r29
     9d6:	5e 8f       	std	Y+30, r21	; 0x1e
     9d8:	4d 8f       	std	Y+29, r20	; 0x1d
	still.next = &low;
     9da:	c3 57       	subi	r28, 0x73	; 115
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	b9 82       	std	Y+1, r11	; 0x01
     9e0:	a8 82       	st	Y, r10
     9e2:	cd 58       	subi	r28, 0x8D	; 141
     9e4:	d0 40       	sbci	r29, 0x00	; 0
	low.next = &cruising;
     9e6:	e5 ea       	ldi	r30, 0xA5	; 165
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ec 0f       	add	r30, r28
     9ec:	fd 1f       	adc	r31, r29
     9ee:	d5 01       	movw	r26, r10
     9f0:	55 96       	adiw	r26, 0x15	; 21
     9f2:	fc 93       	st	X, r31
     9f4:	ee 93       	st	-X, r30
     9f6:	54 97       	sbiw	r26, 0x14	; 20
	cruising.next = &medium;
     9f8:	c7 54       	subi	r28, 0x47	; 71
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	59 82       	std	Y+1, r5	; 0x01
     9fe:	48 82       	st	Y, r4
     a00:	c9 5b       	subi	r28, 0xB9	; 185
     a02:	d0 40       	sbci	r29, 0x00	; 0
	medium.next = &high;
     a04:	e1 ed       	ldi	r30, 0xD1	; 209
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ec 0f       	add	r30, r28
     a0a:	fd 1f       	adc	r31, r29
     a0c:	d2 01       	movw	r26, r4
     a0e:	55 96       	adiw	r26, 0x15	; 21
     a10:	fc 93       	st	X, r31
     a12:	ee 93       	st	-X, r30
     a14:	54 97       	sbiw	r26, 0x14	; 20
	high.next = NULL;
     a16:	cb 51       	subi	r28, 0x1B	; 27
     a18:	df 4f       	sbci	r29, 0xFF	; 255
     a1a:	19 82       	std	Y+1, r1	; 0x01
     a1c:	18 82       	st	Y, r1
     a1e:	c5 5e       	subi	r28, 0xE5	; 229
     a20:	d0 40       	sbci	r29, 0x00	; 0

	
	// DECLARATION OF PWM OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type pwm; strcpy(pwm.name, "pwm");
     a22:	80 e7       	ldi	r24, 0x70	; 112
     a24:	97 e7       	ldi	r25, 0x77	; 119
     a26:	ad e6       	ldi	r26, 0x6D	; 109
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	c9 51       	subi	r28, 0x19	; 25
     a2c:	df 4f       	sbci	r29, 0xFF	; 255
     a2e:	88 83       	st	Y, r24
     a30:	99 83       	std	Y+1, r25	; 0x01
     a32:	aa 83       	std	Y+2, r26	; 0x02
     a34:	bb 83       	std	Y+3, r27	; 0x03
     a36:	c7 5e       	subi	r28, 0xE7	; 231
     a38:	d0 40       	sbci	r29, 0x00	; 0
	
	// Set MFs
	struct mf_type noSpeed;
	MATLAB_MF(&noSpeed, "noSpeed", 2739, 2740, 2740, 2815);
     a3a:	4e 01       	movw	r8, r28
     a3c:	f7 ef       	ldi	r31, 0xF7	; 247
     a3e:	8f 0e       	add	r8, r31
     a40:	91 1c       	adc	r9, r1
     a42:	0f 2e       	mov	r0, r31
     a44:	ee 24       	eor	r14, r14
     a46:	ea 94       	dec	r14
     a48:	fa e0       	ldi	r31, 0x0A	; 10
     a4a:	ff 2e       	mov	r15, r31
     a4c:	f0 2d       	mov	r31, r0
     a4e:	04 eb       	ldi	r16, 0xB4	; 180
     a50:	1a e0       	ldi	r17, 0x0A	; 10
     a52:	24 eb       	ldi	r18, 0xB4	; 180
     a54:	3a e0       	ldi	r19, 0x0A	; 10
     a56:	43 eb       	ldi	r20, 0xB3	; 179
     a58:	5a e0       	ldi	r21, 0x0A	; 10
     a5a:	69 eb       	ldi	r22, 0xB9	; 185
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	c4 01       	movw	r24, r8
     a60:	82 d4       	rcall	.+2308   	; 0x1366 <MATLAB_MF>
	struct mf_type slow;
	MATLAB_MF(&slow, "slow", 2804, 2820, 2820, 2836);
     a62:	6e 01       	movw	r12, r28
     a64:	23 ef       	ldi	r18, 0xF3	; 243
     a66:	c2 1a       	sub	r12, r18
     a68:	2e ef       	ldi	r18, 0xFE	; 254
     a6a:	d2 0a       	sbc	r13, r18
     a6c:	0f 2e       	mov	r0, r31
     a6e:	f4 e1       	ldi	r31, 0x14	; 20
     a70:	ef 2e       	mov	r14, r31
     a72:	fb e0       	ldi	r31, 0x0B	; 11
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
     a78:	04 e0       	ldi	r16, 0x04	; 4
     a7a:	1b e0       	ldi	r17, 0x0B	; 11
     a7c:	24 e0       	ldi	r18, 0x04	; 4
     a7e:	3b e0       	ldi	r19, 0x0B	; 11
     a80:	44 ef       	ldi	r20, 0xF4	; 244
     a82:	5a e0       	ldi	r21, 0x0A	; 10
     a84:	61 ec       	ldi	r22, 0xC1	; 193
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	c6 01       	movw	r24, r12
     a8a:	6d d4       	rcall	.+2266   	; 0x1366 <MATLAB_MF>
	struct mf_type cruise;
	MATLAB_MF(&cruise, "cruise", 2827, 2843, 2843, 2859);
     a8c:	1e 01       	movw	r2, r28
     a8e:	4d ed       	ldi	r20, 0xDD	; 221
     a90:	24 1a       	sub	r2, r20
     a92:	4e ef       	ldi	r20, 0xFE	; 254
     a94:	34 0a       	sbc	r3, r20
     a96:	0f 2e       	mov	r0, r31
     a98:	fb e2       	ldi	r31, 0x2B	; 43
     a9a:	ef 2e       	mov	r14, r31
     a9c:	fb e0       	ldi	r31, 0x0B	; 11
     a9e:	ff 2e       	mov	r15, r31
     aa0:	f0 2d       	mov	r31, r0
     aa2:	0b e1       	ldi	r16, 0x1B	; 27
     aa4:	1b e0       	ldi	r17, 0x0B	; 11
     aa6:	2b e1       	ldi	r18, 0x1B	; 27
     aa8:	3b e0       	ldi	r19, 0x0B	; 11
     aaa:	4b e0       	ldi	r20, 0x0B	; 11
     aac:	5b e0       	ldi	r21, 0x0B	; 11
     aae:	66 ec       	ldi	r22, 0xC6	; 198
     ab0:	71 e0       	ldi	r23, 0x01	; 1
     ab2:	c1 01       	movw	r24, r2
     ab4:	58 d4       	rcall	.+2224   	; 0x1366 <MATLAB_MF>
	struct mf_type medHigh;
	MATLAB_MF(&medHigh, "medHigh", 2849, 2865, 2865, 2881);
     ab6:	0f 2e       	mov	r0, r31
     ab8:	f1 e4       	ldi	r31, 0x41	; 65
     aba:	ef 2e       	mov	r14, r31
     abc:	fb e0       	ldi	r31, 0x0B	; 11
     abe:	ff 2e       	mov	r15, r31
     ac0:	f0 2d       	mov	r31, r0
     ac2:	01 e3       	ldi	r16, 0x31	; 49
     ac4:	1b e0       	ldi	r17, 0x0B	; 11
     ac6:	21 e3       	ldi	r18, 0x31	; 49
     ac8:	3b e0       	ldi	r19, 0x0B	; 11
     aca:	41 e2       	ldi	r20, 0x21	; 33
     acc:	5b e0       	ldi	r21, 0x0B	; 11
     ace:	6d ec       	ldi	r22, 0xCD	; 205
     ad0:	71 e0       	ldi	r23, 0x01	; 1
     ad2:	ce 01       	movw	r24, r28
     ad4:	87 5c       	subi	r24, 0xC7	; 199
     ad6:	9e 4f       	sbci	r25, 0xFE	; 254
     ad8:	46 d4       	rcall	.+2188   	; 0x1366 <MATLAB_MF>
	struct mf_type max;
	MATLAB_MF(&max, "max", 2870, 2900, 2900, 2901);
     ada:	0f 2e       	mov	r0, r31
     adc:	f5 e5       	ldi	r31, 0x55	; 85
     ade:	ef 2e       	mov	r14, r31
     ae0:	fb e0       	ldi	r31, 0x0B	; 11
     ae2:	ff 2e       	mov	r15, r31
     ae4:	f0 2d       	mov	r31, r0
     ae6:	04 e5       	ldi	r16, 0x54	; 84
     ae8:	1b e0       	ldi	r17, 0x0B	; 11
     aea:	24 e5       	ldi	r18, 0x54	; 84
     aec:	3b e0       	ldi	r19, 0x0B	; 11
     aee:	46 e3       	ldi	r20, 0x36	; 54
     af0:	5b e0       	ldi	r21, 0x0B	; 11
     af2:	65 ed       	ldi	r22, 0xD5	; 213
     af4:	71 e0       	ldi	r23, 0x01	; 1
     af6:	ce 01       	movw	r24, r28
     af8:	81 5b       	subi	r24, 0xB1	; 177
     afa:	9e 4f       	sbci	r25, 0xFE	; 254
     afc:	34 d4       	rcall	.+2152   	; 0x1366 <MATLAB_MF>
	
	// Linked list for MFs
	pwm.membership_functions = &noSpeed;
     afe:	cd 50       	subi	r28, 0x0D	; 13
     b00:	df 4f       	sbci	r29, 0xFF	; 255
     b02:	99 82       	std	Y+1, r9	; 0x01
     b04:	88 82       	st	Y, r8
     b06:	c3 5f       	subi	r28, 0xF3	; 243
     b08:	d0 40       	sbci	r29, 0x00	; 0
	noSpeed.next = &slow;
     b0a:	d4 01       	movw	r26, r8
     b0c:	55 96       	adiw	r26, 0x15	; 21
     b0e:	dc 92       	st	X, r13
     b10:	ce 92       	st	-X, r12
     b12:	54 97       	sbiw	r26, 0x14	; 20
	slow.next = &cruise;
     b14:	f6 01       	movw	r30, r12
     b16:	35 8a       	std	Z+21, r3	; 0x15
     b18:	24 8a       	std	Z+20, r2	; 0x14
	cruise.next = &medHigh;
     b1a:	e9 e3       	ldi	r30, 0x39	; 57
     b1c:	f1 e0       	ldi	r31, 0x01	; 1
     b1e:	ec 0f       	add	r30, r28
     b20:	fd 1f       	adc	r31, r29
     b22:	d1 01       	movw	r26, r2
     b24:	55 96       	adiw	r26, 0x15	; 21
     b26:	fc 93       	st	X, r31
     b28:	ee 93       	st	-X, r30
     b2a:	54 97       	sbiw	r26, 0x14	; 20
	medHigh.next = &max;
     b2c:	4f e4       	ldi	r20, 0x4F	; 79
     b2e:	51 e0       	ldi	r21, 0x01	; 1
     b30:	4c 0f       	add	r20, r28
     b32:	5d 1f       	adc	r21, r29
     b34:	c3 5b       	subi	r28, 0xB3	; 179
     b36:	de 4f       	sbci	r29, 0xFE	; 254
     b38:	59 83       	std	Y+1, r21	; 0x01
     b3a:	48 83       	st	Y, r20
     b3c:	cd 54       	subi	r28, 0x4D	; 77
     b3e:	d1 40       	sbci	r29, 0x01	; 1
	max.next = NULL;
     b40:	cd 59       	subi	r28, 0x9D	; 157
     b42:	de 4f       	sbci	r29, 0xFE	; 254
     b44:	19 82       	std	Y+1, r1	; 0x01
     b46:	18 82       	st	Y, r1
     b48:	c3 56       	subi	r28, 0x63	; 99
     b4a:	d1 40       	sbci	r29, 0x01	; 1
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &distance;
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 f9 02 	sts	0x02F9, r25
     b54:	80 93 f8 02 	sts	0x02F8, r24
	distance.next = &speed;
     b58:	40 96       	adiw	r24, 0x10	; 16
     b5a:	98 8b       	std	Y+16, r25	; 0x10
     b5c:	8f 87       	std	Y+15, r24	; 0x0f
	speed.next = NULL;
     b5e:	18 a2       	std	Y+32, r1	; 0x20
     b60:	1f 8e       	std	Y+31, r1	; 0x1f
	
	System_Outputs = &pwm;
     b62:	87 ee       	ldi	r24, 0xE7	; 231
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	8c 0f       	add	r24, r28
     b68:	9d 1f       	adc	r25, r29
     b6a:	90 93 f7 02 	sts	0x02F7, r25
     b6e:	80 93 f6 02 	sts	0x02F6, r24
	pwm.next = NULL;
     b72:	cb 50       	subi	r28, 0x0B	; 11
     b74:	df 4f       	sbci	r29, 0xFF	; 255
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	18 82       	st	Y, r1
     b7a:	c5 5f       	subi	r28, 0xF5	; 245
     b7c:	d0 40       	sbci	r29, 0x00	; 0

	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
     b7e:	9e 01       	movw	r18, r28
     b80:	2b 59       	subi	r18, 0x9B	; 155
     b82:	3e 4f       	sbci	r19, 0xFE	; 254
     b84:	30 93 fb 02 	sts	0x02FB, r19
     b88:	20 93 fa 02 	sts	0x02FA, r18
	struct rule_type rule2; rule1.next = &rule2;
     b8c:	8c 57       	subi	r24, 0x7C	; 124
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	d9 01       	movw	r26, r18
     b92:	15 96       	adiw	r26, 0x05	; 5
     b94:	9c 93       	st	X, r25
     b96:	8e 93       	st	-X, r24
     b98:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule3; rule2.next = &rule3;
     b9a:	1c 96       	adiw	r26, 0x0c	; 12
     b9c:	fc 01       	movw	r30, r24
     b9e:	b5 83       	std	Z+5, r27	; 0x05
     ba0:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule4; rule3.next = &rule4;
     ba2:	47 e7       	ldi	r20, 0x77	; 119
     ba4:	51 e0       	ldi	r21, 0x01	; 1
     ba6:	4c 0f       	add	r20, r28
     ba8:	5d 1f       	adc	r21, r29
     baa:	15 96       	adiw	r26, 0x05	; 5
     bac:	5c 93       	st	X, r21
     bae:	4e 93       	st	-X, r20
     bb0:	14 97       	sbiw	r26, 0x04	; 4
	struct rule_type rule5; rule4.next = &rule5;
     bb2:	8e 01       	movw	r16, r28
     bb4:	03 58       	subi	r16, 0x83	; 131
     bb6:	1e 4f       	sbci	r17, 0xFE	; 254
     bb8:	c5 58       	subi	r28, 0x85	; 133
     bba:	de 4f       	sbci	r29, 0xFE	; 254
     bbc:	19 83       	std	Y+1, r17	; 0x01
     bbe:	08 83       	st	Y, r16
     bc0:	cb 57       	subi	r28, 0x7B	; 123
     bc2:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule6; rule5.next = &rule6;
     bc4:	7e 01       	movw	r14, r28
     bc6:	5d e7       	ldi	r21, 0x7D	; 125
     bc8:	e5 1a       	sub	r14, r21
     bca:	5e ef       	ldi	r21, 0xFE	; 254
     bcc:	f5 0a       	sbc	r15, r21
     bce:	f8 01       	movw	r30, r16
     bd0:	f5 82       	std	Z+5, r15	; 0x05
     bd2:	e4 82       	std	Z+4, r14	; 0x04
	struct rule_type rule7; rule6.next = &rule7;
     bd4:	49 e8       	ldi	r20, 0x89	; 137
     bd6:	51 e0       	ldi	r21, 0x01	; 1
     bd8:	4c 0f       	add	r20, r28
     bda:	5d 1f       	adc	r21, r29
     bdc:	f7 01       	movw	r30, r14
     bde:	55 83       	std	Z+5, r21	; 0x05
     be0:	44 83       	std	Z+4, r20	; 0x04
	struct rule_type rule8; rule7.next = &rule8;
     be2:	ef e8       	ldi	r30, 0x8F	; 143
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	c3 57       	subi	r28, 0x73	; 115
     bec:	de 4f       	sbci	r29, 0xFE	; 254
     bee:	f9 83       	std	Y+1, r31	; 0x01
     bf0:	e8 83       	st	Y, r30
     bf2:	cd 58       	subi	r28, 0x8D	; 141
     bf4:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule9; rule8.next = &rule9;
     bf6:	45 e9       	ldi	r20, 0x95	; 149
     bf8:	51 e0       	ldi	r21, 0x01	; 1
     bfa:	4c 0f       	add	r20, r28
     bfc:	5d 1f       	adc	r21, r29
     bfe:	cd 56       	subi	r28, 0x6D	; 109
     c00:	de 4f       	sbci	r29, 0xFE	; 254
     c02:	59 83       	std	Y+1, r21	; 0x01
     c04:	48 83       	st	Y, r20
     c06:	c3 59       	subi	r28, 0x93	; 147
     c08:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule10; rule9.next = &rule10;
     c0a:	eb e9       	ldi	r30, 0x9B	; 155
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	ec 0f       	add	r30, r28
     c10:	fd 1f       	adc	r31, r29
     c12:	c7 56       	subi	r28, 0x67	; 103
     c14:	de 4f       	sbci	r29, 0xFE	; 254
     c16:	f9 83       	std	Y+1, r31	; 0x01
     c18:	e8 83       	st	Y, r30
     c1a:	c9 59       	subi	r28, 0x99	; 153
     c1c:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule11; rule10.next = &rule11;
     c1e:	41 ea       	ldi	r20, 0xA1	; 161
     c20:	51 e0       	ldi	r21, 0x01	; 1
     c22:	4c 0f       	add	r20, r28
     c24:	5d 1f       	adc	r21, r29
     c26:	c1 56       	subi	r28, 0x61	; 97
     c28:	de 4f       	sbci	r29, 0xFE	; 254
     c2a:	59 83       	std	Y+1, r21	; 0x01
     c2c:	48 83       	st	Y, r20
     c2e:	cf 59       	subi	r28, 0x9F	; 159
     c30:	d1 40       	sbci	r29, 0x01	; 1
	struct rule_type rule12; rule11.next = &rule12; rule12.next = NULL;
     c32:	e7 ea       	ldi	r30, 0xA7	; 167
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	ec 0f       	add	r30, r28
     c38:	fd 1f       	adc	r31, r29
     c3a:	cb 55       	subi	r28, 0x5B	; 91
     c3c:	de 4f       	sbci	r29, 0xFE	; 254
     c3e:	f9 83       	std	Y+1, r31	; 0x01
     c40:	e8 83       	st	Y, r30
     c42:	c5 5a       	subi	r28, 0xA5	; 165
     c44:	d1 40       	sbci	r29, 0x01	; 1
     c46:	c5 55       	subi	r28, 0x55	; 85
     c48:	de 4f       	sbci	r29, 0xFE	; 254
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	18 82       	st	Y, r1
     c4e:	cb 5a       	subi	r28, 0xAB	; 171
     c50:	d1 40       	sbci	r29, 0x01	; 1
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if distance is stopDist then pwm is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     c52:	be 01       	movw	r22, r28
     c54:	63 55       	subi	r22, 0x53	; 83
     c56:	7e 4f       	sbci	r23, 0xFE	; 254
     c58:	f9 01       	movw	r30, r18
     c5a:	71 83       	std	Z+1, r23	; 0x01
     c5c:	60 83       	st	Z, r22
     c5e:	fb 01       	movw	r30, r22
     c60:	13 82       	std	Z+3, r1	; 0x03
     c62:	12 82       	std	Z+2, r1	; 0x02
     c64:	40 5f       	subi	r20, 0xF0	; 240
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	f9 01       	movw	r30, r18
     c6a:	53 83       	std	Z+3, r21	; 0x03
     c6c:	42 83       	std	Z+2, r20	; 0x02
     c6e:	fa 01       	movw	r30, r20
     c70:	13 82       	std	Z+3, r1	; 0x03
     c72:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &stopDist.value; then1.value = &noSpeed.value;
     c74:	2a 53       	subi	r18, 0x3A	; 58
     c76:	31 40       	sbci	r19, 0x01	; 1
     c78:	fb 01       	movw	r30, r22
     c7a:	31 83       	std	Z+1, r19	; 0x01
     c7c:	20 83       	st	Z, r18
     c7e:	fa e0       	ldi	r31, 0x0A	; 10
     c80:	8f 0e       	add	r8, r31
     c82:	91 1c       	adc	r9, r1
     c84:	fa 01       	movw	r30, r20
     c86:	91 82       	std	Z+1, r9	; 0x01
     c88:	80 82       	st	Z, r8
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, if22, then2;
	rule2.if_side = &if21; if21.next = &if22; if22.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     c8a:	68 5f       	subi	r22, 0xF8	; 248
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	71 83       	std	Z+1, r23	; 0x01
     c92:	60 83       	st	Z, r22
     c94:	48 5f       	subi	r20, 0xF8	; 248
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	fb 01       	movw	r30, r22
     c9a:	53 83       	std	Z+3, r21	; 0x03
     c9c:	42 83       	std	Z+2, r20	; 0x02
     c9e:	fa 01       	movw	r30, r20
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	2e 56       	subi	r18, 0x6E	; 110
     ca6:	3e 4f       	sbci	r19, 0xFE	; 254
     ca8:	fc 01       	movw	r30, r24
     caa:	33 83       	std	Z+3, r19	; 0x03
     cac:	22 83       	std	Z+2, r18	; 0x02
     cae:	f9 01       	movw	r30, r18
     cb0:	13 82       	std	Z+3, r1	; 0x03
     cb2:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &low.value; if22.value = &oneM.value; then2.value = &slow.value;
     cb4:	fa e0       	ldi	r31, 0x0A	; 10
     cb6:	af 0e       	add	r10, r31
     cb8:	b1 1c       	adc	r11, r1
     cba:	fb 01       	movw	r30, r22
     cbc:	b1 82       	std	Z+1, r11	; 0x01
     cbe:	a0 82       	st	Z, r10
     cc0:	fa e0       	ldi	r31, 0x0A	; 10
     cc2:	6f 0e       	add	r6, r31
     cc4:	71 1c       	adc	r7, r1
     cc6:	fa 01       	movw	r30, r20
     cc8:	71 82       	std	Z+1, r7	; 0x01
     cca:	60 82       	st	Z, r6
     ccc:	fa e0       	ldi	r31, 0x0A	; 10
     cce:	cf 0e       	add	r12, r31
     cd0:	d1 1c       	adc	r13, r1
     cd2:	f9 01       	movw	r30, r18
     cd4:	d1 82       	std	Z+1, r13	; 0x01
     cd6:	c0 82       	st	Z, r12
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, if32, then3;
	rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     cd8:	48 5f       	subi	r20, 0xF8	; 248
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	5c 93       	st	X, r21
     ce0:	4e 93       	st	-X, r20
     ce2:	28 5f       	subi	r18, 0xF8	; 248
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	fa 01       	movw	r30, r20
     ce8:	33 83       	std	Z+3, r19	; 0x03
     cea:	22 83       	std	Z+2, r18	; 0x02
     cec:	f9 01       	movw	r30, r18
     cee:	13 82       	std	Z+3, r1	; 0x03
     cf0:	12 82       	std	Z+2, r1	; 0x02
     cf2:	82 5a       	subi	r24, 0xA2	; 162
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	13 96       	adiw	r26, 0x03	; 3
     cf8:	9c 93       	st	X, r25
     cfa:	8e 93       	st	-X, r24
     cfc:	12 97       	sbiw	r26, 0x02	; 2
     cfe:	dc 01       	movw	r26, r24
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	1c 92       	st	X, r1
     d04:	1e 92       	st	-X, r1
     d06:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &medium.value; if32.value = &oneM.value; then3.value = &cruise.value;
     d08:	ba e0       	ldi	r27, 0x0A	; 10
     d0a:	4b 0e       	add	r4, r27
     d0c:	51 1c       	adc	r5, r1
     d0e:	fa 01       	movw	r30, r20
     d10:	51 82       	std	Z+1, r5	; 0x01
     d12:	40 82       	st	Z, r4
     d14:	d9 01       	movw	r26, r18
     d16:	6d 92       	st	X+, r6
     d18:	7c 92       	st	X, r7
     d1a:	ba e0       	ldi	r27, 0x0A	; 10
     d1c:	2b 0e       	add	r2, r27
     d1e:	31 1c       	adc	r3, r1
     d20:	fc 01       	movw	r30, r24
     d22:	31 82       	std	Z+1, r3	; 0x01
     d24:	20 82       	st	Z, r2
	
	// if speed is high and distance is oneM then speed is cruise
	struct rule_element_type if41, if42, then4;
	rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     d26:	28 5f       	subi	r18, 0xF8	; 248
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	c9 58       	subi	r28, 0x89	; 137
     d2c:	de 4f       	sbci	r29, 0xFE	; 254
     d2e:	39 83       	std	Y+1, r19	; 0x01
     d30:	28 83       	st	Y, r18
     d32:	c7 57       	subi	r28, 0x77	; 119
     d34:	d1 40       	sbci	r29, 0x01	; 1
     d36:	08 96       	adiw	r24, 0x08	; 8
     d38:	d9 01       	movw	r26, r18
     d3a:	13 96       	adiw	r26, 0x03	; 3
     d3c:	9c 93       	st	X, r25
     d3e:	8e 93       	st	-X, r24
     d40:	12 97       	sbiw	r26, 0x02	; 2
     d42:	fc 01       	movw	r30, r24
     d44:	13 82       	std	Z+3, r1	; 0x03
     d46:	12 82       	std	Z+2, r1	; 0x02
     d48:	18 96       	adiw	r26, 0x08	; 8
     d4a:	c7 58       	subi	r28, 0x87	; 135
     d4c:	de 4f       	sbci	r29, 0xFE	; 254
     d4e:	b9 83       	std	Y+1, r27	; 0x01
     d50:	a8 83       	st	Y, r26
     d52:	c9 57       	subi	r28, 0x79	; 121
     d54:	d1 40       	sbci	r29, 0x01	; 1
     d56:	13 96       	adiw	r26, 0x03	; 3
     d58:	1c 92       	st	X, r1
     d5a:	1e 92       	st	-X, r1
     d5c:	12 97       	sbiw	r26, 0x02	; 2
	if41.value = &high.value; if42.value = &oneM.value; then4.value = &cruise.value;
     d5e:	41 ed       	ldi	r20, 0xD1	; 209
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	4c 0f       	add	r20, r28
     d64:	5d 1f       	adc	r21, r29
     d66:	46 5f       	subi	r20, 0xF6	; 246
     d68:	5f 4f       	sbci	r21, 0xFF	; 255
     d6a:	f9 01       	movw	r30, r18
     d6c:	51 83       	std	Z+1, r21	; 0x01
     d6e:	40 83       	st	Z, r20
     d70:	fc 01       	movw	r30, r24
     d72:	71 82       	std	Z+1, r7	; 0x01
     d74:	60 82       	st	Z, r6
     d76:	2d 92       	st	X+, r2
     d78:	3c 92       	st	X, r3
	
	// if speed is still and distance is oneM then speed is slow
	struct rule_element_type if51, if52, then5;
	rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	d8 01       	movw	r26, r16
     d7e:	8d 93       	st	X+, r24
     d80:	9c 93       	st	X, r25
     d82:	68 5d       	subi	r22, 0xD8	; 216
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	fc 01       	movw	r30, r24
     d88:	73 83       	std	Z+3, r23	; 0x03
     d8a:	62 83       	std	Z+2, r22	; 0x02
     d8c:	db 01       	movw	r26, r22
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	1c 92       	st	X, r1
     d92:	1e 92       	st	-X, r1
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	38 96       	adiw	r30, 0x08	; 8
     d98:	d8 01       	movw	r26, r16
     d9a:	13 96       	adiw	r26, 0x03	; 3
     d9c:	fc 93       	st	X, r31
     d9e:	ee 93       	st	-X, r30
     da0:	12 97       	sbiw	r26, 0x02	; 2
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	12 82       	std	Z+2, r1	; 0x02
	if51.value = &still.value; if52.value = &oneM.value; then5.value = &slow.value;
     da6:	29 e7       	ldi	r18, 0x79	; 121
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	2c 0f       	add	r18, r28
     dac:	3d 1f       	adc	r19, r29
     dae:	26 5f       	subi	r18, 0xF6	; 246
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	dc 01       	movw	r26, r24
     db4:	2d 93       	st	X+, r18
     db6:	3c 93       	st	X, r19
     db8:	db 01       	movw	r26, r22
     dba:	6d 92       	st	X+, r6
     dbc:	7c 92       	st	X, r7
     dbe:	d1 82       	std	Z+1, r13	; 0x01
     dc0:	c0 82       	st	Z, r12
	
	// if speed is cruising and distance is oneM then speed is slow
	struct rule_element_type if61, if62, then6;
	rule6.if_side = &if61; if61.next = &if62; if62.next = NULL; rule6.then_side = &then6; then6.next = NULL;
     dc2:	0c 96       	adiw	r24, 0x0c	; 12
     dc4:	f7 01       	movw	r30, r14
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	04 59       	subi	r16, 0x94	; 148
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	dc 01       	movw	r26, r24
     dd0:	13 96       	adiw	r26, 0x03	; 3
     dd2:	1c 93       	st	X, r17
     dd4:	0e 93       	st	-X, r16
     dd6:	12 97       	sbiw	r26, 0x02	; 2
     dd8:	f8 01       	movw	r30, r16
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	12 82       	std	Z+2, r1	; 0x02
     dde:	34 96       	adiw	r30, 0x04	; 4
     de0:	d7 01       	movw	r26, r14
     de2:	13 96       	adiw	r26, 0x03	; 3
     de4:	fc 93       	st	X, r31
     de6:	ee 93       	st	-X, r30
     de8:	12 97       	sbiw	r26, 0x02	; 2
     dea:	13 82       	std	Z+3, r1	; 0x03
     dec:	12 82       	std	Z+2, r1	; 0x02
	if61.value = &cruising.value; if62.value = &oneM.value; then6.value = &slow.value;
     dee:	65 ea       	ldi	r22, 0xA5	; 165
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	6c 0f       	add	r22, r28
     df4:	7d 1f       	adc	r23, r29
     df6:	66 5f       	subi	r22, 0xF6	; 246
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	dc 01       	movw	r26, r24
     dfc:	6d 93       	st	X+, r22
     dfe:	7c 93       	st	X, r23
     e00:	d8 01       	movw	r26, r16
     e02:	6d 92       	st	X+, r6
     e04:	7c 92       	st	X, r7
     e06:	d1 82       	std	Z+1, r13	; 0x01
     e08:	c0 82       	st	Z, r12
	
	// if speed is low and distance is twoM then speed is cruise
	struct rule_element_type if71, if72, then7;
	rule7.if_side = &if71; if71.next = &if72; if72.next = NULL; rule7.then_side = &then7; then7.next = NULL;
     e0a:	0c 96       	adiw	r24, 0x0c	; 12
     e0c:	c7 57       	subi	r28, 0x77	; 119
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	99 83       	std	Y+1, r25	; 0x01
     e12:	88 83       	st	Y, r24
     e14:	c9 58       	subi	r28, 0x89	; 137
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	04 5f       	subi	r16, 0xF4	; 244
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	fc 01       	movw	r30, r24
     e1e:	13 83       	std	Z+3, r17	; 0x03
     e20:	02 83       	std	Z+2, r16	; 0x02
     e22:	d8 01       	movw	r26, r16
     e24:	13 96       	adiw	r26, 0x03	; 3
     e26:	1c 92       	st	X, r1
     e28:	1e 92       	st	-X, r1
     e2a:	12 97       	sbiw	r26, 0x02	; 2
     e2c:	38 96       	adiw	r30, 0x08	; 8
     e2e:	c5 57       	subi	r28, 0x75	; 117
     e30:	de 4f       	sbci	r29, 0xFE	; 254
     e32:	f9 83       	std	Y+1, r31	; 0x01
     e34:	e8 83       	st	Y, r30
     e36:	cb 58       	subi	r28, 0x8B	; 139
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	13 82       	std	Z+3, r1	; 0x03
     e3c:	12 82       	std	Z+2, r1	; 0x02
	if71.value = &low.value; if72.value = &twoM.value; then7.value = &cruise.value;
     e3e:	dc 01       	movw	r26, r24
     e40:	ad 92       	st	X+, r10
     e42:	bc 92       	st	X, r11
     e44:	8d e4       	ldi	r24, 0x4D	; 77
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	8c 0f       	add	r24, r28
     e4a:	9d 1f       	adc	r25, r29
     e4c:	0a 96       	adiw	r24, 0x0a	; 10
     e4e:	d8 01       	movw	r26, r16
     e50:	8d 93       	st	X+, r24
     e52:	9c 93       	st	X, r25
     e54:	31 82       	std	Z+1, r3	; 0x01
     e56:	20 82       	st	Z, r2
	
	// if speed is medium and distance is twoM then speed is medHigh
	struct rule_element_type if81, if82, then8;
	rule8.if_side = &if81; if81.next = &if82; if82.next = NULL; rule8.then_side = &then8; then8.next = NULL;
     e58:	08 5f       	subi	r16, 0xF8	; 248
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	c1 57       	subi	r28, 0x71	; 113
     e5e:	de 4f       	sbci	r29, 0xFE	; 254
     e60:	19 83       	std	Y+1, r17	; 0x01
     e62:	08 83       	st	Y, r16
     e64:	cf 58       	subi	r28, 0x8F	; 143
     e66:	d1 40       	sbci	r29, 0x01	; 1
     e68:	7e 01       	movw	r14, r28
     e6a:	bf ef       	ldi	r27, 0xFF	; 255
     e6c:	eb 1a       	sub	r14, r27
     e6e:	bd ef       	ldi	r27, 0xFD	; 253
     e70:	fb 0a       	sbc	r15, r27
     e72:	f8 01       	movw	r30, r16
     e74:	f3 82       	std	Z+3, r15	; 0x03
     e76:	e2 82       	std	Z+2, r14	; 0x02
     e78:	d7 01       	movw	r26, r14
     e7a:	13 96       	adiw	r26, 0x03	; 3
     e7c:	1c 92       	st	X, r1
     e7e:	1e 92       	st	-X, r1
     e80:	12 97       	sbiw	r26, 0x02	; 2
     e82:	14 96       	adiw	r26, 0x04	; 4
     e84:	cf 56       	subi	r28, 0x6F	; 111
     e86:	de 4f       	sbci	r29, 0xFE	; 254
     e88:	b9 83       	std	Y+1, r27	; 0x01
     e8a:	a8 83       	st	Y, r26
     e8c:	c1 59       	subi	r28, 0x91	; 145
     e8e:	d1 40       	sbci	r29, 0x01	; 1
     e90:	13 96       	adiw	r26, 0x03	; 3
     e92:	1c 92       	st	X, r1
     e94:	1e 92       	st	-X, r1
     e96:	12 97       	sbiw	r26, 0x02	; 2
	if81.value = &medium.value; if82.value = &twoM.value; then8.value = &medHigh.value;
     e98:	51 82       	std	Z+1, r5	; 0x01
     e9a:	40 82       	st	Z, r4
     e9c:	f7 01       	movw	r30, r14
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
     ea2:	0f 2e       	mov	r0, r31
     ea4:	f9 e3       	ldi	r31, 0x39	; 57
     ea6:	cf 2e       	mov	r12, r31
     ea8:	dd 24       	eor	r13, r13
     eaa:	d3 94       	inc	r13
     eac:	f0 2d       	mov	r31, r0
     eae:	cc 0e       	add	r12, r28
     eb0:	dd 1e       	adc	r13, r29
     eb2:	fa e0       	ldi	r31, 0x0A	; 10
     eb4:	cf 0e       	add	r12, r31
     eb6:	d1 1c       	adc	r13, r1
     eb8:	cd 92       	st	X+, r12
     eba:	dc 92       	st	X, r13
	
	// if speed is high and distance is twoM then speed is medHigh
	struct rule_element_type if91, if92, then9;
	rule9.if_side = &if91; if91.next = &if92; if92.next = NULL; rule9.then_side = &then9; then9.next = NULL;
     ebc:	7e 01       	movw	r14, r28
     ebe:	a7 ef       	ldi	r26, 0xF7	; 247
     ec0:	ea 1a       	sub	r14, r26
     ec2:	ad ef       	ldi	r26, 0xFD	; 253
     ec4:	fa 0a       	sbc	r15, r26
     ec6:	cb 56       	subi	r28, 0x6B	; 107
     ec8:	de 4f       	sbci	r29, 0xFE	; 254
     eca:	f9 82       	std	Y+1, r15	; 0x01
     ecc:	e8 82       	st	Y, r14
     ece:	c5 59       	subi	r28, 0x95	; 149
     ed0:	d1 40       	sbci	r29, 0x01	; 1
     ed2:	00 5f       	subi	r16, 0xF0	; 240
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	f7 01       	movw	r30, r14
     ed8:	13 83       	std	Z+3, r17	; 0x03
     eda:	02 83       	std	Z+2, r16	; 0x02
     edc:	d8 01       	movw	r26, r16
     ede:	13 96       	adiw	r26, 0x03	; 3
     ee0:	1c 92       	st	X, r1
     ee2:	1e 92       	st	-X, r1
     ee4:	12 97       	sbiw	r26, 0x02	; 2
     ee6:	14 96       	adiw	r26, 0x04	; 4
     ee8:	c9 56       	subi	r28, 0x69	; 105
     eea:	de 4f       	sbci	r29, 0xFE	; 254
     eec:	b9 83       	std	Y+1, r27	; 0x01
     eee:	a8 83       	st	Y, r26
     ef0:	c7 59       	subi	r28, 0x97	; 151
     ef2:	d1 40       	sbci	r29, 0x01	; 1
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	1c 92       	st	X, r1
     ef8:	1e 92       	st	-X, r1
     efa:	12 97       	sbiw	r26, 0x02	; 2
	if91.value = &high.value; if92.value = &twoM.value; then9.value = &medHigh.value;
     efc:	51 83       	std	Z+1, r21	; 0x01
     efe:	40 83       	st	Z, r20
     f00:	f8 01       	movw	r30, r16
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
     f06:	cd 92       	st	X+, r12
     f08:	dc 92       	st	X, r13
	
	// if speed is still and distance is twoM then speed is cruise
	struct rule_element_type if101, if102, then10;
	rule10.if_side = &if101; if101.next = &if102; if102.next = NULL; rule10.then_side = &then10; then10.next = NULL;
     f0a:	08 5f       	subi	r16, 0xF8	; 248
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	c5 56       	subi	r28, 0x65	; 101
     f10:	de 4f       	sbci	r29, 0xFE	; 254
     f12:	19 83       	std	Y+1, r17	; 0x01
     f14:	08 83       	st	Y, r16
     f16:	cb 59       	subi	r28, 0x9B	; 155
     f18:	d1 40       	sbci	r29, 0x01	; 1
     f1a:	42 5c       	subi	r20, 0xC2	; 194
     f1c:	5e 4f       	sbci	r21, 0xFE	; 254
     f1e:	d8 01       	movw	r26, r16
     f20:	13 96       	adiw	r26, 0x03	; 3
     f22:	5c 93       	st	X, r21
     f24:	4e 93       	st	-X, r20
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	fa 01       	movw	r30, r20
     f2a:	13 82       	std	Z+3, r1	; 0x03
     f2c:	12 82       	std	Z+2, r1	; 0x02
     f2e:	18 96       	adiw	r26, 0x08	; 8
     f30:	c3 56       	subi	r28, 0x63	; 99
     f32:	de 4f       	sbci	r29, 0xFE	; 254
     f34:	b9 83       	std	Y+1, r27	; 0x01
     f36:	a8 83       	st	Y, r26
     f38:	cd 59       	subi	r28, 0x9D	; 157
     f3a:	d1 40       	sbci	r29, 0x01	; 1
     f3c:	13 96       	adiw	r26, 0x03	; 3
     f3e:	1c 92       	st	X, r1
     f40:	1e 92       	st	-X, r1
     f42:	12 97       	sbiw	r26, 0x02	; 2
	if101.value = &still.value; if102.value = &twoM.value; then10.value = &cruise.value;
     f44:	f8 01       	movw	r30, r16
     f46:	31 83       	std	Z+1, r19	; 0x01
     f48:	20 83       	st	Z, r18
     f4a:	fa 01       	movw	r30, r20
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	2d 92       	st	X+, r2
     f52:	3c 92       	st	X, r3
	
	// if speed is cruising and distance is twoM then speed is medHigh
	struct rule_element_type if111, if112, then11;
	rule11.if_side = &if111; if111.next = &if112; if112.next = NULL; rule11.then_side = &then11; then11.next = NULL;
     f54:	48 5f       	subi	r20, 0xF8	; 248
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	cf 55       	subi	r28, 0x5F	; 95
     f5a:	de 4f       	sbci	r29, 0xFE	; 254
     f5c:	59 83       	std	Y+1, r21	; 0x01
     f5e:	48 83       	st	Y, r20
     f60:	c1 5a       	subi	r28, 0xA1	; 161
     f62:	d1 40       	sbci	r29, 0x01	; 1
     f64:	2e 55       	subi	r18, 0x5E	; 94
     f66:	3e 4f       	sbci	r19, 0xFE	; 254
     f68:	da 01       	movw	r26, r20
     f6a:	13 96       	adiw	r26, 0x03	; 3
     f6c:	3c 93       	st	X, r19
     f6e:	2e 93       	st	-X, r18
     f70:	12 97       	sbiw	r26, 0x02	; 2
     f72:	f9 01       	movw	r30, r18
     f74:	13 82       	std	Z+3, r1	; 0x03
     f76:	12 82       	std	Z+2, r1	; 0x02
     f78:	18 96       	adiw	r26, 0x08	; 8
     f7a:	cd 55       	subi	r28, 0x5D	; 93
     f7c:	de 4f       	sbci	r29, 0xFE	; 254
     f7e:	b9 83       	std	Y+1, r27	; 0x01
     f80:	a8 83       	st	Y, r26
     f82:	c3 5a       	subi	r28, 0xA3	; 163
     f84:	d1 40       	sbci	r29, 0x01	; 1
     f86:	13 96       	adiw	r26, 0x03	; 3
     f88:	1c 92       	st	X, r1
     f8a:	1e 92       	st	-X, r1
     f8c:	12 97       	sbiw	r26, 0x02	; 2
	if111.value = &cruising.value; if112.value = &twoM.value; then11.value = &medHigh.value;
     f8e:	fa 01       	movw	r30, r20
     f90:	71 83       	std	Z+1, r23	; 0x01
     f92:	60 83       	st	Z, r22
     f94:	f9 01       	movw	r30, r18
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	dc 92       	st	X, r13
     f9e:	ce 92       	st	-X, r12
	
	// if distance is threeM then speed is max
	struct rule_element_type if121, then12;
	rule12.if_side = &if121; if121.next = NULL; rule12.then_side = &then12; then12.next = NULL;
     fa0:	14 96       	adiw	r26, 0x04	; 4
     fa2:	c9 55       	subi	r28, 0x59	; 89
     fa4:	de 4f       	sbci	r29, 0xFE	; 254
     fa6:	b9 83       	std	Y+1, r27	; 0x01
     fa8:	a8 83       	st	Y, r26
     faa:	c7 5a       	subi	r28, 0xA7	; 167
     fac:	d1 40       	sbci	r29, 0x01	; 1
     fae:	13 96       	adiw	r26, 0x03	; 3
     fb0:	1c 92       	st	X, r1
     fb2:	1e 92       	st	-X, r1
     fb4:	12 97       	sbiw	r26, 0x02	; 2
     fb6:	3c 96       	adiw	r30, 0x0c	; 12
     fb8:	c7 55       	subi	r28, 0x57	; 87
     fba:	de 4f       	sbci	r29, 0xFE	; 254
     fbc:	f9 83       	std	Y+1, r31	; 0x01
     fbe:	e8 83       	st	Y, r30
     fc0:	c9 5a       	subi	r28, 0xA9	; 169
     fc2:	d1 40       	sbci	r29, 0x01	; 1
     fc4:	13 82       	std	Z+3, r1	; 0x03
     fc6:	12 82       	std	Z+2, r1	; 0x02
	if121.value = &threeM.value; then12.value = &max.value;
     fc8:	83 e6       	ldi	r24, 0x63	; 99
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	8c 0f       	add	r24, r28
     fce:	9d 1f       	adc	r25, r29
     fd0:	0a 96       	adiw	r24, 0x0a	; 10
     fd2:	8d 93       	st	X+, r24
     fd4:	9c 93       	st	X, r25
     fd6:	8f e4       	ldi	r24, 0x4F	; 79
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	8c 0f       	add	r24, r28
     fdc:	9d 1f       	adc	r25, r29
     fde:	0a 96       	adiw	r24, 0x0a	; 10
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
     fe4:	96 d0       	rcall	.+300    	; 0x1112 <fuzzification>
	rule_evaluation();
     fe6:	bc d0       	rcall	.+376    	; 0x1160 <rule_evaluation>
	defuzzification();
     fe8:	01 d1       	rcall	.+514    	; 0x11ec <defuzzification>

	if (pwm.value > 2835)
     fea:	cf 50       	subi	r28, 0x0F	; 15
     fec:	df 4f       	sbci	r29, 0xFF	; 255
     fee:	88 81       	ld	r24, Y
     ff0:	99 81       	ldd	r25, Y+1	; 0x01
     ff2:	c1 5f       	subi	r28, 0xF1	; 241
     ff4:	d0 40       	sbci	r29, 0x00	; 0
     ff6:	84 31       	cpi	r24, 0x14	; 20
     ff8:	fb e0       	ldi	r31, 0x0B	; 11
     ffa:	9f 07       	cpc	r25, r31
     ffc:	24 f0       	brlt	.+8      	; 0x1006 <FLC_obstacle+0x850>

	{
		setESC(2830);
     ffe:	8e e0       	ldi	r24, 0x0E	; 14
    1000:	9b e0       	ldi	r25, 0x0B	; 11
    1002:	9f d2       	rcall	.+1342   	; 0x1542 <setESC>
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <FLC_obstacle+0x862>
	}
	else if (pwm.value < 2750)
    1006:	8e 3b       	cpi	r24, 0xBE	; 190
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	92 07       	cpc	r25, r18
    100c:	24 f4       	brge	.+8      	; 0x1016 <FLC_obstacle+0x860>
	{
		setESC(2750);
    100e:	8e eb       	ldi	r24, 0xBE	; 190
    1010:	9a e0       	ldi	r25, 0x0A	; 10
    1012:	97 d2       	rcall	.+1326   	; 0x1542 <setESC>
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <FLC_obstacle+0x862>
	}
	else
	{
		setESC(pwm.value);
    1016:	95 d2       	rcall	.+1322   	; 0x1542 <setESC>
	}
	
	
	
    1018:	cc 5c       	subi	r28, 0xCC	; 204
    101a:	dd 4f       	sbci	r29, 0xFD	; 253
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	08 95       	ret

0000104c <compute_degree_of_membership>:
    104c:	fc 01       	movw	r30, r24
    104e:	84 85       	ldd	r24, Z+12	; 0x0c
    1050:	95 85       	ldd	r25, Z+13	; 0x0d
    1052:	9b 01       	movw	r18, r22
    1054:	28 1b       	sub	r18, r24
    1056:	39 0b       	sbc	r19, r25
    1058:	86 85       	ldd	r24, Z+14	; 0x0e
    105a:	97 85       	ldd	r25, Z+15	; 0x0f
    105c:	86 1b       	sub	r24, r22
    105e:	97 0b       	sbc	r25, r23
    1060:	12 16       	cp	r1, r18
    1062:	13 06       	cpc	r1, r19
    1064:	f4 f4       	brge	.+60     	; 0x10a2 <compute_degree_of_membership+0x56>
    1066:	18 16       	cp	r1, r24
    1068:	19 06       	cpc	r1, r25
    106a:	f4 f4       	brge	.+60     	; 0x10a8 <compute_degree_of_membership+0x5c>
    106c:	60 89       	ldd	r22, Z+16	; 0x10
    106e:	71 89       	ldd	r23, Z+17	; 0x11
    1070:	a2 89       	ldd	r26, Z+18	; 0x12
    1072:	b3 89       	ldd	r27, Z+19	; 0x13
    1074:	8a 9f       	mul	r24, r26
    1076:	a0 01       	movw	r20, r0
    1078:	8b 9f       	mul	r24, r27
    107a:	50 0d       	add	r21, r0
    107c:	9a 9f       	mul	r25, r26
    107e:	50 0d       	add	r21, r0
    1080:	11 24       	eor	r1, r1
    1082:	26 9f       	mul	r18, r22
    1084:	c0 01       	movw	r24, r0
    1086:	27 9f       	mul	r18, r23
    1088:	90 0d       	add	r25, r0
    108a:	36 9f       	mul	r19, r22
    108c:	90 0d       	add	r25, r0
    108e:	11 24       	eor	r1, r1
    1090:	48 17       	cp	r20, r24
    1092:	59 07       	cpc	r21, r25
    1094:	0c f4       	brge	.+2      	; 0x1098 <compute_degree_of_membership+0x4c>
    1096:	ca 01       	movw	r24, r20
    1098:	8f 3f       	cpi	r24, 0xFF	; 255
    109a:	91 05       	cpc	r25, r1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <compute_degree_of_membership+0x54>
    109e:	3c f4       	brge	.+14     	; 0x10ae <compute_degree_of_membership+0x62>
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <compute_degree_of_membership+0x66>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <compute_degree_of_membership+0x66>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <compute_degree_of_membership+0x66>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	93 87       	std	Z+11, r25	; 0x0b
    10b4:	82 87       	std	Z+10, r24	; 0x0a
    10b6:	08 95       	ret

000010b8 <compute_area_of_trapezoid>:
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	fc 01       	movw	r30, r24
    10c2:	c6 85       	ldd	r28, Z+14	; 0x0e
    10c4:	d7 85       	ldd	r29, Z+15	; 0x0f
    10c6:	84 85       	ldd	r24, Z+12	; 0x0c
    10c8:	95 85       	ldd	r25, Z+13	; 0x0d
    10ca:	c8 1b       	sub	r28, r24
    10cc:	d9 0b       	sbc	r29, r25
    10ce:	22 85       	ldd	r18, Z+10	; 0x0a
    10d0:	33 85       	ldd	r19, Z+11	; 0x0b
    10d2:	60 89       	ldd	r22, Z+16	; 0x10
    10d4:	71 89       	ldd	r23, Z+17	; 0x11
    10d6:	c9 01       	movw	r24, r18
    10d8:	d7 d5       	rcall	.+2990   	; 0x1c88 <__divmodhi4>
    10da:	8e 01       	movw	r16, r28
    10dc:	06 1b       	sub	r16, r22
    10de:	17 0b       	sbc	r17, r23
    10e0:	62 89       	ldd	r22, Z+18	; 0x12
    10e2:	73 89       	ldd	r23, Z+19	; 0x13
    10e4:	c9 01       	movw	r24, r18
    10e6:	d0 d5       	rcall	.+2976   	; 0x1c88 <__divmodhi4>
    10e8:	06 1b       	sub	r16, r22
    10ea:	17 0b       	sbc	r17, r23
    10ec:	c0 0f       	add	r28, r16
    10ee:	d1 1f       	adc	r29, r17
    10f0:	2c 9f       	mul	r18, r28
    10f2:	c0 01       	movw	r24, r0
    10f4:	2d 9f       	mul	r18, r29
    10f6:	90 0d       	add	r25, r0
    10f8:	3c 9f       	mul	r19, r28
    10fa:	90 0d       	add	r25, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	99 23       	and	r25, r25
    1100:	0c f4       	brge	.+2      	; 0x1104 <compute_area_of_trapezoid+0x4c>
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	95 95       	asr	r25
    1106:	87 95       	ror	r24
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <fuzzification>:
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 91 f8 02 	lds	r16, 0x02F8
    111e:	10 91 f9 02 	lds	r17, 0x02F9
    1122:	01 15       	cp	r16, r1
    1124:	11 05       	cpc	r17, r1
    1126:	b9 f0       	breq	.+46     	; 0x1156 <fuzzification+0x44>
    1128:	f8 01       	movw	r30, r16
    112a:	c4 85       	ldd	r28, Z+12	; 0x0c
    112c:	d5 85       	ldd	r29, Z+13	; 0x0d
    112e:	20 97       	sbiw	r28, 0x00	; 0
    1130:	61 f0       	breq	.+24     	; 0x114a <fuzzification+0x38>
    1132:	20 97       	sbiw	r28, 0x00	; 0
    1134:	29 f0       	breq	.+10     	; 0x1140 <fuzzification+0x2e>
    1136:	f8 01       	movw	r30, r16
    1138:	62 85       	ldd	r22, Z+10	; 0x0a
    113a:	73 85       	ldd	r23, Z+11	; 0x0b
    113c:	ce 01       	movw	r24, r28
    113e:	86 df       	rcall	.-244    	; 0x104c <compute_degree_of_membership>
    1140:	0c 88       	ldd	r0, Y+20	; 0x14
    1142:	dd 89       	ldd	r29, Y+21	; 0x15
    1144:	c0 2d       	mov	r28, r0
    1146:	20 97       	sbiw	r28, 0x00	; 0
    1148:	a1 f7       	brne	.-24     	; 0x1132 <fuzzification+0x20>
    114a:	f8 01       	movw	r30, r16
    114c:	06 85       	ldd	r16, Z+14	; 0x0e
    114e:	17 85       	ldd	r17, Z+15	; 0x0f
    1150:	01 15       	cp	r16, r1
    1152:	11 05       	cpc	r17, r1
    1154:	49 f7       	brne	.-46     	; 0x1128 <fuzzification+0x16>
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <rule_evaluation>:
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	c0 91 fa 02 	lds	r28, 0x02FA
    116c:	d0 91 fb 02 	lds	r29, 0x02FB
    1170:	20 97       	sbiw	r28, 0x00	; 0
    1172:	b9 f1       	breq	.+110    	; 0x11e2 <rule_evaluation+0x82>
    1174:	00 e0       	ldi	r16, 0x00	; 0
    1176:	11 e0       	ldi	r17, 0x01	; 1
    1178:	e8 81       	ld	r30, Y
    117a:	f9 81       	ldd	r31, Y+1	; 0x01
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	81 f0       	breq	.+32     	; 0x11a0 <rule_evaluation+0x40>
    1180:	20 2f       	mov	r18, r16
    1182:	31 2f       	mov	r19, r17
    1184:	a0 81       	ld	r26, Z
    1186:	b1 81       	ldd	r27, Z+1	; 0x01
    1188:	8d 91       	ld	r24, X+
    118a:	9c 91       	ld	r25, X
    118c:	82 17       	cp	r24, r18
    118e:	93 07       	cpc	r25, r19
    1190:	0c f4       	brge	.+2      	; 0x1194 <rule_evaluation+0x34>
    1192:	9c 01       	movw	r18, r24
    1194:	02 80       	ldd	r0, Z+2	; 0x02
    1196:	f3 81       	ldd	r31, Z+3	; 0x03
    1198:	e0 2d       	mov	r30, r0
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	99 f7       	brne	.-26     	; 0x1184 <rule_evaluation+0x24>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <rule_evaluation+0x44>
    11a0:	20 2f       	mov	r18, r16
    11a2:	31 2f       	mov	r19, r17
    11a4:	ea 81       	ldd	r30, Y+2	; 0x02
    11a6:	fb 81       	ldd	r31, Y+3	; 0x03
    11a8:	30 97       	sbiw	r30, 0x00	; 0
    11aa:	b1 f0       	breq	.+44     	; 0x11d8 <rule_evaluation+0x78>
    11ac:	72 2f       	mov	r23, r18
    11ae:	63 2f       	mov	r22, r19
    11b0:	a0 81       	ld	r26, Z
    11b2:	b1 81       	ldd	r27, Z+1	; 0x01
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	11 97       	sbiw	r26, 0x01	; 1
    11ba:	57 2f       	mov	r21, r23
    11bc:	46 2f       	mov	r20, r22
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	14 f4       	brge	.+4      	; 0x11c8 <rule_evaluation+0x68>
    11c4:	58 2f       	mov	r21, r24
    11c6:	49 2f       	mov	r20, r25
    11c8:	5c 93       	st	X, r21
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	4c 93       	st	X, r20
    11ce:	02 80       	ldd	r0, Z+2	; 0x02
    11d0:	f3 81       	ldd	r31, Z+3	; 0x03
    11d2:	e0 2d       	mov	r30, r0
    11d4:	30 97       	sbiw	r30, 0x00	; 0
    11d6:	61 f7       	brne	.-40     	; 0x11b0 <rule_evaluation+0x50>
    11d8:	0c 80       	ldd	r0, Y+4	; 0x04
    11da:	dd 81       	ldd	r29, Y+5	; 0x05
    11dc:	c0 2d       	mov	r28, r0
    11de:	20 97       	sbiw	r28, 0x00	; 0
    11e0:	59 f6       	brne	.-106    	; 0x1178 <rule_evaluation+0x18>
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <defuzzification>:
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	00 d0       	rcall	.+0      	; 0x1212 <defuzzification+0x26>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <defuzzification+0x28>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <defuzzification+0x2a>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	80 91 f6 02 	lds	r24, 0x02F6
    121e:	90 91 f7 02 	lds	r25, 0x02F7
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	89 2b       	or	r24, r25
    1228:	09 f4       	brne	.+2      	; 0x122c <defuzzification+0x40>
    122a:	84 c0       	rjmp	.+264    	; 0x1334 <defuzzification+0x148>
    122c:	eb 81       	ldd	r30, Y+3	; 0x03
    122e:	fc 81       	ldd	r31, Y+4	; 0x04
    1230:	04 84       	ldd	r0, Z+12	; 0x0c
    1232:	f5 85       	ldd	r31, Z+13	; 0x0d
    1234:	e0 2d       	mov	r30, r0
    1236:	fe 83       	std	Y+6, r31	; 0x06
    1238:	ed 83       	std	Y+5, r30	; 0x05
    123a:	ef 2b       	or	r30, r31
    123c:	09 f4       	brne	.+2      	; 0x1240 <defuzzification+0x54>
    123e:	66 c0       	rjmp	.+204    	; 0x130c <defuzzification+0x120>
    1240:	51 2c       	mov	r5, r1
    1242:	61 2c       	mov	r6, r1
    1244:	71 2c       	mov	r7, r1
    1246:	41 2c       	mov	r4, r1
    1248:	31 2c       	mov	r3, r1
    124a:	21 2c       	mov	r2, r1
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	1a 82       	std	Y+2, r1	; 0x02
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	31 df       	rcall	.-414    	; 0x10b8 <compute_area_of_trapezoid>
    1256:	bc 01       	movw	r22, r24
    1258:	88 27       	eor	r24, r24
    125a:	77 fd       	sbrc	r23, 7
    125c:	80 95       	com	r24
    125e:	98 2f       	mov	r25, r24
    1260:	24 d4       	rcall	.+2120   	; 0x1aaa <__floatsisf>
    1262:	6b 01       	movw	r12, r22
    1264:	7c 01       	movw	r14, r24
    1266:	ed 81       	ldd	r30, Y+5	; 0x05
    1268:	fe 81       	ldd	r31, Y+6	; 0x06
    126a:	04 85       	ldd	r16, Z+12	; 0x0c
    126c:	15 85       	ldd	r17, Z+13	; 0x0d
    126e:	b8 01       	movw	r22, r16
    1270:	88 27       	eor	r24, r24
    1272:	77 fd       	sbrc	r23, 7
    1274:	80 95       	com	r24
    1276:	98 2f       	mov	r25, r24
    1278:	18 d4       	rcall	.+2096   	; 0x1aaa <__floatsisf>
    127a:	4b 01       	movw	r8, r22
    127c:	5c 01       	movw	r10, r24
    127e:	ed 81       	ldd	r30, Y+5	; 0x05
    1280:	fe 81       	ldd	r31, Y+6	; 0x06
    1282:	86 85       	ldd	r24, Z+14	; 0x0e
    1284:	97 85       	ldd	r25, Z+15	; 0x0f
    1286:	80 1b       	sub	r24, r16
    1288:	91 0b       	sbc	r25, r17
    128a:	bc 01       	movw	r22, r24
    128c:	12 f4       	brpl	.+4      	; 0x1292 <defuzzification+0xa6>
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	75 95       	asr	r23
    1294:	67 95       	ror	r22
    1296:	88 27       	eor	r24, r24
    1298:	77 fd       	sbrc	r23, 7
    129a:	80 95       	com	r24
    129c:	98 2f       	mov	r25, r24
    129e:	05 d4       	rcall	.+2058   	; 0x1aaa <__floatsisf>
    12a0:	a5 01       	movw	r20, r10
    12a2:	94 01       	movw	r18, r8
    12a4:	03 d3       	rcall	.+1542   	; 0x18ac <__addsf3>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	c7 01       	movw	r24, r14
    12ac:	b6 01       	movw	r22, r12
    12ae:	89 d4       	rcall	.+2322   	; 0x1bc2 <__mulsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	63 2d       	mov	r22, r3
    12b6:	72 2d       	mov	r23, r2
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	f7 d2       	rcall	.+1518   	; 0x18ac <__addsf3>
    12be:	36 2e       	mov	r3, r22
    12c0:	27 2e       	mov	r2, r23
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	a7 01       	movw	r20, r14
    12c8:	96 01       	movw	r18, r12
    12ca:	65 2d       	mov	r22, r5
    12cc:	76 2d       	mov	r23, r6
    12ce:	87 2d       	mov	r24, r7
    12d0:	94 2d       	mov	r25, r4
    12d2:	ec d2       	rcall	.+1496   	; 0x18ac <__addsf3>
    12d4:	56 2e       	mov	r5, r22
    12d6:	67 2e       	mov	r6, r23
    12d8:	78 2e       	mov	r7, r24
    12da:	49 2e       	mov	r4, r25
    12dc:	ed 81       	ldd	r30, Y+5	; 0x05
    12de:	fe 81       	ldd	r31, Y+6	; 0x06
    12e0:	04 88       	ldd	r0, Z+20	; 0x14
    12e2:	f5 89       	ldd	r31, Z+21	; 0x15
    12e4:	e0 2d       	mov	r30, r0
    12e6:	fe 83       	std	Y+6, r31	; 0x06
    12e8:	ed 83       	std	Y+5, r30	; 0x05
    12ea:	ef 2b       	or	r30, r31
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <defuzzification+0x104>
    12ee:	b0 cf       	rjmp	.-160    	; 0x1250 <defuzzification+0x64>
    12f0:	26 2f       	mov	r18, r22
    12f2:	37 2f       	mov	r19, r23
    12f4:	48 2f       	mov	r20, r24
    12f6:	59 2f       	mov	r21, r25
    12f8:	63 2d       	mov	r22, r3
    12fa:	72 2d       	mov	r23, r2
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	39 d3       	rcall	.+1650   	; 0x1974 <__divsf3>
    1302:	26 2f       	mov	r18, r22
    1304:	37 2f       	mov	r19, r23
    1306:	48 2f       	mov	r20, r24
    1308:	59 2f       	mov	r21, r25
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <defuzzification+0x128>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	62 2f       	mov	r22, r18
    1316:	73 2f       	mov	r23, r19
    1318:	84 2f       	mov	r24, r20
    131a:	95 2f       	mov	r25, r21
    131c:	93 d3       	rcall	.+1830   	; 0x1a44 <__fixsfsi>
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	73 87       	std	Z+11, r23	; 0x0b
    1324:	62 87       	std	Z+10, r22	; 0x0a
    1326:	86 85       	ldd	r24, Z+14	; 0x0e
    1328:	97 85       	ldd	r25, Z+15	; 0x0f
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	89 2b       	or	r24, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <defuzzification+0x148>
    1332:	7c cf       	rjmp	.-264    	; 0x122c <defuzzification+0x40>
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	5f 90       	pop	r5
    135e:	4f 90       	pop	r4
    1360:	3f 90       	pop	r3
    1362:	2f 90       	pop	r2
    1364:	08 95       	ret

00001366 <MATLAB_MF>:
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	6a 01       	movw	r12, r20
    137e:	59 01       	movw	r10, r18
    1380:	aa d4       	rcall	.+2388   	; 0x1cd6 <strcpy>
    1382:	1b 86       	std	Y+11, r1	; 0x0b
    1384:	1a 86       	std	Y+10, r1	; 0x0a
    1386:	dd 86       	std	Y+13, r13	; 0x0d
    1388:	cc 86       	std	Y+12, r12	; 0x0c
    138a:	ff 86       	std	Y+15, r15	; 0x0f
    138c:	ee 86       	std	Y+14, r14	; 0x0e
    138e:	b5 01       	movw	r22, r10
    1390:	6c 19       	sub	r22, r12
    1392:	7d 09       	sbc	r23, r13
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	31 e0       	ldi	r19, 0x01	; 1
    1398:	c9 01       	movw	r24, r18
    139a:	76 d4       	rcall	.+2284   	; 0x1c88 <__divmodhi4>
    139c:	79 8b       	std	Y+17, r23	; 0x11
    139e:	68 8b       	std	Y+16, r22	; 0x10
    13a0:	b7 01       	movw	r22, r14
    13a2:	60 1b       	sub	r22, r16
    13a4:	71 0b       	sbc	r23, r17
    13a6:	c9 01       	movw	r24, r18
    13a8:	6f d4       	rcall	.+2270   	; 0x1c88 <__divmodhi4>
    13aa:	7b 8b       	std	Y+19, r23	; 0x13
    13ac:	6a 8b       	std	Y+18, r22	; 0x12
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	08 95       	ret

000013c4 <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile unsigned int counter_UART1_reciever = 0;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	0b b6       	in	r0, 0x3b	; 59
    13d0:	0f 92       	push	r0
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
    13da:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	29 f4       	brne	.+10     	; 0x13ec <__vector_28+0x28>
		counter_UART1_reciever = 0;
    13e2:	10 92 db 01 	sts	0x01DB, r1
    13e6:	10 92 da 01 	sts	0x01DA, r1
    13ea:	10 c0       	rjmp	.+32     	; 0x140c <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
    13ec:	e0 91 da 01 	lds	r30, 0x01DA
    13f0:	f0 91 db 01 	lds	r31, 0x01DB
    13f4:	e4 50       	subi	r30, 0x04	; 4
    13f6:	fd 4f       	sbci	r31, 0xFD	; 253
    13f8:	80 83       	st	Z, r24
		counter_UART1_reciever++;
    13fa:	80 91 da 01 	lds	r24, 0x01DA
    13fe:	90 91 db 01 	lds	r25, 0x01DB
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	90 93 db 01 	sts	0x01DB, r25
    1408:	80 93 da 01 	sts	0x01DA, r24
	
	//Enabling interrupts
	//sei();

	
}
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
    1422:	80 d0       	rcall	.+256    	; 0x1524 <pwmInit>
	//spi_slave_init();
	setESC(NEUTRAL);
    1424:	8d ec       	ldi	r24, 0xCD	; 205
    1426:	9a e0       	ldi	r25, 0x0A	; 10
    1428:	8c d0       	rcall	.+280    	; 0x1542 <setESC>
	setServo(STRAIGHT);
    142a:	84 e6       	ldi	r24, 0x64	; 100
    142c:	9a e0       	ldi	r25, 0x0A	; 10
    142e:	a4 c0       	rjmp	.+328    	; 0x1578 <setServo>
    1430:	08 95       	ret

00001432 <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
    1432:	ec ec       	ldi	r30, 0xCC	; 204
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	11 82       	std	Z+1, r1	; 0x01
    1438:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
    143a:	20 e9       	ldi	r18, 0x90	; 144
    143c:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
    1440:	2e e0       	ldi	r18, 0x0E	; 14
    1442:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
	counter_UART1_reciever = 0;
    144a:	10 92 db 01 	sts	0x01DB, r1
    144e:	10 92 da 01 	sts	0x01DA, r1
    1452:	08 95       	ret

00001454 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
    1454:	fc 01       	movw	r30, r24

	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
    1456:	a9 ec       	ldi	r26, 0xC9	; 201
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	8c 91       	ld	r24, X
    145c:	8f 77       	andi	r24, 0x7F	; 127
    145e:	8c 93       	st	X, r24
	
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[0];
    1460:	80 91 fc 02 	lds	r24, 0x02FC
    1464:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[1];
    1466:	80 91 fd 02 	lds	r24, 0x02FD
    146a:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[2];
    146c:	80 91 fe 02 	lds	r24, 0x02FE
    1470:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[3];
    1472:	80 91 ff 02 	lds	r24, 0x02FF
    1476:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[4];
    1478:	80 91 00 03 	lds	r24, 0x0300
    147c:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[5];
    147e:	80 91 01 03 	lds	r24, 0x0301
    1482:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
    1484:	10 92 db 01 	sts	0x01DB, r1
    1488:	10 92 da 01 	sts	0x01DA, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
    148c:	8c 91       	ld	r24, X
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	8c 93       	st	X, r24
    1492:	08 95       	ret

00001494 <main>:




int main (void)
{
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	2b 97       	sbiw	r28, 0x0b	; 11
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
	
	
	// FOR TESTING
	//	FLC_obstacle(2800, 150);

	carInit();
    14a8:	bc df       	rcall	.-136    	; 0x1422 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14aa:	2f ef       	ldi	r18, 0xFF	; 255
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	90 ee       	ldi	r25, 0xE0	; 224
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	80 40       	sbci	r24, 0x00	; 0
    14b4:	90 40       	sbci	r25, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <main+0x1c>
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <main+0x26>
    14ba:	00 00       	nop
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
    14bc:	87 e0       	ldi	r24, 0x07	; 7
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	b8 df       	rcall	.-144    	; 0x1432 <USART1_init>
	//End of init for UART
	

	//Setting for Testing
	DDRA = 0xFF;
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	81 b9       	out	0x01, r24	; 1
	//End of test setting
	sei();
    14c6:	78 94       	sei
			int v = (int) sensor_info.angular_diff;
			
			cli();
			

			FLC_obstacle(OCR1A, sF);
    14c8:	08 e8       	ldi	r16, 0x88	; 136
    14ca:	10 e0       	ldi	r17, 0x00	; 0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    14cc:	0f 2e       	mov	r0, r31
    14ce:	fa e8       	ldi	r31, 0x8A	; 138
    14d0:	af 2e       	mov	r10, r31
    14d2:	b1 2c       	mov	r11, r1
    14d4:	f0 2d       	mov	r31, r0
	//End of test setting
	sei();
	

	while (1) {
		if (counter_UART1_reciever > 5) {
    14d6:	80 91 da 01 	lds	r24, 0x01DA
    14da:	90 91 db 01 	lds	r25, 0x01DB
    14de:	06 97       	sbiw	r24, 0x06	; 6
    14e0:	d0 f3       	brcs	.-12     	; 0x14d6 <main+0x42>
			

			//Reading Information
			read_sensor_info(&control_mode, sens_info_ptr);
    14e2:	be 01       	movw	r22, r28
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	ce 01       	movw	r24, r28
    14ea:	0b 96       	adiw	r24, 0x0b	; 11
    14ec:	03 d1       	rcall	.+518    	; 0x16f4 <read_sensor_info>
			Sens_info_read(sens_info_ptr);
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	b0 df       	rcall	.-160    	; 0x1454 <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
    14f4:	6b 81       	ldd	r22, Y+3	; 0x03
    14f6:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
    14f8:	e9 80       	ldd	r14, Y+1	; 0x01
    14fa:	f1 2c       	mov	r15, r1
			int v = (int) sensor_info.angular_diff;
    14fc:	ca 80       	ldd	r12, Y+2	; 0x02
    14fe:	d1 2c       	mov	r13, r1
			
			cli();
    1500:	f8 94       	cli
			

			FLC_obstacle(OCR1A, sF);
    1502:	f8 01       	movw	r30, r16
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	56 d9       	rcall	.-3412   	; 0x7b6 <FLC_obstacle>
			FLC_steering(c,v);
    150a:	b6 01       	movw	r22, r12
    150c:	c7 01       	movw	r24, r14
    150e:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>

			
			sei();
    1512:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
    1514:	f8 01       	movw	r30, r16
    1516:	80 81       	ld	r24, Z
    1518:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
    151a:	f5 01       	movw	r30, r10
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
			//Big endian
			//spi_send_byte((unsigned) (char) (esc_value_to_send<<8));
			//spi_send_byte((unsigned) (char) (esc_value_to_send));
			//spi_send_byte((unsigned) (char) (steering_value_to_send<<8));
			//spi_send_byte((unsigned) (char) (steering_value_to_send));
			 PORTA = 0x0;
    1520:	12 b8       	out	0x02, r1	; 2
    1522:	d9 cf       	rjmp	.-78     	; 0x14d6 <main+0x42>

00001524 <pwmInit>:
    1524:	80 e3       	ldi	r24, 0x30	; 48
    1526:	8a b9       	out	0x0a, r24	; 10
    1528:	82 ea       	ldi	r24, 0xA2	; 162
    152a:	80 93 80 00 	sts	0x0080, r24
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	9f e8       	ldi	r25, 0x8F	; 143
    1532:	90 93 87 00 	sts	0x0087, r25
    1536:	80 93 86 00 	sts	0x0086, r24
    153a:	8a e1       	ldi	r24, 0x1A	; 26
    153c:	80 93 81 00 	sts	0x0081, r24
    1540:	08 95       	ret

00001542 <setESC>:
    1542:	80 36       	cpi	r24, 0x60	; 96
    1544:	2a e0       	ldi	r18, 0x0A	; 10
    1546:	92 07       	cpc	r25, r18
    1548:	3c f4       	brge	.+14     	; 0x1558 <setESC+0x16>
    154a:	8f e5       	ldi	r24, 0x5F	; 95
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	90 93 89 00 	sts	0x0089, r25
    1552:	80 93 88 00 	sts	0x0088, r24
    1556:	08 95       	ret
    1558:	8b 33       	cpi	r24, 0x3B	; 59
    155a:	2b e0       	ldi	r18, 0x0B	; 11
    155c:	92 07       	cpc	r25, r18
    155e:	3c f0       	brlt	.+14     	; 0x156e <setESC+0x2c>
    1560:	8b e3       	ldi	r24, 0x3B	; 59
    1562:	9b e0       	ldi	r25, 0x0B	; 11
    1564:	90 93 89 00 	sts	0x0089, r25
    1568:	80 93 88 00 	sts	0x0088, r24
    156c:	08 95       	ret
    156e:	90 93 89 00 	sts	0x0089, r25
    1572:	80 93 88 00 	sts	0x0088, r24
    1576:	08 95       	ret

00001578 <setServo>:
    1578:	80 34       	cpi	r24, 0x40	; 64
    157a:	2c e0       	ldi	r18, 0x0C	; 12
    157c:	92 07       	cpc	r25, r18
    157e:	3c f4       	brge	.+14     	; 0x158e <setServo+0x16>
    1580:	8f e3       	ldi	r24, 0x3F	; 63
    1582:	9c e0       	ldi	r25, 0x0C	; 12
    1584:	90 93 8b 00 	sts	0x008B, r25
    1588:	80 93 8a 00 	sts	0x008A, r24
    158c:	08 95       	ret
    158e:	86 3e       	cpi	r24, 0xE6	; 230
    1590:	27 e0       	ldi	r18, 0x07	; 7
    1592:	92 07       	cpc	r25, r18
    1594:	3c f0       	brlt	.+14     	; 0x15a4 <setServo+0x2c>
    1596:	86 ee       	ldi	r24, 0xE6	; 230
    1598:	97 e0       	ldi	r25, 0x07	; 7
    159a:	90 93 8b 00 	sts	0x008B, r25
    159e:	80 93 8a 00 	sts	0x008A, r24
    15a2:	08 95       	ret
    15a4:	90 93 8b 00 	sts	0x008B, r25
    15a8:	80 93 8a 00 	sts	0x008A, r24
    15ac:	08 95       	ret

000015ae <__vector_19>:
		tx_spi.i_first = 0;
	}
			
			

	sei();
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	0b b6       	in	r0, 0x3b	; 59
    15ba:	0f 92       	push	r0
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    15cc:	10 98       	cbi	0x02, 0	; 2
    15ce:	2e b5       	in	r18, 0x2e	; 46
    15d0:	2d 3f       	cpi	r18, 0xFD	; 253
    15d2:	a9 f0       	breq	.+42     	; 0x15fe <__vector_19+0x50>
    15d4:	e6 e6       	ldi	r30, 0x66	; 102
    15d6:	f2 e0       	ldi	r31, 0x02	; 2
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	dc 01       	movw	r26, r24
    15de:	ac 5d       	subi	r26, 0xDC	; 220
    15e0:	bd 4f       	sbci	r27, 0xFD	; 253
    15e2:	2c 93       	st	X, r18
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	e8 e6       	ldi	r30, 0x68	; 104
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	80 83       	st	Z, r24
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 dc 01 	sts	0x01DC, r24
    15fe:	80 91 66 02 	lds	r24, 0x0266
    1602:	90 91 67 02 	lds	r25, 0x0267
    1606:	80 34       	cpi	r24, 0x40	; 64
    1608:	91 05       	cpc	r25, r1
    160a:	21 f4       	brne	.+8      	; 0x1614 <__vector_19+0x66>
    160c:	10 92 67 02 	sts	0x0267, r1
    1610:	10 92 66 02 	sts	0x0266, r1
    1614:	80 91 22 02 	lds	r24, 0x0222
    1618:	90 91 23 02 	lds	r25, 0x0223
    161c:	89 2b       	or	r24, r25
    161e:	01 f1       	breq	.+64     	; 0x1660 <__vector_19+0xb2>
    1620:	e0 91 1e 02 	lds	r30, 0x021E
    1624:	f0 91 1f 02 	lds	r31, 0x021F
    1628:	e2 52       	subi	r30, 0x22	; 34
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	80 81       	ld	r24, Z
    162e:	8e bd       	out	0x2e, r24	; 46
    1630:	ee e1       	ldi	r30, 0x1E	; 30
    1632:	f2 e0       	ldi	r31, 0x02	; 2
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	e2 e2       	ldi	r30, 0x22	; 34
    1640:	f2 e0       	ldi	r31, 0x02	; 2
    1642:	20 81       	ld	r18, Z
    1644:	31 81       	ldd	r19, Z+1	; 0x01
    1646:	21 50       	subi	r18, 0x01	; 1
    1648:	31 09       	sbc	r19, r1
    164a:	31 83       	std	Z+1, r19	; 0x01
    164c:	20 83       	st	Z, r18
    164e:	10 9a       	sbi	0x02, 0	; 2
    1650:	80 34       	cpi	r24, 0x40	; 64
    1652:	91 05       	cpc	r25, r1
    1654:	49 f4       	brne	.+18     	; 0x1668 <__vector_19+0xba>
    1656:	10 92 1f 02 	sts	0x021F, r1
    165a:	10 92 1e 02 	sts	0x021E, r1
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__vector_19+0xba>
    1660:	8d ef       	ldi	r24, 0xFD	; 253
    1662:	8e bd       	out	0x2e, r24	; 46
    1664:	10 92 dd 01 	sts	0x01DD, r1
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <spi_get_byte>:
    1686:	f8 94       	cli
    1688:	20 91 68 02 	lds	r18, 0x0268
    168c:	30 91 69 02 	lds	r19, 0x0269
    1690:	21 15       	cp	r18, r1
    1692:	31 05       	cpc	r19, r1
    1694:	a9 f0       	breq	.+42     	; 0x16c0 <spi_get_byte+0x3a>
    1696:	e4 e6       	ldi	r30, 0x64	; 100
    1698:	f2 e0       	ldi	r31, 0x02	; 2
    169a:	40 81       	ld	r20, Z
    169c:	51 81       	ldd	r21, Z+1	; 0x01
    169e:	da 01       	movw	r26, r20
    16a0:	ac 5d       	subi	r26, 0xDC	; 220
    16a2:	bd 4f       	sbci	r27, 0xFD	; 253
    16a4:	8c 91       	ld	r24, X
    16a6:	4f 5f       	subi	r20, 0xFF	; 255
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	51 83       	std	Z+1, r21	; 0x01
    16ac:	40 83       	st	Z, r20
    16ae:	21 50       	subi	r18, 0x01	; 1
    16b0:	31 09       	sbc	r19, r1
    16b2:	30 93 69 02 	sts	0x0269, r19
    16b6:	20 93 68 02 	sts	0x0268, r18
    16ba:	23 2b       	or	r18, r19
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <spi_get_byte+0x40>
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <spi_get_byte+0x3c>
    16c0:	8e ef       	ldi	r24, 0xFE	; 254
    16c2:	10 92 dc 01 	sts	0x01DC, r1
    16c6:	20 91 64 02 	lds	r18, 0x0264
    16ca:	30 91 65 02 	lds	r19, 0x0265
    16ce:	20 34       	cpi	r18, 0x40	; 64
    16d0:	31 05       	cpc	r19, r1
    16d2:	21 f4       	brne	.+8      	; 0x16dc <spi_get_byte+0x56>
    16d4:	10 92 65 02 	sts	0x0265, r1
    16d8:	10 92 64 02 	sts	0x0264, r1
    16dc:	78 94       	sei
    16de:	08 95       	ret

000016e0 <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	20 91 68 02 	lds	r18, 0x0268
    16e6:	30 91 69 02 	lds	r19, 0x0269
    16ea:	24 30       	cpi	r18, 0x04	; 4
    16ec:	31 05       	cpc	r19, r1
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <is_package_recieved+0x12>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
    16f2:	08 95       	ret

000016f4 <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	8c 01       	movw	r16, r24
    16fe:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
    1700:	20 91 68 02 	lds	r18, 0x0268
    1704:	30 91 69 02 	lds	r19, 0x0269
    1708:	23 2b       	or	r18, r19
    170a:	e9 f0       	breq	.+58     	; 0x1746 <read_sensor_info+0x52>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
    170c:	e0 91 64 02 	lds	r30, 0x0264
    1710:	f0 91 65 02 	lds	r31, 0x0265
    1714:	ec 5d       	subi	r30, 0xDC	; 220
    1716:	fd 4f       	sbci	r31, 0xFD	; 253
    1718:	80 81       	ld	r24, Z
    171a:	8f 3f       	cpi	r24, 0xFF	; 255
    171c:	61 f4       	brne	.+24     	; 0x1736 <read_sensor_info+0x42>
    171e:	e0 df       	rcall	.-64     	; 0x16e0 <is_package_recieved>
    1720:	88 23       	and	r24, r24
    1722:	91 f0       	breq	.+36     	; 0x1748 <read_sensor_info+0x54>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
    1724:	b0 df       	rcall	.-160    	; 0x1686 <spi_get_byte>
		
		
		//Read all info and write it to sensor struct

		//*control_mode_ptr = spi_get_byte();
		sens_info_ptr->dist_right_line = spi_get_byte();
    1726:	af df       	rcall	.-162    	; 0x1686 <spi_get_byte>
    1728:	88 83       	st	Y, r24
		sens_info_ptr->angular_diff = spi_get_byte();
    172a:	ad df       	rcall	.-166    	; 0x1686 <spi_get_byte>
    172c:	89 83       	std	Y+1, r24	; 0x01
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
    172e:	ab df       	rcall	.-170    	; 0x1686 <spi_get_byte>
    1730:	8a 83       	std	Y+2, r24	; 0x02
		//sens_info_ptr->car_speed = spi_get_byte();
		//sens_info_ptr->dist_to_stop_line = spi_get_byte();
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <read_sensor_info+0x54>
	} else if (is_package_recieved()){
    1736:	d4 df       	rcall	.-88     	; 0x16e0 <is_package_recieved>
    1738:	88 23       	and	r24, r24
    173a:	31 f0       	breq	.+12     	; 0x1748 <read_sensor_info+0x54>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
    173c:	a4 df       	rcall	.-184    	; 0x1686 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
    173e:	be 01       	movw	r22, r28
    1740:	c8 01       	movw	r24, r16
    1742:	d8 df       	rcall	.-80     	; 0x16f4 <read_sensor_info>
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <read_sensor_info+0x54>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
    1746:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <__vector_20>:
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	0b b6       	in	r0, 0x3b	; 59
    175e:	0f 92       	push	r0
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
    1772:	80 91 f4 02 	lds	r24, 0x02F4
    1776:	90 91 f5 02 	lds	r25, 0x02F5
    177a:	80 34       	cpi	r24, 0x40	; 64
    177c:	91 05       	cpc	r25, r1
    177e:	31 f4       	brne	.+12     	; 0x178c <__vector_20+0x3a>
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	80 93 20 03 	sts	0x0320, r24
    1786:	80 91 c6 00 	lds	r24, 0x00C6
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <__vector_20+0x66>
    178c:	80 34       	cpi	r24, 0x40	; 64
    178e:	91 05       	cpc	r25, r1
    1790:	e8 f4       	brcc	.+58     	; 0x17cc <__vector_20+0x7a>
    1792:	e2 ef       	ldi	r30, 0xF2	; 242
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	20 81       	ld	r18, Z
    1798:	31 81       	ldd	r19, Z+1	; 0x01
    179a:	40 91 c6 00 	lds	r20, 0x00C6
    179e:	d9 01       	movw	r26, r18
    17a0:	a0 55       	subi	r26, 0x50	; 80
    17a2:	bd 4f       	sbci	r27, 0xFD	; 253
    17a4:	4c 93       	st	X, r20
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	90 93 f5 02 	sts	0x02F5, r25
    17b4:	80 93 f4 02 	sts	0x02F4, r24
    17b8:	80 91 f4 02 	lds	r24, 0x02F4
    17bc:	90 91 f5 02 	lds	r25, 0x02F5
    17c0:	80 34       	cpi	r24, 0x40	; 64
    17c2:	91 05       	cpc	r25, r1
    17c4:	19 f4       	brne	.+6      	; 0x17cc <__vector_20+0x7a>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 1e 03 	sts	0x031E, r24
    17cc:	80 91 f2 02 	lds	r24, 0x02F2
    17d0:	90 91 f3 02 	lds	r25, 0x02F3
    17d4:	80 34       	cpi	r24, 0x40	; 64
    17d6:	91 05       	cpc	r25, r1
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <__vector_20+0x90>
    17da:	10 92 f3 02 	sts	0x02F3, r1
    17de:	10 92 f2 02 	sts	0x02F2, r1
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 1d 03 	sts	0x031D, r24
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0b be       	out	0x3b, r0	; 59
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	0f 90       	pop	r0
    1804:	1f 90       	pop	r1
    1806:	18 95       	reti

00001808 <__vector_22>:
    1808:	1f 92       	push	r1
    180a:	0f 92       	push	r0
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	0f 92       	push	r0
    1810:	11 24       	eor	r1, r1
    1812:	0b b6       	in	r0, 0x3b	; 59
    1814:	0f 92       	push	r0
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	80 91 ae 02 	lds	r24, 0x02AE
    1822:	90 91 af 02 	lds	r25, 0x02AF
    1826:	80 34       	cpi	r24, 0x40	; 64
    1828:	91 05       	cpc	r25, r1
    182a:	19 f4       	brne	.+6      	; 0x1832 <__vector_22+0x2a>
    182c:	10 92 1c 03 	sts	0x031C, r1
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <__vector_22+0x2e>
    1832:	89 2b       	or	r24, r25
    1834:	b9 f0       	breq	.+46     	; 0x1864 <__vector_22+0x5c>
    1836:	e0 91 aa 02 	lds	r30, 0x02AA
    183a:	f0 91 ab 02 	lds	r31, 0x02AB
    183e:	e6 59       	subi	r30, 0x96	; 150
    1840:	fd 4f       	sbci	r31, 0xFD	; 253
    1842:	80 81       	ld	r24, Z
    1844:	80 93 c6 00 	sts	0x00C6, r24
    1848:	ea ea       	ldi	r30, 0xAA	; 170
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	ee ea       	ldi	r30, 0xAE	; 174
    1858:	f2 e0       	ldi	r31, 0x02	; 2
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	80 91 aa 02 	lds	r24, 0x02AA
    1868:	90 91 ab 02 	lds	r25, 0x02AB
    186c:	80 34       	cpi	r24, 0x40	; 64
    186e:	91 05       	cpc	r25, r1
    1870:	21 f4       	brne	.+8      	; 0x187a <__vector_22+0x72>
    1872:	10 92 ab 02 	sts	0x02AB, r1
    1876:	10 92 aa 02 	sts	0x02AA, r1
    187a:	80 91 ae 02 	lds	r24, 0x02AE
    187e:	90 91 af 02 	lds	r25, 0x02AF
    1882:	89 2b       	or	r24, r25
    1884:	39 f4       	brne	.+14     	; 0x1894 <__vector_22+0x8c>
    1886:	10 92 1f 03 	sts	0x031F, r1
    188a:	e1 ec       	ldi	r30, 0xC1	; 193
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 7b       	andi	r24, 0xBF	; 191
    1892:	80 83       	st	Z, r24
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	0f 90       	pop	r0
    189e:	0b be       	out	0x3b, r0	; 59
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti

000018aa <__subsf3>:
    18aa:	50 58       	subi	r21, 0x80	; 128

000018ac <__addsf3>:
    18ac:	bb 27       	eor	r27, r27
    18ae:	aa 27       	eor	r26, r26
    18b0:	0e d0       	rcall	.+28     	; 0x18ce <__addsf3x>
    18b2:	4d c1       	rjmp	.+666    	; 0x1b4e <__fp_round>
    18b4:	3e d1       	rcall	.+636    	; 0x1b32 <__fp_pscA>
    18b6:	30 f0       	brcs	.+12     	; 0x18c4 <__addsf3+0x18>
    18b8:	43 d1       	rcall	.+646    	; 0x1b40 <__fp_pscB>
    18ba:	20 f0       	brcs	.+8      	; 0x18c4 <__addsf3+0x18>
    18bc:	31 f4       	brne	.+12     	; 0x18ca <__addsf3+0x1e>
    18be:	9f 3f       	cpi	r25, 0xFF	; 255
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <__addsf3+0x1a>
    18c2:	1e f4       	brtc	.+6      	; 0x18ca <__addsf3+0x1e>
    18c4:	33 c1       	rjmp	.+614    	; 0x1b2c <__fp_nan>
    18c6:	0e f4       	brtc	.+2      	; 0x18ca <__addsf3+0x1e>
    18c8:	e0 95       	com	r30
    18ca:	e7 fb       	bst	r30, 7
    18cc:	29 c1       	rjmp	.+594    	; 0x1b20 <__fp_inf>

000018ce <__addsf3x>:
    18ce:	e9 2f       	mov	r30, r25
    18d0:	4f d1       	rcall	.+670    	; 0x1b70 <__fp_split3>
    18d2:	80 f3       	brcs	.-32     	; 0x18b4 <__addsf3+0x8>
    18d4:	ba 17       	cp	r27, r26
    18d6:	62 07       	cpc	r22, r18
    18d8:	73 07       	cpc	r23, r19
    18da:	84 07       	cpc	r24, r20
    18dc:	95 07       	cpc	r25, r21
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <__addsf3x+0x18>
    18e0:	71 f4       	brne	.+28     	; 0x18fe <__addsf3x+0x30>
    18e2:	9e f5       	brtc	.+102    	; 0x194a <__addsf3x+0x7c>
    18e4:	67 c1       	rjmp	.+718    	; 0x1bb4 <__fp_zero>
    18e6:	0e f4       	brtc	.+2      	; 0x18ea <__addsf3x+0x1c>
    18e8:	e0 95       	com	r30
    18ea:	0b 2e       	mov	r0, r27
    18ec:	ba 2f       	mov	r27, r26
    18ee:	a0 2d       	mov	r26, r0
    18f0:	0b 01       	movw	r0, r22
    18f2:	b9 01       	movw	r22, r18
    18f4:	90 01       	movw	r18, r0
    18f6:	0c 01       	movw	r0, r24
    18f8:	ca 01       	movw	r24, r20
    18fa:	a0 01       	movw	r20, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	ff 27       	eor	r31, r31
    1900:	59 1b       	sub	r21, r25
    1902:	99 f0       	breq	.+38     	; 0x192a <__addsf3x+0x5c>
    1904:	59 3f       	cpi	r21, 0xF9	; 249
    1906:	50 f4       	brcc	.+20     	; 0x191c <__addsf3x+0x4e>
    1908:	50 3e       	cpi	r21, 0xE0	; 224
    190a:	68 f1       	brcs	.+90     	; 0x1966 <__addsf3x+0x98>
    190c:	1a 16       	cp	r1, r26
    190e:	f0 40       	sbci	r31, 0x00	; 0
    1910:	a2 2f       	mov	r26, r18
    1912:	23 2f       	mov	r18, r19
    1914:	34 2f       	mov	r19, r20
    1916:	44 27       	eor	r20, r20
    1918:	58 5f       	subi	r21, 0xF8	; 248
    191a:	f3 cf       	rjmp	.-26     	; 0x1902 <__addsf3x+0x34>
    191c:	46 95       	lsr	r20
    191e:	37 95       	ror	r19
    1920:	27 95       	ror	r18
    1922:	a7 95       	ror	r26
    1924:	f0 40       	sbci	r31, 0x00	; 0
    1926:	53 95       	inc	r21
    1928:	c9 f7       	brne	.-14     	; 0x191c <__addsf3x+0x4e>
    192a:	7e f4       	brtc	.+30     	; 0x194a <__addsf3x+0x7c>
    192c:	1f 16       	cp	r1, r31
    192e:	ba 0b       	sbc	r27, r26
    1930:	62 0b       	sbc	r22, r18
    1932:	73 0b       	sbc	r23, r19
    1934:	84 0b       	sbc	r24, r20
    1936:	ba f0       	brmi	.+46     	; 0x1966 <__addsf3x+0x98>
    1938:	91 50       	subi	r25, 0x01	; 1
    193a:	a1 f0       	breq	.+40     	; 0x1964 <__addsf3x+0x96>
    193c:	ff 0f       	add	r31, r31
    193e:	bb 1f       	adc	r27, r27
    1940:	66 1f       	adc	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	c2 f7       	brpl	.-16     	; 0x1938 <__addsf3x+0x6a>
    1948:	0e c0       	rjmp	.+28     	; 0x1966 <__addsf3x+0x98>
    194a:	ba 0f       	add	r27, r26
    194c:	62 1f       	adc	r22, r18
    194e:	73 1f       	adc	r23, r19
    1950:	84 1f       	adc	r24, r20
    1952:	48 f4       	brcc	.+18     	; 0x1966 <__addsf3x+0x98>
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	9e 3f       	cpi	r25, 0xFE	; 254
    1960:	08 f0       	brcs	.+2      	; 0x1964 <__addsf3x+0x96>
    1962:	b3 cf       	rjmp	.-154    	; 0x18ca <__addsf3+0x1e>
    1964:	93 95       	inc	r25
    1966:	88 0f       	add	r24, r24
    1968:	08 f0       	brcs	.+2      	; 0x196c <__addsf3x+0x9e>
    196a:	99 27       	eor	r25, r25
    196c:	ee 0f       	add	r30, r30
    196e:	97 95       	ror	r25
    1970:	87 95       	ror	r24
    1972:	08 95       	ret

00001974 <__divsf3>:
    1974:	0c d0       	rcall	.+24     	; 0x198e <__divsf3x>
    1976:	eb c0       	rjmp	.+470    	; 0x1b4e <__fp_round>
    1978:	e3 d0       	rcall	.+454    	; 0x1b40 <__fp_pscB>
    197a:	40 f0       	brcs	.+16     	; 0x198c <__divsf3+0x18>
    197c:	da d0       	rcall	.+436    	; 0x1b32 <__fp_pscA>
    197e:	30 f0       	brcs	.+12     	; 0x198c <__divsf3+0x18>
    1980:	21 f4       	brne	.+8      	; 0x198a <__divsf3+0x16>
    1982:	5f 3f       	cpi	r21, 0xFF	; 255
    1984:	19 f0       	breq	.+6      	; 0x198c <__divsf3+0x18>
    1986:	cc c0       	rjmp	.+408    	; 0x1b20 <__fp_inf>
    1988:	51 11       	cpse	r21, r1
    198a:	15 c1       	rjmp	.+554    	; 0x1bb6 <__fp_szero>
    198c:	cf c0       	rjmp	.+414    	; 0x1b2c <__fp_nan>

0000198e <__divsf3x>:
    198e:	f0 d0       	rcall	.+480    	; 0x1b70 <__fp_split3>
    1990:	98 f3       	brcs	.-26     	; 0x1978 <__divsf3+0x4>

00001992 <__divsf3_pse>:
    1992:	99 23       	and	r25, r25
    1994:	c9 f3       	breq	.-14     	; 0x1988 <__divsf3+0x14>
    1996:	55 23       	and	r21, r21
    1998:	b1 f3       	breq	.-20     	; 0x1986 <__divsf3+0x12>
    199a:	95 1b       	sub	r25, r21
    199c:	55 0b       	sbc	r21, r21
    199e:	bb 27       	eor	r27, r27
    19a0:	aa 27       	eor	r26, r26
    19a2:	62 17       	cp	r22, r18
    19a4:	73 07       	cpc	r23, r19
    19a6:	84 07       	cpc	r24, r20
    19a8:	38 f0       	brcs	.+14     	; 0x19b8 <__divsf3_pse+0x26>
    19aa:	9f 5f       	subi	r25, 0xFF	; 255
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	44 1f       	adc	r20, r20
    19b4:	aa 1f       	adc	r26, r26
    19b6:	a9 f3       	breq	.-22     	; 0x19a2 <__divsf3_pse+0x10>
    19b8:	33 d0       	rcall	.+102    	; 0x1a20 <__divsf3_pse+0x8e>
    19ba:	0e 2e       	mov	r0, r30
    19bc:	3a f0       	brmi	.+14     	; 0x19cc <__divsf3_pse+0x3a>
    19be:	e0 e8       	ldi	r30, 0x80	; 128
    19c0:	30 d0       	rcall	.+96     	; 0x1a22 <__divsf3_pse+0x90>
    19c2:	91 50       	subi	r25, 0x01	; 1
    19c4:	50 40       	sbci	r21, 0x00	; 0
    19c6:	e6 95       	lsr	r30
    19c8:	00 1c       	adc	r0, r0
    19ca:	ca f7       	brpl	.-14     	; 0x19be <__divsf3_pse+0x2c>
    19cc:	29 d0       	rcall	.+82     	; 0x1a20 <__divsf3_pse+0x8e>
    19ce:	fe 2f       	mov	r31, r30
    19d0:	27 d0       	rcall	.+78     	; 0x1a20 <__divsf3_pse+0x8e>
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	bb 1f       	adc	r27, r27
    19da:	26 17       	cp	r18, r22
    19dc:	37 07       	cpc	r19, r23
    19de:	48 07       	cpc	r20, r24
    19e0:	ab 07       	cpc	r26, r27
    19e2:	b0 e8       	ldi	r27, 0x80	; 128
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <__divsf3_pse+0x56>
    19e6:	bb 0b       	sbc	r27, r27
    19e8:	80 2d       	mov	r24, r0
    19ea:	bf 01       	movw	r22, r30
    19ec:	ff 27       	eor	r31, r31
    19ee:	93 58       	subi	r25, 0x83	; 131
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	2a f0       	brmi	.+10     	; 0x19fe <__divsf3_pse+0x6c>
    19f4:	9e 3f       	cpi	r25, 0xFE	; 254
    19f6:	51 05       	cpc	r21, r1
    19f8:	68 f0       	brcs	.+26     	; 0x1a14 <__divsf3_pse+0x82>
    19fa:	92 c0       	rjmp	.+292    	; 0x1b20 <__fp_inf>
    19fc:	dc c0       	rjmp	.+440    	; 0x1bb6 <__fp_szero>
    19fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1a00:	ec f3       	brlt	.-6      	; 0x19fc <__divsf3_pse+0x6a>
    1a02:	98 3e       	cpi	r25, 0xE8	; 232
    1a04:	dc f3       	brlt	.-10     	; 0x19fc <__divsf3_pse+0x6a>
    1a06:	86 95       	lsr	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	b7 95       	ror	r27
    1a0e:	f7 95       	ror	r31
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__divsf3_pse+0x74>
    1a14:	88 0f       	add	r24, r24
    1a16:	91 1d       	adc	r25, r1
    1a18:	96 95       	lsr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	97 f9       	bld	r25, 7
    1a1e:	08 95       	ret
    1a20:	e1 e0       	ldi	r30, 0x01	; 1
    1a22:	66 0f       	add	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	88 1f       	adc	r24, r24
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	62 17       	cp	r22, r18
    1a2c:	73 07       	cpc	r23, r19
    1a2e:	84 07       	cpc	r24, r20
    1a30:	ba 07       	cpc	r27, r26
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <__divsf3_pse+0xaa>
    1a34:	62 1b       	sub	r22, r18
    1a36:	73 0b       	sbc	r23, r19
    1a38:	84 0b       	sbc	r24, r20
    1a3a:	ba 0b       	sbc	r27, r26
    1a3c:	ee 1f       	adc	r30, r30
    1a3e:	88 f7       	brcc	.-30     	; 0x1a22 <__divsf3_pse+0x90>
    1a40:	e0 95       	com	r30
    1a42:	08 95       	ret

00001a44 <__fixsfsi>:
    1a44:	04 d0       	rcall	.+8      	; 0x1a4e <__fixunssfsi>
    1a46:	68 94       	set
    1a48:	b1 11       	cpse	r27, r1
    1a4a:	b5 c0       	rjmp	.+362    	; 0x1bb6 <__fp_szero>
    1a4c:	08 95       	ret

00001a4e <__fixunssfsi>:
    1a4e:	98 d0       	rcall	.+304    	; 0x1b80 <__fp_splitA>
    1a50:	88 f0       	brcs	.+34     	; 0x1a74 <__fixunssfsi+0x26>
    1a52:	9f 57       	subi	r25, 0x7F	; 127
    1a54:	90 f0       	brcs	.+36     	; 0x1a7a <__fixunssfsi+0x2c>
    1a56:	b9 2f       	mov	r27, r25
    1a58:	99 27       	eor	r25, r25
    1a5a:	b7 51       	subi	r27, 0x17	; 23
    1a5c:	a0 f0       	brcs	.+40     	; 0x1a86 <__fixunssfsi+0x38>
    1a5e:	d1 f0       	breq	.+52     	; 0x1a94 <__fixunssfsi+0x46>
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	1a f0       	brmi	.+6      	; 0x1a70 <__fixunssfsi+0x22>
    1a6a:	ba 95       	dec	r27
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__fixunssfsi+0x12>
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <__fixunssfsi+0x46>
    1a70:	b1 30       	cpi	r27, 0x01	; 1
    1a72:	81 f0       	breq	.+32     	; 0x1a94 <__fixunssfsi+0x46>
    1a74:	9f d0       	rcall	.+318    	; 0x1bb4 <__fp_zero>
    1a76:	b1 e0       	ldi	r27, 0x01	; 1
    1a78:	08 95       	ret
    1a7a:	9c c0       	rjmp	.+312    	; 0x1bb4 <__fp_zero>
    1a7c:	67 2f       	mov	r22, r23
    1a7e:	78 2f       	mov	r23, r24
    1a80:	88 27       	eor	r24, r24
    1a82:	b8 5f       	subi	r27, 0xF8	; 248
    1a84:	39 f0       	breq	.+14     	; 0x1a94 <__fixunssfsi+0x46>
    1a86:	b9 3f       	cpi	r27, 0xF9	; 249
    1a88:	cc f3       	brlt	.-14     	; 0x1a7c <__fixunssfsi+0x2e>
    1a8a:	86 95       	lsr	r24
    1a8c:	77 95       	ror	r23
    1a8e:	67 95       	ror	r22
    1a90:	b3 95       	inc	r27
    1a92:	d9 f7       	brne	.-10     	; 0x1a8a <__fixunssfsi+0x3c>
    1a94:	3e f4       	brtc	.+14     	; 0x1aa4 <__fixunssfsi+0x56>
    1a96:	90 95       	com	r25
    1a98:	80 95       	com	r24
    1a9a:	70 95       	com	r23
    1a9c:	61 95       	neg	r22
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	08 95       	ret

00001aa6 <__floatunsisf>:
    1aa6:	e8 94       	clt
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <__floatsisf+0x12>

00001aaa <__floatsisf>:
    1aaa:	97 fb       	bst	r25, 7
    1aac:	3e f4       	brtc	.+14     	; 0x1abc <__floatsisf+0x12>
    1aae:	90 95       	com	r25
    1ab0:	80 95       	com	r24
    1ab2:	70 95       	com	r23
    1ab4:	61 95       	neg	r22
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	99 23       	and	r25, r25
    1abe:	a9 f0       	breq	.+42     	; 0x1aea <__floatsisf+0x40>
    1ac0:	f9 2f       	mov	r31, r25
    1ac2:	96 e9       	ldi	r25, 0x96	; 150
    1ac4:	bb 27       	eor	r27, r27
    1ac6:	93 95       	inc	r25
    1ac8:	f6 95       	lsr	r31
    1aca:	87 95       	ror	r24
    1acc:	77 95       	ror	r23
    1ace:	67 95       	ror	r22
    1ad0:	b7 95       	ror	r27
    1ad2:	f1 11       	cpse	r31, r1
    1ad4:	f8 cf       	rjmp	.-16     	; 0x1ac6 <__floatsisf+0x1c>
    1ad6:	fa f4       	brpl	.+62     	; 0x1b16 <__floatsisf+0x6c>
    1ad8:	bb 0f       	add	r27, r27
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <__floatsisf+0x36>
    1adc:	60 ff       	sbrs	r22, 0
    1ade:	1b c0       	rjmp	.+54     	; 0x1b16 <__floatsisf+0x6c>
    1ae0:	6f 5f       	subi	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	16 c0       	rjmp	.+44     	; 0x1b16 <__floatsisf+0x6c>
    1aea:	88 23       	and	r24, r24
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <__floatsisf+0x48>
    1aee:	96 e9       	ldi	r25, 0x96	; 150
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <__floatsisf+0x6a>
    1af2:	77 23       	and	r23, r23
    1af4:	21 f0       	breq	.+8      	; 0x1afe <__floatsisf+0x54>
    1af6:	9e e8       	ldi	r25, 0x8E	; 142
    1af8:	87 2f       	mov	r24, r23
    1afa:	76 2f       	mov	r23, r22
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <__floatsisf+0x5e>
    1afe:	66 23       	and	r22, r22
    1b00:	71 f0       	breq	.+28     	; 0x1b1e <__floatsisf+0x74>
    1b02:	96 e8       	ldi	r25, 0x86	; 134
    1b04:	86 2f       	mov	r24, r22
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	2a f0       	brmi	.+10     	; 0x1b16 <__floatsisf+0x6c>
    1b0c:	9a 95       	dec	r25
    1b0e:	66 0f       	add	r22, r22
    1b10:	77 1f       	adc	r23, r23
    1b12:	88 1f       	adc	r24, r24
    1b14:	da f7       	brpl	.-10     	; 0x1b0c <__floatsisf+0x62>
    1b16:	88 0f       	add	r24, r24
    1b18:	96 95       	lsr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	97 f9       	bld	r25, 7
    1b1e:	08 95       	ret

00001b20 <__fp_inf>:
    1b20:	97 f9       	bld	r25, 7
    1b22:	9f 67       	ori	r25, 0x7F	; 127
    1b24:	80 e8       	ldi	r24, 0x80	; 128
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	08 95       	ret

00001b2c <__fp_nan>:
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	80 ec       	ldi	r24, 0xC0	; 192
    1b30:	08 95       	ret

00001b32 <__fp_pscA>:
    1b32:	00 24       	eor	r0, r0
    1b34:	0a 94       	dec	r0
    1b36:	16 16       	cp	r1, r22
    1b38:	17 06       	cpc	r1, r23
    1b3a:	18 06       	cpc	r1, r24
    1b3c:	09 06       	cpc	r0, r25
    1b3e:	08 95       	ret

00001b40 <__fp_pscB>:
    1b40:	00 24       	eor	r0, r0
    1b42:	0a 94       	dec	r0
    1b44:	12 16       	cp	r1, r18
    1b46:	13 06       	cpc	r1, r19
    1b48:	14 06       	cpc	r1, r20
    1b4a:	05 06       	cpc	r0, r21
    1b4c:	08 95       	ret

00001b4e <__fp_round>:
    1b4e:	09 2e       	mov	r0, r25
    1b50:	03 94       	inc	r0
    1b52:	00 0c       	add	r0, r0
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <__fp_round+0xc>
    1b56:	88 23       	and	r24, r24
    1b58:	52 f0       	brmi	.+20     	; 0x1b6e <__fp_round+0x20>
    1b5a:	bb 0f       	add	r27, r27
    1b5c:	40 f4       	brcc	.+16     	; 0x1b6e <__fp_round+0x20>
    1b5e:	bf 2b       	or	r27, r31
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <__fp_round+0x18>
    1b62:	60 ff       	sbrs	r22, 0
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <__fp_round+0x20>
    1b66:	6f 5f       	subi	r22, 0xFF	; 255
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	08 95       	ret

00001b70 <__fp_split3>:
    1b70:	57 fd       	sbrc	r21, 7
    1b72:	90 58       	subi	r25, 0x80	; 128
    1b74:	44 0f       	add	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	59 f0       	breq	.+22     	; 0x1b90 <__fp_splitA+0x10>
    1b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7c:	71 f0       	breq	.+28     	; 0x1b9a <__fp_splitA+0x1a>
    1b7e:	47 95       	ror	r20

00001b80 <__fp_splitA>:
    1b80:	88 0f       	add	r24, r24
    1b82:	97 fb       	bst	r25, 7
    1b84:	99 1f       	adc	r25, r25
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <__fp_splitA+0x20>
    1b88:	9f 3f       	cpi	r25, 0xFF	; 255
    1b8a:	79 f0       	breq	.+30     	; 0x1baa <__fp_splitA+0x2a>
    1b8c:	87 95       	ror	r24
    1b8e:	08 95       	ret
    1b90:	12 16       	cp	r1, r18
    1b92:	13 06       	cpc	r1, r19
    1b94:	14 06       	cpc	r1, r20
    1b96:	55 1f       	adc	r21, r21
    1b98:	f2 cf       	rjmp	.-28     	; 0x1b7e <__fp_split3+0xe>
    1b9a:	46 95       	lsr	r20
    1b9c:	f1 df       	rcall	.-30     	; 0x1b80 <__fp_splitA>
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <__fp_splitA+0x30>
    1ba0:	16 16       	cp	r1, r22
    1ba2:	17 06       	cpc	r1, r23
    1ba4:	18 06       	cpc	r1, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	f1 cf       	rjmp	.-30     	; 0x1b8c <__fp_splitA+0xc>
    1baa:	86 95       	lsr	r24
    1bac:	71 05       	cpc	r23, r1
    1bae:	61 05       	cpc	r22, r1
    1bb0:	08 94       	sec
    1bb2:	08 95       	ret

00001bb4 <__fp_zero>:
    1bb4:	e8 94       	clt

00001bb6 <__fp_szero>:
    1bb6:	bb 27       	eor	r27, r27
    1bb8:	66 27       	eor	r22, r22
    1bba:	77 27       	eor	r23, r23
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	97 f9       	bld	r25, 7
    1bc0:	08 95       	ret

00001bc2 <__mulsf3>:
    1bc2:	0b d0       	rcall	.+22     	; 0x1bda <__mulsf3x>
    1bc4:	c4 cf       	rjmp	.-120    	; 0x1b4e <__fp_round>
    1bc6:	b5 df       	rcall	.-150    	; 0x1b32 <__fp_pscA>
    1bc8:	28 f0       	brcs	.+10     	; 0x1bd4 <__mulsf3+0x12>
    1bca:	ba df       	rcall	.-140    	; 0x1b40 <__fp_pscB>
    1bcc:	18 f0       	brcs	.+6      	; 0x1bd4 <__mulsf3+0x12>
    1bce:	95 23       	and	r25, r21
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <__mulsf3+0x12>
    1bd2:	a6 cf       	rjmp	.-180    	; 0x1b20 <__fp_inf>
    1bd4:	ab cf       	rjmp	.-170    	; 0x1b2c <__fp_nan>
    1bd6:	11 24       	eor	r1, r1
    1bd8:	ee cf       	rjmp	.-36     	; 0x1bb6 <__fp_szero>

00001bda <__mulsf3x>:
    1bda:	ca df       	rcall	.-108    	; 0x1b70 <__fp_split3>
    1bdc:	a0 f3       	brcs	.-24     	; 0x1bc6 <__mulsf3+0x4>

00001bde <__mulsf3_pse>:
    1bde:	95 9f       	mul	r25, r21
    1be0:	d1 f3       	breq	.-12     	; 0x1bd6 <__mulsf3+0x14>
    1be2:	95 0f       	add	r25, r21
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	55 1f       	adc	r21, r21
    1be8:	62 9f       	mul	r22, r18
    1bea:	f0 01       	movw	r30, r0
    1bec:	72 9f       	mul	r23, r18
    1bee:	bb 27       	eor	r27, r27
    1bf0:	f0 0d       	add	r31, r0
    1bf2:	b1 1d       	adc	r27, r1
    1bf4:	63 9f       	mul	r22, r19
    1bf6:	aa 27       	eor	r26, r26
    1bf8:	f0 0d       	add	r31, r0
    1bfa:	b1 1d       	adc	r27, r1
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	64 9f       	mul	r22, r20
    1c00:	66 27       	eor	r22, r22
    1c02:	b0 0d       	add	r27, r0
    1c04:	a1 1d       	adc	r26, r1
    1c06:	66 1f       	adc	r22, r22
    1c08:	82 9f       	mul	r24, r18
    1c0a:	22 27       	eor	r18, r18
    1c0c:	b0 0d       	add	r27, r0
    1c0e:	a1 1d       	adc	r26, r1
    1c10:	62 1f       	adc	r22, r18
    1c12:	73 9f       	mul	r23, r19
    1c14:	b0 0d       	add	r27, r0
    1c16:	a1 1d       	adc	r26, r1
    1c18:	62 1f       	adc	r22, r18
    1c1a:	83 9f       	mul	r24, r19
    1c1c:	a0 0d       	add	r26, r0
    1c1e:	61 1d       	adc	r22, r1
    1c20:	22 1f       	adc	r18, r18
    1c22:	74 9f       	mul	r23, r20
    1c24:	33 27       	eor	r19, r19
    1c26:	a0 0d       	add	r26, r0
    1c28:	61 1d       	adc	r22, r1
    1c2a:	23 1f       	adc	r18, r19
    1c2c:	84 9f       	mul	r24, r20
    1c2e:	60 0d       	add	r22, r0
    1c30:	21 1d       	adc	r18, r1
    1c32:	82 2f       	mov	r24, r18
    1c34:	76 2f       	mov	r23, r22
    1c36:	6a 2f       	mov	r22, r26
    1c38:	11 24       	eor	r1, r1
    1c3a:	9f 57       	subi	r25, 0x7F	; 127
    1c3c:	50 40       	sbci	r21, 0x00	; 0
    1c3e:	8a f0       	brmi	.+34     	; 0x1c62 <__mulsf3_pse+0x84>
    1c40:	e1 f0       	breq	.+56     	; 0x1c7a <__mulsf3_pse+0x9c>
    1c42:	88 23       	and	r24, r24
    1c44:	4a f0       	brmi	.+18     	; 0x1c58 <__mulsf3_pse+0x7a>
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	66 1f       	adc	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	91 50       	subi	r25, 0x01	; 1
    1c54:	50 40       	sbci	r21, 0x00	; 0
    1c56:	a9 f7       	brne	.-22     	; 0x1c42 <__mulsf3_pse+0x64>
    1c58:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5a:	51 05       	cpc	r21, r1
    1c5c:	70 f0       	brcs	.+28     	; 0x1c7a <__mulsf3_pse+0x9c>
    1c5e:	60 cf       	rjmp	.-320    	; 0x1b20 <__fp_inf>
    1c60:	aa cf       	rjmp	.-172    	; 0x1bb6 <__fp_szero>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	ec f3       	brlt	.-6      	; 0x1c60 <__mulsf3_pse+0x82>
    1c66:	98 3e       	cpi	r25, 0xE8	; 232
    1c68:	dc f3       	brlt	.-10     	; 0x1c60 <__mulsf3_pse+0x82>
    1c6a:	86 95       	lsr	r24
    1c6c:	77 95       	ror	r23
    1c6e:	67 95       	ror	r22
    1c70:	b7 95       	ror	r27
    1c72:	f7 95       	ror	r31
    1c74:	e7 95       	ror	r30
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	c1 f7       	brne	.-16     	; 0x1c6a <__mulsf3_pse+0x8c>
    1c7a:	fe 2b       	or	r31, r30
    1c7c:	88 0f       	add	r24, r24
    1c7e:	91 1d       	adc	r25, r1
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	97 f9       	bld	r25, 7
    1c86:	08 95       	ret

00001c88 <__divmodhi4>:
    1c88:	97 fb       	bst	r25, 7
    1c8a:	07 2e       	mov	r0, r23
    1c8c:	16 f4       	brtc	.+4      	; 0x1c92 <__divmodhi4+0xa>
    1c8e:	00 94       	com	r0
    1c90:	06 d0       	rcall	.+12     	; 0x1c9e <__divmodhi4_neg1>
    1c92:	77 fd       	sbrc	r23, 7
    1c94:	08 d0       	rcall	.+16     	; 0x1ca6 <__divmodhi4_neg2>
    1c96:	0b d0       	rcall	.+22     	; 0x1cae <__udivmodhi4>
    1c98:	07 fc       	sbrc	r0, 7
    1c9a:	05 d0       	rcall	.+10     	; 0x1ca6 <__divmodhi4_neg2>
    1c9c:	3e f4       	brtc	.+14     	; 0x1cac <__divmodhi4_exit>

00001c9e <__divmodhi4_neg1>:
    1c9e:	90 95       	com	r25
    1ca0:	81 95       	neg	r24
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	08 95       	ret

00001ca6 <__divmodhi4_neg2>:
    1ca6:	70 95       	com	r23
    1ca8:	61 95       	neg	r22
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255

00001cac <__divmodhi4_exit>:
    1cac:	08 95       	ret

00001cae <__udivmodhi4>:
    1cae:	aa 1b       	sub	r26, r26
    1cb0:	bb 1b       	sub	r27, r27
    1cb2:	51 e1       	ldi	r21, 0x11	; 17
    1cb4:	07 c0       	rjmp	.+14     	; 0x1cc4 <__udivmodhi4_ep>

00001cb6 <__udivmodhi4_loop>:
    1cb6:	aa 1f       	adc	r26, r26
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	a6 17       	cp	r26, r22
    1cbc:	b7 07       	cpc	r27, r23
    1cbe:	10 f0       	brcs	.+4      	; 0x1cc4 <__udivmodhi4_ep>
    1cc0:	a6 1b       	sub	r26, r22
    1cc2:	b7 0b       	sbc	r27, r23

00001cc4 <__udivmodhi4_ep>:
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	5a 95       	dec	r21
    1cca:	a9 f7       	brne	.-22     	; 0x1cb6 <__udivmodhi4_loop>
    1ccc:	80 95       	com	r24
    1cce:	90 95       	com	r25
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	08 95       	ret

00001cd6 <strcpy>:
    1cd6:	fb 01       	movw	r30, r22
    1cd8:	dc 01       	movw	r26, r24
    1cda:	01 90       	ld	r0, Z+
    1cdc:	0d 92       	st	X+, r0
    1cde:	00 20       	and	r0, r0
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <strcpy+0x4>
    1ce2:	08 95       	ret

00001ce4 <_exit>:
    1ce4:	f8 94       	cli

00001ce6 <__stop_program>:
    1ce6:	ff cf       	rjmp	.-2      	; 0x1ce6 <__stop_program>
