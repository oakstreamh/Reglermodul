
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  000021f6  0000228a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001fc  008001fc  00002386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c18  00000000  00000000  0000251e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00004136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002067  00000000  00000000  00004925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  0000698c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010b88  00000000  00000000  00006dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e56  00000000  00000000  00017944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0001879a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003897  00000000  00000000  000188d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ef       	ldi	r30, 0xF6	; 246
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3f       	cpi	r26, 0xFC	; 252
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac ef       	ldi	r26, 0xFC	; 252
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3c       	cpi	r26, 0xC1	; 193
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <main>
      c6:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
* Output: speed, (PWM counter)
*/
void FLC_steering(a, e)
int a;
int e;
{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c8 5d       	subi	r28, 0xD8	; 216
      f6:	d2 40       	sbci	r29, 0x02	; 2
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
	// Declaration of I/Os
	struct io_type error;		// input 1
	struct io_type angle;       // input 2
	struct io_type servo;         // output
	struct rule_type rule1;		// first rule in rule base
	strcpy(error.name, "error");
     102:	26 e0       	ldi	r18, 0x06	; 6
     104:	e0 e0       	ldi	r30, 0x00	; 0
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	de 01       	movw	r26, r28
     10a:	11 96       	adiw	r26, 0x01	; 1
     10c:	01 90       	ld	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	2a 95       	dec	r18
     112:	e1 f7       	brne	.-8      	; 0x10c <FLC_steering+0x40>
	strcpy(angle.name, "angle");
     114:	6e 01       	movw	r12, r28
     116:	21 e1       	ldi	r18, 0x11	; 17
     118:	c2 0e       	add	r12, r18
     11a:	d1 1c       	adc	r13, r1
     11c:	26 e0       	ldi	r18, 0x06	; 6
     11e:	e6 e0       	ldi	r30, 0x06	; 6
     120:	f1 e0       	ldi	r31, 0x01	; 1
     122:	d6 01       	movw	r26, r12
     124:	01 90       	ld	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	2a 95       	dec	r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <FLC_steering+0x58>
	strcpy(servo.name, "servo");
     12c:	26 e0       	ldi	r18, 0x06	; 6
     12e:	ec e0       	ldi	r30, 0x0C	; 12
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	de 01       	movw	r26, r28
     134:	91 96       	adiw	r26, 0x21	; 33
     136:	01 90       	ld	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	2a 95       	dec	r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <FLC_steering+0x6a>
	
	error.value = e;
     13e:	7c 87       	std	Y+12, r23	; 0x0c
     140:	6b 87       	std	Y+11, r22	; 0x0b
	angle.value = a;
     142:	9c 8f       	std	Y+28, r25	; 0x1c
     144:	8b 8f       	std	Y+27, r24	; 0x1b
	* MF SlLeft:				[2670 2770 2820 2920]
	* MF left:				    [2840 2940 2950 3050]
	* MF shLeft:				[2950 3050 3060 3061]
	*/
	struct mf_type shLeft;
	strcpy(shLeft.name, "shLeft");
     146:	87 e0       	ldi	r24, 0x07	; 7
     148:	e2 e1       	ldi	r30, 0x12	; 18
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	de 01       	movw	r26, r28
     14e:	d7 96       	adiw	r26, 0x37	; 55
     150:	01 90       	ld	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	8a 95       	dec	r24
     156:	e1 f7       	brne	.-8      	; 0x150 <FLC_steering+0x84>
	shLeft.value = 0;
     158:	23 96       	adiw	r28, 0x03	; 3
     15a:	1f ae       	std	Y+63, r1	; 0x3f
     15c:	1e ae       	std	Y+62, r1	; 0x3e
     15e:	23 97       	sbiw	r28, 0x03	; 3
	shLeft.point1 = 2950;
     160:	0f 2e       	mov	r0, r31
     162:	f6 e8       	ldi	r31, 0x86	; 134
     164:	af 2e       	mov	r10, r31
     166:	fb e0       	ldi	r31, 0x0B	; 11
     168:	bf 2e       	mov	r11, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	25 96       	adiw	r28, 0x05	; 5
     16e:	bf ae       	std	Y+63, r11	; 0x3f
     170:	ae ae       	std	Y+62, r10	; 0x3e
     172:	25 97       	sbiw	r28, 0x05	; 5
	shLeft.point2 = 3061;
     174:	0f 2e       	mov	r0, r31
     176:	f5 ef       	ldi	r31, 0xF5	; 245
     178:	8f 2e       	mov	r8, r31
     17a:	fb e0       	ldi	r31, 0x0B	; 11
     17c:	9f 2e       	mov	r9, r31
     17e:	f0 2d       	mov	r31, r0
     180:	27 96       	adiw	r28, 0x07	; 7
     182:	9f ae       	std	Y+63, r9	; 0x3f
     184:	8e ae       	std	Y+62, r8	; 0x3e
     186:	27 97       	sbiw	r28, 0x07	; 7
	shLeft.slope1 = 1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	29 96       	adiw	r28, 0x09	; 9
     18e:	9f af       	std	Y+63, r25	; 0x3f
     190:	8e af       	std	Y+62, r24	; 0x3e
     192:	29 97       	sbiw	r28, 0x09	; 9
	shLeft.slope2 = 100;
     194:	44 e6       	ldi	r20, 0x64	; 100
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	2b 96       	adiw	r28, 0x0b	; 11
     19a:	5f af       	std	Y+63, r21	; 0x3f
     19c:	4e af       	std	Y+62, r20	; 0x3e
     19e:	2b 97       	sbiw	r28, 0x0b	; 11
	shLeft.next = NULL;
     1a0:	2d 96       	adiw	r28, 0x0d	; 13
     1a2:	1f ae       	std	Y+63, r1	; 0x3f
     1a4:	1e ae       	std	Y+62, r1	; 0x3e
     1a6:	2d 97       	sbiw	r28, 0x0d	; 13
	
	struct mf_type left;
	strcpy(left.name, "left");
     1a8:	25 e0       	ldi	r18, 0x05	; 5
     1aa:	e9 e1       	ldi	r30, 0x19	; 25
     1ac:	f1 e0       	ldi	r31, 0x01	; 1
     1ae:	de 01       	movw	r26, r28
     1b0:	a3 5b       	subi	r26, 0xB3	; 179
     1b2:	bf 4f       	sbci	r27, 0xFF	; 255
     1b4:	01 90       	ld	r0, Z+
     1b6:	0d 92       	st	X+, r0
     1b8:	2a 95       	dec	r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <FLC_steering+0xe8>
	left.value = 0;
     1bc:	69 96       	adiw	r28, 0x19	; 25
     1be:	1f ae       	std	Y+63, r1	; 0x3f
     1c0:	1e ae       	std	Y+62, r1	; 0x3e
     1c2:	69 97       	sbiw	r28, 0x19	; 25
	left.point1 = 2840;
     1c4:	0f 2e       	mov	r0, r31
     1c6:	f8 e1       	ldi	r31, 0x18	; 24
     1c8:	2f 2e       	mov	r2, r31
     1ca:	fb e0       	ldi	r31, 0x0B	; 11
     1cc:	3f 2e       	mov	r3, r31
     1ce:	f0 2d       	mov	r31, r0
     1d0:	6b 96       	adiw	r28, 0x1b	; 27
     1d2:	3f ae       	std	Y+63, r3	; 0x3f
     1d4:	2e ae       	std	Y+62, r2	; 0x3e
     1d6:	6b 97       	sbiw	r28, 0x1b	; 27
	left.point2 = 3050;
     1d8:	aa ee       	ldi	r26, 0xEA	; 234
     1da:	bb e0       	ldi	r27, 0x0B	; 11
     1dc:	6d 96       	adiw	r28, 0x1d	; 29
     1de:	bf af       	std	Y+63, r27	; 0x3f
     1e0:	ae af       	std	Y+62, r26	; 0x3e
     1e2:	6d 97       	sbiw	r28, 0x1d	; 29
	left.slope1 = 1;
     1e4:	6f 96       	adiw	r28, 0x1f	; 31
     1e6:	9f af       	std	Y+63, r25	; 0x3f
     1e8:	8e af       	std	Y+62, r24	; 0x3e
     1ea:	6f 97       	sbiw	r28, 0x1f	; 31
	left.slope2 = 1;
     1ec:	a1 96       	adiw	r28, 0x21	; 33
     1ee:	9f af       	std	Y+63, r25	; 0x3f
     1f0:	8e af       	std	Y+62, r24	; 0x3e
     1f2:	a1 97       	sbiw	r28, 0x21	; 33
	left.next = &shLeft;
     1f4:	e7 e3       	ldi	r30, 0x37	; 55
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	ec 0f       	add	r30, r28
     1fa:	fd 1f       	adc	r31, r29
     1fc:	a3 96       	adiw	r28, 0x23	; 35
     1fe:	ff af       	std	Y+63, r31	; 0x3f
     200:	ee af       	std	Y+62, r30	; 0x3e
     202:	a3 97       	sbiw	r28, 0x23	; 35
	
	
	struct mf_type slLeft;
	strcpy(slLeft.name, "slLeft");
     204:	27 e0       	ldi	r18, 0x07	; 7
     206:	ee e1       	ldi	r30, 0x1E	; 30
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	de 01       	movw	r26, r28
     20c:	ad 59       	subi	r26, 0x9D	; 157
     20e:	bf 4f       	sbci	r27, 0xFF	; 255
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	2a 95       	dec	r18
     216:	e1 f7       	brne	.-8      	; 0x210 <FLC_steering+0x144>
	slLeft.value = 0;
     218:	af 96       	adiw	r28, 0x2f	; 47
     21a:	1f ae       	std	Y+63, r1	; 0x3f
     21c:	1e ae       	std	Y+62, r1	; 0x3e
     21e:	af 97       	sbiw	r28, 0x2f	; 47
	slLeft.point1 = 2670;
     220:	2e e6       	ldi	r18, 0x6E	; 110
     222:	3a e0       	ldi	r19, 0x0A	; 10
     224:	e1 96       	adiw	r28, 0x31	; 49
     226:	3f af       	std	Y+63, r19	; 0x3f
     228:	2e af       	std	Y+62, r18	; 0x3e
     22a:	e1 97       	sbiw	r28, 0x31	; 49
	slLeft.point2 = 2920;
     22c:	48 e6       	ldi	r20, 0x68	; 104
     22e:	5b e0       	ldi	r21, 0x0B	; 11
     230:	e3 96       	adiw	r28, 0x33	; 51
     232:	5f af       	std	Y+63, r21	; 0x3f
     234:	4e af       	std	Y+62, r20	; 0x3e
     236:	e3 97       	sbiw	r28, 0x33	; 51
	slLeft.slope1 = 1;
     238:	e5 96       	adiw	r28, 0x35	; 53
     23a:	9f af       	std	Y+63, r25	; 0x3f
     23c:	8e af       	std	Y+62, r24	; 0x3e
     23e:	e5 97       	sbiw	r28, 0x35	; 53
	slLeft.slope2 = 1;
     240:	e7 96       	adiw	r28, 0x37	; 55
     242:	9f af       	std	Y+63, r25	; 0x3f
     244:	8e af       	std	Y+62, r24	; 0x3e
     246:	e7 97       	sbiw	r28, 0x37	; 55
	slLeft.next = &left;
     248:	ad e4       	ldi	r26, 0x4D	; 77
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ac 0f       	add	r26, r28
     24e:	bd 1f       	adc	r27, r29
     250:	e9 96       	adiw	r28, 0x39	; 57
     252:	bf af       	std	Y+63, r27	; 0x3f
     254:	ae af       	std	Y+62, r26	; 0x3e
     256:	e9 97       	sbiw	r28, 0x39	; 57
	
	
	struct mf_type straight;
	strcpy(straight.name, "straight");
     258:	29 e0       	ldi	r18, 0x09	; 9
     25a:	e5 e2       	ldi	r30, 0x25	; 37
     25c:	f1 e0       	ldi	r31, 0x01	; 1
     25e:	9c 96       	adiw	r26, 0x2c	; 44
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	2a 95       	dec	r18
     266:	e1 f7       	brne	.-8      	; 0x260 <FLC_steering+0x194>
	straight.value = 0;
     268:	cd 57       	subi	r28, 0x7D	; 125
     26a:	df 4f       	sbci	r29, 0xFF	; 255
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	18 82       	st	Y, r1
     270:	c3 58       	subi	r28, 0x83	; 131
     272:	d0 40       	sbci	r29, 0x00	; 0
	straight.point1 = 2540;
     274:	ec ee       	ldi	r30, 0xEC	; 236
     276:	f9 e0       	ldi	r31, 0x09	; 9
     278:	cb 57       	subi	r28, 0x7B	; 123
     27a:	df 4f       	sbci	r29, 0xFF	; 255
     27c:	f9 83       	std	Y+1, r31	; 0x01
     27e:	e8 83       	st	Y, r30
     280:	c5 58       	subi	r28, 0x85	; 133
     282:	d0 40       	sbci	r29, 0x00	; 0
	straight.point2 = 2780;
     284:	2c ed       	ldi	r18, 0xDC	; 220
     286:	3a e0       	ldi	r19, 0x0A	; 10
     288:	c9 57       	subi	r28, 0x79	; 121
     28a:	df 4f       	sbci	r29, 0xFF	; 255
     28c:	39 83       	std	Y+1, r19	; 0x01
     28e:	28 83       	st	Y, r18
     290:	c7 58       	subi	r28, 0x87	; 135
     292:	d0 40       	sbci	r29, 0x00	; 0
	straight.slope1 = 1;
     294:	c7 57       	subi	r28, 0x77	; 119
     296:	df 4f       	sbci	r29, 0xFF	; 255
     298:	99 83       	std	Y+1, r25	; 0x01
     29a:	88 83       	st	Y, r24
     29c:	c9 58       	subi	r28, 0x89	; 137
     29e:	d0 40       	sbci	r29, 0x00	; 0
	straight.slope2 = 1;
     2a0:	c5 57       	subi	r28, 0x75	; 117
     2a2:	df 4f       	sbci	r29, 0xFF	; 255
     2a4:	99 83       	std	Y+1, r25	; 0x01
     2a6:	88 83       	st	Y, r24
     2a8:	cb 58       	subi	r28, 0x8B	; 139
     2aa:	d0 40       	sbci	r29, 0x00	; 0
	straight.next = &slLeft;
     2ac:	43 e6       	ldi	r20, 0x63	; 99
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	4c 0f       	add	r20, r28
     2b2:	5d 1f       	adc	r21, r29
     2b4:	c3 57       	subi	r28, 0x73	; 115
     2b6:	df 4f       	sbci	r29, 0xFF	; 255
     2b8:	59 83       	std	Y+1, r21	; 0x01
     2ba:	48 83       	st	Y, r20
     2bc:	cd 58       	subi	r28, 0x8D	; 141
     2be:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type slRight;
	strcpy(slRight.name, "slRight");
     2c0:	3e 01       	movw	r6, r28
     2c2:	5f e8       	ldi	r21, 0x8F	; 143
     2c4:	65 0e       	add	r6, r21
     2c6:	71 1c       	adc	r7, r1
     2c8:	28 e0       	ldi	r18, 0x08	; 8
     2ca:	ee e2       	ldi	r30, 0x2E	; 46
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	d3 01       	movw	r26, r6
     2d0:	01 90       	ld	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	2a 95       	dec	r18
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <FLC_steering+0x204>
	slRight.value = 0;
     2d8:	d3 01       	movw	r26, r6
     2da:	1b 96       	adiw	r26, 0x0b	; 11
     2dc:	1c 92       	st	X, r1
     2de:	1e 92       	st	-X, r1
     2e0:	1a 97       	sbiw	r26, 0x0a	; 10
	slRight.point1 = 2400;
     2e2:	e0 e6       	ldi	r30, 0x60	; 96
     2e4:	f9 e0       	ldi	r31, 0x09	; 9
     2e6:	1d 96       	adiw	r26, 0x0d	; 13
     2e8:	fc 93       	st	X, r31
     2ea:	ee 93       	st	-X, r30
     2ec:	1c 97       	sbiw	r26, 0x0c	; 12
	slRight.point2 = 2650;
     2ee:	2a e5       	ldi	r18, 0x5A	; 90
     2f0:	3a e0       	ldi	r19, 0x0A	; 10
     2f2:	1f 96       	adiw	r26, 0x0f	; 15
     2f4:	3c 93       	st	X, r19
     2f6:	2e 93       	st	-X, r18
     2f8:	1e 97       	sbiw	r26, 0x0e	; 14
	slRight.slope1 = 1;
     2fa:	51 96       	adiw	r26, 0x11	; 17
     2fc:	9c 93       	st	X, r25
     2fe:	8e 93       	st	-X, r24
     300:	50 97       	sbiw	r26, 0x10	; 16
	slRight.slope2 = 1;
     302:	53 96       	adiw	r26, 0x13	; 19
     304:	9c 93       	st	X, r25
     306:	8e 93       	st	-X, r24
     308:	52 97       	sbiw	r26, 0x12	; 18
	slRight.next = &straight;
     30a:	49 e7       	ldi	r20, 0x79	; 121
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	4c 0f       	add	r20, r28
     310:	5d 1f       	adc	r21, r29
     312:	55 96       	adiw	r26, 0x15	; 21
     314:	5c 93       	st	X, r21
     316:	4e 93       	st	-X, r20
     318:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type right;
	strcpy(right.name, "right");
     31a:	2e 01       	movw	r4, r28
     31c:	55 ea       	ldi	r21, 0xA5	; 165
     31e:	45 0e       	add	r4, r21
     320:	51 1c       	adc	r5, r1
     322:	26 e0       	ldi	r18, 0x06	; 6
     324:	ec e8       	ldi	r30, 0x8C	; 140
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	d2 01       	movw	r26, r4
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	2a 95       	dec	r18
     330:	e1 f7       	brne	.-8      	; 0x32a <FLC_steering+0x25e>
	right.value = 0;
     332:	d2 01       	movw	r26, r4
     334:	1b 96       	adiw	r26, 0x0b	; 11
     336:	1c 92       	st	X, r1
     338:	1e 92       	st	-X, r1
     33a:	1a 97       	sbiw	r26, 0x0a	; 10
	right.point1 = 2270;
     33c:	ee ed       	ldi	r30, 0xDE	; 222
     33e:	f8 e0       	ldi	r31, 0x08	; 8
     340:	1d 96       	adiw	r26, 0x0d	; 13
     342:	fc 93       	st	X, r31
     344:	ee 93       	st	-X, r30
     346:	1c 97       	sbiw	r26, 0x0c	; 12
	right.point2 = 2480;
     348:	20 eb       	ldi	r18, 0xB0	; 176
     34a:	39 e0       	ldi	r19, 0x09	; 9
     34c:	1f 96       	adiw	r26, 0x0f	; 15
     34e:	3c 93       	st	X, r19
     350:	2e 93       	st	-X, r18
     352:	1e 97       	sbiw	r26, 0x0e	; 14
	right.slope1 = 1;
     354:	51 96       	adiw	r26, 0x11	; 17
     356:	9c 93       	st	X, r25
     358:	8e 93       	st	-X, r24
     35a:	50 97       	sbiw	r26, 0x10	; 16
	right.slope2 = 1;
     35c:	53 96       	adiw	r26, 0x13	; 19
     35e:	9c 93       	st	X, r25
     360:	8e 93       	st	-X, r24
     362:	52 97       	sbiw	r26, 0x12	; 18
	right.next = &slRight;
     364:	55 96       	adiw	r26, 0x15	; 21
     366:	7c 92       	st	X, r7
     368:	6e 92       	st	-X, r6
     36a:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type shRight;
	strcpy(shRight.name, "shRight");
     36c:	28 e0       	ldi	r18, 0x08	; 8
     36e:	e6 e3       	ldi	r30, 0x36	; 54
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	56 96       	adiw	r26, 0x16	; 22
     374:	01 90       	ld	r0, Z+
     376:	0d 92       	st	X+, r0
     378:	2a 95       	dec	r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <FLC_steering+0x2a8>
	shRight.value = 0;
     37c:	cb 53       	subi	r28, 0x3B	; 59
     37e:	df 4f       	sbci	r29, 0xFF	; 255
     380:	19 82       	std	Y+1, r1	; 0x01
     382:	18 82       	st	Y, r1
     384:	c5 5c       	subi	r28, 0xC5	; 197
     386:	d0 40       	sbci	r29, 0x00	; 0
	shRight.point1 = 2259;
     388:	43 ed       	ldi	r20, 0xD3	; 211
     38a:	58 e0       	ldi	r21, 0x08	; 8
     38c:	c9 53       	subi	r28, 0x39	; 57
     38e:	df 4f       	sbci	r29, 0xFF	; 255
     390:	59 83       	std	Y+1, r21	; 0x01
     392:	48 83       	st	Y, r20
     394:	c7 5c       	subi	r28, 0xC7	; 199
     396:	d0 40       	sbci	r29, 0x00	; 0
	shRight.point2 = 2370;
     398:	a2 e4       	ldi	r26, 0x42	; 66
     39a:	b9 e0       	ldi	r27, 0x09	; 9
     39c:	c7 53       	subi	r28, 0x37	; 55
     39e:	df 4f       	sbci	r29, 0xFF	; 255
     3a0:	b9 83       	std	Y+1, r27	; 0x01
     3a2:	a8 83       	st	Y, r26
     3a4:	c9 5c       	subi	r28, 0xC9	; 201
     3a6:	d0 40       	sbci	r29, 0x00	; 0
	shRight.slope1 = 100;
     3a8:	e4 e6       	ldi	r30, 0x64	; 100
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	c5 53       	subi	r28, 0x35	; 53
     3ae:	df 4f       	sbci	r29, 0xFF	; 255
     3b0:	f9 83       	std	Y+1, r31	; 0x01
     3b2:	e8 83       	st	Y, r30
     3b4:	cb 5c       	subi	r28, 0xCB	; 203
     3b6:	d0 40       	sbci	r29, 0x00	; 0
	shRight.slope2 = 1;
     3b8:	c3 53       	subi	r28, 0x33	; 51
     3ba:	df 4f       	sbci	r29, 0xFF	; 255
     3bc:	99 83       	std	Y+1, r25	; 0x01
     3be:	88 83       	st	Y, r24
     3c0:	cd 5c       	subi	r28, 0xCD	; 205
     3c2:	d0 40       	sbci	r29, 0x00	; 0
	shRight.next = &right;
     3c4:	c1 53       	subi	r28, 0x31	; 49
     3c6:	df 4f       	sbci	r29, 0xFF	; 255
     3c8:	59 82       	std	Y+1, r5	; 0x01
     3ca:	48 82       	st	Y, r4
     3cc:	cf 5c       	subi	r28, 0xCF	; 207
     3ce:	d0 40       	sbci	r29, 0x00	; 0
	
	
	angle.membership_functions = &shRight;
     3d0:	2b eb       	ldi	r18, 0xBB	; 187
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	2c 0f       	add	r18, r28
     3d6:	3d 1f       	adc	r19, r29
     3d8:	3e 8f       	std	Y+30, r19	; 0x1e
     3da:	2d 8f       	std	Y+29, r18	; 0x1d
	angle.next = NULL;
     3dc:	18 a2       	std	Y+32, r1	; 0x20
     3de:	1f 8e       	std	Y+31, r1	; 0x1f
	* MF medium:	[2845 2878 2892 2925]
	* MF high:		[2890 2900 2930 2931]
	*
	*/
	struct mf_type farLeft;
	strcpy(farLeft.name, "farLeft");
     3e0:	28 e0       	ldi	r18, 0x08	; 8
     3e2:	ee e3       	ldi	r30, 0x3E	; 62
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	de 01       	movw	r26, r28
     3e8:	af 52       	subi	r26, 0x2F	; 47
     3ea:	bf 4f       	sbci	r27, 0xFF	; 255
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	2a 95       	dec	r18
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <FLC_steering+0x320>
	farLeft.value = 0;
     3f4:	c5 52       	subi	r28, 0x25	; 37
     3f6:	df 4f       	sbci	r29, 0xFF	; 255
     3f8:	19 82       	std	Y+1, r1	; 0x01
     3fa:	18 82       	st	Y, r1
     3fc:	cb 5d       	subi	r28, 0xDB	; 219
     3fe:	d0 40       	sbci	r29, 0x00	; 0
	farLeft.point1 = 215;
     400:	27 ed       	ldi	r18, 0xD7	; 215
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	c3 52       	subi	r28, 0x23	; 35
     406:	df 4f       	sbci	r29, 0xFF	; 255
     408:	39 83       	std	Y+1, r19	; 0x01
     40a:	28 83       	st	Y, r18
     40c:	cd 5d       	subi	r28, 0xDD	; 221
     40e:	d0 40       	sbci	r29, 0x00	; 0
	farLeft.point2 = 251;
     410:	2b ef       	ldi	r18, 0xFB	; 251
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c1 52       	subi	r28, 0x21	; 33
     416:	df 4f       	sbci	r29, 0xFF	; 255
     418:	39 83       	std	Y+1, r19	; 0x01
     41a:	28 83       	st	Y, r18
     41c:	cf 5d       	subi	r28, 0xDF	; 223
     41e:	d0 40       	sbci	r29, 0x00	; 0
	farLeft.slope1 = 4;
     420:	24 e0       	ldi	r18, 0x04	; 4
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	cf 51       	subi	r28, 0x1F	; 31
     426:	df 4f       	sbci	r29, 0xFF	; 255
     428:	39 83       	std	Y+1, r19	; 0x01
     42a:	28 83       	st	Y, r18
     42c:	c1 5e       	subi	r28, 0xE1	; 225
     42e:	d0 40       	sbci	r29, 0x00	; 0
	farLeft.slope2 = 100;
     430:	44 e6       	ldi	r20, 0x64	; 100
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	cd 51       	subi	r28, 0x1D	; 29
     436:	df 4f       	sbci	r29, 0xFF	; 255
     438:	59 83       	std	Y+1, r21	; 0x01
     43a:	48 83       	st	Y, r20
     43c:	c3 5e       	subi	r28, 0xE3	; 227
     43e:	d0 40       	sbci	r29, 0x00	; 0
	farLeft.next = NULL;
     440:	cb 51       	subi	r28, 0x1B	; 27
     442:	df 4f       	sbci	r29, 0xFF	; 255
     444:	19 82       	std	Y+1, r1	; 0x01
     446:	18 82       	st	Y, r1
     448:	c5 5e       	subi	r28, 0xE5	; 229
     44a:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type eLeft;
	strcpy(eLeft.name, "eLeft");
     44c:	be 01       	movw	r22, r28
     44e:	69 51       	subi	r22, 0x19	; 25
     450:	7f 4f       	sbci	r23, 0xFF	; 255
     452:	46 e0       	ldi	r20, 0x06	; 6
     454:	e6 e4       	ldi	r30, 0x46	; 70
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	db 01       	movw	r26, r22
     45a:	01 90       	ld	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	4a 95       	dec	r20
     460:	e1 f7       	brne	.-8      	; 0x45a <FLC_steering+0x38e>
	eLeft.value = 0;
     462:	db 01       	movw	r26, r22
     464:	1b 96       	adiw	r26, 0x0b	; 11
     466:	1c 92       	st	X, r1
     468:	1e 92       	st	-X, r1
     46a:	1a 97       	sbiw	r26, 0x0a	; 10
	eLeft.point1 = 130;
     46c:	42 e8       	ldi	r20, 0x82	; 130
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	1d 96       	adiw	r26, 0x0d	; 13
     472:	5c 93       	st	X, r21
     474:	4e 93       	st	-X, r20
     476:	1c 97       	sbiw	r26, 0x0c	; 12
	eLeft.point2 = 240;
     478:	40 ef       	ldi	r20, 0xF0	; 240
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	1f 96       	adiw	r26, 0x0f	; 15
     47e:	5c 93       	st	X, r21
     480:	4e 93       	st	-X, r20
     482:	1e 97       	sbiw	r26, 0x0e	; 14
	eLeft.slope1 = 2;
     484:	42 e0       	ldi	r20, 0x02	; 2
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	51 96       	adiw	r26, 0x11	; 17
     48a:	5c 93       	st	X, r21
     48c:	4e 93       	st	-X, r20
     48e:	50 97       	sbiw	r26, 0x10	; 16
	eLeft.slope2 = 2;
     490:	53 96       	adiw	r26, 0x13	; 19
     492:	5c 93       	st	X, r21
     494:	4e 93       	st	-X, r20
     496:	52 97       	sbiw	r26, 0x12	; 18
	eLeft.next = &farLeft;
     498:	e1 ed       	ldi	r30, 0xD1	; 209
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ec 0f       	add	r30, r28
     49e:	fd 1f       	adc	r31, r29
     4a0:	55 96       	adiw	r26, 0x15	; 21
     4a2:	fc 93       	st	X, r31
     4a4:	ee 93       	st	-X, r30
     4a6:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type center;
	strcpy(center.name, "center");
     4a8:	17 e0       	ldi	r17, 0x07	; 7
     4aa:	ec e4       	ldi	r30, 0x4C	; 76
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	56 96       	adiw	r26, 0x16	; 22
     4b0:	01 90       	ld	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	1a 95       	dec	r17
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <FLC_steering+0x3e4>
	center.value = 0;
     4b8:	c9 5f       	subi	r28, 0xF9	; 249
     4ba:	de 4f       	sbci	r29, 0xFE	; 254
     4bc:	19 82       	std	Y+1, r1	; 0x01
     4be:	18 82       	st	Y, r1
     4c0:	c7 50       	subi	r28, 0x07	; 7
     4c2:	d1 40       	sbci	r29, 0x01	; 1
	center.point1 = 65;
     4c4:	e1 e4       	ldi	r30, 0x41	; 65
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	c7 5f       	subi	r28, 0xF7	; 247
     4ca:	de 4f       	sbci	r29, 0xFE	; 254
     4cc:	f9 83       	std	Y+1, r31	; 0x01
     4ce:	e8 83       	st	Y, r30
     4d0:	c9 50       	subi	r28, 0x09	; 9
     4d2:	d1 40       	sbci	r29, 0x01	; 1
	center.point2= 185;
     4d4:	e9 eb       	ldi	r30, 0xB9	; 185
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	c5 5f       	subi	r28, 0xF5	; 245
     4da:	de 4f       	sbci	r29, 0xFE	; 254
     4dc:	f9 83       	std	Y+1, r31	; 0x01
     4de:	e8 83       	st	Y, r30
     4e0:	cb 50       	subi	r28, 0x0B	; 11
     4e2:	d1 40       	sbci	r29, 0x01	; 1
	center.slope1 = 2;
     4e4:	c3 5f       	subi	r28, 0xF3	; 243
     4e6:	de 4f       	sbci	r29, 0xFE	; 254
     4e8:	59 83       	std	Y+1, r21	; 0x01
     4ea:	48 83       	st	Y, r20
     4ec:	cd 50       	subi	r28, 0x0D	; 13
     4ee:	d1 40       	sbci	r29, 0x01	; 1
	center.slope2 = 2;
     4f0:	c1 5f       	subi	r28, 0xF1	; 241
     4f2:	de 4f       	sbci	r29, 0xFE	; 254
     4f4:	59 83       	std	Y+1, r21	; 0x01
     4f6:	48 83       	st	Y, r20
     4f8:	cf 50       	subi	r28, 0x0F	; 15
     4fa:	d1 40       	sbci	r29, 0x01	; 1
	center.next = &eLeft;
     4fc:	cf 5e       	subi	r28, 0xEF	; 239
     4fe:	de 4f       	sbci	r29, 0xFE	; 254
     500:	79 83       	std	Y+1, r23	; 0x01
     502:	68 83       	st	Y, r22
     504:	c1 51       	subi	r28, 0x11	; 17
     506:	d1 40       	sbci	r29, 0x01	; 1
	
	struct mf_type eRight;
	strcpy(eRight.name, "eRight");
     508:	7e 01       	movw	r14, r28
     50a:	fd ee       	ldi	r31, 0xED	; 237
     50c:	ef 1a       	sub	r14, r31
     50e:	fe ef       	ldi	r31, 0xFE	; 254
     510:	ff 0a       	sbc	r15, r31
     512:	17 e0       	ldi	r17, 0x07	; 7
     514:	e3 e5       	ldi	r30, 0x53	; 83
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	d7 01       	movw	r26, r14
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	1a 95       	dec	r17
     520:	e1 f7       	brne	.-8      	; 0x51a <FLC_steering+0x44e>
	eRight.value = 0;
     522:	d7 01       	movw	r26, r14
     524:	1b 96       	adiw	r26, 0x0b	; 11
     526:	1c 92       	st	X, r1
     528:	1e 92       	st	-X, r1
     52a:	1a 97       	sbiw	r26, 0x0a	; 10
	eRight.point1 = 10;
     52c:	ea e0       	ldi	r30, 0x0A	; 10
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	1d 96       	adiw	r26, 0x0d	; 13
     532:	fc 93       	st	X, r31
     534:	ee 93       	st	-X, r30
     536:	1c 97       	sbiw	r26, 0x0c	; 12
	eRight.point2= 120;
     538:	e8 e7       	ldi	r30, 0x78	; 120
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	1f 96       	adiw	r26, 0x0f	; 15
     53e:	fc 93       	st	X, r31
     540:	ee 93       	st	-X, r30
     542:	1e 97       	sbiw	r26, 0x0e	; 14
	eRight.slope1 = 2;
     544:	51 96       	adiw	r26, 0x11	; 17
     546:	5c 93       	st	X, r21
     548:	4e 93       	st	-X, r20
     54a:	50 97       	sbiw	r26, 0x10	; 16
	eRight.slope2 = 2;
     54c:	53 96       	adiw	r26, 0x13	; 19
     54e:	5c 93       	st	X, r21
     550:	4e 93       	st	-X, r20
     552:	52 97       	sbiw	r26, 0x12	; 18
	eRight.next = &center;
     554:	ed ef       	ldi	r30, 0xFD	; 253
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	ec 0f       	add	r30, r28
     55a:	fd 1f       	adc	r31, r29
     55c:	55 96       	adiw	r26, 0x15	; 21
     55e:	fc 93       	st	X, r31
     560:	ee 93       	st	-X, r30
     562:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type farRight;
	strcpy(farRight.name, "farRight");
     564:	49 e0       	ldi	r20, 0x09	; 9
     566:	ea e5       	ldi	r30, 0x5A	; 90
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	56 96       	adiw	r26, 0x16	; 22
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	4a 95       	dec	r20
     572:	e1 f7       	brne	.-8      	; 0x56c <FLC_steering+0x4a0>
	farRight.value = 0;
     574:	cd 5c       	subi	r28, 0xCD	; 205
     576:	de 4f       	sbci	r29, 0xFE	; 254
     578:	19 82       	std	Y+1, r1	; 0x01
     57a:	18 82       	st	Y, r1
     57c:	c3 53       	subi	r28, 0x33	; 51
     57e:	d1 40       	sbci	r29, 0x01	; 1
	farRight.point1 = -1;
     580:	4f ef       	ldi	r20, 0xFF	; 255
     582:	5f ef       	ldi	r21, 0xFF	; 255
     584:	cb 5c       	subi	r28, 0xCB	; 203
     586:	de 4f       	sbci	r29, 0xFE	; 254
     588:	59 83       	std	Y+1, r21	; 0x01
     58a:	48 83       	st	Y, r20
     58c:	c5 53       	subi	r28, 0x35	; 53
     58e:	d1 40       	sbci	r29, 0x01	; 1
	farRight.point2= 35;
     590:	43 e2       	ldi	r20, 0x23	; 35
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	c9 5c       	subi	r28, 0xC9	; 201
     596:	de 4f       	sbci	r29, 0xFE	; 254
     598:	59 83       	std	Y+1, r21	; 0x01
     59a:	48 83       	st	Y, r20
     59c:	c7 53       	subi	r28, 0x37	; 55
     59e:	d1 40       	sbci	r29, 0x01	; 1
	farRight.slope1 = 100;
     5a0:	44 e6       	ldi	r20, 0x64	; 100
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	c7 5c       	subi	r28, 0xC7	; 199
     5a6:	de 4f       	sbci	r29, 0xFE	; 254
     5a8:	59 83       	std	Y+1, r21	; 0x01
     5aa:	48 83       	st	Y, r20
     5ac:	c9 53       	subi	r28, 0x39	; 57
     5ae:	d1 40       	sbci	r29, 0x01	; 1
	farRight.slope2 = 4;
     5b0:	c5 5c       	subi	r28, 0xC5	; 197
     5b2:	de 4f       	sbci	r29, 0xFE	; 254
     5b4:	39 83       	std	Y+1, r19	; 0x01
     5b6:	28 83       	st	Y, r18
     5b8:	cb 53       	subi	r28, 0x3B	; 59
     5ba:	d1 40       	sbci	r29, 0x01	; 1
	farRight.next = &eRight;
     5bc:	c3 5c       	subi	r28, 0xC3	; 195
     5be:	de 4f       	sbci	r29, 0xFE	; 254
     5c0:	f9 82       	std	Y+1, r15	; 0x01
     5c2:	e8 82       	st	Y, r14
     5c4:	cd 53       	subi	r28, 0x3D	; 61
     5c6:	d1 40       	sbci	r29, 0x01	; 1
	
	error.membership_functions = &farRight;
     5c8:	a9 e2       	ldi	r26, 0x29	; 41
     5ca:	b1 e0       	ldi	r27, 0x01	; 1
     5cc:	ac 0f       	add	r26, r28
     5ce:	bd 1f       	adc	r27, r29
     5d0:	be 87       	std	Y+14, r27	; 0x0e
     5d2:	ad 87       	std	Y+13, r26	; 0x0d
	error.next = &angle;
     5d4:	d8 8a       	std	Y+16, r13	; 0x10
     5d6:	cf 86       	std	Y+15, r12	; 0x0f
	* max			[2890 2926 2934 2970]
	
	*
	*/
	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     5d8:	9e 01       	movw	r18, r28
     5da:	21 5c       	subi	r18, 0xC1	; 193
     5dc:	3e 4f       	sbci	r19, 0xFE	; 254
     5de:	48 e0       	ldi	r20, 0x08	; 8
     5e0:	e3 e6       	ldi	r30, 0x63	; 99
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	d9 01       	movw	r26, r18
     5e6:	01 90       	ld	r0, Z+
     5e8:	0d 92       	st	X+, r0
     5ea:	4a 95       	dec	r20
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <FLC_steering+0x51a>
	oShLeft.value = 0;
     5ee:	f9 01       	movw	r30, r18
     5f0:	13 86       	std	Z+11, r1	; 0x0b
     5f2:	12 86       	std	Z+10, r1	; 0x0a
	oShLeft.point1 = 2950;
     5f4:	b5 86       	std	Z+13, r11	; 0x0d
     5f6:	a4 86       	std	Z+12, r10	; 0x0c
	oShLeft.point2 = 3061;
     5f8:	97 86       	std	Z+15, r9	; 0x0f
     5fa:	86 86       	std	Z+14, r8	; 0x0e
	oShLeft.slope1 = 1;
     5fc:	91 8b       	std	Z+17, r25	; 0x11
     5fe:	80 8b       	std	Z+16, r24	; 0x10
	oShLeft.slope2 = 100;
     600:	44 e6       	ldi	r20, 0x64	; 100
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	53 8b       	std	Z+19, r21	; 0x13
     606:	42 8b       	std	Z+18, r20	; 0x12
	oShLeft.next = NULL;
     608:	15 8a       	std	Z+21, r1	; 0x15
     60a:	14 8a       	std	Z+20, r1	; 0x14
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     60c:	4e 01       	movw	r8, r28
     60e:	5b ea       	ldi	r21, 0xAB	; 171
     610:	85 1a       	sub	r8, r21
     612:	5e ef       	ldi	r21, 0xFE	; 254
     614:	95 0a       	sbc	r9, r21
     616:	46 e0       	ldi	r20, 0x06	; 6
     618:	eb e6       	ldi	r30, 0x6B	; 107
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	d4 01       	movw	r26, r8
     61e:	01 90       	ld	r0, Z+
     620:	0d 92       	st	X+, r0
     622:	4a 95       	dec	r20
     624:	e1 f7       	brne	.-8      	; 0x61e <FLC_steering+0x552>
	oLeft.value = 0;
     626:	d4 01       	movw	r26, r8
     628:	1b 96       	adiw	r26, 0x0b	; 11
     62a:	1c 92       	st	X, r1
     62c:	1e 92       	st	-X, r1
     62e:	1a 97       	sbiw	r26, 0x0a	; 10
	oLeft.point1 = 2840;
     630:	1d 96       	adiw	r26, 0x0d	; 13
     632:	3c 92       	st	X, r3
     634:	2e 92       	st	-X, r2
     636:	1c 97       	sbiw	r26, 0x0c	; 12
	oLeft.point2 = 3050;
     638:	ea ee       	ldi	r30, 0xEA	; 234
     63a:	fb e0       	ldi	r31, 0x0B	; 11
     63c:	1f 96       	adiw	r26, 0x0f	; 15
     63e:	fc 93       	st	X, r31
     640:	ee 93       	st	-X, r30
     642:	1e 97       	sbiw	r26, 0x0e	; 14
	oLeft.slope1 = 1;
     644:	51 96       	adiw	r26, 0x11	; 17
     646:	9c 93       	st	X, r25
     648:	8e 93       	st	-X, r24
     64a:	50 97       	sbiw	r26, 0x10	; 16
	oLeft.slope2 = 1;
     64c:	53 96       	adiw	r26, 0x13	; 19
     64e:	9c 93       	st	X, r25
     650:	8e 93       	st	-X, r24
     652:	52 97       	sbiw	r26, 0x12	; 18
	oLeft.next = &oShLeft;
     654:	55 96       	adiw	r26, 0x15	; 21
     656:	3c 93       	st	X, r19
     658:	2e 93       	st	-X, r18
     65a:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     65c:	6e 01       	movw	r12, r28
     65e:	f5 e9       	ldi	r31, 0x95	; 149
     660:	cf 1a       	sub	r12, r31
     662:	fe ef       	ldi	r31, 0xFE	; 254
     664:	df 0a       	sbc	r13, r31
     666:	28 e0       	ldi	r18, 0x08	; 8
     668:	e1 e7       	ldi	r30, 0x71	; 113
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	d6 01       	movw	r26, r12
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	2a 95       	dec	r18
     674:	e1 f7       	brne	.-8      	; 0x66e <FLC_steering+0x5a2>
	oSlLeft.value = 0;
     676:	d6 01       	movw	r26, r12
     678:	1b 96       	adiw	r26, 0x0b	; 11
     67a:	1c 92       	st	X, r1
     67c:	1e 92       	st	-X, r1
     67e:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlLeft.point1 = 2670;
     680:	ee e6       	ldi	r30, 0x6E	; 110
     682:	fa e0       	ldi	r31, 0x0A	; 10
     684:	1d 96       	adiw	r26, 0x0d	; 13
     686:	fc 93       	st	X, r31
     688:	ee 93       	st	-X, r30
     68a:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlLeft.point2 = 2920;
     68c:	28 e6       	ldi	r18, 0x68	; 104
     68e:	3b e0       	ldi	r19, 0x0B	; 11
     690:	1f 96       	adiw	r26, 0x0f	; 15
     692:	3c 93       	st	X, r19
     694:	2e 93       	st	-X, r18
     696:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlLeft.slope1 = 1;
     698:	51 96       	adiw	r26, 0x11	; 17
     69a:	9c 93       	st	X, r25
     69c:	8e 93       	st	-X, r24
     69e:	50 97       	sbiw	r26, 0x10	; 16
	oSlLeft.slope2 = 1;
     6a0:	53 96       	adiw	r26, 0x13	; 19
     6a2:	9c 93       	st	X, r25
     6a4:	8e 93       	st	-X, r24
     6a6:	52 97       	sbiw	r26, 0x12	; 18
	oSlLeft.next = &oLeft;
     6a8:	55 96       	adiw	r26, 0x15	; 21
     6aa:	9c 92       	st	X, r9
     6ac:	8e 92       	st	-X, r8
     6ae:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     6b0:	9e 01       	movw	r18, r28
     6b2:	2f 57       	subi	r18, 0x7F	; 127
     6b4:	3e 4f       	sbci	r19, 0xFE	; 254
     6b6:	4a e0       	ldi	r20, 0x0A	; 10
     6b8:	e2 e9       	ldi	r30, 0x92	; 146
     6ba:	f1 e0       	ldi	r31, 0x01	; 1
     6bc:	d9 01       	movw	r26, r18
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	4a 95       	dec	r20
     6c4:	e1 f7       	brne	.-8      	; 0x6be <FLC_steering+0x5f2>
	oStraight.value = 0;
     6c6:	d9 01       	movw	r26, r18
     6c8:	1b 96       	adiw	r26, 0x0b	; 11
     6ca:	1c 92       	st	X, r1
     6cc:	1e 92       	st	-X, r1
     6ce:	1a 97       	sbiw	r26, 0x0a	; 10
	oStraight.point1 = 2540;
     6d0:	ec ee       	ldi	r30, 0xEC	; 236
     6d2:	f9 e0       	ldi	r31, 0x09	; 9
     6d4:	1d 96       	adiw	r26, 0x0d	; 13
     6d6:	fc 93       	st	X, r31
     6d8:	ee 93       	st	-X, r30
     6da:	1c 97       	sbiw	r26, 0x0c	; 12
	oStraight.point2 = 2780;
     6dc:	4c ed       	ldi	r20, 0xDC	; 220
     6de:	5a e0       	ldi	r21, 0x0A	; 10
     6e0:	1f 96       	adiw	r26, 0x0f	; 15
     6e2:	5c 93       	st	X, r21
     6e4:	4e 93       	st	-X, r20
     6e6:	1e 97       	sbiw	r26, 0x0e	; 14
	oStraight.slope1 = 1;
     6e8:	51 96       	adiw	r26, 0x11	; 17
     6ea:	9c 93       	st	X, r25
     6ec:	8e 93       	st	-X, r24
     6ee:	50 97       	sbiw	r26, 0x10	; 16
	oStraight.slope2 = 1;
     6f0:	53 96       	adiw	r26, 0x13	; 19
     6f2:	9c 93       	st	X, r25
     6f4:	8e 93       	st	-X, r24
     6f6:	52 97       	sbiw	r26, 0x12	; 18
	oStraight.next = &oSlLeft;
     6f8:	55 96       	adiw	r26, 0x15	; 21
     6fa:	dc 92       	st	X, r13
     6fc:	ce 92       	st	-X, r12
     6fe:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     700:	8e 01       	movw	r16, r28
     702:	09 56       	subi	r16, 0x69	; 105
     704:	1e 4f       	sbci	r17, 0xFE	; 254
     706:	49 e0       	ldi	r20, 0x09	; 9
     708:	e9 e7       	ldi	r30, 0x79	; 121
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	d8 01       	movw	r26, r16
     70e:	01 90       	ld	r0, Z+
     710:	0d 92       	st	X+, r0
     712:	4a 95       	dec	r20
     714:	e1 f7       	brne	.-8      	; 0x70e <FLC_steering+0x642>
	oSlRight.value = 0;
     716:	d8 01       	movw	r26, r16
     718:	1b 96       	adiw	r26, 0x0b	; 11
     71a:	1c 92       	st	X, r1
     71c:	1e 92       	st	-X, r1
     71e:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlRight.point1 = 2400;
     720:	e0 e6       	ldi	r30, 0x60	; 96
     722:	f9 e0       	ldi	r31, 0x09	; 9
     724:	1d 96       	adiw	r26, 0x0d	; 13
     726:	fc 93       	st	X, r31
     728:	ee 93       	st	-X, r30
     72a:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlRight.point2 = 2650;
     72c:	4a e5       	ldi	r20, 0x5A	; 90
     72e:	5a e0       	ldi	r21, 0x0A	; 10
     730:	1f 96       	adiw	r26, 0x0f	; 15
     732:	5c 93       	st	X, r21
     734:	4e 93       	st	-X, r20
     736:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlRight.slope1 = 1;
     738:	51 96       	adiw	r26, 0x11	; 17
     73a:	9c 93       	st	X, r25
     73c:	8e 93       	st	-X, r24
     73e:	50 97       	sbiw	r26, 0x10	; 16
	oSlRight.slope2 = 1;
     740:	53 96       	adiw	r26, 0x13	; 19
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
     746:	52 97       	sbiw	r26, 0x12	; 18
	oSlRight.next = &oStraight;
     748:	55 96       	adiw	r26, 0x15	; 21
     74a:	3c 93       	st	X, r19
     74c:	2e 93       	st	-X, r18
     74e:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     750:	ae 01       	movw	r20, r28
     752:	43 55       	subi	r20, 0x53	; 83
     754:	5e 4f       	sbci	r21, 0xFE	; 254
     756:	0f 2e       	mov	r0, r31
     758:	f7 e0       	ldi	r31, 0x07	; 7
     75a:	bf 2e       	mov	r11, r31
     75c:	f0 2d       	mov	r31, r0
     75e:	e2 e8       	ldi	r30, 0x82	; 130
     760:	f1 e0       	ldi	r31, 0x01	; 1
     762:	da 01       	movw	r26, r20
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	ba 94       	dec	r11
     76a:	e1 f7       	brne	.-8      	; 0x764 <FLC_steering+0x698>
	oRight.value = 0;
     76c:	da 01       	movw	r26, r20
     76e:	1b 96       	adiw	r26, 0x0b	; 11
     770:	1c 92       	st	X, r1
     772:	1e 92       	st	-X, r1
     774:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     776:	ee ed       	ldi	r30, 0xDE	; 222
     778:	f8 e0       	ldi	r31, 0x08	; 8
     77a:	1d 96       	adiw	r26, 0x0d	; 13
     77c:	fc 93       	st	X, r31
     77e:	ee 93       	st	-X, r30
     780:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     782:	e0 eb       	ldi	r30, 0xB0	; 176
     784:	f9 e0       	ldi	r31, 0x09	; 9
     786:	1f 96       	adiw	r26, 0x0f	; 15
     788:	fc 93       	st	X, r31
     78a:	ee 93       	st	-X, r30
     78c:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     78e:	51 96       	adiw	r26, 0x11	; 17
     790:	9c 93       	st	X, r25
     792:	8e 93       	st	-X, r24
     794:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     796:	53 96       	adiw	r26, 0x13	; 19
     798:	9c 93       	st	X, r25
     79a:	8e 93       	st	-X, r24
     79c:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     79e:	55 96       	adiw	r26, 0x15	; 21
     7a0:	1c 93       	st	X, r17
     7a2:	0e 93       	st	-X, r16
     7a4:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     7a6:	5e 01       	movw	r10, r28
     7a8:	fd e3       	ldi	r31, 0x3D	; 61
     7aa:	af 1a       	sub	r10, r31
     7ac:	fe ef       	ldi	r31, 0xFE	; 254
     7ae:	bf 0a       	sbc	r11, r31
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f9 e0       	ldi	r31, 0x09	; 9
     7b4:	2f 2e       	mov	r2, r31
     7b6:	f0 2d       	mov	r31, r0
     7b8:	e9 e8       	ldi	r30, 0x89	; 137
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	d5 01       	movw	r26, r10
     7be:	01 90       	ld	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	2a 94       	dec	r2
     7c4:	e1 f7       	brne	.-8      	; 0x7be <FLC_steering+0x6f2>
	oShright.value = 0;
     7c6:	d5 01       	movw	r26, r10
     7c8:	1b 96       	adiw	r26, 0x0b	; 11
     7ca:	1c 92       	st	X, r1
     7cc:	1e 92       	st	-X, r1
     7ce:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     7d0:	e3 ed       	ldi	r30, 0xD3	; 211
     7d2:	f8 e0       	ldi	r31, 0x08	; 8
     7d4:	1d 96       	adiw	r26, 0x0d	; 13
     7d6:	fc 93       	st	X, r31
     7d8:	ee 93       	st	-X, r30
     7da:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     7dc:	e2 e4       	ldi	r30, 0x42	; 66
     7de:	f9 e0       	ldi	r31, 0x09	; 9
     7e0:	1f 96       	adiw	r26, 0x0f	; 15
     7e2:	fc 93       	st	X, r31
     7e4:	ee 93       	st	-X, r30
     7e6:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     7e8:	e4 e6       	ldi	r30, 0x64	; 100
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	51 96       	adiw	r26, 0x11	; 17
     7ee:	fc 93       	st	X, r31
     7f0:	ee 93       	st	-X, r30
     7f2:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     7f4:	53 96       	adiw	r26, 0x13	; 19
     7f6:	9c 93       	st	X, r25
     7f8:	8e 93       	st	-X, r24
     7fa:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     7fc:	55 96       	adiw	r26, 0x15	; 21
     7fe:	5c 93       	st	X, r21
     800:	4e 93       	st	-X, r20
     802:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     804:	be a6       	std	Y+46, r11	; 0x2e
     806:	ad a6       	std	Y+45, r10	; 0x2d
	servo.next = NULL;
     808:	18 aa       	std	Y+48, r1	; 0x30
     80a:	1f a6       	std	Y+47, r1	; 0x2f
	*/
	
	
	/* rule # 15: if eRight and slRight then oSlLeft */
	struct rule_element_type then15;
	then15.value = &oSlLeft.value;
     80c:	5e 01       	movw	r10, r28
     80e:	f7 e2       	ldi	r31, 0x27	; 39
     810:	af 1a       	sub	r10, r31
     812:	fe ef       	ldi	r31, 0xFE	; 254
     814:	bf 0a       	sbc	r11, r31
     816:	16 01       	movw	r2, r12
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	28 0e       	add	r2, r24
     81c:	31 1c       	adc	r3, r1
     81e:	d5 01       	movw	r26, r10
     820:	11 96       	adiw	r26, 0x01	; 1
     822:	3c 92       	st	X, r3
     824:	2e 92       	st	-X, r2
	then15.next = NULL;
     826:	13 96       	adiw	r26, 0x03	; 3
     828:	1c 92       	st	X, r1
     82a:	1e 92       	st	-X, r1
     82c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if152;
	if152.value = &slRight.value;
     82e:	14 96       	adiw	r26, 0x04	; 4
     830:	ea e0       	ldi	r30, 0x0A	; 10
     832:	6e 0e       	add	r6, r30
     834:	71 1c       	adc	r7, r1
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	7c 92       	st	X, r7
     83a:	6e 92       	st	-X, r6
	if152.next = NULL;
     83c:	13 96       	adiw	r26, 0x03	; 3
     83e:	1c 92       	st	X, r1
     840:	1e 92       	st	-X, r1
     842:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if151;
	if151.value = &eRight.value;
     844:	ce 01       	movw	r24, r28
     846:	8f 51       	subi	r24, 0x1F	; 31
     848:	9e 4f       	sbci	r25, 0xFE	; 254
     84a:	fa e0       	ldi	r31, 0x0A	; 10
     84c:	ef 0e       	add	r14, r31
     84e:	f1 1c       	adc	r15, r1
     850:	fc 01       	movw	r30, r24
     852:	f1 82       	std	Z+1, r15	; 0x01
     854:	e0 82       	st	Z, r14
	if151.next = &if152;
     856:	b3 83       	std	Z+3, r27	; 0x03
     858:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule15;
	rule15.if_side = &if151;
     85a:	18 96       	adiw	r26, 0x08	; 8
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	9c 93       	st	X, r25
     860:	8e 93       	st	-X, r24
	rule15.then_side = &then15;
     862:	13 96       	adiw	r26, 0x03	; 3
     864:	bc 92       	st	X, r11
     866:	ae 92       	st	-X, r10
     868:	12 97       	sbiw	r26, 0x02	; 2
	rule15.next = NULL;
     86a:	15 96       	adiw	r26, 0x05	; 5
     86c:	1c 92       	st	X, r1
     86e:	1e 92       	st	-X, r1
     870:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 14: if eRight and right then oSlLeft */
	struct rule_element_type then14;
	then14.value = &oSlLeft.value;
     872:	5e 01       	movw	r10, r28
     874:	f5 e1       	ldi	r31, 0x15	; 21
     876:	af 1a       	sub	r10, r31
     878:	fe ef       	ldi	r31, 0xFE	; 254
     87a:	bf 0a       	sbc	r11, r31
     87c:	f5 01       	movw	r30, r10
     87e:	31 82       	std	Z+1, r3	; 0x01
     880:	20 82       	st	Z, r2
	then14.next = NULL;
     882:	13 82       	std	Z+3, r1	; 0x03
     884:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if142;
	if142.value = &right.value;
     886:	fa e0       	ldi	r31, 0x0A	; 10
     888:	4f 0e       	add	r4, r31
     88a:	51 1c       	adc	r5, r1
     88c:	c1 51       	subi	r28, 0x11	; 17
     88e:	de 4f       	sbci	r29, 0xFE	; 254
     890:	59 82       	std	Y+1, r5	; 0x01
     892:	48 82       	st	Y, r4
     894:	cf 5e       	subi	r28, 0xEF	; 239
     896:	d1 40       	sbci	r29, 0x01	; 1
	if142.next = NULL;
     898:	cf 50       	subi	r28, 0x0F	; 15
     89a:	de 4f       	sbci	r29, 0xFE	; 254
     89c:	19 82       	std	Y+1, r1	; 0x01
     89e:	18 82       	st	Y, r1
     8a0:	c1 5f       	subi	r28, 0xF1	; 241
     8a2:	d1 40       	sbci	r29, 0x01	; 1
	
	struct rule_element_type if141;
	if141.value = &eRight.value;
     8a4:	6e 01       	movw	r12, r28
     8a6:	8d e0       	ldi	r24, 0x0D	; 13
     8a8:	c8 1a       	sub	r12, r24
     8aa:	8e ef       	ldi	r24, 0xFE	; 254
     8ac:	d8 0a       	sbc	r13, r24
     8ae:	f6 01       	movw	r30, r12
     8b0:	f1 82       	std	Z+1, r15	; 0x01
     8b2:	e0 82       	st	Z, r14
	if141.next = &if142;
     8b4:	8f ee       	ldi	r24, 0xEF	; 239
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	8c 0f       	add	r24, r28
     8ba:	9d 1f       	adc	r25, r29
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
	
	struct rule_type rule14;
	rule14.if_side = &if141;
     8c0:	34 96       	adiw	r30, 0x04	; 4
     8c2:	d1 82       	std	Z+1, r13	; 0x01
     8c4:	c0 82       	st	Z, r12
	rule14.then_side = &then14;
     8c6:	b3 82       	std	Z+3, r11	; 0x03
     8c8:	a2 82       	std	Z+2, r10	; 0x02
	rule14.next = &rule15;
     8ca:	b5 83       	std	Z+5, r27	; 0x05
     8cc:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 13: if eLeft and slLeft then oSlRight */
	struct rule_element_type then13;
	then13.value = &oSlRight.value;
     8ce:	5e 01       	movw	r10, r28
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	a9 1a       	sub	r10, r25
     8d4:	9e ef       	ldi	r25, 0xFE	; 254
     8d6:	b9 0a       	sbc	r11, r25
     8d8:	06 5f       	subi	r16, 0xF6	; 246
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	d5 01       	movw	r26, r10
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	1c 93       	st	X, r17
     8e2:	0e 93       	st	-X, r16
	then13.next = NULL;
     8e4:	13 96       	adiw	r26, 0x03	; 3
     8e6:	1c 92       	st	X, r1
     8e8:	1e 92       	st	-X, r1
     8ea:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if132;
	if132.value = &slLeft.value;
     8ec:	6e 01       	movw	r12, r28
     8ee:	bf ef       	ldi	r27, 0xFF	; 255
     8f0:	cb 1a       	sub	r12, r27
     8f2:	bd ef       	ldi	r27, 0xFD	; 253
     8f4:	db 0a       	sbc	r13, r27
     8f6:	83 e6       	ldi	r24, 0x63	; 99
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	8c 0f       	add	r24, r28
     8fc:	9d 1f       	adc	r25, r29
     8fe:	0a 96       	adiw	r24, 0x0a	; 10
     900:	cb 52       	subi	r28, 0x2B	; 43
     902:	dd 4f       	sbci	r29, 0xFD	; 253
     904:	99 83       	std	Y+1, r25	; 0x01
     906:	88 83       	st	Y, r24
     908:	c5 5d       	subi	r28, 0xD5	; 213
     90a:	d2 40       	sbci	r29, 0x02	; 2
     90c:	d6 01       	movw	r26, r12
     90e:	11 96       	adiw	r26, 0x01	; 1
     910:	9c 93       	st	X, r25
     912:	8e 93       	st	-X, r24
	if132.next = NULL;
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	1c 92       	st	X, r1
     918:	1e 92       	st	-X, r1
     91a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if131;
	if131.value = &eLeft.value;
     91c:	88 56       	subi	r24, 0x68	; 104
     91e:	9e 4f       	sbci	r25, 0xFE	; 254
     920:	66 5f       	subi	r22, 0xF6	; 246
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	dc 01       	movw	r26, r24
     926:	11 96       	adiw	r26, 0x01	; 1
     928:	7c 93       	st	X, r23
     92a:	6e 93       	st	-X, r22
	if131.next = &if132;
     92c:	13 96       	adiw	r26, 0x03	; 3
     92e:	dc 92       	st	X, r13
     930:	ce 92       	st	-X, r12
     932:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule13;
	rule13.if_side = &if131;
     934:	6e 01       	movw	r12, r28
     936:	b7 ef       	ldi	r27, 0xF7	; 247
     938:	cb 1a       	sub	r12, r27
     93a:	bd ef       	ldi	r27, 0xFD	; 253
     93c:	db 0a       	sbc	r13, r27
     93e:	d6 01       	movw	r26, r12
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	9c 93       	st	X, r25
     944:	8e 93       	st	-X, r24
	rule13.then_side = &then13;
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	bc 92       	st	X, r11
     94a:	ae 92       	st	-X, r10
     94c:	12 97       	sbiw	r26, 0x02	; 2
	rule13.next = &rule14;
     94e:	15 96       	adiw	r26, 0x05	; 5
     950:	fc 93       	st	X, r31
     952:	ee 93       	st	-X, r30
     954:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 12: if eLeft and left then oSlRight */
	struct rule_element_type then12;
	then12.value = &oSlRight.value;
     956:	5e 01       	movw	r10, r28
     958:	b1 ef       	ldi	r27, 0xF1	; 241
     95a:	ab 1a       	sub	r10, r27
     95c:	bd ef       	ldi	r27, 0xFD	; 253
     95e:	bb 0a       	sbc	r11, r27
     960:	f5 01       	movw	r30, r10
     962:	11 83       	std	Z+1, r17	; 0x01
     964:	00 83       	st	Z, r16
	then12.next = NULL;
     966:	13 82       	std	Z+3, r1	; 0x03
     968:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if122;
	if122.value = &left.value;
     96a:	34 96       	adiw	r30, 0x04	; 4
     96c:	8d e4       	ldi	r24, 0x4D	; 77
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8c 0f       	add	r24, r28
     972:	9d 1f       	adc	r25, r29
     974:	0a 96       	adiw	r24, 0x0a	; 10
     976:	c9 52       	subi	r28, 0x29	; 41
     978:	dd 4f       	sbci	r29, 0xFD	; 253
     97a:	99 83       	std	Y+1, r25	; 0x01
     97c:	88 83       	st	Y, r24
     97e:	c7 5d       	subi	r28, 0xD7	; 215
     980:	d2 40       	sbci	r29, 0x02	; 2
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	80 83       	st	Z, r24
	if122.next = NULL;
     986:	13 82       	std	Z+3, r1	; 0x03
     988:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if121;
	if121.value = &eLeft.value;
     98a:	80 54       	subi	r24, 0x40	; 64
     98c:	9e 4f       	sbci	r25, 0xFE	; 254
     98e:	dc 01       	movw	r26, r24
     990:	11 96       	adiw	r26, 0x01	; 1
     992:	7c 93       	st	X, r23
     994:	6e 93       	st	-X, r22
	if121.next = &if122;
     996:	13 96       	adiw	r26, 0x03	; 3
     998:	fc 93       	st	X, r31
     99a:	ee 93       	st	-X, r30
     99c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule12;
	rule12.if_side = &if121;
     99e:	38 96       	adiw	r30, 0x08	; 8
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	80 83       	st	Z, r24
	rule12.then_side = &then12;
     9a4:	b3 82       	std	Z+3, r11	; 0x03
     9a6:	a2 82       	std	Z+2, r10	; 0x02
	rule12.next = &rule13;
     9a8:	d5 82       	std	Z+5, r13	; 0x05
     9aa:	c4 82       	std	Z+4, r12	; 0x04
	
	/* rule # 11: if eLeft and straight then slRight */
	struct rule_element_type then11;
	then11.value = &slRight.value;
     9ac:	cf 5d       	subi	r28, 0xDF	; 223
     9ae:	dd 4f       	sbci	r29, 0xFD	; 253
     9b0:	79 82       	std	Y+1, r7	; 0x01
     9b2:	68 82       	st	Y, r6
     9b4:	c1 52       	subi	r28, 0x21	; 33
     9b6:	d2 40       	sbci	r29, 0x02	; 2
	then11.next = NULL;
     9b8:	cd 5d       	subi	r28, 0xDD	; 221
     9ba:	dd 4f       	sbci	r29, 0xFD	; 253
     9bc:	19 82       	std	Y+1, r1	; 0x01
     9be:	18 82       	st	Y, r1
     9c0:	c3 52       	subi	r28, 0x23	; 35
     9c2:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if112;
	if112.value = &straight.value;
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f9 e7       	ldi	r31, 0x79	; 121
     9c8:	af 2e       	mov	r10, r31
     9ca:	b1 2c       	mov	r11, r1
     9cc:	f0 2d       	mov	r31, r0
     9ce:	ac 0e       	add	r10, r28
     9d0:	bd 1e       	adc	r11, r29
     9d2:	ba e0       	ldi	r27, 0x0A	; 10
     9d4:	ab 0e       	add	r10, r27
     9d6:	b1 1c       	adc	r11, r1
     9d8:	cb 5d       	subi	r28, 0xDB	; 219
     9da:	dd 4f       	sbci	r29, 0xFD	; 253
     9dc:	b9 82       	std	Y+1, r11	; 0x01
     9de:	a8 82       	st	Y, r10
     9e0:	c5 52       	subi	r28, 0x25	; 37
     9e2:	d2 40       	sbci	r29, 0x02	; 2
	if112.next = NULL;
     9e4:	c9 5d       	subi	r28, 0xD9	; 217
     9e6:	dd 4f       	sbci	r29, 0xFD	; 253
     9e8:	19 82       	std	Y+1, r1	; 0x01
     9ea:	18 82       	st	Y, r1
     9ec:	c7 52       	subi	r28, 0x27	; 39
     9ee:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if111;
	if111.value = &eLeft.value;
     9f0:	6e 01       	movw	r12, r28
     9f2:	87 ed       	ldi	r24, 0xD7	; 215
     9f4:	c8 1a       	sub	r12, r24
     9f6:	8d ef       	ldi	r24, 0xFD	; 253
     9f8:	d8 0a       	sbc	r13, r24
     9fa:	d6 01       	movw	r26, r12
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	7c 93       	st	X, r23
     a00:	6e 93       	st	-X, r22
	if111.next = &if112;
     a02:	85 e2       	ldi	r24, 0x25	; 37
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	8c 0f       	add	r24, r28
     a08:	9d 1f       	adc	r25, r29
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	9c 93       	st	X, r25
     a0e:	8e 93       	st	-X, r24
     a10:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule11;
	rule11.if_side = &if111;
     a12:	14 96       	adiw	r26, 0x04	; 4
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	dc 92       	st	X, r13
     a18:	ce 92       	st	-X, r12
	rule11.then_side = &then11;
     a1a:	81 e2       	ldi	r24, 0x21	; 33
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	8c 0f       	add	r24, r28
     a20:	9d 1f       	adc	r25, r29
     a22:	13 96       	adiw	r26, 0x03	; 3
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
     a28:	12 97       	sbiw	r26, 0x02	; 2
	rule11.next = &rule12;
     a2a:	15 96       	adiw	r26, 0x05	; 5
     a2c:	fc 93       	st	X, r31
     a2e:	ee 93       	st	-X, r30
     a30:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 10: if eLeft and slRight then oslRight */
	struct rule_element_type then10;
	then10.value = &oSlRight.value;
     a32:	cd 5c       	subi	r28, 0xCD	; 205
     a34:	dd 4f       	sbci	r29, 0xFD	; 253
     a36:	19 83       	std	Y+1, r17	; 0x01
     a38:	08 83       	st	Y, r16
     a3a:	c3 53       	subi	r28, 0x33	; 51
     a3c:	d2 40       	sbci	r29, 0x02	; 2
	then10.next = NULL;
     a3e:	cb 5c       	subi	r28, 0xCB	; 203
     a40:	dd 4f       	sbci	r29, 0xFD	; 253
     a42:	19 82       	std	Y+1, r1	; 0x01
     a44:	18 82       	st	Y, r1
     a46:	c5 53       	subi	r28, 0x35	; 53
     a48:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if102;
	if102.value = &slRight.value;
     a4a:	c9 5c       	subi	r28, 0xC9	; 201
     a4c:	dd 4f       	sbci	r29, 0xFD	; 253
     a4e:	79 82       	std	Y+1, r7	; 0x01
     a50:	68 82       	st	Y, r6
     a52:	c7 53       	subi	r28, 0x37	; 55
     a54:	d2 40       	sbci	r29, 0x02	; 2
	if102.next = NULL;
     a56:	c7 5c       	subi	r28, 0xC7	; 199
     a58:	dd 4f       	sbci	r29, 0xFD	; 253
     a5a:	19 82       	std	Y+1, r1	; 0x01
     a5c:	18 82       	st	Y, r1
     a5e:	c9 53       	subi	r28, 0x39	; 57
     a60:	d2 40       	sbci	r29, 0x02	; 2
	
	struct rule_element_type if101;
	if101.value = &eLeft.value;
     a62:	6e 01       	movw	r12, r28
     a64:	95 ec       	ldi	r25, 0xC5	; 197
     a66:	c9 1a       	sub	r12, r25
     a68:	9d ef       	ldi	r25, 0xFD	; 253
     a6a:	d9 0a       	sbc	r13, r25
     a6c:	f6 01       	movw	r30, r12
     a6e:	71 83       	std	Z+1, r23	; 0x01
     a70:	60 83       	st	Z, r22
	if101.next = &if102;
     a72:	87 e3       	ldi	r24, 0x37	; 55
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	8c 0f       	add	r24, r28
     a78:	9d 1f       	adc	r25, r29
     a7a:	93 83       	std	Z+3, r25	; 0x03
     a7c:	82 83       	std	Z+2, r24	; 0x02
	
	struct rule_type rule10;
	rule10.if_side = &if101;
     a7e:	34 96       	adiw	r30, 0x04	; 4
     a80:	d1 82       	std	Z+1, r13	; 0x01
     a82:	c0 82       	st	Z, r12
	rule10.then_side = &then10;
     a84:	83 e3       	ldi	r24, 0x33	; 51
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	8c 0f       	add	r24, r28
     a8a:	9d 1f       	adc	r25, r29
     a8c:	93 83       	std	Z+3, r25	; 0x03
     a8e:	82 83       	std	Z+2, r24	; 0x02
	rule10.next = &rule11;
     a90:	b5 83       	std	Z+5, r27	; 0x05
     a92:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 9: if eLeft and Right then oSlRight */
	struct rule_element_type then9;
	then9.value = &oSlRight.value;
     a94:	42 96       	adiw	r24, 0x12	; 18
     a96:	dc 01       	movw	r26, r24
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	1c 93       	st	X, r17
     a9c:	0e 93       	st	-X, r16
	then9.next = NULL;
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	1c 92       	st	X, r1
     aa2:	1e 92       	st	-X, r1
     aa4:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if92;
	if92.value = &right.value;
     aa6:	6e 01       	movw	r12, r28
     aa8:	b7 eb       	ldi	r27, 0xB7	; 183
     aaa:	cb 1a       	sub	r12, r27
     aac:	bd ef       	ldi	r27, 0xFD	; 253
     aae:	db 0a       	sbc	r13, r27
     ab0:	d6 01       	movw	r26, r12
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	5c 92       	st	X, r5
     ab6:	4e 92       	st	-X, r4
	if92.next = NULL;
     ab8:	13 96       	adiw	r26, 0x03	; 3
     aba:	1c 92       	st	X, r1
     abc:	1e 92       	st	-X, r1
     abe:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if91;
	if91.value = &eLeft.value;
     ac0:	04 55       	subi	r16, 0x54	; 84
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	d8 01       	movw	r26, r16
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	7c 93       	st	X, r23
     aca:	6e 93       	st	-X, r22
	if91.next = &if92;
     acc:	13 96       	adiw	r26, 0x03	; 3
     ace:	dc 92       	st	X, r13
     ad0:	ce 92       	st	-X, r12
     ad2:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule9;
	rule9.if_side = &if91;
     ad4:	14 96       	adiw	r26, 0x04	; 4
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 93       	st	X, r17
     ada:	0e 93       	st	-X, r16
	rule9.then_side = &then9;
     adc:	13 96       	adiw	r26, 0x03	; 3
     ade:	9c 93       	st	X, r25
     ae0:	8e 93       	st	-X, r24
     ae2:	12 97       	sbiw	r26, 0x02	; 2
	rule9.next = &rule10;
     ae4:	15 96       	adiw	r26, 0x05	; 5
     ae6:	fc 93       	st	X, r31
     ae8:	ee 93       	st	-X, r30
     aea:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 8: if eLeft and shRight then oRight */
	struct rule_element_type then8;
	then8.value = &oRight.value;
     aec:	6e 01       	movw	r12, r28
     aee:	e9 ea       	ldi	r30, 0xA9	; 169
     af0:	ce 1a       	sub	r12, r30
     af2:	ed ef       	ldi	r30, 0xFD	; 253
     af4:	de 0a       	sbc	r13, r30
     af6:	46 5f       	subi	r20, 0xF6	; 246
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	f6 01       	movw	r30, r12
     afc:	51 83       	std	Z+1, r21	; 0x01
     afe:	40 83       	st	Z, r20
	then8.next = NULL;
     b00:	13 82       	std	Z+3, r1	; 0x03
     b02:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if82;
	if82.value = &shRight.value;
     b04:	02 5f       	subi	r16, 0xF2	; 242
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	8b eb       	ldi	r24, 0xBB	; 187
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	8c 0f       	add	r24, r28
     b0e:	9d 1f       	adc	r25, r29
     b10:	0a 96       	adiw	r24, 0x0a	; 10
     b12:	f8 01       	movw	r30, r16
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
	if82.next = NULL;
     b18:	13 82       	std	Z+3, r1	; 0x03
     b1a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if81;
	if81.value = &eLeft.value;
     b1c:	86 56       	subi	r24, 0x66	; 102
     b1e:	9e 4f       	sbci	r25, 0xFE	; 254
     b20:	fc 01       	movw	r30, r24
     b22:	71 83       	std	Z+1, r23	; 0x01
     b24:	60 83       	st	Z, r22
	if81.next = &if82;
     b26:	13 83       	std	Z+3, r17	; 0x03
     b28:	02 83       	std	Z+2, r16	; 0x02
	
	struct rule_type rule8;
	rule8.if_side = &if81;
     b2a:	6e 58       	subi	r22, 0x8E	; 142
     b2c:	7e 4f       	sbci	r23, 0xFE	; 254
     b2e:	fb 01       	movw	r30, r22
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
	rule8.then_side = &then8;
     b34:	d3 82       	std	Z+3, r13	; 0x03
     b36:	c2 82       	std	Z+2, r12	; 0x02
	rule8.next = &rule9;
     b38:	b5 83       	std	Z+5, r27	; 0x05
     b3a:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 7: if center then oStraight */
	struct rule_element_type then7;
	then7.value = &oStraight.value;
     b3c:	58 96       	adiw	r26, 0x18	; 24
     b3e:	26 5f       	subi	r18, 0xF6	; 246
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	3c 93       	st	X, r19
     b46:	2e 93       	st	-X, r18
	then7.next = NULL;
     b48:	13 96       	adiw	r26, 0x03	; 3
     b4a:	1c 92       	st	X, r1
     b4c:	1e 92       	st	-X, r1
     b4e:	12 97       	sbiw	r26, 0x02	; 2

	
	struct rule_element_type if71;
	if71.value = &center.value;
     b50:	0e 96       	adiw	r24, 0x0e	; 14
     b52:	2d ef       	ldi	r18, 0xFD	; 253
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	2c 0f       	add	r18, r28
     b58:	3d 1f       	adc	r19, r29
     b5a:	26 5f       	subi	r18, 0xF6	; 246
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	fc 01       	movw	r30, r24
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
	if71.next = NULL;
     b64:	13 82       	std	Z+3, r1	; 0x03
     b66:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_type rule7;
	rule7.if_side = &if71;
     b68:	34 96       	adiw	r30, 0x04	; 4
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24
	rule7.then_side = &then7;
     b6e:	b3 83       	std	Z+3, r27	; 0x03
     b70:	a2 83       	std	Z+2, r26	; 0x02
	rule7.next = &rule8;
     b72:	75 83       	std	Z+5, r23	; 0x05
     b74:	64 83       	std	Z+4, r22	; 0x04
	
	
	/* rule # 6: if eRight and straight then oSlLeft */
	struct rule_element_type then6;
	then6.value = &oSlLeft.value;
     b76:	6c 5e       	subi	r22, 0xEC	; 236
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	db 01       	movw	r26, r22
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	3c 92       	st	X, r3
     b80:	2e 92       	st	-X, r2
	then6.next = NULL;
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	1c 92       	st	X, r1
     b86:	1e 92       	st	-X, r1
     b88:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if62;
	if62.value = &straight.value;
     b8a:	0e 96       	adiw	r24, 0x0e	; 14
     b8c:	dc 01       	movw	r26, r24
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	bc 92       	st	X, r11
     b92:	ae 92       	st	-X, r10
	if62.next = NULL;
     b94:	13 96       	adiw	r26, 0x03	; 3
     b96:	1c 92       	st	X, r1
     b98:	1e 92       	st	-X, r1
     b9a:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if61;
	if61.value = &eRight.value;
     b9c:	28 58       	subi	r18, 0x88	; 136
     b9e:	3e 4f       	sbci	r19, 0xFE	; 254
     ba0:	d9 01       	movw	r26, r18
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	fc 92       	st	X, r15
     ba6:	ee 92       	st	-X, r14
	if61.next = &if62;
     ba8:	13 96       	adiw	r26, 0x03	; 3
     baa:	9c 93       	st	X, r25
     bac:	8e 93       	st	-X, r24
     bae:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule6;
	rule6.if_side = &if61;
     bb0:	08 96       	adiw	r24, 0x08	; 8
     bb2:	dc 01       	movw	r26, r24
     bb4:	11 96       	adiw	r26, 0x01	; 1
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
	rule6.then_side = &then6;
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	7c 93       	st	X, r23
     bbe:	6e 93       	st	-X, r22
     bc0:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	fc 93       	st	X, r31
     bc6:	ee 93       	st	-X, r30
     bc8:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 5: if eRight and slLeft then oSlLeft */
	struct rule_element_type then5;
	then5.value = &oSlLeft.value;
     bca:	16 96       	adiw	r26, 0x06	; 6
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	3c 92       	st	X, r3
     bd0:	2e 92       	st	-X, r2
	then5.next = NULL;
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	1c 92       	st	X, r1
     bd6:	1e 92       	st	-X, r1
     bd8:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if52;
	if52.value = &slLeft.value;
     bda:	6a 5e       	subi	r22, 0xEA	; 234
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	cb 52       	subi	r28, 0x2B	; 43
     be0:	dd 4f       	sbci	r29, 0xFD	; 253
     be2:	28 81       	ld	r18, Y
     be4:	39 81       	ldd	r19, Y+1	; 0x01
     be6:	c5 5d       	subi	r28, 0xD5	; 213
     be8:	d2 40       	sbci	r29, 0x02	; 2
     bea:	fb 01       	movw	r30, r22
     bec:	31 83       	std	Z+1, r19	; 0x01
     bee:	20 83       	st	Z, r18
	if52.next = NULL;
     bf0:	13 82       	std	Z+3, r1	; 0x03
     bf2:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if51;
	if51.value = &eRight.value;
     bf4:	9e 01       	movw	r18, r28
     bf6:	2f 56       	subi	r18, 0x6F	; 111
     bf8:	3d 4f       	sbci	r19, 0xFD	; 253
     bfa:	f9 01       	movw	r30, r18
     bfc:	f1 82       	std	Z+1, r15	; 0x01
     bfe:	e0 82       	st	Z, r14
	if51.next = &if52;
     c00:	73 83       	std	Z+3, r23	; 0x03
     c02:	62 83       	std	Z+2, r22	; 0x02
	
	struct rule_type rule5;
	rule5.if_side = &if51;
     c04:	34 96       	adiw	r30, 0x04	; 4
     c06:	31 83       	std	Z+1, r19	; 0x01
     c08:	20 83       	st	Z, r18
	rule5.then_side = &then5;
     c0a:	b3 83       	std	Z+3, r27	; 0x03
     c0c:	a2 83       	std	Z+2, r26	; 0x02
	rule5.next = &rule6;
     c0e:	95 83       	std	Z+5, r25	; 0x05
     c10:	84 83       	std	Z+4, r24	; 0x04
	
	/* rule # 4: if eRight and left then oSlLeft */
	struct rule_element_type then4;
	then4.value = &oSlLeft.value;
     c12:	62 5f       	subi	r22, 0xF2	; 242
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	db 01       	movw	r26, r22
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	3c 92       	st	X, r3
     c1c:	2e 92       	st	-X, r2
	then4.next = NULL;
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	1c 92       	st	X, r1
     c22:	1e 92       	st	-X, r1
     c24:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &left.value;
     c26:	4c 96       	adiw	r24, 0x1c	; 28
     c28:	c9 52       	subi	r28, 0x29	; 41
     c2a:	dd 4f       	sbci	r29, 0xFD	; 253
     c2c:	28 81       	ld	r18, Y
     c2e:	39 81       	ldd	r19, Y+1	; 0x01
     c30:	c7 5d       	subi	r28, 0xD7	; 215
     c32:	d2 40       	sbci	r29, 0x02	; 2
     c34:	dc 01       	movw	r26, r24
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	3c 93       	st	X, r19
     c3a:	2e 93       	st	-X, r18
	if42.next = NULL;
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	1c 92       	st	X, r1
     c40:	1e 92       	st	-X, r1
     c42:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &eRight.value;
     c44:	9e 01       	movw	r18, r28
     c46:	2d 55       	subi	r18, 0x5D	; 93
     c48:	3d 4f       	sbci	r19, 0xFD	; 253
     c4a:	d9 01       	movw	r26, r18
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	fc 92       	st	X, r15
     c50:	ee 92       	st	-X, r14
	if41.next = &if42;
     c52:	13 96       	adiw	r26, 0x03	; 3
     c54:	9c 93       	st	X, r25
     c56:	8e 93       	st	-X, r24
     c58:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule4;
	rule4.if_side = &if41;
     c5a:	08 96       	adiw	r24, 0x08	; 8
     c5c:	dc 01       	movw	r26, r24
     c5e:	11 96       	adiw	r26, 0x01	; 1
     c60:	3c 93       	st	X, r19
     c62:	2e 93       	st	-X, r18
	rule4.then_side = &then4;
     c64:	13 96       	adiw	r26, 0x03	; 3
     c66:	7c 93       	st	X, r23
     c68:	6e 93       	st	-X, r22
     c6a:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     c6c:	15 96       	adiw	r26, 0x05	; 5
     c6e:	fc 93       	st	X, r31
     c70:	ee 93       	st	-X, r30
     c72:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 3: if eRight and sharpLeft then left */
	struct rule_element_type then3;
	then3.value = &oLeft.value;
     c74:	6e 5e       	subi	r22, 0xEE	; 238
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	ba e0       	ldi	r27, 0x0A	; 10
     c7a:	8b 0e       	add	r8, r27
     c7c:	91 1c       	adc	r9, r1
     c7e:	fb 01       	movw	r30, r22
     c80:	91 82       	std	Z+1, r9	; 0x01
     c82:	80 82       	st	Z, r8
	then3.next = NULL;
     c84:	13 82       	std	Z+3, r1	; 0x03
     c86:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &shLeft.value;
     c88:	de 01       	movw	r26, r28
     c8a:	af 54       	subi	r26, 0x4F	; 79
     c8c:	bd 4f       	sbci	r27, 0xFD	; 253
     c8e:	27 e3       	ldi	r18, 0x37	; 55
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	2c 0f       	add	r18, r28
     c94:	3d 1f       	adc	r19, r29
     c96:	26 5f       	subi	r18, 0xF6	; 246
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	3c 93       	st	X, r19
     c9e:	2e 93       	st	-X, r18
	if32.next = NULL;
     ca0:	13 96       	adiw	r26, 0x03	; 3
     ca2:	1c 92       	st	X, r1
     ca4:	1e 92       	st	-X, r1
     ca6:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &eRight.value;
     ca8:	2c 58       	subi	r18, 0x8C	; 140
     caa:	3d 4f       	sbci	r19, 0xFD	; 253
     cac:	f9 01       	movw	r30, r18
     cae:	f1 82       	std	Z+1, r15	; 0x01
     cb0:	e0 82       	st	Z, r14
	if31.next = &if32;
     cb2:	b3 83       	std	Z+3, r27	; 0x03
     cb4:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule3;
	rule3.if_side = &if31;
     cb6:	18 96       	adiw	r26, 0x08	; 8
     cb8:	11 96       	adiw	r26, 0x01	; 1
     cba:	3c 93       	st	X, r19
     cbc:	2e 93       	st	-X, r18
	rule3.then_side = &then3;
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	7c 93       	st	X, r23
     cc2:	6e 93       	st	-X, r22
     cc4:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     cc6:	15 96       	adiw	r26, 0x05	; 5
     cc8:	9c 93       	st	X, r25
     cca:	8e 93       	st	-X, r24
     ccc:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 2: if farLeft then right */
	struct rule_element_type if21;
	if21.value = &farLeft.value;
     cce:	48 96       	adiw	r24, 0x18	; 24
     cd0:	21 ed       	ldi	r18, 0xD1	; 209
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	2c 0f       	add	r18, r28
     cd6:	3d 1f       	adc	r19, r29
     cd8:	26 5f       	subi	r18, 0xF6	; 246
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	31 83       	std	Z+1, r19	; 0x01
     ce0:	20 83       	st	Z, r18
	if21.next = NULL;
     ce2:	13 82       	std	Z+3, r1	; 0x03
     ce4:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type then2;
	then2.value = &oRight.value;
     ce6:	28 51       	subi	r18, 0x18	; 24
     ce8:	3e 4f       	sbci	r19, 0xFE	; 254
     cea:	f9 01       	movw	r30, r18
     cec:	51 83       	std	Z+1, r21	; 0x01
     cee:	40 83       	st	Z, r20
	then2.next = NULL;
     cf0:	13 82       	std	Z+3, r1	; 0x03
     cf2:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_type rule2;
	rule2.if_side = &if21;
     cf4:	34 96       	adiw	r30, 0x04	; 4
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
	rule2.then_side = &then2;
     cfa:	33 83       	std	Z+3, r19	; 0x03
     cfc:	22 83       	std	Z+2, r18	; 0x02
	rule2.next = &rule3;
     cfe:	b5 83       	std	Z+5, r27	; 0x05
     d00:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 1: if farRight then oLeft */
	struct rule_element_type if11;
	if11.value = &farRight.value;
     d02:	0e 96       	adiw	r24, 0x0e	; 14
     d04:	29 e2       	ldi	r18, 0x29	; 41
     d06:	31 e0       	ldi	r19, 0x01	; 1
     d08:	2c 0f       	add	r18, r28
     d0a:	3d 1f       	adc	r19, r29
     d0c:	26 5f       	subi	r18, 0xF6	; 246
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	dc 01       	movw	r26, r24
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	3c 93       	st	X, r19
     d16:	2e 93       	st	-X, r18
	if11.next = NULL;
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	1c 92       	st	X, r1
     d1c:	1e 92       	st	-X, r1
     d1e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type then1;
	then1.value = &oLeft.value;
     d20:	14 96       	adiw	r26, 0x04	; 4
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	9c 92       	st	X, r9
     d26:	8e 92       	st	-X, r8
	then1.next = NULL;
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	1c 92       	st	X, r1
     d2c:	1e 92       	st	-X, r1
     d2e:	12 97       	sbiw	r26, 0x02	; 2
	
	rule1.if_side = &if11;
     d30:	9a ab       	std	Y+50, r25	; 0x32
     d32:	89 ab       	std	Y+49, r24	; 0x31
	rule1.then_side = &then1;
     d34:	bc ab       	std	Y+52, r27	; 0x34
     d36:	ab ab       	std	Y+51, r26	; 0x33
	rule1.next = &rule2;
     d38:	fe ab       	std	Y+54, r31	; 0x36
     d3a:	ed ab       	std	Y+53, r30	; 0x35
	
	// pointers to top of lists
	Rule_Base = &rule1;
     d3c:	8c 59       	subi	r24, 0x9C	; 156
     d3e:	92 40       	sbci	r25, 0x02	; 2
     d40:	90 93 90 02 	sts	0x0290, r25
     d44:	80 93 8f 02 	sts	0x028F, r24
	System_Inputs = &error;
     d48:	e1 e0       	ldi	r30, 0x01	; 1
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ec 0f       	add	r30, r28
     d4e:	fd 1f       	adc	r31, r29
     d50:	f0 93 8e 02 	sts	0x028E, r31
     d54:	e0 93 8d 02 	sts	0x028D, r30
	System_Outputs = &servo;
     d58:	21 e2       	ldi	r18, 0x21	; 33
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	2c 0f       	add	r18, r28
     d5e:	3d 1f       	adc	r19, r29
     d60:	30 93 8c 02 	sts	0x028C, r19
     d64:	20 93 8b 02 	sts	0x028B, r18
	
	// the methods performing the FLC
	fuzzification();
     d68:	51 d5       	rcall	.+2722   	; 0x180c <fuzzification>
	rule_evaluation();
     d6a:	77 d5       	rcall	.+2798   	; 0x185a <rule_evaluation>
	defuzzification();
     d6c:	bc d5       	rcall	.+2936   	; 0x18e6 <defuzzification>
	setServo(servo.value);
     d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d70:	9c a5       	ldd	r25, Y+44	; 0x2c
     d72:	62 d7       	rcall	.+3780   	; 0x1c38 <setServo>
}
     d74:	c8 52       	subi	r28, 0x28	; 40
     d76:	dd 4f       	sbci	r29, 0xFD	; 253
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	5f 90       	pop	r5
     da0:	4f 90       	pop	r4
     da2:	3f 90       	pop	r3
     da4:	2f 90       	pop	r2
     da6:	08 95       	ret

00000da8 <FLC_road>:
 *
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_road(int v, int d)
{
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	c3 52       	subi	r28, 0x23	; 35
     dd2:	d2 40       	sbci	r29, 0x02	; 2
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
   	struct io_type distance;    // input 1
   	struct io_type speed;       // input 2
   	struct io_type pwm;         // output
   	struct rule_type rule1;		// first rule in rule base 
	// Declaration of I/Os
    strcpy(speed.name, "speed");
     dde:	26 e0       	ldi	r18, 0x06	; 6
     de0:	ec e9       	ldi	r30, 0x9C	; 156
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	de 01       	movw	r26, r28
     de6:	51 96       	adiw	r26, 0x11	; 17
     de8:	01 90       	ld	r0, Z+
     dea:	0d 92       	st	X+, r0
     dec:	2a 95       	dec	r18
     dee:	e1 f7       	brne	.-8      	; 0xde8 <FLC_road+0x40>
    strcpy(distance.name, "distance");
     df0:	29 e0       	ldi	r18, 0x09	; 9
     df2:	e2 ea       	ldi	r30, 0xA2	; 162
     df4:	f1 e0       	ldi	r31, 0x01	; 1
     df6:	ae 01       	movw	r20, r28
     df8:	4f 5f       	subi	r20, 0xFF	; 255
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	da 01       	movw	r26, r20
     dfe:	01 90       	ld	r0, Z+
     e00:	0d 92       	st	X+, r0
     e02:	2a 95       	dec	r18
     e04:	e1 f7       	brne	.-8      	; 0xdfe <FLC_road+0x56>
    strcpy(pwm.name, "pwm");
     e06:	00 e7       	ldi	r16, 0x70	; 112
     e08:	17 e7       	ldi	r17, 0x77	; 119
     e0a:	2d e6       	ldi	r18, 0x6D	; 109
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	09 a3       	std	Y+33, r16	; 0x21
     e10:	1a a3       	std	Y+34, r17	; 0x22
     e12:	2b a3       	std	Y+35, r18	; 0x23
     e14:	3c a3       	std	Y+36, r19	; 0x24


	
    speed.value = v;
     e16:	9c 8f       	std	Y+28, r25	; 0x1c
     e18:	8b 8f       	std	Y+27, r24	; 0x1b
    distance.value = d;
     e1a:	7c 87       	std	Y+12, r23	; 0x0c
     e1c:	6b 87       	std	Y+11, r22	; 0x0b
     * MF twoM:					[110 160 172 222]
     * MF oneM:					[22 72 100 150]
     * MF stopDist:				[-1, 0, 12, 62]
     */
    struct mf_type threeM;
    strcpy(threeM.name, "threeM");
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	eb ea       	ldi	r30, 0xAB	; 171
     e22:	f1 e0       	ldi	r31, 0x01	; 1
     e24:	de 01       	movw	r26, r28
     e26:	d7 96       	adiw	r26, 0x37	; 55
     e28:	01 90       	ld	r0, Z+
     e2a:	0d 92       	st	X+, r0
     e2c:	8a 95       	dec	r24
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <FLC_road+0x80>
    threeM.value = 0;
     e30:	23 96       	adiw	r28, 0x03	; 3
     e32:	1f ae       	std	Y+63, r1	; 0x3f
     e34:	1e ae       	std	Y+62, r1	; 0x3e
     e36:	23 97       	sbiw	r28, 0x03	; 3
    threeM.point1 = 150;
     e38:	26 e9       	ldi	r18, 0x96	; 150
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	25 96       	adiw	r28, 0x05	; 5
     e3e:	3f af       	std	Y+63, r19	; 0x3f
     e40:	2e af       	std	Y+62, r18	; 0x3e
     e42:	25 97       	sbiw	r28, 0x05	; 5
    threeM.point2 = 301;
     e44:	8d e2       	ldi	r24, 0x2D	; 45
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	27 96       	adiw	r28, 0x07	; 7
     e4a:	9f af       	std	Y+63, r25	; 0x3f
     e4c:	8e af       	std	Y+62, r24	; 0x3e
     e4e:	27 97       	sbiw	r28, 0x07	; 7
    threeM.slope1 = 2;
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	29 96       	adiw	r28, 0x09	; 9
     e56:	9f af       	std	Y+63, r25	; 0x3f
     e58:	8e af       	std	Y+62, r24	; 0x3e
     e5a:	29 97       	sbiw	r28, 0x09	; 9
    threeM.slope2 = 100;
     e5c:	0f 2e       	mov	r0, r31
     e5e:	f4 e6       	ldi	r31, 0x64	; 100
     e60:	6f 2e       	mov	r6, r31
     e62:	71 2c       	mov	r7, r1
     e64:	f0 2d       	mov	r31, r0
     e66:	2b 96       	adiw	r28, 0x0b	; 11
     e68:	7f ae       	std	Y+63, r7	; 0x3f
     e6a:	6e ae       	std	Y+62, r6	; 0x3e
     e6c:	2b 97       	sbiw	r28, 0x0b	; 11
    threeM.next = NULL;
     e6e:	2d 96       	adiw	r28, 0x0d	; 13
     e70:	1f ae       	std	Y+63, r1	; 0x3f
     e72:	1e ae       	std	Y+62, r1	; 0x3e
     e74:	2d 97       	sbiw	r28, 0x0d	; 13
    
    struct mf_type twoM;
    strcpy(twoM.name, "twoM");
     e76:	6e 01       	movw	r12, r28
     e78:	1d e4       	ldi	r17, 0x4D	; 77
     e7a:	c1 0e       	add	r12, r17
     e7c:	d1 1c       	adc	r13, r1
     e7e:	65 e0       	ldi	r22, 0x05	; 5
     e80:	e2 eb       	ldi	r30, 0xB2	; 178
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	d6 01       	movw	r26, r12
     e86:	01 90       	ld	r0, Z+
     e88:	0d 92       	st	X+, r0
     e8a:	6a 95       	dec	r22
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <FLC_road+0xde>
    twoM.value = 0;
     e8e:	d6 01       	movw	r26, r12
     e90:	1b 96       	adiw	r26, 0x0b	; 11
     e92:	1c 92       	st	X, r1
     e94:	1e 92       	st	-X, r1
     e96:	1a 97       	sbiw	r26, 0x0a	; 10
    twoM.point1 = 110;
     e98:	6e e6       	ldi	r22, 0x6E	; 110
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	1d 96       	adiw	r26, 0x0d	; 13
     e9e:	7c 93       	st	X, r23
     ea0:	6e 93       	st	-X, r22
     ea2:	1c 97       	sbiw	r26, 0x0c	; 12
    twoM.point2 = 222;
     ea4:	6e ed       	ldi	r22, 0xDE	; 222
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	1f 96       	adiw	r26, 0x0f	; 15
     eaa:	7c 93       	st	X, r23
     eac:	6e 93       	st	-X, r22
     eae:	1e 97       	sbiw	r26, 0x0e	; 14
    twoM.slope1 = 2;
     eb0:	51 96       	adiw	r26, 0x11	; 17
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
     eb6:	50 97       	sbiw	r26, 0x10	; 16
    twoM.slope2 = 2;
     eb8:	53 96       	adiw	r26, 0x13	; 19
     eba:	9c 93       	st	X, r25
     ebc:	8e 93       	st	-X, r24
     ebe:	52 97       	sbiw	r26, 0x12	; 18
    twoM.next = &threeM;
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	ec 0f       	add	r30, r28
     ec6:	fd 1f       	adc	r31, r29
     ec8:	55 96       	adiw	r26, 0x15	; 21
     eca:	fc 93       	st	X, r31
     ecc:	ee 93       	st	-X, r30
     ece:	54 97       	sbiw	r26, 0x14	; 20
    
    
    struct mf_type oneM;
    strcpy(oneM.name, "oneM");
     ed0:	5e 01       	movw	r10, r28
     ed2:	f3 e6       	ldi	r31, 0x63	; 99
     ed4:	af 0e       	add	r10, r31
     ed6:	b1 1c       	adc	r11, r1
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	e7 eb       	ldi	r30, 0xB7	; 183
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	d5 01       	movw	r26, r10
     ee0:	01 90       	ld	r0, Z+
     ee2:	0d 92       	st	X+, r0
     ee4:	6a 95       	dec	r22
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <FLC_road+0x138>
    oneM.value = 0;
     ee8:	d5 01       	movw	r26, r10
     eea:	1b 96       	adiw	r26, 0x0b	; 11
     eec:	1c 92       	st	X, r1
     eee:	1e 92       	st	-X, r1
     ef0:	1a 97       	sbiw	r26, 0x0a	; 10
    oneM.point1 = 22;
     ef2:	66 e1       	ldi	r22, 0x16	; 22
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	1d 96       	adiw	r26, 0x0d	; 13
     ef8:	7c 93       	st	X, r23
     efa:	6e 93       	st	-X, r22
     efc:	1c 97       	sbiw	r26, 0x0c	; 12
    oneM.point2 = 150;
     efe:	1f 96       	adiw	r26, 0x0f	; 15
     f00:	3c 93       	st	X, r19
     f02:	2e 93       	st	-X, r18
     f04:	1e 97       	sbiw	r26, 0x0e	; 14
    oneM.slope1 = 2;
     f06:	51 96       	adiw	r26, 0x11	; 17
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	50 97       	sbiw	r26, 0x10	; 16
    oneM.slope2 = 2;
     f0e:	53 96       	adiw	r26, 0x13	; 19
     f10:	9c 93       	st	X, r25
     f12:	8e 93       	st	-X, r24
     f14:	52 97       	sbiw	r26, 0x12	; 18
    oneM.next = &twoM;
     f16:	55 96       	adiw	r26, 0x15	; 21
     f18:	dc 92       	st	X, r13
     f1a:	ce 92       	st	-X, r12
     f1c:	54 97       	sbiw	r26, 0x14	; 20
    
    
    struct mf_type stopDist;
    strcpy(stopDist.name, "stopDist");
     f1e:	29 e0       	ldi	r18, 0x09	; 9
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	56 96       	adiw	r26, 0x16	; 22
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	2a 95       	dec	r18
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <FLC_road+0x17e>
    stopDist.value = 0;
     f2e:	cd 57       	subi	r28, 0x7D	; 125
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	19 82       	std	Y+1, r1	; 0x01
     f34:	18 82       	st	Y, r1
     f36:	c3 58       	subi	r28, 0x83	; 131
     f38:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.point1 = -1;
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	cb 57       	subi	r28, 0x7B	; 123
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	39 83       	std	Y+1, r19	; 0x01
     f44:	28 83       	st	Y, r18
     f46:	c5 58       	subi	r28, 0x85	; 133
     f48:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.point2 = 62;
     f4a:	2e e3       	ldi	r18, 0x3E	; 62
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 57       	subi	r28, 0x79	; 121
     f50:	df 4f       	sbci	r29, 0xFF	; 255
     f52:	39 83       	std	Y+1, r19	; 0x01
     f54:	28 83       	st	Y, r18
     f56:	c7 58       	subi	r28, 0x87	; 135
     f58:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.slope1 = 100;
     f5a:	c7 57       	subi	r28, 0x77	; 119
     f5c:	df 4f       	sbci	r29, 0xFF	; 255
     f5e:	79 82       	std	Y+1, r7	; 0x01
     f60:	68 82       	st	Y, r6
     f62:	c9 58       	subi	r28, 0x89	; 137
     f64:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.slope2 = 2;
     f66:	c5 57       	subi	r28, 0x75	; 117
     f68:	df 4f       	sbci	r29, 0xFF	; 255
     f6a:	99 83       	std	Y+1, r25	; 0x01
     f6c:	88 83       	st	Y, r24
     f6e:	cb 58       	subi	r28, 0x8B	; 139
     f70:	d0 40       	sbci	r29, 0x00	; 0
    stopDist.next = &oneM;
     f72:	c3 57       	subi	r28, 0x73	; 115
     f74:	df 4f       	sbci	r29, 0xFF	; 255
     f76:	b9 82       	std	Y+1, r11	; 0x01
     f78:	a8 82       	st	Y, r10
     f7a:	cd 58       	subi	r28, 0x8D	; 141
     f7c:	d0 40       	sbci	r29, 0x00	; 0
    
    
    distance.membership_functions = &stopDist;
     f7e:	e9 e7       	ldi	r30, 0x79	; 121
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	ec 0f       	add	r30, r28
     f84:	fd 1f       	adc	r31, r29
     f86:	fe 87       	std	Y+14, r31	; 0x0e
     f88:	ed 87       	std	Y+13, r30	; 0x0d
    distance.next = NULL;
     f8a:	18 8a       	std	Y+16, r1	; 0x10
     f8c:	1f 86       	std	Y+15, r1	; 0x0f
     * MF medium:	[2845 2878 2892 2925]
     * MF high:		[2890 2900 2930 2931]
     *
     */
    struct mf_type high;
    strcpy(high.name, "high");
     f8e:	2e 01       	movw	r4, r28
     f90:	ff e8       	ldi	r31, 0x8F	; 143
     f92:	4f 0e       	add	r4, r31
     f94:	51 1c       	adc	r5, r1
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	e5 ec       	ldi	r30, 0xC5	; 197
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	d2 01       	movw	r26, r4
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	8a 95       	dec	r24
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <FLC_road+0x1f6>
    high.value = 0;
     fa6:	d2 01       	movw	r26, r4
     fa8:	1b 96       	adiw	r26, 0x0b	; 11
     faa:	1c 92       	st	X, r1
     fac:	1e 92       	st	-X, r1
     fae:	1a 97       	sbiw	r26, 0x0a	; 10
    high.point1 = 2890;
     fb0:	ea e4       	ldi	r30, 0x4A	; 74
     fb2:	fb e0       	ldi	r31, 0x0B	; 11
     fb4:	1d 96       	adiw	r26, 0x0d	; 13
     fb6:	fc 93       	st	X, r31
     fb8:	ee 93       	st	-X, r30
     fba:	1c 97       	sbiw	r26, 0x0c	; 12
    high.point2 = 2931;
     fbc:	0f 2e       	mov	r0, r31
     fbe:	f3 e7       	ldi	r31, 0x73	; 115
     fc0:	6f 2e       	mov	r6, r31
     fc2:	fb e0       	ldi	r31, 0x0B	; 11
     fc4:	7f 2e       	mov	r7, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	1f 96       	adiw	r26, 0x0f	; 15
     fca:	7c 92       	st	X, r7
     fcc:	6e 92       	st	-X, r6
     fce:	1e 97       	sbiw	r26, 0x0e	; 14
    high.slope1 = 10;
     fd0:	8a e0       	ldi	r24, 0x0A	; 10
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	51 96       	adiw	r26, 0x11	; 17
     fd6:	9c 93       	st	X, r25
     fd8:	8e 93       	st	-X, r24
     fda:	50 97       	sbiw	r26, 0x10	; 16
    high.slope2 = 100;
     fdc:	0f 2e       	mov	r0, r31
     fde:	f4 e6       	ldi	r31, 0x64	; 100
     fe0:	8f 2e       	mov	r8, r31
     fe2:	91 2c       	mov	r9, r1
     fe4:	f0 2d       	mov	r31, r0
     fe6:	53 96       	adiw	r26, 0x13	; 19
     fe8:	9c 92       	st	X, r9
     fea:	8e 92       	st	-X, r8
     fec:	52 97       	sbiw	r26, 0x12	; 18
    high.next = NULL;
     fee:	55 96       	adiw	r26, 0x15	; 21
     ff0:	1c 92       	st	X, r1
     ff2:	1e 92       	st	-X, r1
     ff4:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type medium;
    strcpy(medium.name, "medium");
     ff6:	87 e0       	ldi	r24, 0x07	; 7
     ff8:	ea ec       	ldi	r30, 0xCA	; 202
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	56 96       	adiw	r26, 0x16	; 22
     ffe:	01 90       	ld	r0, Z+
    1000:	0d 92       	st	X+, r0
    1002:	8a 95       	dec	r24
    1004:	e1 f7       	brne	.-8      	; 0xffe <FLC_road+0x256>
    medium.value = 0;
    1006:	c1 55       	subi	r28, 0x51	; 81
    1008:	df 4f       	sbci	r29, 0xFF	; 255
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	18 82       	st	Y, r1
    100e:	cf 5a       	subi	r28, 0xAF	; 175
    1010:	d0 40       	sbci	r29, 0x00	; 0
    medium.point1 = 2845;
    1012:	8d e1       	ldi	r24, 0x1D	; 29
    1014:	9b e0       	ldi	r25, 0x0B	; 11
    1016:	cf 54       	subi	r28, 0x4F	; 79
    1018:	df 4f       	sbci	r29, 0xFF	; 255
    101a:	99 83       	std	Y+1, r25	; 0x01
    101c:	88 83       	st	Y, r24
    101e:	c1 5b       	subi	r28, 0xB1	; 177
    1020:	d0 40       	sbci	r29, 0x00	; 0
    medium.point2 = 2926;
    1022:	0f 2e       	mov	r0, r31
    1024:	fe e6       	ldi	r31, 0x6E	; 110
    1026:	8f 2e       	mov	r8, r31
    1028:	fb e0       	ldi	r31, 0x0B	; 11
    102a:	9f 2e       	mov	r9, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	cd 54       	subi	r28, 0x4D	; 77
    1030:	df 4f       	sbci	r29, 0xFF	; 255
    1032:	99 82       	std	Y+1, r9	; 0x01
    1034:	88 82       	st	Y, r8
    1036:	c3 5b       	subi	r28, 0xB3	; 179
    1038:	d0 40       	sbci	r29, 0x00	; 0
    medium.slope1 = 3;
    103a:	0f 2e       	mov	r0, r31
    103c:	f3 e0       	ldi	r31, 0x03	; 3
    103e:	6f 2e       	mov	r6, r31
    1040:	71 2c       	mov	r7, r1
    1042:	f0 2d       	mov	r31, r0
    1044:	cb 54       	subi	r28, 0x4B	; 75
    1046:	df 4f       	sbci	r29, 0xFF	; 255
    1048:	79 82       	std	Y+1, r7	; 0x01
    104a:	68 82       	st	Y, r6
    104c:	c5 5b       	subi	r28, 0xB5	; 181
    104e:	d0 40       	sbci	r29, 0x00	; 0
    medium.slope2 = 3;
    1050:	c9 54       	subi	r28, 0x49	; 73
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	79 82       	std	Y+1, r7	; 0x01
    1056:	68 82       	st	Y, r6
    1058:	c7 5b       	subi	r28, 0xB7	; 183
    105a:	d0 40       	sbci	r29, 0x00	; 0
    medium.next = &high;
    105c:	c7 54       	subi	r28, 0x47	; 71
    105e:	df 4f       	sbci	r29, 0xFF	; 255
    1060:	59 82       	std	Y+1, r5	; 0x01
    1062:	48 82       	st	Y, r4
    1064:	c9 5b       	subi	r28, 0xB9	; 185
    1066:	d0 40       	sbci	r29, 0x00	; 0
    
	struct mf_type cruising;
	strcpy(cruising.name, "cruising");
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	e1 ed       	ldi	r30, 0xD1	; 209
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	de 01       	movw	r26, r28
    1070:	a5 54       	subi	r26, 0x45	; 69
    1072:	bf 4f       	sbci	r27, 0xFF	; 255
    1074:	01 90       	ld	r0, Z+
    1076:	0d 92       	st	X+, r0
    1078:	8a 95       	dec	r24
    107a:	e1 f7       	brne	.-8      	; 0x1074 <FLC_road+0x2cc>
	cruising.value = 0;
    107c:	cb 53       	subi	r28, 0x3B	; 59
    107e:	df 4f       	sbci	r29, 0xFF	; 255
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	18 82       	st	Y, r1
    1084:	c5 5c       	subi	r28, 0xC5	; 197
    1086:	d0 40       	sbci	r29, 0x00	; 0
	cruising.point1 = 2800;
    1088:	0f 2e       	mov	r0, r31
    108a:	f0 ef       	ldi	r31, 0xF0	; 240
    108c:	2f 2e       	mov	r2, r31
    108e:	fa e0       	ldi	r31, 0x0A	; 10
    1090:	3f 2e       	mov	r3, r31
    1092:	f0 2d       	mov	r31, r0
    1094:	c9 53       	subi	r28, 0x39	; 57
    1096:	df 4f       	sbci	r29, 0xFF	; 255
    1098:	39 82       	std	Y+1, r3	; 0x01
    109a:	28 82       	st	Y, r2
    109c:	c7 5c       	subi	r28, 0xC7	; 199
    109e:	d0 40       	sbci	r29, 0x00	; 0
	cruising.point2= 2880;
    10a0:	20 e4       	ldi	r18, 0x40	; 64
    10a2:	3b e0       	ldi	r19, 0x0B	; 11
    10a4:	c7 53       	subi	r28, 0x37	; 55
    10a6:	df 4f       	sbci	r29, 0xFF	; 255
    10a8:	39 83       	std	Y+1, r19	; 0x01
    10aa:	28 83       	st	Y, r18
    10ac:	c9 5c       	subi	r28, 0xC9	; 201
    10ae:	d0 40       	sbci	r29, 0x00	; 0
	cruising.slope1 = 4;
    10b0:	04 e0       	ldi	r16, 0x04	; 4
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	c5 53       	subi	r28, 0x35	; 53
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	19 83       	std	Y+1, r17	; 0x01
    10ba:	08 83       	st	Y, r16
    10bc:	cb 5c       	subi	r28, 0xCB	; 203
    10be:	d0 40       	sbci	r29, 0x00	; 0
	cruising.slope2 = 4;
    10c0:	c3 53       	subi	r28, 0x33	; 51
    10c2:	df 4f       	sbci	r29, 0xFF	; 255
    10c4:	19 83       	std	Y+1, r17	; 0x01
    10c6:	08 83       	st	Y, r16
    10c8:	cd 5c       	subi	r28, 0xCD	; 205
    10ca:	d0 40       	sbci	r29, 0x00	; 0
	cruising.next = &medium;
    10cc:	65 ea       	ldi	r22, 0xA5	; 165
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	6c 0f       	add	r22, r28
    10d2:	7d 1f       	adc	r23, r29
    10d4:	c1 53       	subi	r28, 0x31	; 49
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	79 83       	std	Y+1, r23	; 0x01
    10da:	68 83       	st	Y, r22
    10dc:	cf 5c       	subi	r28, 0xCF	; 207
    10de:	d0 40       	sbci	r29, 0x00	; 0
	
	struct mf_type low;
	strcpy(low.name, "low");
    10e0:	9e 01       	movw	r18, r28
    10e2:	2f 52       	subi	r18, 0x2F	; 47
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	8c e6       	ldi	r24, 0x6C	; 108
    10e8:	9f e6       	ldi	r25, 0x6F	; 111
    10ea:	a7 e7       	ldi	r26, 0x77	; 119
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	f9 01       	movw	r30, r18
    10f0:	80 83       	st	Z, r24
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	a2 83       	std	Z+2, r26	; 0x02
    10f6:	b3 83       	std	Z+3, r27	; 0x03
	low.value = 0;
    10f8:	13 86       	std	Z+11, r1	; 0x0b
    10fa:	12 86       	std	Z+10, r1	; 0x0a
	low.point1 = 2765;
    10fc:	6d ec       	ldi	r22, 0xCD	; 205
    10fe:	7a e0       	ldi	r23, 0x0A	; 10
    1100:	75 87       	std	Z+13, r23	; 0x0d
    1102:	64 87       	std	Z+12, r22	; 0x0c
	low.point2= 2835;
    1104:	83 e1       	ldi	r24, 0x13	; 19
    1106:	9b e0       	ldi	r25, 0x0B	; 11
    1108:	97 87       	std	Z+15, r25	; 0x0f
    110a:	86 87       	std	Z+14, r24	; 0x0e
	low.slope1 = 4;
    110c:	11 8b       	std	Z+17, r17	; 0x11
    110e:	00 8b       	std	Z+16, r16	; 0x10
	low.slope2 = 4;
    1110:	13 8b       	std	Z+19, r17	; 0x13
    1112:	02 8b       	std	Z+18, r16	; 0x12
	low.next = &cruising;
    1114:	8b eb       	ldi	r24, 0xBB	; 187
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	8c 0f       	add	r24, r28
    111a:	9d 1f       	adc	r25, r29
    111c:	95 8b       	std	Z+21, r25	; 0x15
    111e:	84 8b       	std	Z+20, r24	; 0x14
	
	
    struct mf_type still;
    strcpy(still.name, "still");
    1120:	be 01       	movw	r22, r28
    1122:	69 51       	subi	r22, 0x19	; 25
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	86 e0       	ldi	r24, 0x06	; 6
    1128:	ea ed       	ldi	r30, 0xDA	; 218
    112a:	f1 e0       	ldi	r31, 0x01	; 1
    112c:	db 01       	movw	r26, r22
    112e:	01 90       	ld	r0, Z+
    1130:	0d 92       	st	X+, r0
    1132:	8a 95       	dec	r24
    1134:	e1 f7       	brne	.-8      	; 0x112e <FLC_road+0x386>
    still.value = 0;
    1136:	db 01       	movw	r26, r22
    1138:	1b 96       	adiw	r26, 0x0b	; 11
    113a:	1c 92       	st	X, r1
    113c:	1e 92       	st	-X, r1
    113e:	1a 97       	sbiw	r26, 0x0a	; 10
    still.point1 = 2749;
    1140:	0f 2e       	mov	r0, r31
    1142:	fd eb       	ldi	r31, 0xBD	; 189
    1144:	ef 2e       	mov	r14, r31
    1146:	fa e0       	ldi	r31, 0x0A	; 10
    1148:	ff 2e       	mov	r15, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	1d 96       	adiw	r26, 0x0d	; 13
    114e:	fc 92       	st	X, r15
    1150:	ee 92       	st	-X, r14
    1152:	1c 97       	sbiw	r26, 0x0c	; 12
    still.point2= 2790;
    1154:	86 ee       	ldi	r24, 0xE6	; 230
    1156:	9a e0       	ldi	r25, 0x0A	; 10
    1158:	1f 96       	adiw	r26, 0x0f	; 15
    115a:	9c 93       	st	X, r25
    115c:	8e 93       	st	-X, r24
    115e:	1e 97       	sbiw	r26, 0x0e	; 14
    still.slope1 = 100;
    1160:	e4 e6       	ldi	r30, 0x64	; 100
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	51 96       	adiw	r26, 0x11	; 17
    1166:	fc 93       	st	X, r31
    1168:	ee 93       	st	-X, r30
    116a:	50 97       	sbiw	r26, 0x10	; 16
    still.slope2 = 4;
    116c:	53 96       	adiw	r26, 0x13	; 19
    116e:	1c 93       	st	X, r17
    1170:	0e 93       	st	-X, r16
    1172:	52 97       	sbiw	r26, 0x12	; 18
    still.next = &low;
    1174:	55 96       	adiw	r26, 0x15	; 21
    1176:	3c 93       	st	X, r19
    1178:	2e 93       	st	-X, r18
    117a:	54 97       	sbiw	r26, 0x14	; 20
    
    speed.membership_functions = &still;
    117c:	7e 8f       	std	Y+30, r23	; 0x1e
    117e:	6d 8f       	std	Y+29, r22	; 0x1d
    speed.next = &distance;
    1180:	58 a3       	std	Y+32, r21	; 0x20
    1182:	4f 8f       	std	Y+31, r20	; 0x1f
     * medHigh		[2844 2880 2890 2926]
     * max			[2890 2926 2934 2970]
     *
     */
    struct mf_type noSpeed;
    strcpy(noSpeed.name, "noSpeed");
    1184:	48 e0       	ldi	r20, 0x08	; 8
    1186:	e0 ee       	ldi	r30, 0xE0	; 224
    1188:	f1 e0       	ldi	r31, 0x01	; 1
    118a:	56 96       	adiw	r26, 0x16	; 22
    118c:	01 90       	ld	r0, Z+
    118e:	0d 92       	st	X+, r0
    1190:	4a 95       	dec	r20
    1192:	e1 f7       	brne	.-8      	; 0x118c <FLC_road+0x3e4>
    noSpeed.value = 0;
    1194:	c9 5f       	subi	r28, 0xF9	; 249
    1196:	de 4f       	sbci	r29, 0xFE	; 254
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	18 82       	st	Y, r1
    119c:	c7 50       	subi	r28, 0x07	; 7
    119e:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.point1 = 2749;
    11a0:	c7 5f       	subi	r28, 0xF7	; 247
    11a2:	de 4f       	sbci	r29, 0xFE	; 254
    11a4:	f9 82       	std	Y+1, r15	; 0x01
    11a6:	e8 82       	st	Y, r14
    11a8:	c9 50       	subi	r28, 0x09	; 9
    11aa:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.point2 = 2790;
    11ac:	c5 5f       	subi	r28, 0xF5	; 245
    11ae:	de 4f       	sbci	r29, 0xFE	; 254
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	88 83       	st	Y, r24
    11b4:	cb 50       	subi	r28, 0x0B	; 11
    11b6:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.slope1 = 100;
    11b8:	44 e6       	ldi	r20, 0x64	; 100
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	c3 5f       	subi	r28, 0xF3	; 243
    11be:	de 4f       	sbci	r29, 0xFE	; 254
    11c0:	59 83       	std	Y+1, r21	; 0x01
    11c2:	48 83       	st	Y, r20
    11c4:	cd 50       	subi	r28, 0x0D	; 13
    11c6:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.slope2 = 4;
    11c8:	c1 5f       	subi	r28, 0xF1	; 241
    11ca:	de 4f       	sbci	r29, 0xFE	; 254
    11cc:	19 83       	std	Y+1, r17	; 0x01
    11ce:	08 83       	st	Y, r16
    11d0:	cf 50       	subi	r28, 0x0F	; 15
    11d2:	d1 40       	sbci	r29, 0x01	; 1
    noSpeed.next = NULL;
    11d4:	cf 5e       	subi	r28, 0xEF	; 239
    11d6:	de 4f       	sbci	r29, 0xFE	; 254
    11d8:	19 82       	std	Y+1, r1	; 0x01
    11da:	18 82       	st	Y, r1
    11dc:	c1 51       	subi	r28, 0x11	; 17
    11de:	d1 40       	sbci	r29, 0x01	; 1
    
    struct mf_type slow;
    strcpy(slow.name, "slow");
    11e0:	7e 01       	movw	r14, r28
    11e2:	5d ee       	ldi	r21, 0xED	; 237
    11e4:	e5 1a       	sub	r14, r21
    11e6:	5e ef       	ldi	r21, 0xFE	; 254
    11e8:	f5 0a       	sbc	r15, r21
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	e8 ee       	ldi	r30, 0xE8	; 232
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	d7 01       	movw	r26, r14
    11f2:	01 90       	ld	r0, Z+
    11f4:	0d 92       	st	X+, r0
    11f6:	8a 95       	dec	r24
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <FLC_road+0x44a>
    slow.value = 0;
    11fa:	d7 01       	movw	r26, r14
    11fc:	1b 96       	adiw	r26, 0x0b	; 11
    11fe:	1c 92       	st	X, r1
    1200:	1e 92       	st	-X, r1
    1202:	1a 97       	sbiw	r26, 0x0a	; 10
    slow.point1 = 2765;
    1204:	ed ec       	ldi	r30, 0xCD	; 205
    1206:	fa e0       	ldi	r31, 0x0A	; 10
    1208:	1d 96       	adiw	r26, 0x0d	; 13
    120a:	fc 93       	st	X, r31
    120c:	ee 93       	st	-X, r30
    120e:	1c 97       	sbiw	r26, 0x0c	; 12
    slow.point2 = 2836;
    1210:	84 e1       	ldi	r24, 0x14	; 20
    1212:	9b e0       	ldi	r25, 0x0B	; 11
    1214:	1f 96       	adiw	r26, 0x0f	; 15
    1216:	9c 93       	st	X, r25
    1218:	8e 93       	st	-X, r24
    121a:	1e 97       	sbiw	r26, 0x0e	; 14
    slow.slope1 = 4;
    121c:	51 96       	adiw	r26, 0x11	; 17
    121e:	1c 93       	st	X, r17
    1220:	0e 93       	st	-X, r16
    1222:	50 97       	sbiw	r26, 0x10	; 16
    slow.slope2 = 4;
    1224:	53 96       	adiw	r26, 0x13	; 19
    1226:	1c 93       	st	X, r17
    1228:	0e 93       	st	-X, r16
    122a:	52 97       	sbiw	r26, 0x12	; 18
    slow.next = &noSpeed;
    122c:	4d ef       	ldi	r20, 0xFD	; 253
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	4c 0f       	add	r20, r28
    1232:	5d 1f       	adc	r21, r29
    1234:	55 96       	adiw	r26, 0x15	; 21
    1236:	5c 93       	st	X, r21
    1238:	4e 93       	st	-X, r20
    123a:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type cruise;
    strcpy(cruise.name, "cruise");
    123c:	ce 01       	movw	r24, r28
    123e:	87 5d       	subi	r24, 0xD7	; 215
    1240:	9e 4f       	sbci	r25, 0xFE	; 254
    1242:	47 e0       	ldi	r20, 0x07	; 7
    1244:	ed ee       	ldi	r30, 0xED	; 237
    1246:	f1 e0       	ldi	r31, 0x01	; 1
    1248:	dc 01       	movw	r26, r24
    124a:	01 90       	ld	r0, Z+
    124c:	0d 92       	st	X+, r0
    124e:	4a 95       	dec	r20
    1250:	e1 f7       	brne	.-8      	; 0x124a <FLC_road+0x4a2>
    cruise.value = 0;
    1252:	dc 01       	movw	r26, r24
    1254:	1b 96       	adiw	r26, 0x0b	; 11
    1256:	1c 92       	st	X, r1
    1258:	1e 92       	st	-X, r1
    125a:	1a 97       	sbiw	r26, 0x0a	; 10
    cruise.point1 = 2800;
    125c:	1d 96       	adiw	r26, 0x0d	; 13
    125e:	3c 92       	st	X, r3
    1260:	2e 92       	st	-X, r2
    1262:	1c 97       	sbiw	r26, 0x0c	; 12
    cruise.point2 = 2880;
    1264:	e0 e4       	ldi	r30, 0x40	; 64
    1266:	fb e0       	ldi	r31, 0x0B	; 11
    1268:	1f 96       	adiw	r26, 0x0f	; 15
    126a:	fc 93       	st	X, r31
    126c:	ee 93       	st	-X, r30
    126e:	1e 97       	sbiw	r26, 0x0e	; 14
    cruise.slope1 = 3;
    1270:	51 96       	adiw	r26, 0x11	; 17
    1272:	7c 92       	st	X, r7
    1274:	6e 92       	st	-X, r6
    1276:	50 97       	sbiw	r26, 0x10	; 16
    cruise.slope2 = 3;
    1278:	53 96       	adiw	r26, 0x13	; 19
    127a:	7c 92       	st	X, r7
    127c:	6e 92       	st	-X, r6
    127e:	52 97       	sbiw	r26, 0x12	; 18
    cruise.next = &slow;
    1280:	55 96       	adiw	r26, 0x15	; 21
    1282:	fc 92       	st	X, r15
    1284:	ee 92       	st	-X, r14
    1286:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type medHigh;
    strcpy(medHigh.name, "medHigh");
    1288:	ae 01       	movw	r20, r28
    128a:	41 5c       	subi	r20, 0xC1	; 193
    128c:	5e 4f       	sbci	r21, 0xFE	; 254
    128e:	68 94       	set
    1290:	22 24       	eor	r2, r2
    1292:	23 f8       	bld	r2, 3
    1294:	e4 ef       	ldi	r30, 0xF4	; 244
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	da 01       	movw	r26, r20
    129a:	01 90       	ld	r0, Z+
    129c:	0d 92       	st	X+, r0
    129e:	2a 94       	dec	r2
    12a0:	e1 f7       	brne	.-8      	; 0x129a <FLC_road+0x4f2>
    medHigh.value = 0;
    12a2:	da 01       	movw	r26, r20
    12a4:	1b 96       	adiw	r26, 0x0b	; 11
    12a6:	1c 92       	st	X, r1
    12a8:	1e 92       	st	-X, r1
    12aa:	1a 97       	sbiw	r26, 0x0a	; 10
    medHigh.point1 = 2844;
    12ac:	ec e1       	ldi	r30, 0x1C	; 28
    12ae:	fb e0       	ldi	r31, 0x0B	; 11
    12b0:	1d 96       	adiw	r26, 0x0d	; 13
    12b2:	fc 93       	st	X, r31
    12b4:	ee 93       	st	-X, r30
    12b6:	1c 97       	sbiw	r26, 0x0c	; 12
    medHigh.point2 = 2926;
    12b8:	1f 96       	adiw	r26, 0x0f	; 15
    12ba:	9c 92       	st	X, r9
    12bc:	8e 92       	st	-X, r8
    12be:	1e 97       	sbiw	r26, 0x0e	; 14
    medHigh.slope1 = 3;
    12c0:	51 96       	adiw	r26, 0x11	; 17
    12c2:	7c 92       	st	X, r7
    12c4:	6e 92       	st	-X, r6
    12c6:	50 97       	sbiw	r26, 0x10	; 16
    medHigh.slope2 = 3;
    12c8:	53 96       	adiw	r26, 0x13	; 19
    12ca:	7c 92       	st	X, r7
    12cc:	6e 92       	st	-X, r6
    12ce:	52 97       	sbiw	r26, 0x12	; 18
    medHigh.next = &cruise;
    12d0:	55 96       	adiw	r26, 0x15	; 21
    12d2:	9c 93       	st	X, r25
    12d4:	8e 93       	st	-X, r24
    12d6:	54 97       	sbiw	r26, 0x14	; 20
    
    struct mf_type max;
    strcpy(high.name, "max");
    12d8:	0f 2e       	mov	r0, r31
    12da:	fd e6       	ldi	r31, 0x6D	; 109
    12dc:	6f 2e       	mov	r6, r31
    12de:	f1 e6       	ldi	r31, 0x61	; 97
    12e0:	7f 2e       	mov	r7, r31
    12e2:	f8 e7       	ldi	r31, 0x78	; 120
    12e4:	8f 2e       	mov	r8, r31
    12e6:	91 2c       	mov	r9, r1
    12e8:	f0 2d       	mov	r31, r0
    12ea:	d2 01       	movw	r26, r4
    12ec:	6d 92       	st	X+, r6
    12ee:	7d 92       	st	X+, r7
    12f0:	8d 92       	st	X+, r8
    12f2:	9c 92       	st	X, r9
    12f4:	13 97       	sbiw	r26, 0x03	; 3
    max.value = 0;
    12f6:	fe 01       	movw	r30, r28
    12f8:	eb 5a       	subi	r30, 0xAB	; 171
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	13 86       	std	Z+11, r1	; 0x0b
    12fe:	12 86       	std	Z+10, r1	; 0x0a
    max.point1 = 2890;
    1300:	0f 2e       	mov	r0, r31
    1302:	fa e4       	ldi	r31, 0x4A	; 74
    1304:	6f 2e       	mov	r6, r31
    1306:	fb e0       	ldi	r31, 0x0B	; 11
    1308:	7f 2e       	mov	r7, r31
    130a:	f0 2d       	mov	r31, r0
    130c:	75 86       	std	Z+13, r7	; 0x0d
    130e:	64 86       	std	Z+12, r6	; 0x0c
    max.point2 = 2931;
    1310:	0f 2e       	mov	r0, r31
    1312:	f3 e7       	ldi	r31, 0x73	; 115
    1314:	8f 2e       	mov	r8, r31
    1316:	fb e0       	ldi	r31, 0x0B	; 11
    1318:	9f 2e       	mov	r9, r31
    131a:	f0 2d       	mov	r31, r0
    131c:	97 86       	std	Z+15, r9	; 0x0f
    131e:	86 86       	std	Z+14, r8	; 0x0e
    max.slope1 = 4;
    1320:	11 8b       	std	Z+17, r17	; 0x11
    1322:	00 8b       	std	Z+16, r16	; 0x10
    max.slope2 = 100;
    1324:	a4 e6       	ldi	r26, 0x64	; 100
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	b3 8b       	std	Z+19, r27	; 0x13
    132a:	a2 8b       	std	Z+18, r26	; 0x12
    max.next = &medHigh;
    132c:	55 8b       	std	Z+21, r21	; 0x15
    132e:	44 8b       	std	Z+20, r20	; 0x14
    
    pwm.membership_functions = &max;
    1330:	fe a7       	std	Y+46, r31	; 0x2e
    1332:	ed a7       	std	Y+45, r30	; 0x2d
    pwm.next = NULL;
    1334:	18 aa       	std	Y+48, r1	; 0x30
    1336:	1f a6       	std	Y+47, r1	; 0x2f
     *
     */
	
	/* rule # 11: if still and oneMeter then slow */
	struct rule_element_type then11;
	then11.value = &slow.value;
    1338:	4e 01       	movw	r8, r28
    133a:	b5 e9       	ldi	r27, 0x95	; 149
    133c:	8b 1a       	sub	r8, r27
    133e:	be ef       	ldi	r27, 0xFE	; 254
    1340:	9b 0a       	sbc	r9, r27
    1342:	17 01       	movw	r2, r14
    1344:	1a e0       	ldi	r17, 0x0A	; 10
    1346:	21 0e       	add	r2, r17
    1348:	31 1c       	adc	r3, r1
    134a:	d4 01       	movw	r26, r8
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	3c 92       	st	X, r3
    1350:	2e 92       	st	-X, r2
	then11.next = NULL;
    1352:	13 96       	adiw	r26, 0x03	; 3
    1354:	1c 92       	st	X, r1
    1356:	1e 92       	st	-X, r1
    1358:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if112;
	if112.value = &oneM.value;
    135a:	3e 01       	movw	r6, r28
    135c:	b1 e9       	ldi	r27, 0x91	; 145
    135e:	6b 1a       	sub	r6, r27
    1360:	be ef       	ldi	r27, 0xFE	; 254
    1362:	7b 0a       	sbc	r7, r27
    1364:	1a e0       	ldi	r17, 0x0A	; 10
    1366:	a1 0e       	add	r10, r17
    1368:	b1 1c       	adc	r11, r1
    136a:	d3 01       	movw	r26, r6
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	bc 92       	st	X, r11
    1370:	ae 92       	st	-X, r10
	if112.next = NULL;
    1372:	13 96       	adiw	r26, 0x03	; 3
    1374:	1c 92       	st	X, r1
    1376:	1e 92       	st	-X, r1
    1378:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if111;
	if111.value = &still.value;
    137a:	7e 01       	movw	r14, r28
    137c:	bd e8       	ldi	r27, 0x8D	; 141
    137e:	eb 1a       	sub	r14, r27
    1380:	be ef       	ldi	r27, 0xFE	; 254
    1382:	fb 0a       	sbc	r15, r27
    1384:	66 5f       	subi	r22, 0xF6	; 246
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	d7 01       	movw	r26, r14
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	7c 93       	st	X, r23
    138e:	6e 93       	st	-X, r22
	if111.next = &if112;
    1390:	13 96       	adiw	r26, 0x03	; 3
    1392:	7c 92       	st	X, r7
    1394:	6e 92       	st	-X, r6
    1396:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule11;
	rule11.if_side = &if111;
    1398:	c9 58       	subi	r28, 0x89	; 137
    139a:	de 4f       	sbci	r29, 0xFE	; 254
    139c:	f9 82       	std	Y+1, r15	; 0x01
    139e:	e8 82       	st	Y, r14
    13a0:	c7 57       	subi	r28, 0x77	; 119
    13a2:	d1 40       	sbci	r29, 0x01	; 1
	rule11.then_side = &then11;
    13a4:	c7 58       	subi	r28, 0x87	; 135
    13a6:	de 4f       	sbci	r29, 0xFE	; 254
    13a8:	99 82       	std	Y+1, r9	; 0x01
    13aa:	88 82       	st	Y, r8
    13ac:	c9 57       	subi	r28, 0x79	; 121
    13ae:	d1 40       	sbci	r29, 0x01	; 1
	rule11.next = NULL;
    13b0:	c5 58       	subi	r28, 0x85	; 133
    13b2:	de 4f       	sbci	r29, 0xFE	; 254
    13b4:	19 82       	std	Y+1, r1	; 0x01
    13b6:	18 82       	st	Y, r1
    13b8:	cb 57       	subi	r28, 0x7B	; 123
    13ba:	d1 40       	sbci	r29, 0x01	; 1
	
	/* rule # 10: if low and twoM then cruise */
	struct rule_element_type then10;
	then10.value = &cruise.value;
    13bc:	64 57       	subi	r22, 0x74	; 116
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	3c 01       	movw	r6, r24
    13c2:	ba e0       	ldi	r27, 0x0A	; 10
    13c4:	6b 0e       	add	r6, r27
    13c6:	71 1c       	adc	r7, r1
    13c8:	db 01       	movw	r26, r22
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	7c 92       	st	X, r7
    13ce:	6e 92       	st	-X, r6
	then10.next = NULL;
    13d0:	13 96       	adiw	r26, 0x03	; 3
    13d2:	1c 92       	st	X, r1
    13d4:	1e 92       	st	-X, r1
    13d6:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if102;
	if102.value = &twoM.value;
    13d8:	7e 01       	movw	r14, r28
    13da:	bf e7       	ldi	r27, 0x7F	; 127
    13dc:	eb 1a       	sub	r14, r27
    13de:	be ef       	ldi	r27, 0xFE	; 254
    13e0:	fb 0a       	sbc	r15, r27
    13e2:	82 5d       	subi	r24, 0xD2	; 210
    13e4:	91 09       	sbc	r25, r1
    13e6:	d7 01       	movw	r26, r14
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
	if102.next = NULL;
    13ee:	13 96       	adiw	r26, 0x03	; 3
    13f0:	1c 92       	st	X, r1
    13f2:	1e 92       	st	-X, r1
    13f4:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if101;
	if101.value = &low.value;
    13f6:	8e 01       	movw	r16, r28
    13f8:	0b 57       	subi	r16, 0x7B	; 123
    13fa:	1e 4f       	sbci	r17, 0xFE	; 254
    13fc:	49 01       	movw	r8, r18
    13fe:	ba e0       	ldi	r27, 0x0A	; 10
    1400:	8b 0e       	add	r8, r27
    1402:	91 1c       	adc	r9, r1
    1404:	d8 01       	movw	r26, r16
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	9c 92       	st	X, r9
    140a:	8e 92       	st	-X, r8
	if101.next = &if102;
    140c:	13 96       	adiw	r26, 0x03	; 3
    140e:	fc 92       	st	X, r15
    1410:	ee 92       	st	-X, r14
    1412:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule10;
	rule10.if_side = &if101;
    1414:	7e 01       	movw	r14, r28
    1416:	b7 e7       	ldi	r27, 0x77	; 119
    1418:	eb 1a       	sub	r14, r27
    141a:	be ef       	ldi	r27, 0xFE	; 254
    141c:	fb 0a       	sbc	r15, r27
    141e:	d7 01       	movw	r26, r14
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	1c 93       	st	X, r17
    1424:	0e 93       	st	-X, r16
	rule10.then_side = &then10;
    1426:	13 96       	adiw	r26, 0x03	; 3
    1428:	7c 93       	st	X, r23
    142a:	6e 93       	st	-X, r22
    142c:	12 97       	sbiw	r26, 0x02	; 2
	rule10.next = &rule11;
    142e:	27 e7       	ldi	r18, 0x77	; 119
    1430:	31 e0       	ldi	r19, 0x01	; 1
    1432:	2c 0f       	add	r18, r28
    1434:	3d 1f       	adc	r19, r29
    1436:	15 96       	adiw	r26, 0x05	; 5
    1438:	3c 93       	st	X, r19
    143a:	2e 93       	st	-X, r18
    143c:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 9: if threeM then max */
	struct rule_element_type then9;
	then9.value = &max.value;
    143e:	16 96       	adiw	r26, 0x06	; 6
    1440:	3a 96       	adiw	r30, 0x0a	; 10
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	fc 93       	st	X, r31
    1446:	ee 93       	st	-X, r30
	then9.next = NULL;
    1448:	13 96       	adiw	r26, 0x03	; 3
    144a:	1c 92       	st	X, r1
    144c:	1e 92       	st	-X, r1
    144e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if91;
	if91.value = &threeM.value;
    1450:	6a 5e       	subi	r22, 0xEA	; 234
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	27 e3       	ldi	r18, 0x37	; 55
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	2c 0f       	add	r18, r28
    145a:	3d 1f       	adc	r19, r29
    145c:	26 5f       	subi	r18, 0xF6	; 246
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	fb 01       	movw	r30, r22
    1462:	31 83       	std	Z+1, r19	; 0x01
    1464:	20 83       	st	Z, r18
	if91.next = NULL;
    1466:	13 82       	std	Z+3, r1	; 0x03
    1468:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_type rule9;
	rule9.if_side = &if91;
    146a:	34 96       	adiw	r30, 0x04	; 4
    146c:	71 83       	std	Z+1, r23	; 0x01
    146e:	60 83       	st	Z, r22
	rule9.then_side = &then9;
    1470:	b3 83       	std	Z+3, r27	; 0x03
    1472:	a2 83       	std	Z+2, r26	; 0x02
	rule9.next = &rule10;
    1474:	f5 82       	std	Z+5, r15	; 0x05
    1476:	e4 82       	std	Z+4, r14	; 0x04
 
	/* rule # 8: if high and twoM then medHigh */
	struct rule_element_type then8;
	then8.value = &medHigh.value;
    1478:	66 5f       	subi	r22, 0xF6	; 246
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	46 5f       	subi	r20, 0xF6	; 246
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	db 01       	movw	r26, r22
    1482:	11 96       	adiw	r26, 0x01	; 1
    1484:	5c 93       	st	X, r21
    1486:	4e 93       	st	-X, r20
	then8.next = NULL;
    1488:	13 96       	adiw	r26, 0x03	; 3
    148a:	1c 92       	st	X, r1
    148c:	1e 92       	st	-X, r1
    148e:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if82;
	if82.value = &twoM.value;
    1490:	7e 01       	movw	r14, r28
    1492:	bf e5       	ldi	r27, 0x5F	; 95
    1494:	eb 1a       	sub	r14, r27
    1496:	be ef       	ldi	r27, 0xFE	; 254
    1498:	fb 0a       	sbc	r15, r27
    149a:	d7 01       	movw	r26, r14
    149c:	11 96       	adiw	r26, 0x01	; 1
    149e:	9c 93       	st	X, r25
    14a0:	8e 93       	st	-X, r24
	if82.next = NULL;
    14a2:	13 96       	adiw	r26, 0x03	; 3
    14a4:	1c 92       	st	X, r1
    14a6:	1e 92       	st	-X, r1
    14a8:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if81;
	if81.value = &high.value;
    14aa:	00 5e       	subi	r16, 0xE0	; 224
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	62 01       	movw	r12, r4
    14b0:	ba e0       	ldi	r27, 0x0A	; 10
    14b2:	cb 0e       	add	r12, r27
    14b4:	d1 1c       	adc	r13, r1
    14b6:	d8 01       	movw	r26, r16
    14b8:	11 96       	adiw	r26, 0x01	; 1
    14ba:	dc 92       	st	X, r13
    14bc:	ce 92       	st	-X, r12
	if81.next = &if82;
    14be:	13 96       	adiw	r26, 0x03	; 3
    14c0:	fc 92       	st	X, r15
    14c2:	ee 92       	st	-X, r14
    14c4:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule8;
	rule8.if_side = &if81;
    14c6:	14 96       	adiw	r26, 0x04	; 4
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	1c 93       	st	X, r17
    14cc:	0e 93       	st	-X, r16
	rule8.then_side = &then8;
    14ce:	13 96       	adiw	r26, 0x03	; 3
    14d0:	7c 93       	st	X, r23
    14d2:	6e 93       	st	-X, r22
    14d4:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
    14d6:	15 96       	adiw	r26, 0x05	; 5
    14d8:	fc 93       	st	X, r31
    14da:	ee 93       	st	-X, r30
    14dc:	14 97       	sbiw	r26, 0x04	; 4
 
	/* rule # 7: if cruising and twoM then medHigh */
	struct rule_element_type then7;
	then7.value = &medHigh.value;
    14de:	6e 5e       	subi	r22, 0xEE	; 238
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	fb 01       	movw	r30, r22
    14e4:	51 83       	std	Z+1, r21	; 0x01
    14e6:	40 83       	st	Z, r20
	then7.next = NULL;
    14e8:	13 82       	std	Z+3, r1	; 0x03
    14ea:	12 82       	std	Z+2, r1	; 0x02
 
	struct rule_element_type if72;
	if72.value = &twoM.value;
    14ec:	2e 01       	movw	r4, r28
    14ee:	fd e4       	ldi	r31, 0x4D	; 77
    14f0:	4f 1a       	sub	r4, r31
    14f2:	fe ef       	ldi	r31, 0xFE	; 254
    14f4:	5f 0a       	sbc	r5, r31
    14f6:	f2 01       	movw	r30, r4
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
	if72.next = NULL;
    14fc:	13 82       	std	Z+3, r1	; 0x03
    14fe:	12 82       	std	Z+2, r1	; 0x02
 
	struct rule_element_type if71;
	if71.value = &cruising.value;
    1500:	0e 5e       	subi	r16, 0xEE	; 238
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	0f 2e       	mov	r0, r31
    1506:	fb eb       	ldi	r31, 0xBB	; 187
    1508:	ef 2e       	mov	r14, r31
    150a:	f1 2c       	mov	r15, r1
    150c:	f0 2d       	mov	r31, r0
    150e:	ec 0e       	add	r14, r28
    1510:	fd 1e       	adc	r15, r29
    1512:	fa e0       	ldi	r31, 0x0A	; 10
    1514:	ef 0e       	add	r14, r31
    1516:	f1 1c       	adc	r15, r1
    1518:	f8 01       	movw	r30, r16
    151a:	f1 82       	std	Z+1, r15	; 0x01
    151c:	e0 82       	st	Z, r14
	if71.next = &if72;
    151e:	53 82       	std	Z+3, r5	; 0x03
    1520:	42 82       	std	Z+2, r4	; 0x02
 
	struct rule_type rule7;
	rule7.if_side = &if71;
    1522:	34 96       	adiw	r30, 0x04	; 4
    1524:	11 83       	std	Z+1, r17	; 0x01
    1526:	00 83       	st	Z, r16
	rule7.then_side = &then7;
    1528:	73 83       	std	Z+3, r23	; 0x03
    152a:	62 83       	std	Z+2, r22	; 0x02
	rule7.next = &rule8;
    152c:	b5 83       	std	Z+5, r27	; 0x05
    152e:	a4 83       	std	Z+4, r26	; 0x04
 
 
     /* rule # 6: if low and twoM then cruise */
    struct rule_element_type then6;
    then6.value = &cruise.value;
    1530:	20 58       	subi	r18, 0x80	; 128
    1532:	3e 4f       	sbci	r19, 0xFE	; 254
    1534:	d9 01       	movw	r26, r18
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	7c 92       	st	X, r7
    153a:	6e 92       	st	-X, r6
    then6.next = NULL;
    153c:	13 96       	adiw	r26, 0x03	; 3
    153e:	1c 92       	st	X, r1
    1540:	1e 92       	st	-X, r1
    1542:	12 97       	sbiw	r26, 0x02	; 2
    
	struct rule_element_type if62;
	if62.value = &twoM.value;
    1544:	6a 5e       	subi	r22, 0xEA	; 234
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	db 01       	movw	r26, r22
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	9c 93       	st	X, r25
    154e:	8e 93       	st	-X, r24
	if62.next = NULL;
    1550:	13 96       	adiw	r26, 0x03	; 3
    1552:	1c 92       	st	X, r1
    1554:	1e 92       	st	-X, r1
    1556:	12 97       	sbiw	r26, 0x02	; 2
	
    struct rule_element_type if61;
    if61.value = &low.value;
    1558:	8e 58       	subi	r24, 0x8E	; 142
    155a:	9e 4f       	sbci	r25, 0xFE	; 254
    155c:	dc 01       	movw	r26, r24
    155e:	11 96       	adiw	r26, 0x01	; 1
    1560:	9c 92       	st	X, r9
    1562:	8e 92       	st	-X, r8
	if61.next = &if62;
    1564:	13 96       	adiw	r26, 0x03	; 3
    1566:	7c 93       	st	X, r23
    1568:	6e 93       	st	-X, r22
    156a:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule6;
    rule6.if_side = &if61;
    156c:	68 5f       	subi	r22, 0xF8	; 248
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	db 01       	movw	r26, r22
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
    rule6.then_side = &then6;
    1578:	13 96       	adiw	r26, 0x03	; 3
    157a:	3c 93       	st	X, r19
    157c:	2e 93       	st	-X, r18
    157e:	12 97       	sbiw	r26, 0x02	; 2
    rule6.next = &rule7;
    1580:	15 96       	adiw	r26, 0x05	; 5
    1582:	fc 93       	st	X, r31
    1584:	ee 93       	st	-X, r30
    1586:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 5: if high and oneM then medHigh */
    struct rule_element_type then5;
    then5.value = &medHigh.value;
    1588:	2e 5e       	subi	r18, 0xEE	; 238
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	f9 01       	movw	r30, r18
    158e:	51 83       	std	Z+1, r21	; 0x01
    1590:	40 83       	st	Z, r20
    then5.next = NULL;
    1592:	13 82       	std	Z+3, r1	; 0x03
    1594:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if52;
	if52.value = &oneM.value;
    1596:	0e 96       	adiw	r24, 0x0e	; 14
    1598:	dc 01       	movw	r26, r24
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	bc 92       	st	X, r11
    159e:	ae 92       	st	-X, r10
	if52.next = NULL;
    15a0:	13 96       	adiw	r26, 0x03	; 3
    15a2:	1c 92       	st	X, r1
    15a4:	1e 92       	st	-X, r1
    15a6:	12 97       	sbiw	r26, 0x02	; 2
	
    struct rule_element_type if51;
    if51.value = &high.value;
    15a8:	14 96       	adiw	r26, 0x04	; 4
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	dc 92       	st	X, r13
    15ae:	ce 92       	st	-X, r12
    if51.next = &if52;
    15b0:	13 96       	adiw	r26, 0x03	; 3
    15b2:	9c 93       	st	X, r25
    15b4:	8e 93       	st	-X, r24
    15b6:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule5;
    rule5.if_side = &if51;
    15b8:	08 96       	adiw	r24, 0x08	; 8
    15ba:	fc 01       	movw	r30, r24
    15bc:	b1 83       	std	Z+1, r27	; 0x01
    15be:	a0 83       	st	Z, r26
    rule5.then_side = &then5;
    15c0:	33 83       	std	Z+3, r19	; 0x03
    15c2:	22 83       	std	Z+2, r18	; 0x02
    rule5.next = &rule6;
    15c4:	75 83       	std	Z+5, r23	; 0x05
    15c6:	64 83       	std	Z+4, r22	; 0x04
    
    /* rule # 4: if medium and oneM then cruise */  
    struct rule_element_type then4;
    then4.value = &cruise.value;
    15c8:	2e 5e       	subi	r18, 0xEE	; 238
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	d9 01       	movw	r26, r18
    15ce:	11 96       	adiw	r26, 0x01	; 1
    15d0:	7c 92       	st	X, r7
    15d2:	6e 92       	st	-X, r6
    then4.next = NULL;
    15d4:	13 96       	adiw	r26, 0x03	; 3
    15d6:	1c 92       	st	X, r1
    15d8:	1e 92       	st	-X, r1
    15da:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &oneM.value;
    15dc:	40 56       	subi	r20, 0x60	; 96
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	fa 01       	movw	r30, r20
    15e2:	b1 82       	std	Z+1, r11	; 0x01
    15e4:	a0 82       	st	Z, r10
    if42.next = NULL;
    15e6:	13 82       	std	Z+3, r1	; 0x03
    15e8:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if41;
    if41.value = &medium.value;
    15ea:	18 96       	adiw	r26, 0x08	; 8
    15ec:	65 ea       	ldi	r22, 0xA5	; 165
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	6c 0f       	add	r22, r28
    15f2:	7d 1f       	adc	r23, r29
    15f4:	66 5f       	subi	r22, 0xF6	; 246
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	7c 93       	st	X, r23
    15fc:	6e 93       	st	-X, r22
    if41.next = &if42;
    15fe:	13 96       	adiw	r26, 0x03	; 3
    1600:	5c 93       	st	X, r21
    1602:	4e 93       	st	-X, r20
    1604:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule4;
    rule4.if_side = &if41;
    1606:	48 5f       	subi	r20, 0xF8	; 248
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	fa 01       	movw	r30, r20
    160c:	b1 83       	std	Z+1, r27	; 0x01
    160e:	a0 83       	st	Z, r26
    rule4.then_side = &then4;
    1610:	33 83       	std	Z+3, r19	; 0x03
    1612:	22 83       	std	Z+2, r18	; 0x02
    rule4.next = &rule5;
    1614:	95 83       	std	Z+5, r25	; 0x05
    1616:	84 83       	std	Z+4, r24	; 0x04
	  
    /* rule # 3: if cruising and oneM then slow */
    struct rule_element_type then3;
    then3.value = &slow.value;
    1618:	2e 5e       	subi	r18, 0xEE	; 238
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	d9 01       	movw	r26, r18
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	3c 92       	st	X, r3
    1622:	2e 92       	st	-X, r2
    then3.next = NULL;
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	1c 92       	st	X, r1
    1628:	1e 92       	st	-X, r1
    162a:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if32;
    if32.value = &oneM.value;
    162c:	4c 96       	adiw	r24, 0x1c	; 28
    162e:	fc 01       	movw	r30, r24
    1630:	b1 82       	std	Z+1, r11	; 0x01
    1632:	a0 82       	st	Z, r10
    if32.next = NULL;
    1634:	13 82       	std	Z+3, r1	; 0x03
    1636:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if31;
    if31.value = &cruising.value;
    1638:	18 96       	adiw	r26, 0x08	; 8
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	fc 92       	st	X, r15
    163e:	ee 92       	st	-X, r14
    if31.next = &if32;
    1640:	13 96       	adiw	r26, 0x03	; 3
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
    1646:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule3;
    rule3.if_side = &if31;
    1648:	08 96       	adiw	r24, 0x08	; 8
    164a:	fc 01       	movw	r30, r24
    164c:	b1 83       	std	Z+1, r27	; 0x01
    164e:	a0 83       	st	Z, r26
    rule3.then_side = &then3;
    1650:	33 83       	std	Z+3, r19	; 0x03
    1652:	22 83       	std	Z+2, r18	; 0x02
    rule3.next = &rule4;
    1654:	55 83       	std	Z+5, r21	; 0x05
    1656:	44 83       	std	Z+4, r20	; 0x04
    
    /* rule # 2: if low and oneM then slow */
    struct rule_element_type if22;
    if22.value = &oneM.value;
    1658:	36 96       	adiw	r30, 0x06	; 6
    165a:	b1 82       	std	Z+1, r11	; 0x01
    165c:	a0 82       	st	Z, r10
    if22.next = NULL;
    165e:	13 82       	std	Z+3, r1	; 0x03
    1660:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if21;
    if21.value = &low.value;
    1662:	1e 96       	adiw	r26, 0x0e	; 14
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	9c 92       	st	X, r9
    1668:	8e 92       	st	-X, r8
    if21.next = &if22;
    166a:	13 96       	adiw	r26, 0x03	; 3
    166c:	fc 93       	st	X, r31
    166e:	ee 93       	st	-X, r30
    1670:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type then2;
    then2.value = &slow.value;
    1672:	26 5e       	subi	r18, 0xE6	; 230
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	f9 01       	movw	r30, r18
    1678:	31 82       	std	Z+1, r3	; 0x01
    167a:	20 82       	st	Z, r2
    then2.next = NULL;
    167c:	13 82       	std	Z+3, r1	; 0x03
    167e:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule2;
    rule2.if_side = &if21;
    1680:	34 96       	adiw	r30, 0x04	; 4
    1682:	b1 83       	std	Z+1, r27	; 0x01
    1684:	a0 83       	st	Z, r26
    rule2.then_side = &then2;
    1686:	33 83       	std	Z+3, r19	; 0x03
    1688:	22 83       	std	Z+2, r18	; 0x02
    rule2.next = &rule3;
    168a:	95 83       	std	Z+5, r25	; 0x05
    168c:	84 83       	std	Z+4, r24	; 0x04
    
    /* rule # 1: if stopDist then noSpeed */
    struct rule_element_type if11;
    if11.value = &stopDist.value;
    168e:	48 96       	adiw	r24, 0x18	; 24
    1690:	29 e7       	ldi	r18, 0x79	; 121
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	2c 0f       	add	r18, r28
    1696:	3d 1f       	adc	r19, r29
    1698:	26 5f       	subi	r18, 0xF6	; 246
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	dc 01       	movw	r26, r24
    169e:	11 96       	adiw	r26, 0x01	; 1
    16a0:	3c 93       	st	X, r19
    16a2:	2e 93       	st	-X, r18
    if11.next = NULL;
    16a4:	13 96       	adiw	r26, 0x03	; 3
    16a6:	1c 92       	st	X, r1
    16a8:	1e 92       	st	-X, r1
    16aa:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type then1;
    then1.value = &noSpeed.value;
    16ac:	14 96       	adiw	r26, 0x04	; 4
    16ae:	0f 2e       	mov	r0, r31
    16b0:	fd ef       	ldi	r31, 0xFD	; 253
    16b2:	8f 2e       	mov	r8, r31
    16b4:	91 2c       	mov	r9, r1
    16b6:	f0 2d       	mov	r31, r0
    16b8:	8c 0e       	add	r8, r28
    16ba:	9d 1e       	adc	r9, r29
    16bc:	1a e0       	ldi	r17, 0x0A	; 10
    16be:	81 0e       	add	r8, r17
    16c0:	91 1c       	adc	r9, r1
    16c2:	11 96       	adiw	r26, 0x01	; 1
    16c4:	9c 92       	st	X, r9
    16c6:	8e 92       	st	-X, r8
    then1.next = NULL;
    16c8:	13 96       	adiw	r26, 0x03	; 3
    16ca:	1c 92       	st	X, r1
    16cc:	1e 92       	st	-X, r1
    16ce:	12 97       	sbiw	r26, 0x02	; 2
    
    rule1.if_side = &if11;
    16d0:	9a ab       	std	Y+50, r25	; 0x32
    16d2:	89 ab       	std	Y+49, r24	; 0x31
    rule1.then_side = &then1;
    16d4:	bc ab       	std	Y+52, r27	; 0x34
    16d6:	ab ab       	std	Y+51, r26	; 0x33
    rule1.next = &rule2;
    16d8:	fe ab       	std	Y+54, r31	; 0x36
    16da:	ed ab       	std	Y+53, r30	; 0x35
    
	// pointers to top of lists
    Rule_Base = &rule1;
    16dc:	8a 5e       	subi	r24, 0xEA	; 234
    16de:	91 40       	sbci	r25, 0x01	; 1
    16e0:	90 93 90 02 	sts	0x0290, r25
    16e4:	80 93 8f 02 	sts	0x028F, r24
    System_Inputs = &speed;
    16e8:	21 e1       	ldi	r18, 0x11	; 17
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	2c 0f       	add	r18, r28
    16ee:	3d 1f       	adc	r19, r29
    16f0:	30 93 8e 02 	sts	0x028E, r19
    16f4:	20 93 8d 02 	sts	0x028D, r18
    System_Outputs = &pwm;
    16f8:	41 e2       	ldi	r20, 0x21	; 33
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	4c 0f       	add	r20, r28
    16fe:	5d 1f       	adc	r21, r29
    1700:	50 93 8c 02 	sts	0x028C, r21
    1704:	40 93 8b 02 	sts	0x028B, r20
    
	// the methods performing the FLC
    fuzzification();
    1708:	81 d0       	rcall	.+258    	; 0x180c <fuzzification>
    rule_evaluation();
    170a:	a7 d0       	rcall	.+334    	; 0x185a <rule_evaluation>
    defuzzification();
    170c:	ec d0       	rcall	.+472    	; 0x18e6 <defuzzification>
	setESC(pwm.value);
    170e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1710:	9c a5       	ldd	r25, Y+44	; 0x2c
    1712:	77 d2       	rcall	.+1262   	; 0x1c02 <setESC>
}
    1714:	cd 5d       	subi	r28, 0xDD	; 221
    1716:	dd 4f       	sbci	r29, 0xFD	; 253
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	7f 90       	pop	r7
    173c:	6f 90       	pop	r6
    173e:	5f 90       	pop	r5
    1740:	4f 90       	pop	r4
    1742:	3f 90       	pop	r3
    1744:	2f 90       	pop	r2
    1746:	08 95       	ret

00001748 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1748:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    174a:	84 85       	ldd	r24, Z+12	; 0x0c
    174c:	95 85       	ldd	r25, Z+13	; 0x0d
    174e:	9b 01       	movw	r18, r22
    1750:	28 1b       	sub	r18, r24
    1752:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    1754:	86 85       	ldd	r24, Z+14	; 0x0e
    1756:	97 85       	ldd	r25, Z+15	; 0x0f
    1758:	86 1b       	sub	r24, r22
    175a:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    175c:	12 16       	cp	r1, r18
    175e:	13 06       	cpc	r1, r19
    1760:	ec f4       	brge	.+58     	; 0x179c <compute_degree_of_membership+0x54>
    1762:	18 16       	cp	r1, r24
    1764:	19 06       	cpc	r1, r25
    1766:	ec f4       	brge	.+58     	; 0x17a2 <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1768:	60 89       	ldd	r22, Z+16	; 0x10
    176a:	71 89       	ldd	r23, Z+17	; 0x11
    176c:	a2 89       	ldd	r26, Z+18	; 0x12
    176e:	b3 89       	ldd	r27, Z+19	; 0x13
    1770:	8a 9f       	mul	r24, r26
    1772:	a0 01       	movw	r20, r0
    1774:	8b 9f       	mul	r24, r27
    1776:	50 0d       	add	r21, r0
    1778:	9a 9f       	mul	r25, r26
    177a:	50 0d       	add	r21, r0
    177c:	11 24       	eor	r1, r1
    177e:	26 9f       	mul	r18, r22
    1780:	c0 01       	movw	r24, r0
    1782:	27 9f       	mul	r18, r23
    1784:	90 0d       	add	r25, r0
    1786:	36 9f       	mul	r19, r22
    1788:	90 0d       	add	r25, r0
    178a:	11 24       	eor	r1, r1
    178c:	48 17       	cp	r20, r24
    178e:	59 07       	cpc	r21, r25
    1790:	0c f4       	brge	.+2      	; 0x1794 <compute_degree_of_membership+0x4c>
    1792:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	91 05       	cpc	r25, r1
    1798:	3c f4       	brge	.+14     	; 0x17a8 <compute_degree_of_membership+0x60>
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <compute_degree_of_membership+0x64>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    17a8:	84 e6       	ldi	r24, 0x64	; 100
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    17ac:	93 87       	std	Z+11, r25	; 0x0b
    17ae:	82 87       	std	Z+10, r24	; 0x0a
    17b0:	08 95       	ret

000017b2 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    17bc:	c6 85       	ldd	r28, Z+14	; 0x0e
    17be:	d7 85       	ldd	r29, Z+15	; 0x0f
    17c0:	84 85       	ldd	r24, Z+12	; 0x0c
    17c2:	95 85       	ldd	r25, Z+13	; 0x0d
    17c4:	c8 1b       	sub	r28, r24
    17c6:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    17c8:	22 85       	ldd	r18, Z+10	; 0x0a
    17ca:	33 85       	ldd	r19, Z+11	; 0x0b
    17cc:	60 89       	ldd	r22, Z+16	; 0x10
    17ce:	71 89       	ldd	r23, Z+17	; 0x11
    17d0:	c9 01       	movw	r24, r18
    17d2:	e8 d4       	rcall	.+2512   	; 0x21a4 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    17d4:	8e 01       	movw	r16, r28
    17d6:	06 1b       	sub	r16, r22
    17d8:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    17da:	62 89       	ldd	r22, Z+18	; 0x12
    17dc:	73 89       	ldd	r23, Z+19	; 0x13
    17de:	c9 01       	movw	r24, r18
    17e0:	e1 d4       	rcall	.+2498   	; 0x21a4 <__divmodhi4>
    top = base - run_1 - run_2;
    17e2:	06 1b       	sub	r16, r22
    17e4:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    17e6:	c0 0f       	add	r28, r16
    17e8:	d1 1f       	adc	r29, r17
    17ea:	2c 9f       	mul	r18, r28
    17ec:	c0 01       	movw	r24, r0
    17ee:	2d 9f       	mul	r18, r29
    17f0:	90 0d       	add	r25, r0
    17f2:	3c 9f       	mul	r19, r28
    17f4:	90 0d       	add	r25, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	99 23       	and	r25, r25
    17fa:	0c f4       	brge	.+2      	; 0x17fe <compute_area_of_trapezoid+0x4c>
    17fc:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    17fe:	95 95       	asr	r25
    1800:	87 95       	ror	r24
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1814:	00 91 8d 02 	lds	r16, 0x028D
    1818:	10 91 8e 02 	lds	r17, 0x028E
    181c:	01 15       	cp	r16, r1
    181e:	11 05       	cpc	r17, r1
    1820:	b9 f0       	breq	.+46     	; 0x1850 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1822:	f8 01       	movw	r30, r16
    1824:	c4 85       	ldd	r28, Z+12	; 0x0c
    1826:	d5 85       	ldd	r29, Z+13	; 0x0d
    1828:	20 97       	sbiw	r28, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <fuzzification+0x38>
            if (mf!=NULL) {
    182c:	20 97       	sbiw	r28, 0x00	; 0
    182e:	29 f0       	breq	.+10     	; 0x183a <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    1830:	f8 01       	movw	r30, r16
    1832:	62 85       	ldd	r22, Z+10	; 0x0a
    1834:	73 85       	ldd	r23, Z+11	; 0x0b
    1836:	ce 01       	movw	r24, r28
    1838:	87 df       	rcall	.-242    	; 0x1748 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    183a:	0c 88       	ldd	r0, Y+20	; 0x14
    183c:	dd 89       	ldd	r29, Y+21	; 0x15
    183e:	c0 2d       	mov	r28, r0
    1840:	20 97       	sbiw	r28, 0x00	; 0
    1842:	a1 f7       	brne	.-24     	; 0x182c <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    1844:	f8 01       	movw	r30, r16
    1846:	06 85       	ldd	r16, Z+14	; 0x0e
    1848:	17 85       	ldd	r17, Z+15	; 0x0f
    184a:	01 15       	cp	r16, r1
    184c:	11 05       	cpc	r17, r1
    184e:	49 f7       	brne	.-46     	; 0x1822 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	08 95       	ret

0000185a <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    1862:	c0 91 8f 02 	lds	r28, 0x028F
    1866:	d0 91 90 02 	lds	r29, 0x0290
    186a:	20 97       	sbiw	r28, 0x00	; 0
    186c:	b9 f1       	breq	.+110    	; 0x18dc <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    186e:	04 e6       	ldi	r16, 0x64	; 100
    1870:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1872:	e8 81       	ld	r30, Y
    1874:	f9 81       	ldd	r31, Y+1	; 0x01
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	81 f0       	breq	.+32     	; 0x189a <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    187a:	20 2f       	mov	r18, r16
    187c:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    187e:	a0 81       	ld	r26, Z
    1880:	b1 81       	ldd	r27, Z+1	; 0x01
    1882:	8d 91       	ld	r24, X+
    1884:	9c 91       	ld	r25, X
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
    188a:	0c f4       	brge	.+2      	; 0x188e <rule_evaluation+0x34>
    188c:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    188e:	02 80       	ldd	r0, Z+2	; 0x02
    1890:	f3 81       	ldd	r31, Z+3	; 0x03
    1892:	e0 2d       	mov	r30, r0
    1894:	30 97       	sbiw	r30, 0x00	; 0
    1896:	99 f7       	brne	.-26     	; 0x187e <rule_evaluation+0x24>
    1898:	02 c0       	rjmp	.+4      	; 0x189e <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    189a:	20 2f       	mov	r18, r16
    189c:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    189e:	ea 81       	ldd	r30, Y+2	; 0x02
    18a0:	fb 81       	ldd	r31, Y+3	; 0x03
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	b1 f0       	breq	.+44     	; 0x18d2 <rule_evaluation+0x78>
    18a6:	72 2f       	mov	r23, r18
    18a8:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    18aa:	a0 81       	ld	r26, Z
    18ac:	b1 81       	ldd	r27, Z+1	; 0x01
    18ae:	8d 91       	ld	r24, X+
    18b0:	9c 91       	ld	r25, X
    18b2:	11 97       	sbiw	r26, 0x01	; 1
    18b4:	57 2f       	mov	r21, r23
    18b6:	46 2f       	mov	r20, r22
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	14 f4       	brge	.+4      	; 0x18c2 <rule_evaluation+0x68>
    18be:	58 2f       	mov	r21, r24
    18c0:	49 2f       	mov	r20, r25
    18c2:	5c 93       	st	X, r21
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    18c8:	02 80       	ldd	r0, Z+2	; 0x02
    18ca:	f3 81       	ldd	r31, Z+3	; 0x03
    18cc:	e0 2d       	mov	r30, r0
    18ce:	30 97       	sbiw	r30, 0x00	; 0
    18d0:	61 f7       	brne	.-40     	; 0x18aa <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    18d2:	0c 80       	ldd	r0, Y+4	; 0x04
    18d4:	dd 81       	ldd	r29, Y+5	; 0x05
    18d6:	c0 2d       	mov	r28, r0
    18d8:	20 97       	sbiw	r28, 0x00	; 0
    18da:	59 f6       	brne	.-106    	; 0x1872 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	08 95       	ret

000018e6 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    18e6:	2f 92       	push	r2
    18e8:	3f 92       	push	r3
    18ea:	4f 92       	push	r4
    18ec:	5f 92       	push	r5
    18ee:	6f 92       	push	r6
    18f0:	7f 92       	push	r7
    18f2:	8f 92       	push	r8
    18f4:	9f 92       	push	r9
    18f6:	af 92       	push	r10
    18f8:	bf 92       	push	r11
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	00 d0       	rcall	.+0      	; 0x190c <defuzzification+0x26>
    190c:	00 d0       	rcall	.+0      	; 0x190e <defuzzification+0x28>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <defuzzification+0x2a>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1914:	80 91 8b 02 	lds	r24, 0x028B
    1918:	90 91 8c 02 	lds	r25, 0x028C
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	89 2b       	or	r24, r25
    1922:	09 f4       	brne	.+2      	; 0x1926 <defuzzification+0x40>
    1924:	84 c0       	rjmp	.+264    	; 0x1a2e <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    1926:	eb 81       	ldd	r30, Y+3	; 0x03
    1928:	fc 81       	ldd	r31, Y+4	; 0x04
    192a:	04 84       	ldd	r0, Z+12	; 0x0c
    192c:	f5 85       	ldd	r31, Z+13	; 0x0d
    192e:	e0 2d       	mov	r30, r0
    1930:	fe 83       	std	Y+6, r31	; 0x06
    1932:	ed 83       	std	Y+5, r30	; 0x05
    1934:	ef 2b       	or	r30, r31
    1936:	09 f4       	brne	.+2      	; 0x193a <defuzzification+0x54>
    1938:	66 c0       	rjmp	.+204    	; 0x1a06 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    193a:	51 2c       	mov	r5, r1
    193c:	61 2c       	mov	r6, r1
    193e:	71 2c       	mov	r7, r1
    1940:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    1942:	31 2c       	mov	r3, r1
    1944:	21 2c       	mov	r2, r1
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	31 df       	rcall	.-414    	; 0x17b2 <compute_area_of_trapezoid>
    1950:	bc 01       	movw	r22, r24
    1952:	88 27       	eor	r24, r24
    1954:	77 fd       	sbrc	r23, 7
    1956:	80 95       	com	r24
    1958:	98 2f       	mov	r25, r24
    195a:	35 d3       	rcall	.+1642   	; 0x1fc6 <__floatsisf>
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    1960:	ed 81       	ldd	r30, Y+5	; 0x05
    1962:	fe 81       	ldd	r31, Y+6	; 0x06
    1964:	04 85       	ldd	r16, Z+12	; 0x0c
    1966:	15 85       	ldd	r17, Z+13	; 0x0d
    1968:	b8 01       	movw	r22, r16
    196a:	88 27       	eor	r24, r24
    196c:	77 fd       	sbrc	r23, 7
    196e:	80 95       	com	r24
    1970:	98 2f       	mov	r25, r24
    1972:	29 d3       	rcall	.+1618   	; 0x1fc6 <__floatsisf>
    1974:	4b 01       	movw	r8, r22
    1976:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1978:	ed 81       	ldd	r30, Y+5	; 0x05
    197a:	fe 81       	ldd	r31, Y+6	; 0x06
    197c:	86 85       	ldd	r24, Z+14	; 0x0e
    197e:	97 85       	ldd	r25, Z+15	; 0x0f
    1980:	80 1b       	sub	r24, r16
    1982:	91 0b       	sbc	r25, r17
    1984:	bc 01       	movw	r22, r24
    1986:	12 f4       	brpl	.+4      	; 0x198c <defuzzification+0xa6>
    1988:	6f 5f       	subi	r22, 0xFF	; 255
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	75 95       	asr	r23
    198e:	67 95       	ror	r22
            centroid = centroid + intermed;
    1990:	88 27       	eor	r24, r24
    1992:	77 fd       	sbrc	r23, 7
    1994:	80 95       	com	r24
    1996:	98 2f       	mov	r25, r24
    1998:	16 d3       	rcall	.+1580   	; 0x1fc6 <__floatsisf>
    199a:	a5 01       	movw	r20, r10
    199c:	94 01       	movw	r18, r8
    199e:	14 d2       	rcall	.+1064   	; 0x1dc8 <__addsf3>
    19a0:	9b 01       	movw	r18, r22
    19a2:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    19a4:	c7 01       	movw	r24, r14
    19a6:	b6 01       	movw	r22, r12
    19a8:	9a d3       	rcall	.+1844   	; 0x20de <__mulsf3>
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	63 2d       	mov	r22, r3
    19b0:	72 2d       	mov	r23, r2
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	08 d2       	rcall	.+1040   	; 0x1dc8 <__addsf3>
    19b8:	36 2e       	mov	r3, r22
    19ba:	27 2e       	mov	r2, r23
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    19c0:	a7 01       	movw	r20, r14
    19c2:	96 01       	movw	r18, r12
    19c4:	65 2d       	mov	r22, r5
    19c6:	76 2d       	mov	r23, r6
    19c8:	87 2d       	mov	r24, r7
    19ca:	94 2d       	mov	r25, r4
    19cc:	fd d1       	rcall	.+1018   	; 0x1dc8 <__addsf3>
    19ce:	56 2e       	mov	r5, r22
    19d0:	67 2e       	mov	r6, r23
    19d2:	78 2e       	mov	r7, r24
    19d4:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    19d6:	ed 81       	ldd	r30, Y+5	; 0x05
    19d8:	fe 81       	ldd	r31, Y+6	; 0x06
    19da:	04 88       	ldd	r0, Z+20	; 0x14
    19dc:	f5 89       	ldd	r31, Z+21	; 0x15
    19de:	e0 2d       	mov	r30, r0
    19e0:	fe 83       	std	Y+6, r31	; 0x06
    19e2:	ed 83       	std	Y+5, r30	; 0x05
    19e4:	ef 2b       	or	r30, r31
    19e6:	09 f0       	breq	.+2      	; 0x19ea <defuzzification+0x104>
    19e8:	b0 cf       	rjmp	.-160    	; 0x194a <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    19ea:	26 2f       	mov	r18, r22
    19ec:	37 2f       	mov	r19, r23
    19ee:	48 2f       	mov	r20, r24
    19f0:	59 2f       	mov	r21, r25
    19f2:	63 2d       	mov	r22, r3
    19f4:	72 2d       	mov	r23, r2
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	4a d2       	rcall	.+1172   	; 0x1e90 <__divsf3>
    19fc:	26 2f       	mov	r18, r22
    19fe:	37 2f       	mov	r19, r23
    1a00:	48 2f       	mov	r20, r24
    1a02:	59 2f       	mov	r21, r25
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    1a0e:	62 2f       	mov	r22, r18
    1a10:	73 2f       	mov	r23, r19
    1a12:	84 2f       	mov	r24, r20
    1a14:	95 2f       	mov	r25, r21
    1a16:	a4 d2       	rcall	.+1352   	; 0x1f60 <__fixsfsi>
    1a18:	eb 81       	ldd	r30, Y+3	; 0x03
    1a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a1c:	73 87       	std	Z+11, r23	; 0x0b
    1a1e:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    1a20:	86 85       	ldd	r24, Z+14	; 0x0e
    1a22:	97 85       	ldd	r25, Z+15	; 0x0f
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	89 2b       	or	r24, r25
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <defuzzification+0x148>
    1a2c:	7c cf       	rjmp	.-264    	; 0x1926 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    1a2e:	26 96       	adiw	r28, 0x06	; 6
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	7f 90       	pop	r7
    1a54:	6f 90       	pop	r6
    1a56:	5f 90       	pop	r5
    1a58:	4f 90       	pop	r4
    1a5a:	3f 90       	pop	r3
    1a5c:	2f 90       	pop	r2
    1a5e:	08 95       	ret

00001a60 <__vector_28>:
	}

	int16_t Get_Measurement(void) //TODO
	{
		return 140;
	}
    1a60:	1f 92       	push	r1
    1a62:	0f 92       	push	r0
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	0f 92       	push	r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	0b b6       	in	r0, 0x3b	; 59
    1a6c:	0f 92       	push	r0
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	ef 93       	push	r30
    1a74:	ff 93       	push	r31
    1a76:	80 91 ce 00 	lds	r24, 0x00CE
    1a7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <__vector_28+0x28>
    1a7e:	10 92 b2 02 	sts	0x02B2, r1
    1a82:	10 92 b1 02 	sts	0x02B1, r1
    1a86:	10 c0       	rjmp	.+32     	; 0x1aa8 <__vector_28+0x48>
    1a88:	e0 91 b1 02 	lds	r30, 0x02B1
    1a8c:	f0 91 b2 02 	lds	r31, 0x02B2
    1a90:	ef 56       	subi	r30, 0x6F	; 111
    1a92:	fd 4f       	sbci	r31, 0xFD	; 253
    1a94:	80 83       	st	Z, r24
    1a96:	80 91 b1 02 	lds	r24, 0x02B1
    1a9a:	90 91 b2 02 	lds	r25, 0x02B2
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	90 93 b2 02 	sts	0x02B2, r25
    1aa4:	80 93 b1 02 	sts	0x02B1, r24
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	0f 90       	pop	r0
    1ab2:	0b be       	out	0x3b, r0	; 59
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <SPI_slaveInit>:
    1abe:	80 e4       	ldi	r24, 0x40	; 64
    1ac0:	84 b9       	out	0x04, r24	; 4
    1ac2:	80 ec       	ldi	r24, 0xC0	; 192
    1ac4:	8c bd       	out	0x2c, r24	; 44
    1ac6:	08 95       	ret

00001ac8 <carInit>:
    1ac8:	8d d0       	rcall	.+282    	; 0x1be4 <pwmInit>
    1aca:	f9 df       	rcall	.-14     	; 0x1abe <SPI_slaveInit>
    1acc:	8d ec       	ldi	r24, 0xCD	; 205
    1ace:	9a e0       	ldi	r25, 0x0A	; 10
    1ad0:	98 d0       	rcall	.+304    	; 0x1c02 <setESC>
    1ad2:	84 e6       	ldi	r24, 0x64	; 100
    1ad4:	9a e0       	ldi	r25, 0x0A	; 10
    1ad6:	b0 d0       	rcall	.+352    	; 0x1c38 <setServo>
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	90 ee       	ldi	r25, 0xE0	; 224
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	80 40       	sbci	r24, 0x00	; 0
    1ae2:	90 40       	sbci	r25, 0x00	; 0
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <carInit+0x16>
    1ae6:	00 c0       	rjmp	.+0      	; 0x1ae8 <carInit+0x20>
    1ae8:	00 00       	nop
    1aea:	08 95       	ret

00001aec <USART1_init>:
    1aec:	ec ec       	ldi	r30, 0xCC	; 204
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	11 82       	std	Z+1, r1	; 0x01
    1af2:	10 82       	st	Z, r1
    1af4:	20 e9       	ldi	r18, 0x90	; 144
    1af6:	20 93 c9 00 	sts	0x00C9, r18
    1afa:	2e e0       	ldi	r18, 0x0E	; 14
    1afc:	20 93 ca 00 	sts	0x00CA, r18
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	80 83       	st	Z, r24
    1b04:	08 95       	ret

00001b06 <Sens_info_read>:
    1b06:	e9 ec       	ldi	r30, 0xC9	; 201
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	20 81       	ld	r18, Z
    1b0c:	2f 77       	andi	r18, 0x7F	; 127
    1b0e:	20 83       	st	Z, r18
    1b10:	20 91 91 02 	lds	r18, 0x0291
    1b14:	dc 01       	movw	r26, r24
    1b16:	2c 93       	st	X, r18
    1b18:	20 91 92 02 	lds	r18, 0x0292
    1b1c:	11 96       	adiw	r26, 0x01	; 1
    1b1e:	2c 93       	st	X, r18
    1b20:	10 92 b2 02 	sts	0x02B2, r1
    1b24:	10 92 b1 02 	sts	0x02B1, r1
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 68       	ori	r24, 0x80	; 128
    1b2c:	80 83       	st	Z, r24
    1b2e:	08 95       	ret

00001b30 <__vector_18>:
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	2f 93       	push	r18
    1b3c:	8f 93       	push	r24
    1b3e:	9f 93       	push	r25
    1b40:	80 91 fc 01 	lds	r24, 0x01FC
    1b44:	90 91 fd 01 	lds	r25, 0x01FD
    1b48:	8b 39       	cpi	r24, 0x9B	; 155
    1b4a:	26 e9       	ldi	r18, 0x96	; 150
    1b4c:	92 07       	cpc	r25, r18
    1b4e:	30 f4       	brcc	.+12     	; 0x1b5c <__vector_18+0x2c>
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	90 93 fd 01 	sts	0x01FD, r25
    1b56:	80 93 fc 01 	sts	0x01FC, r24
    1b5a:	09 c0       	rjmp	.+18     	; 0x1b6e <__vector_18+0x3e>
    1b5c:	80 91 fe 01 	lds	r24, 0x01FE
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	80 93 fe 01 	sts	0x01FE, r24
    1b66:	10 92 fd 01 	sts	0x01FD, r1
    1b6a:	10 92 fc 01 	sts	0x01FC, r1
    1b6e:	9f 91       	pop	r25
    1b70:	8f 91       	pop	r24
    1b72:	2f 91       	pop	r18
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <main>:


	/* main function
	*/
	int main (void)
	{
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	2f 97       	sbiw	r28, 0x0f	; 15
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
		
		
		
		
		
		carInit();
    1b92:	9a df       	rcall	.-204    	; 0x1ac8 <carInit>

		
		
		
		sei();
    1b94:	78 94       	sei
		DDRA = 0xFF;
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	81 b9       	out	0x01, r24	; 1
		sens_info_ptr = &sensor_info;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    1b9a:	87 e0       	ldi	r24, 0x07	; 7
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a6 df       	rcall	.-180    	; 0x1aec <USART1_init>
				
				
				cli();
				
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    1ba0:	0f 2e       	mov	r0, r31
    1ba2:	fa e8       	ldi	r31, 0x8A	; 138
    1ba4:	ef 2e       	mov	r14, r31
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	f0 2d       	mov	r31, r0
				// inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    1baa:	08 e8       	ldi	r16, 0x88	; 136
    1bac:	10 e0       	ldi	r17, 0x00	; 0
		
		
		int distance;
		while (1) {
			
			if (counter_UART1_reciever > 1) {
    1bae:	80 91 b1 02 	lds	r24, 0x02B1
    1bb2:	90 91 b2 02 	lds	r25, 0x02B2
    1bb6:	02 97       	sbiw	r24, 0x02	; 2
    1bb8:	d4 f3       	brlt	.-12     	; 0x1bae <main+0x30>
				
				Sens_info_read(sens_info_ptr);
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	a3 df       	rcall	.-186    	; 0x1b06 <Sens_info_read>
				
				PORTA = sensor_info.dist_right_line;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	82 b9       	out	0x02, r24	; 2
				
				
				cli();
    1bc4:	f8 94       	cli
				
				distance = (int) sensor_info.dist_right_line;
				FLC_steering(OCR1B, distance);
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
				PORTA = sensor_info.dist_right_line;
				
				
				cli();
				
				distance = (int) sensor_info.dist_right_line;
    1bcc:	69 81       	ldd	r22, Y+1	; 0x01
    1bce:	70 e0       	ldi	r23, 0x00	; 0
				FLC_steering(OCR1B, distance);
    1bd0:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
				// inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	6a 81       	ldd	r22, Y+2	; 0x02
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	e4 d8       	rcall	.-3640   	; 0xda8 <FLC_road>
				sei();
    1be0:	78 94       	sei
    1be2:	e5 cf       	rjmp	.-54     	; 0x1bae <main+0x30>

00001be4 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
    1be4:	80 e3       	ldi	r24, 0x30	; 48
    1be6:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1be8:	82 ea       	ldi	r24, 0xA2	; 162
    1bea:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	9f e8       	ldi	r25, 0x8F	; 143
    1bf2:	90 93 87 00 	sts	0x0087, r25
    1bf6:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
    1bfa:	8a e1       	ldi	r24, 0x1A	; 26
    1bfc:	80 93 81 00 	sts	0x0081, r24
    1c00:	08 95       	ret

00001c02 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
    1c02:	80 36       	cpi	r24, 0x60	; 96
    1c04:	2a e0       	ldi	r18, 0x0A	; 10
    1c06:	92 07       	cpc	r25, r18
    1c08:	3c f4       	brge	.+14     	; 0x1c18 <setESC+0x16>
	{
		OCR1A = MINESC;
    1c0a:	8f e5       	ldi	r24, 0x5F	; 95
    1c0c:	9a e0       	ldi	r25, 0x0A	; 10
    1c0e:	90 93 89 00 	sts	0x0089, r25
    1c12:	80 93 88 00 	sts	0x0088, r24
    1c16:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
    1c18:	8b 33       	cpi	r24, 0x3B	; 59
    1c1a:	2b e0       	ldi	r18, 0x0B	; 11
    1c1c:	92 07       	cpc	r25, r18
    1c1e:	3c f0       	brlt	.+14     	; 0x1c2e <setESC+0x2c>
	{
		OCR1A = MAXESC;
    1c20:	8b e3       	ldi	r24, 0x3B	; 59
    1c22:	9b e0       	ldi	r25, 0x0B	; 11
    1c24:	90 93 89 00 	sts	0x0089, r25
    1c28:	80 93 88 00 	sts	0x0088, r24
    1c2c:	08 95       	ret
	} else {
		OCR1A = counterEsc;
    1c2e:	90 93 89 00 	sts	0x0089, r25
    1c32:	80 93 88 00 	sts	0x0088, r24
    1c36:	08 95       	ret

00001c38 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
    1c38:	87 3e       	cpi	r24, 0xE7	; 231
    1c3a:	27 e0       	ldi	r18, 0x07	; 7
    1c3c:	92 07       	cpc	r25, r18
    1c3e:	3c f4       	brge	.+14     	; 0x1c4e <setServo+0x16>
		
		OCR1B = MAXRIGHT;
    1c40:	86 ee       	ldi	r24, 0xE6	; 230
    1c42:	97 e0       	ldi	r25, 0x07	; 7
    1c44:	90 93 8b 00 	sts	0x008B, r25
    1c48:	80 93 8a 00 	sts	0x008A, r24
    1c4c:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
    1c4e:	8f 33       	cpi	r24, 0x3F	; 63
    1c50:	2c e0       	ldi	r18, 0x0C	; 12
    1c52:	92 07       	cpc	r25, r18
    1c54:	3c f0       	brlt	.+14     	; 0x1c64 <setServo+0x2c>

		OCR1B = MAXLEFT;
    1c56:	8f e3       	ldi	r24, 0x3F	; 63
    1c58:	9c e0       	ldi	r25, 0x0C	; 12
    1c5a:	90 93 8b 00 	sts	0x008B, r25
    1c5e:	80 93 8a 00 	sts	0x008A, r24
    1c62:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
    1c64:	90 93 8b 00 	sts	0x008B, r25
    1c68:	80 93 8a 00 	sts	0x008A, r24
    1c6c:	08 95       	ret

00001c6e <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	0b b6       	in	r0, 0x3b	; 59
    1c7a:	0f 92       	push	r0
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1c8e:	80 91 89 02 	lds	r24, 0x0289
    1c92:	90 91 8a 02 	lds	r25, 0x028A
    1c96:	80 34       	cpi	r24, 0x40	; 64
    1c98:	91 05       	cpc	r25, r1
    1c9a:	31 f4       	brne	.+12     	; 0x1ca8 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 bf 02 	sts	0x02BF, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1ca2:	80 91 c6 00 	lds	r24, 0x00C6
    1ca6:	16 c0       	rjmp	.+44     	; 0x1cd4 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    1ca8:	80 34       	cpi	r24, 0x40	; 64
    1caa:	91 05       	cpc	r25, r1
    1cac:	e8 f4       	brcc	.+58     	; 0x1ce8 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1cae:	e7 e8       	ldi	r30, 0x87	; 135
    1cb0:	f2 e0       	ldi	r31, 0x02	; 2
    1cb2:	20 81       	ld	r18, Z
    1cb4:	31 81       	ldd	r19, Z+1	; 0x01
    1cb6:	40 91 c6 00 	lds	r20, 0x00C6
    1cba:	d9 01       	movw	r26, r18
    1cbc:	ab 5b       	subi	r26, 0xBB	; 187
    1cbe:	bd 4f       	sbci	r27, 0xFD	; 253
    1cc0:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	31 83       	std	Z+1, r19	; 0x01
    1cc8:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	90 93 8a 02 	sts	0x028A, r25
    1cd0:	80 93 89 02 	sts	0x0289, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1cd4:	80 91 89 02 	lds	r24, 0x0289
    1cd8:	90 91 8a 02 	lds	r25, 0x028A
    1cdc:	80 34       	cpi	r24, 0x40	; 64
    1cde:	91 05       	cpc	r25, r1
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 bd 02 	sts	0x02BD, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1ce8:	80 91 87 02 	lds	r24, 0x0287
    1cec:	90 91 88 02 	lds	r25, 0x0288
    1cf0:	80 34       	cpi	r24, 0x40	; 64
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	21 f4       	brne	.+8      	; 0x1cfe <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1cf6:	10 92 88 02 	sts	0x0288, r1
    1cfa:	10 92 87 02 	sts	0x0287, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 bc 02 	sts	0x02BC, r24
}
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0b be       	out	0x3b, r0	; 59
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_22>:




ISR(USART0_TX_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	0b b6       	in	r0, 0x3b	; 59
    1d30:	0f 92       	push	r0
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1d3a:	80 91 43 02 	lds	r24, 0x0243
    1d3e:	90 91 44 02 	lds	r25, 0x0244
    1d42:	80 34       	cpi	r24, 0x40	; 64
    1d44:	91 05       	cpc	r25, r1
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1d48:	10 92 bb 02 	sts	0x02BB, r1
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1d4e:	89 2b       	or	r24, r25
    1d50:	b9 f0       	breq	.+46     	; 0x1d80 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1d52:	e0 91 3f 02 	lds	r30, 0x023F
    1d56:	f0 91 40 02 	lds	r31, 0x0240
    1d5a:	e1 50       	subi	r30, 0x01	; 1
    1d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1d64:	ef e3       	ldi	r30, 0x3F	; 63
    1d66:	f2 e0       	ldi	r31, 0x02	; 2
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1d72:	e3 e4       	ldi	r30, 0x43	; 67
    1d74:	f2 e0       	ldi	r31, 0x02	; 2
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1d80:	80 91 3f 02 	lds	r24, 0x023F
    1d84:	90 91 40 02 	lds	r25, 0x0240
    1d88:	80 34       	cpi	r24, 0x40	; 64
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1d8e:	10 92 40 02 	sts	0x0240, r1
    1d92:	10 92 3f 02 	sts	0x023F, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1d96:	80 91 43 02 	lds	r24, 0x0243
    1d9a:	90 91 44 02 	lds	r25, 0x0244
    1d9e:	89 2b       	or	r24, r25
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1da2:	10 92 be 02 	sts	0x02BE, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1da6:	e1 ec       	ldi	r30, 0xC1	; 193
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7b       	andi	r24, 0xBF	; 191
    1dae:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	9f 91       	pop	r25
    1db6:	8f 91       	pop	r24
    1db8:	0f 90       	pop	r0
    1dba:	0b be       	out	0x3b, r0	; 59
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <__subsf3>:
    1dc6:	50 58       	subi	r21, 0x80	; 128

00001dc8 <__addsf3>:
    1dc8:	bb 27       	eor	r27, r27
    1dca:	aa 27       	eor	r26, r26
    1dcc:	0e d0       	rcall	.+28     	; 0x1dea <__addsf3x>
    1dce:	4d c1       	rjmp	.+666    	; 0x206a <__fp_round>
    1dd0:	3e d1       	rcall	.+636    	; 0x204e <__fp_pscA>
    1dd2:	30 f0       	brcs	.+12     	; 0x1de0 <__addsf3+0x18>
    1dd4:	43 d1       	rcall	.+646    	; 0x205c <__fp_pscB>
    1dd6:	20 f0       	brcs	.+8      	; 0x1de0 <__addsf3+0x18>
    1dd8:	31 f4       	brne	.+12     	; 0x1de6 <__addsf3+0x1e>
    1dda:	9f 3f       	cpi	r25, 0xFF	; 255
    1ddc:	11 f4       	brne	.+4      	; 0x1de2 <__addsf3+0x1a>
    1dde:	1e f4       	brtc	.+6      	; 0x1de6 <__addsf3+0x1e>
    1de0:	33 c1       	rjmp	.+614    	; 0x2048 <__fp_nan>
    1de2:	0e f4       	brtc	.+2      	; 0x1de6 <__addsf3+0x1e>
    1de4:	e0 95       	com	r30
    1de6:	e7 fb       	bst	r30, 7
    1de8:	29 c1       	rjmp	.+594    	; 0x203c <__fp_inf>

00001dea <__addsf3x>:
    1dea:	e9 2f       	mov	r30, r25
    1dec:	4f d1       	rcall	.+670    	; 0x208c <__fp_split3>
    1dee:	80 f3       	brcs	.-32     	; 0x1dd0 <__addsf3+0x8>
    1df0:	ba 17       	cp	r27, r26
    1df2:	62 07       	cpc	r22, r18
    1df4:	73 07       	cpc	r23, r19
    1df6:	84 07       	cpc	r24, r20
    1df8:	95 07       	cpc	r25, r21
    1dfa:	18 f0       	brcs	.+6      	; 0x1e02 <__addsf3x+0x18>
    1dfc:	71 f4       	brne	.+28     	; 0x1e1a <__addsf3x+0x30>
    1dfe:	9e f5       	brtc	.+102    	; 0x1e66 <__addsf3x+0x7c>
    1e00:	67 c1       	rjmp	.+718    	; 0x20d0 <__fp_zero>
    1e02:	0e f4       	brtc	.+2      	; 0x1e06 <__addsf3x+0x1c>
    1e04:	e0 95       	com	r30
    1e06:	0b 2e       	mov	r0, r27
    1e08:	ba 2f       	mov	r27, r26
    1e0a:	a0 2d       	mov	r26, r0
    1e0c:	0b 01       	movw	r0, r22
    1e0e:	b9 01       	movw	r22, r18
    1e10:	90 01       	movw	r18, r0
    1e12:	0c 01       	movw	r0, r24
    1e14:	ca 01       	movw	r24, r20
    1e16:	a0 01       	movw	r20, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	ff 27       	eor	r31, r31
    1e1c:	59 1b       	sub	r21, r25
    1e1e:	99 f0       	breq	.+38     	; 0x1e46 <__addsf3x+0x5c>
    1e20:	59 3f       	cpi	r21, 0xF9	; 249
    1e22:	50 f4       	brcc	.+20     	; 0x1e38 <__addsf3x+0x4e>
    1e24:	50 3e       	cpi	r21, 0xE0	; 224
    1e26:	68 f1       	brcs	.+90     	; 0x1e82 <__addsf3x+0x98>
    1e28:	1a 16       	cp	r1, r26
    1e2a:	f0 40       	sbci	r31, 0x00	; 0
    1e2c:	a2 2f       	mov	r26, r18
    1e2e:	23 2f       	mov	r18, r19
    1e30:	34 2f       	mov	r19, r20
    1e32:	44 27       	eor	r20, r20
    1e34:	58 5f       	subi	r21, 0xF8	; 248
    1e36:	f3 cf       	rjmp	.-26     	; 0x1e1e <__addsf3x+0x34>
    1e38:	46 95       	lsr	r20
    1e3a:	37 95       	ror	r19
    1e3c:	27 95       	ror	r18
    1e3e:	a7 95       	ror	r26
    1e40:	f0 40       	sbci	r31, 0x00	; 0
    1e42:	53 95       	inc	r21
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__addsf3x+0x4e>
    1e46:	7e f4       	brtc	.+30     	; 0x1e66 <__addsf3x+0x7c>
    1e48:	1f 16       	cp	r1, r31
    1e4a:	ba 0b       	sbc	r27, r26
    1e4c:	62 0b       	sbc	r22, r18
    1e4e:	73 0b       	sbc	r23, r19
    1e50:	84 0b       	sbc	r24, r20
    1e52:	ba f0       	brmi	.+46     	; 0x1e82 <__addsf3x+0x98>
    1e54:	91 50       	subi	r25, 0x01	; 1
    1e56:	a1 f0       	breq	.+40     	; 0x1e80 <__addsf3x+0x96>
    1e58:	ff 0f       	add	r31, r31
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	66 1f       	adc	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	88 1f       	adc	r24, r24
    1e62:	c2 f7       	brpl	.-16     	; 0x1e54 <__addsf3x+0x6a>
    1e64:	0e c0       	rjmp	.+28     	; 0x1e82 <__addsf3x+0x98>
    1e66:	ba 0f       	add	r27, r26
    1e68:	62 1f       	adc	r22, r18
    1e6a:	73 1f       	adc	r23, r19
    1e6c:	84 1f       	adc	r24, r20
    1e6e:	48 f4       	brcc	.+18     	; 0x1e82 <__addsf3x+0x98>
    1e70:	87 95       	ror	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b7 95       	ror	r27
    1e78:	f7 95       	ror	r31
    1e7a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <__addsf3x+0x96>
    1e7e:	b3 cf       	rjmp	.-154    	; 0x1de6 <__addsf3+0x1e>
    1e80:	93 95       	inc	r25
    1e82:	88 0f       	add	r24, r24
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <__addsf3x+0x9e>
    1e86:	99 27       	eor	r25, r25
    1e88:	ee 0f       	add	r30, r30
    1e8a:	97 95       	ror	r25
    1e8c:	87 95       	ror	r24
    1e8e:	08 95       	ret

00001e90 <__divsf3>:
    1e90:	0c d0       	rcall	.+24     	; 0x1eaa <__divsf3x>
    1e92:	eb c0       	rjmp	.+470    	; 0x206a <__fp_round>
    1e94:	e3 d0       	rcall	.+454    	; 0x205c <__fp_pscB>
    1e96:	40 f0       	brcs	.+16     	; 0x1ea8 <__divsf3+0x18>
    1e98:	da d0       	rcall	.+436    	; 0x204e <__fp_pscA>
    1e9a:	30 f0       	brcs	.+12     	; 0x1ea8 <__divsf3+0x18>
    1e9c:	21 f4       	brne	.+8      	; 0x1ea6 <__divsf3+0x16>
    1e9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea0:	19 f0       	breq	.+6      	; 0x1ea8 <__divsf3+0x18>
    1ea2:	cc c0       	rjmp	.+408    	; 0x203c <__fp_inf>
    1ea4:	51 11       	cpse	r21, r1
    1ea6:	15 c1       	rjmp	.+554    	; 0x20d2 <__fp_szero>
    1ea8:	cf c0       	rjmp	.+414    	; 0x2048 <__fp_nan>

00001eaa <__divsf3x>:
    1eaa:	f0 d0       	rcall	.+480    	; 0x208c <__fp_split3>
    1eac:	98 f3       	brcs	.-26     	; 0x1e94 <__divsf3+0x4>

00001eae <__divsf3_pse>:
    1eae:	99 23       	and	r25, r25
    1eb0:	c9 f3       	breq	.-14     	; 0x1ea4 <__divsf3+0x14>
    1eb2:	55 23       	and	r21, r21
    1eb4:	b1 f3       	breq	.-20     	; 0x1ea2 <__divsf3+0x12>
    1eb6:	95 1b       	sub	r25, r21
    1eb8:	55 0b       	sbc	r21, r21
    1eba:	bb 27       	eor	r27, r27
    1ebc:	aa 27       	eor	r26, r26
    1ebe:	62 17       	cp	r22, r18
    1ec0:	73 07       	cpc	r23, r19
    1ec2:	84 07       	cpc	r24, r20
    1ec4:	38 f0       	brcs	.+14     	; 0x1ed4 <__divsf3_pse+0x26>
    1ec6:	9f 5f       	subi	r25, 0xFF	; 255
    1ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eca:	22 0f       	add	r18, r18
    1ecc:	33 1f       	adc	r19, r19
    1ece:	44 1f       	adc	r20, r20
    1ed0:	aa 1f       	adc	r26, r26
    1ed2:	a9 f3       	breq	.-22     	; 0x1ebe <__divsf3_pse+0x10>
    1ed4:	33 d0       	rcall	.+102    	; 0x1f3c <__divsf3_pse+0x8e>
    1ed6:	0e 2e       	mov	r0, r30
    1ed8:	3a f0       	brmi	.+14     	; 0x1ee8 <__divsf3_pse+0x3a>
    1eda:	e0 e8       	ldi	r30, 0x80	; 128
    1edc:	30 d0       	rcall	.+96     	; 0x1f3e <__divsf3_pse+0x90>
    1ede:	91 50       	subi	r25, 0x01	; 1
    1ee0:	50 40       	sbci	r21, 0x00	; 0
    1ee2:	e6 95       	lsr	r30
    1ee4:	00 1c       	adc	r0, r0
    1ee6:	ca f7       	brpl	.-14     	; 0x1eda <__divsf3_pse+0x2c>
    1ee8:	29 d0       	rcall	.+82     	; 0x1f3c <__divsf3_pse+0x8e>
    1eea:	fe 2f       	mov	r31, r30
    1eec:	27 d0       	rcall	.+78     	; 0x1f3c <__divsf3_pse+0x8e>
    1eee:	66 0f       	add	r22, r22
    1ef0:	77 1f       	adc	r23, r23
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	26 17       	cp	r18, r22
    1ef8:	37 07       	cpc	r19, r23
    1efa:	48 07       	cpc	r20, r24
    1efc:	ab 07       	cpc	r26, r27
    1efe:	b0 e8       	ldi	r27, 0x80	; 128
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <__divsf3_pse+0x56>
    1f02:	bb 0b       	sbc	r27, r27
    1f04:	80 2d       	mov	r24, r0
    1f06:	bf 01       	movw	r22, r30
    1f08:	ff 27       	eor	r31, r31
    1f0a:	93 58       	subi	r25, 0x83	; 131
    1f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0e:	2a f0       	brmi	.+10     	; 0x1f1a <__divsf3_pse+0x6c>
    1f10:	9e 3f       	cpi	r25, 0xFE	; 254
    1f12:	51 05       	cpc	r21, r1
    1f14:	68 f0       	brcs	.+26     	; 0x1f30 <__divsf3_pse+0x82>
    1f16:	92 c0       	rjmp	.+292    	; 0x203c <__fp_inf>
    1f18:	dc c0       	rjmp	.+440    	; 0x20d2 <__fp_szero>
    1f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1c:	ec f3       	brlt	.-6      	; 0x1f18 <__divsf3_pse+0x6a>
    1f1e:	98 3e       	cpi	r25, 0xE8	; 232
    1f20:	dc f3       	brlt	.-10     	; 0x1f18 <__divsf3_pse+0x6a>
    1f22:	86 95       	lsr	r24
    1f24:	77 95       	ror	r23
    1f26:	67 95       	ror	r22
    1f28:	b7 95       	ror	r27
    1f2a:	f7 95       	ror	r31
    1f2c:	9f 5f       	subi	r25, 0xFF	; 255
    1f2e:	c9 f7       	brne	.-14     	; 0x1f22 <__divsf3_pse+0x74>
    1f30:	88 0f       	add	r24, r24
    1f32:	91 1d       	adc	r25, r1
    1f34:	96 95       	lsr	r25
    1f36:	87 95       	ror	r24
    1f38:	97 f9       	bld	r25, 7
    1f3a:	08 95       	ret
    1f3c:	e1 e0       	ldi	r30, 0x01	; 1
    1f3e:	66 0f       	add	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	bb 1f       	adc	r27, r27
    1f46:	62 17       	cp	r22, r18
    1f48:	73 07       	cpc	r23, r19
    1f4a:	84 07       	cpc	r24, r20
    1f4c:	ba 07       	cpc	r27, r26
    1f4e:	20 f0       	brcs	.+8      	; 0x1f58 <__divsf3_pse+0xaa>
    1f50:	62 1b       	sub	r22, r18
    1f52:	73 0b       	sbc	r23, r19
    1f54:	84 0b       	sbc	r24, r20
    1f56:	ba 0b       	sbc	r27, r26
    1f58:	ee 1f       	adc	r30, r30
    1f5a:	88 f7       	brcc	.-30     	; 0x1f3e <__divsf3_pse+0x90>
    1f5c:	e0 95       	com	r30
    1f5e:	08 95       	ret

00001f60 <__fixsfsi>:
    1f60:	04 d0       	rcall	.+8      	; 0x1f6a <__fixunssfsi>
    1f62:	68 94       	set
    1f64:	b1 11       	cpse	r27, r1
    1f66:	b5 c0       	rjmp	.+362    	; 0x20d2 <__fp_szero>
    1f68:	08 95       	ret

00001f6a <__fixunssfsi>:
    1f6a:	98 d0       	rcall	.+304    	; 0x209c <__fp_splitA>
    1f6c:	88 f0       	brcs	.+34     	; 0x1f90 <__fixunssfsi+0x26>
    1f6e:	9f 57       	subi	r25, 0x7F	; 127
    1f70:	90 f0       	brcs	.+36     	; 0x1f96 <__fixunssfsi+0x2c>
    1f72:	b9 2f       	mov	r27, r25
    1f74:	99 27       	eor	r25, r25
    1f76:	b7 51       	subi	r27, 0x17	; 23
    1f78:	a0 f0       	brcs	.+40     	; 0x1fa2 <__fixunssfsi+0x38>
    1f7a:	d1 f0       	breq	.+52     	; 0x1fb0 <__fixunssfsi+0x46>
    1f7c:	66 0f       	add	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	88 1f       	adc	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	1a f0       	brmi	.+6      	; 0x1f8c <__fixunssfsi+0x22>
    1f86:	ba 95       	dec	r27
    1f88:	c9 f7       	brne	.-14     	; 0x1f7c <__fixunssfsi+0x12>
    1f8a:	12 c0       	rjmp	.+36     	; 0x1fb0 <__fixunssfsi+0x46>
    1f8c:	b1 30       	cpi	r27, 0x01	; 1
    1f8e:	81 f0       	breq	.+32     	; 0x1fb0 <__fixunssfsi+0x46>
    1f90:	9f d0       	rcall	.+318    	; 0x20d0 <__fp_zero>
    1f92:	b1 e0       	ldi	r27, 0x01	; 1
    1f94:	08 95       	ret
    1f96:	9c c0       	rjmp	.+312    	; 0x20d0 <__fp_zero>
    1f98:	67 2f       	mov	r22, r23
    1f9a:	78 2f       	mov	r23, r24
    1f9c:	88 27       	eor	r24, r24
    1f9e:	b8 5f       	subi	r27, 0xF8	; 248
    1fa0:	39 f0       	breq	.+14     	; 0x1fb0 <__fixunssfsi+0x46>
    1fa2:	b9 3f       	cpi	r27, 0xF9	; 249
    1fa4:	cc f3       	brlt	.-14     	; 0x1f98 <__fixunssfsi+0x2e>
    1fa6:	86 95       	lsr	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	b3 95       	inc	r27
    1fae:	d9 f7       	brne	.-10     	; 0x1fa6 <__fixunssfsi+0x3c>
    1fb0:	3e f4       	brtc	.+14     	; 0x1fc0 <__fixunssfsi+0x56>
    1fb2:	90 95       	com	r25
    1fb4:	80 95       	com	r24
    1fb6:	70 95       	com	r23
    1fb8:	61 95       	neg	r22
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	08 95       	ret

00001fc2 <__floatunsisf>:
    1fc2:	e8 94       	clt
    1fc4:	09 c0       	rjmp	.+18     	; 0x1fd8 <__floatsisf+0x12>

00001fc6 <__floatsisf>:
    1fc6:	97 fb       	bst	r25, 7
    1fc8:	3e f4       	brtc	.+14     	; 0x1fd8 <__floatsisf+0x12>
    1fca:	90 95       	com	r25
    1fcc:	80 95       	com	r24
    1fce:	70 95       	com	r23
    1fd0:	61 95       	neg	r22
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	99 23       	and	r25, r25
    1fda:	a9 f0       	breq	.+42     	; 0x2006 <__floatsisf+0x40>
    1fdc:	f9 2f       	mov	r31, r25
    1fde:	96 e9       	ldi	r25, 0x96	; 150
    1fe0:	bb 27       	eor	r27, r27
    1fe2:	93 95       	inc	r25
    1fe4:	f6 95       	lsr	r31
    1fe6:	87 95       	ror	r24
    1fe8:	77 95       	ror	r23
    1fea:	67 95       	ror	r22
    1fec:	b7 95       	ror	r27
    1fee:	f1 11       	cpse	r31, r1
    1ff0:	f8 cf       	rjmp	.-16     	; 0x1fe2 <__floatsisf+0x1c>
    1ff2:	fa f4       	brpl	.+62     	; 0x2032 <__floatsisf+0x6c>
    1ff4:	bb 0f       	add	r27, r27
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <__floatsisf+0x36>
    1ff8:	60 ff       	sbrs	r22, 0
    1ffa:	1b c0       	rjmp	.+54     	; 0x2032 <__floatsisf+0x6c>
    1ffc:	6f 5f       	subi	r22, 0xFF	; 255
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	8f 4f       	sbci	r24, 0xFF	; 255
    2002:	9f 4f       	sbci	r25, 0xFF	; 255
    2004:	16 c0       	rjmp	.+44     	; 0x2032 <__floatsisf+0x6c>
    2006:	88 23       	and	r24, r24
    2008:	11 f0       	breq	.+4      	; 0x200e <__floatsisf+0x48>
    200a:	96 e9       	ldi	r25, 0x96	; 150
    200c:	11 c0       	rjmp	.+34     	; 0x2030 <__floatsisf+0x6a>
    200e:	77 23       	and	r23, r23
    2010:	21 f0       	breq	.+8      	; 0x201a <__floatsisf+0x54>
    2012:	9e e8       	ldi	r25, 0x8E	; 142
    2014:	87 2f       	mov	r24, r23
    2016:	76 2f       	mov	r23, r22
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <__floatsisf+0x5e>
    201a:	66 23       	and	r22, r22
    201c:	71 f0       	breq	.+28     	; 0x203a <__floatsisf+0x74>
    201e:	96 e8       	ldi	r25, 0x86	; 134
    2020:	86 2f       	mov	r24, r22
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	2a f0       	brmi	.+10     	; 0x2032 <__floatsisf+0x6c>
    2028:	9a 95       	dec	r25
    202a:	66 0f       	add	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	88 1f       	adc	r24, r24
    2030:	da f7       	brpl	.-10     	; 0x2028 <__floatsisf+0x62>
    2032:	88 0f       	add	r24, r24
    2034:	96 95       	lsr	r25
    2036:	87 95       	ror	r24
    2038:	97 f9       	bld	r25, 7
    203a:	08 95       	ret

0000203c <__fp_inf>:
    203c:	97 f9       	bld	r25, 7
    203e:	9f 67       	ori	r25, 0x7F	; 127
    2040:	80 e8       	ldi	r24, 0x80	; 128
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	08 95       	ret

00002048 <__fp_nan>:
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	80 ec       	ldi	r24, 0xC0	; 192
    204c:	08 95       	ret

0000204e <__fp_pscA>:
    204e:	00 24       	eor	r0, r0
    2050:	0a 94       	dec	r0
    2052:	16 16       	cp	r1, r22
    2054:	17 06       	cpc	r1, r23
    2056:	18 06       	cpc	r1, r24
    2058:	09 06       	cpc	r0, r25
    205a:	08 95       	ret

0000205c <__fp_pscB>:
    205c:	00 24       	eor	r0, r0
    205e:	0a 94       	dec	r0
    2060:	12 16       	cp	r1, r18
    2062:	13 06       	cpc	r1, r19
    2064:	14 06       	cpc	r1, r20
    2066:	05 06       	cpc	r0, r21
    2068:	08 95       	ret

0000206a <__fp_round>:
    206a:	09 2e       	mov	r0, r25
    206c:	03 94       	inc	r0
    206e:	00 0c       	add	r0, r0
    2070:	11 f4       	brne	.+4      	; 0x2076 <__fp_round+0xc>
    2072:	88 23       	and	r24, r24
    2074:	52 f0       	brmi	.+20     	; 0x208a <__fp_round+0x20>
    2076:	bb 0f       	add	r27, r27
    2078:	40 f4       	brcc	.+16     	; 0x208a <__fp_round+0x20>
    207a:	bf 2b       	or	r27, r31
    207c:	11 f4       	brne	.+4      	; 0x2082 <__fp_round+0x18>
    207e:	60 ff       	sbrs	r22, 0
    2080:	04 c0       	rjmp	.+8      	; 0x208a <__fp_round+0x20>
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	08 95       	ret

0000208c <__fp_split3>:
    208c:	57 fd       	sbrc	r21, 7
    208e:	90 58       	subi	r25, 0x80	; 128
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	59 f0       	breq	.+22     	; 0x20ac <__fp_splitA+0x10>
    2096:	5f 3f       	cpi	r21, 0xFF	; 255
    2098:	71 f0       	breq	.+28     	; 0x20b6 <__fp_splitA+0x1a>
    209a:	47 95       	ror	r20

0000209c <__fp_splitA>:
    209c:	88 0f       	add	r24, r24
    209e:	97 fb       	bst	r25, 7
    20a0:	99 1f       	adc	r25, r25
    20a2:	61 f0       	breq	.+24     	; 0x20bc <__fp_splitA+0x20>
    20a4:	9f 3f       	cpi	r25, 0xFF	; 255
    20a6:	79 f0       	breq	.+30     	; 0x20c6 <__fp_splitA+0x2a>
    20a8:	87 95       	ror	r24
    20aa:	08 95       	ret
    20ac:	12 16       	cp	r1, r18
    20ae:	13 06       	cpc	r1, r19
    20b0:	14 06       	cpc	r1, r20
    20b2:	55 1f       	adc	r21, r21
    20b4:	f2 cf       	rjmp	.-28     	; 0x209a <__fp_split3+0xe>
    20b6:	46 95       	lsr	r20
    20b8:	f1 df       	rcall	.-30     	; 0x209c <__fp_splitA>
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <__fp_splitA+0x30>
    20bc:	16 16       	cp	r1, r22
    20be:	17 06       	cpc	r1, r23
    20c0:	18 06       	cpc	r1, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	f1 cf       	rjmp	.-30     	; 0x20a8 <__fp_splitA+0xc>
    20c6:	86 95       	lsr	r24
    20c8:	71 05       	cpc	r23, r1
    20ca:	61 05       	cpc	r22, r1
    20cc:	08 94       	sec
    20ce:	08 95       	ret

000020d0 <__fp_zero>:
    20d0:	e8 94       	clt

000020d2 <__fp_szero>:
    20d2:	bb 27       	eor	r27, r27
    20d4:	66 27       	eor	r22, r22
    20d6:	77 27       	eor	r23, r23
    20d8:	cb 01       	movw	r24, r22
    20da:	97 f9       	bld	r25, 7
    20dc:	08 95       	ret

000020de <__mulsf3>:
    20de:	0b d0       	rcall	.+22     	; 0x20f6 <__mulsf3x>
    20e0:	c4 cf       	rjmp	.-120    	; 0x206a <__fp_round>
    20e2:	b5 df       	rcall	.-150    	; 0x204e <__fp_pscA>
    20e4:	28 f0       	brcs	.+10     	; 0x20f0 <__mulsf3+0x12>
    20e6:	ba df       	rcall	.-140    	; 0x205c <__fp_pscB>
    20e8:	18 f0       	brcs	.+6      	; 0x20f0 <__mulsf3+0x12>
    20ea:	95 23       	and	r25, r21
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <__mulsf3+0x12>
    20ee:	a6 cf       	rjmp	.-180    	; 0x203c <__fp_inf>
    20f0:	ab cf       	rjmp	.-170    	; 0x2048 <__fp_nan>
    20f2:	11 24       	eor	r1, r1
    20f4:	ee cf       	rjmp	.-36     	; 0x20d2 <__fp_szero>

000020f6 <__mulsf3x>:
    20f6:	ca df       	rcall	.-108    	; 0x208c <__fp_split3>
    20f8:	a0 f3       	brcs	.-24     	; 0x20e2 <__mulsf3+0x4>

000020fa <__mulsf3_pse>:
    20fa:	95 9f       	mul	r25, r21
    20fc:	d1 f3       	breq	.-12     	; 0x20f2 <__mulsf3+0x14>
    20fe:	95 0f       	add	r25, r21
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	55 1f       	adc	r21, r21
    2104:	62 9f       	mul	r22, r18
    2106:	f0 01       	movw	r30, r0
    2108:	72 9f       	mul	r23, r18
    210a:	bb 27       	eor	r27, r27
    210c:	f0 0d       	add	r31, r0
    210e:	b1 1d       	adc	r27, r1
    2110:	63 9f       	mul	r22, r19
    2112:	aa 27       	eor	r26, r26
    2114:	f0 0d       	add	r31, r0
    2116:	b1 1d       	adc	r27, r1
    2118:	aa 1f       	adc	r26, r26
    211a:	64 9f       	mul	r22, r20
    211c:	66 27       	eor	r22, r22
    211e:	b0 0d       	add	r27, r0
    2120:	a1 1d       	adc	r26, r1
    2122:	66 1f       	adc	r22, r22
    2124:	82 9f       	mul	r24, r18
    2126:	22 27       	eor	r18, r18
    2128:	b0 0d       	add	r27, r0
    212a:	a1 1d       	adc	r26, r1
    212c:	62 1f       	adc	r22, r18
    212e:	73 9f       	mul	r23, r19
    2130:	b0 0d       	add	r27, r0
    2132:	a1 1d       	adc	r26, r1
    2134:	62 1f       	adc	r22, r18
    2136:	83 9f       	mul	r24, r19
    2138:	a0 0d       	add	r26, r0
    213a:	61 1d       	adc	r22, r1
    213c:	22 1f       	adc	r18, r18
    213e:	74 9f       	mul	r23, r20
    2140:	33 27       	eor	r19, r19
    2142:	a0 0d       	add	r26, r0
    2144:	61 1d       	adc	r22, r1
    2146:	23 1f       	adc	r18, r19
    2148:	84 9f       	mul	r24, r20
    214a:	60 0d       	add	r22, r0
    214c:	21 1d       	adc	r18, r1
    214e:	82 2f       	mov	r24, r18
    2150:	76 2f       	mov	r23, r22
    2152:	6a 2f       	mov	r22, r26
    2154:	11 24       	eor	r1, r1
    2156:	9f 57       	subi	r25, 0x7F	; 127
    2158:	50 40       	sbci	r21, 0x00	; 0
    215a:	8a f0       	brmi	.+34     	; 0x217e <__mulsf3_pse+0x84>
    215c:	e1 f0       	breq	.+56     	; 0x2196 <__mulsf3_pse+0x9c>
    215e:	88 23       	and	r24, r24
    2160:	4a f0       	brmi	.+18     	; 0x2174 <__mulsf3_pse+0x7a>
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	bb 1f       	adc	r27, r27
    2168:	66 1f       	adc	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	88 1f       	adc	r24, r24
    216e:	91 50       	subi	r25, 0x01	; 1
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	a9 f7       	brne	.-22     	; 0x215e <__mulsf3_pse+0x64>
    2174:	9e 3f       	cpi	r25, 0xFE	; 254
    2176:	51 05       	cpc	r21, r1
    2178:	70 f0       	brcs	.+28     	; 0x2196 <__mulsf3_pse+0x9c>
    217a:	60 cf       	rjmp	.-320    	; 0x203c <__fp_inf>
    217c:	aa cf       	rjmp	.-172    	; 0x20d2 <__fp_szero>
    217e:	5f 3f       	cpi	r21, 0xFF	; 255
    2180:	ec f3       	brlt	.-6      	; 0x217c <__mulsf3_pse+0x82>
    2182:	98 3e       	cpi	r25, 0xE8	; 232
    2184:	dc f3       	brlt	.-10     	; 0x217c <__mulsf3_pse+0x82>
    2186:	86 95       	lsr	r24
    2188:	77 95       	ror	r23
    218a:	67 95       	ror	r22
    218c:	b7 95       	ror	r27
    218e:	f7 95       	ror	r31
    2190:	e7 95       	ror	r30
    2192:	9f 5f       	subi	r25, 0xFF	; 255
    2194:	c1 f7       	brne	.-16     	; 0x2186 <__mulsf3_pse+0x8c>
    2196:	fe 2b       	or	r31, r30
    2198:	88 0f       	add	r24, r24
    219a:	91 1d       	adc	r25, r1
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__divmodhi4>:
    21a4:	97 fb       	bst	r25, 7
    21a6:	07 2e       	mov	r0, r23
    21a8:	16 f4       	brtc	.+4      	; 0x21ae <__divmodhi4+0xa>
    21aa:	00 94       	com	r0
    21ac:	06 d0       	rcall	.+12     	; 0x21ba <__divmodhi4_neg1>
    21ae:	77 fd       	sbrc	r23, 7
    21b0:	08 d0       	rcall	.+16     	; 0x21c2 <__divmodhi4_neg2>
    21b2:	0b d0       	rcall	.+22     	; 0x21ca <__udivmodhi4>
    21b4:	07 fc       	sbrc	r0, 7
    21b6:	05 d0       	rcall	.+10     	; 0x21c2 <__divmodhi4_neg2>
    21b8:	3e f4       	brtc	.+14     	; 0x21c8 <__divmodhi4_exit>

000021ba <__divmodhi4_neg1>:
    21ba:	90 95       	com	r25
    21bc:	81 95       	neg	r24
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	08 95       	ret

000021c2 <__divmodhi4_neg2>:
    21c2:	70 95       	com	r23
    21c4:	61 95       	neg	r22
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255

000021c8 <__divmodhi4_exit>:
    21c8:	08 95       	ret

000021ca <__udivmodhi4>:
    21ca:	aa 1b       	sub	r26, r26
    21cc:	bb 1b       	sub	r27, r27
    21ce:	51 e1       	ldi	r21, 0x11	; 17
    21d0:	07 c0       	rjmp	.+14     	; 0x21e0 <__udivmodhi4_ep>

000021d2 <__udivmodhi4_loop>:
    21d2:	aa 1f       	adc	r26, r26
    21d4:	bb 1f       	adc	r27, r27
    21d6:	a6 17       	cp	r26, r22
    21d8:	b7 07       	cpc	r27, r23
    21da:	10 f0       	brcs	.+4      	; 0x21e0 <__udivmodhi4_ep>
    21dc:	a6 1b       	sub	r26, r22
    21de:	b7 0b       	sbc	r27, r23

000021e0 <__udivmodhi4_ep>:
    21e0:	88 1f       	adc	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	5a 95       	dec	r21
    21e6:	a9 f7       	brne	.-22     	; 0x21d2 <__udivmodhi4_loop>
    21e8:	80 95       	com	r24
    21ea:	90 95       	com	r25
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	08 95       	ret

000021f2 <_exit>:
    21f2:	f8 94       	cli

000021f4 <__stop_program>:
    21f4:	ff cf       	rjmp	.-2      	; 0x21f4 <__stop_program>
