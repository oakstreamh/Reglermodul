
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  0000241c  000024b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000241c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001da  008001da  0000258a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  000025ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000355d  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc7  00000000  00000000  00005d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002983  00000000  00000000  000069e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006ac  00000000  00000000  0000936c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ca6  00000000  00000000  00009a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001982  00000000  00000000  0001a6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0001c040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b05  00000000  00000000  0001c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_19>
      50:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 32       	cpi	r26, 0x22	; 34
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <main>
      c6:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <count>:



void count(int mode)
{
	if (mode == 1)
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	41 f4       	brne	.+16     	; 0xe2 <count+0x16>
	{
		TCNT3 = 0;
      d2:	10 92 95 00 	sts	0x0095, r1
      d6:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (1<<CS32)|(1<<CS30);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	80 93 91 00 	sts	0x0091, r24
      e0:	08 95       	ret
	}
	else if (mode == 0)
      e2:	89 2b       	or	r24, r25
      e4:	31 f4       	brne	.+12     	; 0xf2 <count+0x26>
	{
		TCNT3 = 0;
      e6:	10 92 95 00 	sts	0x0095, r1
      ea:	10 92 94 00 	sts	0x0094, r1
		TCCR3B = (0<<CS32)|(0<<CS30);
      ee:	10 92 91 00 	sts	0x0091, r1
      f2:	08 95       	ret

000000f4 <checkCount>:
	}
	
}

int checkCount(int req_delay)
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
	int req_count = (int) req_delay*F_CPU/1024-1;
	if(TCNT3<req_count)
      f8:	e0 91 94 00 	lds	r30, 0x0094
      fc:	f0 91 95 00 	lds	r31, 0x0095
	
}

int checkCount(int req_delay)
{
	int req_count = (int) req_delay*F_CPU/1024-1;
     100:	dc 01       	movw	r26, r24
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	41 ee       	ldi	r20, 0xE1	; 225
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__mulshisi3>
     10e:	8b 01       	movw	r16, r22
     110:	9c 01       	movw	r18, r24
     112:	99 23       	and	r25, r25
     114:	24 f4       	brge	.+8      	; 0x11e <checkCount+0x2a>
     116:	01 50       	subi	r16, 0x01	; 1
     118:	1c 4f       	sbci	r17, 0xFC	; 252
     11a:	2f 4f       	sbci	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	d9 01       	movw	r26, r18
     120:	c8 01       	movw	r24, r16
     122:	07 2e       	mov	r0, r23
     124:	7a e0       	ldi	r23, 0x0A	; 10
     126:	b5 95       	asr	r27
     128:	a7 95       	ror	r26
     12a:	97 95       	ror	r25
     12c:	87 95       	ror	r24
     12e:	7a 95       	dec	r23
     130:	d1 f7       	brne	.-12     	; 0x126 <checkCount+0x32>
     132:	70 2d       	mov	r23, r0
     134:	01 97       	sbiw	r24, 0x01	; 1
	if(TCNT3<req_count)
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	e8 17       	cp	r30, r24
     13c:	f9 07       	cpc	r31, r25
     13e:	10 f4       	brcc	.+4      	; 0x144 <checkCount+0x50>
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 0;
	}
	return 1;
     144:	c9 01       	movw	r24, r18
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <doFuzzy>:
     14c:	2f 92       	push	r2
     14e:	3f 92       	push	r3
     150:	4f 92       	push	r4
     152:	5f 92       	push	r5
     154:	6f 92       	push	r6
     156:	7f 92       	push	r7
     158:	8f 92       	push	r8
     15a:	9f 92       	push	r9
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	c4 5c       	subi	r28, 0xC4	; 196
     176:	d1 40       	sbci	r29, 0x01	; 1
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	cd bf       	out	0x3d, r28	; 61
     182:	2c 01       	movw	r4, r24
     184:	6b 01       	movw	r12, r22
     186:	88 e0       	ldi	r24, 0x08	; 8
     188:	e4 e0       	ldi	r30, 0x04	; 4
     18a:	f1 e0       	ldi	r31, 0x01	; 1
     18c:	de 01       	movw	r26, r28
     18e:	11 96       	adiw	r26, 0x01	; 1
     190:	01 90       	ld	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	8a 95       	dec	r24
     196:	e1 f7       	brne	.-8      	; 0x190 <doFuzzy+0x44>
     198:	3e 01       	movw	r6, r28
     19a:	21 e1       	ldi	r18, 0x11	; 17
     19c:	62 0e       	add	r6, r18
     19e:	71 1c       	adc	r7, r1
     1a0:	0f 2e       	mov	r0, r31
     1a2:	f7 e8       	ldi	r31, 0x87	; 135
     1a4:	ef 2e       	mov	r14, r31
     1a6:	f1 2c       	mov	r15, r1
     1a8:	f0 2d       	mov	r31, r0
     1aa:	08 e7       	ldi	r16, 0x78	; 120
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	24 e6       	ldi	r18, 0x64	; 100
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	43 e6       	ldi	r20, 0x63	; 99
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	6c e0       	ldi	r22, 0x0C	; 12
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	c3 01       	movw	r24, r6
     1bc:	eb d6       	rcall	.+3542   	; 0xf94 <MATLAB_MF>
     1be:	4e 01       	movw	r8, r28
     1c0:	47 e2       	ldi	r20, 0x27	; 39
     1c2:	84 0e       	add	r8, r20
     1c4:	91 1c       	adc	r9, r1
     1c6:	0f 2e       	mov	r0, r31
     1c8:	ff ea       	ldi	r31, 0xAF	; 175
     1ca:	ef 2e       	mov	r14, r31
     1cc:	f1 2c       	mov	r15, r1
     1ce:	f0 2d       	mov	r31, r0
     1d0:	0b e9       	ldi	r16, 0x9B	; 155
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	21 e9       	ldi	r18, 0x91	; 145
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	4d e7       	ldi	r20, 0x7D	; 125
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	66 e1       	ldi	r22, 0x16	; 22
     1de:	71 e0       	ldi	r23, 0x01	; 1
     1e0:	c4 01       	movw	r24, r8
     1e2:	d8 d6       	rcall	.+3504   	; 0xf94 <MATLAB_MF>
     1e4:	5e 01       	movw	r10, r28
     1e6:	5d e3       	ldi	r21, 0x3D	; 61
     1e8:	a5 0e       	add	r10, r21
     1ea:	b1 1c       	adc	r11, r1
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f8 ec       	ldi	r31, 0xC8	; 200
     1f0:	ef 2e       	mov	r14, r31
     1f2:	f1 2c       	mov	r15, r1
     1f4:	f0 2d       	mov	r31, r0
     1f6:	07 ec       	ldi	r16, 0xC7	; 199
     1f8:	10 e0       	ldi	r17, 0x00	; 0
     1fa:	2a eb       	ldi	r18, 0xBA	; 186
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	4f ea       	ldi	r20, 0xAF	; 175
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	6d e1       	ldi	r22, 0x1D	; 29
     204:	71 e0       	ldi	r23, 0x01	; 1
     206:	c5 01       	movw	r24, r10
     208:	c5 d6       	rcall	.+3466   	; 0xf94 <MATLAB_MF>
     20a:	7e 86       	std	Y+14, r7	; 0x0e
     20c:	6d 86       	std	Y+13, r6	; 0x0d
     20e:	9e a2       	std	Y+38, r9	; 0x26
     210:	8d a2       	std	Y+37, r8	; 0x25
     212:	bc ae       	std	Y+60, r11	; 0x3c
     214:	ab ae       	std	Y+59, r10	; 0x3b
     216:	63 96       	adiw	r28, 0x13	; 19
     218:	1f ae       	std	Y+63, r1	; 0x3f
     21a:	1e ae       	std	Y+62, r1	; 0x3e
     21c:	63 97       	sbiw	r28, 0x13	; 19
     21e:	84 e6       	ldi	r24, 0x64	; 100
     220:	48 16       	cp	r4, r24
     222:	51 04       	cpc	r5, r1
     224:	2c f4       	brge	.+10     	; 0x230 <doFuzzy+0xe4>
     226:	84 e6       	ldi	r24, 0x64	; 100
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9c 87       	std	Y+12, r25	; 0x0c
     22c:	8b 87       	std	Y+11, r24	; 0x0b
     22e:	0b c0       	rjmp	.+22     	; 0x246 <doFuzzy+0xfa>
     230:	a8 ec       	ldi	r26, 0xC8	; 200
     232:	4a 16       	cp	r4, r26
     234:	51 04       	cpc	r5, r1
     236:	2c f0       	brlt	.+10     	; 0x242 <doFuzzy+0xf6>
     238:	87 ec       	ldi	r24, 0xC7	; 199
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9c 87       	std	Y+12, r25	; 0x0c
     23e:	8b 87       	std	Y+11, r24	; 0x0b
     240:	02 c0       	rjmp	.+4      	; 0x246 <doFuzzy+0xfa>
     242:	5c 86       	std	Y+12, r5	; 0x0c
     244:	4b 86       	std	Y+11, r4	; 0x0b
     246:	88 e0       	ldi	r24, 0x08	; 8
     248:	e6 e2       	ldi	r30, 0x26	; 38
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	de 01       	movw	r26, r28
     24e:	ad 5a       	subi	r26, 0xAD	; 173
     250:	bf 4f       	sbci	r27, 0xFF	; 255
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <doFuzzy+0x106>
     25a:	3e 01       	movw	r6, r28
     25c:	b3 e6       	ldi	r27, 0x63	; 99
     25e:	6b 0e       	add	r6, r27
     260:	71 1c       	adc	r7, r1
     262:	0f 2e       	mov	r0, r31
     264:	f3 e2       	ldi	r31, 0x23	; 35
     266:	ef 2e       	mov	r14, r31
     268:	f1 2c       	mov	r15, r1
     26a:	f0 2d       	mov	r31, r0
     26c:	04 e1       	ldi	r16, 0x14	; 20
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	6e e2       	ldi	r22, 0x2E	; 46
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	c3 01       	movw	r24, r6
     27e:	8a d6       	rcall	.+3348   	; 0xf94 <MATLAB_MF>
     280:	4e 01       	movw	r8, r28
     282:	e9 e7       	ldi	r30, 0x79	; 121
     284:	8e 0e       	add	r8, r30
     286:	91 1c       	adc	r9, r1
     288:	0f 2e       	mov	r0, r31
     28a:	f7 e3       	ldi	r31, 0x37	; 55
     28c:	ef 2e       	mov	r14, r31
     28e:	f1 2c       	mov	r15, r1
     290:	f0 2d       	mov	r31, r0
     292:	08 e2       	ldi	r16, 0x28	; 40
     294:	10 e0       	ldi	r17, 0x00	; 0
     296:	23 e2       	ldi	r18, 0x23	; 35
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	4f e0       	ldi	r20, 0x0F	; 15
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	66 e3       	ldi	r22, 0x36	; 54
     2a0:	71 e0       	ldi	r23, 0x01	; 1
     2a2:	c4 01       	movw	r24, r8
     2a4:	77 d6       	rcall	.+3310   	; 0xf94 <MATLAB_MF>
     2a6:	5e 01       	movw	r10, r28
     2a8:	ff e8       	ldi	r31, 0x8F	; 143
     2aa:	af 0e       	add	r10, r31
     2ac:	b1 1c       	adc	r11, r1
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fb e4       	ldi	r31, 0x4B	; 75
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f1 2c       	mov	r15, r1
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0a e4       	ldi	r16, 0x4A	; 74
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	22 e3       	ldi	r18, 0x32	; 50
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	43 e2       	ldi	r20, 0x23	; 35
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	6d e3       	ldi	r22, 0x3D	; 61
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	c5 01       	movw	r24, r10
     2ca:	64 d6       	rcall	.+3272   	; 0xf94 <MATLAB_MF>
     2cc:	a1 96       	adiw	r28, 0x21	; 33
     2ce:	7f ae       	std	Y+63, r7	; 0x3f
     2d0:	6e ae       	std	Y+62, r6	; 0x3e
     2d2:	a1 97       	sbiw	r28, 0x21	; 33
     2d4:	d3 01       	movw	r26, r6
     2d6:	55 96       	adiw	r26, 0x15	; 21
     2d8:	9c 92       	st	X, r9
     2da:	8e 92       	st	-X, r8
     2dc:	54 97       	sbiw	r26, 0x14	; 20
     2de:	f4 01       	movw	r30, r8
     2e0:	b5 8a       	std	Z+21, r11	; 0x15
     2e2:	a4 8a       	std	Z+20, r10	; 0x14
     2e4:	d5 01       	movw	r26, r10
     2e6:	55 96       	adiw	r26, 0x15	; 21
     2e8:	1c 92       	st	X, r1
     2ea:	1e 92       	st	-X, r1
     2ec:	54 97       	sbiw	r26, 0x14	; 20
     2ee:	1c 14       	cp	r1, r12
     2f0:	1d 04       	cpc	r1, r13
     2f2:	3c f0       	brlt	.+14     	; 0x302 <doFuzzy+0x1b6>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	6f 96       	adiw	r28, 0x1f	; 31
     2fa:	9f af       	std	Y+63, r25	; 0x3f
     2fc:	8e af       	std	Y+62, r24	; 0x3e
     2fe:	6f 97       	sbiw	r28, 0x1f	; 31
     300:	0f c0       	rjmp	.+30     	; 0x320 <doFuzzy+0x1d4>
     302:	bb e4       	ldi	r27, 0x4B	; 75
     304:	cb 16       	cp	r12, r27
     306:	d1 04       	cpc	r13, r1
     308:	3c f0       	brlt	.+14     	; 0x318 <doFuzzy+0x1cc>
     30a:	8a e4       	ldi	r24, 0x4A	; 74
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	6f 96       	adiw	r28, 0x1f	; 31
     310:	9f af       	std	Y+63, r25	; 0x3f
     312:	8e af       	std	Y+62, r24	; 0x3e
     314:	6f 97       	sbiw	r28, 0x1f	; 31
     316:	04 c0       	rjmp	.+8      	; 0x320 <doFuzzy+0x1d4>
     318:	6f 96       	adiw	r28, 0x1f	; 31
     31a:	df ae       	std	Y+63, r13	; 0x3f
     31c:	ce ae       	std	Y+62, r12	; 0x3e
     31e:	6f 97       	sbiw	r28, 0x1f	; 31
     320:	1e 01       	movw	r2, r28
     322:	e5 ea       	ldi	r30, 0xA5	; 165
     324:	2e 0e       	add	r2, r30
     326:	31 1c       	adc	r3, r1
     328:	89 e0       	ldi	r24, 0x09	; 9
     32a:	e4 e4       	ldi	r30, 0x44	; 68
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	d1 01       	movw	r26, r2
     330:	01 90       	ld	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	8a 95       	dec	r24
     336:	e1 f7       	brne	.-8      	; 0x330 <doFuzzy+0x1e4>
     338:	2e 01       	movw	r4, r28
     33a:	f5 eb       	ldi	r31, 0xB5	; 181
     33c:	4f 0e       	add	r4, r31
     33e:	51 1c       	adc	r5, r1
     340:	0f 2e       	mov	r0, r31
     342:	fc e9       	ldi	r31, 0x9C	; 156
     344:	ef 2e       	mov	r14, r31
     346:	f9 e0       	ldi	r31, 0x09	; 9
     348:	ff 2e       	mov	r15, r31
     34a:	f0 2d       	mov	r31, r0
     34c:	08 e3       	ldi	r16, 0x38	; 56
     34e:	19 e0       	ldi	r17, 0x09	; 9
     350:	28 e3       	ldi	r18, 0x38	; 56
     352:	39 e0       	ldi	r19, 0x09	; 9
     354:	47 e3       	ldi	r20, 0x37	; 55
     356:	59 e0       	ldi	r21, 0x09	; 9
     358:	6d e4       	ldi	r22, 0x4D	; 77
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	c2 01       	movw	r24, r4
     35e:	1a d6       	rcall	.+3124   	; 0xf94 <MATLAB_MF>
     360:	3e 01       	movw	r6, r28
     362:	2b ec       	ldi	r18, 0xCB	; 203
     364:	62 0e       	add	r6, r18
     366:	71 1c       	adc	r7, r1
     368:	0f 2e       	mov	r0, r31
     36a:	e1 2c       	mov	r14, r1
     36c:	fa e0       	ldi	r31, 0x0A	; 10
     36e:	ff 2e       	mov	r15, r31
     370:	f0 2d       	mov	r31, r0
     372:	0c e9       	ldi	r16, 0x9C	; 156
     374:	19 e0       	ldi	r17, 0x09	; 9
     376:	2c e9       	ldi	r18, 0x9C	; 156
     378:	39 e0       	ldi	r19, 0x09	; 9
     37a:	40 e6       	ldi	r20, 0x60	; 96
     37c:	59 e0       	ldi	r21, 0x09	; 9
     37e:	64 ed       	ldi	r22, 0xD4	; 212
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	c3 01       	movw	r24, r6
     384:	07 d6       	rcall	.+3086   	; 0xf94 <MATLAB_MF>
     386:	6e 01       	movw	r12, r28
     388:	41 ee       	ldi	r20, 0xE1	; 225
     38a:	c4 0e       	add	r12, r20
     38c:	d1 1c       	adc	r13, r1
     38e:	0f 2e       	mov	r0, r31
     390:	f0 ea       	ldi	r31, 0xA0	; 160
     392:	ef 2e       	mov	r14, r31
     394:	fa e0       	ldi	r31, 0x0A	; 10
     396:	ff 2e       	mov	r15, r31
     398:	f0 2d       	mov	r31, r0
     39a:	04 e6       	ldi	r16, 0x64	; 100
     39c:	1a e0       	ldi	r17, 0x0A	; 10
     39e:	24 e6       	ldi	r18, 0x64	; 100
     3a0:	3a e0       	ldi	r19, 0x0A	; 10
     3a2:	48 ed       	ldi	r20, 0xD8	; 216
     3a4:	59 e0       	ldi	r21, 0x09	; 9
     3a6:	67 e5       	ldi	r22, 0x57	; 87
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	c6 01       	movw	r24, r12
     3ac:	f3 d5       	rcall	.+3046   	; 0xf94 <MATLAB_MF>
     3ae:	4e 01       	movw	r8, r28
     3b0:	57 ef       	ldi	r21, 0xF7	; 247
     3b2:	85 0e       	add	r8, r21
     3b4:	91 1c       	adc	r9, r1
     3b6:	0f 2e       	mov	r0, r31
     3b8:	f4 e5       	ldi	r31, 0x54	; 84
     3ba:	ef 2e       	mov	r14, r31
     3bc:	fb e0       	ldi	r31, 0x0B	; 11
     3be:	ff 2e       	mov	r15, r31
     3c0:	f0 2d       	mov	r31, r0
     3c2:	00 ef       	ldi	r16, 0xF0	; 240
     3c4:	1a e0       	ldi	r17, 0x0A	; 10
     3c6:	20 ef       	ldi	r18, 0xF0	; 240
     3c8:	3a e0       	ldi	r19, 0x0A	; 10
     3ca:	4c e8       	ldi	r20, 0x8C	; 140
     3cc:	5a e0       	ldi	r21, 0x0A	; 10
     3ce:	6a ec       	ldi	r22, 0xCA	; 202
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	c4 01       	movw	r24, r8
     3d4:	df d5       	rcall	.+3006   	; 0xf94 <MATLAB_MF>
     3d6:	5e 01       	movw	r10, r28
     3d8:	83 ef       	ldi	r24, 0xF3	; 243
     3da:	a8 1a       	sub	r10, r24
     3dc:	8e ef       	ldi	r24, 0xFE	; 254
     3de:	b8 0a       	sbc	r11, r24
     3e0:	0f 2e       	mov	r0, r31
     3e2:	f1 e9       	ldi	r31, 0x91	; 145
     3e4:	ef 2e       	mov	r14, r31
     3e6:	fb e0       	ldi	r31, 0x0B	; 11
     3e8:	ff 2e       	mov	r15, r31
     3ea:	f0 2d       	mov	r31, r0
     3ec:	00 e9       	ldi	r16, 0x90	; 144
     3ee:	1b e0       	ldi	r17, 0x0B	; 11
     3f0:	20 e9       	ldi	r18, 0x90	; 144
     3f2:	3b e0       	ldi	r19, 0x0B	; 11
     3f4:	4c e2       	ldi	r20, 0x2C	; 44
     3f6:	5b e0       	ldi	r21, 0x0B	; 11
     3f8:	60 e6       	ldi	r22, 0x60	; 96
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	c5 01       	movw	r24, r10
     3fe:	ca d5       	rcall	.+2964   	; 0xf94 <MATLAB_MF>
     400:	d1 01       	movw	r26, r2
     402:	1d 96       	adiw	r26, 0x0d	; 13
     404:	bc 92       	st	X, r11
     406:	ae 92       	st	-X, r10
     408:	1c 97       	sbiw	r26, 0x0c	; 12
     40a:	f5 01       	movw	r30, r10
     40c:	95 8a       	std	Z+21, r9	; 0x15
     40e:	84 8a       	std	Z+20, r8	; 0x14
     410:	d4 01       	movw	r26, r8
     412:	55 96       	adiw	r26, 0x15	; 21
     414:	dc 92       	st	X, r13
     416:	ce 92       	st	-X, r12
     418:	54 97       	sbiw	r26, 0x14	; 20
     41a:	f6 01       	movw	r30, r12
     41c:	75 8a       	std	Z+21, r7	; 0x15
     41e:	64 8a       	std	Z+20, r6	; 0x14
     420:	d3 01       	movw	r26, r6
     422:	55 96       	adiw	r26, 0x15	; 21
     424:	5c 92       	st	X, r5
     426:	4e 92       	st	-X, r4
     428:	54 97       	sbiw	r26, 0x14	; 20
     42a:	f2 01       	movw	r30, r4
     42c:	15 8a       	std	Z+21, r1	; 0x15
     42e:	14 8a       	std	Z+20, r1	; 0x14
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	90 93 f9 02 	sts	0x02F9, r25
     438:	80 93 f8 02 	sts	0x02F8, r24
     43c:	e2 56       	subi	r30, 0x62	; 98
     43e:	f1 09       	sbc	r31, r1
     440:	f8 8b       	std	Y+16, r31	; 0x10
     442:	ef 87       	std	Y+15, r30	; 0x0f
     444:	17 86       	std	Z+15, r1	; 0x0f
     446:	16 86       	std	Z+14, r1	; 0x0e
     448:	30 92 f7 02 	sts	0x02F7, r3
     44c:	20 92 f6 02 	sts	0x02F6, r2
     450:	d1 01       	movw	r26, r2
     452:	1f 96       	adiw	r26, 0x0f	; 15
     454:	1c 92       	st	X, r1
     456:	1e 92       	st	-X, r1
     458:	1e 97       	sbiw	r26, 0x0e	; 14
     45a:	a2 58       	subi	r26, 0x82	; 130
     45c:	bf 4f       	sbci	r27, 0xFF	; 255
     45e:	73 01       	movw	r14, r6
     460:	ea e0       	ldi	r30, 0x0A	; 10
     462:	ee 0e       	add	r14, r30
     464:	f1 1c       	adc	r15, r1
     466:	11 96       	adiw	r26, 0x01	; 1
     468:	fc 92       	st	X, r15
     46a:	ee 92       	st	-X, r14
     46c:	13 96       	adiw	r26, 0x03	; 3
     46e:	1c 92       	st	X, r1
     470:	1e 92       	st	-X, r1
     472:	12 97       	sbiw	r26, 0x02	; 2
     474:	9e 01       	movw	r18, r28
     476:	29 5d       	subi	r18, 0xD9	; 217
     478:	3e 4f       	sbci	r19, 0xFE	; 254
     47a:	3e 01       	movw	r6, r28
     47c:	f9 e9       	ldi	r31, 0x99	; 153
     47e:	6f 0e       	add	r6, r31
     480:	71 1c       	adc	r7, r1
     482:	f9 01       	movw	r30, r18
     484:	71 82       	std	Z+1, r7	; 0x01
     486:	60 82       	st	Z, r6
     488:	13 82       	std	Z+3, r1	; 0x03
     48a:	12 82       	std	Z+2, r1	; 0x02
     48c:	86 5d       	subi	r24, 0xD6	; 214
     48e:	9e 4f       	sbci	r25, 0xFE	; 254
     490:	8e 01       	movw	r16, r28
     492:	0f 5c       	subi	r16, 0xCF	; 207
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	fc 01       	movw	r30, r24
     498:	11 83       	std	Z+1, r17	; 0x01
     49a:	00 83       	st	Z, r16
     49c:	33 83       	std	Z+3, r19	; 0x03
     49e:	22 83       	std	Z+2, r18	; 0x02
     4a0:	34 96       	adiw	r30, 0x04	; 4
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
     4a6:	b3 83       	std	Z+3, r27	; 0x03
     4a8:	a2 83       	std	Z+2, r26	; 0x02
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	14 82       	std	Z+4, r1	; 0x04
     4ae:	22 5f       	subi	r18, 0xF2	; 242
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	4a e0       	ldi	r20, 0x0A	; 10
     4b4:	84 0e       	add	r8, r20
     4b6:	91 1c       	adc	r9, r1
     4b8:	d9 01       	movw	r26, r18
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	9c 92       	st	X, r9
     4be:	8e 92       	st	-X, r8
     4c0:	13 96       	adiw	r26, 0x03	; 3
     4c2:	1c 92       	st	X, r1
     4c4:	1e 92       	st	-X, r1
     4c6:	12 97       	sbiw	r26, 0x02	; 2
     4c8:	be 01       	movw	r22, r28
     4ca:	67 5c       	subi	r22, 0xC7	; 199
     4cc:	7e 4f       	sbci	r23, 0xFE	; 254
     4ce:	db 01       	movw	r26, r22
     4d0:	11 96       	adiw	r26, 0x01	; 1
     4d2:	7c 92       	st	X, r7
     4d4:	6e 92       	st	-X, r6
     4d6:	13 96       	adiw	r26, 0x03	; 3
     4d8:	1c 92       	st	X, r1
     4da:	1e 92       	st	-X, r1
     4dc:	12 97       	sbiw	r26, 0x02	; 2
     4de:	ae 01       	movw	r20, r28
     4e0:	43 5c       	subi	r20, 0xC3	; 195
     4e2:	5e 4f       	sbci	r21, 0xFE	; 254
     4e4:	84 5e       	subi	r24, 0xE4	; 228
     4e6:	91 09       	sbc	r25, r1
     4e8:	da 01       	movw	r26, r20
     4ea:	11 96       	adiw	r26, 0x01	; 1
     4ec:	9c 93       	st	X, r25
     4ee:	8e 93       	st	-X, r24
     4f0:	13 96       	adiw	r26, 0x03	; 3
     4f2:	7c 93       	st	X, r23
     4f4:	6e 93       	st	-X, r22
     4f6:	12 97       	sbiw	r26, 0x02	; 2
     4f8:	14 96       	adiw	r26, 0x04	; 4
     4fa:	11 96       	adiw	r26, 0x01	; 1
     4fc:	5c 93       	st	X, r21
     4fe:	4e 93       	st	-X, r20
     500:	13 96       	adiw	r26, 0x03	; 3
     502:	3c 93       	st	X, r19
     504:	2e 93       	st	-X, r18
     506:	12 97       	sbiw	r26, 0x02	; 2
     508:	15 96       	adiw	r26, 0x05	; 5
     50a:	fc 93       	st	X, r31
     50c:	ee 93       	st	-X, r30
     50e:	14 97       	sbiw	r26, 0x04	; 4
     510:	46 5f       	subi	r20, 0xF6	; 246
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	ea e0       	ldi	r30, 0x0A	; 10
     516:	ae 0e       	add	r10, r30
     518:	b1 1c       	adc	r11, r1
     51a:	fa 01       	movw	r30, r20
     51c:	b1 82       	std	Z+1, r11	; 0x01
     51e:	a0 82       	st	Z, r10
     520:	13 82       	std	Z+3, r1	; 0x03
     522:	12 82       	std	Z+2, r1	; 0x02
     524:	5e 01       	movw	r10, r28
     526:	f5 eb       	ldi	r31, 0xB5	; 181
     528:	af 1a       	sub	r10, r31
     52a:	fe ef       	ldi	r31, 0xFE	; 254
     52c:	bf 0a       	sbc	r11, r31
     52e:	22 5b       	subi	r18, 0xB2	; 178
     530:	31 09       	sbc	r19, r1
     532:	f5 01       	movw	r30, r10
     534:	31 83       	std	Z+1, r19	; 0x01
     536:	20 83       	st	Z, r18
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	12 82       	std	Z+2, r1	; 0x02
     53c:	6a 5e       	subi	r22, 0xEA	; 234
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	fb 01       	movw	r30, r22
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
     546:	b3 82       	std	Z+3, r11	; 0x03
     548:	a2 82       	std	Z+2, r10	; 0x02
     54a:	34 96       	adiw	r30, 0x04	; 4
     54c:	71 83       	std	Z+1, r23	; 0x01
     54e:	60 83       	st	Z, r22
     550:	53 83       	std	Z+3, r21	; 0x03
     552:	42 83       	std	Z+2, r20	; 0x02
     554:	b5 83       	std	Z+5, r27	; 0x05
     556:	a4 83       	std	Z+4, r26	; 0x04
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	c4 0e       	add	r12, r20
     55c:	d1 1c       	adc	r13, r1
     55e:	c7 5a       	subi	r28, 0xA7	; 167
     560:	de 4f       	sbci	r29, 0xFE	; 254
     562:	d9 82       	std	Y+1, r13	; 0x01
     564:	c8 82       	st	Y, r12
     566:	c9 55       	subi	r28, 0x59	; 89
     568:	d1 40       	sbci	r29, 0x01	; 1
     56a:	c5 5a       	subi	r28, 0xA5	; 165
     56c:	de 4f       	sbci	r29, 0xFE	; 254
     56e:	19 82       	std	Y+1, r1	; 0x01
     570:	18 82       	st	Y, r1
     572:	cb 55       	subi	r28, 0x5B	; 91
     574:	d1 40       	sbci	r29, 0x01	; 1
     576:	62 5f       	subi	r22, 0xF2	; 242
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	5e 01       	movw	r10, r28
     57c:	5d e6       	ldi	r21, 0x6D	; 109
     57e:	a5 0e       	add	r10, r21
     580:	b1 1c       	adc	r11, r1
     582:	db 01       	movw	r26, r22
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	bc 92       	st	X, r11
     588:	ae 92       	st	-X, r10
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	1c 92       	st	X, r1
     58e:	1e 92       	st	-X, r1
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	ae 01       	movw	r20, r28
     594:	4f 59       	subi	r20, 0x9F	; 159
     596:	5e 4f       	sbci	r21, 0xFE	; 254
     598:	da 01       	movw	r26, r20
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	13 96       	adiw	r26, 0x03	; 3
     5a2:	7c 93       	st	X, r23
     5a4:	6e 93       	st	-X, r22
     5a6:	12 97       	sbiw	r26, 0x02	; 2
     5a8:	82 5e       	subi	r24, 0xE2	; 226
     5aa:	9e 4f       	sbci	r25, 0xFE	; 254
     5ac:	dc 01       	movw	r26, r24
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	5c 93       	st	X, r21
     5b2:	4e 93       	st	-X, r20
     5b4:	49 e5       	ldi	r20, 0x59	; 89
     5b6:	51 e0       	ldi	r21, 0x01	; 1
     5b8:	4c 0f       	add	r20, r28
     5ba:	5d 1f       	adc	r21, r29
     5bc:	13 96       	adiw	r26, 0x03	; 3
     5be:	5c 93       	st	X, r21
     5c0:	4e 93       	st	-X, r20
     5c2:	12 97       	sbiw	r26, 0x02	; 2
     5c4:	15 96       	adiw	r26, 0x05	; 5
     5c6:	fc 93       	st	X, r31
     5c8:	ee 93       	st	-X, r30
     5ca:	14 97       	sbiw	r26, 0x04	; 4
     5cc:	16 96       	adiw	r26, 0x06	; 6
     5ce:	5a e0       	ldi	r21, 0x0A	; 10
     5d0:	45 0e       	add	r4, r21
     5d2:	51 1c       	adc	r5, r1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	5c 92       	st	X, r5
     5d8:	4e 92       	st	-X, r4
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	1c 92       	st	X, r1
     5de:	1e 92       	st	-X, r1
     5e0:	12 97       	sbiw	r26, 0x02	; 2
     5e2:	2e 01       	movw	r4, r28
     5e4:	e1 e9       	ldi	r30, 0x91	; 145
     5e6:	4e 1a       	sub	r4, r30
     5e8:	ee ef       	ldi	r30, 0xFE	; 254
     5ea:	5e 0a       	sbc	r5, r30
     5ec:	f2 01       	movw	r30, r4
     5ee:	31 83       	std	Z+1, r19	; 0x01
     5f0:	20 83       	st	Z, r18
     5f2:	13 82       	std	Z+3, r1	; 0x03
     5f4:	12 82       	std	Z+2, r1	; 0x02
     5f6:	6a 5e       	subi	r22, 0xEA	; 234
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	ae 01       	movw	r20, r28
     5fc:	45 5e       	subi	r20, 0xE5	; 229
     5fe:	5f 4f       	sbci	r21, 0xFF	; 255
     600:	fb 01       	movw	r30, r22
     602:	51 83       	std	Z+1, r21	; 0x01
     604:	40 83       	st	Z, r20
     606:	53 82       	std	Z+3, r5	; 0x03
     608:	42 82       	std	Z+2, r4	; 0x02
     60a:	34 96       	adiw	r30, 0x04	; 4
     60c:	71 83       	std	Z+1, r23	; 0x01
     60e:	60 83       	st	Z, r22
     610:	b3 83       	std	Z+3, r27	; 0x03
     612:	a2 83       	std	Z+2, r26	; 0x02
     614:	95 83       	std	Z+5, r25	; 0x05
     616:	84 83       	std	Z+4, r24	; 0x04
     618:	66 5f       	subi	r22, 0xF6	; 246
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	db 01       	movw	r26, r22
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	dc 92       	st	X, r13
     622:	ce 92       	st	-X, r12
     624:	13 96       	adiw	r26, 0x03	; 3
     626:	1c 92       	st	X, r1
     628:	1e 92       	st	-X, r1
     62a:	12 97       	sbiw	r26, 0x02	; 2
     62c:	4c 96       	adiw	r24, 0x1c	; 28
     62e:	dc 01       	movw	r26, r24
     630:	11 96       	adiw	r26, 0x01	; 1
     632:	3c 93       	st	X, r19
     634:	2e 93       	st	-X, r18
     636:	13 96       	adiw	r26, 0x03	; 3
     638:	1c 92       	st	X, r1
     63a:	1e 92       	st	-X, r1
     63c:	12 97       	sbiw	r26, 0x02	; 2
     63e:	2e 5f       	subi	r18, 0xFE	; 254
     640:	3e 4f       	sbci	r19, 0xFE	; 254
     642:	d9 01       	movw	r26, r18
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	1c 93       	st	X, r17
     648:	0e 93       	st	-X, r16
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	9c 93       	st	X, r25
     64e:	8e 93       	st	-X, r24
     650:	12 97       	sbiw	r26, 0x02	; 2
     652:	08 96       	adiw	r24, 0x08	; 8
     654:	dc 01       	movw	r26, r24
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	3c 93       	st	X, r19
     65a:	2e 93       	st	-X, r18
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	7c 93       	st	X, r23
     660:	6e 93       	st	-X, r22
     662:	12 97       	sbiw	r26, 0x02	; 2
     664:	15 96       	adiw	r26, 0x05	; 5
     666:	fc 93       	st	X, r31
     668:	ee 93       	st	-X, r30
     66a:	14 97       	sbiw	r26, 0x04	; 4
     66c:	6e 5e       	subi	r22, 0xEE	; 238
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	fb 01       	movw	r30, r22
     672:	d1 82       	std	Z+1, r13	; 0x01
     674:	c0 82       	st	Z, r12
     676:	13 82       	std	Z+3, r1	; 0x03
     678:	12 82       	std	Z+2, r1	; 0x02
     67a:	1a 96       	adiw	r26, 0x0a	; 10
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	7c 92       	st	X, r7
     680:	6e 92       	st	-X, r6
     682:	13 96       	adiw	r26, 0x03	; 3
     684:	1c 92       	st	X, r1
     686:	1e 92       	st	-X, r1
     688:	12 97       	sbiw	r26, 0x02	; 2
     68a:	2e 5e       	subi	r18, 0xEE	; 238
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	f9 01       	movw	r30, r18
     690:	51 83       	std	Z+1, r21	; 0x01
     692:	40 83       	st	Z, r20
     694:	b3 83       	std	Z+3, r27	; 0x03
     696:	a2 83       	std	Z+2, r26	; 0x02
     698:	18 96       	adiw	r26, 0x08	; 8
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	3c 93       	st	X, r19
     69e:	2e 93       	st	-X, r18
     6a0:	13 96       	adiw	r26, 0x03	; 3
     6a2:	7c 93       	st	X, r23
     6a4:	6e 93       	st	-X, r22
     6a6:	12 97       	sbiw	r26, 0x02	; 2
     6a8:	15 96       	adiw	r26, 0x05	; 5
     6aa:	9c 93       	st	X, r25
     6ac:	8e 93       	st	-X, r24
     6ae:	14 97       	sbiw	r26, 0x04	; 4
     6b0:	6e 5e       	subi	r22, 0xEE	; 238
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	fb 01       	movw	r30, r22
     6b6:	f1 82       	std	Z+1, r15	; 0x01
     6b8:	e0 82       	st	Z, r14
     6ba:	13 82       	std	Z+3, r1	; 0x03
     6bc:	12 82       	std	Z+2, r1	; 0x02
     6be:	4c 96       	adiw	r24, 0x1c	; 28
     6c0:	fc 01       	movw	r30, r24
     6c2:	b1 82       	std	Z+1, r11	; 0x01
     6c4:	a0 82       	st	Z, r10
     6c6:	13 82       	std	Z+3, r1	; 0x03
     6c8:	12 82       	std	Z+2, r1	; 0x02
     6ca:	2e 5e       	subi	r18, 0xEE	; 238
     6cc:	3f 4f       	sbci	r19, 0xFF	; 255
     6ce:	f9 01       	movw	r30, r18
     6d0:	51 83       	std	Z+1, r21	; 0x01
     6d2:	40 83       	st	Z, r20
     6d4:	93 83       	std	Z+3, r25	; 0x03
     6d6:	82 83       	std	Z+2, r24	; 0x02
     6d8:	08 96       	adiw	r24, 0x08	; 8
     6da:	fc 01       	movw	r30, r24
     6dc:	31 83       	std	Z+1, r19	; 0x01
     6de:	20 83       	st	Z, r18
     6e0:	73 83       	std	Z+3, r23	; 0x03
     6e2:	62 83       	std	Z+2, r22	; 0x02
     6e4:	b5 83       	std	Z+5, r27	; 0x05
     6e6:	a4 83       	std	Z+4, r26	; 0x04
     6e8:	58 96       	adiw	r26, 0x18	; 24
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	9c 92       	st	X, r9
     6ee:	8e 92       	st	-X, r8
     6f0:	13 96       	adiw	r26, 0x03	; 3
     6f2:	1c 92       	st	X, r1
     6f4:	1e 92       	st	-X, r1
     6f6:	12 97       	sbiw	r26, 0x02	; 2
     6f8:	44 56       	subi	r20, 0x64	; 100
     6fa:	5e 4f       	sbci	r21, 0xFE	; 254
     6fc:	fa 01       	movw	r30, r20
     6fe:	b1 82       	std	Z+1, r11	; 0x01
     700:	a0 82       	st	Z, r10
     702:	13 82       	std	Z+3, r1	; 0x03
     704:	12 82       	std	Z+2, r1	; 0x02
     706:	2e 5e       	subi	r18, 0xEE	; 238
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	f9 01       	movw	r30, r18
     70c:	11 83       	std	Z+1, r17	; 0x01
     70e:	00 83       	st	Z, r16
     710:	53 83       	std	Z+3, r21	; 0x03
     712:	42 83       	std	Z+2, r20	; 0x02
     714:	34 96       	adiw	r30, 0x04	; 4
     716:	31 83       	std	Z+1, r19	; 0x01
     718:	20 83       	st	Z, r18
     71a:	b3 83       	std	Z+3, r27	; 0x03
     71c:	a2 83       	std	Z+2, r26	; 0x02
     71e:	95 83       	std	Z+5, r25	; 0x05
     720:	84 83       	std	Z+4, r24	; 0x04
     722:	f0 93 fb 02 	sts	0x02FB, r31
     726:	e0 93 fa 02 	sts	0x02FA, r30
     72a:	01 d3       	rcall	.+1538   	; 0xd2e <fuzzification>
     72c:	27 d3       	rcall	.+1614   	; 0xd7c <rule_evaluation>
     72e:	6c d3       	rcall	.+1752   	; 0xe08 <defuzzification>
     730:	d1 01       	movw	r26, r2
     732:	1a 96       	adiw	r26, 0x0a	; 10
     734:	8d 91       	ld	r24, X+
     736:	9c 91       	ld	r25, X
     738:	1b 97       	sbiw	r26, 0x0b	; 11
     73a:	86 3e       	cpi	r24, 0xE6	; 230
     73c:	b7 e0       	ldi	r27, 0x07	; 7
     73e:	9b 07       	cpc	r25, r27
     740:	2c f4       	brge	.+10     	; 0x74c <doFuzzy+0x600>
     742:	86 ee       	ldi	r24, 0xE6	; 230
     744:	97 e0       	ldi	r25, 0x07	; 7
     746:	0e 94 35 0c 	call	0x186a	; 0x186a <setServo>
     74a:	0b c0       	rjmp	.+22     	; 0x762 <doFuzzy+0x616>
     74c:	85 3e       	cpi	r24, 0xE5	; 229
     74e:	ec e0       	ldi	r30, 0x0C	; 12
     750:	9e 07       	cpc	r25, r30
     752:	2c f0       	brlt	.+10     	; 0x75e <doFuzzy+0x612>
     754:	84 ee       	ldi	r24, 0xE4	; 228
     756:	9c e0       	ldi	r25, 0x0C	; 12
     758:	0e 94 35 0c 	call	0x186a	; 0x186a <setServo>
     75c:	02 c0       	rjmp	.+4      	; 0x762 <doFuzzy+0x616>
     75e:	0e 94 35 0c 	call	0x186a	; 0x186a <setServo>
     762:	cc 53       	subi	r28, 0x3C	; 60
     764:	de 4f       	sbci	r29, 0xFE	; 254
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	9f 90       	pop	r9
     786:	8f 90       	pop	r8
     788:	7f 90       	pop	r7
     78a:	6f 90       	pop	r6
     78c:	5f 90       	pop	r5
     78e:	4f 90       	pop	r4
     790:	3f 90       	pop	r3
     792:	2f 90       	pop	r2
     794:	08 95       	ret

00000796 <FLC_steering>:
     796:	31 e0       	ldi	r19, 0x01	; 1
     798:	61 35       	cpi	r22, 0x51	; 81
     79a:	71 05       	cpc	r23, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <FLC_steering+0xa>
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	91 05       	cpc	r25, r1
     7a6:	09 f0       	breq	.+2      	; 0x7aa <FLC_steering+0x14>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	22 23       	and	r18, r18
     7ac:	39 f0       	breq	.+14     	; 0x7bc <FLC_steering+0x26>
     7ae:	33 23       	and	r19, r19
     7b0:	29 f0       	breq	.+10     	; 0x7bc <FLC_steering+0x26>
     7b2:	84 ee       	ldi	r24, 0xE4	; 228
     7b4:	9c e0       	ldi	r25, 0x0C	; 12
     7b6:	0e 94 35 0c 	call	0x186a	; 0x186a <setServo>
     7ba:	0f c0       	rjmp	.+30     	; 0x7da <FLC_steering+0x44>
     7bc:	21 e0       	ldi	r18, 0x01	; 1
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	91 05       	cpc	r25, r1
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <FLC_steering+0x30>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	22 23       	and	r18, r18
     7c8:	39 f0       	breq	.+14     	; 0x7d8 <FLC_steering+0x42>
     7ca:	33 23       	and	r19, r19
     7cc:	29 f0       	breq	.+10     	; 0x7d8 <FLC_steering+0x42>
     7ce:	86 ee       	ldi	r24, 0xE6	; 230
     7d0:	97 e0       	ldi	r25, 0x07	; 7
     7d2:	0e 94 35 0c 	call	0x186a	; 0x186a <setServo>
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <FLC_steering+0x44>
     7d8:	b9 dc       	rcall	.-1678   	; 0x14c <doFuzzy>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret

000007e0 <FLC_obstacle>:
// FLC OBSTACLE AVOIDER
//////////////////////////////////////////////////////////////////////////////////


void FLC_obstacle(int currentServo, int midSonicRange)
{
     7e0:	2f 92       	push	r2
     7e2:	3f 92       	push	r3
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	c8 54       	subi	r28, 0x48	; 72
     80a:	d1 40       	sbci	r29, 0x01	; 1
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	9b 01       	movw	r18, r22
    // Inputs
    struct io_type distance; strcpy(distance.name, "distance");
     818:	49 e0       	ldi	r20, 0x09	; 9
     81a:	eb e6       	ldi	r30, 0x6B	; 107
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	de 01       	movw	r26, r28
     820:	11 96       	adiw	r26, 0x01	; 1
     822:	01 90       	ld	r0, Z+
     824:	0d 92       	st	X+, r0
     826:	4a 95       	dec	r20
     828:	e1 f7       	brne	.-8      	; 0x822 <FLC_obstacle+0x42>
    struct io_type steering; strcpy(steering.name, "steering");
     82a:	49 e0       	ldi	r20, 0x09	; 9
     82c:	e4 e4       	ldi	r30, 0x44	; 68
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	de 01       	movw	r26, r28
     832:	51 96       	adiw	r26, 0x11	; 17
     834:	01 90       	ld	r0, Z+
     836:	0d 92       	st	X+, r0
     838:	4a 95       	dec	r20
     83a:	e1 f7       	brne	.-8      	; 0x834 <FLC_obstacle+0x54>
    
    // Output
    struct io_type speed; strcpy(speed.name, "speed");
     83c:	46 e0       	ldi	r20, 0x06	; 6
     83e:	e4 e7       	ldi	r30, 0x74	; 116
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	de 01       	movw	r26, r28
     844:	91 96       	adiw	r26, 0x21	; 33
     846:	01 90       	ld	r0, Z+
     848:	0d 92       	st	X+, r0
     84a:	4a 95       	dec	r20
     84c:	e1 f7       	brne	.-8      	; 0x846 <FLC_obstacle+0x66>

    
    // Variable assigned its reference value
    if (currentServo<MAXLEFT) {
     84e:	86 3e       	cpi	r24, 0xE6	; 230
     850:	47 e0       	ldi	r20, 0x07	; 7
     852:	94 07       	cpc	r25, r20
     854:	2c f4       	brge	.+10     	; 0x860 <FLC_obstacle+0x80>
        steering.value = (int) MAXLEFT / 10;
     856:	8a ec       	ldi	r24, 0xCA	; 202
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	9c 8f       	std	Y+28, r25	; 0x1c
     85c:	8b 8f       	std	Y+27, r24	; 0x1b
     85e:	0f c0       	rjmp	.+30     	; 0x87e <FLC_obstacle+0x9e>
    }
    else if (currentServo>MAXRIGHT)
     860:	85 3e       	cpi	r24, 0xE5	; 229
     862:	6c e0       	ldi	r22, 0x0C	; 12
     864:	96 07       	cpc	r25, r22
     866:	2c f0       	brlt	.+10     	; 0x872 <FLC_obstacle+0x92>
    {
        steering.value = (int) MAXRIGHT / 10;
     868:	8a e4       	ldi	r24, 0x4A	; 74
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9c 8f       	std	Y+28, r25	; 0x1c
     86e:	8b 8f       	std	Y+27, r24	; 0x1b
     870:	06 c0       	rjmp	.+12     	; 0x87e <FLC_obstacle+0x9e>
    }
    else
    {
        steering.value = (int) currentServo / 10;
     872:	6a e0       	ldi	r22, 0x0A	; 10
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	0e 94 bf 11 	call	0x237e	; 0x237e <__divmodhi4>
     87a:	7c 8f       	std	Y+28, r23	; 0x1c
     87c:	6b 8f       	std	Y+27, r22	; 0x1b
    }
    
    // Variable assigned its reference value
    if(midSonicRange < MIN_DISTANCE)
     87e:	33 23       	and	r19, r19
     880:	1c f4       	brge	.+6      	; 0x888 <FLC_obstacle+0xa8>
    {
        distance.value = MIN_DISTANCE;
     882:	1c 86       	std	Y+12, r1	; 0x0c
     884:	1b 86       	std	Y+11, r1	; 0x0b
     886:	0a c0       	rjmp	.+20     	; 0x89c <FLC_obstacle+0xbc>
    }
    else if (midSonicRange > MAX_DISTANCE)
     888:	2b 3f       	cpi	r18, 0xFB	; 251
     88a:	31 05       	cpc	r19, r1
     88c:	2c f0       	brlt	.+10     	; 0x898 <FLC_obstacle+0xb8>
    {
        distance.value = MAX_DISTANCE;
     88e:	8a ef       	ldi	r24, 0xFA	; 250
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9c 87       	std	Y+12, r25	; 0x0c
     894:	8b 87       	std	Y+11, r24	; 0x0b
     896:	02 c0       	rjmp	.+4      	; 0x89c <FLC_obstacle+0xbc>
    }
    else
    {
        distance.value = midSonicRange;
     898:	3c 87       	std	Y+12, r19	; 0x0c
     89a:	2b 87       	std	Y+11, r18	; 0x0b
    //////////////////////////////////////////////////////////////////////////////
    
    
    // Set MFs
    struct mf_type right;
    MATLAB_MF(&right, "right", 276, 330, 330, 331);
     89c:	6e 01       	movw	r12, r28
     89e:	81 e3       	ldi	r24, 0x31	; 49
     8a0:	c8 0e       	add	r12, r24
     8a2:	d1 1c       	adc	r13, r1
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fb e4       	ldi	r31, 0x4B	; 75
     8a8:	ef 2e       	mov	r14, r31
     8aa:	ff 24       	eor	r15, r15
     8ac:	f3 94       	inc	r15
     8ae:	f0 2d       	mov	r31, r0
     8b0:	0a e4       	ldi	r16, 0x4A	; 74
     8b2:	11 e0       	ldi	r17, 0x01	; 1
     8b4:	2a e4       	ldi	r18, 0x4A	; 74
     8b6:	31 e0       	ldi	r19, 0x01	; 1
     8b8:	44 e1       	ldi	r20, 0x14	; 20
     8ba:	51 e0       	ldi	r21, 0x01	; 1
     8bc:	6a ec       	ldi	r22, 0xCA	; 202
     8be:	71 e0       	ldi	r23, 0x01	; 1
     8c0:	c6 01       	movw	r24, r12
     8c2:	68 d3       	rcall	.+1744   	; 0xf94 <MATLAB_MF>
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 202, 266, 266, 330);
     8c4:	0f 2e       	mov	r0, r31
     8c6:	fa e4       	ldi	r31, 0x4A	; 74
     8c8:	ef 2e       	mov	r14, r31
     8ca:	ff 24       	eor	r15, r15
     8cc:	f3 94       	inc	r15
     8ce:	f0 2d       	mov	r31, r0
     8d0:	0a e0       	ldi	r16, 0x0A	; 10
     8d2:	11 e0       	ldi	r17, 0x01	; 1
     8d4:	2a e0       	ldi	r18, 0x0A	; 10
     8d6:	31 e0       	ldi	r19, 0x01	; 1
     8d8:	4a ec       	ldi	r20, 0xCA	; 202
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	67 e5       	ldi	r22, 0x57	; 87
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	ce 01       	movw	r24, r28
     8e2:	89 5b       	subi	r24, 0xB9	; 185
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	56 d3       	rcall	.+1708   	; 0xf94 <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 201, 202, 256, 256);
     8e8:	1e 01       	movw	r2, r28
     8ea:	9d e5       	ldi	r25, 0x5D	; 93
     8ec:	29 0e       	add	r2, r25
     8ee:	31 1c       	adc	r3, r1
     8f0:	e1 2c       	mov	r14, r1
     8f2:	ff 24       	eor	r15, r15
     8f4:	f3 94       	inc	r15
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	11 e0       	ldi	r17, 0x01	; 1
     8fa:	2a ec       	ldi	r18, 0xCA	; 202
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	49 ec       	ldi	r20, 0xC9	; 201
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	64 ed       	ldi	r22, 0xD4	; 212
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	c1 01       	movw	r24, r2
     908:	45 d3       	rcall	.+1674   	; 0xf94 <MATLAB_MF>
    
    // Linked list for MFs
    steering.membership_functions = &right;
     90a:	de 8e       	std	Y+30, r13	; 0x1e
     90c:	cd 8e       	std	Y+29, r12	; 0x1d
    right.next = &straight;
     90e:	e7 e4       	ldi	r30, 0x47	; 71
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	ec 0f       	add	r30, r28
     914:	fd 1f       	adc	r31, r29
     916:	27 96       	adiw	r28, 0x07	; 7
     918:	ff af       	std	Y+63, r31	; 0x3f
     91a:	ee af       	std	Y+62, r30	; 0x3e
     91c:	27 97       	sbiw	r28, 0x07	; 7
    straight.next = &left;
     91e:	6d 96       	adiw	r28, 0x1d	; 29
     920:	3f ae       	std	Y+63, r3	; 0x3f
     922:	2e ae       	std	Y+62, r2	; 0x3e
     924:	6d 97       	sbiw	r28, 0x1d	; 29
    left.next = NULL;
     926:	f1 01       	movw	r30, r2
     928:	15 8a       	std	Z+21, r1	; 0x15
     92a:	14 8a       	std	Z+20, r1	; 0x14
    // DECLARATION OF DISTANCE INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    // Set MFs
    struct mf_type stopDist;
    MATLAB_MF(&stopDist, "stopDist", MIN_DISTANCE-1, MIN_DISTANCE, 15, 30);
     92c:	3e 01       	movw	r6, r28
     92e:	f3 e7       	ldi	r31, 0x73	; 115
     930:	6f 0e       	add	r6, r31
     932:	71 1c       	adc	r7, r1
     934:	0f 2e       	mov	r0, r31
     936:	fe e1       	ldi	r31, 0x1E	; 30
     938:	ef 2e       	mov	r14, r31
     93a:	f1 2c       	mov	r15, r1
     93c:	f0 2d       	mov	r31, r0
     93e:	0f e0       	ldi	r16, 0x0F	; 15
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	4f ef       	ldi	r20, 0xFF	; 255
     948:	5f ef       	ldi	r21, 0xFF	; 255
     94a:	6a e7       	ldi	r22, 0x7A	; 122
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	c3 01       	movw	r24, r6
     950:	21 d3       	rcall	.+1602   	; 0xf94 <MATLAB_MF>
    struct mf_type close;
    MATLAB_MF(&close, "close", 5, 35, 35, 70);
     952:	5e 01       	movw	r10, r28
     954:	29 e8       	ldi	r18, 0x89	; 137
     956:	a2 0e       	add	r10, r18
     958:	b1 1c       	adc	r11, r1
     95a:	0f 2e       	mov	r0, r31
     95c:	f6 e4       	ldi	r31, 0x46	; 70
     95e:	ef 2e       	mov	r14, r31
     960:	f1 2c       	mov	r15, r1
     962:	f0 2d       	mov	r31, r0
     964:	03 e2       	ldi	r16, 0x23	; 35
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	23 e2       	ldi	r18, 0x23	; 35
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	45 e0       	ldi	r20, 0x05	; 5
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	63 e8       	ldi	r22, 0x83	; 131
     972:	71 e0       	ldi	r23, 0x01	; 1
     974:	c5 01       	movw	r24, r10
     976:	0e d3       	rcall	.+1564   	; 0xf94 <MATLAB_MF>
    struct mf_type faar;
    MATLAB_MF(&faar, "faar", 50, 125, MAX_DISTANCE, MAX_DISTANCE+1);
     978:	2e 01       	movw	r4, r28
     97a:	4f e9       	ldi	r20, 0x9F	; 159
     97c:	44 0e       	add	r4, r20
     97e:	51 1c       	adc	r5, r1
     980:	0f 2e       	mov	r0, r31
     982:	fb ef       	ldi	r31, 0xFB	; 251
     984:	ef 2e       	mov	r14, r31
     986:	f1 2c       	mov	r15, r1
     988:	f0 2d       	mov	r31, r0
     98a:	0a ef       	ldi	r16, 0xFA	; 250
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	2d e7       	ldi	r18, 0x7D	; 125
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	42 e3       	ldi	r20, 0x32	; 50
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	69 e8       	ldi	r22, 0x89	; 137
     998:	71 e0       	ldi	r23, 0x01	; 1
     99a:	c2 01       	movw	r24, r4
     99c:	fb d2       	rcall	.+1526   	; 0xf94 <MATLAB_MF>
    
    
    // Linked list for MFs
    distance.membership_functions = &stopDist;
     99e:	7e 86       	std	Y+14, r7	; 0x0e
     9a0:	6d 86       	std	Y+13, r6	; 0x0d
    stopDist.next = &close;
     9a2:	f3 01       	movw	r30, r6
     9a4:	b5 8a       	std	Z+21, r11	; 0x15
     9a6:	a4 8a       	std	Z+20, r10	; 0x14
    close.next = &faar;
     9a8:	f5 01       	movw	r30, r10
     9aa:	55 8a       	std	Z+21, r5	; 0x15
     9ac:	44 8a       	std	Z+20, r4	; 0x14
    faar.next = NULL;
     9ae:	f2 01       	movw	r30, r4
     9b0:	15 8a       	std	Z+21, r1	; 0x15
     9b2:	14 8a       	std	Z+20, r1	; 0x14
    //////////////////////////////////////////////////////////////////////////////
    
    
    // Set MFs
    struct mf_type neutral;
    MATLAB_MF(&neutral, "neutral", 2764, 2765, 2765, 2826);
     9b4:	4e 01       	movw	r8, r28
     9b6:	f5 eb       	ldi	r31, 0xB5	; 181
     9b8:	8f 0e       	add	r8, r31
     9ba:	91 1c       	adc	r9, r1
     9bc:	0f 2e       	mov	r0, r31
     9be:	fa e0       	ldi	r31, 0x0A	; 10
     9c0:	ef 2e       	mov	r14, r31
     9c2:	fb e0       	ldi	r31, 0x0B	; 11
     9c4:	ff 2e       	mov	r15, r31
     9c6:	f0 2d       	mov	r31, r0
     9c8:	0d ec       	ldi	r16, 0xCD	; 205
     9ca:	1a e0       	ldi	r17, 0x0A	; 10
     9cc:	2d ec       	ldi	r18, 0xCD	; 205
     9ce:	3a e0       	ldi	r19, 0x0A	; 10
     9d0:	4c ec       	ldi	r20, 0xCC	; 204
     9d2:	5a e0       	ldi	r21, 0x0A	; 10
     9d4:	6e e8       	ldi	r22, 0x8E	; 142
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	c4 01       	movw	r24, r8
     9da:	dc d2       	rcall	.+1464   	; 0xf94 <MATLAB_MF>
    struct mf_type low;
    MATLAB_MF(&low, "low", 2830, 2840, 2840, 28450);
     9dc:	6e 01       	movw	r12, r28
     9de:	2b ec       	ldi	r18, 0xCB	; 203
     9e0:	c2 0e       	add	r12, r18
     9e2:	d1 1c       	adc	r13, r1
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f2 e2       	ldi	r31, 0x22	; 34
     9e8:	ef 2e       	mov	r14, r31
     9ea:	ff e6       	ldi	r31, 0x6F	; 111
     9ec:	ff 2e       	mov	r15, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	08 e1       	ldi	r16, 0x18	; 24
     9f2:	1b e0       	ldi	r17, 0x0B	; 11
     9f4:	28 e1       	ldi	r18, 0x18	; 24
     9f6:	3b e0       	ldi	r19, 0x0B	; 11
     9f8:	4e e0       	ldi	r20, 0x0E	; 14
     9fa:	5b e0       	ldi	r21, 0x0B	; 11
     9fc:	66 e9       	ldi	r22, 0x96	; 150
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	c6 01       	movw	r24, r12
     a02:	c8 d2       	rcall	.+1424   	; 0xf94 <MATLAB_MF>
    struct mf_type high;
    MATLAB_MF(&high, "high", MAXESC-20, MAXESC, MAXESC, MAXESC+20);
     a04:	0f 2e       	mov	r0, r31
     a06:	f6 e3       	ldi	r31, 0x36	; 54
     a08:	ef 2e       	mov	r14, r31
     a0a:	fb e0       	ldi	r31, 0x0B	; 11
     a0c:	ff 2e       	mov	r15, r31
     a0e:	f0 2d       	mov	r31, r0
     a10:	02 e2       	ldi	r16, 0x22	; 34
     a12:	1b e0       	ldi	r17, 0x0B	; 11
     a14:	22 e2       	ldi	r18, 0x22	; 34
     a16:	3b e0       	ldi	r19, 0x0B	; 11
     a18:	4e e0       	ldi	r20, 0x0E	; 14
     a1a:	5b e0       	ldi	r21, 0x0B	; 11
     a1c:	6a e9       	ldi	r22, 0x9A	; 154
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	ce 01       	movw	r24, r28
     a22:	8f 51       	subi	r24, 0x1F	; 31
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	b6 d2       	rcall	.+1388   	; 0xf94 <MATLAB_MF>
    
    // Linked list for MFs
    speed.membership_functions = &neutral;
     a28:	9e a6       	std	Y+46, r9	; 0x2e
     a2a:	8d a6       	std	Y+45, r8	; 0x2d
    neutral.next = &low;
     a2c:	f4 01       	movw	r30, r8
     a2e:	d5 8a       	std	Z+21, r13	; 0x15
     a30:	c4 8a       	std	Z+20, r12	; 0x14
    low.next = &high;
     a32:	81 ee       	ldi	r24, 0xE1	; 225
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	8c 0f       	add	r24, r28
     a38:	9d 1f       	adc	r25, r29
     a3a:	f6 01       	movw	r30, r12
     a3c:	95 8b       	std	Z+21, r25	; 0x15
     a3e:	84 8b       	std	Z+20, r24	; 0x14
    high.next = NULL;
     a40:	cb 50       	subi	r28, 0x0B	; 11
     a42:	df 4f       	sbci	r29, 0xFF	; 255
     a44:	19 82       	std	Y+1, r1	; 0x01
     a46:	18 82       	st	Y, r1
     a48:	c5 5f       	subi	r28, 0xF5	; 245
     a4a:	d0 40       	sbci	r29, 0x00	; 0
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &distance;
     a4c:	80 5e       	subi	r24, 0xE0	; 224
     a4e:	91 09       	sbc	r25, r1
     a50:	90 93 f9 02 	sts	0x02F9, r25
     a54:	80 93 f8 02 	sts	0x02F8, r24
    distance.next = &steering;
     a58:	40 96       	adiw	r24, 0x10	; 16
     a5a:	98 8b       	std	Y+16, r25	; 0x10
     a5c:	8f 87       	std	Y+15, r24	; 0x0f
    steering.next = NULL;
     a5e:	18 a2       	std	Y+32, r1	; 0x20
     a60:	1f 8e       	std	Y+31, r1	; 0x1f
    
    System_Outputs = &speed;
     a62:	40 96       	adiw	r24, 0x10	; 16
     a64:	90 93 f7 02 	sts	0x02F7, r25
     a68:	80 93 f6 02 	sts	0x02F6, r24
    speed.next = NULL;
     a6c:	18 aa       	std	Y+48, r1	; 0x30
     a6e:	1f a6       	std	Y+47, r1	; 0x2f
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
     a70:	ae 01       	movw	r20, r28
     a72:	49 50       	subi	r20, 0x09	; 9
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	50 93 fb 02 	sts	0x02FB, r21
     a7a:	40 93 fa 02 	sts	0x02FA, r20
    struct rule_type rule2; rule1.next = &rule2;
     a7e:	9e 01       	movw	r18, r28
     a80:	23 50       	subi	r18, 0x03	; 3
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	fa 01       	movw	r30, r20
     a86:	35 83       	std	Z+5, r19	; 0x05
     a88:	24 83       	std	Z+4, r18	; 0x04
    struct rule_type rule3; rule2.next = &rule3;
     a8a:	8e 51       	subi	r24, 0x1E	; 30
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	f9 01       	movw	r30, r18
     a90:	95 83       	std	Z+5, r25	; 0x05
     a92:	84 83       	std	Z+4, r24	; 0x04
    struct rule_type rule4; rule3.next = &rule4;
     a94:	de 01       	movw	r26, r28
     a96:	a7 5f       	subi	r26, 0xF7	; 247
     a98:	be 4f       	sbci	r27, 0xFE	; 254
     a9a:	fc 01       	movw	r30, r24
     a9c:	b5 83       	std	Z+5, r27	; 0x05
     a9e:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule5; rule4.next = &rule5; rule5.next = NULL;
     aa0:	7e 01       	movw	r14, r28
     aa2:	f1 ef       	ldi	r31, 0xF1	; 241
     aa4:	ef 1a       	sub	r14, r31
     aa6:	fe ef       	ldi	r31, 0xFE	; 254
     aa8:	ff 0a       	sbc	r15, r31
     aaa:	15 96       	adiw	r26, 0x05	; 5
     aac:	fc 92       	st	X, r15
     aae:	ee 92       	st	-X, r14
     ab0:	14 97       	sbiw	r26, 0x04	; 4
     ab2:	f7 01       	movw	r30, r14
     ab4:	15 82       	std	Z+5, r1	; 0x05
     ab6:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if distance is stopDist then speed is neutral
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
     ab8:	be 01       	movw	r22, r28
     aba:	6b 5e       	subi	r22, 0xEB	; 235
     abc:	7e 4f       	sbci	r23, 0xFE	; 254
     abe:	fa 01       	movw	r30, r20
     ac0:	71 83       	std	Z+1, r23	; 0x01
     ac2:	60 83       	st	Z, r22
     ac4:	fb 01       	movw	r30, r22
     ac6:	13 82       	std	Z+3, r1	; 0x03
     ac8:	12 82       	std	Z+2, r1	; 0x02
     aca:	8e 01       	movw	r16, r28
     acc:	07 5e       	subi	r16, 0xE7	; 231
     ace:	1e 4f       	sbci	r17, 0xFE	; 254
     ad0:	fa 01       	movw	r30, r20
     ad2:	13 83       	std	Z+3, r17	; 0x03
     ad4:	02 83       	std	Z+2, r16	; 0x02
     ad6:	f8 01       	movw	r30, r16
     ad8:	13 82       	std	Z+3, r1	; 0x03
     ada:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &stopDist.value; then1.value = &neutral.value;
     adc:	fa e0       	ldi	r31, 0x0A	; 10
     ade:	6f 0e       	add	r6, r31
     ae0:	71 1c       	adc	r7, r1
     ae2:	fb 01       	movw	r30, r22
     ae4:	71 82       	std	Z+1, r7	; 0x01
     ae6:	60 82       	st	Z, r6
     ae8:	fa e0       	ldi	r31, 0x0A	; 10
     aea:	8f 0e       	add	r8, r31
     aec:	91 1c       	adc	r9, r1
     aee:	f8 01       	movw	r30, r16
     af0:	91 82       	std	Z+1, r9	; 0x01
     af2:	80 82       	st	Z, r8
    
    // if dist is close then speed is slow
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
     af4:	4a 5d       	subi	r20, 0xDA	; 218
     af6:	5f 4f       	sbci	r21, 0xFF	; 255
     af8:	f9 01       	movw	r30, r18
     afa:	51 83       	std	Z+1, r21	; 0x01
     afc:	40 83       	st	Z, r20
     afe:	fa 01       	movw	r30, r20
     b00:	13 82       	std	Z+3, r1	; 0x03
     b02:	12 82       	std	Z+2, r1	; 0x02
     b04:	64 5f       	subi	r22, 0xF4	; 244
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	f9 01       	movw	r30, r18
     b0a:	73 83       	std	Z+3, r23	; 0x03
     b0c:	62 83       	std	Z+2, r22	; 0x02
     b0e:	fb 01       	movw	r30, r22
     b10:	13 82       	std	Z+3, r1	; 0x03
     b12:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &close.value; then2.value = &low.value;
     b14:	fa e0       	ldi	r31, 0x0A	; 10
     b16:	af 0e       	add	r10, r31
     b18:	b1 1c       	adc	r11, r1
     b1a:	fa 01       	movw	r30, r20
     b1c:	b1 82       	std	Z+1, r11	; 0x01
     b1e:	a0 82       	st	Z, r10
     b20:	fa e0       	ldi	r31, 0x0A	; 10
     b22:	cf 0e       	add	r12, r31
     b24:	d1 1c       	adc	r13, r1
     b26:	fb 01       	movw	r30, r22
     b28:	d1 82       	std	Z+1, r13	; 0x01
     b2a:	c0 82       	st	Z, r12
    
    // if dist is faar and steering is right then speed is slow
    struct rule_element_type if31, if32, then3;
    rule3.if_side = &if31; if31.next = &if32; if32.next = NULL; rule3.then_side = &then3; then3.next = NULL;
     b2c:	48 5f       	subi	r20, 0xF8	; 248
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	fc 01       	movw	r30, r24
     b32:	51 83       	std	Z+1, r21	; 0x01
     b34:	40 83       	st	Z, r20
     b36:	24 5d       	subi	r18, 0xD4	; 212
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	fa 01       	movw	r30, r20
     b3c:	33 83       	std	Z+3, r19	; 0x03
     b3e:	22 83       	std	Z+2, r18	; 0x02
     b40:	f9 01       	movw	r30, r18
     b42:	13 82       	std	Z+3, r1	; 0x03
     b44:	12 82       	std	Z+2, r1	; 0x02
     b46:	64 5f       	subi	r22, 0xF4	; 244
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	fc 01       	movw	r30, r24
     b4c:	73 83       	std	Z+3, r23	; 0x03
     b4e:	62 83       	std	Z+2, r22	; 0x02
     b50:	fb 01       	movw	r30, r22
     b52:	13 82       	std	Z+3, r1	; 0x03
     b54:	12 82       	std	Z+2, r1	; 0x02
    if31.value = &faar.value; if32.value = &right.value; then3.value = &low.value;
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	4f 0e       	add	r4, r31
     b5a:	51 1c       	adc	r5, r1
     b5c:	fa 01       	movw	r30, r20
     b5e:	51 82       	std	Z+1, r5	; 0x01
     b60:	40 82       	st	Z, r4
     b62:	88 5c       	subi	r24, 0xC8	; 200
     b64:	91 09       	sbc	r25, r1
     b66:	f9 01       	movw	r30, r18
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	fb 01       	movw	r30, r22
     b6e:	d1 82       	std	Z+1, r13	; 0x01
     b70:	c0 82       	st	Z, r12
    
    // if dist is faar and steering is left then speed is slow
    struct rule_element_type if41, if42, then4;
    rule4.if_side = &if41; if41.next = &if42; if42.next = NULL; rule4.then_side = &then4; then4.next = NULL;
     b72:	44 5f       	subi	r20, 0xF4	; 244
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	11 96       	adiw	r26, 0x01	; 1
     b78:	5c 93       	st	X, r21
     b7a:	4e 93       	st	-X, r20
     b7c:	24 5f       	subi	r18, 0xF4	; 244
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	fa 01       	movw	r30, r20
     b82:	33 83       	std	Z+3, r19	; 0x03
     b84:	22 83       	std	Z+2, r18	; 0x02
     b86:	f9 01       	movw	r30, r18
     b88:	13 82       	std	Z+3, r1	; 0x03
     b8a:	12 82       	std	Z+2, r1	; 0x02
     b8c:	82 50       	subi	r24, 0x02	; 2
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	13 96       	adiw	r26, 0x03	; 3
     b92:	9c 93       	st	X, r25
     b94:	8e 93       	st	-X, r24
     b96:	12 97       	sbiw	r26, 0x02	; 2
     b98:	fc 01       	movw	r30, r24
     b9a:	13 82       	std	Z+3, r1	; 0x03
     b9c:	12 82       	std	Z+2, r1	; 0x02
    if41.value = &faar.value; if42.value = &left.value; then4.value = &low.value;
     b9e:	fa 01       	movw	r30, r20
     ba0:	51 82       	std	Z+1, r5	; 0x01
     ba2:	40 82       	st	Z, r4
     ba4:	fa e0       	ldi	r31, 0x0A	; 10
     ba6:	2f 0e       	add	r2, r31
     ba8:	31 1c       	adc	r3, r1
     baa:	f9 01       	movw	r30, r18
     bac:	31 82       	std	Z+1, r3	; 0x01
     bae:	20 82       	st	Z, r2
     bb0:	fc 01       	movw	r30, r24
     bb2:	d1 82       	std	Z+1, r13	; 0x01
     bb4:	c0 82       	st	Z, r12
    
    // if dist is faar and steering is straight then speed is high
    struct rule_element_type if51, if52, then5;
    rule5.if_side = &if51; if51.next = &if52; if52.next = NULL; rule5.then_side = &then5; then5.next = NULL;
     bb6:	28 5f       	subi	r18, 0xF8	; 248
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	f7 01       	movw	r30, r14
     bbc:	31 83       	std	Z+1, r19	; 0x01
     bbe:	20 83       	st	Z, r18
     bc0:	08 96       	adiw	r24, 0x08	; 8
     bc2:	f9 01       	movw	r30, r18
     bc4:	93 83       	std	Z+3, r25	; 0x03
     bc6:	82 83       	std	Z+2, r24	; 0x02
     bc8:	fc 01       	movw	r30, r24
     bca:	13 82       	std	Z+3, r1	; 0x03
     bcc:	12 82       	std	Z+2, r1	; 0x02
     bce:	dc 96       	adiw	r26, 0x3c	; 60
     bd0:	f7 01       	movw	r30, r14
     bd2:	b3 83       	std	Z+3, r27	; 0x03
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	1c 92       	st	X, r1
     bda:	1e 92       	st	-X, r1
     bdc:	12 97       	sbiw	r26, 0x02	; 2
    if51.value = &faar.value; if52.value = &straight.value; then5.value = &high.value;
     bde:	f9 01       	movw	r30, r18
     be0:	51 82       	std	Z+1, r5	; 0x01
     be2:	40 82       	st	Z, r4
     be4:	27 e4       	ldi	r18, 0x47	; 71
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	2c 0f       	add	r18, r28
     bea:	3d 1f       	adc	r19, r29
     bec:	26 5f       	subi	r18, 0xF6	; 246
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	fc 01       	movw	r30, r24
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
     bf6:	81 ee       	ldi	r24, 0xE1	; 225
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	8c 0f       	add	r24, r28
     bfc:	9d 1f       	adc	r25, r29
     bfe:	0a 96       	adiw	r24, 0x0a	; 10
     c00:	8d 93       	st	X+, r24
     c02:	9c 93       	st	X, r25
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
     c04:	94 d0       	rcall	.+296    	; 0xd2e <fuzzification>
    rule_evaluation();
     c06:	ba d0       	rcall	.+372    	; 0xd7c <rule_evaluation>
    defuzzification();
     c08:	ff d0       	rcall	.+510    	; 0xe08 <defuzzification>
    
    if (speed.value > MAXESC)
     c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c0c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	fb e0       	ldi	r31, 0x0B	; 11
     c12:	9f 07       	cpc	r25, r31
     c14:	24 f0       	brlt	.+8      	; 0xc1e <FLC_obstacle+0x43e>
    {
        setESC(MAXESC);
     c16:	82 e2       	ldi	r24, 0x22	; 34
     c18:	9b e0       	ldi	r25, 0x0B	; 11
     c1a:	d2 d5       	rcall	.+2980   	; 0x17c0 <setESC>
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <FLC_obstacle+0x450>
    }
    else if (speed.value < NEUTRAL)
     c1e:	8d 3c       	cpi	r24, 0xCD	; 205
     c20:	2a e0       	ldi	r18, 0x0A	; 10
     c22:	92 07       	cpc	r25, r18
     c24:	24 f4       	brge	.+8      	; 0xc2e <FLC_obstacle+0x44e>
    {
        setESC(NEUTRAL);
     c26:	8d ec       	ldi	r24, 0xCD	; 205
     c28:	9a e0       	ldi	r25, 0x0A	; 10
     c2a:	ca d5       	rcall	.+2964   	; 0x17c0 <setESC>
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <FLC_obstacle+0x450>
    }
    else
    {
        setESC(speed.value);
     c2e:	c8 d5       	rcall	.+2960   	; 0x17c0 <setESC>
    }
    
	
}
     c30:	c8 5b       	subi	r28, 0xB8	; 184
     c32:	de 4f       	sbci	r29, 0xFE	; 254
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	3f 90       	pop	r3
     c60:	2f 90       	pop	r2
     c62:	08 95       	ret

00000c64 <compute_degree_of_membership>:
     c64:	fc 01       	movw	r30, r24
     c66:	84 85       	ldd	r24, Z+12	; 0x0c
     c68:	95 85       	ldd	r25, Z+13	; 0x0d
     c6a:	9b 01       	movw	r18, r22
     c6c:	28 1b       	sub	r18, r24
     c6e:	39 0b       	sbc	r19, r25
     c70:	86 85       	ldd	r24, Z+14	; 0x0e
     c72:	97 85       	ldd	r25, Z+15	; 0x0f
     c74:	86 1b       	sub	r24, r22
     c76:	97 0b       	sbc	r25, r23
     c78:	12 16       	cp	r1, r18
     c7a:	13 06       	cpc	r1, r19
     c7c:	f4 f4       	brge	.+60     	; 0xcba <compute_degree_of_membership+0x56>
     c7e:	18 16       	cp	r1, r24
     c80:	19 06       	cpc	r1, r25
     c82:	f4 f4       	brge	.+60     	; 0xcc0 <compute_degree_of_membership+0x5c>
     c84:	60 89       	ldd	r22, Z+16	; 0x10
     c86:	71 89       	ldd	r23, Z+17	; 0x11
     c88:	a2 89       	ldd	r26, Z+18	; 0x12
     c8a:	b3 89       	ldd	r27, Z+19	; 0x13
     c8c:	8a 9f       	mul	r24, r26
     c8e:	a0 01       	movw	r20, r0
     c90:	8b 9f       	mul	r24, r27
     c92:	50 0d       	add	r21, r0
     c94:	9a 9f       	mul	r25, r26
     c96:	50 0d       	add	r21, r0
     c98:	11 24       	eor	r1, r1
     c9a:	26 9f       	mul	r18, r22
     c9c:	c0 01       	movw	r24, r0
     c9e:	27 9f       	mul	r18, r23
     ca0:	90 0d       	add	r25, r0
     ca2:	36 9f       	mul	r19, r22
     ca4:	90 0d       	add	r25, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	48 17       	cp	r20, r24
     caa:	59 07       	cpc	r21, r25
     cac:	0c f4       	brge	.+2      	; 0xcb0 <compute_degree_of_membership+0x4c>
     cae:	ca 01       	movw	r24, r20
     cb0:	8f 3f       	cpi	r24, 0xFF	; 255
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <compute_degree_of_membership+0x54>
     cb6:	3c f4       	brge	.+14     	; 0xcc6 <compute_degree_of_membership+0x62>
     cb8:	08 c0       	rjmp	.+16     	; 0xcca <compute_degree_of_membership+0x66>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <compute_degree_of_membership+0x66>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <compute_degree_of_membership+0x66>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	93 87       	std	Z+11, r25	; 0x0b
     ccc:	82 87       	std	Z+10, r24	; 0x0a
     cce:	08 95       	ret

00000cd0 <compute_area_of_trapezoid>:
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	fc 01       	movw	r30, r24
     cda:	c6 85       	ldd	r28, Z+14	; 0x0e
     cdc:	d7 85       	ldd	r29, Z+15	; 0x0f
     cde:	84 85       	ldd	r24, Z+12	; 0x0c
     ce0:	95 85       	ldd	r25, Z+13	; 0x0d
     ce2:	c8 1b       	sub	r28, r24
     ce4:	d9 0b       	sbc	r29, r25
     ce6:	22 85       	ldd	r18, Z+10	; 0x0a
     ce8:	33 85       	ldd	r19, Z+11	; 0x0b
     cea:	60 89       	ldd	r22, Z+16	; 0x10
     cec:	71 89       	ldd	r23, Z+17	; 0x11
     cee:	c9 01       	movw	r24, r18
     cf0:	0e 94 bf 11 	call	0x237e	; 0x237e <__divmodhi4>
     cf4:	8e 01       	movw	r16, r28
     cf6:	06 1b       	sub	r16, r22
     cf8:	17 0b       	sbc	r17, r23
     cfa:	62 89       	ldd	r22, Z+18	; 0x12
     cfc:	73 89       	ldd	r23, Z+19	; 0x13
     cfe:	c9 01       	movw	r24, r18
     d00:	0e 94 bf 11 	call	0x237e	; 0x237e <__divmodhi4>
     d04:	06 1b       	sub	r16, r22
     d06:	17 0b       	sbc	r17, r23
     d08:	c0 0f       	add	r28, r16
     d0a:	d1 1f       	adc	r29, r17
     d0c:	2c 9f       	mul	r18, r28
     d0e:	c0 01       	movw	r24, r0
     d10:	2d 9f       	mul	r18, r29
     d12:	90 0d       	add	r25, r0
     d14:	3c 9f       	mul	r19, r28
     d16:	90 0d       	add	r25, r0
     d18:	11 24       	eor	r1, r1
     d1a:	99 23       	and	r25, r25
     d1c:	0c f4       	brge	.+2      	; 0xd20 <compute_area_of_trapezoid+0x50>
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	95 95       	asr	r25
     d22:	87 95       	ror	r24
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <fuzzification>:
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	00 91 f8 02 	lds	r16, 0x02F8
     d3a:	10 91 f9 02 	lds	r17, 0x02F9
     d3e:	01 15       	cp	r16, r1
     d40:	11 05       	cpc	r17, r1
     d42:	b9 f0       	breq	.+46     	; 0xd72 <fuzzification+0x44>
     d44:	f8 01       	movw	r30, r16
     d46:	c4 85       	ldd	r28, Z+12	; 0x0c
     d48:	d5 85       	ldd	r29, Z+13	; 0x0d
     d4a:	20 97       	sbiw	r28, 0x00	; 0
     d4c:	61 f0       	breq	.+24     	; 0xd66 <fuzzification+0x38>
     d4e:	20 97       	sbiw	r28, 0x00	; 0
     d50:	29 f0       	breq	.+10     	; 0xd5c <fuzzification+0x2e>
     d52:	f8 01       	movw	r30, r16
     d54:	62 85       	ldd	r22, Z+10	; 0x0a
     d56:	73 85       	ldd	r23, Z+11	; 0x0b
     d58:	ce 01       	movw	r24, r28
     d5a:	84 df       	rcall	.-248    	; 0xc64 <compute_degree_of_membership>
     d5c:	0c 88       	ldd	r0, Y+20	; 0x14
     d5e:	dd 89       	ldd	r29, Y+21	; 0x15
     d60:	c0 2d       	mov	r28, r0
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	a1 f7       	brne	.-24     	; 0xd4e <fuzzification+0x20>
     d66:	f8 01       	movw	r30, r16
     d68:	06 85       	ldd	r16, Z+14	; 0x0e
     d6a:	17 85       	ldd	r17, Z+15	; 0x0f
     d6c:	01 15       	cp	r16, r1
     d6e:	11 05       	cpc	r17, r1
     d70:	49 f7       	brne	.-46     	; 0xd44 <fuzzification+0x16>
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <rule_evaluation>:
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	c0 91 fa 02 	lds	r28, 0x02FA
     d88:	d0 91 fb 02 	lds	r29, 0x02FB
     d8c:	20 97       	sbiw	r28, 0x00	; 0
     d8e:	b9 f1       	breq	.+110    	; 0xdfe <rule_evaluation+0x82>
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	11 e0       	ldi	r17, 0x01	; 1
     d94:	e8 81       	ld	r30, Y
     d96:	f9 81       	ldd	r31, Y+1	; 0x01
     d98:	30 97       	sbiw	r30, 0x00	; 0
     d9a:	81 f0       	breq	.+32     	; 0xdbc <rule_evaluation+0x40>
     d9c:	20 2f       	mov	r18, r16
     d9e:	31 2f       	mov	r19, r17
     da0:	a0 81       	ld	r26, Z
     da2:	b1 81       	ldd	r27, Z+1	; 0x01
     da4:	8d 91       	ld	r24, X+
     da6:	9c 91       	ld	r25, X
     da8:	82 17       	cp	r24, r18
     daa:	93 07       	cpc	r25, r19
     dac:	0c f4       	brge	.+2      	; 0xdb0 <rule_evaluation+0x34>
     dae:	9c 01       	movw	r18, r24
     db0:	02 80       	ldd	r0, Z+2	; 0x02
     db2:	f3 81       	ldd	r31, Z+3	; 0x03
     db4:	e0 2d       	mov	r30, r0
     db6:	30 97       	sbiw	r30, 0x00	; 0
     db8:	99 f7       	brne	.-26     	; 0xda0 <rule_evaluation+0x24>
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <rule_evaluation+0x44>
     dbc:	20 2f       	mov	r18, r16
     dbe:	31 2f       	mov	r19, r17
     dc0:	ea 81       	ldd	r30, Y+2	; 0x02
     dc2:	fb 81       	ldd	r31, Y+3	; 0x03
     dc4:	30 97       	sbiw	r30, 0x00	; 0
     dc6:	b1 f0       	breq	.+44     	; 0xdf4 <rule_evaluation+0x78>
     dc8:	72 2f       	mov	r23, r18
     dca:	63 2f       	mov	r22, r19
     dcc:	a0 81       	ld	r26, Z
     dce:	b1 81       	ldd	r27, Z+1	; 0x01
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	57 2f       	mov	r21, r23
     dd8:	46 2f       	mov	r20, r22
     dda:	28 17       	cp	r18, r24
     ddc:	39 07       	cpc	r19, r25
     dde:	14 f4       	brge	.+4      	; 0xde4 <rule_evaluation+0x68>
     de0:	58 2f       	mov	r21, r24
     de2:	49 2f       	mov	r20, r25
     de4:	5c 93       	st	X, r21
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	4c 93       	st	X, r20
     dea:	02 80       	ldd	r0, Z+2	; 0x02
     dec:	f3 81       	ldd	r31, Z+3	; 0x03
     dee:	e0 2d       	mov	r30, r0
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	61 f7       	brne	.-40     	; 0xdcc <rule_evaluation+0x50>
     df4:	0c 80       	ldd	r0, Y+4	; 0x04
     df6:	dd 81       	ldd	r29, Y+5	; 0x05
     df8:	c0 2d       	mov	r28, r0
     dfa:	20 97       	sbiw	r28, 0x00	; 0
     dfc:	59 f6       	brne	.-106    	; 0xd94 <rule_evaluation+0x18>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <defuzzification>:
     e08:	2f 92       	push	r2
     e0a:	3f 92       	push	r3
     e0c:	4f 92       	push	r4
     e0e:	5f 92       	push	r5
     e10:	6f 92       	push	r6
     e12:	7f 92       	push	r7
     e14:	8f 92       	push	r8
     e16:	9f 92       	push	r9
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <defuzzification+0x26>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <defuzzification+0x28>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <defuzzification+0x2a>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	80 91 f6 02 	lds	r24, 0x02F6
     e3a:	90 91 f7 02 	lds	r25, 0x02F7
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	89 2b       	or	r24, r25
     e44:	09 f4       	brne	.+2      	; 0xe48 <defuzzification+0x40>
     e46:	8d c0       	rjmp	.+282    	; 0xf62 <defuzzification+0x15a>
     e48:	eb 81       	ldd	r30, Y+3	; 0x03
     e4a:	fc 81       	ldd	r31, Y+4	; 0x04
     e4c:	04 84       	ldd	r0, Z+12	; 0x0c
     e4e:	f5 85       	ldd	r31, Z+13	; 0x0d
     e50:	e0 2d       	mov	r30, r0
     e52:	fe 83       	std	Y+6, r31	; 0x06
     e54:	ed 83       	std	Y+5, r30	; 0x05
     e56:	ef 2b       	or	r30, r31
     e58:	09 f4       	brne	.+2      	; 0xe5c <defuzzification+0x54>
     e5a:	6e c0       	rjmp	.+220    	; 0xf38 <defuzzification+0x130>
     e5c:	51 2c       	mov	r5, r1
     e5e:	61 2c       	mov	r6, r1
     e60:	71 2c       	mov	r7, r1
     e62:	41 2c       	mov	r4, r1
     e64:	31 2c       	mov	r3, r1
     e66:	21 2c       	mov	r2, r1
     e68:	19 82       	std	Y+1, r1	; 0x01
     e6a:	1a 82       	std	Y+2, r1	; 0x02
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	2f df       	rcall	.-418    	; 0xcd0 <compute_area_of_trapezoid>
     e72:	bc 01       	movw	r22, r24
     e74:	88 27       	eor	r24, r24
     e76:	77 fd       	sbrc	r23, 7
     e78:	80 95       	com	r24
     e7a:	98 2f       	mov	r25, r24
     e7c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__floatsisf>
     e80:	6b 01       	movw	r12, r22
     e82:	7c 01       	movw	r14, r24
     e84:	ed 81       	ldd	r30, Y+5	; 0x05
     e86:	fe 81       	ldd	r31, Y+6	; 0x06
     e88:	04 85       	ldd	r16, Z+12	; 0x0c
     e8a:	15 85       	ldd	r17, Z+13	; 0x0d
     e8c:	b8 01       	movw	r22, r16
     e8e:	88 27       	eor	r24, r24
     e90:	77 fd       	sbrc	r23, 7
     e92:	80 95       	com	r24
     e94:	98 2f       	mov	r25, r24
     e96:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__floatsisf>
     e9a:	4b 01       	movw	r8, r22
     e9c:	5c 01       	movw	r10, r24
     e9e:	ed 81       	ldd	r30, Y+5	; 0x05
     ea0:	fe 81       	ldd	r31, Y+6	; 0x06
     ea2:	86 85       	ldd	r24, Z+14	; 0x0e
     ea4:	97 85       	ldd	r25, Z+15	; 0x0f
     ea6:	80 1b       	sub	r24, r16
     ea8:	91 0b       	sbc	r25, r17
     eaa:	bc 01       	movw	r22, r24
     eac:	12 f4       	brpl	.+4      	; 0xeb2 <defuzzification+0xaa>
     eae:	6f 5f       	subi	r22, 0xFF	; 255
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	75 95       	asr	r23
     eb4:	67 95       	ror	r22
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__floatsisf>
     ec2:	a5 01       	movw	r20, r10
     ec4:	94 01       	movw	r18, r8
     ec6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__addsf3>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	63 2d       	mov	r22, r3
     edc:	72 2d       	mov	r23, r2
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__addsf3>
     ee6:	36 2e       	mov	r3, r22
     ee8:	27 2e       	mov	r2, r23
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	a7 01       	movw	r20, r14
     ef0:	96 01       	movw	r18, r12
     ef2:	65 2d       	mov	r22, r5
     ef4:	76 2d       	mov	r23, r6
     ef6:	87 2d       	mov	r24, r7
     ef8:	94 2d       	mov	r25, r4
     efa:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__addsf3>
     efe:	56 2e       	mov	r5, r22
     f00:	67 2e       	mov	r6, r23
     f02:	78 2e       	mov	r7, r24
     f04:	49 2e       	mov	r4, r25
     f06:	ed 81       	ldd	r30, Y+5	; 0x05
     f08:	fe 81       	ldd	r31, Y+6	; 0x06
     f0a:	04 88       	ldd	r0, Z+20	; 0x14
     f0c:	f5 89       	ldd	r31, Z+21	; 0x15
     f0e:	e0 2d       	mov	r30, r0
     f10:	fe 83       	std	Y+6, r31	; 0x06
     f12:	ed 83       	std	Y+5, r30	; 0x05
     f14:	ef 2b       	or	r30, r31
     f16:	09 f0       	breq	.+2      	; 0xf1a <defuzzification+0x112>
     f18:	a9 cf       	rjmp	.-174    	; 0xe6c <defuzzification+0x64>
     f1a:	26 2f       	mov	r18, r22
     f1c:	37 2f       	mov	r19, r23
     f1e:	48 2f       	mov	r20, r24
     f20:	59 2f       	mov	r21, r25
     f22:	63 2d       	mov	r22, r3
     f24:	72 2d       	mov	r23, r2
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	0e 94 35 10 	call	0x206a	; 0x206a <__divsf3>
     f2e:	26 2f       	mov	r18, r22
     f30:	37 2f       	mov	r19, r23
     f32:	48 2f       	mov	r20, r24
     f34:	59 2f       	mov	r21, r25
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <defuzzification+0x138>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	62 2f       	mov	r22, r18
     f42:	73 2f       	mov	r23, r19
     f44:	84 2f       	mov	r24, r20
     f46:	95 2f       	mov	r25, r21
     f48:	0e 94 9d 10 	call	0x213a	; 0x213a <__fixsfsi>
     f4c:	eb 81       	ldd	r30, Y+3	; 0x03
     f4e:	fc 81       	ldd	r31, Y+4	; 0x04
     f50:	73 87       	std	Z+11, r23	; 0x0b
     f52:	62 87       	std	Z+10, r22	; 0x0a
     f54:	86 85       	ldd	r24, Z+14	; 0x0e
     f56:	97 85       	ldd	r25, Z+15	; 0x0f
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	89 2b       	or	r24, r25
     f5e:	09 f0       	breq	.+2      	; 0xf62 <defuzzification+0x15a>
     f60:	73 cf       	rjmp	.-282    	; 0xe48 <defuzzification+0x40>
     f62:	26 96       	adiw	r28, 0x06	; 6
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	7f 90       	pop	r7
     f88:	6f 90       	pop	r6
     f8a:	5f 90       	pop	r5
     f8c:	4f 90       	pop	r4
     f8e:	3f 90       	pop	r3
     f90:	2f 90       	pop	r2
     f92:	08 95       	ret

00000f94 <MATLAB_MF>:
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	6a 01       	movw	r12, r20
     fac:	59 01       	movw	r10, r18
     fae:	0e 94 05 12 	call	0x240a	; 0x240a <strcpy>
     fb2:	1b 86       	std	Y+11, r1	; 0x0b
     fb4:	1a 86       	std	Y+10, r1	; 0x0a
     fb6:	dd 86       	std	Y+13, r13	; 0x0d
     fb8:	cc 86       	std	Y+12, r12	; 0x0c
     fba:	ff 86       	std	Y+15, r15	; 0x0f
     fbc:	ee 86       	std	Y+14, r14	; 0x0e
     fbe:	b5 01       	movw	r22, r10
     fc0:	6c 19       	sub	r22, r12
     fc2:	7d 09       	sbc	r23, r13
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	31 e0       	ldi	r19, 0x01	; 1
     fc8:	c9 01       	movw	r24, r18
     fca:	0e 94 bf 11 	call	0x237e	; 0x237e <__divmodhi4>
     fce:	79 8b       	std	Y+17, r23	; 0x11
     fd0:	68 8b       	std	Y+16, r22	; 0x10
     fd2:	b7 01       	movw	r22, r14
     fd4:	60 1b       	sub	r22, r16
     fd6:	71 0b       	sbc	r23, r17
     fd8:	c9 01       	movw	r24, r18
     fda:	0e 94 bf 11 	call	0x237e	; 0x237e <__divmodhi4>
     fde:	7b 8b       	std	Y+19, r23	; 0x13
     fe0:	6a 8b       	std	Y+18, r22	; 0x12
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	08 95       	ret

00000ff8 <rightTurn>:
void leftTurn(int gyro);



void rightTurn(int gyro)
{
     ff8:	2f 92       	push	r2
     ffa:	3f 92       	push	r3
     ffc:	4f 92       	push	r4
     ffe:	5f 92       	push	r5
    1000:	6f 92       	push	r6
    1002:	7f 92       	push	r7
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	ce 5c       	subi	r28, 0xCE	; 206
    1022:	d1 09       	sbc	r29, r1
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type turn; strcpy(turn.name, "turn");
    102e:	85 e0       	ldi	r24, 0x05	; 5
    1030:	ef e9       	ldi	r30, 0x9F	; 159
    1032:	f1 e0       	ldi	r31, 0x01	; 1
    1034:	9e 01       	movw	r18, r28
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	19 01       	movw	r2, r18
    103c:	d9 01       	movw	r26, r18
    103e:	01 90       	ld	r0, Z+
    1040:	0d 92       	st	X+, r0
    1042:	8a 95       	dec	r24
    1044:	e1 f7       	brne	.-8      	; 0x103e <rightTurn+0x46>
	
	// Set MFs
	struct mf_type start;
	MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    1046:	5e 01       	movw	r10, r28
    1048:	31 e1       	ldi	r19, 0x11	; 17
    104a:	a3 0e       	add	r10, r19
    104c:	b1 1c       	adc	r11, r1
    104e:	0f 2e       	mov	r0, r31
    1050:	fd e2       	ldi	r31, 0x2D	; 45
    1052:	ef 2e       	mov	r14, r31
    1054:	f1 2c       	mov	r15, r1
    1056:	f0 2d       	mov	r31, r0
    1058:	00 e0       	ldi	r16, 0x00	; 0
    105a:	10 e0       	ldi	r17, 0x00	; 0
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	4f ef       	ldi	r20, 0xFF	; 255
    1062:	5f ef       	ldi	r21, 0xFF	; 255
    1064:	64 ea       	ldi	r22, 0xA4	; 164
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	c5 01       	movw	r24, r10
    106a:	94 df       	rcall	.-216    	; 0xf94 <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    106c:	6e 01       	movw	r12, r28
    106e:	87 e2       	ldi	r24, 0x27	; 39
    1070:	c8 0e       	add	r12, r24
    1072:	d1 1c       	adc	r13, r1
    1074:	0f 2e       	mov	r0, r31
    1076:	fc e3       	ldi	r31, 0x3C	; 60
    1078:	ef 2e       	mov	r14, r31
    107a:	f1 2c       	mov	r15, r1
    107c:	f0 2d       	mov	r31, r0
    107e:	0d e2       	ldi	r16, 0x2D	; 45
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	2d e2       	ldi	r18, 0x2D	; 45
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4e e1       	ldi	r20, 0x1E	; 30
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	6a ea       	ldi	r22, 0xAA	; 170
    108c:	71 e0       	ldi	r23, 0x01	; 1
    108e:	c6 01       	movw	r24, r12
    1090:	81 df       	rcall	.-254    	; 0xf94 <MATLAB_MF>
	struct mf_type end;
	MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    1092:	2e 01       	movw	r4, r28
    1094:	ed e3       	ldi	r30, 0x3D	; 61
    1096:	4e 0e       	add	r4, r30
    1098:	51 1c       	adc	r5, r1
    109a:	0f 2e       	mov	r0, r31
    109c:	fe e7       	ldi	r31, 0x7E	; 126
    109e:	ef 2e       	mov	r14, r31
    10a0:	f1 2c       	mov	r15, r1
    10a2:	f0 2d       	mov	r31, r0
    10a4:	0d e7       	ldi	r16, 0x7D	; 125
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	2d e2       	ldi	r18, 0x2D	; 45
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4d e2       	ldi	r20, 0x2D	; 45
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	61 eb       	ldi	r22, 0xB1	; 177
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	c2 01       	movw	r24, r4
    10b6:	6e df       	rcall	.-292    	; 0xf94 <MATLAB_MF>

	// Linked list for MFs
	turn.membership_functions = &start;
    10b8:	be 86       	std	Y+14, r11	; 0x0e
    10ba:	ad 86       	std	Y+13, r10	; 0x0d
	start.next = &middle;
    10bc:	de a2       	std	Y+38, r13	; 0x26
    10be:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &end;
    10c0:	5c ae       	std	Y+60, r5	; 0x3c
    10c2:	4b ae       	std	Y+59, r4	; 0x3b
	end.next = NULL;
    10c4:	63 96       	adiw	r28, 0x13	; 19
    10c6:	1f ae       	std	Y+63, r1	; 0x3f
    10c8:	1e ae       	std	Y+62, r1	; 0x3e
    10ca:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    10cc:	6e 01       	movw	r12, r28
    10ce:	f3 e5       	ldi	r31, 0x53	; 83
    10d0:	cf 0e       	add	r12, r31
    10d2:	d1 1c       	adc	r13, r1
    10d4:	86 e0       	ldi	r24, 0x06	; 6
    10d6:	e5 eb       	ldi	r30, 0xB5	; 181
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	d6 01       	movw	r26, r12
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	8a 95       	dec	r24
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <rightTurn+0xe4>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2739, 2740, 2740, 2815);
    10e4:	5e 01       	movw	r10, r28
    10e6:	23 e6       	ldi	r18, 0x63	; 99
    10e8:	a2 0e       	add	r10, r18
    10ea:	b1 1c       	adc	r11, r1
    10ec:	0f 2e       	mov	r0, r31
    10ee:	ee 24       	eor	r14, r14
    10f0:	ea 94       	dec	r14
    10f2:	fa e0       	ldi	r31, 0x0A	; 10
    10f4:	ff 2e       	mov	r15, r31
    10f6:	f0 2d       	mov	r31, r0
    10f8:	04 eb       	ldi	r16, 0xB4	; 180
    10fa:	1a e0       	ldi	r17, 0x0A	; 10
    10fc:	24 eb       	ldi	r18, 0xB4	; 180
    10fe:	3a e0       	ldi	r19, 0x0A	; 10
    1100:	43 eb       	ldi	r20, 0xB3	; 179
    1102:	5a e0       	ldi	r21, 0x0A	; 10
    1104:	67 e5       	ldi	r22, 0x57	; 87
    1106:	71 e0       	ldi	r23, 0x01	; 1
    1108:	c5 01       	movw	r24, r10
    110a:	44 df       	rcall	.-376    	; 0xf94 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2804, 2820, 2820, 2836);
    110c:	4e 01       	movw	r8, r28
    110e:	39 e7       	ldi	r19, 0x79	; 121
    1110:	83 0e       	add	r8, r19
    1112:	91 1c       	adc	r9, r1
    1114:	0f 2e       	mov	r0, r31
    1116:	f4 e1       	ldi	r31, 0x14	; 20
    1118:	ef 2e       	mov	r14, r31
    111a:	fb e0       	ldi	r31, 0x0B	; 11
    111c:	ff 2e       	mov	r15, r31
    111e:	f0 2d       	mov	r31, r0
    1120:	04 e0       	ldi	r16, 0x04	; 4
    1122:	1b e0       	ldi	r17, 0x0B	; 11
    1124:	24 e0       	ldi	r18, 0x04	; 4
    1126:	3b e0       	ldi	r19, 0x0B	; 11
    1128:	44 ef       	ldi	r20, 0xF4	; 244
    112a:	5a e0       	ldi	r21, 0x0A	; 10
    112c:	6a ec       	ldi	r22, 0xCA	; 202
    112e:	71 e0       	ldi	r23, 0x01	; 1
    1130:	c4 01       	movw	r24, r8
    1132:	30 df       	rcall	.-416    	; 0xf94 <MATLAB_MF>
	struct mf_type sharpRight;
	MATLAB_MF(&sharpRight, "sharpRight", MAXRIGHT-1, MAXRIGHT, MAXRIGHT, MAXRIGHT+1);
    1134:	3e 01       	movw	r6, r28
    1136:	8f e8       	ldi	r24, 0x8F	; 143
    1138:	68 0e       	add	r6, r24
    113a:	71 1c       	adc	r7, r1
    113c:	0f 2e       	mov	r0, r31
    113e:	f5 ee       	ldi	r31, 0xE5	; 229
    1140:	ef 2e       	mov	r14, r31
    1142:	fc e0       	ldi	r31, 0x0C	; 12
    1144:	ff 2e       	mov	r15, r31
    1146:	f0 2d       	mov	r31, r0
    1148:	04 ee       	ldi	r16, 0xE4	; 228
    114a:	1c e0       	ldi	r17, 0x0C	; 12
    114c:	24 ee       	ldi	r18, 0xE4	; 228
    114e:	3c e0       	ldi	r19, 0x0C	; 12
    1150:	43 ee       	ldi	r20, 0xE3	; 227
    1152:	5c e0       	ldi	r21, 0x0C	; 12
    1154:	60 e6       	ldi	r22, 0x60	; 96
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	c3 01       	movw	r24, r6
    115a:	1c df       	rcall	.-456    	; 0xf94 <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    115c:	f6 01       	movw	r30, r12
    115e:	b5 86       	std	Z+13, r11	; 0x0d
    1160:	a4 86       	std	Z+12, r10	; 0x0c
	straight.next = &right;
    1162:	f5 01       	movw	r30, r10
    1164:	95 8a       	std	Z+21, r9	; 0x15
    1166:	84 8a       	std	Z+20, r8	; 0x14
	right.next = &sharpRight;
    1168:	f4 01       	movw	r30, r8
    116a:	75 8a       	std	Z+21, r7	; 0x15
    116c:	64 8a       	std	Z+20, r6	; 0x14
	sharpRight.next = NULL;
    116e:	f3 01       	movw	r30, r6
    1170:	15 8a       	std	Z+21, r1	; 0x15
    1172:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &turn;
    1174:	30 92 f9 02 	sts	0x02F9, r3
    1178:	20 92 f8 02 	sts	0x02F8, r2
	turn.next = NULL;
    117c:	18 8a       	std	Y+16, r1	; 0x10
    117e:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    1180:	d0 92 f7 02 	sts	0x02F7, r13
    1184:	c0 92 f6 02 	sts	0x02F6, r12
	servo.next = NULL;
    1188:	f6 01       	movw	r30, r12
    118a:	17 86       	std	Z+15, r1	; 0x0f
    118c:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    118e:	ce 01       	movw	r24, r28
    1190:	8b 55       	subi	r24, 0x5B	; 91
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	90 93 fb 02 	sts	0x02FB, r25
    1198:	80 93 fa 02 	sts	0x02FA, r24
	struct rule_type rule2; rule1.next = &rule2;
    119c:	de 01       	movw	r26, r28
    119e:	a5 55       	subi	r26, 0x55	; 85
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	fc 01       	movw	r30, r24
    11a4:	b5 83       	std	Z+5, r27	; 0x05
    11a6:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 54       	subi	r22, 0x4F	; 79
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	15 96       	adiw	r26, 0x05	; 5
    11b0:	7c 93       	st	X, r23
    11b2:	6e 93       	st	-X, r22
    11b4:	14 97       	sbiw	r26, 0x04	; 4
    11b6:	fb 01       	movw	r30, r22
    11b8:	15 82       	std	Z+5, r1	; 0x05
    11ba:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    11bc:	ae 01       	movw	r20, r28
    11be:	49 54       	subi	r20, 0x49	; 73
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	fc 01       	movw	r30, r24
    11c4:	51 83       	std	Z+1, r21	; 0x01
    11c6:	40 83       	st	Z, r20
    11c8:	fa 01       	movw	r30, r20
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	12 82       	std	Z+2, r1	; 0x02
    11ce:	9e 01       	movw	r18, r28
    11d0:	25 54       	subi	r18, 0x45	; 69
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	33 83       	std	Z+3, r19	; 0x03
    11d8:	22 83       	std	Z+2, r18	; 0x02
    11da:	f9 01       	movw	r30, r18
    11dc:	13 82       	std	Z+3, r1	; 0x03
    11de:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &start.value; then1.value = &sharpRight.value;
    11e0:	8a 58       	subi	r24, 0x8A	; 138
    11e2:	91 09       	sbc	r25, r1
    11e4:	fa 01       	movw	r30, r20
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	fa e0       	ldi	r31, 0x0A	; 10
    11ec:	6f 0e       	add	r6, r31
    11ee:	71 1c       	adc	r7, r1
    11f0:	f9 01       	movw	r30, r18
    11f2:	71 82       	std	Z+1, r7	; 0x01
    11f4:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    11f6:	2c 5f       	subi	r18, 0xFC	; 252
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	3c 93       	st	X, r19
    11fe:	2e 93       	st	-X, r18
    1200:	f9 01       	movw	r30, r18
    1202:	13 82       	std	Z+3, r1	; 0x03
    1204:	12 82       	std	Z+2, r1	; 0x02
    1206:	88 55       	subi	r24, 0x58	; 88
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	13 96       	adiw	r26, 0x03	; 3
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
    1210:	12 97       	sbiw	r26, 0x02	; 2
    1212:	fc 01       	movw	r30, r24
    1214:	13 82       	std	Z+3, r1	; 0x03
    1216:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &middle.value; then2.value = &right.value;
    1218:	46 58       	subi	r20, 0x86	; 134
    121a:	51 09       	sbc	r21, r1
    121c:	f9 01       	movw	r30, r18
    121e:	51 83       	std	Z+1, r21	; 0x01
    1220:	40 83       	st	Z, r20
    1222:	fa e0       	ldi	r31, 0x0A	; 10
    1224:	8f 0e       	add	r8, r31
    1226:	91 1c       	adc	r9, r1
    1228:	fc 01       	movw	r30, r24
    122a:	91 82       	std	Z+1, r9	; 0x01
    122c:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    122e:	04 96       	adiw	r24, 0x04	; 4
    1230:	fb 01       	movw	r30, r22
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	fc 01       	movw	r30, r24
    1238:	13 82       	std	Z+3, r1	; 0x03
    123a:	12 82       	std	Z+2, r1	; 0x02
    123c:	90 96       	adiw	r26, 0x20	; 32
    123e:	fb 01       	movw	r30, r22
    1240:	b3 83       	std	Z+3, r27	; 0x03
    1242:	a2 83       	std	Z+2, r26	; 0x02
    1244:	13 96       	adiw	r26, 0x03	; 3
    1246:	1c 92       	st	X, r1
    1248:	1e 92       	st	-X, r1
    124a:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &end.value; then3.value = &straight.value;
    124c:	fa e0       	ldi	r31, 0x0A	; 10
    124e:	4f 0e       	add	r4, r31
    1250:	51 1c       	adc	r5, r1
    1252:	fc 01       	movw	r30, r24
    1254:	51 82       	std	Z+1, r5	; 0x01
    1256:	40 82       	st	Z, r4
    1258:	fa e0       	ldi	r31, 0x0A	; 10
    125a:	af 0e       	add	r10, r31
    125c:	b1 1c       	adc	r11, r1
    125e:	ad 92       	st	X+, r10
    1260:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    1262:	65 dd       	rcall	.-1334   	; 0xd2e <fuzzification>
	rule_evaluation();
    1264:	8b dd       	rcall	.-1258   	; 0xd7c <rule_evaluation>
	defuzzification();
    1266:	d0 dd       	rcall	.-1120   	; 0xe08 <defuzzification>
	if (servo.value > MAXLEFT)
    1268:	f6 01       	movw	r30, r12
    126a:	82 85       	ldd	r24, Z+10	; 0x0a
    126c:	93 85       	ldd	r25, Z+11	; 0x0b
    126e:	87 3e       	cpi	r24, 0xE7	; 231
    1270:	f7 e0       	ldi	r31, 0x07	; 7
    1272:	9f 07       	cpc	r25, r31
    1274:	24 f0       	brlt	.+8      	; 0x127e <rightTurn+0x286>
	{
		setServo(MAXLEFT);
    1276:	86 ee       	ldi	r24, 0xE6	; 230
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	f7 d2       	rcall	.+1518   	; 0x186a <setServo>
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <rightTurn+0x298>
	}
	else if (servo.value < MAXRIGHT)
    127e:	84 3e       	cpi	r24, 0xE4	; 228
    1280:	2c e0       	ldi	r18, 0x0C	; 12
    1282:	92 07       	cpc	r25, r18
    1284:	24 f4       	brge	.+8      	; 0x128e <rightTurn+0x296>
	{
		setServo(MAXRIGHT);
    1286:	84 ee       	ldi	r24, 0xE4	; 228
    1288:	9c e0       	ldi	r25, 0x0C	; 12
    128a:	ef d2       	rcall	.+1502   	; 0x186a <setServo>
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <rightTurn+0x298>
	}
	else
	{
		setServo(servo.value);
    128e:	ed d2       	rcall	.+1498   	; 0x186a <setServo>
	}
}
    1290:	c2 53       	subi	r28, 0x32	; 50
    1292:	df 4f       	sbci	r29, 0xFF	; 255
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	7f 90       	pop	r7
    12b8:	6f 90       	pop	r6
    12ba:	5f 90       	pop	r5
    12bc:	4f 90       	pop	r4
    12be:	3f 90       	pop	r3
    12c0:	2f 90       	pop	r2
    12c2:	08 95       	ret

000012c4 <leftTurn>:

/*
 * This function deals with left turns
 */
void leftTurn(int gyro)
{
    12c4:	2f 92       	push	r2
    12c6:	3f 92       	push	r3
    12c8:	4f 92       	push	r4
    12ca:	5f 92       	push	r5
    12cc:	6f 92       	push	r6
    12ce:	7f 92       	push	r7
    12d0:	8f 92       	push	r8
    12d2:	9f 92       	push	r9
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	ce 5c       	subi	r28, 0xCE	; 206
    12ee:	d1 09       	sbc	r29, r1
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    
    // DECLARATION OF GYRO INPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type turn; strcpy(turn.name, "turn");
    12fa:	85 e0       	ldi	r24, 0x05	; 5
    12fc:	ef e9       	ldi	r30, 0x9F	; 159
    12fe:	f1 e0       	ldi	r31, 0x01	; 1
    1300:	9e 01       	movw	r18, r28
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	19 01       	movw	r2, r18
    1308:	d9 01       	movw	r26, r18
    130a:	01 90       	ld	r0, Z+
    130c:	0d 92       	st	X+, r0
    130e:	8a 95       	dec	r24
    1310:	e1 f7       	brne	.-8      	; 0x130a <leftTurn+0x46>
    
    // Set MFs
    struct mf_type start;
    MATLAB_MF(&start, "start", minGyro-1, minGyro, minGyro, 45);
    1312:	5e 01       	movw	r10, r28
    1314:	31 e1       	ldi	r19, 0x11	; 17
    1316:	a3 0e       	add	r10, r19
    1318:	b1 1c       	adc	r11, r1
    131a:	0f 2e       	mov	r0, r31
    131c:	fd e2       	ldi	r31, 0x2D	; 45
    131e:	ef 2e       	mov	r14, r31
    1320:	f1 2c       	mov	r15, r1
    1322:	f0 2d       	mov	r31, r0
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4f ef       	ldi	r20, 0xFF	; 255
    132e:	5f ef       	ldi	r21, 0xFF	; 255
    1330:	64 ea       	ldi	r22, 0xA4	; 164
    1332:	71 e0       	ldi	r23, 0x01	; 1
    1334:	c5 01       	movw	r24, r10
    1336:	2e de       	rcall	.-932    	; 0xf94 <MATLAB_MF>
    struct mf_type middle;
    MATLAB_MF(&middle, "middle", 30, 45, 45, 60);
    1338:	6e 01       	movw	r12, r28
    133a:	87 e2       	ldi	r24, 0x27	; 39
    133c:	c8 0e       	add	r12, r24
    133e:	d1 1c       	adc	r13, r1
    1340:	0f 2e       	mov	r0, r31
    1342:	fc e3       	ldi	r31, 0x3C	; 60
    1344:	ef 2e       	mov	r14, r31
    1346:	f1 2c       	mov	r15, r1
    1348:	f0 2d       	mov	r31, r0
    134a:	0d e2       	ldi	r16, 0x2D	; 45
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	2d e2       	ldi	r18, 0x2D	; 45
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4e e1       	ldi	r20, 0x1E	; 30
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	6a ea       	ldi	r22, 0xAA	; 170
    1358:	71 e0       	ldi	r23, 0x01	; 1
    135a:	c6 01       	movw	r24, r12
    135c:	1b de       	rcall	.-970    	; 0xf94 <MATLAB_MF>
    struct mf_type end;
    MATLAB_MF(&end, "end", 45, 45, maxGyro, maxGyro+1);
    135e:	2e 01       	movw	r4, r28
    1360:	ed e3       	ldi	r30, 0x3D	; 61
    1362:	4e 0e       	add	r4, r30
    1364:	51 1c       	adc	r5, r1
    1366:	0f 2e       	mov	r0, r31
    1368:	fe e7       	ldi	r31, 0x7E	; 126
    136a:	ef 2e       	mov	r14, r31
    136c:	f1 2c       	mov	r15, r1
    136e:	f0 2d       	mov	r31, r0
    1370:	0d e7       	ldi	r16, 0x7D	; 125
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	2d e2       	ldi	r18, 0x2D	; 45
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4d e2       	ldi	r20, 0x2D	; 45
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	61 eb       	ldi	r22, 0xB1	; 177
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	c2 01       	movw	r24, r4
    1382:	08 de       	rcall	.-1008   	; 0xf94 <MATLAB_MF>

    // Linked list for MFs
    turn.membership_functions = &start;
    1384:	be 86       	std	Y+14, r11	; 0x0e
    1386:	ad 86       	std	Y+13, r10	; 0x0d
    start.next = &middle;
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cd a2       	std	Y+37, r12	; 0x25
    middle.next = &end;
    138c:	5c ae       	std	Y+60, r5	; 0x3c
    138e:	4b ae       	std	Y+59, r4	; 0x3b
    end.next = NULL;
    1390:	63 96       	adiw	r28, 0x13	; 19
    1392:	1f ae       	std	Y+63, r1	; 0x3f
    1394:	1e ae       	std	Y+62, r1	; 0x3e
    1396:	63 97       	sbiw	r28, 0x13	; 19
    
    
    // DECLARATION OF SERVO OUTPUT VARIABLE
    //////////////////////////////////////////////////////////////////////////////
    
    struct io_type servo; strcpy(servo.name, "servo");
    1398:	6e 01       	movw	r12, r28
    139a:	f3 e5       	ldi	r31, 0x53	; 83
    139c:	cf 0e       	add	r12, r31
    139e:	d1 1c       	adc	r13, r1
    13a0:	86 e0       	ldi	r24, 0x06	; 6
    13a2:	e5 eb       	ldi	r30, 0xB5	; 181
    13a4:	f1 e0       	ldi	r31, 0x01	; 1
    13a6:	d6 01       	movw	r26, r12
    13a8:	01 90       	ld	r0, Z+
    13aa:	0d 92       	st	X+, r0
    13ac:	8a 95       	dec	r24
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <leftTurn+0xe4>
    
    // Set MFs
    struct mf_type straight;
    MATLAB_MF(&straight, "straight", 2460, 2560, 2560, 2660);
    13b0:	5e 01       	movw	r10, r28
    13b2:	23 e6       	ldi	r18, 0x63	; 99
    13b4:	a2 0e       	add	r10, r18
    13b6:	b1 1c       	adc	r11, r1
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f4 e6       	ldi	r31, 0x64	; 100
    13bc:	ef 2e       	mov	r14, r31
    13be:	fa e0       	ldi	r31, 0x0A	; 10
    13c0:	ff 2e       	mov	r15, r31
    13c2:	f0 2d       	mov	r31, r0
    13c4:	00 e0       	ldi	r16, 0x00	; 0
    13c6:	1a e0       	ldi	r17, 0x0A	; 10
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3a e0       	ldi	r19, 0x0A	; 10
    13cc:	4c e9       	ldi	r20, 0x9C	; 156
    13ce:	59 e0       	ldi	r21, 0x09	; 9
    13d0:	67 e5       	ldi	r22, 0x57	; 87
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	c5 01       	movw	r24, r10
    13d6:	de dd       	rcall	.-1092   	; 0xf94 <MATLAB_MF>
    struct mf_type left;
    MATLAB_MF(&left, "left", 2240, 2240, 2400, 2560);
    13d8:	4e 01       	movw	r8, r28
    13da:	39 e7       	ldi	r19, 0x79	; 121
    13dc:	83 0e       	add	r8, r19
    13de:	91 1c       	adc	r9, r1
    13e0:	0f 2e       	mov	r0, r31
    13e2:	e1 2c       	mov	r14, r1
    13e4:	fa e0       	ldi	r31, 0x0A	; 10
    13e6:	ff 2e       	mov	r15, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	00 e6       	ldi	r16, 0x60	; 96
    13ec:	19 e0       	ldi	r17, 0x09	; 9
    13ee:	20 ec       	ldi	r18, 0xC0	; 192
    13f0:	38 e0       	ldi	r19, 0x08	; 8
    13f2:	40 ec       	ldi	r20, 0xC0	; 192
    13f4:	58 e0       	ldi	r21, 0x08	; 8
    13f6:	64 ed       	ldi	r22, 0xD4	; 212
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	c4 01       	movw	r24, r8
    13fc:	cb dd       	rcall	.-1130   	; 0xf94 <MATLAB_MF>
    struct mf_type sharpLeft;
    MATLAB_MF(&sharpLeft, "sharpLeft", MAXLEFT-1, MAXLEFT, MAXLEFT, MAXLEFT+1);
    13fe:	3e 01       	movw	r6, r28
    1400:	8f e8       	ldi	r24, 0x8F	; 143
    1402:	68 0e       	add	r6, r24
    1404:	71 1c       	adc	r7, r1
    1406:	0f 2e       	mov	r0, r31
    1408:	f7 ee       	ldi	r31, 0xE7	; 231
    140a:	ef 2e       	mov	r14, r31
    140c:	f7 e0       	ldi	r31, 0x07	; 7
    140e:	ff 2e       	mov	r15, r31
    1410:	f0 2d       	mov	r31, r0
    1412:	06 ee       	ldi	r16, 0xE6	; 230
    1414:	17 e0       	ldi	r17, 0x07	; 7
    1416:	26 ee       	ldi	r18, 0xE6	; 230
    1418:	37 e0       	ldi	r19, 0x07	; 7
    141a:	45 ee       	ldi	r20, 0xE5	; 229
    141c:	57 e0       	ldi	r21, 0x07	; 7
    141e:	6d e4       	ldi	r22, 0x4D	; 77
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	c3 01       	movw	r24, r6
    1424:	b7 dd       	rcall	.-1170   	; 0xf94 <MATLAB_MF>

    // Linked list for MFs
    servo.membership_functions = &straight;
    1426:	f6 01       	movw	r30, r12
    1428:	b5 86       	std	Z+13, r11	; 0x0d
    142a:	a4 86       	std	Z+12, r10	; 0x0c
    straight.next = &left;
    142c:	f5 01       	movw	r30, r10
    142e:	95 8a       	std	Z+21, r9	; 0x15
    1430:	84 8a       	std	Z+20, r8	; 0x14
    left.next = &sharpLeft;
    1432:	f4 01       	movw	r30, r8
    1434:	75 8a       	std	Z+21, r7	; 0x15
    1436:	64 8a       	std	Z+20, r6	; 0x14
    sharpLeft.next = NULL;
    1438:	f3 01       	movw	r30, r6
    143a:	15 8a       	std	Z+21, r1	; 0x15
    143c:	14 8a       	std	Z+20, r1	; 0x14
    
    
    // SETTING I/O LINKED LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    System_Inputs = &turn;
    143e:	30 92 f9 02 	sts	0x02F9, r3
    1442:	20 92 f8 02 	sts	0x02F8, r2
    turn.next = NULL;
    1446:	18 8a       	std	Y+16, r1	; 0x10
    1448:	1f 86       	std	Y+15, r1	; 0x0f
    
    System_Outputs = &servo;
    144a:	d0 92 f7 02 	sts	0x02F7, r13
    144e:	c0 92 f6 02 	sts	0x02F6, r12
    servo.next = NULL;
    1452:	f6 01       	movw	r30, r12
    1454:	17 86       	std	Z+15, r1	; 0x0f
    1456:	16 86       	std	Z+14, r1	; 0x0e
    
    
    // DECLARATION OF RULES AND LISTS
    //////////////////////////////////////////////////////////////////////////////
    
    struct rule_type rule1; Rule_Base = &rule1;
    1458:	ce 01       	movw	r24, r28
    145a:	8b 55       	subi	r24, 0x5B	; 91
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	90 93 fb 02 	sts	0x02FB, r25
    1462:	80 93 fa 02 	sts	0x02FA, r24
    struct rule_type rule2; rule1.next = &rule2;
    1466:	de 01       	movw	r26, r28
    1468:	a5 55       	subi	r26, 0x55	; 85
    146a:	bf 4f       	sbci	r27, 0xFF	; 255
    146c:	fc 01       	movw	r30, r24
    146e:	b5 83       	std	Z+5, r27	; 0x05
    1470:	a4 83       	std	Z+4, r26	; 0x04
    struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1472:	be 01       	movw	r22, r28
    1474:	6f 54       	subi	r22, 0x4F	; 79
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	15 96       	adiw	r26, 0x05	; 5
    147a:	7c 93       	st	X, r23
    147c:	6e 93       	st	-X, r22
    147e:	14 97       	sbiw	r26, 0x04	; 4
    1480:	fb 01       	movw	r30, r22
    1482:	15 82       	std	Z+5, r1	; 0x05
    1484:	14 82       	std	Z+4, r1	; 0x04
    // RULE SETUP
    //////////////////////////////////////////////////////////////////////////////
    
    // if gyro is start then servo is noSpeed
    struct rule_element_type if11, then1;
    rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1486:	ae 01       	movw	r20, r28
    1488:	49 54       	subi	r20, 0x49	; 73
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	fc 01       	movw	r30, r24
    148e:	51 83       	std	Z+1, r21	; 0x01
    1490:	40 83       	st	Z, r20
    1492:	fa 01       	movw	r30, r20
    1494:	13 82       	std	Z+3, r1	; 0x03
    1496:	12 82       	std	Z+2, r1	; 0x02
    1498:	9e 01       	movw	r18, r28
    149a:	25 54       	subi	r18, 0x45	; 69
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	fc 01       	movw	r30, r24
    14a0:	33 83       	std	Z+3, r19	; 0x03
    14a2:	22 83       	std	Z+2, r18	; 0x02
    14a4:	f9 01       	movw	r30, r18
    14a6:	13 82       	std	Z+3, r1	; 0x03
    14a8:	12 82       	std	Z+2, r1	; 0x02
    if11.value = &start.value; then1.value = &sharpLeft.value;
    14aa:	8a 58       	subi	r24, 0x8A	; 138
    14ac:	91 09       	sbc	r25, r1
    14ae:	fa 01       	movw	r30, r20
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	fa e0       	ldi	r31, 0x0A	; 10
    14b6:	6f 0e       	add	r6, r31
    14b8:	71 1c       	adc	r7, r1
    14ba:	f9 01       	movw	r30, r18
    14bc:	71 82       	std	Z+1, r7	; 0x01
    14be:	60 82       	st	Z, r6
    
    // if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
    struct rule_element_type if21, then2;
    rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    14c0:	2c 5f       	subi	r18, 0xFC	; 252
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	3c 93       	st	X, r19
    14c8:	2e 93       	st	-X, r18
    14ca:	f9 01       	movw	r30, r18
    14cc:	13 82       	std	Z+3, r1	; 0x03
    14ce:	12 82       	std	Z+2, r1	; 0x02
    14d0:	88 55       	subi	r24, 0x58	; 88
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	13 96       	adiw	r26, 0x03	; 3
    14d6:	9c 93       	st	X, r25
    14d8:	8e 93       	st	-X, r24
    14da:	12 97       	sbiw	r26, 0x02	; 2
    14dc:	fc 01       	movw	r30, r24
    14de:	13 82       	std	Z+3, r1	; 0x03
    14e0:	12 82       	std	Z+2, r1	; 0x02
    if21.value = &middle.value; then2.value = &left.value;
    14e2:	46 58       	subi	r20, 0x86	; 134
    14e4:	51 09       	sbc	r21, r1
    14e6:	f9 01       	movw	r30, r18
    14e8:	51 83       	std	Z+1, r21	; 0x01
    14ea:	40 83       	st	Z, r20
    14ec:	fa e0       	ldi	r31, 0x0A	; 10
    14ee:	8f 0e       	add	r8, r31
    14f0:	91 1c       	adc	r9, r1
    14f2:	fc 01       	movw	r30, r24
    14f4:	91 82       	std	Z+1, r9	; 0x01
    14f6:	80 82       	st	Z, r8
    
    // if speed is medium and distance is oneM then speed is cruise
    struct rule_element_type if31, then3;
    rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    14f8:	04 96       	adiw	r24, 0x04	; 4
    14fa:	fb 01       	movw	r30, r22
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	fc 01       	movw	r30, r24
    1502:	13 82       	std	Z+3, r1	; 0x03
    1504:	12 82       	std	Z+2, r1	; 0x02
    1506:	90 96       	adiw	r26, 0x20	; 32
    1508:	fb 01       	movw	r30, r22
    150a:	b3 83       	std	Z+3, r27	; 0x03
    150c:	a2 83       	std	Z+2, r26	; 0x02
    150e:	13 96       	adiw	r26, 0x03	; 3
    1510:	1c 92       	st	X, r1
    1512:	1e 92       	st	-X, r1
    1514:	12 97       	sbiw	r26, 0x02	; 2
    if31.value = &end.value; then3.value = &straight.value;
    1516:	fa e0       	ldi	r31, 0x0A	; 10
    1518:	4f 0e       	add	r4, r31
    151a:	51 1c       	adc	r5, r1
    151c:	fc 01       	movw	r30, r24
    151e:	51 82       	std	Z+1, r5	; 0x01
    1520:	40 82       	st	Z, r4
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	af 0e       	add	r10, r31
    1526:	b1 1c       	adc	r11, r1
    1528:	ad 92       	st	X+, r10
    152a:	bc 92       	st	X, r11
    
    
    // EXECUTING FUZZY LOGIC & OUTPUT VALUE
    //////////////////////////////////////////////////////////////////////////////
    
    fuzzification();
    152c:	00 dc       	rcall	.-2048   	; 0xd2e <fuzzification>
    rule_evaluation();
    152e:	26 dc       	rcall	.-1972   	; 0xd7c <rule_evaluation>
    defuzzification();
    1530:	6b dc       	rcall	.-1834   	; 0xe08 <defuzzification>
    if (servo.value > MAXLEFT)
    1532:	f6 01       	movw	r30, r12
    1534:	82 85       	ldd	r24, Z+10	; 0x0a
    1536:	93 85       	ldd	r25, Z+11	; 0x0b
    1538:	87 3e       	cpi	r24, 0xE7	; 231
    153a:	f7 e0       	ldi	r31, 0x07	; 7
    153c:	9f 07       	cpc	r25, r31
    153e:	24 f0       	brlt	.+8      	; 0x1548 <leftTurn+0x284>
    {
	    setServo(MAXLEFT);
    1540:	86 ee       	ldi	r24, 0xE6	; 230
    1542:	97 e0       	ldi	r25, 0x07	; 7
    1544:	92 d1       	rcall	.+804    	; 0x186a <setServo>
    1546:	09 c0       	rjmp	.+18     	; 0x155a <leftTurn+0x296>
    }
    else if (servo.value < MAXRIGHT)
    1548:	84 3e       	cpi	r24, 0xE4	; 228
    154a:	2c e0       	ldi	r18, 0x0C	; 12
    154c:	92 07       	cpc	r25, r18
    154e:	24 f4       	brge	.+8      	; 0x1558 <leftTurn+0x294>
    {
	    setServo(MAXRIGHT);
    1550:	84 ee       	ldi	r24, 0xE4	; 228
    1552:	9c e0       	ldi	r25, 0x0C	; 12
    1554:	8a d1       	rcall	.+788    	; 0x186a <setServo>
    1556:	01 c0       	rjmp	.+2      	; 0x155a <leftTurn+0x296>
    }
    else
    {
	    setServo(servo.value);
    1558:	88 d1       	rcall	.+784    	; 0x186a <setServo>
    }
    
}
    155a:	c2 53       	subi	r28, 0x32	; 50
    155c:	df 4f       	sbci	r29, 0xFF	; 255
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	bf 90       	pop	r11
    157a:	af 90       	pop	r10
    157c:	9f 90       	pop	r9
    157e:	8f 90       	pop	r8
    1580:	7f 90       	pop	r7
    1582:	6f 90       	pop	r6
    1584:	5f 90       	pop	r5
    1586:	4f 90       	pop	r4
    1588:	3f 90       	pop	r3
    158a:	2f 90       	pop	r2
    158c:	08 95       	ret

0000158e <intersection>:


void intersection(int type, int gyro, int c, int v)
{
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	8a 01       	movw	r16, r20
    159c:	79 01       	movw	r14, r18
    159e:	fb 01       	movw	r30, r22
    15a0:	ff 23       	and	r31, r31
    15a2:	24 f4       	brge	.+8      	; 0x15ac <intersection+0x1e>
    15a4:	ee 27       	eor	r30, r30
    15a6:	ff 27       	eor	r31, r31
    15a8:	e6 1b       	sub	r30, r22
    15aa:	f7 0b       	sbc	r31, r23
    15ac:	ef 01       	movw	r28, r30
    15ae:	ee 37       	cpi	r30, 0x7E	; 126
    15b0:	f1 05       	cpc	r31, r1
    15b2:	14 f0       	brlt	.+4      	; 0x15b8 <intersection+0x2a>
    15b4:	cd e7       	ldi	r28, 0x7D	; 125
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        gyro = maxGyro;
    }
    
    
    if (type == 'r')
    15b8:	82 37       	cpi	r24, 0x72	; 114
    15ba:	91 05       	cpc	r25, r1
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <intersection+0x36>
    {
		rightTurn(gyro);
    15be:	ce 01       	movw	r24, r28
    15c0:	1b dd       	rcall	.-1482   	; 0xff8 <rightTurn>
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <intersection+0x5c>
    }
	else if (type == 'l')
    15c4:	8c 36       	cpi	r24, 0x6C	; 108
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f4       	brne	.+32     	; 0x15ea <intersection+0x5c>
	{
		if (checkCount(500) == 0) // if count less than 500 ms then, keep straight
    15ca:	84 ef       	ldi	r24, 0xF4	; 244
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <checkCount>
    15d2:	89 2b       	or	r24, r25
    15d4:	21 f4       	brne	.+8      	; 0x15de <intersection+0x50>
		{
			FLC_steering(c,v);
    15d6:	b7 01       	movw	r22, r14
    15d8:	c8 01       	movw	r24, r16
    15da:	dd d8       	rcall	.-3654   	; 0x796 <FLC_steering>
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <intersection+0x5c>
		}
		else
		{
		count(0);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 66 00 	call	0xcc	; 0xcc <count>
		leftTurn(gyro);	
    15e6:	ce 01       	movw	r24, r28
    15e8:	6d de       	rcall	.-806    	; 0x12c4 <leftTurn>
		}
	}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <__vector_28>:
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	0b b6       	in	r0, 0x3b	; 59
    1604:	0f 92       	push	r0
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	80 91 ce 00 	lds	r24, 0x00CE
    1612:	8f 3f       	cpi	r24, 0xFF	; 255
    1614:	29 f4       	brne	.+10     	; 0x1620 <__vector_28+0x28>
    1616:	10 92 db 01 	sts	0x01DB, r1
    161a:	10 92 da 01 	sts	0x01DA, r1
    161e:	10 c0       	rjmp	.+32     	; 0x1640 <__vector_28+0x48>
    1620:	e0 91 da 01 	lds	r30, 0x01DA
    1624:	f0 91 db 01 	lds	r31, 0x01DB
    1628:	e4 50       	subi	r30, 0x04	; 4
    162a:	fd 4f       	sbci	r31, 0xFD	; 253
    162c:	80 83       	st	Z, r24
    162e:	80 91 da 01 	lds	r24, 0x01DA
    1632:	90 91 db 01 	lds	r25, 0x01DB
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	90 93 db 01 	sts	0x01DB, r25
    163c:	80 93 da 01 	sts	0x01DA, r24
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <carInit>:
    1656:	a5 d0       	rcall	.+330    	; 0x17a2 <pwmInit>
    1658:	d9 d1       	rcall	.+946    	; 0x1a0c <spi_slave_init>
    165a:	8d ec       	ldi	r24, 0xCD	; 205
    165c:	9a e0       	ldi	r25, 0x0A	; 10
    165e:	90 93 89 00 	sts	0x0089, r25
    1662:	80 93 88 00 	sts	0x0088, r24
    1666:	84 e6       	ldi	r24, 0x64	; 100
    1668:	9a e0       	ldi	r25, 0x0A	; 10
    166a:	90 93 8b 00 	sts	0x008B, r25
    166e:	80 93 8a 00 	sts	0x008A, r24
    1672:	08 95       	ret

00001674 <main>:
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	2b 97       	sbiw	r28, 0x0b	; 11
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	e6 df       	rcall	.-52     	; 0x1656 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    168a:	2f ef       	ldi	r18, 0xFF	; 255
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	90 ee       	ldi	r25, 0xE0	; 224
    1690:	21 50       	subi	r18, 0x01	; 1
    1692:	80 40       	sbci	r24, 0x00	; 0
    1694:	90 40       	sbci	r25, 0x00	; 0
    1696:	e1 f7       	brne	.-8      	; 0x1690 <main+0x1c>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <main+0x26>
    169a:	00 00       	nop
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	81 b9       	out	0x01, r24	; 1
    16a0:	78 94       	sei
    16a2:	0a e8       	ldi	r16, 0x8A	; 138
    16a4:	10 e0       	ldi	r17, 0x00	; 0
    16a6:	0f 2e       	mov	r0, r31
    16a8:	f8 e8       	ldi	r31, 0x88	; 136
    16aa:	6f 2e       	mov	r6, r31
    16ac:	71 2c       	mov	r7, r1
    16ae:	f0 2d       	mov	r31, r0
    16b0:	0c d2       	rcall	.+1048   	; 0x1aca <is_package_recieved>
    16b2:	88 23       	and	r24, r24
    16b4:	e9 f3       	breq	.-6      	; 0x16b0 <main+0x3c>
    16b6:	3b 84       	ldd	r3, Y+11	; 0x0b
    16b8:	be 01       	movw	r22, r28
    16ba:	6f 5f       	subi	r22, 0xFF	; 255
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	ce 01       	movw	r24, r28
    16c0:	0b 96       	adiw	r24, 0x0b	; 11
    16c2:	0d d2       	rcall	.+1050   	; 0x1ade <read_sensor_info>
    16c4:	ab 80       	ldd	r10, Y+3	; 0x03
    16c6:	b1 2c       	mov	r11, r1
    16c8:	e9 80       	ldd	r14, Y+1	; 0x01
    16ca:	f1 2c       	mov	r15, r1
    16cc:	ca 80       	ldd	r12, Y+2	; 0x02
    16ce:	d1 2c       	mov	r13, r1
    16d0:	28 84       	ldd	r2, Y+8	; 0x08
    16d2:	8a 84       	ldd	r8, Y+10	; 0x0a
    16d4:	91 2c       	mov	r9, r1
    16d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d8:	84 30       	cpi	r24, 0x04	; 4
    16da:	79 f4       	brne	.+30     	; 0x16fa <main+0x86>
    16dc:	31 10       	cpse	r3, r1
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <main+0xa2>
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 66 00 	call	0xcc	; 0xcc <count>
    16e8:	49 84       	ldd	r4, Y+9	; 0x09
    16ea:	51 2c       	mov	r5, r1
    16ec:	e8 e2       	ldi	r30, 0x28	; 40
    16ee:	4e 1a       	sub	r4, r30
    16f0:	51 08       	sbc	r5, r1
    16f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	79 f4       	brne	.+30     	; 0x1716 <main+0xa2>
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <main+0x92>
    16fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	59 f4       	brne	.+22     	; 0x1716 <main+0xa2>
    1700:	f1 e0       	ldi	r31, 0x01	; 1
    1702:	3f 16       	cp	r3, r31
    1704:	41 f0       	breq	.+16     	; 0x1716 <main+0xa2>
    1706:	2c e6       	ldi	r18, 0x6C	; 108
    1708:	82 16       	cp	r8, r18
    170a:	91 04       	cpc	r9, r1
    170c:	21 f4       	brne	.+8      	; 0x1716 <main+0xa2>
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 66 00 	call	0xcc	; 0xcc <count>
    1716:	f8 94       	cli
    1718:	8b 85       	ldd	r24, Y+11	; 0x0b
    171a:	81 11       	cpse	r24, r1
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <main+0xbc>
    171e:	f8 01       	movw	r30, r16
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	b5 01       	movw	r22, r10
    1726:	5c d8       	rcall	.-3912   	; 0x7e0 <FLC_obstacle>
    1728:	b6 01       	movw	r22, r12
    172a:	c7 01       	movw	r24, r14
    172c:	34 d8       	rcall	.-3992   	; 0x796 <FLC_steering>
    172e:	29 c0       	rjmp	.+82     	; 0x1782 <main+0x10e>
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	c1 f4       	brne	.+48     	; 0x1764 <main+0xf0>
    1734:	e4 e9       	ldi	r30, 0x94	; 148
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	8c 32       	cpi	r24, 0x2C	; 44
    173e:	91 40       	sbci	r25, 0x01	; 1
    1740:	30 f4       	brcc	.+12     	; 0x174e <main+0xda>
    1742:	83 e1       	ldi	r24, 0x13	; 19
    1744:	9b e0       	ldi	r25, 0x0B	; 11
    1746:	3c d0       	rcall	.+120    	; 0x17c0 <setESC>
    1748:	c2 01       	movw	r24, r4
    174a:	08 d2       	rcall	.+1040   	; 0x1b5c <stop>
    174c:	1a c0       	rjmp	.+52     	; 0x1782 <main+0x10e>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 66 00 	call	0xcc	; 0xcc <count>
    1756:	8d ec       	ldi	r24, 0xCD	; 205
    1758:	9a e0       	ldi	r25, 0x0A	; 10
    175a:	32 d0       	rcall	.+100    	; 0x17c0 <setESC>
    175c:	84 e6       	ldi	r24, 0x64	; 100
    175e:	9a e0       	ldi	r25, 0x0A	; 10
    1760:	84 d0       	rcall	.+264    	; 0x186a <setServo>
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <main+0x10e>
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	69 f4       	brne	.+26     	; 0x1782 <main+0x10e>
    1768:	f8 01       	movw	r30, r16
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	b5 01       	movw	r22, r10
    1770:	37 d8       	rcall	.-3986   	; 0x7e0 <FLC_obstacle>
    1772:	82 2d       	mov	r24, r2
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	96 01       	movw	r18, r12
    1778:	a7 01       	movw	r20, r14
    177a:	b4 01       	movw	r22, r8
    177c:	8d 57       	subi	r24, 0x7D	; 125
    177e:	91 09       	sbc	r25, r1
    1780:	06 df       	rcall	.-500    	; 0x158e <intersection>
    1782:	78 94       	sei
    1784:	f3 01       	movw	r30, r6
    1786:	c0 80       	ld	r12, Z
    1788:	d1 80       	ldd	r13, Z+1	; 0x01
    178a:	f8 01       	movw	r30, r16
    178c:	e0 80       	ld	r14, Z
    178e:	f1 80       	ldd	r15, Z+1	; 0x01
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	45 d1       	rcall	.+650    	; 0x1a1e <spi_send_byte>
    1794:	8c 2d       	mov	r24, r12
    1796:	43 d1       	rcall	.+646    	; 0x1a1e <spi_send_byte>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	41 d1       	rcall	.+642    	; 0x1a1e <spi_send_byte>
    179c:	8e 2d       	mov	r24, r14
    179e:	3f d1       	rcall	.+638    	; 0x1a1e <spi_send_byte>
    17a0:	87 cf       	rjmp	.-242    	; 0x16b0 <main+0x3c>

000017a2 <pwmInit>:
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	8a b9       	out	0x0a, r24	; 10
    17a6:	82 ea       	ldi	r24, 0xA2	; 162
    17a8:	80 93 80 00 	sts	0x0080, r24
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f e8       	ldi	r25, 0x8F	; 143
    17b0:	90 93 87 00 	sts	0x0087, r25
    17b4:	80 93 86 00 	sts	0x0086, r24
    17b8:	8a e1       	ldi	r24, 0x1A	; 26
    17ba:	80 93 81 00 	sts	0x0081, r24
    17be:	08 95       	ret

000017c0 <setESC>:
    17c0:	80 36       	cpi	r24, 0x60	; 96
    17c2:	2a e0       	ldi	r18, 0x0A	; 10
    17c4:	92 07       	cpc	r25, r18
    17c6:	3c f4       	brge	.+14     	; 0x17d6 <setESC+0x16>
    17c8:	8f e5       	ldi	r24, 0x5F	; 95
    17ca:	9a e0       	ldi	r25, 0x0A	; 10
    17cc:	90 93 89 00 	sts	0x0089, r25
    17d0:	80 93 88 00 	sts	0x0088, r24
    17d4:	08 95       	ret
    17d6:	82 32       	cpi	r24, 0x22	; 34
    17d8:	2b e0       	ldi	r18, 0x0B	; 11
    17da:	92 07       	cpc	r25, r18
    17dc:	24 f1       	brlt	.+72     	; 0x1826 <setESC+0x66>
    17de:	e8 e8       	ldi	r30, 0x88	; 136
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	40 91 00 01 	lds	r20, 0x0100
    17ea:	50 91 01 01 	lds	r21, 0x0101
    17ee:	82 e2       	ldi	r24, 0x22	; 34
    17f0:	9b e0       	ldi	r25, 0x0B	; 11
    17f2:	48 9f       	mul	r20, r24
    17f4:	90 01       	movw	r18, r0
    17f6:	49 9f       	mul	r20, r25
    17f8:	30 0d       	add	r19, r0
    17fa:	58 9f       	mul	r21, r24
    17fc:	30 0d       	add	r19, r0
    17fe:	11 24       	eor	r1, r1
    1800:	40 91 02 01 	lds	r20, 0x0102
    1804:	50 91 03 01 	lds	r21, 0x0103
    1808:	64 9f       	mul	r22, r20
    180a:	c0 01       	movw	r24, r0
    180c:	65 9f       	mul	r22, r21
    180e:	90 0d       	add	r25, r0
    1810:	74 9f       	mul	r23, r20
    1812:	90 0d       	add	r25, r0
    1814:	11 24       	eor	r1, r1
    1816:	82 0f       	add	r24, r18
    1818:	93 1f       	adc	r25, r19
    181a:	6a e0       	ldi	r22, 0x0A	; 10
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	af d5       	rcall	.+2910   	; 0x237e <__divmodhi4>
    1820:	71 83       	std	Z+1, r23	; 0x01
    1822:	60 83       	st	Z, r22
    1824:	08 95       	ret
    1826:	e8 e8       	ldi	r30, 0x88	; 136
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	40 91 00 01 	lds	r20, 0x0100
    1832:	50 91 01 01 	lds	r21, 0x0101
    1836:	84 9f       	mul	r24, r20
    1838:	90 01       	movw	r18, r0
    183a:	85 9f       	mul	r24, r21
    183c:	30 0d       	add	r19, r0
    183e:	94 9f       	mul	r25, r20
    1840:	30 0d       	add	r19, r0
    1842:	11 24       	eor	r1, r1
    1844:	40 91 02 01 	lds	r20, 0x0102
    1848:	50 91 03 01 	lds	r21, 0x0103
    184c:	64 9f       	mul	r22, r20
    184e:	c0 01       	movw	r24, r0
    1850:	65 9f       	mul	r22, r21
    1852:	90 0d       	add	r25, r0
    1854:	74 9f       	mul	r23, r20
    1856:	90 0d       	add	r25, r0
    1858:	11 24       	eor	r1, r1
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	6a e0       	ldi	r22, 0x0A	; 10
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	8d d5       	rcall	.+2842   	; 0x237e <__divmodhi4>
    1864:	71 83       	std	Z+1, r23	; 0x01
    1866:	60 83       	st	Z, r22
    1868:	08 95       	ret

0000186a <setServo>:
    186a:	84 3e       	cpi	r24, 0xE4	; 228
    186c:	2c e0       	ldi	r18, 0x0C	; 12
    186e:	92 07       	cpc	r25, r18
    1870:	3c f0       	brlt	.+14     	; 0x1880 <setServo+0x16>
    1872:	84 ee       	ldi	r24, 0xE4	; 228
    1874:	9c e0       	ldi	r25, 0x0C	; 12
    1876:	90 93 8b 00 	sts	0x008B, r25
    187a:	80 93 8a 00 	sts	0x008A, r24
    187e:	08 95       	ret
    1880:	87 3e       	cpi	r24, 0xE7	; 231
    1882:	27 e0       	ldi	r18, 0x07	; 7
    1884:	92 07       	cpc	r25, r18
    1886:	3c f4       	brge	.+14     	; 0x1896 <setServo+0x2c>
    1888:	86 ee       	ldi	r24, 0xE6	; 230
    188a:	97 e0       	ldi	r25, 0x07	; 7
    188c:	90 93 8b 00 	sts	0x008B, r25
    1890:	80 93 8a 00 	sts	0x008A, r24
    1894:	08 95       	ret
    1896:	ea e8       	ldi	r30, 0x8A	; 138
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	40 91 00 01 	lds	r20, 0x0100
    18a2:	50 91 01 01 	lds	r21, 0x0101
    18a6:	84 9f       	mul	r24, r20
    18a8:	90 01       	movw	r18, r0
    18aa:	85 9f       	mul	r24, r21
    18ac:	30 0d       	add	r19, r0
    18ae:	94 9f       	mul	r25, r20
    18b0:	30 0d       	add	r19, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	40 91 02 01 	lds	r20, 0x0102
    18b8:	50 91 03 01 	lds	r21, 0x0103
    18bc:	64 9f       	mul	r22, r20
    18be:	c0 01       	movw	r24, r0
    18c0:	65 9f       	mul	r22, r21
    18c2:	90 0d       	add	r25, r0
    18c4:	74 9f       	mul	r23, r20
    18c6:	90 0d       	add	r25, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	6a e0       	ldi	r22, 0x0A	; 10
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	55 d5       	rcall	.+2730   	; 0x237e <__divmodhi4>
    18d4:	71 83       	std	Z+1, r23	; 0x01
    18d6:	60 83       	st	Z, r22
    18d8:	08 95       	ret

000018da <spi_get_byte>:
    18da:	f8 94       	cli
    18dc:	20 91 68 02 	lds	r18, 0x0268
    18e0:	30 91 69 02 	lds	r19, 0x0269
    18e4:	21 15       	cp	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	a9 f0       	breq	.+42     	; 0x1914 <spi_get_byte+0x3a>
    18ea:	e4 e6       	ldi	r30, 0x64	; 100
    18ec:	f2 e0       	ldi	r31, 0x02	; 2
    18ee:	40 81       	ld	r20, Z
    18f0:	51 81       	ldd	r21, Z+1	; 0x01
    18f2:	da 01       	movw	r26, r20
    18f4:	ac 5d       	subi	r26, 0xDC	; 220
    18f6:	bd 4f       	sbci	r27, 0xFD	; 253
    18f8:	8c 91       	ld	r24, X
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	51 83       	std	Z+1, r21	; 0x01
    1900:	40 83       	st	Z, r20
    1902:	21 50       	subi	r18, 0x01	; 1
    1904:	31 09       	sbc	r19, r1
    1906:	30 93 69 02 	sts	0x0269, r19
    190a:	20 93 68 02 	sts	0x0268, r18
    190e:	23 2b       	or	r18, r19
    1910:	21 f4       	brne	.+8      	; 0x191a <spi_get_byte+0x40>
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <spi_get_byte+0x3c>
    1914:	8e ef       	ldi	r24, 0xFE	; 254
    1916:	10 92 dc 01 	sts	0x01DC, r1
    191a:	20 91 64 02 	lds	r18, 0x0264
    191e:	30 91 65 02 	lds	r19, 0x0265
    1922:	20 34       	cpi	r18, 0x40	; 64
    1924:	31 05       	cpc	r19, r1
    1926:	21 f4       	brne	.+8      	; 0x1930 <spi_get_byte+0x56>
    1928:	10 92 65 02 	sts	0x0265, r1
    192c:	10 92 64 02 	sts	0x0264, r1
    1930:	78 94       	sei
    1932:	08 95       	ret

00001934 <__vector_19>:
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	0b b6       	in	r0, 0x3b	; 59
    1940:	0f 92       	push	r0
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	8f 93       	push	r24
    1948:	9f 93       	push	r25
    194a:	af 93       	push	r26
    194c:	bf 93       	push	r27
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
    1952:	10 98       	cbi	0x02, 0	; 2
    1954:	2e b5       	in	r18, 0x2e	; 46
    1956:	2d 3f       	cpi	r18, 0xFD	; 253
    1958:	a9 f0       	breq	.+42     	; 0x1984 <__vector_19+0x50>
    195a:	e6 e6       	ldi	r30, 0x66	; 102
    195c:	f2 e0       	ldi	r31, 0x02	; 2
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	dc 01       	movw	r26, r24
    1964:	ac 5d       	subi	r26, 0xDC	; 220
    1966:	bd 4f       	sbci	r27, 0xFD	; 253
    1968:	2c 93       	st	X, r18
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	e8 e6       	ldi	r30, 0x68	; 104
    1972:	f2 e0       	ldi	r31, 0x02	; 2
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	80 93 dc 01 	sts	0x01DC, r24
    1984:	80 91 66 02 	lds	r24, 0x0266
    1988:	90 91 67 02 	lds	r25, 0x0267
    198c:	80 34       	cpi	r24, 0x40	; 64
    198e:	91 05       	cpc	r25, r1
    1990:	21 f4       	brne	.+8      	; 0x199a <__vector_19+0x66>
    1992:	10 92 67 02 	sts	0x0267, r1
    1996:	10 92 66 02 	sts	0x0266, r1
    199a:	80 91 22 02 	lds	r24, 0x0222
    199e:	90 91 23 02 	lds	r25, 0x0223
    19a2:	89 2b       	or	r24, r25
    19a4:	01 f1       	breq	.+64     	; 0x19e6 <__vector_19+0xb2>
    19a6:	e0 91 1e 02 	lds	r30, 0x021E
    19aa:	f0 91 1f 02 	lds	r31, 0x021F
    19ae:	e2 52       	subi	r30, 0x22	; 34
    19b0:	fe 4f       	sbci	r31, 0xFE	; 254
    19b2:	80 81       	ld	r24, Z
    19b4:	8e bd       	out	0x2e, r24	; 46
    19b6:	ee e1       	ldi	r30, 0x1E	; 30
    19b8:	f2 e0       	ldi	r31, 0x02	; 2
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	80 83       	st	Z, r24
    19c4:	e2 e2       	ldi	r30, 0x22	; 34
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	20 81       	ld	r18, Z
    19ca:	31 81       	ldd	r19, Z+1	; 0x01
    19cc:	21 50       	subi	r18, 0x01	; 1
    19ce:	31 09       	sbc	r19, r1
    19d0:	31 83       	std	Z+1, r19	; 0x01
    19d2:	20 83       	st	Z, r18
    19d4:	10 9a       	sbi	0x02, 0	; 2
    19d6:	80 34       	cpi	r24, 0x40	; 64
    19d8:	91 05       	cpc	r25, r1
    19da:	49 f4       	brne	.+18     	; 0x19ee <__vector_19+0xba>
    19dc:	10 92 1f 02 	sts	0x021F, r1
    19e0:	10 92 1e 02 	sts	0x021E, r1
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <__vector_19+0xba>
    19e6:	8d ef       	ldi	r24, 0xFD	; 253
    19e8:	8e bd       	out	0x2e, r24	; 46
    19ea:	10 92 dd 01 	sts	0x01DD, r1
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	3f 91       	pop	r19
    19fc:	2f 91       	pop	r18
    19fe:	0f 90       	pop	r0
    1a00:	0b be       	out	0x3b, r0	; 59
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <spi_slave_init>:
    1a0c:	80 e4       	ldi	r24, 0x40	; 64
    1a0e:	84 b9       	out	0x04, r24	; 4
    1a10:	80 ec       	ldi	r24, 0xC0	; 192
    1a12:	8c bd       	out	0x2c, r24	; 44
    1a14:	08 9a       	sbi	0x01, 0	; 1
    1a16:	10 98       	cbi	0x02, 0	; 2
    1a18:	8d ef       	ldi	r24, 0xFD	; 253
    1a1a:	8e bd       	out	0x2e, r24	; 46
    1a1c:	08 95       	ret

00001a1e <spi_send_byte>:
    1a1e:	f8 94       	cli
    1a20:	20 91 22 02 	lds	r18, 0x0222
    1a24:	30 91 23 02 	lds	r19, 0x0223
    1a28:	20 34       	cpi	r18, 0x40	; 64
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	90 f4       	brcc	.+36     	; 0x1a52 <spi_send_byte+0x34>
    1a2e:	e0 e2       	ldi	r30, 0x20	; 32
    1a30:	f2 e0       	ldi	r31, 0x02	; 2
    1a32:	40 81       	ld	r20, Z
    1a34:	51 81       	ldd	r21, Z+1	; 0x01
    1a36:	da 01       	movw	r26, r20
    1a38:	a2 52       	subi	r26, 0x22	; 34
    1a3a:	be 4f       	sbci	r27, 0xFE	; 254
    1a3c:	8c 93       	st	X, r24
    1a3e:	4f 5f       	subi	r20, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255
    1a42:	51 83       	std	Z+1, r21	; 0x01
    1a44:	40 83       	st	Z, r20
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	30 93 23 02 	sts	0x0223, r19
    1a4e:	20 93 22 02 	sts	0x0222, r18
    1a52:	80 91 20 02 	lds	r24, 0x0220
    1a56:	90 91 21 02 	lds	r25, 0x0221
    1a5a:	80 34       	cpi	r24, 0x40	; 64
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <spi_send_byte+0x4a>
    1a60:	10 92 21 02 	sts	0x0221, r1
    1a64:	10 92 20 02 	sts	0x0220, r1
    1a68:	80 91 22 02 	lds	r24, 0x0222
    1a6c:	90 91 23 02 	lds	r25, 0x0223
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f4       	brne	.+60     	; 0x1ab0 <spi_send_byte+0x92>
    1a74:	80 91 dd 01 	lds	r24, 0x01DD
    1a78:	81 11       	cpse	r24, r1
    1a7a:	1a c0       	rjmp	.+52     	; 0x1ab0 <spi_send_byte+0x92>
    1a7c:	e0 91 1e 02 	lds	r30, 0x021E
    1a80:	f0 91 1f 02 	lds	r31, 0x021F
    1a84:	e2 52       	subi	r30, 0x22	; 34
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	80 81       	ld	r24, Z
    1a8a:	8e bd       	out	0x2e, r24	; 46
    1a8c:	ee e1       	ldi	r30, 0x1E	; 30
    1a8e:	f2 e0       	ldi	r31, 0x02	; 2
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
    1a9a:	e2 e2       	ldi	r30, 0x22	; 34
    1a9c:	f2 e0       	ldi	r31, 0x02	; 2
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	10 9a       	sbi	0x02, 0	; 2
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 dd 01 	sts	0x01DD, r24
    1ab0:	80 91 1e 02 	lds	r24, 0x021E
    1ab4:	90 91 1f 02 	lds	r25, 0x021F
    1ab8:	80 34       	cpi	r24, 0x40	; 64
    1aba:	91 05       	cpc	r25, r1
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <spi_send_byte+0xa8>
    1abe:	10 92 1f 02 	sts	0x021F, r1
    1ac2:	10 92 1e 02 	sts	0x021E, r1
    1ac6:	78 94       	sei
    1ac8:	08 95       	ret

00001aca <is_package_recieved>:
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	20 91 68 02 	lds	r18, 0x0268
    1ad0:	30 91 69 02 	lds	r19, 0x0269
    1ad4:	2b 30       	cpi	r18, 0x0B	; 11
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <is_package_recieved+0x12>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	08 95       	ret

00001ade <read_sensor_info>:
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	eb 01       	movw	r28, r22
    1aea:	20 91 68 02 	lds	r18, 0x0268
    1aee:	30 91 69 02 	lds	r19, 0x0269
    1af2:	23 2b       	or	r18, r19
    1af4:	69 f1       	breq	.+90     	; 0x1b50 <read_sensor_info+0x72>
    1af6:	e0 91 64 02 	lds	r30, 0x0264
    1afa:	f0 91 65 02 	lds	r31, 0x0265
    1afe:	ec 5d       	subi	r30, 0xDC	; 220
    1b00:	fd 4f       	sbci	r31, 0xFD	; 253
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 3f       	cpi	r24, 0xFF	; 255
    1b06:	e1 f4       	brne	.+56     	; 0x1b40 <read_sensor_info+0x62>
    1b08:	e0 df       	rcall	.-64     	; 0x1aca <is_package_recieved>
    1b0a:	88 23       	and	r24, r24
    1b0c:	11 f1       	breq	.+68     	; 0x1b52 <read_sensor_info+0x74>
    1b0e:	e5 de       	rcall	.-566    	; 0x18da <spi_get_byte>
    1b10:	e4 de       	rcall	.-568    	; 0x18da <spi_get_byte>
    1b12:	f8 01       	movw	r30, r16
    1b14:	80 83       	st	Z, r24
    1b16:	e1 de       	rcall	.-574    	; 0x18da <spi_get_byte>
    1b18:	88 83       	st	Y, r24
    1b1a:	df de       	rcall	.-578    	; 0x18da <spi_get_byte>
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	dd de       	rcall	.-582    	; 0x18da <spi_get_byte>
    1b20:	8a 83       	std	Y+2, r24	; 0x02
    1b22:	db de       	rcall	.-586    	; 0x18da <spi_get_byte>
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	d9 de       	rcall	.-590    	; 0x18da <spi_get_byte>
    1b28:	8c 83       	std	Y+4, r24	; 0x04
    1b2a:	d7 de       	rcall	.-594    	; 0x18da <spi_get_byte>
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	8d e6       	ldi	r24, 0x6D	; 109
    1b30:	9c e0       	ldi	r25, 0x0C	; 12
    1b32:	8f 83       	std	Y+7, r24	; 0x07
    1b34:	d2 de       	rcall	.-604    	; 0x18da <spi_get_byte>
    1b36:	89 87       	std	Y+9, r24	; 0x09
    1b38:	d0 de       	rcall	.-608    	; 0x18da <spi_get_byte>
    1b3a:	88 87       	std	Y+8, r24	; 0x08
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <read_sensor_info+0x74>
    1b40:	c4 df       	rcall	.-120    	; 0x1aca <is_package_recieved>
    1b42:	88 23       	and	r24, r24
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <read_sensor_info+0x74>
    1b46:	c9 de       	rcall	.-622    	; 0x18da <spi_get_byte>
    1b48:	be 01       	movw	r22, r28
    1b4a:	c8 01       	movw	r24, r16
    1b4c:	c8 df       	rcall	.-112    	; 0x1ade <read_sensor_info>
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <read_sensor_info+0x74>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <stop>:




void stop(int k_value)
{
    1b5c:	4f 92       	push	r4
    1b5e:	5f 92       	push	r5
    1b60:	6f 92       	push	r6
    1b62:	7f 92       	push	r7
    1b64:	8f 92       	push	r8
    1b66:	9f 92       	push	r9
    1b68:	af 92       	push	r10
    1b6a:	bf 92       	push	r11
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	ce 5c       	subi	r28, 0xCE	; 206
    1b82:	d1 09       	sbc	r29, r1
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61

	
	// DECLARATION OF GYRO INPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type orientation; strcpy(orientation.name, "orientatio");
    1b8e:	2b e0       	ldi	r18, 0x0B	; 11
    1b90:	eb eb       	ldi	r30, 0xBB	; 187
    1b92:	f1 e0       	ldi	r31, 0x01	; 1
    1b94:	de 01       	movw	r26, r28
    1b96:	11 96       	adiw	r26, 0x01	; 1
    1b98:	01 90       	ld	r0, Z+
    1b9a:	0d 92       	st	X+, r0
    1b9c:	2a 95       	dec	r18
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <stop+0x3c>
	
	if (k_value < -20)
    1ba0:	8c 3e       	cpi	r24, 0xEC	; 236
    1ba2:	2f ef       	ldi	r18, 0xFF	; 255
    1ba4:	92 07       	cpc	r25, r18
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <stop+0x56>
	{
		orientation.value = -20;
    1ba8:	8c ee       	ldi	r24, 0xEC	; 236
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	9c 87       	std	Y+12, r25	; 0x0c
    1bae:	8b 87       	std	Y+11, r24	; 0x0b
    1bb0:	0a c0       	rjmp	.+20     	; 0x1bc6 <stop+0x6a>
	}
	else if (k_value > 20)
    1bb2:	85 31       	cpi	r24, 0x15	; 21
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	2c f0       	brlt	.+10     	; 0x1bc2 <stop+0x66>
	{
		orientation.value = 20;
    1bb8:	84 e1       	ldi	r24, 0x14	; 20
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 87       	std	Y+12, r25	; 0x0c
    1bbe:	8b 87       	std	Y+11, r24	; 0x0b
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <stop+0x6a>
	}
	else
	{
		orientation.value = k_value;
    1bc2:	9c 87       	std	Y+12, r25	; 0x0c
    1bc4:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Set MFs
	struct mf_type off_right;
	MATLAB_MF(&off_right, "off_right", -21, -20, -20, -5);
    1bc6:	5e 01       	movw	r10, r28
    1bc8:	81 e1       	ldi	r24, 0x11	; 17
    1bca:	a8 0e       	add	r10, r24
    1bcc:	b1 1c       	adc	r11, r1
    1bce:	0f 2e       	mov	r0, r31
    1bd0:	fb ef       	ldi	r31, 0xFB	; 251
    1bd2:	ef 2e       	mov	r14, r31
    1bd4:	ff 24       	eor	r15, r15
    1bd6:	fa 94       	dec	r15
    1bd8:	f0 2d       	mov	r31, r0
    1bda:	0c ee       	ldi	r16, 0xEC	; 236
    1bdc:	1f ef       	ldi	r17, 0xFF	; 255
    1bde:	2c ee       	ldi	r18, 0xEC	; 236
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4b ee       	ldi	r20, 0xEB	; 235
    1be4:	5f ef       	ldi	r21, 0xFF	; 255
    1be6:	66 ec       	ldi	r22, 0xC6	; 198
    1be8:	71 e0       	ldi	r23, 0x01	; 1
    1bea:	c5 01       	movw	r24, r10
    1bec:	d3 d9       	rcall	.-3162   	; 0xf94 <MATLAB_MF>
	struct mf_type middle;
	MATLAB_MF(&middle, "middle", -10, 0, 0, 10);
    1bee:	6e 01       	movw	r12, r28
    1bf0:	e7 e2       	ldi	r30, 0x27	; 39
    1bf2:	ce 0e       	add	r12, r30
    1bf4:	d1 1c       	adc	r13, r1
    1bf6:	0f 2e       	mov	r0, r31
    1bf8:	fa e0       	ldi	r31, 0x0A	; 10
    1bfa:	ef 2e       	mov	r14, r31
    1bfc:	f1 2c       	mov	r15, r1
    1bfe:	f0 2d       	mov	r31, r0
    1c00:	00 e0       	ldi	r16, 0x00	; 0
    1c02:	10 e0       	ldi	r17, 0x00	; 0
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	46 ef       	ldi	r20, 0xF6	; 246
    1c0a:	5f ef       	ldi	r21, 0xFF	; 255
    1c0c:	6a ea       	ldi	r22, 0xAA	; 170
    1c0e:	71 e0       	ldi	r23, 0x01	; 1
    1c10:	c6 01       	movw	r24, r12
    1c12:	c0 d9       	rcall	.-3200   	; 0xf94 <MATLAB_MF>
	struct mf_type off_left;
	MATLAB_MF(&off_left, "off_left", 5, 20, 20, 21);
    1c14:	2e 01       	movw	r4, r28
    1c16:	fd e3       	ldi	r31, 0x3D	; 61
    1c18:	4f 0e       	add	r4, r31
    1c1a:	51 1c       	adc	r5, r1
    1c1c:	0f 2e       	mov	r0, r31
    1c1e:	f5 e1       	ldi	r31, 0x15	; 21
    1c20:	ef 2e       	mov	r14, r31
    1c22:	f1 2c       	mov	r15, r1
    1c24:	f0 2d       	mov	r31, r0
    1c26:	04 e1       	ldi	r16, 0x14	; 20
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	24 e1       	ldi	r18, 0x14	; 20
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	45 e0       	ldi	r20, 0x05	; 5
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	60 ed       	ldi	r22, 0xD0	; 208
    1c34:	71 e0       	ldi	r23, 0x01	; 1
    1c36:	c2 01       	movw	r24, r4
    1c38:	ad d9       	rcall	.-3238   	; 0xf94 <MATLAB_MF>

	// Linked list for MFs
	orientation.membership_functions = &off_right;
    1c3a:	be 86       	std	Y+14, r11	; 0x0e
    1c3c:	ad 86       	std	Y+13, r10	; 0x0d
	off_right.next = &middle;
    1c3e:	de a2       	std	Y+38, r13	; 0x26
    1c40:	cd a2       	std	Y+37, r12	; 0x25
	middle.next = &off_left;
    1c42:	5c ae       	std	Y+60, r5	; 0x3c
    1c44:	4b ae       	std	Y+59, r4	; 0x3b
	off_left.next = NULL;
    1c46:	63 96       	adiw	r28, 0x13	; 19
    1c48:	1f ae       	std	Y+63, r1	; 0x3f
    1c4a:	1e ae       	std	Y+62, r1	; 0x3e
    1c4c:	63 97       	sbiw	r28, 0x13	; 19
	
	
	// DECLARATION OF SERVO OUTPUT VARIABLE
	//////////////////////////////////////////////////////////////////////////////
	
	struct io_type servo; strcpy(servo.name, "servo");
    1c4e:	6e 01       	movw	r12, r28
    1c50:	23 e5       	ldi	r18, 0x53	; 83
    1c52:	c2 0e       	add	r12, r18
    1c54:	d1 1c       	adc	r13, r1
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	e5 eb       	ldi	r30, 0xB5	; 181
    1c5a:	f1 e0       	ldi	r31, 0x01	; 1
    1c5c:	d6 01       	movw	r26, r12
    1c5e:	01 90       	ld	r0, Z+
    1c60:	0d 92       	st	X+, r0
    1c62:	8a 95       	dec	r24
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <stop+0x102>
	
	// Set MFs
	struct mf_type straight;
	MATLAB_MF(&straight, "straight", 2600, 2660, 2660, 2720);
    1c66:	3e 01       	movw	r6, r28
    1c68:	83 e6       	ldi	r24, 0x63	; 99
    1c6a:	68 0e       	add	r6, r24
    1c6c:	71 1c       	adc	r7, r1
    1c6e:	0f 2e       	mov	r0, r31
    1c70:	f0 ea       	ldi	r31, 0xA0	; 160
    1c72:	ef 2e       	mov	r14, r31
    1c74:	fa e0       	ldi	r31, 0x0A	; 10
    1c76:	ff 2e       	mov	r15, r31
    1c78:	f0 2d       	mov	r31, r0
    1c7a:	04 e6       	ldi	r16, 0x64	; 100
    1c7c:	1a e0       	ldi	r17, 0x0A	; 10
    1c7e:	24 e6       	ldi	r18, 0x64	; 100
    1c80:	3a e0       	ldi	r19, 0x0A	; 10
    1c82:	48 e2       	ldi	r20, 0x28	; 40
    1c84:	5a e0       	ldi	r21, 0x0A	; 10
    1c86:	67 e5       	ldi	r22, 0x57	; 87
    1c88:	71 e0       	ldi	r23, 0x01	; 1
    1c8a:	c3 01       	movw	r24, r6
    1c8c:	83 d9       	rcall	.-3322   	; 0xf94 <MATLAB_MF>
	struct mf_type right;
	MATLAB_MF(&right, "right", 2800, 2820, 2820, 2840);
    1c8e:	5e 01       	movw	r10, r28
    1c90:	e9 e7       	ldi	r30, 0x79	; 121
    1c92:	ae 0e       	add	r10, r30
    1c94:	b1 1c       	adc	r11, r1
    1c96:	0f 2e       	mov	r0, r31
    1c98:	f8 e1       	ldi	r31, 0x18	; 24
    1c9a:	ef 2e       	mov	r14, r31
    1c9c:	fb e0       	ldi	r31, 0x0B	; 11
    1c9e:	ff 2e       	mov	r15, r31
    1ca0:	f0 2d       	mov	r31, r0
    1ca2:	04 e0       	ldi	r16, 0x04	; 4
    1ca4:	1b e0       	ldi	r17, 0x0B	; 11
    1ca6:	24 e0       	ldi	r18, 0x04	; 4
    1ca8:	3b e0       	ldi	r19, 0x0B	; 11
    1caa:	40 ef       	ldi	r20, 0xF0	; 240
    1cac:	5a e0       	ldi	r21, 0x0A	; 10
    1cae:	6a ec       	ldi	r22, 0xCA	; 202
    1cb0:	71 e0       	ldi	r23, 0x01	; 1
    1cb2:	c5 01       	movw	r24, r10
    1cb4:	6f d9       	rcall	.-3362   	; 0xf94 <MATLAB_MF>
	struct mf_type left;
	MATLAB_MF(&left, "left", 2480, 2500, 2500, 2520);
    1cb6:	4e 01       	movw	r8, r28
    1cb8:	ff e8       	ldi	r31, 0x8F	; 143
    1cba:	8f 0e       	add	r8, r31
    1cbc:	91 1c       	adc	r9, r1
    1cbe:	0f 2e       	mov	r0, r31
    1cc0:	f8 ed       	ldi	r31, 0xD8	; 216
    1cc2:	ef 2e       	mov	r14, r31
    1cc4:	f9 e0       	ldi	r31, 0x09	; 9
    1cc6:	ff 2e       	mov	r15, r31
    1cc8:	f0 2d       	mov	r31, r0
    1cca:	04 ec       	ldi	r16, 0xC4	; 196
    1ccc:	19 e0       	ldi	r17, 0x09	; 9
    1cce:	24 ec       	ldi	r18, 0xC4	; 196
    1cd0:	39 e0       	ldi	r19, 0x09	; 9
    1cd2:	40 eb       	ldi	r20, 0xB0	; 176
    1cd4:	59 e0       	ldi	r21, 0x09	; 9
    1cd6:	64 ed       	ldi	r22, 0xD4	; 212
    1cd8:	71 e0       	ldi	r23, 0x01	; 1
    1cda:	c4 01       	movw	r24, r8
    1cdc:	5b d9       	rcall	.-3402   	; 0xf94 <MATLAB_MF>

	// Linked list for MFs
	servo.membership_functions = &straight;
    1cde:	f6 01       	movw	r30, r12
    1ce0:	75 86       	std	Z+13, r7	; 0x0d
    1ce2:	64 86       	std	Z+12, r6	; 0x0c
	straight.next = &left;
    1ce4:	f3 01       	movw	r30, r6
    1ce6:	95 8a       	std	Z+21, r9	; 0x15
    1ce8:	84 8a       	std	Z+20, r8	; 0x14
	left.next = &right;
    1cea:	f4 01       	movw	r30, r8
    1cec:	b5 8a       	std	Z+21, r11	; 0x15
    1cee:	a4 8a       	std	Z+20, r10	; 0x14
	right.next = NULL;
    1cf0:	f5 01       	movw	r30, r10
    1cf2:	15 8a       	std	Z+21, r1	; 0x15
    1cf4:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// SETTING I/O LINKED LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	System_Inputs = &orientation;
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	90 93 f9 02 	sts	0x02F9, r25
    1cfe:	80 93 f8 02 	sts	0x02F8, r24
	orientation.next = NULL;
    1d02:	18 8a       	std	Y+16, r1	; 0x10
    1d04:	1f 86       	std	Y+15, r1	; 0x0f
	
	System_Outputs = &servo;
    1d06:	d0 92 f7 02 	sts	0x02F7, r13
    1d0a:	c0 92 f6 02 	sts	0x02F6, r12
	servo.next = NULL;
    1d0e:	f6 01       	movw	r30, r12
    1d10:	17 86       	std	Z+15, r1	; 0x0f
    1d12:	16 86       	std	Z+14, r1	; 0x0e
	
	
	// DECLARATION OF RULES AND LISTS
	//////////////////////////////////////////////////////////////////////////////
	
	struct rule_type rule1; Rule_Base = &rule1;
    1d14:	8c 55       	subi	r24, 0x5C	; 92
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	90 93 fb 02 	sts	0x02FB, r25
    1d1c:	80 93 fa 02 	sts	0x02FA, r24
	struct rule_type rule2; rule1.next = &rule2;
    1d20:	de 01       	movw	r26, r28
    1d22:	a5 55       	subi	r26, 0x55	; 85
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fc 01       	movw	r30, r24
    1d28:	b5 83       	std	Z+5, r27	; 0x05
    1d2a:	a4 83       	std	Z+4, r26	; 0x04
	struct rule_type rule3; rule2.next = &rule3; rule3.next = NULL;
    1d2c:	be 01       	movw	r22, r28
    1d2e:	6f 54       	subi	r22, 0x4F	; 79
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	15 96       	adiw	r26, 0x05	; 5
    1d34:	7c 93       	st	X, r23
    1d36:	6e 93       	st	-X, r22
    1d38:	14 97       	sbiw	r26, 0x04	; 4
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	15 82       	std	Z+5, r1	; 0x05
    1d3e:	14 82       	std	Z+4, r1	; 0x04
	// RULE SETUP
	//////////////////////////////////////////////////////////////////////////////
	
	// if gyro is start then servo is noSpeed
	struct rule_element_type if11, then1;
	rule1.if_side = &if11; if11.next = NULL; rule1.then_side = &then1; then1.next = NULL;
    1d40:	ae 01       	movw	r20, r28
    1d42:	49 54       	subi	r20, 0x49	; 73
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	fc 01       	movw	r30, r24
    1d48:	51 83       	std	Z+1, r21	; 0x01
    1d4a:	40 83       	st	Z, r20
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	13 82       	std	Z+3, r1	; 0x03
    1d50:	12 82       	std	Z+2, r1	; 0x02
    1d52:	9e 01       	movw	r18, r28
    1d54:	25 54       	subi	r18, 0x45	; 69
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	fc 01       	movw	r30, r24
    1d5a:	33 83       	std	Z+3, r19	; 0x03
    1d5c:	22 83       	std	Z+2, r18	; 0x02
    1d5e:	f9 01       	movw	r30, r18
    1d60:	13 82       	std	Z+3, r1	; 0x03
    1d62:	12 82       	std	Z+2, r1	; 0x02
	if11.value = &middle.value; then1.value = &straight.value;
    1d64:	84 57       	subi	r24, 0x74	; 116
    1d66:	91 09       	sbc	r25, r1
    1d68:	fa 01       	movw	r30, r20
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	fa e0       	ldi	r31, 0x0A	; 10
    1d70:	6f 0e       	add	r6, r31
    1d72:	71 1c       	adc	r7, r1
    1d74:	f9 01       	movw	r30, r18
    1d76:	71 82       	std	Z+1, r7	; 0x01
    1d78:	60 82       	st	Z, r6
	
	// if speed is low and distance is oneM then speed is slow    struct rule_element_type if21, if22, then2;
	struct rule_element_type if21, then2;
	rule2.if_side = &if21; if21.next = NULL; rule2.then_side = &then2; then2.next = NULL;
    1d7a:	2c 5f       	subi	r18, 0xFC	; 252
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	3c 93       	st	X, r19
    1d82:	2e 93       	st	-X, r18
    1d84:	f9 01       	movw	r30, r18
    1d86:	13 82       	std	Z+3, r1	; 0x03
    1d88:	12 82       	std	Z+2, r1	; 0x02
    1d8a:	8e 56       	subi	r24, 0x6E	; 110
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	13 96       	adiw	r26, 0x03	; 3
    1d90:	9c 93       	st	X, r25
    1d92:	8e 93       	st	-X, r24
    1d94:	12 97       	sbiw	r26, 0x02	; 2
    1d96:	fc 01       	movw	r30, r24
    1d98:	13 82       	std	Z+3, r1	; 0x03
    1d9a:	12 82       	std	Z+2, r1	; 0x02
	if21.value = &off_right.value; then2.value = &left.value;
    1d9c:	4c 59       	subi	r20, 0x9C	; 156
    1d9e:	51 09       	sbc	r21, r1
    1da0:	f9 01       	movw	r30, r18
    1da2:	51 83       	std	Z+1, r21	; 0x01
    1da4:	40 83       	st	Z, r20
    1da6:	fa e0       	ldi	r31, 0x0A	; 10
    1da8:	8f 0e       	add	r8, r31
    1daa:	91 1c       	adc	r9, r1
    1dac:	fc 01       	movw	r30, r24
    1dae:	91 82       	std	Z+1, r9	; 0x01
    1db0:	80 82       	st	Z, r8
	
	// if speed is medium and distance is oneM then speed is cruise
	struct rule_element_type if31, then3;
	rule3.if_side = &if31; if31.next = NULL; rule3.then_side = &then3; then3.next = NULL;
    1db2:	04 96       	adiw	r24, 0x04	; 4
    1db4:	fb 01       	movw	r30, r22
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	fc 01       	movw	r30, r24
    1dbc:	13 82       	std	Z+3, r1	; 0x03
    1dbe:	12 82       	std	Z+2, r1	; 0x02
    1dc0:	90 96       	adiw	r26, 0x20	; 32
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	b3 83       	std	Z+3, r27	; 0x03
    1dc6:	a2 83       	std	Z+2, r26	; 0x02
    1dc8:	13 96       	adiw	r26, 0x03	; 3
    1dca:	1c 92       	st	X, r1
    1dcc:	1e 92       	st	-X, r1
    1dce:	12 97       	sbiw	r26, 0x02	; 2
	if31.value = &off_left.value; then3.value = &right.value;
    1dd0:	fa e0       	ldi	r31, 0x0A	; 10
    1dd2:	4f 0e       	add	r4, r31
    1dd4:	51 1c       	adc	r5, r1
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	51 82       	std	Z+1, r5	; 0x01
    1dda:	40 82       	st	Z, r4
    1ddc:	fa e0       	ldi	r31, 0x0A	; 10
    1dde:	af 0e       	add	r10, r31
    1de0:	b1 1c       	adc	r11, r1
    1de2:	ad 92       	st	X+, r10
    1de4:	bc 92       	st	X, r11
	
	
	// EXECUTING FUZZY LOGIC & OUTPUT VALUE
	//////////////////////////////////////////////////////////////////////////////
	
	fuzzification();
    1de6:	0e 94 97 06 	call	0xd2e	; 0xd2e <fuzzification>
	rule_evaluation();
    1dea:	0e 94 be 06 	call	0xd7c	; 0xd7c <rule_evaluation>
	defuzzification();
    1dee:	0c d8       	rcall	.-4072   	; 0xe08 <defuzzification>
	if (servo.value > MAXLEFT)
    1df0:	f6 01       	movw	r30, r12
    1df2:	82 85       	ldd	r24, Z+10	; 0x0a
    1df4:	93 85       	ldd	r25, Z+11	; 0x0b
    1df6:	87 3e       	cpi	r24, 0xE7	; 231
    1df8:	f7 e0       	ldi	r31, 0x07	; 7
    1dfa:	9f 07       	cpc	r25, r31
    1dfc:	24 f0       	brlt	.+8      	; 0x1e06 <stop+0x2aa>
	{
		setServo(MAXLEFT);
    1dfe:	86 ee       	ldi	r24, 0xE6	; 230
    1e00:	97 e0       	ldi	r25, 0x07	; 7
    1e02:	33 dd       	rcall	.-1434   	; 0x186a <setServo>
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <stop+0x2bc>
	}
	else if (servo.value < MAXRIGHT)
    1e06:	84 3e       	cpi	r24, 0xE4	; 228
    1e08:	2c e0       	ldi	r18, 0x0C	; 12
    1e0a:	92 07       	cpc	r25, r18
    1e0c:	24 f4       	brge	.+8      	; 0x1e16 <stop+0x2ba>
	{
		setServo(MAXRIGHT);
    1e0e:	84 ee       	ldi	r24, 0xE4	; 228
    1e10:	9c e0       	ldi	r25, 0x0C	; 12
    1e12:	2b dd       	rcall	.-1450   	; 0x186a <setServo>
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <stop+0x2bc>
	}
	else
	{
		setServo(servo.value);
    1e16:	29 dd       	rcall	.-1454   	; 0x186a <setServo>
	}
	
    1e18:	c2 53       	subi	r28, 0x32	; 50
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	9f 90       	pop	r9
    1e3c:	8f 90       	pop	r8
    1e3e:	7f 90       	pop	r7
    1e40:	6f 90       	pop	r6
    1e42:	5f 90       	pop	r5
    1e44:	4f 90       	pop	r4
    1e46:	08 95       	ret

00001e48 <__vector_20>:
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	0b b6       	in	r0, 0x3b	; 59
    1e54:	0f 92       	push	r0
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	80 91 f4 02 	lds	r24, 0x02F4
    1e6c:	90 91 f5 02 	lds	r25, 0x02F5
    1e70:	80 34       	cpi	r24, 0x40	; 64
    1e72:	91 05       	cpc	r25, r1
    1e74:	31 f4       	brne	.+12     	; 0x1e82 <__vector_20+0x3a>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 93 20 03 	sts	0x0320, r24
    1e7c:	80 91 c6 00 	lds	r24, 0x00C6
    1e80:	16 c0       	rjmp	.+44     	; 0x1eae <__vector_20+0x66>
    1e82:	80 34       	cpi	r24, 0x40	; 64
    1e84:	91 05       	cpc	r25, r1
    1e86:	e8 f4       	brcc	.+58     	; 0x1ec2 <__vector_20+0x7a>
    1e88:	e2 ef       	ldi	r30, 0xF2	; 242
    1e8a:	f2 e0       	ldi	r31, 0x02	; 2
    1e8c:	20 81       	ld	r18, Z
    1e8e:	31 81       	ldd	r19, Z+1	; 0x01
    1e90:	40 91 c6 00 	lds	r20, 0x00C6
    1e94:	d9 01       	movw	r26, r18
    1e96:	a0 55       	subi	r26, 0x50	; 80
    1e98:	bd 4f       	sbci	r27, 0xFD	; 253
    1e9a:	4c 93       	st	X, r20
    1e9c:	2f 5f       	subi	r18, 0xFF	; 255
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	90 93 f5 02 	sts	0x02F5, r25
    1eaa:	80 93 f4 02 	sts	0x02F4, r24
    1eae:	80 91 f4 02 	lds	r24, 0x02F4
    1eb2:	90 91 f5 02 	lds	r25, 0x02F5
    1eb6:	80 34       	cpi	r24, 0x40	; 64
    1eb8:	91 05       	cpc	r25, r1
    1eba:	19 f4       	brne	.+6      	; 0x1ec2 <__vector_20+0x7a>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 1e 03 	sts	0x031E, r24
    1ec2:	80 91 f2 02 	lds	r24, 0x02F2
    1ec6:	90 91 f3 02 	lds	r25, 0x02F3
    1eca:	80 34       	cpi	r24, 0x40	; 64
    1ecc:	91 05       	cpc	r25, r1
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <__vector_20+0x90>
    1ed0:	10 92 f3 02 	sts	0x02F3, r1
    1ed4:	10 92 f2 02 	sts	0x02F2, r1
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 1d 03 	sts	0x031D, r24
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0b be       	out	0x3b, r0	; 59
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <__vector_22>:
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	0b b6       	in	r0, 0x3b	; 59
    1f0a:	0f 92       	push	r0
    1f0c:	8f 93       	push	r24
    1f0e:	9f 93       	push	r25
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	80 91 ae 02 	lds	r24, 0x02AE
    1f18:	90 91 af 02 	lds	r25, 0x02AF
    1f1c:	80 34       	cpi	r24, 0x40	; 64
    1f1e:	91 05       	cpc	r25, r1
    1f20:	19 f4       	brne	.+6      	; 0x1f28 <__vector_22+0x2a>
    1f22:	10 92 1c 03 	sts	0x031C, r1
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <__vector_22+0x2e>
    1f28:	89 2b       	or	r24, r25
    1f2a:	b9 f0       	breq	.+46     	; 0x1f5a <__vector_22+0x5c>
    1f2c:	e0 91 aa 02 	lds	r30, 0x02AA
    1f30:	f0 91 ab 02 	lds	r31, 0x02AB
    1f34:	e6 59       	subi	r30, 0x96	; 150
    1f36:	fd 4f       	sbci	r31, 0xFD	; 253
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 93 c6 00 	sts	0x00C6, r24
    1f3e:	ea ea       	ldi	r30, 0xAA	; 170
    1f40:	f2 e0       	ldi	r31, 0x02	; 2
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	ee ea       	ldi	r30, 0xAE	; 174
    1f4e:	f2 e0       	ldi	r31, 0x02	; 2
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	80 91 aa 02 	lds	r24, 0x02AA
    1f5e:	90 91 ab 02 	lds	r25, 0x02AB
    1f62:	80 34       	cpi	r24, 0x40	; 64
    1f64:	91 05       	cpc	r25, r1
    1f66:	21 f4       	brne	.+8      	; 0x1f70 <__vector_22+0x72>
    1f68:	10 92 ab 02 	sts	0x02AB, r1
    1f6c:	10 92 aa 02 	sts	0x02AA, r1
    1f70:	80 91 ae 02 	lds	r24, 0x02AE
    1f74:	90 91 af 02 	lds	r25, 0x02AF
    1f78:	89 2b       	or	r24, r25
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <__vector_22+0x8c>
    1f7c:	10 92 1f 03 	sts	0x031F, r1
    1f80:	e1 ec       	ldi	r30, 0xC1	; 193
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	8f 7b       	andi	r24, 0xBF	; 191
    1f88:	80 83       	st	Z, r24
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	0f 90       	pop	r0
    1f94:	0b be       	out	0x3b, r0	; 59
    1f96:	0f 90       	pop	r0
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	0f 90       	pop	r0
    1f9c:	1f 90       	pop	r1
    1f9e:	18 95       	reti

00001fa0 <__subsf3>:
    1fa0:	50 58       	subi	r21, 0x80	; 128

00001fa2 <__addsf3>:
    1fa2:	bb 27       	eor	r27, r27
    1fa4:	aa 27       	eor	r26, r26
    1fa6:	0e d0       	rcall	.+28     	; 0x1fc4 <__addsf3x>
    1fa8:	4d c1       	rjmp	.+666    	; 0x2244 <__fp_round>
    1faa:	3e d1       	rcall	.+636    	; 0x2228 <__fp_pscA>
    1fac:	30 f0       	brcs	.+12     	; 0x1fba <__addsf3+0x18>
    1fae:	43 d1       	rcall	.+646    	; 0x2236 <__fp_pscB>
    1fb0:	20 f0       	brcs	.+8      	; 0x1fba <__addsf3+0x18>
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <__addsf3+0x1e>
    1fb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <__addsf3+0x1a>
    1fb8:	1e f4       	brtc	.+6      	; 0x1fc0 <__addsf3+0x1e>
    1fba:	33 c1       	rjmp	.+614    	; 0x2222 <__fp_nan>
    1fbc:	0e f4       	brtc	.+2      	; 0x1fc0 <__addsf3+0x1e>
    1fbe:	e0 95       	com	r30
    1fc0:	e7 fb       	bst	r30, 7
    1fc2:	29 c1       	rjmp	.+594    	; 0x2216 <__fp_inf>

00001fc4 <__addsf3x>:
    1fc4:	e9 2f       	mov	r30, r25
    1fc6:	4f d1       	rcall	.+670    	; 0x2266 <__fp_split3>
    1fc8:	80 f3       	brcs	.-32     	; 0x1faa <__addsf3+0x8>
    1fca:	ba 17       	cp	r27, r26
    1fcc:	62 07       	cpc	r22, r18
    1fce:	73 07       	cpc	r23, r19
    1fd0:	84 07       	cpc	r24, r20
    1fd2:	95 07       	cpc	r25, r21
    1fd4:	18 f0       	brcs	.+6      	; 0x1fdc <__addsf3x+0x18>
    1fd6:	71 f4       	brne	.+28     	; 0x1ff4 <__addsf3x+0x30>
    1fd8:	9e f5       	brtc	.+102    	; 0x2040 <__addsf3x+0x7c>
    1fda:	67 c1       	rjmp	.+718    	; 0x22aa <__fp_zero>
    1fdc:	0e f4       	brtc	.+2      	; 0x1fe0 <__addsf3x+0x1c>
    1fde:	e0 95       	com	r30
    1fe0:	0b 2e       	mov	r0, r27
    1fe2:	ba 2f       	mov	r27, r26
    1fe4:	a0 2d       	mov	r26, r0
    1fe6:	0b 01       	movw	r0, r22
    1fe8:	b9 01       	movw	r22, r18
    1fea:	90 01       	movw	r18, r0
    1fec:	0c 01       	movw	r0, r24
    1fee:	ca 01       	movw	r24, r20
    1ff0:	a0 01       	movw	r20, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	ff 27       	eor	r31, r31
    1ff6:	59 1b       	sub	r21, r25
    1ff8:	99 f0       	breq	.+38     	; 0x2020 <__addsf3x+0x5c>
    1ffa:	59 3f       	cpi	r21, 0xF9	; 249
    1ffc:	50 f4       	brcc	.+20     	; 0x2012 <__addsf3x+0x4e>
    1ffe:	50 3e       	cpi	r21, 0xE0	; 224
    2000:	68 f1       	brcs	.+90     	; 0x205c <__addsf3x+0x98>
    2002:	1a 16       	cp	r1, r26
    2004:	f0 40       	sbci	r31, 0x00	; 0
    2006:	a2 2f       	mov	r26, r18
    2008:	23 2f       	mov	r18, r19
    200a:	34 2f       	mov	r19, r20
    200c:	44 27       	eor	r20, r20
    200e:	58 5f       	subi	r21, 0xF8	; 248
    2010:	f3 cf       	rjmp	.-26     	; 0x1ff8 <__addsf3x+0x34>
    2012:	46 95       	lsr	r20
    2014:	37 95       	ror	r19
    2016:	27 95       	ror	r18
    2018:	a7 95       	ror	r26
    201a:	f0 40       	sbci	r31, 0x00	; 0
    201c:	53 95       	inc	r21
    201e:	c9 f7       	brne	.-14     	; 0x2012 <__addsf3x+0x4e>
    2020:	7e f4       	brtc	.+30     	; 0x2040 <__addsf3x+0x7c>
    2022:	1f 16       	cp	r1, r31
    2024:	ba 0b       	sbc	r27, r26
    2026:	62 0b       	sbc	r22, r18
    2028:	73 0b       	sbc	r23, r19
    202a:	84 0b       	sbc	r24, r20
    202c:	ba f0       	brmi	.+46     	; 0x205c <__addsf3x+0x98>
    202e:	91 50       	subi	r25, 0x01	; 1
    2030:	a1 f0       	breq	.+40     	; 0x205a <__addsf3x+0x96>
    2032:	ff 0f       	add	r31, r31
    2034:	bb 1f       	adc	r27, r27
    2036:	66 1f       	adc	r22, r22
    2038:	77 1f       	adc	r23, r23
    203a:	88 1f       	adc	r24, r24
    203c:	c2 f7       	brpl	.-16     	; 0x202e <__addsf3x+0x6a>
    203e:	0e c0       	rjmp	.+28     	; 0x205c <__addsf3x+0x98>
    2040:	ba 0f       	add	r27, r26
    2042:	62 1f       	adc	r22, r18
    2044:	73 1f       	adc	r23, r19
    2046:	84 1f       	adc	r24, r20
    2048:	48 f4       	brcc	.+18     	; 0x205c <__addsf3x+0x98>
    204a:	87 95       	ror	r24
    204c:	77 95       	ror	r23
    204e:	67 95       	ror	r22
    2050:	b7 95       	ror	r27
    2052:	f7 95       	ror	r31
    2054:	9e 3f       	cpi	r25, 0xFE	; 254
    2056:	08 f0       	brcs	.+2      	; 0x205a <__addsf3x+0x96>
    2058:	b3 cf       	rjmp	.-154    	; 0x1fc0 <__addsf3+0x1e>
    205a:	93 95       	inc	r25
    205c:	88 0f       	add	r24, r24
    205e:	08 f0       	brcs	.+2      	; 0x2062 <__addsf3x+0x9e>
    2060:	99 27       	eor	r25, r25
    2062:	ee 0f       	add	r30, r30
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	08 95       	ret

0000206a <__divsf3>:
    206a:	0c d0       	rcall	.+24     	; 0x2084 <__divsf3x>
    206c:	eb c0       	rjmp	.+470    	; 0x2244 <__fp_round>
    206e:	e3 d0       	rcall	.+454    	; 0x2236 <__fp_pscB>
    2070:	40 f0       	brcs	.+16     	; 0x2082 <__divsf3+0x18>
    2072:	da d0       	rcall	.+436    	; 0x2228 <__fp_pscA>
    2074:	30 f0       	brcs	.+12     	; 0x2082 <__divsf3+0x18>
    2076:	21 f4       	brne	.+8      	; 0x2080 <__divsf3+0x16>
    2078:	5f 3f       	cpi	r21, 0xFF	; 255
    207a:	19 f0       	breq	.+6      	; 0x2082 <__divsf3+0x18>
    207c:	cc c0       	rjmp	.+408    	; 0x2216 <__fp_inf>
    207e:	51 11       	cpse	r21, r1
    2080:	15 c1       	rjmp	.+554    	; 0x22ac <__fp_szero>
    2082:	cf c0       	rjmp	.+414    	; 0x2222 <__fp_nan>

00002084 <__divsf3x>:
    2084:	f0 d0       	rcall	.+480    	; 0x2266 <__fp_split3>
    2086:	98 f3       	brcs	.-26     	; 0x206e <__divsf3+0x4>

00002088 <__divsf3_pse>:
    2088:	99 23       	and	r25, r25
    208a:	c9 f3       	breq	.-14     	; 0x207e <__divsf3+0x14>
    208c:	55 23       	and	r21, r21
    208e:	b1 f3       	breq	.-20     	; 0x207c <__divsf3+0x12>
    2090:	95 1b       	sub	r25, r21
    2092:	55 0b       	sbc	r21, r21
    2094:	bb 27       	eor	r27, r27
    2096:	aa 27       	eor	r26, r26
    2098:	62 17       	cp	r22, r18
    209a:	73 07       	cpc	r23, r19
    209c:	84 07       	cpc	r24, r20
    209e:	38 f0       	brcs	.+14     	; 0x20ae <__divsf3_pse+0x26>
    20a0:	9f 5f       	subi	r25, 0xFF	; 255
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	44 1f       	adc	r20, r20
    20aa:	aa 1f       	adc	r26, r26
    20ac:	a9 f3       	breq	.-22     	; 0x2098 <__divsf3_pse+0x10>
    20ae:	33 d0       	rcall	.+102    	; 0x2116 <__divsf3_pse+0x8e>
    20b0:	0e 2e       	mov	r0, r30
    20b2:	3a f0       	brmi	.+14     	; 0x20c2 <__divsf3_pse+0x3a>
    20b4:	e0 e8       	ldi	r30, 0x80	; 128
    20b6:	30 d0       	rcall	.+96     	; 0x2118 <__divsf3_pse+0x90>
    20b8:	91 50       	subi	r25, 0x01	; 1
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	e6 95       	lsr	r30
    20be:	00 1c       	adc	r0, r0
    20c0:	ca f7       	brpl	.-14     	; 0x20b4 <__divsf3_pse+0x2c>
    20c2:	29 d0       	rcall	.+82     	; 0x2116 <__divsf3_pse+0x8e>
    20c4:	fe 2f       	mov	r31, r30
    20c6:	27 d0       	rcall	.+78     	; 0x2116 <__divsf3_pse+0x8e>
    20c8:	66 0f       	add	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	88 1f       	adc	r24, r24
    20ce:	bb 1f       	adc	r27, r27
    20d0:	26 17       	cp	r18, r22
    20d2:	37 07       	cpc	r19, r23
    20d4:	48 07       	cpc	r20, r24
    20d6:	ab 07       	cpc	r26, r27
    20d8:	b0 e8       	ldi	r27, 0x80	; 128
    20da:	09 f0       	breq	.+2      	; 0x20de <__divsf3_pse+0x56>
    20dc:	bb 0b       	sbc	r27, r27
    20de:	80 2d       	mov	r24, r0
    20e0:	bf 01       	movw	r22, r30
    20e2:	ff 27       	eor	r31, r31
    20e4:	93 58       	subi	r25, 0x83	; 131
    20e6:	5f 4f       	sbci	r21, 0xFF	; 255
    20e8:	2a f0       	brmi	.+10     	; 0x20f4 <__divsf3_pse+0x6c>
    20ea:	9e 3f       	cpi	r25, 0xFE	; 254
    20ec:	51 05       	cpc	r21, r1
    20ee:	68 f0       	brcs	.+26     	; 0x210a <__divsf3_pse+0x82>
    20f0:	92 c0       	rjmp	.+292    	; 0x2216 <__fp_inf>
    20f2:	dc c0       	rjmp	.+440    	; 0x22ac <__fp_szero>
    20f4:	5f 3f       	cpi	r21, 0xFF	; 255
    20f6:	ec f3       	brlt	.-6      	; 0x20f2 <__divsf3_pse+0x6a>
    20f8:	98 3e       	cpi	r25, 0xE8	; 232
    20fa:	dc f3       	brlt	.-10     	; 0x20f2 <__divsf3_pse+0x6a>
    20fc:	86 95       	lsr	r24
    20fe:	77 95       	ror	r23
    2100:	67 95       	ror	r22
    2102:	b7 95       	ror	r27
    2104:	f7 95       	ror	r31
    2106:	9f 5f       	subi	r25, 0xFF	; 255
    2108:	c9 f7       	brne	.-14     	; 0x20fc <__divsf3_pse+0x74>
    210a:	88 0f       	add	r24, r24
    210c:	91 1d       	adc	r25, r1
    210e:	96 95       	lsr	r25
    2110:	87 95       	ror	r24
    2112:	97 f9       	bld	r25, 7
    2114:	08 95       	ret
    2116:	e1 e0       	ldi	r30, 0x01	; 1
    2118:	66 0f       	add	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	88 1f       	adc	r24, r24
    211e:	bb 1f       	adc	r27, r27
    2120:	62 17       	cp	r22, r18
    2122:	73 07       	cpc	r23, r19
    2124:	84 07       	cpc	r24, r20
    2126:	ba 07       	cpc	r27, r26
    2128:	20 f0       	brcs	.+8      	; 0x2132 <__divsf3_pse+0xaa>
    212a:	62 1b       	sub	r22, r18
    212c:	73 0b       	sbc	r23, r19
    212e:	84 0b       	sbc	r24, r20
    2130:	ba 0b       	sbc	r27, r26
    2132:	ee 1f       	adc	r30, r30
    2134:	88 f7       	brcc	.-30     	; 0x2118 <__divsf3_pse+0x90>
    2136:	e0 95       	com	r30
    2138:	08 95       	ret

0000213a <__fixsfsi>:
    213a:	04 d0       	rcall	.+8      	; 0x2144 <__fixunssfsi>
    213c:	68 94       	set
    213e:	b1 11       	cpse	r27, r1
    2140:	b5 c0       	rjmp	.+362    	; 0x22ac <__fp_szero>
    2142:	08 95       	ret

00002144 <__fixunssfsi>:
    2144:	98 d0       	rcall	.+304    	; 0x2276 <__fp_splitA>
    2146:	88 f0       	brcs	.+34     	; 0x216a <__fixunssfsi+0x26>
    2148:	9f 57       	subi	r25, 0x7F	; 127
    214a:	90 f0       	brcs	.+36     	; 0x2170 <__fixunssfsi+0x2c>
    214c:	b9 2f       	mov	r27, r25
    214e:	99 27       	eor	r25, r25
    2150:	b7 51       	subi	r27, 0x17	; 23
    2152:	a0 f0       	brcs	.+40     	; 0x217c <__fixunssfsi+0x38>
    2154:	d1 f0       	breq	.+52     	; 0x218a <__fixunssfsi+0x46>
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	88 1f       	adc	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	1a f0       	brmi	.+6      	; 0x2166 <__fixunssfsi+0x22>
    2160:	ba 95       	dec	r27
    2162:	c9 f7       	brne	.-14     	; 0x2156 <__fixunssfsi+0x12>
    2164:	12 c0       	rjmp	.+36     	; 0x218a <__fixunssfsi+0x46>
    2166:	b1 30       	cpi	r27, 0x01	; 1
    2168:	81 f0       	breq	.+32     	; 0x218a <__fixunssfsi+0x46>
    216a:	9f d0       	rcall	.+318    	; 0x22aa <__fp_zero>
    216c:	b1 e0       	ldi	r27, 0x01	; 1
    216e:	08 95       	ret
    2170:	9c c0       	rjmp	.+312    	; 0x22aa <__fp_zero>
    2172:	67 2f       	mov	r22, r23
    2174:	78 2f       	mov	r23, r24
    2176:	88 27       	eor	r24, r24
    2178:	b8 5f       	subi	r27, 0xF8	; 248
    217a:	39 f0       	breq	.+14     	; 0x218a <__fixunssfsi+0x46>
    217c:	b9 3f       	cpi	r27, 0xF9	; 249
    217e:	cc f3       	brlt	.-14     	; 0x2172 <__fixunssfsi+0x2e>
    2180:	86 95       	lsr	r24
    2182:	77 95       	ror	r23
    2184:	67 95       	ror	r22
    2186:	b3 95       	inc	r27
    2188:	d9 f7       	brne	.-10     	; 0x2180 <__fixunssfsi+0x3c>
    218a:	3e f4       	brtc	.+14     	; 0x219a <__fixunssfsi+0x56>
    218c:	90 95       	com	r25
    218e:	80 95       	com	r24
    2190:	70 95       	com	r23
    2192:	61 95       	neg	r22
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <__floatunsisf>:
    219c:	e8 94       	clt
    219e:	09 c0       	rjmp	.+18     	; 0x21b2 <__floatsisf+0x12>

000021a0 <__floatsisf>:
    21a0:	97 fb       	bst	r25, 7
    21a2:	3e f4       	brtc	.+14     	; 0x21b2 <__floatsisf+0x12>
    21a4:	90 95       	com	r25
    21a6:	80 95       	com	r24
    21a8:	70 95       	com	r23
    21aa:	61 95       	neg	r22
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	99 23       	and	r25, r25
    21b4:	a9 f0       	breq	.+42     	; 0x21e0 <__floatsisf+0x40>
    21b6:	f9 2f       	mov	r31, r25
    21b8:	96 e9       	ldi	r25, 0x96	; 150
    21ba:	bb 27       	eor	r27, r27
    21bc:	93 95       	inc	r25
    21be:	f6 95       	lsr	r31
    21c0:	87 95       	ror	r24
    21c2:	77 95       	ror	r23
    21c4:	67 95       	ror	r22
    21c6:	b7 95       	ror	r27
    21c8:	f1 11       	cpse	r31, r1
    21ca:	f8 cf       	rjmp	.-16     	; 0x21bc <__floatsisf+0x1c>
    21cc:	fa f4       	brpl	.+62     	; 0x220c <__floatsisf+0x6c>
    21ce:	bb 0f       	add	r27, r27
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <__floatsisf+0x36>
    21d2:	60 ff       	sbrs	r22, 0
    21d4:	1b c0       	rjmp	.+54     	; 0x220c <__floatsisf+0x6c>
    21d6:	6f 5f       	subi	r22, 0xFF	; 255
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8f 4f       	sbci	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	16 c0       	rjmp	.+44     	; 0x220c <__floatsisf+0x6c>
    21e0:	88 23       	and	r24, r24
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__floatsisf+0x48>
    21e4:	96 e9       	ldi	r25, 0x96	; 150
    21e6:	11 c0       	rjmp	.+34     	; 0x220a <__floatsisf+0x6a>
    21e8:	77 23       	and	r23, r23
    21ea:	21 f0       	breq	.+8      	; 0x21f4 <__floatsisf+0x54>
    21ec:	9e e8       	ldi	r25, 0x8E	; 142
    21ee:	87 2f       	mov	r24, r23
    21f0:	76 2f       	mov	r23, r22
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <__floatsisf+0x5e>
    21f4:	66 23       	and	r22, r22
    21f6:	71 f0       	breq	.+28     	; 0x2214 <__floatsisf+0x74>
    21f8:	96 e8       	ldi	r25, 0x86	; 134
    21fa:	86 2f       	mov	r24, r22
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	2a f0       	brmi	.+10     	; 0x220c <__floatsisf+0x6c>
    2202:	9a 95       	dec	r25
    2204:	66 0f       	add	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	88 1f       	adc	r24, r24
    220a:	da f7       	brpl	.-10     	; 0x2202 <__floatsisf+0x62>
    220c:	88 0f       	add	r24, r24
    220e:	96 95       	lsr	r25
    2210:	87 95       	ror	r24
    2212:	97 f9       	bld	r25, 7
    2214:	08 95       	ret

00002216 <__fp_inf>:
    2216:	97 f9       	bld	r25, 7
    2218:	9f 67       	ori	r25, 0x7F	; 127
    221a:	80 e8       	ldi	r24, 0x80	; 128
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	08 95       	ret

00002222 <__fp_nan>:
    2222:	9f ef       	ldi	r25, 0xFF	; 255
    2224:	80 ec       	ldi	r24, 0xC0	; 192
    2226:	08 95       	ret

00002228 <__fp_pscA>:
    2228:	00 24       	eor	r0, r0
    222a:	0a 94       	dec	r0
    222c:	16 16       	cp	r1, r22
    222e:	17 06       	cpc	r1, r23
    2230:	18 06       	cpc	r1, r24
    2232:	09 06       	cpc	r0, r25
    2234:	08 95       	ret

00002236 <__fp_pscB>:
    2236:	00 24       	eor	r0, r0
    2238:	0a 94       	dec	r0
    223a:	12 16       	cp	r1, r18
    223c:	13 06       	cpc	r1, r19
    223e:	14 06       	cpc	r1, r20
    2240:	05 06       	cpc	r0, r21
    2242:	08 95       	ret

00002244 <__fp_round>:
    2244:	09 2e       	mov	r0, r25
    2246:	03 94       	inc	r0
    2248:	00 0c       	add	r0, r0
    224a:	11 f4       	brne	.+4      	; 0x2250 <__fp_round+0xc>
    224c:	88 23       	and	r24, r24
    224e:	52 f0       	brmi	.+20     	; 0x2264 <__fp_round+0x20>
    2250:	bb 0f       	add	r27, r27
    2252:	40 f4       	brcc	.+16     	; 0x2264 <__fp_round+0x20>
    2254:	bf 2b       	or	r27, r31
    2256:	11 f4       	brne	.+4      	; 0x225c <__fp_round+0x18>
    2258:	60 ff       	sbrs	r22, 0
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <__fp_round+0x20>
    225c:	6f 5f       	subi	r22, 0xFF	; 255
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	08 95       	ret

00002266 <__fp_split3>:
    2266:	57 fd       	sbrc	r21, 7
    2268:	90 58       	subi	r25, 0x80	; 128
    226a:	44 0f       	add	r20, r20
    226c:	55 1f       	adc	r21, r21
    226e:	59 f0       	breq	.+22     	; 0x2286 <__fp_splitA+0x10>
    2270:	5f 3f       	cpi	r21, 0xFF	; 255
    2272:	71 f0       	breq	.+28     	; 0x2290 <__fp_splitA+0x1a>
    2274:	47 95       	ror	r20

00002276 <__fp_splitA>:
    2276:	88 0f       	add	r24, r24
    2278:	97 fb       	bst	r25, 7
    227a:	99 1f       	adc	r25, r25
    227c:	61 f0       	breq	.+24     	; 0x2296 <__fp_splitA+0x20>
    227e:	9f 3f       	cpi	r25, 0xFF	; 255
    2280:	79 f0       	breq	.+30     	; 0x22a0 <__fp_splitA+0x2a>
    2282:	87 95       	ror	r24
    2284:	08 95       	ret
    2286:	12 16       	cp	r1, r18
    2288:	13 06       	cpc	r1, r19
    228a:	14 06       	cpc	r1, r20
    228c:	55 1f       	adc	r21, r21
    228e:	f2 cf       	rjmp	.-28     	; 0x2274 <__fp_split3+0xe>
    2290:	46 95       	lsr	r20
    2292:	f1 df       	rcall	.-30     	; 0x2276 <__fp_splitA>
    2294:	08 c0       	rjmp	.+16     	; 0x22a6 <__fp_splitA+0x30>
    2296:	16 16       	cp	r1, r22
    2298:	17 06       	cpc	r1, r23
    229a:	18 06       	cpc	r1, r24
    229c:	99 1f       	adc	r25, r25
    229e:	f1 cf       	rjmp	.-30     	; 0x2282 <__fp_splitA+0xc>
    22a0:	86 95       	lsr	r24
    22a2:	71 05       	cpc	r23, r1
    22a4:	61 05       	cpc	r22, r1
    22a6:	08 94       	sec
    22a8:	08 95       	ret

000022aa <__fp_zero>:
    22aa:	e8 94       	clt

000022ac <__fp_szero>:
    22ac:	bb 27       	eor	r27, r27
    22ae:	66 27       	eor	r22, r22
    22b0:	77 27       	eor	r23, r23
    22b2:	cb 01       	movw	r24, r22
    22b4:	97 f9       	bld	r25, 7
    22b6:	08 95       	ret

000022b8 <__mulsf3>:
    22b8:	0b d0       	rcall	.+22     	; 0x22d0 <__mulsf3x>
    22ba:	c4 cf       	rjmp	.-120    	; 0x2244 <__fp_round>
    22bc:	b5 df       	rcall	.-150    	; 0x2228 <__fp_pscA>
    22be:	28 f0       	brcs	.+10     	; 0x22ca <__mulsf3+0x12>
    22c0:	ba df       	rcall	.-140    	; 0x2236 <__fp_pscB>
    22c2:	18 f0       	brcs	.+6      	; 0x22ca <__mulsf3+0x12>
    22c4:	95 23       	and	r25, r21
    22c6:	09 f0       	breq	.+2      	; 0x22ca <__mulsf3+0x12>
    22c8:	a6 cf       	rjmp	.-180    	; 0x2216 <__fp_inf>
    22ca:	ab cf       	rjmp	.-170    	; 0x2222 <__fp_nan>
    22cc:	11 24       	eor	r1, r1
    22ce:	ee cf       	rjmp	.-36     	; 0x22ac <__fp_szero>

000022d0 <__mulsf3x>:
    22d0:	ca df       	rcall	.-108    	; 0x2266 <__fp_split3>
    22d2:	a0 f3       	brcs	.-24     	; 0x22bc <__mulsf3+0x4>

000022d4 <__mulsf3_pse>:
    22d4:	95 9f       	mul	r25, r21
    22d6:	d1 f3       	breq	.-12     	; 0x22cc <__mulsf3+0x14>
    22d8:	95 0f       	add	r25, r21
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	55 1f       	adc	r21, r21
    22de:	62 9f       	mul	r22, r18
    22e0:	f0 01       	movw	r30, r0
    22e2:	72 9f       	mul	r23, r18
    22e4:	bb 27       	eor	r27, r27
    22e6:	f0 0d       	add	r31, r0
    22e8:	b1 1d       	adc	r27, r1
    22ea:	63 9f       	mul	r22, r19
    22ec:	aa 27       	eor	r26, r26
    22ee:	f0 0d       	add	r31, r0
    22f0:	b1 1d       	adc	r27, r1
    22f2:	aa 1f       	adc	r26, r26
    22f4:	64 9f       	mul	r22, r20
    22f6:	66 27       	eor	r22, r22
    22f8:	b0 0d       	add	r27, r0
    22fa:	a1 1d       	adc	r26, r1
    22fc:	66 1f       	adc	r22, r22
    22fe:	82 9f       	mul	r24, r18
    2300:	22 27       	eor	r18, r18
    2302:	b0 0d       	add	r27, r0
    2304:	a1 1d       	adc	r26, r1
    2306:	62 1f       	adc	r22, r18
    2308:	73 9f       	mul	r23, r19
    230a:	b0 0d       	add	r27, r0
    230c:	a1 1d       	adc	r26, r1
    230e:	62 1f       	adc	r22, r18
    2310:	83 9f       	mul	r24, r19
    2312:	a0 0d       	add	r26, r0
    2314:	61 1d       	adc	r22, r1
    2316:	22 1f       	adc	r18, r18
    2318:	74 9f       	mul	r23, r20
    231a:	33 27       	eor	r19, r19
    231c:	a0 0d       	add	r26, r0
    231e:	61 1d       	adc	r22, r1
    2320:	23 1f       	adc	r18, r19
    2322:	84 9f       	mul	r24, r20
    2324:	60 0d       	add	r22, r0
    2326:	21 1d       	adc	r18, r1
    2328:	82 2f       	mov	r24, r18
    232a:	76 2f       	mov	r23, r22
    232c:	6a 2f       	mov	r22, r26
    232e:	11 24       	eor	r1, r1
    2330:	9f 57       	subi	r25, 0x7F	; 127
    2332:	50 40       	sbci	r21, 0x00	; 0
    2334:	8a f0       	brmi	.+34     	; 0x2358 <__mulsf3_pse+0x84>
    2336:	e1 f0       	breq	.+56     	; 0x2370 <__mulsf3_pse+0x9c>
    2338:	88 23       	and	r24, r24
    233a:	4a f0       	brmi	.+18     	; 0x234e <__mulsf3_pse+0x7a>
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	bb 1f       	adc	r27, r27
    2342:	66 1f       	adc	r22, r22
    2344:	77 1f       	adc	r23, r23
    2346:	88 1f       	adc	r24, r24
    2348:	91 50       	subi	r25, 0x01	; 1
    234a:	50 40       	sbci	r21, 0x00	; 0
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__mulsf3_pse+0x64>
    234e:	9e 3f       	cpi	r25, 0xFE	; 254
    2350:	51 05       	cpc	r21, r1
    2352:	70 f0       	brcs	.+28     	; 0x2370 <__mulsf3_pse+0x9c>
    2354:	60 cf       	rjmp	.-320    	; 0x2216 <__fp_inf>
    2356:	aa cf       	rjmp	.-172    	; 0x22ac <__fp_szero>
    2358:	5f 3f       	cpi	r21, 0xFF	; 255
    235a:	ec f3       	brlt	.-6      	; 0x2356 <__mulsf3_pse+0x82>
    235c:	98 3e       	cpi	r25, 0xE8	; 232
    235e:	dc f3       	brlt	.-10     	; 0x2356 <__mulsf3_pse+0x82>
    2360:	86 95       	lsr	r24
    2362:	77 95       	ror	r23
    2364:	67 95       	ror	r22
    2366:	b7 95       	ror	r27
    2368:	f7 95       	ror	r31
    236a:	e7 95       	ror	r30
    236c:	9f 5f       	subi	r25, 0xFF	; 255
    236e:	c1 f7       	brne	.-16     	; 0x2360 <__mulsf3_pse+0x8c>
    2370:	fe 2b       	or	r31, r30
    2372:	88 0f       	add	r24, r24
    2374:	91 1d       	adc	r25, r1
    2376:	96 95       	lsr	r25
    2378:	87 95       	ror	r24
    237a:	97 f9       	bld	r25, 7
    237c:	08 95       	ret

0000237e <__divmodhi4>:
    237e:	97 fb       	bst	r25, 7
    2380:	07 2e       	mov	r0, r23
    2382:	16 f4       	brtc	.+4      	; 0x2388 <__divmodhi4+0xa>
    2384:	00 94       	com	r0
    2386:	06 d0       	rcall	.+12     	; 0x2394 <__divmodhi4_neg1>
    2388:	77 fd       	sbrc	r23, 7
    238a:	08 d0       	rcall	.+16     	; 0x239c <__divmodhi4_neg2>
    238c:	11 d0       	rcall	.+34     	; 0x23b0 <__udivmodhi4>
    238e:	07 fc       	sbrc	r0, 7
    2390:	05 d0       	rcall	.+10     	; 0x239c <__divmodhi4_neg2>
    2392:	3e f4       	brtc	.+14     	; 0x23a2 <__divmodhi4_exit>

00002394 <__divmodhi4_neg1>:
    2394:	90 95       	com	r25
    2396:	81 95       	neg	r24
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	08 95       	ret

0000239c <__divmodhi4_neg2>:
    239c:	70 95       	com	r23
    239e:	61 95       	neg	r22
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255

000023a2 <__divmodhi4_exit>:
    23a2:	08 95       	ret

000023a4 <__mulshisi3>:
    23a4:	b7 ff       	sbrs	r27, 7
    23a6:	18 c0       	rjmp	.+48     	; 0x23d8 <__muluhisi3>

000023a8 <__mulohisi3>:
    23a8:	17 d0       	rcall	.+46     	; 0x23d8 <__muluhisi3>
    23aa:	82 1b       	sub	r24, r18
    23ac:	93 0b       	sbc	r25, r19
    23ae:	08 95       	ret

000023b0 <__udivmodhi4>:
    23b0:	aa 1b       	sub	r26, r26
    23b2:	bb 1b       	sub	r27, r27
    23b4:	51 e1       	ldi	r21, 0x11	; 17
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <__udivmodhi4_ep>

000023b8 <__udivmodhi4_loop>:
    23b8:	aa 1f       	adc	r26, r26
    23ba:	bb 1f       	adc	r27, r27
    23bc:	a6 17       	cp	r26, r22
    23be:	b7 07       	cpc	r27, r23
    23c0:	10 f0       	brcs	.+4      	; 0x23c6 <__udivmodhi4_ep>
    23c2:	a6 1b       	sub	r26, r22
    23c4:	b7 0b       	sbc	r27, r23

000023c6 <__udivmodhi4_ep>:
    23c6:	88 1f       	adc	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	5a 95       	dec	r21
    23cc:	a9 f7       	brne	.-22     	; 0x23b8 <__udivmodhi4_loop>
    23ce:	80 95       	com	r24
    23d0:	90 95       	com	r25
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	08 95       	ret

000023d8 <__muluhisi3>:
    23d8:	09 d0       	rcall	.+18     	; 0x23ec <__umulhisi3>
    23da:	a5 9f       	mul	r26, r21
    23dc:	90 0d       	add	r25, r0
    23de:	b4 9f       	mul	r27, r20
    23e0:	90 0d       	add	r25, r0
    23e2:	a4 9f       	mul	r26, r20
    23e4:	80 0d       	add	r24, r0
    23e6:	91 1d       	adc	r25, r1
    23e8:	11 24       	eor	r1, r1
    23ea:	08 95       	ret

000023ec <__umulhisi3>:
    23ec:	a2 9f       	mul	r26, r18
    23ee:	b0 01       	movw	r22, r0
    23f0:	b3 9f       	mul	r27, r19
    23f2:	c0 01       	movw	r24, r0
    23f4:	a3 9f       	mul	r26, r19
    23f6:	70 0d       	add	r23, r0
    23f8:	81 1d       	adc	r24, r1
    23fa:	11 24       	eor	r1, r1
    23fc:	91 1d       	adc	r25, r1
    23fe:	b2 9f       	mul	r27, r18
    2400:	70 0d       	add	r23, r0
    2402:	81 1d       	adc	r24, r1
    2404:	11 24       	eor	r1, r1
    2406:	91 1d       	adc	r25, r1
    2408:	08 95       	ret

0000240a <strcpy>:
    240a:	fb 01       	movw	r30, r22
    240c:	dc 01       	movw	r26, r24
    240e:	01 90       	ld	r0, Z+
    2410:	0d 92       	st	X+, r0
    2412:	00 20       	and	r0, r0
    2414:	e1 f7       	brne	.-8      	; 0x240e <strcpy+0x4>
    2416:	08 95       	ret

00002418 <_exit>:
    2418:	f8 94       	cli

0000241a <__stop_program>:
    241a:	ff cf       	rjmp	.-2      	; 0x241a <__stop_program>
