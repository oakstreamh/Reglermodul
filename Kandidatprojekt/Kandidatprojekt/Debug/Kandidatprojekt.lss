
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00001ec8  00001f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001fc  008001fc  00002058  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f3e  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  0000413e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fcb  00000000  00000000  000049bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000484  00000000  00000000  0000698c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010b79  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001095  00000000  00000000  00017989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00018a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000038af  00000000  00000000  00018b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_20>
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_22>
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__vector_28>
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ec       	ldi	r30, 0xC8	; 200
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3f       	cpi	r26, 0xFC	; 252
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac ef       	ldi	r26, 0xFC	; 252
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3c       	cpi	r26, 0xC1	; 193
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <main>
      c6:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <FLC_steering>:
* Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
* Output: speed, (PWM counter)
*/
void FLC_steering(int c, int s,	int v)

{
      cc:	2f 92       	push	r2
      ce:	3f 92       	push	r3
      d0:	4f 92       	push	r4
      d2:	5f 92       	push	r5
      d4:	6f 92       	push	r6
      d6:	7f 92       	push	r7
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	c2 57       	subi	r28, 0x72	; 114
      f6:	d2 40       	sbci	r29, 0x02	; 2
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	c1 59       	subi	r28, 0x91	; 145
     104:	dd 4f       	sbci	r29, 0xFD	; 253
     106:	99 83       	std	Y+1, r25	; 0x01
     108:	88 83       	st	Y, r24
     10a:	cf 56       	subi	r28, 0x6F	; 111
     10c:	d2 40       	sbci	r29, 0x02	; 2
	
	
	
	// DECLARATION OF C INPUT
	struct io_type delta_C;
	strcpy(delta_C.name, "delta_C");
     10e:	88 e0       	ldi	r24, 0x08	; 8
     110:	e0 e0       	ldi	r30, 0x00	; 0
     112:	f1 e0       	ldi	r31, 0x01	; 1
     114:	de 01       	movw	r26, r28
     116:	11 96       	adiw	r26, 0x01	; 1
     118:	01 90       	ld	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	8a 95       	dec	r24
     11e:	e1 f7       	brne	.-8      	; 0x118 <FLC_steering+0x4c>
	delta_C.value = c;
     120:	c1 59       	subi	r28, 0x91	; 145
     122:	dd 4f       	sbci	r29, 0xFD	; 253
     124:	e8 80       	ld	r14, Y
     126:	f9 80       	ldd	r15, Y+1	; 0x01
     128:	cf 56       	subi	r28, 0x6F	; 111
     12a:	d2 40       	sbci	r29, 0x02	; 2
     12c:	fc 86       	std	Y+12, r15	; 0x0c
     12e:	eb 86       	std	Y+11, r14	; 0x0b
	//MFs
	struct mf_type negative;
	strcpy(negative.name, "negative");
     130:	9e 01       	movw	r18, r28
     132:	2f 5e       	subi	r18, 0xEF	; 239
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	89 e0       	ldi	r24, 0x09	; 9
     138:	e8 e0       	ldi	r30, 0x08	; 8
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	d9 01       	movw	r26, r18
     13e:	01 90       	ld	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	8a 95       	dec	r24
     144:	e1 f7       	brne	.-8      	; 0x13e <FLC_steering+0x72>
	negative.value = 0;
     146:	1c 8e       	std	Y+28, r1	; 0x1c
     148:	1b 8e       	std	Y+27, r1	; 0x1b
	negative.point1 = 44;
     14a:	8c e2       	ldi	r24, 0x2C	; 44
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9e 8f       	std	Y+30, r25	; 0x1e
     150:	8d 8f       	std	Y+29, r24	; 0x1d
	negative.point2= 110;
     152:	8e e6       	ldi	r24, 0x6E	; 110
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	98 a3       	std	Y+32, r25	; 0x20
     158:	8f 8f       	std	Y+31, r24	; 0x1f
	negative.slope1 = 100;
     15a:	0f 2e       	mov	r0, r31
     15c:	f4 e6       	ldi	r31, 0x64	; 100
     15e:	4f 2e       	mov	r4, r31
     160:	51 2c       	mov	r5, r1
     162:	f0 2d       	mov	r31, r0
     164:	5a a2       	std	Y+34, r5	; 0x22
     166:	49 a2       	std	Y+33, r4	; 0x21
	negative.slope2 = 2;
     168:	02 e0       	ldi	r16, 0x02	; 2
     16a:	10 e0       	ldi	r17, 0x00	; 0
     16c:	1c a3       	std	Y+36, r17	; 0x24
     16e:	0b a3       	std	Y+35, r16	; 0x23
	struct mf_type zero;
	strcpy(zero.name, "zero");
     170:	ce 01       	movw	r24, r28
     172:	87 96       	adiw	r24, 0x27	; 39
     174:	0f 2e       	mov	r0, r31
     176:	f5 e0       	ldi	r31, 0x05	; 5
     178:	ff 2e       	mov	r15, r31
     17a:	f0 2d       	mov	r31, r0
     17c:	e1 e1       	ldi	r30, 0x11	; 17
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	dc 01       	movw	r26, r24
     182:	01 90       	ld	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	fa 94       	dec	r15
     188:	e1 f7       	brne	.-8      	; 0x182 <FLC_steering+0xb6>
	zero.value = 0;
     18a:	1a aa       	std	Y+50, r1	; 0x32
     18c:	19 aa       	std	Y+49, r1	; 0x31
	zero.point1 = 75;
     18e:	eb e4       	ldi	r30, 0x4B	; 75
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	fc ab       	std	Y+52, r31	; 0x34
     194:	eb ab       	std	Y+51, r30	; 0x33
	zero.point2= 175;
     196:	ef ea       	ldi	r30, 0xAF	; 175
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	fe ab       	std	Y+54, r31	; 0x36
     19c:	ed ab       	std	Y+53, r30	; 0x35
	zero.slope1 = 50;
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e3       	ldi	r31, 0x32	; 50
     1a2:	cf 2e       	mov	r12, r31
     1a4:	d1 2c       	mov	r13, r1
     1a6:	f0 2d       	mov	r31, r0
     1a8:	d8 ae       	std	Y+56, r13	; 0x38
     1aa:	cf aa       	std	Y+55, r12	; 0x37
	zero.slope2 = 50;
     1ac:	da ae       	std	Y+58, r13	; 0x3a
     1ae:	c9 ae       	std	Y+57, r12	; 0x39
	struct mf_type positive;
	strcpy(positive.name, "positive");
     1b0:	0f 2e       	mov	r0, r31
     1b2:	f9 e0       	ldi	r31, 0x09	; 9
     1b4:	ff 2e       	mov	r15, r31
     1b6:	f0 2d       	mov	r31, r0
     1b8:	e6 e1       	ldi	r30, 0x16	; 22
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	de 01       	movw	r26, r28
     1be:	dd 96       	adiw	r26, 0x3d	; 61
     1c0:	01 90       	ld	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	fa 94       	dec	r15
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <FLC_steering+0xf4>
	positive.value = 0;
     1c8:	29 96       	adiw	r28, 0x09	; 9
     1ca:	1f ae       	std	Y+63, r1	; 0x3f
     1cc:	1e ae       	std	Y+62, r1	; 0x3e
     1ce:	29 97       	sbiw	r28, 0x09	; 9
	positive.point1 = 140;
     1d0:	ec e8       	ldi	r30, 0x8C	; 140
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	2b 96       	adiw	r28, 0x0b	; 11
     1d6:	ff af       	std	Y+63, r31	; 0x3f
     1d8:	ee af       	std	Y+62, r30	; 0x3e
     1da:	2b 97       	sbiw	r28, 0x0b	; 11
	positive.point2= 206;
     1dc:	ee ec       	ldi	r30, 0xCE	; 206
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	2d 96       	adiw	r28, 0x0d	; 13
     1e2:	ff af       	std	Y+63, r31	; 0x3f
     1e4:	ee af       	std	Y+62, r30	; 0x3e
     1e6:	2d 97       	sbiw	r28, 0x0d	; 13
	positive.slope1 = 2;
     1e8:	2f 96       	adiw	r28, 0x0f	; 15
     1ea:	1f af       	std	Y+63, r17	; 0x3f
     1ec:	0e af       	std	Y+62, r16	; 0x3e
     1ee:	2f 97       	sbiw	r28, 0x0f	; 15
	positive.slope2 = 100;
     1f0:	61 96       	adiw	r28, 0x11	; 17
     1f2:	5f ae       	std	Y+63, r5	; 0x3f
     1f4:	4e ae       	std	Y+62, r4	; 0x3e
     1f6:	61 97       	sbiw	r28, 0x11	; 17

	delta_C.membership_functions = &negative;
     1f8:	3e 87       	std	Y+14, r19	; 0x0e
     1fa:	2d 87       	std	Y+13, r18	; 0x0d
	negative.next = &zero;
     1fc:	9e a3       	std	Y+38, r25	; 0x26
     1fe:	8d a3       	std	Y+37, r24	; 0x25
	zero.next = &positive;
     200:	2d e3       	ldi	r18, 0x3D	; 61
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	2c 0f       	add	r18, r28
     206:	3d 1f       	adc	r19, r29
     208:	3c af       	std	Y+60, r19	; 0x3c
     20a:	2b af       	std	Y+59, r18	; 0x3b
	positive.next = NULL;
     20c:	63 96       	adiw	r28, 0x13	; 19
     20e:	1f ae       	std	Y+63, r1	; 0x3f
     210:	1e ae       	std	Y+62, r1	; 0x3e
     212:	63 97       	sbiw	r28, 0x13	; 19
	
	// DECLARATION OF STEERING INPUT
	struct io_type steering;
	strcpy(steering.name, "steering");
     214:	89 e0       	ldi	r24, 0x09	; 9
     216:	ef e1       	ldi	r30, 0x1F	; 31
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	de 01       	movw	r26, r28
     21c:	ad 5a       	subi	r26, 0xAD	; 173
     21e:	bf 4f       	sbci	r27, 0xFF	; 255
     220:	01 90       	ld	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	8a 95       	dec	r24
     226:	e1 f7       	brne	.-8      	; 0x220 <FLC_steering+0x154>
	steering.value = s;
     228:	6f 96       	adiw	r28, 0x1f	; 31
     22a:	7f af       	std	Y+63, r23	; 0x3f
     22c:	6e af       	std	Y+62, r22	; 0x3e
     22e:	6f 97       	sbiw	r28, 0x1f	; 31
	//MFs
	struct mf_type inShRight;
	strcpy(inShRight.name, "inShRight");
     230:	5e 01       	movw	r10, r28
     232:	33 e6       	ldi	r19, 0x63	; 99
     234:	a3 0e       	add	r10, r19
     236:	b1 1c       	adc	r11, r1
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	e2 e9       	ldi	r30, 0x92	; 146
     23c:	f1 e0       	ldi	r31, 0x01	; 1
     23e:	d5 01       	movw	r26, r10
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <FLC_steering+0x174>
	inShRight.value = 0;
     248:	d5 01       	movw	r26, r10
     24a:	1b 96       	adiw	r26, 0x0b	; 11
     24c:	1c 92       	st	X, r1
     24e:	1e 92       	st	-X, r1
     250:	1a 97       	sbiw	r26, 0x0a	; 10
	inShRight.point1 = 2259;
     252:	e3 ed       	ldi	r30, 0xD3	; 211
     254:	f8 e0       	ldi	r31, 0x08	; 8
     256:	1d 96       	adiw	r26, 0x0d	; 13
     258:	fc 93       	st	X, r31
     25a:	ee 93       	st	-X, r30
     25c:	1c 97       	sbiw	r26, 0x0c	; 12
	inShRight.point2= 2400;
     25e:	0f 2e       	mov	r0, r31
     260:	f0 e6       	ldi	r31, 0x60	; 96
     262:	ef 2e       	mov	r14, r31
     264:	f9 e0       	ldi	r31, 0x09	; 9
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
     26a:	1f 96       	adiw	r26, 0x0f	; 15
     26c:	fc 92       	st	X, r15
     26e:	ee 92       	st	-X, r14
     270:	1e 97       	sbiw	r26, 0x0e	; 14
	inShRight.slope1 = 100;
     272:	51 96       	adiw	r26, 0x11	; 17
     274:	5c 92       	st	X, r5
     276:	4e 92       	st	-X, r4
     278:	50 97       	sbiw	r26, 0x10	; 16
	inShRight.slope2 = 1;
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	53 96       	adiw	r26, 0x13	; 19
     280:	1c 93       	st	X, r17
     282:	0e 93       	st	-X, r16
     284:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type right;
	strcpy(right.name, "right");
     286:	7e 01       	movw	r14, r28
     288:	29 e7       	ldi	r18, 0x79	; 121
     28a:	e2 0e       	add	r14, r18
     28c:	f1 1c       	adc	r15, r1
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	ec e8       	ldi	r30, 0x8C	; 140
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	d7 01       	movw	r26, r14
     296:	01 90       	ld	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	8a 95       	dec	r24
     29c:	e1 f7       	brne	.-8      	; 0x296 <FLC_steering+0x1ca>
	right.value = 0;
     29e:	d7 01       	movw	r26, r14
     2a0:	1b 96       	adiw	r26, 0x0b	; 11
     2a2:	1c 92       	st	X, r1
     2a4:	1e 92       	st	-X, r1
     2a6:	1a 97       	sbiw	r26, 0x0a	; 10
	right.point1 = 2300;
     2a8:	8c ef       	ldi	r24, 0xFC	; 252
     2aa:	98 e0       	ldi	r25, 0x08	; 8
     2ac:	1d 96       	adiw	r26, 0x0d	; 13
     2ae:	9c 93       	st	X, r25
     2b0:	8e 93       	st	-X, r24
     2b2:	1c 97       	sbiw	r26, 0x0c	; 12
	right.point2= 2580;
     2b4:	84 e1       	ldi	r24, 0x14	; 20
     2b6:	9a e0       	ldi	r25, 0x0A	; 10
     2b8:	1f 96       	adiw	r26, 0x0f	; 15
     2ba:	9c 93       	st	X, r25
     2bc:	8e 93       	st	-X, r24
     2be:	1e 97       	sbiw	r26, 0x0e	; 14
	right.slope1 = 1;
     2c0:	51 96       	adiw	r26, 0x11	; 17
     2c2:	1c 93       	st	X, r17
     2c4:	0e 93       	st	-X, r16
     2c6:	50 97       	sbiw	r26, 0x10	; 16
	right.slope2 = 1;
     2c8:	53 96       	adiw	r26, 0x13	; 19
     2ca:	1c 93       	st	X, r17
     2cc:	0e 93       	st	-X, r16
     2ce:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inStraight;
	strcpy(inStraight.name, "inStraight");
     2d0:	be 01       	movw	r22, r28
     2d2:	61 57       	subi	r22, 0x71	; 113
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	8b e0       	ldi	r24, 0x0B	; 11
     2d8:	e8 e2       	ldi	r30, 0x28	; 40
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	db 01       	movw	r26, r22
     2de:	01 90       	ld	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	8a 95       	dec	r24
     2e4:	e1 f7       	brne	.-8      	; 0x2de <FLC_steering+0x212>
	inStraight.value = 0;
     2e6:	fb 01       	movw	r30, r22
     2e8:	13 86       	std	Z+11, r1	; 0x0b
     2ea:	12 86       	std	Z+10, r1	; 0x0a
	inStraight.point1 = 2480;
     2ec:	20 eb       	ldi	r18, 0xB0	; 176
     2ee:	39 e0       	ldi	r19, 0x09	; 9
     2f0:	35 87       	std	Z+13, r19	; 0x0d
     2f2:	24 87       	std	Z+12, r18	; 0x0c
	inStraight.point2= 2840;
     2f4:	88 e1       	ldi	r24, 0x18	; 24
     2f6:	9b e0       	ldi	r25, 0x0B	; 11
     2f8:	97 87       	std	Z+15, r25	; 0x0f
     2fa:	86 87       	std	Z+14, r24	; 0x0e
	inStraight.slope1 = 1;
     2fc:	11 8b       	std	Z+17, r17	; 0x11
     2fe:	00 8b       	std	Z+16, r16	; 0x10
	inStraight.slope2 = 1;
     300:	13 8b       	std	Z+19, r17	; 0x13
     302:	02 8b       	std	Z+18, r16	; 0x12

	struct mf_type inLeft;
	strcpy(inLeft.name, "inLeft");
     304:	9e 01       	movw	r18, r28
     306:	2b 55       	subi	r18, 0x5B	; 91
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	87 e0       	ldi	r24, 0x07	; 7
     30c:	e3 e3       	ldi	r30, 0x33	; 51
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	d9 01       	movw	r26, r18
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <FLC_steering+0x246>
	inLeft.value = 0;
     31a:	d9 01       	movw	r26, r18
     31c:	1b 96       	adiw	r26, 0x0b	; 11
     31e:	1c 92       	st	X, r1
     320:	1e 92       	st	-X, r1
     322:	1a 97       	sbiw	r26, 0x0a	; 10
	inLeft.point1 = 2740;
     324:	84 eb       	ldi	r24, 0xB4	; 180
     326:	9a e0       	ldi	r25, 0x0A	; 10
     328:	1d 96       	adiw	r26, 0x0d	; 13
     32a:	9c 93       	st	X, r25
     32c:	8e 93       	st	-X, r24
     32e:	1c 97       	sbiw	r26, 0x0c	; 12
	inLeft.point2= 3020;
     330:	8c ec       	ldi	r24, 0xCC	; 204
     332:	9b e0       	ldi	r25, 0x0B	; 11
     334:	1f 96       	adiw	r26, 0x0f	; 15
     336:	9c 93       	st	X, r25
     338:	8e 93       	st	-X, r24
     33a:	1e 97       	sbiw	r26, 0x0e	; 14
	inLeft.slope1 = 1;
     33c:	51 96       	adiw	r26, 0x11	; 17
     33e:	1c 93       	st	X, r17
     340:	0e 93       	st	-X, r16
     342:	50 97       	sbiw	r26, 0x10	; 16
	inLeft.slope2 = 1;
     344:	53 96       	adiw	r26, 0x13	; 19
     346:	1c 93       	st	X, r17
     348:	0e 93       	st	-X, r16
     34a:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inShLeft;
	strcpy(inShLeft.name, "inShLeft");
     34c:	ce 01       	movw	r24, r28
     34e:	85 54       	subi	r24, 0x45	; 69
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	0f 2e       	mov	r0, r31
     354:	f9 e0       	ldi	r31, 0x09	; 9
     356:	9f 2e       	mov	r9, r31
     358:	f0 2d       	mov	r31, r0
     35a:	ea e3       	ldi	r30, 0x3A	; 58
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	dc 01       	movw	r26, r24
     360:	01 90       	ld	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	9a 94       	dec	r9
     366:	e1 f7       	brne	.-8      	; 0x360 <FLC_steering+0x294>
	inShLeft.value = 0;
     368:	fc 01       	movw	r30, r24
     36a:	13 86       	std	Z+11, r1	; 0x0b
     36c:	12 86       	std	Z+10, r1	; 0x0a
	inShLeft.point1 = 2920;
     36e:	a8 e6       	ldi	r26, 0x68	; 104
     370:	bb e0       	ldi	r27, 0x0B	; 11
     372:	b5 87       	std	Z+13, r27	; 0x0d
     374:	a4 87       	std	Z+12, r26	; 0x0c
	inShLeft.point2= 3061;
     376:	a5 ef       	ldi	r26, 0xF5	; 245
     378:	bb e0       	ldi	r27, 0x0B	; 11
     37a:	b7 87       	std	Z+15, r27	; 0x0f
     37c:	a6 87       	std	Z+14, r26	; 0x0e
	inShLeft.slope1 = 1;
     37e:	11 8b       	std	Z+17, r17	; 0x11
     380:	00 8b       	std	Z+16, r16	; 0x10
	inShLeft.slope2 = 100;
     382:	53 8a       	std	Z+19, r5	; 0x13
     384:	42 8a       	std	Z+18, r4	; 0x12

	steering.membership_functions = &inShRight;
     386:	a1 96       	adiw	r28, 0x21	; 33
     388:	bf ae       	std	Y+63, r11	; 0x3f
     38a:	ae ae       	std	Y+62, r10	; 0x3e
     38c:	a1 97       	sbiw	r28, 0x21	; 33
	inShRight.next = &right;
     38e:	f5 01       	movw	r30, r10
     390:	f5 8a       	std	Z+21, r15	; 0x15
     392:	e4 8a       	std	Z+20, r14	; 0x14
	right.next = &inStraight;
     394:	d7 01       	movw	r26, r14
     396:	55 96       	adiw	r26, 0x15	; 21
     398:	7c 93       	st	X, r23
     39a:	6e 93       	st	-X, r22
     39c:	54 97       	sbiw	r26, 0x14	; 20
	inStraight.next = &inLeft;
     39e:	fb 01       	movw	r30, r22
     3a0:	35 8b       	std	Z+21, r19	; 0x15
     3a2:	24 8b       	std	Z+20, r18	; 0x14
	inLeft.next = &inShLeft;
     3a4:	d9 01       	movw	r26, r18
     3a6:	55 96       	adiw	r26, 0x15	; 21
     3a8:	9c 93       	st	X, r25
     3aa:	8e 93       	st	-X, r24
     3ac:	54 97       	sbiw	r26, 0x14	; 20
	inShLeft.next = NULL;
     3ae:	fc 01       	movw	r30, r24
     3b0:	15 8a       	std	Z+21, r1	; 0x15
     3b2:	14 8a       	std	Z+20, r1	; 0x14
	
	
	// DECLARATION OF V INPUT
	struct io_type delta_V;
	strcpy(delta_V.name, "delta_V");
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	e3 e4       	ldi	r30, 0x43	; 67
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	9c 96       	adiw	r26, 0x2c	; 44
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <FLC_steering+0x2f0>
	delta_V.value = v;
     3c4:	c5 52       	subi	r28, 0x25	; 37
     3c6:	df 4f       	sbci	r29, 0xFF	; 255
     3c8:	59 83       	std	Y+1, r21	; 0x01
     3ca:	48 83       	st	Y, r20
     3cc:	cb 5d       	subi	r28, 0xDB	; 219
     3ce:	d0 40       	sbci	r29, 0x00	; 0
	//MFs
	struct mf_type small;
	strcpy(small.name, "small");
     3d0:	3e 01       	movw	r6, r28
     3d2:	f1 ee       	ldi	r31, 0xE1	; 225
     3d4:	6f 0e       	add	r6, r31
     3d6:	71 1c       	adc	r7, r1
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	eb e4       	ldi	r30, 0x4B	; 75
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	d3 01       	movw	r26, r6
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <FLC_steering+0x314>
	small.value = 0;
     3e8:	d3 01       	movw	r26, r6
     3ea:	1b 96       	adiw	r26, 0x0b	; 11
     3ec:	1c 92       	st	X, r1
     3ee:	1e 92       	st	-X, r1
     3f0:	1a 97       	sbiw	r26, 0x0a	; 10
	small.point1 = -1;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	1d 96       	adiw	r26, 0x0d	; 13
     3f8:	9c 93       	st	X, r25
     3fa:	8e 93       	st	-X, r24
     3fc:	1c 97       	sbiw	r26, 0x0c	; 12
	small.point2= 30;
     3fe:	8e e1       	ldi	r24, 0x1E	; 30
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	1f 96       	adiw	r26, 0x0f	; 15
     404:	9c 93       	st	X, r25
     406:	8e 93       	st	-X, r24
     408:	1e 97       	sbiw	r26, 0x0e	; 14
	small.slope1 = 100;
     40a:	51 96       	adiw	r26, 0x11	; 17
     40c:	5c 92       	st	X, r5
     40e:	4e 92       	st	-X, r4
     410:	50 97       	sbiw	r26, 0x10	; 16
	small.slope2 = 5;
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	53 96       	adiw	r26, 0x13	; 19
     418:	9c 93       	st	X, r25
     41a:	8e 93       	st	-X, r24
     41c:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type medium;
	strcpy(medium.name, "medium");
     41e:	7e 01       	movw	r14, r28
     420:	b7 ef       	ldi	r27, 0xF7	; 247
     422:	eb 0e       	add	r14, r27
     424:	f1 1c       	adc	r15, r1
     426:	27 e0       	ldi	r18, 0x07	; 7
     428:	e1 e5       	ldi	r30, 0x51	; 81
     42a:	f1 e0       	ldi	r31, 0x01	; 1
     42c:	d7 01       	movw	r26, r14
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	2a 95       	dec	r18
     434:	e1 f7       	brne	.-8      	; 0x42e <FLC_steering+0x362>
	medium.value = 0;
     436:	f7 01       	movw	r30, r14
     438:	13 86       	std	Z+11, r1	; 0x0b
     43a:	12 86       	std	Z+10, r1	; 0x0a
	medium.point1 = 20;
     43c:	24 e1       	ldi	r18, 0x14	; 20
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	35 87       	std	Z+13, r19	; 0x0d
     442:	24 87       	std	Z+12, r18	; 0x0c
	medium.point2= 60;
     444:	2c e3       	ldi	r18, 0x3C	; 60
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	37 87       	std	Z+15, r19	; 0x0f
     44a:	26 87       	std	Z+14, r18	; 0x0e
	medium.slope1 = 5;
     44c:	91 8b       	std	Z+17, r25	; 0x11
     44e:	80 8b       	std	Z+16, r24	; 0x10
	medium.slope2 = 5;
     450:	93 8b       	std	Z+19, r25	; 0x13
     452:	82 8b       	std	Z+18, r24	; 0x12
	struct mf_type high;
	strcpy(high.name, "high");
     454:	62 58       	subi	r22, 0x82	; 130
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	25 e0       	ldi	r18, 0x05	; 5
     45a:	e8 e5       	ldi	r30, 0x58	; 88
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	db 01       	movw	r26, r22
     460:	01 90       	ld	r0, Z+
     462:	0d 92       	st	X+, r0
     464:	2a 95       	dec	r18
     466:	e1 f7       	brne	.-8      	; 0x460 <FLC_steering+0x394>
	high.value = 0;
     468:	db 01       	movw	r26, r22
     46a:	1b 96       	adiw	r26, 0x0b	; 11
     46c:	1c 92       	st	X, r1
     46e:	1e 92       	st	-X, r1
     470:	1a 97       	sbiw	r26, 0x0a	; 10
	high.point1 = 50;
     472:	1d 96       	adiw	r26, 0x0d	; 13
     474:	dc 92       	st	X, r13
     476:	ce 92       	st	-X, r12
     478:	1c 97       	sbiw	r26, 0x0c	; 12
	high.point2= 81;
     47a:	21 e5       	ldi	r18, 0x51	; 81
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	1f 96       	adiw	r26, 0x0f	; 15
     480:	3c 93       	st	X, r19
     482:	2e 93       	st	-X, r18
     484:	1e 97       	sbiw	r26, 0x0e	; 14
	high.slope1 = 5;
     486:	51 96       	adiw	r26, 0x11	; 17
     488:	9c 93       	st	X, r25
     48a:	8e 93       	st	-X, r24
     48c:	50 97       	sbiw	r26, 0x10	; 16
	high.slope2 = 100;
     48e:	53 96       	adiw	r26, 0x13	; 19
     490:	5c 92       	st	X, r5
     492:	4e 92       	st	-X, r4
     494:	52 97       	sbiw	r26, 0x12	; 18

	delta_V.membership_functions = &small;
     496:	c3 52       	subi	r28, 0x23	; 35
     498:	df 4f       	sbci	r29, 0xFF	; 255
     49a:	79 82       	std	Y+1, r7	; 0x01
     49c:	68 82       	st	Y, r6
     49e:	cd 5d       	subi	r28, 0xDD	; 221
     4a0:	d0 40       	sbci	r29, 0x00	; 0
	small.next = &medium;
     4a2:	f3 01       	movw	r30, r6
     4a4:	f5 8a       	std	Z+21, r15	; 0x15
     4a6:	e4 8a       	std	Z+20, r14	; 0x14
	medium.next = &high;
     4a8:	d7 01       	movw	r26, r14
     4aa:	55 96       	adiw	r26, 0x15	; 21
     4ac:	7c 93       	st	X, r23
     4ae:	6e 93       	st	-X, r22
     4b0:	54 97       	sbiw	r26, 0x14	; 20
	high.next = NULL;
     4b2:	fb 01       	movw	r30, r22
     4b4:	15 8a       	std	Z+21, r1	; 0x15
     4b6:	14 8a       	std	Z+20, r1	; 0x14
	
	// DECLARATION OF STEERING SERVO OUTPUT

	struct io_type servo;
	strcpy(servo.name, "servo");
     4b8:	1e 01       	movw	r2, r28
     4ba:	fd ed       	ldi	r31, 0xDD	; 221
     4bc:	2f 1a       	sub	r2, r31
     4be:	fe ef       	ldi	r31, 0xFE	; 254
     4c0:	3f 0a       	sbc	r3, r31
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	ed e5       	ldi	r30, 0x5D	; 93
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	d1 01       	movw	r26, r2
     4ca:	01 90       	ld	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	8a 95       	dec	r24
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <FLC_steering+0x3fe>

	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     4d2:	4e 01       	movw	r8, r28
     4d4:	2d ec       	ldi	r18, 0xCD	; 205
     4d6:	82 1a       	sub	r8, r18
     4d8:	2e ef       	ldi	r18, 0xFE	; 254
     4da:	92 0a       	sbc	r9, r18
     4dc:	88 e0       	ldi	r24, 0x08	; 8
     4de:	e3 e6       	ldi	r30, 0x63	; 99
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	d4 01       	movw	r26, r8
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <FLC_steering+0x418>
	oShLeft.value = 0;
     4ec:	d4 01       	movw	r26, r8
     4ee:	1b 96       	adiw	r26, 0x0b	; 11
     4f0:	1c 92       	st	X, r1
     4f2:	1e 92       	st	-X, r1
     4f4:	1a 97       	sbiw	r26, 0x0a	; 10
	oShLeft.point1 = 2950;
     4f6:	86 e8       	ldi	r24, 0x86	; 134
     4f8:	9b e0       	ldi	r25, 0x0B	; 11
     4fa:	1d 96       	adiw	r26, 0x0d	; 13
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	1c 97       	sbiw	r26, 0x0c	; 12
	oShLeft.point2 = 3061;
     502:	e5 ef       	ldi	r30, 0xF5	; 245
     504:	fb e0       	ldi	r31, 0x0B	; 11
     506:	1f 96       	adiw	r26, 0x0f	; 15
     508:	fc 93       	st	X, r31
     50a:	ee 93       	st	-X, r30
     50c:	1e 97       	sbiw	r26, 0x0e	; 14
	oShLeft.slope1 = 1;
     50e:	51 96       	adiw	r26, 0x11	; 17
     510:	1c 93       	st	X, r17
     512:	0e 93       	st	-X, r16
     514:	50 97       	sbiw	r26, 0x10	; 16
	oShLeft.slope2 = 100;
     516:	53 96       	adiw	r26, 0x13	; 19
     518:	5c 92       	st	X, r5
     51a:	4e 92       	st	-X, r4
     51c:	52 97       	sbiw	r26, 0x12	; 18
	oShLeft.next = NULL;
     51e:	55 96       	adiw	r26, 0x15	; 21
     520:	1c 92       	st	X, r1
     522:	1e 92       	st	-X, r1
     524:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     526:	ce 01       	movw	r24, r28
     528:	87 5b       	subi	r24, 0xB7	; 183
     52a:	9e 4f       	sbci	r25, 0xFE	; 254
     52c:	26 e0       	ldi	r18, 0x06	; 6
     52e:	eb e6       	ldi	r30, 0x6B	; 107
     530:	f1 e0       	ldi	r31, 0x01	; 1
     532:	dc 01       	movw	r26, r24
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	2a 95       	dec	r18
     53a:	e1 f7       	brne	.-8      	; 0x534 <FLC_steering+0x468>
	oLeft.value = 0;
     53c:	dc 01       	movw	r26, r24
     53e:	1b 96       	adiw	r26, 0x0b	; 11
     540:	1c 92       	st	X, r1
     542:	1e 92       	st	-X, r1
     544:	1a 97       	sbiw	r26, 0x0a	; 10
	oLeft.point1 = 2840;
     546:	e8 e1       	ldi	r30, 0x18	; 24
     548:	fb e0       	ldi	r31, 0x0B	; 11
     54a:	1d 96       	adiw	r26, 0x0d	; 13
     54c:	fc 93       	st	X, r31
     54e:	ee 93       	st	-X, r30
     550:	1c 97       	sbiw	r26, 0x0c	; 12
	oLeft.point2 = 3050;
     552:	2a ee       	ldi	r18, 0xEA	; 234
     554:	3b e0       	ldi	r19, 0x0B	; 11
     556:	1f 96       	adiw	r26, 0x0f	; 15
     558:	3c 93       	st	X, r19
     55a:	2e 93       	st	-X, r18
     55c:	1e 97       	sbiw	r26, 0x0e	; 14
	oLeft.slope1 = 1;
     55e:	51 96       	adiw	r26, 0x11	; 17
     560:	1c 93       	st	X, r17
     562:	0e 93       	st	-X, r16
     564:	50 97       	sbiw	r26, 0x10	; 16
	oLeft.slope2 = 1;
     566:	53 96       	adiw	r26, 0x13	; 19
     568:	1c 93       	st	X, r17
     56a:	0e 93       	st	-X, r16
     56c:	52 97       	sbiw	r26, 0x12	; 18
	oLeft.next = &oShLeft;
     56e:	55 96       	adiw	r26, 0x15	; 21
     570:	9c 92       	st	X, r9
     572:	8e 92       	st	-X, r8
     574:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     576:	5e 01       	movw	r10, r28
     578:	f1 ea       	ldi	r31, 0xA1	; 161
     57a:	af 1a       	sub	r10, r31
     57c:	fe ef       	ldi	r31, 0xFE	; 254
     57e:	bf 0a       	sbc	r11, r31
     580:	28 e0       	ldi	r18, 0x08	; 8
     582:	e1 e7       	ldi	r30, 0x71	; 113
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	d5 01       	movw	r26, r10
     588:	01 90       	ld	r0, Z+
     58a:	0d 92       	st	X+, r0
     58c:	2a 95       	dec	r18
     58e:	e1 f7       	brne	.-8      	; 0x588 <FLC_steering+0x4bc>
	oSlLeft.value = 0;
     590:	d5 01       	movw	r26, r10
     592:	1b 96       	adiw	r26, 0x0b	; 11
     594:	1c 92       	st	X, r1
     596:	1e 92       	st	-X, r1
     598:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlLeft.point1 = 2670;
     59a:	2e e6       	ldi	r18, 0x6E	; 110
     59c:	3a e0       	ldi	r19, 0x0A	; 10
     59e:	1d 96       	adiw	r26, 0x0d	; 13
     5a0:	3c 93       	st	X, r19
     5a2:	2e 93       	st	-X, r18
     5a4:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlLeft.point2 = 2920;
     5a6:	e8 e6       	ldi	r30, 0x68	; 104
     5a8:	fb e0       	ldi	r31, 0x0B	; 11
     5aa:	1f 96       	adiw	r26, 0x0f	; 15
     5ac:	fc 93       	st	X, r31
     5ae:	ee 93       	st	-X, r30
     5b0:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlLeft.slope1 = 1;
     5b2:	51 96       	adiw	r26, 0x11	; 17
     5b4:	1c 93       	st	X, r17
     5b6:	0e 93       	st	-X, r16
     5b8:	50 97       	sbiw	r26, 0x10	; 16
	oSlLeft.slope2 = 1;
     5ba:	53 96       	adiw	r26, 0x13	; 19
     5bc:	1c 93       	st	X, r17
     5be:	0e 93       	st	-X, r16
     5c0:	52 97       	sbiw	r26, 0x12	; 18
	oSlLeft.next = &oLeft;
     5c2:	55 96       	adiw	r26, 0x15	; 21
     5c4:	9c 93       	st	X, r25
     5c6:	8e 93       	st	-X, r24
     5c8:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	ec e9       	ldi	r30, 0x9C	; 156
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	56 96       	adiw	r26, 0x16	; 22
     5d2:	01 90       	ld	r0, Z+
     5d4:	0d 92       	st	X+, r0
     5d6:	8a 95       	dec	r24
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <FLC_steering+0x506>
	oStraight.value = 0;
     5da:	c1 58       	subi	r28, 0x81	; 129
     5dc:	de 4f       	sbci	r29, 0xFE	; 254
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	18 82       	st	Y, r1
     5e2:	cf 57       	subi	r28, 0x7F	; 127
     5e4:	d1 40       	sbci	r29, 0x01	; 1
	oStraight.point1 = 2540;
     5e6:	8c ee       	ldi	r24, 0xEC	; 236
     5e8:	99 e0       	ldi	r25, 0x09	; 9
     5ea:	cf 57       	subi	r28, 0x7F	; 127
     5ec:	de 4f       	sbci	r29, 0xFE	; 254
     5ee:	99 83       	std	Y+1, r25	; 0x01
     5f0:	88 83       	st	Y, r24
     5f2:	c1 58       	subi	r28, 0x81	; 129
     5f4:	d1 40       	sbci	r29, 0x01	; 1
	oStraight.point2 = 2780;
     5f6:	8c ed       	ldi	r24, 0xDC	; 220
     5f8:	9a e0       	ldi	r25, 0x0A	; 10
     5fa:	cd 57       	subi	r28, 0x7D	; 125
     5fc:	de 4f       	sbci	r29, 0xFE	; 254
     5fe:	99 83       	std	Y+1, r25	; 0x01
     600:	88 83       	st	Y, r24
     602:	c3 58       	subi	r28, 0x83	; 131
     604:	d1 40       	sbci	r29, 0x01	; 1
	oStraight.slope1 = 1;
     606:	cb 57       	subi	r28, 0x7B	; 123
     608:	de 4f       	sbci	r29, 0xFE	; 254
     60a:	19 83       	std	Y+1, r17	; 0x01
     60c:	08 83       	st	Y, r16
     60e:	c5 58       	subi	r28, 0x85	; 133
     610:	d1 40       	sbci	r29, 0x01	; 1
	oStraight.slope2 = 1;
     612:	c9 57       	subi	r28, 0x79	; 121
     614:	de 4f       	sbci	r29, 0xFE	; 254
     616:	19 83       	std	Y+1, r17	; 0x01
     618:	08 83       	st	Y, r16
     61a:	c7 58       	subi	r28, 0x87	; 135
     61c:	d1 40       	sbci	r29, 0x01	; 1
	oStraight.next = &oSlLeft;
     61e:	c7 57       	subi	r28, 0x77	; 119
     620:	de 4f       	sbci	r29, 0xFE	; 254
     622:	b9 82       	std	Y+1, r11	; 0x01
     624:	a8 82       	st	Y, r10
     626:	c9 58       	subi	r28, 0x89	; 137
     628:	d1 40       	sbci	r29, 0x01	; 1
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     62a:	ce 01       	movw	r24, r28
     62c:	85 57       	subi	r24, 0x75	; 117
     62e:	9e 4f       	sbci	r25, 0xFE	; 254
     630:	29 e0       	ldi	r18, 0x09	; 9
     632:	e9 e7       	ldi	r30, 0x79	; 121
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	dc 01       	movw	r26, r24
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	2a 95       	dec	r18
     63e:	e1 f7       	brne	.-8      	; 0x638 <FLC_steering+0x56c>
	oSlRight.value = 0;
     640:	dc 01       	movw	r26, r24
     642:	1b 96       	adiw	r26, 0x0b	; 11
     644:	1c 92       	st	X, r1
     646:	1e 92       	st	-X, r1
     648:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlRight.point1 = 2400;
     64a:	e0 e6       	ldi	r30, 0x60	; 96
     64c:	f9 e0       	ldi	r31, 0x09	; 9
     64e:	1d 96       	adiw	r26, 0x0d	; 13
     650:	fc 93       	st	X, r31
     652:	ee 93       	st	-X, r30
     654:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlRight.point2 = 2650;
     656:	2a e5       	ldi	r18, 0x5A	; 90
     658:	3a e0       	ldi	r19, 0x0A	; 10
     65a:	1f 96       	adiw	r26, 0x0f	; 15
     65c:	3c 93       	st	X, r19
     65e:	2e 93       	st	-X, r18
     660:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlRight.slope1 = 1;
     662:	51 96       	adiw	r26, 0x11	; 17
     664:	1c 93       	st	X, r17
     666:	0e 93       	st	-X, r16
     668:	50 97       	sbiw	r26, 0x10	; 16
	oSlRight.slope2 = 1;
     66a:	53 96       	adiw	r26, 0x13	; 19
     66c:	1c 93       	st	X, r17
     66e:	0e 93       	st	-X, r16
     670:	52 97       	sbiw	r26, 0x12	; 18
	oSlRight.next = &oStraight;
     672:	25 e7       	ldi	r18, 0x75	; 117
     674:	31 e0       	ldi	r19, 0x01	; 1
     676:	2c 0f       	add	r18, r28
     678:	3d 1f       	adc	r19, r29
     67a:	55 96       	adiw	r26, 0x15	; 21
     67c:	3c 93       	st	X, r19
     67e:	2e 93       	st	-X, r18
     680:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     682:	ae 01       	movw	r20, r28
     684:	4f 55       	subi	r20, 0x5F	; 95
     686:	5e 4f       	sbci	r21, 0xFE	; 254
     688:	27 e0       	ldi	r18, 0x07	; 7
     68a:	e2 e8       	ldi	r30, 0x82	; 130
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	da 01       	movw	r26, r20
     690:	01 90       	ld	r0, Z+
     692:	0d 92       	st	X+, r0
     694:	2a 95       	dec	r18
     696:	e1 f7       	brne	.-8      	; 0x690 <FLC_steering+0x5c4>
	oRight.value = 0;
     698:	da 01       	movw	r26, r20
     69a:	1b 96       	adiw	r26, 0x0b	; 11
     69c:	1c 92       	st	X, r1
     69e:	1e 92       	st	-X, r1
     6a0:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     6a2:	2e ed       	ldi	r18, 0xDE	; 222
     6a4:	38 e0       	ldi	r19, 0x08	; 8
     6a6:	1d 96       	adiw	r26, 0x0d	; 13
     6a8:	3c 93       	st	X, r19
     6aa:	2e 93       	st	-X, r18
     6ac:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     6ae:	e0 eb       	ldi	r30, 0xB0	; 176
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	1f 96       	adiw	r26, 0x0f	; 15
     6b4:	fc 93       	st	X, r31
     6b6:	ee 93       	st	-X, r30
     6b8:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     6ba:	51 96       	adiw	r26, 0x11	; 17
     6bc:	1c 93       	st	X, r17
     6be:	0e 93       	st	-X, r16
     6c0:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     6c2:	53 96       	adiw	r26, 0x13	; 19
     6c4:	1c 93       	st	X, r17
     6c6:	0e 93       	st	-X, r16
     6c8:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     6ca:	55 96       	adiw	r26, 0x15	; 21
     6cc:	9c 93       	st	X, r25
     6ce:	8e 93       	st	-X, r24
     6d0:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     6d2:	9e 01       	movw	r18, r28
     6d4:	29 54       	subi	r18, 0x49	; 73
     6d6:	3e 4f       	sbci	r19, 0xFE	; 254
     6d8:	0f 2e       	mov	r0, r31
     6da:	f9 e0       	ldi	r31, 0x09	; 9
     6dc:	df 2e       	mov	r13, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	e9 e8       	ldi	r30, 0x89	; 137
     6e2:	f1 e0       	ldi	r31, 0x01	; 1
     6e4:	d9 01       	movw	r26, r18
     6e6:	01 90       	ld	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	da 94       	dec	r13
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <FLC_steering+0x61a>
	oShright.value = 0;
     6ee:	d9 01       	movw	r26, r18
     6f0:	1b 96       	adiw	r26, 0x0b	; 11
     6f2:	1c 92       	st	X, r1
     6f4:	1e 92       	st	-X, r1
     6f6:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     6f8:	e3 ed       	ldi	r30, 0xD3	; 211
     6fa:	f8 e0       	ldi	r31, 0x08	; 8
     6fc:	1d 96       	adiw	r26, 0x0d	; 13
     6fe:	fc 93       	st	X, r31
     700:	ee 93       	st	-X, r30
     702:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     704:	e2 e4       	ldi	r30, 0x42	; 66
     706:	f9 e0       	ldi	r31, 0x09	; 9
     708:	1f 96       	adiw	r26, 0x0f	; 15
     70a:	fc 93       	st	X, r31
     70c:	ee 93       	st	-X, r30
     70e:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     710:	51 96       	adiw	r26, 0x11	; 17
     712:	5c 92       	st	X, r5
     714:	4e 92       	st	-X, r4
     716:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     718:	53 96       	adiw	r26, 0x13	; 19
     71a:	1c 93       	st	X, r17
     71c:	0e 93       	st	-X, r16
     71e:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     720:	55 96       	adiw	r26, 0x15	; 21
     722:	5c 93       	st	X, r21
     724:	4e 93       	st	-X, r20
     726:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     728:	d1 01       	movw	r26, r2
     72a:	1d 96       	adiw	r26, 0x0d	; 13
     72c:	3c 93       	st	X, r19
     72e:	2e 93       	st	-X, r18
     730:	1c 97       	sbiw	r26, 0x0c	; 12
	servo.next = NULL;
     732:	1f 96       	adiw	r26, 0x0f	; 15
     734:	1c 92       	st	X, r1
     736:	1e 92       	st	-X, r1
     738:	1e 97       	sbiw	r26, 0x0e	; 14
	*/

	
	/* rule # 9: if C is zero and V is high then servo is slightLeft */
	struct rule_element_type then9;
	then9.value = &oSlLeft;
     73a:	2e 01       	movw	r4, r28
     73c:	b3 e3       	ldi	r27, 0x33	; 51
     73e:	4b 1a       	sub	r4, r27
     740:	be ef       	ldi	r27, 0xFE	; 254
     742:	5b 0a       	sbc	r5, r27
     744:	f2 01       	movw	r30, r4
     746:	b1 82       	std	Z+1, r11	; 0x01
     748:	a0 82       	st	Z, r10
	then9.next = NULL;
     74a:	13 82       	std	Z+3, r1	; 0x03
     74c:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if92;
	if92.value = &high.value;
     74e:	34 96       	adiw	r30, 0x04	; 4
     750:	66 5f       	subi	r22, 0xF6	; 246
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	71 83       	std	Z+1, r23	; 0x01
     756:	60 83       	st	Z, r22
	if92.next = NULL;
     758:	13 82       	std	Z+3, r1	; 0x03
     75a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if91;
	if91.value = &zero.value;
     75c:	4c 5c       	subi	r20, 0xCC	; 204
     75e:	5f 4f       	sbci	r21, 0xFF	; 255
     760:	6e 01       	movw	r12, r28
     762:	11 e3       	ldi	r17, 0x31	; 49
     764:	c1 0e       	add	r12, r17
     766:	d1 1c       	adc	r13, r1
     768:	da 01       	movw	r26, r20
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	dc 92       	st	X, r13
     76e:	ce 92       	st	-X, r12
	if91.next = &if92;
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	fc 93       	st	X, r31
     774:	ee 93       	st	-X, r30
     776:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule9;
	rule9.if_side = &if91;
     778:	38 96       	adiw	r30, 0x08	; 8
     77a:	51 83       	std	Z+1, r21	; 0x01
     77c:	40 83       	st	Z, r20
	rule9.then_side = &then9;
     77e:	53 82       	std	Z+3, r5	; 0x03
     780:	42 82       	std	Z+2, r4	; 0x02
	rule9.next = NULL;
     782:	15 82       	std	Z+5, r1	; 0x05
     784:	14 82       	std	Z+4, r1	; 0x04
	
	/* rule # 8: if positive and V is high then servo is slightRight */
	struct rule_element_type then8;
	then8.value = &oSlRight;
     786:	46 5f       	subi	r20, 0xF6	; 246
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	da 01       	movw	r26, r20
     78c:	11 96       	adiw	r26, 0x01	; 1
     78e:	9c 93       	st	X, r25
     790:	8e 93       	st	-X, r24
	then8.next = NULL;
     792:	13 96       	adiw	r26, 0x03	; 3
     794:	1c 92       	st	X, r1
     796:	1e 92       	st	-X, r1
     798:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if82;
	if82.value = &high.value;
     79a:	2e 01       	movw	r4, r28
     79c:	bd e1       	ldi	r27, 0x1D	; 29
     79e:	4b 1a       	sub	r4, r27
     7a0:	be ef       	ldi	r27, 0xFE	; 254
     7a2:	5b 0a       	sbc	r5, r27
     7a4:	d2 01       	movw	r26, r4
     7a6:	11 96       	adiw	r26, 0x01	; 1
     7a8:	7c 93       	st	X, r23
     7aa:	6e 93       	st	-X, r22
	if82.next = NULL;
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	1c 92       	st	X, r1
     7b0:	1e 92       	st	-X, r1
     7b2:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if81;
	if81.value = &positive.value;
     7b4:	8e 01       	movw	r16, r28
     7b6:	09 51       	subi	r16, 0x19	; 25
     7b8:	1e 4f       	sbci	r17, 0xFE	; 254
     7ba:	6d e3       	ldi	r22, 0x3D	; 61
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	6c 0f       	add	r22, r28
     7c0:	7d 1f       	adc	r23, r29
     7c2:	66 5f       	subi	r22, 0xF6	; 246
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	cf 58       	subi	r28, 0x8F	; 143
     7c8:	dd 4f       	sbci	r29, 0xFD	; 253
     7ca:	79 83       	std	Y+1, r23	; 0x01
     7cc:	68 83       	st	Y, r22
     7ce:	c1 57       	subi	r28, 0x71	; 113
     7d0:	d2 40       	sbci	r29, 0x02	; 2
     7d2:	d8 01       	movw	r26, r16
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	7c 93       	st	X, r23
     7d8:	6e 93       	st	-X, r22
	if81.next = &if82;
     7da:	13 96       	adiw	r26, 0x03	; 3
     7dc:	5c 92       	st	X, r5
     7de:	4e 92       	st	-X, r4
     7e0:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule8;
	rule8.if_side = &if81;
     7e2:	14 96       	adiw	r26, 0x04	; 4
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	1c 93       	st	X, r17
     7e8:	0e 93       	st	-X, r16
	rule8.then_side = &then8;
     7ea:	13 96       	adiw	r26, 0x03	; 3
     7ec:	5c 93       	st	X, r21
     7ee:	4e 93       	st	-X, r20
     7f0:	12 97       	sbiw	r26, 0x02	; 2
	rule8.next = &rule9;
     7f2:	15 96       	adiw	r26, 0x05	; 5
     7f4:	fc 93       	st	X, r31
     7f6:	ee 93       	st	-X, r30
     7f8:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 7: if C is positive and V is medium then servo is sharpRight */
	struct rule_element_type then7;
	then7.value = &oShright;
     7fa:	06 5f       	subi	r16, 0xF6	; 246
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	f8 01       	movw	r30, r16
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	20 83       	st	Z, r18
	then7.next = NULL;
     804:	13 82       	std	Z+3, r1	; 0x03
     806:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if72;
	if72.value = &medium.value;
     808:	2e 01       	movw	r4, r28
     80a:	fb e0       	ldi	r31, 0x0B	; 11
     80c:	4f 1a       	sub	r4, r31
     80e:	fe ef       	ldi	r31, 0xFE	; 254
     810:	5f 0a       	sbc	r5, r31
     812:	4e 5d       	subi	r20, 0xDE	; 222
     814:	51 09       	sbc	r21, r1
     816:	f2 01       	movw	r30, r4
     818:	51 83       	std	Z+1, r21	; 0x01
     81a:	40 83       	st	Z, r20
	if72.next = NULL;
     81c:	13 82       	std	Z+3, r1	; 0x03
     81e:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if71;
	if71.value = &positive.value;
     820:	7e 01       	movw	r14, r28
     822:	f7 e0       	ldi	r31, 0x07	; 7
     824:	ef 1a       	sub	r14, r31
     826:	fe ef       	ldi	r31, 0xFE	; 254
     828:	ff 0a       	sbc	r15, r31
     82a:	f7 01       	movw	r30, r14
     82c:	71 83       	std	Z+1, r23	; 0x01
     82e:	60 83       	st	Z, r22
	if71.next = &if72;
     830:	53 82       	std	Z+3, r5	; 0x03
     832:	42 82       	std	Z+2, r4	; 0x02
	
	struct rule_type rule7;
	rule7.if_side = &if71;
     834:	34 96       	adiw	r30, 0x04	; 4
     836:	f1 82       	std	Z+1, r15	; 0x01
     838:	e0 82       	st	Z, r14
	rule7.then_side = &then7;
     83a:	13 83       	std	Z+3, r17	; 0x03
     83c:	02 83       	std	Z+2, r16	; 0x02
	rule7.next = &rule8;
     83e:	b5 83       	std	Z+5, r27	; 0x05
     840:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 6: if C is positive and V is medium then servo is sharpRight */
	struct rule_element_type then6;
	then6.value = &oShright;
     842:	0e 5e       	subi	r16, 0xEE	; 238
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	d8 01       	movw	r26, r16
     848:	11 96       	adiw	r26, 0x01	; 1
     84a:	3c 93       	st	X, r19
     84c:	2e 93       	st	-X, r18
	then6.next = NULL;
     84e:	13 96       	adiw	r26, 0x03	; 3
     850:	1c 92       	st	X, r1
     852:	1e 92       	st	-X, r1
     854:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if62;
	if62.value = &medium.value;
     856:	60 54       	subi	r22, 0x40	; 64
     858:	7e 4f       	sbci	r23, 0xFE	; 254
     85a:	db 01       	movw	r26, r22
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	5c 93       	st	X, r21
     860:	4e 93       	st	-X, r20
	if62.next = NULL;
     862:	13 96       	adiw	r26, 0x03	; 3
     864:	1c 92       	st	X, r1
     866:	1e 92       	st	-X, r1
     868:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if61;
	if61.value = &positive.value;
     86a:	2c 5a       	subi	r18, 0xAC	; 172
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	cf 58       	subi	r28, 0x8F	; 143
     870:	dd 4f       	sbci	r29, 0xFD	; 253
     872:	e8 80       	ld	r14, Y
     874:	f9 80       	ldd	r15, Y+1	; 0x01
     876:	c1 57       	subi	r28, 0x71	; 113
     878:	d2 40       	sbci	r29, 0x02	; 2
     87a:	d9 01       	movw	r26, r18
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	fc 92       	st	X, r15
     880:	ee 92       	st	-X, r14
	if61.next = &if62;
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	7c 93       	st	X, r23
     886:	6e 93       	st	-X, r22
     888:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule6;
	rule6.if_side = &if61;
     88a:	14 96       	adiw	r26, 0x04	; 4
     88c:	11 96       	adiw	r26, 0x01	; 1
     88e:	3c 93       	st	X, r19
     890:	2e 93       	st	-X, r18
	rule6.then_side = &then6;
     892:	13 96       	adiw	r26, 0x03	; 3
     894:	1c 93       	st	X, r17
     896:	0e 93       	st	-X, r16
     898:	12 97       	sbiw	r26, 0x02	; 2
	rule6.next = &rule7;
     89a:	15 96       	adiw	r26, 0x05	; 5
     89c:	fc 93       	st	X, r31
     89e:	ee 93       	st	-X, r30
     8a0:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 5: if C is negative and V is medium then servo is sharpLeft */
	struct rule_element_type then5;
	then5.value = &oShLeft;
     8a2:	62 5f       	subi	r22, 0xF2	; 242
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	fb 01       	movw	r30, r22
     8a8:	91 82       	std	Z+1, r9	; 0x01
     8aa:	80 82       	st	Z, r8
	then5.next = NULL;
     8ac:	13 82       	std	Z+3, r1	; 0x03
     8ae:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if52;
	if52.value = &medium.value;
     8b0:	7e 01       	movw	r14, r28
     8b2:	f7 ee       	ldi	r31, 0xE7	; 231
     8b4:	ef 1a       	sub	r14, r31
     8b6:	fd ef       	ldi	r31, 0xFD	; 253
     8b8:	ff 0a       	sbc	r15, r31
     8ba:	f7 01       	movw	r30, r14
     8bc:	51 83       	std	Z+1, r21	; 0x01
     8be:	40 83       	st	Z, r20
	if52.next = NULL;
     8c0:	13 82       	std	Z+3, r1	; 0x03
     8c2:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if51;
	if51.value = &negative.value;
     8c4:	06 5e       	subi	r16, 0xE6	; 230
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	20 5f       	subi	r18, 0xF0	; 240
     8ca:	31 40       	sbci	r19, 0x01	; 1
     8cc:	f8 01       	movw	r30, r16
     8ce:	31 83       	std	Z+1, r19	; 0x01
     8d0:	20 83       	st	Z, r18
	if51.next = &if52;
     8d2:	f3 82       	std	Z+3, r15	; 0x03
     8d4:	e2 82       	std	Z+2, r14	; 0x02
	
	struct rule_type rule5;
	rule5.if_side = &if51;
     8d6:	34 96       	adiw	r30, 0x04	; 4
     8d8:	11 83       	std	Z+1, r17	; 0x01
     8da:	00 83       	st	Z, r16
	rule5.then_side = &then5;
     8dc:	73 83       	std	Z+3, r23	; 0x03
     8de:	62 83       	std	Z+2, r22	; 0x02
	rule5.next = &rule6;
     8e0:	b5 83       	std	Z+5, r27	; 0x05
     8e2:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 4: if C is zero and V is medium then servo is straight */
	struct rule_element_type then4;
	then4.value = &oStraight;
     8e4:	7e 01       	movw	r14, r28
     8e6:	19 ed       	ldi	r17, 0xD9	; 217
     8e8:	e1 1a       	sub	r14, r17
     8ea:	1d ef       	ldi	r17, 0xFD	; 253
     8ec:	f1 0a       	sbc	r15, r17
     8ee:	65 e7       	ldi	r22, 0x75	; 117
     8f0:	71 e0       	ldi	r23, 0x01	; 1
     8f2:	6c 0f       	add	r22, r28
     8f4:	7d 1f       	adc	r23, r29
     8f6:	d7 01       	movw	r26, r14
     8f8:	11 96       	adiw	r26, 0x01	; 1
     8fa:	7c 93       	st	X, r23
     8fc:	6e 93       	st	-X, r22
	then4.next = NULL;
     8fe:	13 96       	adiw	r26, 0x03	; 3
     900:	1c 92       	st	X, r1
     902:	1e 92       	st	-X, r1
     904:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if42;
	if42.value = &medium.value;
     906:	02 5f       	subi	r16, 0xF2	; 242
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	11 96       	adiw	r26, 0x01	; 1
     90e:	5c 93       	st	X, r21
     910:	4e 93       	st	-X, r20
	if42.next = NULL;
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	1c 92       	st	X, r1
     916:	1e 92       	st	-X, r1
     918:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if41;
	if41.value = &zero.value;
     91a:	66 54       	subi	r22, 0x46	; 70
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	db 01       	movw	r26, r22
     920:	11 96       	adiw	r26, 0x01	; 1
     922:	dc 92       	st	X, r13
     924:	ce 92       	st	-X, r12
	if41.next = &if42;
     926:	13 96       	adiw	r26, 0x03	; 3
     928:	1c 93       	st	X, r17
     92a:	0e 93       	st	-X, r16
     92c:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_type rule4;
	rule4.if_side = &if41;
     92e:	08 5f       	subi	r16, 0xF8	; 248
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	d8 01       	movw	r26, r16
     934:	11 96       	adiw	r26, 0x01	; 1
     936:	7c 93       	st	X, r23
     938:	6e 93       	st	-X, r22
	rule4.then_side = &then4;
     93a:	13 96       	adiw	r26, 0x03	; 3
     93c:	fc 92       	st	X, r15
     93e:	ee 92       	st	-X, r14
     940:	12 97       	sbiw	r26, 0x02	; 2
	rule4.next = &rule5;
     942:	15 96       	adiw	r26, 0x05	; 5
     944:	fc 93       	st	X, r31
     946:	ee 93       	st	-X, r30
     948:	14 97       	sbiw	r26, 0x04	; 4
	
	
	/* rule # 3: if C is negative and V is medium then servo is sharpLeft */
	struct rule_element_type then3;
	then3.value = &oShLeft;
     94a:	66 5f       	subi	r22, 0xF6	; 246
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	fb 01       	movw	r30, r22
     950:	91 82       	std	Z+1, r9	; 0x01
     952:	80 82       	st	Z, r8
	then3.next = NULL;
     954:	13 82       	std	Z+3, r1	; 0x03
     956:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if32;
	if32.value = &medium.value;
     958:	1a 96       	adiw	r26, 0x0a	; 10
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	5c 93       	st	X, r21
     95e:	4e 93       	st	-X, r20
	if32.next = NULL;
     960:	13 96       	adiw	r26, 0x03	; 3
     962:	1c 92       	st	X, r1
     964:	1e 92       	st	-X, r1
     966:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if31;
	if31.value = &negative.value;
     968:	40 5c       	subi	r20, 0xC0	; 192
     96a:	5e 4f       	sbci	r21, 0xFE	; 254
     96c:	fa 01       	movw	r30, r20
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	20 83       	st	Z, r18
	if31.next = &if32;
     972:	b3 83       	std	Z+3, r27	; 0x03
     974:	a2 83       	std	Z+2, r26	; 0x02
	
	struct rule_type rule3;
	rule3.if_side = &if31;
     976:	18 96       	adiw	r26, 0x08	; 8
     978:	11 96       	adiw	r26, 0x01	; 1
     97a:	5c 93       	st	X, r21
     97c:	4e 93       	st	-X, r20
	rule3.then_side = &then3;
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	7c 93       	st	X, r23
     982:	6e 93       	st	-X, r22
     984:	12 97       	sbiw	r26, 0x02	; 2
	rule3.next = &rule4;
     986:	15 96       	adiw	r26, 0x05	; 5
     988:	1c 93       	st	X, r17
     98a:	0e 93       	st	-X, r16
     98c:	14 97       	sbiw	r26, 0x04	; 4
	
	/* rule # 2: if C is negative and V is small then servo is slightLeft */
	struct rule_element_type then2;
	then2.value = &oSlLeft;
     98e:	08 5e       	subi	r16, 0xE8	; 232
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	f8 01       	movw	r30, r16
     994:	b1 82       	std	Z+1, r11	; 0x01
     996:	a0 82       	st	Z, r10
	then2.next = NULL;
     998:	13 82       	std	Z+3, r1	; 0x03
     99a:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if22;
	if22.value = &small.value;
     99c:	6a 5e       	subi	r22, 0xEA	; 234
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	fa e0       	ldi	r31, 0x0A	; 10
     9a2:	6f 0e       	add	r6, r31
     9a4:	71 1c       	adc	r7, r1
     9a6:	fb 01       	movw	r30, r22
     9a8:	71 82       	std	Z+1, r7	; 0x01
     9aa:	60 82       	st	Z, r6
	if22.next = NULL;
     9ac:	13 82       	std	Z+3, r1	; 0x03
     9ae:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if21;
	if21.value = &negative.value;
     9b0:	4e 5e       	subi	r20, 0xEE	; 238
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	fa 01       	movw	r30, r20
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	20 83       	st	Z, r18
	if21.next = &if22;
     9ba:	73 83       	std	Z+3, r23	; 0x03
     9bc:	62 83       	std	Z+2, r22	; 0x02
	
	struct rule_type rule2;
	rule2.if_side = &if21;
     9be:	68 5f       	subi	r22, 0xF8	; 248
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	fb 01       	movw	r30, r22
     9c4:	51 83       	std	Z+1, r21	; 0x01
     9c6:	40 83       	st	Z, r20
	rule2.then_side = &then2;
     9c8:	13 83       	std	Z+3, r17	; 0x03
     9ca:	02 83       	std	Z+2, r16	; 0x02
	rule2.next = &rule3;
     9cc:	b5 83       	std	Z+5, r27	; 0x05
     9ce:	a4 83       	std	Z+4, r26	; 0x04
	
	/* rule # 1: if C is zero and V is small then servo is slightRight */
	struct rule_element_type then1;
	then1.value = &oSlRight;
     9d0:	58 96       	adiw	r26, 0x18	; 24
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	9c 93       	st	X, r25
     9d6:	8e 93       	st	-X, r24
	then1.next = NULL;
     9d8:	13 96       	adiw	r26, 0x03	; 3
     9da:	1c 92       	st	X, r1
     9dc:	1e 92       	st	-X, r1
     9de:	12 97       	sbiw	r26, 0x02	; 2
	
	struct rule_element_type if12;
	if12.value = &small.value;
     9e0:	42 5f       	subi	r20, 0xF2	; 242
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	fa 01       	movw	r30, r20
     9e6:	71 82       	std	Z+1, r7	; 0x01
     9e8:	60 82       	st	Z, r6
	if12.next = NULL;
     9ea:	13 82       	std	Z+3, r1	; 0x03
     9ec:	12 82       	std	Z+2, r1	; 0x02
	
	struct rule_element_type if11;
	if11.value = &negative.value;
     9ee:	86 52       	subi	r24, 0x26	; 38
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	31 83       	std	Z+1, r19	; 0x01
     9f6:	20 83       	st	Z, r18
	if11.next = &if12;
     9f8:	53 83       	std	Z+3, r21	; 0x03
     9fa:	42 83       	std	Z+2, r20	; 0x02
	
	struct rule_type rule1;
	rule1.if_side = &if11;
     9fc:	34 96       	adiw	r30, 0x04	; 4
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
	rule1.then_side = &then1;
     a02:	b3 83       	std	Z+3, r27	; 0x03
     a04:	a2 83       	std	Z+2, r26	; 0x02
	rule1.next = &rule2;
     a06:	75 83       	std	Z+5, r23	; 0x05
     a08:	64 83       	std	Z+4, r22	; 0x04
		
	// pointers to top of lists
	Rule_Base = &rule1;
     a0a:	f0 93 90 02 	sts	0x0290, r31
     a0e:	e0 93 8f 02 	sts	0x028F, r30
	System_Inputs = &delta_C;
     a12:	ee 24       	eor	r14, r14
     a14:	e3 94       	inc	r14
     a16:	f1 2c       	mov	r15, r1
     a18:	ec 0e       	add	r14, r28
     a1a:	fd 1e       	adc	r15, r29
     a1c:	f0 92 8e 02 	sts	0x028E, r15
     a20:	e0 92 8d 02 	sts	0x028D, r14
	System_Outputs = &servo;
     a24:	30 92 8c 02 	sts	0x028C, r3
     a28:	20 92 8b 02 	sts	0x028B, r2
	
	
	// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     a2c:	c1 59       	subi	r28, 0x91	; 145
     a2e:	dd 4f       	sbci	r29, 0xFD	; 253
     a30:	28 81       	ld	r18, Y
     a32:	39 81       	ldd	r19, Y+1	; 0x01
     a34:	cf 56       	subi	r28, 0x6F	; 111
     a36:	d2 40       	sbci	r29, 0x02	; 2
     a38:	33 23       	and	r19, r19
     a3a:	1c f4       	brge	.+6      	; 0xa42 <FLC_steering+0x976>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     a3c:	1c 86       	std	Y+12, r1	; 0x0c
     a3e:	1b 86       	std	Y+11, r1	; 0x0b
     a40:	0d c0       	rjmp	.+26     	; 0xa5c <FLC_steering+0x990>
	}
	else if(c>250)			// if sensor value is bigger than delta_C's input set's upper limit
     a42:	c1 59       	subi	r28, 0x91	; 145
     a44:	dd 4f       	sbci	r29, 0xFD	; 253
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	cf 56       	subi	r28, 0x6F	; 111
     a4c:	d2 40       	sbci	r29, 0x02	; 2
     a4e:	8b 3f       	cpi	r24, 0xFB	; 251
     a50:	91 05       	cpc	r25, r1
     a52:	24 f0       	brlt	.+8      	; 0xa5c <FLC_steering+0x990>
	{
		delta_C.value = 250;  // force input value to lowest point in delta_C's input set
     a54:	8a ef       	ldi	r24, 0xFA	; 250
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	9c 87       	std	Y+12, r25	; 0x0c
     a5a:	8b 87       	std	Y+11, r24	; 0x0b
	{
		delta_V.value = s;
	}
	
	// the methods performing the FLC
	fuzzification();
     a5c:	3b d5       	rcall	.+2678   	; 0x14d4 <fuzzification>
	rule_evaluation();
     a5e:	61 d5       	rcall	.+2754   	; 0x1522 <rule_evaluation>
	defuzzification();
     a60:	a6 d5       	rcall	.+2892   	; 0x15ae <defuzzification>
	setServo(servo.value);
     a62:	c3 5d       	subi	r28, 0xD3	; 211
     a64:	de 4f       	sbci	r29, 0xFE	; 254
     a66:	88 81       	ld	r24, Y
     a68:	99 81       	ldd	r25, Y+1	; 0x01
     a6a:	cd 52       	subi	r28, 0x2D	; 45
     a6c:	d1 40       	sbci	r29, 0x01	; 1
     a6e:	4d d7       	rcall	.+3738   	; 0x190a <setServo>
}
     a70:	ce 58       	subi	r28, 0x8E	; 142
     a72:	dd 4f       	sbci	r29, 0xFD	; 253
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	bf 90       	pop	r11
     a90:	af 90       	pop	r10
     a92:	9f 90       	pop	r9
     a94:	8f 90       	pop	r8
     a96:	7f 90       	pop	r7
     a98:	6f 90       	pop	r6
     a9a:	5f 90       	pop	r5
     a9c:	4f 90       	pop	r4
     a9e:	3f 90       	pop	r3
     aa0:	2f 90       	pop	r2
     aa2:	08 95       	ret

00000aa4 <FLC_road>:
 *
 * Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
 * Output: speed, (PWM counter)
 */
void FLC_road(int currentOCR1A, int midSonicRange)
{
     aa4:	2f 92       	push	r2
     aa6:	3f 92       	push	r3
     aa8:	4f 92       	push	r4
     aaa:	5f 92       	push	r5
     aac:	6f 92       	push	r6
     aae:	7f 92       	push	r7
     ab0:	8f 92       	push	r8
     ab2:	9f 92       	push	r9
     ab4:	af 92       	push	r10
     ab6:	bf 92       	push	r11
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	c4 52       	subi	r28, 0x24	; 36
     ace:	d2 40       	sbci	r29, 0x02	; 2
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
    
    
    ////// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
   	struct io_type distance; strcpy(distance.name, "distance");
     ada:	29 e0       	ldi	r18, 0x09	; 9
     adc:	e6 ea       	ldi	r30, 0xA6	; 166
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	de 01       	movw	r26, r28
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	01 90       	ld	r0, Z+
     ae6:	0d 92       	st	X+, r0
     ae8:	2a 95       	dec	r18
     aea:	e1 f7       	brne	.-8      	; 0xae4 <FLC_road+0x40>
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     aec:	6e 01       	movw	r12, r28
     aee:	21 e1       	ldi	r18, 0x11	; 17
     af0:	c2 0e       	add	r12, r18
     af2:	d1 1c       	adc	r13, r1
     af4:	29 e0       	ldi	r18, 0x09	; 9
     af6:	ef ea       	ldi	r30, 0xAF	; 175
     af8:	f1 e0       	ldi	r31, 0x01	; 1
     afa:	d6 01       	movw	r26, r12
     afc:	01 90       	ld	r0, Z+
     afe:	0d 92       	st	X+, r0
     b00:	2a 95       	dec	r18
     b02:	e1 f7       	brne	.-8      	; 0xafc <FLC_road+0x58>
    newMf->value = 0;
     b04:	1c 8e       	std	Y+28, r1	; 0x1c
     b06:	1b 8e       	std	Y+27, r1	; 0x1b
    newMf->point1 = p1;
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	3f ef       	ldi	r19, 0xFF	; 255
     b0c:	3e 8f       	std	Y+30, r19	; 0x1e
     b0e:	2d 8f       	std	Y+29, r18	; 0x1d
    newMf->point2 = p4;
     b10:	2e e3       	ldi	r18, 0x3E	; 62
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	38 a3       	std	Y+32, r19	; 0x20
     b16:	2f 8f       	std	Y+31, r18	; 0x1f
    newMf->slope1 = (int)100/(p2-p1);
     b18:	0f 2e       	mov	r0, r31
     b1a:	f4 e6       	ldi	r31, 0x64	; 100
     b1c:	8f 2e       	mov	r8, r31
     b1e:	91 2c       	mov	r9, r1
     b20:	f0 2d       	mov	r31, r0
     b22:	9a a2       	std	Y+34, r9	; 0x22
     b24:	89 a2       	std	Y+33, r8	; 0x21
    newMf->slope2 = (int)100/(p4-p3);
     b26:	42 e0       	ldi	r20, 0x02	; 2
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	5c a3       	std	Y+36, r21	; 0x24
     b2c:	4b a3       	std	Y+35, r20	; 0x23
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     b2e:	7e 01       	movw	r14, r28
     b30:	37 e2       	ldi	r19, 0x27	; 39
     b32:	e3 0e       	add	r14, r19
     b34:	f1 1c       	adc	r15, r1
     b36:	25 e0       	ldi	r18, 0x05	; 5
     b38:	e8 eb       	ldi	r30, 0xB8	; 184
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	d7 01       	movw	r26, r14
     b3e:	01 90       	ld	r0, Z+
     b40:	0d 92       	st	X+, r0
     b42:	2a 95       	dec	r18
     b44:	e1 f7       	brne	.-8      	; 0xb3e <FLC_road+0x9a>
    newMf->value = 0;
     b46:	1a aa       	std	Y+50, r1	; 0x32
     b48:	19 aa       	std	Y+49, r1	; 0x31
    newMf->point1 = p1;
     b4a:	26 e1       	ldi	r18, 0x16	; 22
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	3c ab       	std	Y+52, r19	; 0x34
     b50:	2b ab       	std	Y+51, r18	; 0x33
    newMf->point2 = p4;
     b52:	0f 2e       	mov	r0, r31
     b54:	f6 e9       	ldi	r31, 0x96	; 150
     b56:	af 2e       	mov	r10, r31
     b58:	b1 2c       	mov	r11, r1
     b5a:	f0 2d       	mov	r31, r0
     b5c:	be aa       	std	Y+54, r11	; 0x36
     b5e:	ad aa       	std	Y+53, r10	; 0x35
    newMf->slope1 = (int)100/(p2-p1);
     b60:	58 af       	std	Y+56, r21	; 0x38
     b62:	4f ab       	std	Y+55, r20	; 0x37
    newMf->slope2 = (int)100/(p4-p3);
     b64:	5a af       	std	Y+58, r21	; 0x3a
     b66:	49 af       	std	Y+57, r20	; 0x39
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     b68:	8e 01       	movw	r16, r28
     b6a:	03 5c       	subi	r16, 0xC3	; 195
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	25 e0       	ldi	r18, 0x05	; 5
     b70:	ed eb       	ldi	r30, 0xBD	; 189
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	d8 01       	movw	r26, r16
     b76:	01 90       	ld	r0, Z+
     b78:	0d 92       	st	X+, r0
     b7a:	2a 95       	dec	r18
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <FLC_road+0xd2>
    newMf->value = 0;
     b7e:	29 96       	adiw	r28, 0x09	; 9
     b80:	1f ae       	std	Y+63, r1	; 0x3f
     b82:	1e ae       	std	Y+62, r1	; 0x3e
     b84:	29 97       	sbiw	r28, 0x09	; 9
    newMf->point1 = p1;
     b86:	2e e6       	ldi	r18, 0x6E	; 110
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	2b 96       	adiw	r28, 0x0b	; 11
     b8c:	3f af       	std	Y+63, r19	; 0x3f
     b8e:	2e af       	std	Y+62, r18	; 0x3e
     b90:	2b 97       	sbiw	r28, 0x0b	; 11
    newMf->point2 = p4;
     b92:	2e ed       	ldi	r18, 0xDE	; 222
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	2d 96       	adiw	r28, 0x0d	; 13
     b98:	3f af       	std	Y+63, r19	; 0x3f
     b9a:	2e af       	std	Y+62, r18	; 0x3e
     b9c:	2d 97       	sbiw	r28, 0x0d	; 13
    newMf->slope1 = (int)100/(p2-p1);
     b9e:	2f 96       	adiw	r28, 0x0f	; 15
     ba0:	5f af       	std	Y+63, r21	; 0x3f
     ba2:	4e af       	std	Y+62, r20	; 0x3e
     ba4:	2f 97       	sbiw	r28, 0x0f	; 15
    newMf->slope2 = (int)100/(p4-p3);
     ba6:	61 96       	adiw	r28, 0x11	; 17
     ba8:	5f af       	std	Y+63, r21	; 0x3f
     baa:	4e af       	std	Y+62, r20	; 0x3e
     bac:	61 97       	sbiw	r28, 0x11	; 17
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     bae:	9e 01       	movw	r18, r28
     bb0:	2d 5a       	subi	r18, 0xAD	; 173
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	0f 2e       	mov	r0, r31
     bb6:	f7 e0       	ldi	r31, 0x07	; 7
     bb8:	7f 2e       	mov	r7, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	e2 ec       	ldi	r30, 0xC2	; 194
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	d9 01       	movw	r26, r18
     bc2:	01 90       	ld	r0, Z+
     bc4:	0d 92       	st	X+, r0
     bc6:	7a 94       	dec	r7
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <FLC_road+0x11e>
    newMf->value = 0;
     bca:	d9 01       	movw	r26, r18
     bcc:	1b 96       	adiw	r26, 0x0b	; 11
     bce:	1c 92       	st	X, r1
     bd0:	1e 92       	st	-X, r1
     bd2:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     bd4:	1d 96       	adiw	r26, 0x0d	; 13
     bd6:	bc 92       	st	X, r11
     bd8:	ae 92       	st	-X, r10
     bda:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     bdc:	ed e2       	ldi	r30, 0x2D	; 45
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	1f 96       	adiw	r26, 0x0f	; 15
     be2:	fc 93       	st	X, r31
     be4:	ee 93       	st	-X, r30
     be6:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     be8:	51 96       	adiw	r26, 0x11	; 17
     bea:	5c 93       	st	X, r21
     bec:	4e 93       	st	-X, r20
     bee:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     bf0:	53 96       	adiw	r26, 0x13	; 19
     bf2:	9c 92       	st	X, r9
     bf4:	8e 92       	st	-X, r8
     bf6:	52 97       	sbiw	r26, 0x12	; 18
    set_newMf(&twoM, "twoM", 110, 160, 172, 222);
    struct mf_type threeM;
    set_newMf(&threeM, "threeM", 150, 200, 300, 301);
    
    // Linked list for MFs
    distance.membership_functions = &stopDist;
     bf8:	de 86       	std	Y+14, r13	; 0x0e
     bfa:	cd 86       	std	Y+13, r12	; 0x0d
    stopDist.next = &oneM;
     bfc:	fe a2       	std	Y+38, r15	; 0x26
     bfe:	ed a2       	std	Y+37, r14	; 0x25
    oneM.next = &twoM;
     c00:	1c af       	std	Y+60, r17	; 0x3c
     c02:	0b af       	std	Y+59, r16	; 0x3b
    twoM.next = &threeM;
     c04:	63 96       	adiw	r28, 0x13	; 19
     c06:	3f af       	std	Y+63, r19	; 0x3f
     c08:	2e af       	std	Y+62, r18	; 0x3e
     c0a:	63 97       	sbiw	r28, 0x13	; 19
    threeM.next = NULL;
     c0c:	55 96       	adiw	r26, 0x15	; 21
     c0e:	1c 92       	st	X, r1
     c10:	1e 92       	st	-X, r1
     c12:	54 97       	sbiw	r26, 0x14	; 20
    
    // Variable assigned its reference value
    if(midSonicRange < MIN_DISTANCE)
     c14:	77 23       	and	r23, r23
     c16:	1c f4       	brge	.+6      	; 0xc1e <FLC_road+0x17a>
    {
        distance.value = MIN_DISTANCE;
     c18:	1c 86       	std	Y+12, r1	; 0x0c
     c1a:	1b 86       	std	Y+11, r1	; 0x0b
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <FLC_road+0x190>
    }
    else if (midSonicRange > MAX_DISTANCE)
     c1e:	6d 32       	cpi	r22, 0x2D	; 45
     c20:	b1 e0       	ldi	r27, 0x01	; 1
     c22:	7b 07       	cpc	r23, r27
     c24:	2c f0       	brlt	.+10     	; 0xc30 <FLC_road+0x18c>
    {
        distance.value = MAX_DISTANCE;
     c26:	2c e2       	ldi	r18, 0x2C	; 44
     c28:	31 e0       	ldi	r19, 0x01	; 1
     c2a:	3c 87       	std	Y+12, r19	; 0x0c
     c2c:	2b 87       	std	Y+11, r18	; 0x0b
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <FLC_road+0x190>
    }
    else
    {
        distance.value = midSonicRange;
     c30:	7c 87       	std	Y+12, r23	; 0x0c
     c32:	6b 87       	std	Y+11, r22	; 0x0b
    }
    
    
    ////// DECLARATION OF DISTANCE INPUT VARIABLE ///////////////////////////////////
    struct io_type speed; strcpy(speed.name, "speed");
     c34:	26 e0       	ldi	r18, 0x06	; 6
     c36:	e9 ec       	ldi	r30, 0xC9	; 201
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	de 01       	movw	r26, r28
     c3c:	a7 59       	subi	r26, 0x97	; 151
     c3e:	bf 4f       	sbci	r27, 0xFF	; 255
     c40:	01 90       	ld	r0, Z+
     c42:	0d 92       	st	X+, r0
     c44:	2a 95       	dec	r18
     c46:	e1 f7       	brne	.-8      	; 0xc40 <FLC_road+0x19c>
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     c48:	7e 01       	movw	r14, r28
     c4a:	e9 e7       	ldi	r30, 0x79	; 121
     c4c:	ee 0e       	add	r14, r30
     c4e:	f1 1c       	adc	r15, r1
     c50:	26 e0       	ldi	r18, 0x06	; 6
     c52:	ef ec       	ldi	r30, 0xCF	; 207
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	d7 01       	movw	r26, r14
     c58:	01 90       	ld	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	2a 95       	dec	r18
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <FLC_road+0x1b4>
    newMf->value = 0;
     c60:	d7 01       	movw	r26, r14
     c62:	1b 96       	adiw	r26, 0x0b	; 11
     c64:	1c 92       	st	X, r1
     c66:	1e 92       	st	-X, r1
     c68:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     c6a:	2d eb       	ldi	r18, 0xBD	; 189
     c6c:	3a e0       	ldi	r19, 0x0A	; 10
     c6e:	1d 96       	adiw	r26, 0x0d	; 13
     c70:	3c 93       	st	X, r19
     c72:	2e 93       	st	-X, r18
     c74:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     c76:	2a e9       	ldi	r18, 0x9A	; 154
     c78:	3b e0       	ldi	r19, 0x0B	; 11
     c7a:	1f 96       	adiw	r26, 0x0f	; 15
     c7c:	3c 93       	st	X, r19
     c7e:	2e 93       	st	-X, r18
     c80:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     c82:	0f 2e       	mov	r0, r31
     c84:	f4 e6       	ldi	r31, 0x64	; 100
     c86:	cf 2e       	mov	r12, r31
     c88:	d1 2c       	mov	r13, r1
     c8a:	f0 2d       	mov	r31, r0
     c8c:	51 96       	adiw	r26, 0x11	; 17
     c8e:	dc 92       	st	X, r13
     c90:	ce 92       	st	-X, r12
     c92:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     c94:	53 96       	adiw	r26, 0x13	; 19
     c96:	1c 92       	st	X, r1
     c98:	1e 92       	st	-X, r1
     c9a:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     c9c:	8e 01       	movw	r16, r28
     c9e:	01 57       	subi	r16, 0x71	; 113
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	4c e6       	ldi	r20, 0x6C	; 108
     ca4:	5f e6       	ldi	r21, 0x6F	; 111
     ca6:	67 e7       	ldi	r22, 0x77	; 119
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	f8 01       	movw	r30, r16
     cac:	40 83       	st	Z, r20
     cae:	51 83       	std	Z+1, r21	; 0x01
     cb0:	62 83       	std	Z+2, r22	; 0x02
     cb2:	73 83       	std	Z+3, r23	; 0x03
    newMf->value = 0;
     cb4:	13 86       	std	Z+11, r1	; 0x0b
     cb6:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     cb8:	2d ec       	ldi	r18, 0xCD	; 205
     cba:	3a e0       	ldi	r19, 0x0A	; 10
     cbc:	35 87       	std	Z+13, r19	; 0x0d
     cbe:	24 87       	std	Z+12, r18	; 0x0c
    newMf->point2 = p4;
     cc0:	23 e1       	ldi	r18, 0x13	; 19
     cc2:	3b e0       	ldi	r19, 0x0B	; 11
     cc4:	37 87       	std	Z+15, r19	; 0x0f
     cc6:	26 87       	std	Z+14, r18	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     cc8:	24 e0       	ldi	r18, 0x04	; 4
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	31 8b       	std	Z+17, r19	; 0x11
     cce:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
     cd0:	33 8b       	std	Z+19, r19	; 0x13
     cd2:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     cd4:	be 01       	movw	r22, r28
     cd6:	6b 55       	subi	r22, 0x5B	; 91
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	49 e0       	ldi	r20, 0x09	; 9
     cdc:	e5 ed       	ldi	r30, 0xD5	; 213
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	db 01       	movw	r26, r22
     ce2:	01 90       	ld	r0, Z+
     ce4:	0d 92       	st	X+, r0
     ce6:	4a 95       	dec	r20
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <FLC_road+0x23e>
    newMf->value = 0;
     cea:	db 01       	movw	r26, r22
     cec:	1b 96       	adiw	r26, 0x0b	; 11
     cee:	1c 92       	st	X, r1
     cf0:	1e 92       	st	-X, r1
     cf2:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     cf4:	40 ef       	ldi	r20, 0xF0	; 240
     cf6:	5a e0       	ldi	r21, 0x0A	; 10
     cf8:	1d 96       	adiw	r26, 0x0d	; 13
     cfa:	5c 93       	st	X, r21
     cfc:	4e 93       	st	-X, r20
     cfe:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     d00:	40 e4       	ldi	r20, 0x40	; 64
     d02:	5b e0       	ldi	r21, 0x0B	; 11
     d04:	1f 96       	adiw	r26, 0x0f	; 15
     d06:	5c 93       	st	X, r21
     d08:	4e 93       	st	-X, r20
     d0a:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     d0c:	51 96       	adiw	r26, 0x11	; 17
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     d14:	53 96       	adiw	r26, 0x13	; 19
     d16:	3c 93       	st	X, r19
     d18:	2e 93       	st	-X, r18
     d1a:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     d1c:	ae 01       	movw	r20, r28
     d1e:	45 54       	subi	r20, 0x45	; 69
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	27 e0       	ldi	r18, 0x07	; 7
     d24:	e1 e5       	ldi	r30, 0x51	; 81
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	da 01       	movw	r26, r20
     d2a:	01 90       	ld	r0, Z+
     d2c:	0d 92       	st	X+, r0
     d2e:	2a 95       	dec	r18
     d30:	e1 f7       	brne	.-8      	; 0xd2a <FLC_road+0x286>
    newMf->value = 0;
     d32:	fa 01       	movw	r30, r20
     d34:	13 86       	std	Z+11, r1	; 0x0b
     d36:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     d38:	2d e1       	ldi	r18, 0x1D	; 29
     d3a:	3b e0       	ldi	r19, 0x0B	; 11
     d3c:	35 87       	std	Z+13, r19	; 0x0d
     d3e:	24 87       	std	Z+12, r18	; 0x0c
    newMf->point2 = p4;
     d40:	2d e6       	ldi	r18, 0x6D	; 109
     d42:	3b e0       	ldi	r19, 0x0B	; 11
     d44:	37 87       	std	Z+15, r19	; 0x0f
     d46:	26 87       	std	Z+14, r18	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     d48:	23 e0       	ldi	r18, 0x03	; 3
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	31 8b       	std	Z+17, r19	; 0x11
     d4e:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
     d50:	33 8b       	std	Z+19, r19	; 0x13
     d52:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     d54:	9e 01       	movw	r18, r28
     d56:	2f 52       	subi	r18, 0x2F	; 47
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	0f 2e       	mov	r0, r31
     d5c:	f5 e0       	ldi	r31, 0x05	; 5
     d5e:	bf 2e       	mov	r11, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	e8 e5       	ldi	r30, 0x58	; 88
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	d9 01       	movw	r26, r18
     d68:	01 90       	ld	r0, Z+
     d6a:	0d 92       	st	X+, r0
     d6c:	ba 94       	dec	r11
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <FLC_road+0x2c4>
    newMf->value = 0;
     d70:	d9 01       	movw	r26, r18
     d72:	1b 96       	adiw	r26, 0x0b	; 11
     d74:	1c 92       	st	X, r1
     d76:	1e 92       	st	-X, r1
     d78:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     d7a:	ea e4       	ldi	r30, 0x4A	; 74
     d7c:	fb e0       	ldi	r31, 0x0B	; 11
     d7e:	1d 96       	adiw	r26, 0x0d	; 13
     d80:	fc 93       	st	X, r31
     d82:	ee 93       	st	-X, r30
     d84:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     d86:	e3 e7       	ldi	r30, 0x73	; 115
     d88:	fb e0       	ldi	r31, 0x0B	; 11
     d8a:	1f 96       	adiw	r26, 0x0f	; 15
     d8c:	fc 93       	st	X, r31
     d8e:	ee 93       	st	-X, r30
     d90:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     d92:	ea e0       	ldi	r30, 0x0A	; 10
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	51 96       	adiw	r26, 0x11	; 17
     d98:	fc 93       	st	X, r31
     d9a:	ee 93       	st	-X, r30
     d9c:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     d9e:	53 96       	adiw	r26, 0x13	; 19
     da0:	dc 92       	st	X, r13
     da2:	ce 92       	st	-X, r12
     da4:	52 97       	sbiw	r26, 0x12	; 18
    set_newMf(&medium, "medium", 2845, 2878, 2892, 2925);
    struct mf_type high;
    set_newMf(&high, "high", 2890, 2900, 2930, 2931);
    
    // Linked list for MFs
    speed.membership_functions = &still;
     da6:	e7 96       	adiw	r28, 0x37	; 55
     da8:	ff ae       	std	Y+63, r15	; 0x3f
     daa:	ee ae       	std	Y+62, r14	; 0x3e
     dac:	e7 97       	sbiw	r28, 0x37	; 55
    still.next = &low;
     dae:	f7 01       	movw	r30, r14
     db0:	15 8b       	std	Z+21, r17	; 0x15
     db2:	04 8b       	std	Z+20, r16	; 0x14
    low.next = &cruising;
     db4:	d8 01       	movw	r26, r16
     db6:	55 96       	adiw	r26, 0x15	; 21
     db8:	7c 93       	st	X, r23
     dba:	6e 93       	st	-X, r22
     dbc:	54 97       	sbiw	r26, 0x14	; 20
    cruising.next = &medium;
     dbe:	fb 01       	movw	r30, r22
     dc0:	55 8b       	std	Z+21, r21	; 0x15
     dc2:	44 8b       	std	Z+20, r20	; 0x14
    medium.next = &high;
     dc4:	da 01       	movw	r26, r20
     dc6:	55 96       	adiw	r26, 0x15	; 21
     dc8:	3c 93       	st	X, r19
     dca:	2e 93       	st	-X, r18
     dcc:	54 97       	sbiw	r26, 0x14	; 20
    high.next = NULL;
     dce:	f9 01       	movw	r30, r18
     dd0:	15 8a       	std	Z+21, r1	; 0x15
     dd2:	14 8a       	std	Z+20, r1	; 0x14
    
    // Variable assigned it's reference value
    if (currentOCR1A<MIN_SPEED) {
     dd4:	8e 3b       	cpi	r24, 0xBE	; 190
     dd6:	fa e0       	ldi	r31, 0x0A	; 10
     dd8:	9f 07       	cpc	r25, r31
     dda:	3c f4       	brge	.+14     	; 0xdea <FLC_road+0x346>
        speed.value = MIN_SPEED;
     ddc:	8e eb       	ldi	r24, 0xBE	; 190
     dde:	9a e0       	ldi	r25, 0x0A	; 10
     de0:	e5 96       	adiw	r28, 0x35	; 53
     de2:	9f af       	std	Y+63, r25	; 0x3f
     de4:	8e af       	std	Y+62, r24	; 0x3e
     de6:	e5 97       	sbiw	r28, 0x35	; 53
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <FLC_road+0x364>
    }
    else if (currentOCR1A>MAX_SPEED)
     dea:	83 37       	cpi	r24, 0x73	; 115
     dec:	2b e0       	ldi	r18, 0x0B	; 11
     dee:	92 07       	cpc	r25, r18
     df0:	3c f0       	brlt	.+14     	; 0xe00 <FLC_road+0x35c>
    {
        speed.value = MAX_SPEED;
     df2:	82 e7       	ldi	r24, 0x72	; 114
     df4:	9b e0       	ldi	r25, 0x0B	; 11
     df6:	e5 96       	adiw	r28, 0x35	; 53
     df8:	9f af       	std	Y+63, r25	; 0x3f
     dfa:	8e af       	std	Y+62, r24	; 0x3e
     dfc:	e5 97       	sbiw	r28, 0x35	; 53
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <FLC_road+0x364>
    }
    else
    {
        speed.value = currentOCR1A;
     e00:	e5 96       	adiw	r28, 0x35	; 53
     e02:	9f af       	std	Y+63, r25	; 0x3f
     e04:	8e af       	std	Y+62, r24	; 0x3e
     e06:	e5 97       	sbiw	r28, 0x35	; 53
    }
    
    
    ////// DECLARATION OF PWM OUTPUT VARIABLE ///////////////////////////////////
   	struct io_type pwm; strcpy(pwm.name, "pwm");
     e08:	3e 01       	movw	r6, r28
     e0a:	37 ee       	ldi	r19, 0xE7	; 231
     e0c:	63 0e       	add	r6, r19
     e0e:	71 1c       	adc	r7, r1
     e10:	80 e7       	ldi	r24, 0x70	; 112
     e12:	97 e7       	ldi	r25, 0x77	; 119
     e14:	ad e6       	ldi	r26, 0x6D	; 109
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	f3 01       	movw	r30, r6
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	a2 83       	std	Z+2, r26	; 0x02
     e20:	b3 83       	std	Z+3, r27	; 0x03
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     e22:	ce 01       	movw	r24, r28
     e24:	89 50       	subi	r24, 0x09	; 9
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	29 e0       	ldi	r18, 0x09	; 9
     e2a:	ee ed       	ldi	r30, 0xDE	; 222
     e2c:	f1 e0       	ldi	r31, 0x01	; 1
     e2e:	dc 01       	movw	r26, r24
     e30:	01 90       	ld	r0, Z+
     e32:	0d 92       	st	X+, r0
     e34:	2a 95       	dec	r18
     e36:	e1 f7       	brne	.-8      	; 0xe30 <FLC_road+0x38c>
    newMf->value = 0;
     e38:	dc 01       	movw	r26, r24
     e3a:	1b 96       	adiw	r26, 0x0b	; 11
     e3c:	1c 92       	st	X, r1
     e3e:	1e 92       	st	-X, r1
     e40:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     e42:	2d eb       	ldi	r18, 0xBD	; 189
     e44:	3a e0       	ldi	r19, 0x0A	; 10
     e46:	1d 96       	adiw	r26, 0x0d	; 13
     e48:	3c 93       	st	X, r19
     e4a:	2e 93       	st	-X, r18
     e4c:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     e4e:	26 ee       	ldi	r18, 0xE6	; 230
     e50:	3a e0       	ldi	r19, 0x0A	; 10
     e52:	1f 96       	adiw	r26, 0x0f	; 15
     e54:	3c 93       	st	X, r19
     e56:	2e 93       	st	-X, r18
     e58:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     e5a:	24 e6       	ldi	r18, 0x64	; 100
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	51 96       	adiw	r26, 0x11	; 17
     e60:	3c 93       	st	X, r19
     e62:	2e 93       	st	-X, r18
     e64:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     e66:	24 e0       	ldi	r18, 0x04	; 4
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	53 96       	adiw	r26, 0x13	; 19
     e6c:	3c 93       	st	X, r19
     e6e:	2e 93       	st	-X, r18
     e70:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     e72:	4e 01       	movw	r8, r28
     e74:	b3 ef       	ldi	r27, 0xF3	; 243
     e76:	8b 1a       	sub	r8, r27
     e78:	be ef       	ldi	r27, 0xFE	; 254
     e7a:	9b 0a       	sbc	r9, r27
     e7c:	45 e0       	ldi	r20, 0x05	; 5
     e7e:	e7 ee       	ldi	r30, 0xE7	; 231
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	d4 01       	movw	r26, r8
     e84:	01 90       	ld	r0, Z+
     e86:	0d 92       	st	X+, r0
     e88:	4a 95       	dec	r20
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <FLC_road+0x3e0>
    newMf->value = 0;
     e8c:	f4 01       	movw	r30, r8
     e8e:	13 86       	std	Z+11, r1	; 0x0b
     e90:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     e92:	4d ec       	ldi	r20, 0xCD	; 205
     e94:	5a e0       	ldi	r21, 0x0A	; 10
     e96:	55 87       	std	Z+13, r21	; 0x0d
     e98:	44 87       	std	Z+12, r20	; 0x0c
    newMf->point2 = p4;
     e9a:	44 e1       	ldi	r20, 0x14	; 20
     e9c:	5b e0       	ldi	r21, 0x0B	; 11
     e9e:	57 87       	std	Z+15, r21	; 0x0f
     ea0:	46 87       	std	Z+14, r20	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     ea2:	31 8b       	std	Z+17, r19	; 0x11
     ea4:	20 8b       	std	Z+16, r18	; 0x10
    newMf->slope2 = (int)100/(p4-p3);
     ea6:	33 8b       	std	Z+19, r19	; 0x13
     ea8:	22 8b       	std	Z+18, r18	; 0x12
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     eaa:	8e 01       	movw	r16, r28
     eac:	0d 5d       	subi	r16, 0xDD	; 221
     eae:	1e 4f       	sbci	r17, 0xFE	; 254
     eb0:	27 e0       	ldi	r18, 0x07	; 7
     eb2:	ec ee       	ldi	r30, 0xEC	; 236
     eb4:	f1 e0       	ldi	r31, 0x01	; 1
     eb6:	d8 01       	movw	r26, r16
     eb8:	01 90       	ld	r0, Z+
     eba:	0d 92       	st	X+, r0
     ebc:	2a 95       	dec	r18
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <FLC_road+0x414>
    newMf->value = 0;
     ec0:	d8 01       	movw	r26, r16
     ec2:	1b 96       	adiw	r26, 0x0b	; 11
     ec4:	1c 92       	st	X, r1
     ec6:	1e 92       	st	-X, r1
     ec8:	1a 97       	sbiw	r26, 0x0a	; 10
    newMf->point1 = p1;
     eca:	20 ef       	ldi	r18, 0xF0	; 240
     ecc:	3a e0       	ldi	r19, 0x0A	; 10
     ece:	1d 96       	adiw	r26, 0x0d	; 13
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	1c 97       	sbiw	r26, 0x0c	; 12
    newMf->point2 = p4;
     ed6:	20 e4       	ldi	r18, 0x40	; 64
     ed8:	3b e0       	ldi	r19, 0x0B	; 11
     eda:	1f 96       	adiw	r26, 0x0f	; 15
     edc:	3c 93       	st	X, r19
     ede:	2e 93       	st	-X, r18
     ee0:	1e 97       	sbiw	r26, 0x0e	; 14
    newMf->slope1 = (int)100/(p2-p1);
     ee2:	23 e0       	ldi	r18, 0x03	; 3
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	51 96       	adiw	r26, 0x11	; 17
     ee8:	3c 93       	st	X, r19
     eea:	2e 93       	st	-X, r18
     eec:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     eee:	53 96       	adiw	r26, 0x13	; 19
     ef0:	3c 93       	st	X, r19
     ef2:	2e 93       	st	-X, r18
     ef4:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     ef6:	9e 01       	movw	r18, r28
     ef8:	27 5c       	subi	r18, 0xC7	; 199
     efa:	3e 4f       	sbci	r19, 0xFE	; 254
     efc:	48 e0       	ldi	r20, 0x08	; 8
     efe:	e3 ef       	ldi	r30, 0xF3	; 243
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	d9 01       	movw	r26, r18
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	4a 95       	dec	r20
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <FLC_road+0x460>
    newMf->value = 0;
     f0c:	f9 01       	movw	r30, r18
     f0e:	13 86       	std	Z+11, r1	; 0x0b
     f10:	12 86       	std	Z+10, r1	; 0x0a
    newMf->point1 = p1;
     f12:	4c e1       	ldi	r20, 0x1C	; 28
     f14:	5b e0       	ldi	r21, 0x0B	; 11
     f16:	55 87       	std	Z+13, r21	; 0x0d
     f18:	44 87       	std	Z+12, r20	; 0x0c
    newMf->point2 = p4;
     f1a:	4e e6       	ldi	r20, 0x6E	; 110
     f1c:	5b e0       	ldi	r21, 0x0B	; 11
     f1e:	57 87       	std	Z+15, r21	; 0x0f
     f20:	46 87       	std	Z+14, r20	; 0x0e
    newMf->slope1 = (int)100/(p2-p1);
     f22:	e2 e0       	ldi	r30, 0x02	; 2
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	d9 01       	movw	r26, r18
     f28:	51 96       	adiw	r26, 0x11	; 17
     f2a:	fc 93       	st	X, r31
     f2c:	ee 93       	st	-X, r30
     f2e:	50 97       	sbiw	r26, 0x10	; 16
    newMf->slope2 = (int)100/(p4-p3);
     f30:	53 96       	adiw	r26, 0x13	; 19
     f32:	fc 93       	st	X, r31
     f34:	ee 93       	st	-X, r30
     f36:	52 97       	sbiw	r26, 0x12	; 18
//////////////////////////////////////////////////////////////////////////////////
// METHODS                                                                      //
//////////////////////////////////////////////////////////////////////////////////
void set_newMf(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
    strcpy(newMf->name, newname);
     f38:	4d e6       	ldi	r20, 0x6D	; 109
     f3a:	51 e6       	ldi	r21, 0x61	; 97
     f3c:	68 e7       	ldi	r22, 0x78	; 120
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	c1 5b       	subi	r28, 0xB1	; 177
     f42:	de 4f       	sbci	r29, 0xFE	; 254
     f44:	48 83       	st	Y, r20
     f46:	59 83       	std	Y+1, r21	; 0x01
     f48:	6a 83       	std	Y+2, r22	; 0x02
     f4a:	7b 83       	std	Y+3, r23	; 0x03
     f4c:	cf 54       	subi	r28, 0x4F	; 79
     f4e:	d1 40       	sbci	r29, 0x01	; 1
    newMf->value = 0;
     f50:	c7 5a       	subi	r28, 0xA7	; 167
     f52:	de 4f       	sbci	r29, 0xFE	; 254
     f54:	19 82       	std	Y+1, r1	; 0x01
     f56:	18 82       	st	Y, r1
     f58:	c9 55       	subi	r28, 0x59	; 89
     f5a:	d1 40       	sbci	r29, 0x01	; 1
    newMf->point1 = p1;
     f5c:	4a e4       	ldi	r20, 0x4A	; 74
     f5e:	5b e0       	ldi	r21, 0x0B	; 11
     f60:	c5 5a       	subi	r28, 0xA5	; 165
     f62:	de 4f       	sbci	r29, 0xFE	; 254
     f64:	59 83       	std	Y+1, r21	; 0x01
     f66:	48 83       	st	Y, r20
     f68:	cb 55       	subi	r28, 0x5B	; 91
     f6a:	d1 40       	sbci	r29, 0x01	; 1
    newMf->point2 = p4;
     f6c:	4a e9       	ldi	r20, 0x9A	; 154
     f6e:	5b e0       	ldi	r21, 0x0B	; 11
     f70:	c3 5a       	subi	r28, 0xA3	; 163
     f72:	de 4f       	sbci	r29, 0xFE	; 254
     f74:	59 83       	std	Y+1, r21	; 0x01
     f76:	48 83       	st	Y, r20
     f78:	cd 55       	subi	r28, 0x5D	; 93
     f7a:	d1 40       	sbci	r29, 0x01	; 1
    newMf->slope1 = (int)100/(p2-p1);
     f7c:	c1 5a       	subi	r28, 0xA1	; 161
     f7e:	de 4f       	sbci	r29, 0xFE	; 254
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	e8 83       	st	Y, r30
     f84:	cf 55       	subi	r28, 0x5F	; 95
     f86:	d1 40       	sbci	r29, 0x01	; 1
    newMf->slope2 = (int)100/(p4-p3);
     f88:	cf 59       	subi	r28, 0x9F	; 159
     f8a:	de 4f       	sbci	r29, 0xFE	; 254
     f8c:	f9 83       	std	Y+1, r31	; 0x01
     f8e:	e8 83       	st	Y, r30
     f90:	c1 56       	subi	r28, 0x61	; 97
     f92:	d1 40       	sbci	r29, 0x01	; 1
    set_newMf(&medHigh, "medHigh", 2844, 2880, 2890, 2926);
    struct mf_type max;
    set_newMf(&max, "max", 2890, 2926, 2934, 2970);
    
    // Linked list for MFs
    pwm.membership_functions = &noSpeed;
     f94:	f3 01       	movw	r30, r6
     f96:	95 87       	std	Z+13, r25	; 0x0d
     f98:	84 87       	std	Z+12, r24	; 0x0c
    noSpeed.next = &slow;
     f9a:	dc 01       	movw	r26, r24
     f9c:	55 96       	adiw	r26, 0x15	; 21
     f9e:	9c 92       	st	X, r9
     fa0:	8e 92       	st	-X, r8
     fa2:	54 97       	sbiw	r26, 0x14	; 20
    slow.next = &cruise;
     fa4:	f4 01       	movw	r30, r8
     fa6:	15 8b       	std	Z+21, r17	; 0x15
     fa8:	04 8b       	std	Z+20, r16	; 0x14
    cruise.next = &medHigh;
     faa:	d8 01       	movw	r26, r16
     fac:	55 96       	adiw	r26, 0x15	; 21
     fae:	3c 93       	st	X, r19
     fb0:	2e 93       	st	-X, r18
     fb2:	54 97       	sbiw	r26, 0x14	; 20
    medHigh.next = &high;
     fb4:	2e 01       	movw	r4, r28
     fb6:	b1 ed       	ldi	r27, 0xD1	; 209
     fb8:	4b 0e       	add	r4, r27
     fba:	51 1c       	adc	r5, r1
     fbc:	f9 01       	movw	r30, r18
     fbe:	55 8a       	std	Z+21, r5	; 0x15
     fc0:	44 8a       	std	Z+20, r4	; 0x14
    
    
    
    ////// SETTING I/O LINKED LISTS ///////////////////////////////////
    
    System_Inputs = &distance;
     fc2:	ae 01       	movw	r20, r28
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	50 93 8e 02 	sts	0x028E, r21
     fcc:	40 93 8d 02 	sts	0x028D, r20
    distance.next = &speed;
     fd0:	e0 5d       	subi	r30, 0xD0	; 208
     fd2:	f1 09       	sbc	r31, r1
     fd4:	f8 8b       	std	Y+16, r31	; 0x10
     fd6:	ef 87       	std	Y+15, r30	; 0x0f
    speed.next = NULL;
     fd8:	17 86       	std	Z+15, r1	; 0x0f
     fda:	16 86       	std	Z+14, r1	; 0x0e
    
    System_Outputs = &pwm;
     fdc:	70 92 8c 02 	sts	0x028C, r7
     fe0:	60 92 8b 02 	sts	0x028B, r6
    pwm.next = NULL;
     fe4:	d3 01       	movw	r26, r6
     fe6:	1f 96       	adiw	r26, 0x0f	; 15
     fe8:	1c 92       	st	X, r1
     fea:	1e 92       	st	-X, r1
     fec:	1e 97       	sbiw	r26, 0x0e	; 14
     *
     */
    
    /* rule # 11: if still and oneMeter then slow */
    struct rule_element_type then11;
    then11.value = &slow.value;
     fee:	a2 58       	subi	r26, 0x82	; 130
     ff0:	bf 4f       	sbci	r27, 0xFF	; 255
     ff2:	ea e0       	ldi	r30, 0x0A	; 10
     ff4:	8e 0e       	add	r8, r30
     ff6:	91 1c       	adc	r9, r1
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	9c 92       	st	X, r9
     ffc:	8e 92       	st	-X, r8
    then11.next = NULL;
     ffe:	13 96       	adiw	r26, 0x03	; 3
    1000:	1c 92       	st	X, r1
    1002:	1e 92       	st	-X, r1
    1004:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if112;
    if112.value = &oneM.value;
    1006:	6e 01       	movw	r12, r28
    1008:	f7 e9       	ldi	r31, 0x97	; 151
    100a:	cf 1a       	sub	r12, r31
    100c:	fe ef       	ldi	r31, 0xFE	; 254
    100e:	df 0a       	sbc	r13, r31
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	f6 01       	movw	r30, r12
    1016:	51 83       	std	Z+1, r21	; 0x01
    1018:	40 83       	st	Z, r20
    if112.next = NULL;
    101a:	13 82       	std	Z+3, r1	; 0x03
    101c:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if111;
    if111.value = &still.value;
    101e:	5e 01       	movw	r10, r28
    1020:	f3 e9       	ldi	r31, 0x93	; 147
    1022:	af 1a       	sub	r10, r31
    1024:	fe ef       	ldi	r31, 0xFE	; 254
    1026:	bf 0a       	sbc	r11, r31
    1028:	7e 01       	movw	r14, r28
    102a:	63 e8       	ldi	r22, 0x83	; 131
    102c:	e6 0e       	add	r14, r22
    102e:	f1 1c       	adc	r15, r1
    1030:	f5 01       	movw	r30, r10
    1032:	f1 82       	std	Z+1, r15	; 0x01
    1034:	e0 82       	st	Z, r14
    if111.next = &if112;
    1036:	d3 82       	std	Z+3, r13	; 0x03
    1038:	c2 82       	std	Z+2, r12	; 0x02
    
    struct rule_type rule11;
    rule11.if_side = &if111;
    103a:	34 96       	adiw	r30, 0x04	; 4
    103c:	b1 82       	std	Z+1, r11	; 0x01
    103e:	a0 82       	st	Z, r10
    rule11.then_side = &then11;
    1040:	b3 83       	std	Z+3, r27	; 0x03
    1042:	a2 83       	std	Z+2, r26	; 0x02
    rule11.next = NULL;
    1044:	15 82       	std	Z+5, r1	; 0x05
    1046:	14 82       	std	Z+4, r1	; 0x04
    
    
    /* rule # 10: if low and twoM then cruise */
    struct rule_element_type then10;
    then10.value = &cruise.value;
    1048:	7e 01       	movw	r14, r28
    104a:	69 e8       	ldi	r22, 0x89	; 137
    104c:	e6 1a       	sub	r14, r22
    104e:	6e ef       	ldi	r22, 0xFE	; 254
    1050:	f6 0a       	sbc	r15, r22
    1052:	06 5f       	subi	r16, 0xF6	; 246
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	d7 01       	movw	r26, r14
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	1c 93       	st	X, r17
    105c:	0e 93       	st	-X, r16
    then10.next = NULL;
    105e:	13 96       	adiw	r26, 0x03	; 3
    1060:	1c 92       	st	X, r1
    1062:	1e 92       	st	-X, r1
    1064:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if102;
    if102.value = &twoM.value;
    1066:	1e 01       	movw	r2, r28
    1068:	b5 e8       	ldi	r27, 0x85	; 133
    106a:	2b 1a       	sub	r2, r27
    106c:	be ef       	ldi	r27, 0xFE	; 254
    106e:	3b 0a       	sbc	r3, r27
    1070:	be 01       	movw	r22, r28
    1072:	69 5b       	subi	r22, 0xB9	; 185
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	d1 01       	movw	r26, r2
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	7c 93       	st	X, r23
    107c:	6e 93       	st	-X, r22
    if102.next = NULL;
    107e:	13 96       	adiw	r26, 0x03	; 3
    1080:	1c 92       	st	X, r1
    1082:	1e 92       	st	-X, r1
    1084:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if101;
    if101.value = &low.value;
    1086:	6e 01       	movw	r12, r28
    1088:	b1 e8       	ldi	r27, 0x81	; 129
    108a:	cb 1a       	sub	r12, r27
    108c:	be ef       	ldi	r27, 0xFE	; 254
    108e:	db 0a       	sbc	r13, r27
    1090:	5e 01       	movw	r10, r28
    1092:	a9 e9       	ldi	r26, 0x99	; 153
    1094:	aa 0e       	add	r10, r26
    1096:	b1 1c       	adc	r11, r1
    1098:	d6 01       	movw	r26, r12
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	bc 92       	st	X, r11
    109e:	ae 92       	st	-X, r10
    if101.next = &if102;
    10a0:	13 96       	adiw	r26, 0x03	; 3
    10a2:	3c 92       	st	X, r3
    10a4:	2e 92       	st	-X, r2
    10a6:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule10;
    rule10.if_side = &if101;
    10a8:	14 96       	adiw	r26, 0x04	; 4
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	dc 92       	st	X, r13
    10ae:	ce 92       	st	-X, r12
    rule10.then_side = &then10;
    10b0:	13 96       	adiw	r26, 0x03	; 3
    10b2:	fc 92       	st	X, r15
    10b4:	ee 92       	st	-X, r14
    10b6:	12 97       	sbiw	r26, 0x02	; 2
    rule10.next = &rule11;
    10b8:	15 96       	adiw	r26, 0x05	; 5
    10ba:	fc 93       	st	X, r31
    10bc:	ee 93       	st	-X, r30
    10be:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 9: if threeM then max */
    struct rule_element_type then9;
    then9.value = &max.value;
    10c0:	7e 01       	movw	r14, r28
    10c2:	e7 e7       	ldi	r30, 0x77	; 119
    10c4:	ee 1a       	sub	r14, r30
    10c6:	ee ef       	ldi	r30, 0xFE	; 254
    10c8:	fe 0a       	sbc	r15, r30
    10ca:	0f 2e       	mov	r0, r31
    10cc:	ff e4       	ldi	r31, 0x4F	; 79
    10ce:	cf 2e       	mov	r12, r31
    10d0:	dd 24       	eor	r13, r13
    10d2:	d3 94       	inc	r13
    10d4:	f0 2d       	mov	r31, r0
    10d6:	cc 0e       	add	r12, r28
    10d8:	dd 1e       	adc	r13, r29
    10da:	fa e0       	ldi	r31, 0x0A	; 10
    10dc:	cf 0e       	add	r12, r31
    10de:	d1 1c       	adc	r13, r1
    10e0:	f7 01       	movw	r30, r14
    10e2:	d1 82       	std	Z+1, r13	; 0x01
    10e4:	c0 82       	st	Z, r12
    then9.next = NULL;
    10e6:	13 82       	std	Z+3, r1	; 0x03
    10e8:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if91;
    if91.value = &threeM.value;
    10ea:	6e 01       	movw	r12, r28
    10ec:	f3 e7       	ldi	r31, 0x73	; 115
    10ee:	cf 1a       	sub	r12, r31
    10f0:	fe ef       	ldi	r31, 0xFE	; 254
    10f2:	df 0a       	sbc	r13, r31
    10f4:	1e 01       	movw	r2, r28
    10f6:	ed e5       	ldi	r30, 0x5D	; 93
    10f8:	2e 0e       	add	r2, r30
    10fa:	31 1c       	adc	r3, r1
    10fc:	f6 01       	movw	r30, r12
    10fe:	31 82       	std	Z+1, r3	; 0x01
    1100:	20 82       	st	Z, r2
    if91.next = NULL;
    1102:	13 82       	std	Z+3, r1	; 0x03
    1104:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule9;
    rule9.if_side = &if91;
    1106:	34 96       	adiw	r30, 0x04	; 4
    1108:	d1 82       	std	Z+1, r13	; 0x01
    110a:	c0 82       	st	Z, r12
    rule9.then_side = &then9;
    110c:	f3 82       	std	Z+3, r15	; 0x03
    110e:	e2 82       	std	Z+2, r14	; 0x02
    rule9.next = &rule10;
    1110:	b5 83       	std	Z+5, r27	; 0x05
    1112:	a4 83       	std	Z+4, r26	; 0x04
    
    /* rule # 8: if high and twoM then medHigh */
    struct rule_element_type then8;
    then8.value = &medHigh.value;
    1114:	7e 01       	movw	r14, r28
    1116:	a9 e6       	ldi	r26, 0x69	; 105
    1118:	ea 1a       	sub	r14, r26
    111a:	ae ef       	ldi	r26, 0xFE	; 254
    111c:	fa 0a       	sbc	r15, r26
    111e:	a0 54       	subi	r26, 0x40	; 64
    1120:	b1 09       	sbc	r27, r1
    1122:	cd 5d       	subi	r28, 0xDD	; 221
    1124:	dd 4f       	sbci	r29, 0xFD	; 253
    1126:	b9 83       	std	Y+1, r27	; 0x01
    1128:	a8 83       	st	Y, r26
    112a:	c3 52       	subi	r28, 0x23	; 35
    112c:	d2 40       	sbci	r29, 0x02	; 2
    112e:	9d 01       	movw	r18, r26
    1130:	d7 01       	movw	r26, r14
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	3c 93       	st	X, r19
    1136:	2e 93       	st	-X, r18
    then8.next = NULL;
    1138:	13 96       	adiw	r26, 0x03	; 3
    113a:	1c 92       	st	X, r1
    113c:	1e 92       	st	-X, r1
    113e:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if82;
    if82.value = &twoM.value;
    1140:	1e 01       	movw	r2, r28
    1142:	35 e6       	ldi	r19, 0x65	; 101
    1144:	23 1a       	sub	r2, r19
    1146:	3e ef       	ldi	r19, 0xFE	; 254
    1148:	33 0a       	sbc	r3, r19
    114a:	d1 01       	movw	r26, r2
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	7c 93       	st	X, r23
    1150:	6e 93       	st	-X, r22
    if82.next = NULL;
    1152:	13 96       	adiw	r26, 0x03	; 3
    1154:	1c 92       	st	X, r1
    1156:	1e 92       	st	-X, r1
    1158:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if81;
    if81.value = &high.value;
    115a:	6e 01       	movw	r12, r28
    115c:	b1 e6       	ldi	r27, 0x61	; 97
    115e:	cb 1a       	sub	r12, r27
    1160:	be ef       	ldi	r27, 0xFE	; 254
    1162:	db 0a       	sbc	r13, r27
    1164:	2a e0       	ldi	r18, 0x0A	; 10
    1166:	42 0e       	add	r4, r18
    1168:	51 1c       	adc	r5, r1
    116a:	d6 01       	movw	r26, r12
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	5c 92       	st	X, r5
    1170:	4e 92       	st	-X, r4
    if81.next = &if82;
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	3c 92       	st	X, r3
    1176:	2e 92       	st	-X, r2
    1178:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule8;
    rule8.if_side = &if81;
    117a:	14 96       	adiw	r26, 0x04	; 4
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	dc 92       	st	X, r13
    1180:	ce 92       	st	-X, r12
    rule8.then_side = &then8;
    1182:	13 96       	adiw	r26, 0x03	; 3
    1184:	fc 92       	st	X, r15
    1186:	ee 92       	st	-X, r14
    1188:	12 97       	sbiw	r26, 0x02	; 2
    rule8.next = &rule9;
    118a:	15 96       	adiw	r26, 0x05	; 5
    118c:	fc 93       	st	X, r31
    118e:	ee 93       	st	-X, r30
    1190:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 7: if cruising and twoM then medHigh */
    struct rule_element_type then7;
    then7.value = &medHigh.value;
    1192:	7e 01       	movw	r14, r28
    1194:	e7 e5       	ldi	r30, 0x57	; 87
    1196:	ee 1a       	sub	r14, r30
    1198:	ee ef       	ldi	r30, 0xFE	; 254
    119a:	fe 0a       	sbc	r15, r30
    119c:	cd 5d       	subi	r28, 0xDD	; 221
    119e:	dd 4f       	sbci	r29, 0xFD	; 253
    11a0:	28 81       	ld	r18, Y
    11a2:	39 81       	ldd	r19, Y+1	; 0x01
    11a4:	c3 52       	subi	r28, 0x23	; 35
    11a6:	d2 40       	sbci	r29, 0x02	; 2
    11a8:	f7 01       	movw	r30, r14
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
    then7.next = NULL;
    11ae:	13 82       	std	Z+3, r1	; 0x03
    11b0:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if72;
    if72.value = &twoM.value;
    11b2:	c3 55       	subi	r28, 0x53	; 83
    11b4:	de 4f       	sbci	r29, 0xFE	; 254
    11b6:	79 83       	std	Y+1, r23	; 0x01
    11b8:	68 83       	st	Y, r22
    11ba:	cd 5a       	subi	r28, 0xAD	; 173
    11bc:	d1 40       	sbci	r29, 0x01	; 1
    if72.next = NULL;
    11be:	c1 55       	subi	r28, 0x51	; 81
    11c0:	de 4f       	sbci	r29, 0xFE	; 254
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	18 82       	st	Y, r1
    11c6:	cf 5a       	subi	r28, 0xAF	; 175
    11c8:	d1 40       	sbci	r29, 0x01	; 1
    
    struct rule_element_type if71;
    if71.value = &cruising.value;
    11ca:	6e 01       	movw	r12, r28
    11cc:	3f e4       	ldi	r19, 0x4F	; 79
    11ce:	c3 1a       	sub	r12, r19
    11d0:	3e ef       	ldi	r19, 0xFE	; 254
    11d2:	d3 0a       	sbc	r13, r19
    11d4:	1e 01       	movw	r2, r28
    11d6:	ef ea       	ldi	r30, 0xAF	; 175
    11d8:	2e 0e       	add	r2, r30
    11da:	31 1c       	adc	r3, r1
    11dc:	f6 01       	movw	r30, r12
    11de:	31 82       	std	Z+1, r3	; 0x01
    11e0:	20 82       	st	Z, r2
    if71.next = &if72;
    11e2:	2d ea       	ldi	r18, 0xAD	; 173
    11e4:	31 e0       	ldi	r19, 0x01	; 1
    11e6:	2c 0f       	add	r18, r28
    11e8:	3d 1f       	adc	r19, r29
    11ea:	33 83       	std	Z+3, r19	; 0x03
    11ec:	22 83       	std	Z+2, r18	; 0x02
    
    struct rule_type rule7;
    rule7.if_side = &if71;
    11ee:	34 96       	adiw	r30, 0x04	; 4
    11f0:	d1 82       	std	Z+1, r13	; 0x01
    11f2:	c0 82       	st	Z, r12
    rule7.then_side = &then7;
    11f4:	f3 82       	std	Z+3, r15	; 0x03
    11f6:	e2 82       	std	Z+2, r14	; 0x02
    rule7.next = &rule8;
    11f8:	b5 83       	std	Z+5, r27	; 0x05
    11fa:	a4 83       	std	Z+4, r26	; 0x04
    
    
    /* rule # 6: if low and twoM then cruise */
    struct rule_element_type then6;
    then6.value = &cruise.value;
    11fc:	6e 01       	movw	r12, r28
    11fe:	35 e4       	ldi	r19, 0x45	; 69
    1200:	c3 1a       	sub	r12, r19
    1202:	3e ef       	ldi	r19, 0xFE	; 254
    1204:	d3 0a       	sbc	r13, r19
    1206:	d6 01       	movw	r26, r12
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	1c 93       	st	X, r17
    120c:	0e 93       	st	-X, r16
    then6.next = NULL;
    120e:	13 96       	adiw	r26, 0x03	; 3
    1210:	1c 92       	st	X, r1
    1212:	1e 92       	st	-X, r1
    1214:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if62;
    if62.value = &twoM.value;
    1216:	7e 01       	movw	r14, r28
    1218:	b1 e4       	ldi	r27, 0x41	; 65
    121a:	eb 1a       	sub	r14, r27
    121c:	be ef       	ldi	r27, 0xFE	; 254
    121e:	fb 0a       	sbc	r15, r27
    1220:	d7 01       	movw	r26, r14
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	7c 93       	st	X, r23
    1226:	6e 93       	st	-X, r22
    if62.next = NULL;
    1228:	13 96       	adiw	r26, 0x03	; 3
    122a:	1c 92       	st	X, r1
    122c:	1e 92       	st	-X, r1
    122e:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if61;
    if61.value = &low.value;
    1230:	64 58       	subi	r22, 0x84	; 132
    1232:	7e 4f       	sbci	r23, 0xFE	; 254
    1234:	db 01       	movw	r26, r22
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	bc 92       	st	X, r11
    123a:	ae 92       	st	-X, r10
    if61.next = &if62;
    123c:	13 96       	adiw	r26, 0x03	; 3
    123e:	fc 92       	st	X, r15
    1240:	ee 92       	st	-X, r14
    1242:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule6;
    rule6.if_side = &if61;
    1244:	7e 01       	movw	r14, r28
    1246:	b9 e3       	ldi	r27, 0x39	; 57
    1248:	eb 1a       	sub	r14, r27
    124a:	be ef       	ldi	r27, 0xFE	; 254
    124c:	fb 0a       	sbc	r15, r27
    124e:	d7 01       	movw	r26, r14
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	7c 93       	st	X, r23
    1254:	6e 93       	st	-X, r22
    rule6.then_side = &then6;
    1256:	13 96       	adiw	r26, 0x03	; 3
    1258:	dc 92       	st	X, r13
    125a:	ce 92       	st	-X, r12
    125c:	12 97       	sbiw	r26, 0x02	; 2
    rule6.next = &rule7;
    125e:	15 96       	adiw	r26, 0x05	; 5
    1260:	fc 93       	st	X, r31
    1262:	ee 93       	st	-X, r30
    1264:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 5: if high and oneM then medHigh */
    struct rule_element_type then5;
    then5.value = &medHigh.value;
    1266:	16 96       	adiw	r26, 0x06	; 6
    1268:	cd 5d       	subi	r28, 0xDD	; 221
    126a:	dd 4f       	sbci	r29, 0xFD	; 253
    126c:	e8 81       	ld	r30, Y
    126e:	f9 81       	ldd	r31, Y+1	; 0x01
    1270:	c3 52       	subi	r28, 0x23	; 35
    1272:	d2 40       	sbci	r29, 0x02	; 2
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	fc 93       	st	X, r31
    1278:	ee 93       	st	-X, r30
    then5.next = NULL;
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	1c 92       	st	X, r1
    127e:	1e 92       	st	-X, r1
    1280:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if52;
    if52.value = &oneM.value;
    1282:	62 5f       	subi	r22, 0xF2	; 242
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	fb 01       	movw	r30, r22
    1288:	51 83       	std	Z+1, r21	; 0x01
    128a:	40 83       	st	Z, r20
    if52.next = NULL;
    128c:	13 82       	std	Z+3, r1	; 0x03
    128e:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if51;
    if51.value = &high.value;
    1290:	28 5d       	subi	r18, 0xD8	; 216
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	f9 01       	movw	r30, r18
    1296:	51 82       	std	Z+1, r5	; 0x01
    1298:	40 82       	st	Z, r4
    if51.next = &if52;
    129a:	73 83       	std	Z+3, r23	; 0x03
    129c:	62 83       	std	Z+2, r22	; 0x02
    
    struct rule_type rule5;
    rule5.if_side = &if51;
    129e:	34 96       	adiw	r30, 0x04	; 4
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	20 83       	st	Z, r18
    rule5.then_side = &then5;
    12a4:	b3 83       	std	Z+3, r27	; 0x03
    12a6:	a2 83       	std	Z+2, r26	; 0x02
    rule5.next = &rule6;
    12a8:	f5 82       	std	Z+5, r15	; 0x05
    12aa:	e4 82       	std	Z+4, r14	; 0x04
    
    /* rule # 4: if medium and oneM then cruise */
    struct rule_element_type then4;
    then4.value = &cruise.value;
    12ac:	7e 01       	movw	r14, r28
    12ae:	21 e2       	ldi	r18, 0x21	; 33
    12b0:	e2 1a       	sub	r14, r18
    12b2:	2e ef       	ldi	r18, 0xFE	; 254
    12b4:	f2 0a       	sbc	r15, r18
    12b6:	d7 01       	movw	r26, r14
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	1c 93       	st	X, r17
    12bc:	0e 93       	st	-X, r16
    then4.next = NULL;
    12be:	13 96       	adiw	r26, 0x03	; 3
    12c0:	1c 92       	st	X, r1
    12c2:	1e 92       	st	-X, r1
    12c4:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if42;
    if42.value = &oneM.value;
    12c6:	6e 5e       	subi	r22, 0xEE	; 238
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	db 01       	movw	r26, r22
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	5c 93       	st	X, r21
    12d0:	4e 93       	st	-X, r20
    if42.next = NULL;
    12d2:	13 96       	adiw	r26, 0x03	; 3
    12d4:	1c 92       	st	X, r1
    12d6:	1e 92       	st	-X, r1
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if41;
    if41.value = &medium.value;
    12da:	2e 5e       	subi	r18, 0xEE	; 238
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	08 56       	subi	r16, 0x68	; 104
    12e0:	11 09       	sbc	r17, r1
    12e2:	d9 01       	movw	r26, r18
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	1c 93       	st	X, r17
    12e8:	0e 93       	st	-X, r16
    if41.next = &if42;
    12ea:	13 96       	adiw	r26, 0x03	; 3
    12ec:	7c 93       	st	X, r23
    12ee:	6e 93       	st	-X, r22
    12f0:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule4;
    rule4.if_side = &if41;
    12f2:	68 5f       	subi	r22, 0xF8	; 248
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	db 01       	movw	r26, r22
    12f8:	11 96       	adiw	r26, 0x01	; 1
    12fa:	3c 93       	st	X, r19
    12fc:	2e 93       	st	-X, r18
    rule4.then_side = &then4;
    12fe:	13 96       	adiw	r26, 0x03	; 3
    1300:	fc 92       	st	X, r15
    1302:	ee 92       	st	-X, r14
    1304:	12 97       	sbiw	r26, 0x02	; 2
    rule4.next = &rule5;
    1306:	15 96       	adiw	r26, 0x05	; 5
    1308:	fc 93       	st	X, r31
    130a:	ee 93       	st	-X, r30
    130c:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 3: if cruising and oneM then slow */
    struct rule_element_type then3;
    then3.value = &slow.value;
    130e:	04 5d       	subi	r16, 0xD4	; 212
    1310:	1e 4f       	sbci	r17, 0xFE	; 254
    1312:	f8 01       	movw	r30, r16
    1314:	91 82       	std	Z+1, r9	; 0x01
    1316:	80 82       	st	Z, r8
    then3.next = NULL;
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if32;
    if32.value = &oneM.value;
    131c:	22 5f       	subi	r18, 0xF2	; 242
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	d9 01       	movw	r26, r18
    1322:	11 96       	adiw	r26, 0x01	; 1
    1324:	5c 93       	st	X, r21
    1326:	4e 93       	st	-X, r20
    if32.next = NULL;
    1328:	13 96       	adiw	r26, 0x03	; 3
    132a:	1c 92       	st	X, r1
    132c:	1e 92       	st	-X, r1
    132e:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type if31;
    if31.value = &cruising.value;
    1330:	14 96       	adiw	r26, 0x04	; 4
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	3c 92       	st	X, r3
    1336:	2e 92       	st	-X, r2
    if31.next = &if32;
    1338:	13 96       	adiw	r26, 0x03	; 3
    133a:	3c 93       	st	X, r19
    133c:	2e 93       	st	-X, r18
    133e:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_type rule3;
    rule3.if_side = &if31;
    1340:	28 5f       	subi	r18, 0xF8	; 248
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	f9 01       	movw	r30, r18
    1346:	b1 83       	std	Z+1, r27	; 0x01
    1348:	a0 83       	st	Z, r26
    rule3.then_side = &then3;
    134a:	13 83       	std	Z+3, r17	; 0x03
    134c:	02 83       	std	Z+2, r16	; 0x02
    rule3.next = &rule4;
    134e:	75 83       	std	Z+5, r23	; 0x05
    1350:	64 83       	std	Z+4, r22	; 0x04
    
    /* rule # 2: if low and oneM then slow */
    struct rule_element_type if22;
    if22.value = &oneM.value;
    1352:	36 96       	adiw	r30, 0x06	; 6
    1354:	51 83       	std	Z+1, r21	; 0x01
    1356:	40 83       	st	Z, r20
    if22.next = NULL;
    1358:	13 82       	std	Z+3, r1	; 0x03
    135a:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type if21;
    if21.value = &low.value;
    135c:	4a 52       	subi	r20, 0x2A	; 42
    135e:	5e 4f       	sbci	r21, 0xFE	; 254
    1360:	da 01       	movw	r26, r20
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	bc 92       	st	X, r11
    1366:	ae 92       	st	-X, r10
    if21.next = &if22;
    1368:	13 96       	adiw	r26, 0x03	; 3
    136a:	fc 93       	st	X, r31
    136c:	ee 93       	st	-X, r30
    136e:	12 97       	sbiw	r26, 0x02	; 2
    
    struct rule_element_type then2;
    then2.value = &slow.value;
    1370:	38 96       	adiw	r30, 0x08	; 8
    1372:	91 82       	std	Z+1, r9	; 0x01
    1374:	80 82       	st	Z, r8
    then2.next = NULL;
    1376:	13 82       	std	Z+3, r1	; 0x03
    1378:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule2;
    rule2.if_side = &if21;
    137a:	18 96       	adiw	r26, 0x08	; 8
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	5c 93       	st	X, r21
    1380:	4e 93       	st	-X, r20
    rule2.then_side = &then2;
    1382:	13 96       	adiw	r26, 0x03	; 3
    1384:	fc 93       	st	X, r31
    1386:	ee 93       	st	-X, r30
    1388:	12 97       	sbiw	r26, 0x02	; 2
    rule2.next = &rule3;
    138a:	15 96       	adiw	r26, 0x05	; 5
    138c:	3c 93       	st	X, r19
    138e:	2e 93       	st	-X, r18
    1390:	14 97       	sbiw	r26, 0x04	; 4
    
    /* rule # 1: if stopDist then noSpeed */
    struct rule_element_type if11;
    if11.value = &stopDist.value;
    1392:	42 5f       	subi	r20, 0xF2	; 242
    1394:	5f 4f       	sbci	r21, 0xFF	; 255
    1396:	22 5e       	subi	r18, 0xE2	; 226
    1398:	31 40       	sbci	r19, 0x01	; 1
    139a:	fa 01       	movw	r30, r20
    139c:	31 83       	std	Z+1, r19	; 0x01
    139e:	20 83       	st	Z, r18
    if11.next = NULL;
    13a0:	13 82       	std	Z+3, r1	; 0x03
    13a2:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_element_type then1;
    then1.value = &noSpeed.value;
    13a4:	22 50       	subi	r18, 0x02	; 2
    13a6:	3e 4f       	sbci	r19, 0xFE	; 254
    13a8:	0a 96       	adiw	r24, 0x0a	; 10
    13aa:	f9 01       	movw	r30, r18
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    then1.next = NULL;
    13b0:	13 82       	std	Z+3, r1	; 0x03
    13b2:	12 82       	std	Z+2, r1	; 0x02
    
    struct rule_type rule1;		// first rule in rule base
    
    rule1.if_side = &if11;
    13b4:	34 96       	adiw	r30, 0x04	; 4
    13b6:	51 83       	std	Z+1, r21	; 0x01
    13b8:	40 83       	st	Z, r20
    rule1.then_side = &then1;
    13ba:	33 83       	std	Z+3, r19	; 0x03
    13bc:	22 83       	std	Z+2, r18	; 0x02
    rule1.next = &rule2;
    13be:	b5 83       	std	Z+5, r27	; 0x05
    13c0:	a4 83       	std	Z+4, r26	; 0x04
    
    // pointers to top of lists
    Rule_Base = &rule1;
    13c2:	f0 93 90 02 	sts	0x0290, r31
    13c6:	e0 93 8f 02 	sts	0x028F, r30
    
    
    // the methods performing the FLC
    fuzzification();
    13ca:	84 d0       	rcall	.+264    	; 0x14d4 <fuzzification>
    rule_evaluation();
    13cc:	aa d0       	rcall	.+340    	; 0x1522 <rule_evaluation>
    defuzzification();
    13ce:	ef d0       	rcall	.+478    	; 0x15ae <defuzzification>
    setESC(pwm.value);
    13d0:	d3 01       	movw	r26, r6
    13d2:	1a 96       	adiw	r26, 0x0a	; 10
    13d4:	8d 91       	ld	r24, X+
    13d6:	9c 91       	ld	r25, X
    13d8:	1b 97       	sbiw	r26, 0x0b	; 11
    13da:	7c d2       	rcall	.+1272   	; 0x18d4 <setESC>

}
    13dc:	cc 5d       	subi	r28, 0xDC	; 220
    13de:	dd 4f       	sbci	r29, 0xFD	; 253
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	3f 90       	pop	r3
    140c:	2f 90       	pop	r2
    140e:	08 95       	ret

00001410 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
    1410:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
    1412:	84 85       	ldd	r24, Z+12	; 0x0c
    1414:	95 85       	ldd	r25, Z+13	; 0x0d
    1416:	9b 01       	movw	r18, r22
    1418:	28 1b       	sub	r18, r24
    141a:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
    141c:	86 85       	ldd	r24, Z+14	; 0x0e
    141e:	97 85       	ldd	r25, Z+15	; 0x0f
    1420:	86 1b       	sub	r24, r22
    1422:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
    1424:	12 16       	cp	r1, r18
    1426:	13 06       	cpc	r1, r19
    1428:	ec f4       	brge	.+58     	; 0x1464 <compute_degree_of_membership+0x54>
    142a:	18 16       	cp	r1, r24
    142c:	19 06       	cpc	r1, r25
    142e:	ec f4       	brge	.+58     	; 0x146a <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
    1430:	60 89       	ldd	r22, Z+16	; 0x10
    1432:	71 89       	ldd	r23, Z+17	; 0x11
    1434:	a2 89       	ldd	r26, Z+18	; 0x12
    1436:	b3 89       	ldd	r27, Z+19	; 0x13
    1438:	8a 9f       	mul	r24, r26
    143a:	a0 01       	movw	r20, r0
    143c:	8b 9f       	mul	r24, r27
    143e:	50 0d       	add	r21, r0
    1440:	9a 9f       	mul	r25, r26
    1442:	50 0d       	add	r21, r0
    1444:	11 24       	eor	r1, r1
    1446:	26 9f       	mul	r18, r22
    1448:	c0 01       	movw	r24, r0
    144a:	27 9f       	mul	r18, r23
    144c:	90 0d       	add	r25, r0
    144e:	36 9f       	mul	r19, r22
    1450:	90 0d       	add	r25, r0
    1452:	11 24       	eor	r1, r1
    1454:	48 17       	cp	r20, r24
    1456:	59 07       	cpc	r21, r25
    1458:	0c f4       	brge	.+2      	; 0x145c <compute_degree_of_membership+0x4c>
    145a:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
    145c:	84 36       	cpi	r24, 0x64	; 100
    145e:	91 05       	cpc	r25, r1
    1460:	3c f4       	brge	.+14     	; 0x1470 <compute_degree_of_membership+0x60>
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <compute_degree_of_membership+0x64>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
    1470:	84 e6       	ldi	r24, 0x64	; 100
    1472:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
    1474:	93 87       	std	Z+11, r25	; 0x0b
    1476:	82 87       	std	Z+10, r24	; 0x0a
    1478:	08 95       	ret

0000147a <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    1484:	c6 85       	ldd	r28, Z+14	; 0x0e
    1486:	d7 85       	ldd	r29, Z+15	; 0x0f
    1488:	84 85       	ldd	r24, Z+12	; 0x0c
    148a:	95 85       	ldd	r25, Z+13	; 0x0d
    148c:	c8 1b       	sub	r28, r24
    148e:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
    1490:	22 85       	ldd	r18, Z+10	; 0x0a
    1492:	33 85       	ldd	r19, Z+11	; 0x0b
    1494:	60 89       	ldd	r22, Z+16	; 0x10
    1496:	71 89       	ldd	r23, Z+17	; 0x11
    1498:	c9 01       	movw	r24, r18
    149a:	ed d4       	rcall	.+2522   	; 0x1e76 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
    149c:	8e 01       	movw	r16, r28
    149e:	06 1b       	sub	r16, r22
    14a0:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
    14a2:	62 89       	ldd	r22, Z+18	; 0x12
    14a4:	73 89       	ldd	r23, Z+19	; 0x13
    14a6:	c9 01       	movw	r24, r18
    14a8:	e6 d4       	rcall	.+2508   	; 0x1e76 <__divmodhi4>
    top = base - run_1 - run_2;
    14aa:	06 1b       	sub	r16, r22
    14ac:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
    14ae:	c0 0f       	add	r28, r16
    14b0:	d1 1f       	adc	r29, r17
    14b2:	2c 9f       	mul	r18, r28
    14b4:	c0 01       	movw	r24, r0
    14b6:	2d 9f       	mul	r18, r29
    14b8:	90 0d       	add	r25, r0
    14ba:	3c 9f       	mul	r19, r28
    14bc:	90 0d       	add	r25, r0
    14be:	11 24       	eor	r1, r1
    14c0:	99 23       	and	r25, r25
    14c2:	0c f4       	brge	.+2      	; 0x14c6 <compute_area_of_trapezoid+0x4c>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
    14c6:	95 95       	asr	r25
    14c8:	87 95       	ror	r24
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    14dc:	00 91 8d 02 	lds	r16, 0x028D
    14e0:	10 91 8e 02 	lds	r17, 0x028E
    14e4:	01 15       	cp	r16, r1
    14e6:	11 05       	cpc	r17, r1
    14e8:	b9 f0       	breq	.+46     	; 0x1518 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    14ea:	f8 01       	movw	r30, r16
    14ec:	c4 85       	ldd	r28, Z+12	; 0x0c
    14ee:	d5 85       	ldd	r29, Z+13	; 0x0d
    14f0:	20 97       	sbiw	r28, 0x00	; 0
    14f2:	61 f0       	breq	.+24     	; 0x150c <fuzzification+0x38>
            if (mf!=NULL) {
    14f4:	20 97       	sbiw	r28, 0x00	; 0
    14f6:	29 f0       	breq	.+10     	; 0x1502 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
    14f8:	f8 01       	movw	r30, r16
    14fa:	62 85       	ldd	r22, Z+10	; 0x0a
    14fc:	73 85       	ldd	r23, Z+11	; 0x0b
    14fe:	ce 01       	movw	r24, r28
    1500:	87 df       	rcall	.-242    	; 0x1410 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
    1502:	0c 88       	ldd	r0, Y+20	; 0x14
    1504:	dd 89       	ldd	r29, Y+21	; 0x15
    1506:	c0 2d       	mov	r28, r0
    1508:	20 97       	sbiw	r28, 0x00	; 0
    150a:	a1 f7       	brne	.-24     	; 0x14f4 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
    150c:	f8 01       	movw	r30, r16
    150e:	06 85       	ldd	r16, Z+14	; 0x0e
    1510:	17 85       	ldd	r17, Z+15	; 0x0f
    1512:	01 15       	cp	r16, r1
    1514:	11 05       	cpc	r17, r1
    1516:	49 f7       	brne	.-46     	; 0x14ea <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    152a:	c0 91 8f 02 	lds	r28, 0x028F
    152e:	d0 91 90 02 	lds	r29, 0x0290
    1532:	20 97       	sbiw	r28, 0x00	; 0
    1534:	b9 f1       	breq	.+110    	; 0x15a4 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1536:	04 e6       	ldi	r16, 0x64	; 100
    1538:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    153a:	e8 81       	ld	r30, Y
    153c:	f9 81       	ldd	r31, Y+1	; 0x01
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	81 f0       	breq	.+32     	; 0x1562 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1542:	20 2f       	mov	r18, r16
    1544:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
    1546:	a0 81       	ld	r26, Z
    1548:	b1 81       	ldd	r27, Z+1	; 0x01
    154a:	8d 91       	ld	r24, X+
    154c:	9c 91       	ld	r25, X
    154e:	82 17       	cp	r24, r18
    1550:	93 07       	cpc	r25, r19
    1552:	0c f4       	brge	.+2      	; 0x1556 <rule_evaluation+0x34>
    1554:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
    1556:	02 80       	ldd	r0, Z+2	; 0x02
    1558:	f3 81       	ldd	r31, Z+3	; 0x03
    155a:	e0 2d       	mov	r30, r0
    155c:	30 97       	sbiw	r30, 0x00	; 0
    155e:	99 f7       	brne	.-26     	; 0x1546 <rule_evaluation+0x24>
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
    1562:	20 2f       	mov	r18, r16
    1564:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	b1 f0       	breq	.+44     	; 0x159a <rule_evaluation+0x78>
    156e:	72 2f       	mov	r23, r18
    1570:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
    1572:	a0 81       	ld	r26, Z
    1574:	b1 81       	ldd	r27, Z+1	; 0x01
    1576:	8d 91       	ld	r24, X+
    1578:	9c 91       	ld	r25, X
    157a:	11 97       	sbiw	r26, 0x01	; 1
    157c:	57 2f       	mov	r21, r23
    157e:	46 2f       	mov	r20, r22
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	14 f4       	brge	.+4      	; 0x158a <rule_evaluation+0x68>
    1586:	58 2f       	mov	r21, r24
    1588:	49 2f       	mov	r20, r25
    158a:	5c 93       	st	X, r21
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
    1590:	02 80       	ldd	r0, Z+2	; 0x02
    1592:	f3 81       	ldd	r31, Z+3	; 0x03
    1594:	e0 2d       	mov	r30, r0
    1596:	30 97       	sbiw	r30, 0x00	; 0
    1598:	61 f7       	brne	.-40     	; 0x1572 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
    159a:	0c 80       	ldd	r0, Y+4	; 0x04
    159c:	dd 81       	ldd	r29, Y+5	; 0x05
    159e:	c0 2d       	mov	r28, r0
    15a0:	20 97       	sbiw	r28, 0x00	; 0
    15a2:	59 f6       	brne	.-106    	; 0x153a <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <defuzzification+0x26>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <defuzzification+0x28>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <defuzzification+0x2a>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    15dc:	80 91 8b 02 	lds	r24, 0x028B
    15e0:	90 91 8c 02 	lds	r25, 0x028C
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	8b 83       	std	Y+3, r24	; 0x03
    15e8:	89 2b       	or	r24, r25
    15ea:	09 f4       	brne	.+2      	; 0x15ee <defuzzification+0x40>
    15ec:	84 c0       	rjmp	.+264    	; 0x16f6 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	04 84       	ldd	r0, Z+12	; 0x0c
    15f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    15f6:	e0 2d       	mov	r30, r0
    15f8:	fe 83       	std	Y+6, r31	; 0x06
    15fa:	ed 83       	std	Y+5, r30	; 0x05
    15fc:	ef 2b       	or	r30, r31
    15fe:	09 f4       	brne	.+2      	; 0x1602 <defuzzification+0x54>
    1600:	66 c0       	rjmp	.+204    	; 0x16ce <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
    1602:	51 2c       	mov	r5, r1
    1604:	61 2c       	mov	r6, r1
    1606:	71 2c       	mov	r7, r1
    1608:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
    160a:	31 2c       	mov	r3, r1
    160c:	21 2c       	mov	r2, r1
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	31 df       	rcall	.-414    	; 0x147a <compute_area_of_trapezoid>
    1618:	bc 01       	movw	r22, r24
    161a:	88 27       	eor	r24, r24
    161c:	77 fd       	sbrc	r23, 7
    161e:	80 95       	com	r24
    1620:	98 2f       	mov	r25, r24
    1622:	3a d3       	rcall	.+1652   	; 0x1c98 <__floatsisf>
    1624:	6b 01       	movw	r12, r22
    1626:	7c 01       	movw	r14, r24
			centroid = mf->point1;
    1628:	ed 81       	ldd	r30, Y+5	; 0x05
    162a:	fe 81       	ldd	r31, Y+6	; 0x06
    162c:	04 85       	ldd	r16, Z+12	; 0x0c
    162e:	15 85       	ldd	r17, Z+13	; 0x0d
    1630:	b8 01       	movw	r22, r16
    1632:	88 27       	eor	r24, r24
    1634:	77 fd       	sbrc	r23, 7
    1636:	80 95       	com	r24
    1638:	98 2f       	mov	r25, r24
    163a:	2e d3       	rcall	.+1628   	; 0x1c98 <__floatsisf>
    163c:	4b 01       	movw	r8, r22
    163e:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
    1640:	ed 81       	ldd	r30, Y+5	; 0x05
    1642:	fe 81       	ldd	r31, Y+6	; 0x06
    1644:	86 85       	ldd	r24, Z+14	; 0x0e
    1646:	97 85       	ldd	r25, Z+15	; 0x0f
    1648:	80 1b       	sub	r24, r16
    164a:	91 0b       	sbc	r25, r17
    164c:	bc 01       	movw	r22, r24
    164e:	12 f4       	brpl	.+4      	; 0x1654 <defuzzification+0xa6>
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	75 95       	asr	r23
    1656:	67 95       	ror	r22
            centroid = centroid + intermed;
    1658:	88 27       	eor	r24, r24
    165a:	77 fd       	sbrc	r23, 7
    165c:	80 95       	com	r24
    165e:	98 2f       	mov	r25, r24
    1660:	1b d3       	rcall	.+1590   	; 0x1c98 <__floatsisf>
    1662:	a5 01       	movw	r20, r10
    1664:	94 01       	movw	r18, r8
    1666:	19 d2       	rcall	.+1074   	; 0x1a9a <__addsf3>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
    166c:	c7 01       	movw	r24, r14
    166e:	b6 01       	movw	r22, r12
    1670:	9f d3       	rcall	.+1854   	; 0x1db0 <__mulsf3>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	63 2d       	mov	r22, r3
    1678:	72 2d       	mov	r23, r2
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	0d d2       	rcall	.+1050   	; 0x1a9a <__addsf3>
    1680:	36 2e       	mov	r3, r22
    1682:	27 2e       	mov	r2, r23
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
    1688:	a7 01       	movw	r20, r14
    168a:	96 01       	movw	r18, r12
    168c:	65 2d       	mov	r22, r5
    168e:	76 2d       	mov	r23, r6
    1690:	87 2d       	mov	r24, r7
    1692:	94 2d       	mov	r25, r4
    1694:	02 d2       	rcall	.+1028   	; 0x1a9a <__addsf3>
    1696:	56 2e       	mov	r5, r22
    1698:	67 2e       	mov	r6, r23
    169a:	78 2e       	mov	r7, r24
    169c:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
    169e:	ed 81       	ldd	r30, Y+5	; 0x05
    16a0:	fe 81       	ldd	r31, Y+6	; 0x06
    16a2:	04 88       	ldd	r0, Z+20	; 0x14
    16a4:	f5 89       	ldd	r31, Z+21	; 0x15
    16a6:	e0 2d       	mov	r30, r0
    16a8:	fe 83       	std	Y+6, r31	; 0x06
    16aa:	ed 83       	std	Y+5, r30	; 0x05
    16ac:	ef 2b       	or	r30, r31
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <defuzzification+0x104>
    16b0:	b0 cf       	rjmp	.-160    	; 0x1612 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
    16b2:	26 2f       	mov	r18, r22
    16b4:	37 2f       	mov	r19, r23
    16b6:	48 2f       	mov	r20, r24
    16b8:	59 2f       	mov	r21, r25
    16ba:	63 2d       	mov	r22, r3
    16bc:	72 2d       	mov	r23, r2
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	4f d2       	rcall	.+1182   	; 0x1b62 <__divsf3>
    16c4:	26 2f       	mov	r18, r22
    16c6:	37 2f       	mov	r19, r23
    16c8:	48 2f       	mov	r20, r24
    16ca:	59 2f       	mov	r21, r25
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    16d6:	62 2f       	mov	r22, r18
    16d8:	73 2f       	mov	r23, r19
    16da:	84 2f       	mov	r24, r20
    16dc:	95 2f       	mov	r25, r21
    16de:	a9 d2       	rcall	.+1362   	; 0x1c32 <__fixsfsi>
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	73 87       	std	Z+11, r23	; 0x0b
    16e6:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
    16e8:	86 85       	ldd	r24, Z+14	; 0x0e
    16ea:	97 85       	ldd	r25, Z+15	; 0x0f
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	89 2b       	or	r24, r25
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <defuzzification+0x148>
    16f4:	7c cf       	rjmp	.-264    	; 0x15ee <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
    16f6:	26 96       	adiw	r28, 0x06	; 6
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	7f 90       	pop	r7
    171c:	6f 90       	pop	r6
    171e:	5f 90       	pop	r5
    1720:	4f 90       	pop	r4
    1722:	3f 90       	pop	r3
    1724:	2f 90       	pop	r2
    1726:	08 95       	ret

00001728 <__vector_28>:
	}

	int16_t Get_Measurement(void) //TODO
	{
		return 140;
	}
    1728:	1f 92       	push	r1
    172a:	0f 92       	push	r0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	0b b6       	in	r0, 0x3b	; 59
    1734:	0f 92       	push	r0
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
    173e:	80 91 ce 00 	lds	r24, 0x00CE
    1742:	8f 3f       	cpi	r24, 0xFF	; 255
    1744:	29 f4       	brne	.+10     	; 0x1750 <__vector_28+0x28>
    1746:	10 92 b2 02 	sts	0x02B2, r1
    174a:	10 92 b1 02 	sts	0x02B1, r1
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <__vector_28+0x48>
    1750:	e0 91 b1 02 	lds	r30, 0x02B1
    1754:	f0 91 b2 02 	lds	r31, 0x02B2
    1758:	ef 56       	subi	r30, 0x6F	; 111
    175a:	fd 4f       	sbci	r31, 0xFD	; 253
    175c:	80 83       	st	Z, r24
    175e:	80 91 b1 02 	lds	r24, 0x02B1
    1762:	90 91 b2 02 	lds	r25, 0x02B2
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	90 93 b2 02 	sts	0x02B2, r25
    176c:	80 93 b1 02 	sts	0x02B1, r24
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	0f 90       	pop	r0
    177a:	0b be       	out	0x3b, r0	; 59
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <SPI_slaveInit>:
    1786:	80 e4       	ldi	r24, 0x40	; 64
    1788:	84 b9       	out	0x04, r24	; 4
    178a:	80 ec       	ldi	r24, 0xC0	; 192
    178c:	8c bd       	out	0x2c, r24	; 44
    178e:	08 95       	ret

00001790 <carInit>:
    1790:	92 d0       	rcall	.+292    	; 0x18b6 <pwmInit>
    1792:	f9 df       	rcall	.-14     	; 0x1786 <SPI_slaveInit>
    1794:	8d ec       	ldi	r24, 0xCD	; 205
    1796:	9a e0       	ldi	r25, 0x0A	; 10
    1798:	9d d0       	rcall	.+314    	; 0x18d4 <setESC>
    179a:	84 e6       	ldi	r24, 0x64	; 100
    179c:	9a e0       	ldi	r25, 0x0A	; 10
    179e:	b5 c0       	rjmp	.+362    	; 0x190a <setServo>
    17a0:	08 95       	ret

000017a2 <USART1_init>:
    17a2:	ec ec       	ldi	r30, 0xCC	; 204
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	11 82       	std	Z+1, r1	; 0x01
    17a8:	10 82       	st	Z, r1
    17aa:	20 e9       	ldi	r18, 0x90	; 144
    17ac:	20 93 c9 00 	sts	0x00C9, r18
    17b0:	2e e0       	ldi	r18, 0x0E	; 14
    17b2:	20 93 ca 00 	sts	0x00CA, r18
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	08 95       	ret

000017bc <Sens_info_read>:
    17bc:	e9 ec       	ldi	r30, 0xC9	; 201
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	20 81       	ld	r18, Z
    17c2:	2f 77       	andi	r18, 0x7F	; 127
    17c4:	20 83       	st	Z, r18
    17c6:	20 91 91 02 	lds	r18, 0x0291
    17ca:	dc 01       	movw	r26, r24
    17cc:	2c 93       	st	X, r18
    17ce:	20 91 92 02 	lds	r18, 0x0292
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	2c 93       	st	X, r18
    17d6:	10 92 b2 02 	sts	0x02B2, r1
    17da:	10 92 b1 02 	sts	0x02B1, r1
    17de:	80 81       	ld	r24, Z
    17e0:	80 68       	ori	r24, 0x80	; 128
    17e2:	80 83       	st	Z, r24
    17e4:	08 95       	ret

000017e6 <__vector_18>:
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	2f 93       	push	r18
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	80 91 fc 01 	lds	r24, 0x01FC
    17fa:	90 91 fd 01 	lds	r25, 0x01FD
    17fe:	8b 39       	cpi	r24, 0x9B	; 155
    1800:	26 e9       	ldi	r18, 0x96	; 150
    1802:	92 07       	cpc	r25, r18
    1804:	30 f4       	brcc	.+12     	; 0x1812 <__vector_18+0x2c>
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	90 93 fd 01 	sts	0x01FD, r25
    180c:	80 93 fc 01 	sts	0x01FC, r24
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <__vector_18+0x3e>
    1812:	80 91 fe 01 	lds	r24, 0x01FE
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	80 93 fe 01 	sts	0x01FE, r24
    181c:	10 92 fd 01 	sts	0x01FD, r1
    1820:	10 92 fc 01 	sts	0x01FC, r1
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <main>:


	/* main function
	*/
	int main (void)
	{
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	2f 97       	sbiw	r28, 0x0f	; 15
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
		
		
		
		
		
		carInit();
    1848:	a3 df       	rcall	.-186    	; 0x1790 <carInit>
		setESC(2765+50);
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9a e0       	ldi	r25, 0x0A	; 10
    184e:	42 d0       	rcall	.+132    	; 0x18d4 <setESC>

		
		
		
		sei();
    1850:	78 94       	sei
		DDRA = 0xFF;
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	81 b9       	out	0x01, r24	; 1
		sens_info_ptr = &sensor_info;
		//--end of sensor information
		
		//Init for UART
		unsigned int baud_setting = 7;
		USART1_init(baud_setting);
    1856:	87 e0       	ldi	r24, 0x07	; 7
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a3 df       	rcall	.-186    	; 0x17a2 <USART1_init>
		
		int c;
		int v;
		
		while (1) {
			counter_UART1_reciever =2;
    185c:	02 e0       	ldi	r16, 0x02	; 2
    185e:	10 e0       	ldi	r17, 0x00	; 0
				
				
				cli();
				
				v = (int) sensor_info.dist_right_line;
				FLC_steering(c,OCR1B, v);
    1860:	0f 2e       	mov	r0, r31
    1862:	fa e8       	ldi	r31, 0x8A	; 138
    1864:	cf 2e       	mov	r12, r31
    1866:	d1 2c       	mov	r13, r1
    1868:	f0 2d       	mov	r31, r0
				//inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    186a:	0f 2e       	mov	r0, r31
    186c:	f8 e8       	ldi	r31, 0x88	; 136
    186e:	ef 2e       	mov	r14, r31
    1870:	f1 2c       	mov	r15, r1
    1872:	f0 2d       	mov	r31, r0
		
		int c;
		int v;
		
		while (1) {
			counter_UART1_reciever =2;
    1874:	10 93 b2 02 	sts	0x02B2, r17
    1878:	00 93 b1 02 	sts	0x02B1, r16
			if (counter_UART1_reciever > 1) {
    187c:	80 91 b1 02 	lds	r24, 0x02B1
    1880:	90 91 b2 02 	lds	r25, 0x02B2
    1884:	02 97       	sbiw	r24, 0x02	; 2
    1886:	b4 f3       	brlt	.-20     	; 0x1874 <main+0x40>
				
				Sens_info_read(sens_info_ptr);
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	97 df       	rcall	.-210    	; 0x17bc <Sens_info_read>
				
				PORTA = sensor_info.dist_right_line;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	82 b9       	out	0x02, r24	; 2
				
				
				cli();
    1892:	f8 94       	cli
				
				v = (int) sensor_info.dist_right_line;
				FLC_steering(c,OCR1B, v);
    1894:	f6 01       	movw	r30, r12
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
				PORTA = sensor_info.dist_right_line;
				
				
				cli();
				
				v = (int) sensor_info.dist_right_line;
    189a:	49 81       	ldd	r20, Y+1	; 0x01
    189c:	50 e0       	ldi	r21, 0x00	; 0
				FLC_steering(c,OCR1B, v);
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 66 00 	call	0xcc	; 0xcc <FLC_steering>
				//inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
				FLC_road(OCR1A,(int) sensor_info.dist_sonic_middle);
    18a6:	f7 01       	movw	r30, r14
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	6a 81       	ldd	r22, Y+2	; 0x02
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	f9 d8       	rcall	.-3598   	; 0xaa4 <FLC_road>
				sei();
    18b2:	78 94       	sei
    18b4:	df cf       	rjmp	.-66     	; 0x1874 <main+0x40>

000018b6 <pwmInit>:
/* This method sets the ESC pwm length. The extreme values are MINESC and MAXESC.
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
    18b6:	80 e3       	ldi	r24, 0x30	; 48
    18b8:	8a b9       	out	0x0a, r24	; 10
	if(counterEsc <= MINESC)
    18ba:	82 ea       	ldi	r24, 0xA2	; 162
    18bc:	80 93 80 00 	sts	0x0080, r24
	{
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f e8       	ldi	r25, 0x8F	; 143
    18c4:	90 93 87 00 	sts	0x0087, r25
    18c8:	80 93 86 00 	sts	0x0086, r24
		OCR1A = MINESC;
    18cc:	8a e1       	ldi	r24, 0x1A	; 26
    18ce:	80 93 81 00 	sts	0x0081, r24
    18d2:	08 95       	ret

000018d4 <setESC>:
		OCR1A = MAXESC;
	} else {
		OCR1A = counterEsc;
	}
	
}
    18d4:	80 36       	cpi	r24, 0x60	; 96
    18d6:	2a e0       	ldi	r18, 0x0A	; 10
    18d8:	92 07       	cpc	r25, r18
    18da:	3c f4       	brge	.+14     	; 0x18ea <setESC+0x16>


    18dc:	8f e5       	ldi	r24, 0x5F	; 95
    18de:	9a e0       	ldi	r25, 0x0A	; 10
    18e0:	90 93 89 00 	sts	0x0089, r25
    18e4:	80 93 88 00 	sts	0x0088, r24
    18e8:	08 95       	ret
/* This method sets the PWM length for the servo signal that controls
 * the steering angle. The extreme values are defined as MAXRIGHT and MAXLEFT
    18ea:	8b 33       	cpi	r24, 0x3B	; 59
    18ec:	2b e0       	ldi	r18, 0x0B	; 11
    18ee:	92 07       	cpc	r25, r18
    18f0:	3c f0       	brlt	.+14     	; 0x1900 <setESC+0x2c>
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
    18f2:	8b e3       	ldi	r24, 0x3B	; 59
    18f4:	9b e0       	ldi	r25, 0x0B	; 11
    18f6:	90 93 89 00 	sts	0x0089, r25
    18fa:	80 93 88 00 	sts	0x0088, r24
    18fe:	08 95       	ret
*/
void setServo (int counterServo)
    1900:	90 93 89 00 	sts	0x0089, r25
    1904:	80 93 88 00 	sts	0x0088, r24
    1908:	08 95       	ret

0000190a <setServo>:
		OCR1B = MAXLEFT;
		
	} else {
		
		OCR1B = counterServo;	
	}
    190a:	87 3e       	cpi	r24, 0xE7	; 231
    190c:	27 e0       	ldi	r18, 0x07	; 7
    190e:	92 07       	cpc	r25, r18
    1910:	3c f4       	brge	.+14     	; 0x1920 <setServo+0x16>
    1912:	86 ee       	ldi	r24, 0xE6	; 230
    1914:	97 e0       	ldi	r25, 0x07	; 7
    1916:	90 93 8b 00 	sts	0x008B, r25
    191a:	80 93 8a 00 	sts	0x008A, r24
    191e:	08 95       	ret
    1920:	8f 33       	cpi	r24, 0x3F	; 63
    1922:	2c e0       	ldi	r18, 0x0C	; 12
    1924:	92 07       	cpc	r25, r18
    1926:	3c f0       	brlt	.+14     	; 0x1936 <setServo+0x2c>
    1928:	8f e3       	ldi	r24, 0x3F	; 63
    192a:	9c e0       	ldi	r25, 0x0C	; 12
    192c:	90 93 8b 00 	sts	0x008B, r25
    1930:	80 93 8a 00 	sts	0x008A, r24
    1934:	08 95       	ret
    1936:	90 93 8b 00 	sts	0x008B, r25
    193a:	80 93 8a 00 	sts	0x008A, r24
    193e:	08 95       	ret

00001940 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	0b b6       	in	r0, 0x3b	; 59
    194c:	0f 92       	push	r0
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
    1960:	80 91 89 02 	lds	r24, 0x0289
    1964:	90 91 8a 02 	lds	r25, 0x028A
    1968:	80 34       	cpi	r24, 0x40	; 64
    196a:	91 05       	cpc	r25, r1
    196c:	31 f4       	brne	.+12     	; 0x197a <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 bf 02 	sts	0x02BF, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
    1974:	80 91 c6 00 	lds	r24, 0x00C6
    1978:	16 c0       	rjmp	.+44     	; 0x19a6 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
    197a:	80 34       	cpi	r24, 0x40	; 64
    197c:	91 05       	cpc	r25, r1
    197e:	e8 f4       	brcc	.+58     	; 0x19ba <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
    1980:	e7 e8       	ldi	r30, 0x87	; 135
    1982:	f2 e0       	ldi	r31, 0x02	; 2
    1984:	20 81       	ld	r18, Z
    1986:	31 81       	ldd	r19, Z+1	; 0x01
    1988:	40 91 c6 00 	lds	r20, 0x00C6
    198c:	d9 01       	movw	r26, r18
    198e:	ab 5b       	subi	r26, 0xBB	; 187
    1990:	bd 4f       	sbci	r27, 0xFD	; 253
    1992:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	31 83       	std	Z+1, r19	; 0x01
    199a:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	90 93 8a 02 	sts	0x028A, r25
    19a2:	80 93 89 02 	sts	0x0289, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    19a6:	80 91 89 02 	lds	r24, 0x0289
    19aa:	90 91 8a 02 	lds	r25, 0x028A
    19ae:	80 34       	cpi	r24, 0x40	; 64
    19b0:	91 05       	cpc	r25, r1
    19b2:	19 f4       	brne	.+6      	; 0x19ba <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 bd 02 	sts	0x02BD, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    19ba:	80 91 87 02 	lds	r24, 0x0287
    19be:	90 91 88 02 	lds	r25, 0x0288
    19c2:	80 34       	cpi	r24, 0x40	; 64
    19c4:	91 05       	cpc	r25, r1
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <__vector_20+0x90>
		rx_uart0.i_last = 0;
    19c8:	10 92 88 02 	sts	0x0288, r1
    19cc:	10 92 87 02 	sts	0x0287, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 bc 02 	sts	0x02BC, r24
}
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	4f 91       	pop	r20
    19e4:	3f 91       	pop	r19
    19e6:	2f 91       	pop	r18
    19e8:	0f 90       	pop	r0
    19ea:	0b be       	out	0x3b, r0	; 59
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <__vector_22>:




ISR(USART0_TX_vect)
{
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	0b b6       	in	r0, 0x3b	; 59
    1a02:	0f 92       	push	r0
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1a0c:	80 91 43 02 	lds	r24, 0x0243
    1a10:	90 91 44 02 	lds	r25, 0x0244
    1a14:	80 34       	cpi	r24, 0x40	; 64
    1a16:	91 05       	cpc	r25, r1
    1a18:	19 f4       	brne	.+6      	; 0x1a20 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1a1a:	10 92 bb 02 	sts	0x02BB, r1
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    1a20:	89 2b       	or	r24, r25
    1a22:	b9 f0       	breq	.+46     	; 0x1a52 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1a24:	e0 91 3f 02 	lds	r30, 0x023F
    1a28:	f0 91 40 02 	lds	r31, 0x0240
    1a2c:	e1 50       	subi	r30, 0x01	; 1
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	80 81       	ld	r24, Z
    1a32:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1a36:	ef e3       	ldi	r30, 0x3F	; 63
    1a38:	f2 e0       	ldi	r31, 0x02	; 2
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    1a44:	e3 e4       	ldi	r30, 0x43	; 67
    1a46:	f2 e0       	ldi	r31, 0x02	; 2
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    1a52:	80 91 3f 02 	lds	r24, 0x023F
    1a56:	90 91 40 02 	lds	r25, 0x0240
    1a5a:	80 34       	cpi	r24, 0x40	; 64
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    1a60:	10 92 40 02 	sts	0x0240, r1
    1a64:	10 92 3f 02 	sts	0x023F, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    1a68:	80 91 43 02 	lds	r24, 0x0243
    1a6c:	90 91 44 02 	lds	r25, 0x0244
    1a70:	89 2b       	or	r24, r25
    1a72:	39 f4       	brne	.+14     	; 0x1a82 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    1a74:	10 92 be 02 	sts	0x02BE, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    1a78:	e1 ec       	ldi	r30, 0xC1	; 193
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 7b       	andi	r24, 0xBF	; 191
    1a80:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    1a82:	ff 91       	pop	r31
    1a84:	ef 91       	pop	r30
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	0f 90       	pop	r0
    1a8c:	0b be       	out	0x3b, r0	; 59
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__subsf3>:
    1a98:	50 58       	subi	r21, 0x80	; 128

00001a9a <__addsf3>:
    1a9a:	bb 27       	eor	r27, r27
    1a9c:	aa 27       	eor	r26, r26
    1a9e:	0e d0       	rcall	.+28     	; 0x1abc <__addsf3x>
    1aa0:	4d c1       	rjmp	.+666    	; 0x1d3c <__fp_round>
    1aa2:	3e d1       	rcall	.+636    	; 0x1d20 <__fp_pscA>
    1aa4:	30 f0       	brcs	.+12     	; 0x1ab2 <__addsf3+0x18>
    1aa6:	43 d1       	rcall	.+646    	; 0x1d2e <__fp_pscB>
    1aa8:	20 f0       	brcs	.+8      	; 0x1ab2 <__addsf3+0x18>
    1aaa:	31 f4       	brne	.+12     	; 0x1ab8 <__addsf3+0x1e>
    1aac:	9f 3f       	cpi	r25, 0xFF	; 255
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <__addsf3+0x1a>
    1ab0:	1e f4       	brtc	.+6      	; 0x1ab8 <__addsf3+0x1e>
    1ab2:	33 c1       	rjmp	.+614    	; 0x1d1a <__fp_nan>
    1ab4:	0e f4       	brtc	.+2      	; 0x1ab8 <__addsf3+0x1e>
    1ab6:	e0 95       	com	r30
    1ab8:	e7 fb       	bst	r30, 7
    1aba:	29 c1       	rjmp	.+594    	; 0x1d0e <__fp_inf>

00001abc <__addsf3x>:
    1abc:	e9 2f       	mov	r30, r25
    1abe:	4f d1       	rcall	.+670    	; 0x1d5e <__fp_split3>
    1ac0:	80 f3       	brcs	.-32     	; 0x1aa2 <__addsf3+0x8>
    1ac2:	ba 17       	cp	r27, r26
    1ac4:	62 07       	cpc	r22, r18
    1ac6:	73 07       	cpc	r23, r19
    1ac8:	84 07       	cpc	r24, r20
    1aca:	95 07       	cpc	r25, r21
    1acc:	18 f0       	brcs	.+6      	; 0x1ad4 <__addsf3x+0x18>
    1ace:	71 f4       	brne	.+28     	; 0x1aec <__addsf3x+0x30>
    1ad0:	9e f5       	brtc	.+102    	; 0x1b38 <__addsf3x+0x7c>
    1ad2:	67 c1       	rjmp	.+718    	; 0x1da2 <__fp_zero>
    1ad4:	0e f4       	brtc	.+2      	; 0x1ad8 <__addsf3x+0x1c>
    1ad6:	e0 95       	com	r30
    1ad8:	0b 2e       	mov	r0, r27
    1ada:	ba 2f       	mov	r27, r26
    1adc:	a0 2d       	mov	r26, r0
    1ade:	0b 01       	movw	r0, r22
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	90 01       	movw	r18, r0
    1ae4:	0c 01       	movw	r0, r24
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	a0 01       	movw	r20, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	ff 27       	eor	r31, r31
    1aee:	59 1b       	sub	r21, r25
    1af0:	99 f0       	breq	.+38     	; 0x1b18 <__addsf3x+0x5c>
    1af2:	59 3f       	cpi	r21, 0xF9	; 249
    1af4:	50 f4       	brcc	.+20     	; 0x1b0a <__addsf3x+0x4e>
    1af6:	50 3e       	cpi	r21, 0xE0	; 224
    1af8:	68 f1       	brcs	.+90     	; 0x1b54 <__addsf3x+0x98>
    1afa:	1a 16       	cp	r1, r26
    1afc:	f0 40       	sbci	r31, 0x00	; 0
    1afe:	a2 2f       	mov	r26, r18
    1b00:	23 2f       	mov	r18, r19
    1b02:	34 2f       	mov	r19, r20
    1b04:	44 27       	eor	r20, r20
    1b06:	58 5f       	subi	r21, 0xF8	; 248
    1b08:	f3 cf       	rjmp	.-26     	; 0x1af0 <__addsf3x+0x34>
    1b0a:	46 95       	lsr	r20
    1b0c:	37 95       	ror	r19
    1b0e:	27 95       	ror	r18
    1b10:	a7 95       	ror	r26
    1b12:	f0 40       	sbci	r31, 0x00	; 0
    1b14:	53 95       	inc	r21
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__addsf3x+0x4e>
    1b18:	7e f4       	brtc	.+30     	; 0x1b38 <__addsf3x+0x7c>
    1b1a:	1f 16       	cp	r1, r31
    1b1c:	ba 0b       	sbc	r27, r26
    1b1e:	62 0b       	sbc	r22, r18
    1b20:	73 0b       	sbc	r23, r19
    1b22:	84 0b       	sbc	r24, r20
    1b24:	ba f0       	brmi	.+46     	; 0x1b54 <__addsf3x+0x98>
    1b26:	91 50       	subi	r25, 0x01	; 1
    1b28:	a1 f0       	breq	.+40     	; 0x1b52 <__addsf3x+0x96>
    1b2a:	ff 0f       	add	r31, r31
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	66 1f       	adc	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	c2 f7       	brpl	.-16     	; 0x1b26 <__addsf3x+0x6a>
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <__addsf3x+0x98>
    1b38:	ba 0f       	add	r27, r26
    1b3a:	62 1f       	adc	r22, r18
    1b3c:	73 1f       	adc	r23, r19
    1b3e:	84 1f       	adc	r24, r20
    1b40:	48 f4       	brcc	.+18     	; 0x1b54 <__addsf3x+0x98>
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	b7 95       	ror	r27
    1b4a:	f7 95       	ror	r31
    1b4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <__addsf3x+0x96>
    1b50:	b3 cf       	rjmp	.-154    	; 0x1ab8 <__addsf3+0x1e>
    1b52:	93 95       	inc	r25
    1b54:	88 0f       	add	r24, r24
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <__addsf3x+0x9e>
    1b58:	99 27       	eor	r25, r25
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	97 95       	ror	r25
    1b5e:	87 95       	ror	r24
    1b60:	08 95       	ret

00001b62 <__divsf3>:
    1b62:	0c d0       	rcall	.+24     	; 0x1b7c <__divsf3x>
    1b64:	eb c0       	rjmp	.+470    	; 0x1d3c <__fp_round>
    1b66:	e3 d0       	rcall	.+454    	; 0x1d2e <__fp_pscB>
    1b68:	40 f0       	brcs	.+16     	; 0x1b7a <__divsf3+0x18>
    1b6a:	da d0       	rcall	.+436    	; 0x1d20 <__fp_pscA>
    1b6c:	30 f0       	brcs	.+12     	; 0x1b7a <__divsf3+0x18>
    1b6e:	21 f4       	brne	.+8      	; 0x1b78 <__divsf3+0x16>
    1b70:	5f 3f       	cpi	r21, 0xFF	; 255
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <__divsf3+0x18>
    1b74:	cc c0       	rjmp	.+408    	; 0x1d0e <__fp_inf>
    1b76:	51 11       	cpse	r21, r1
    1b78:	15 c1       	rjmp	.+554    	; 0x1da4 <__fp_szero>
    1b7a:	cf c0       	rjmp	.+414    	; 0x1d1a <__fp_nan>

00001b7c <__divsf3x>:
    1b7c:	f0 d0       	rcall	.+480    	; 0x1d5e <__fp_split3>
    1b7e:	98 f3       	brcs	.-26     	; 0x1b66 <__divsf3+0x4>

00001b80 <__divsf3_pse>:
    1b80:	99 23       	and	r25, r25
    1b82:	c9 f3       	breq	.-14     	; 0x1b76 <__divsf3+0x14>
    1b84:	55 23       	and	r21, r21
    1b86:	b1 f3       	breq	.-20     	; 0x1b74 <__divsf3+0x12>
    1b88:	95 1b       	sub	r25, r21
    1b8a:	55 0b       	sbc	r21, r21
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	aa 27       	eor	r26, r26
    1b90:	62 17       	cp	r22, r18
    1b92:	73 07       	cpc	r23, r19
    1b94:	84 07       	cpc	r24, r20
    1b96:	38 f0       	brcs	.+14     	; 0x1ba6 <__divsf3_pse+0x26>
    1b98:	9f 5f       	subi	r25, 0xFF	; 255
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	44 1f       	adc	r20, r20
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	a9 f3       	breq	.-22     	; 0x1b90 <__divsf3_pse+0x10>
    1ba6:	33 d0       	rcall	.+102    	; 0x1c0e <__divsf3_pse+0x8e>
    1ba8:	0e 2e       	mov	r0, r30
    1baa:	3a f0       	brmi	.+14     	; 0x1bba <__divsf3_pse+0x3a>
    1bac:	e0 e8       	ldi	r30, 0x80	; 128
    1bae:	30 d0       	rcall	.+96     	; 0x1c10 <__divsf3_pse+0x90>
    1bb0:	91 50       	subi	r25, 0x01	; 1
    1bb2:	50 40       	sbci	r21, 0x00	; 0
    1bb4:	e6 95       	lsr	r30
    1bb6:	00 1c       	adc	r0, r0
    1bb8:	ca f7       	brpl	.-14     	; 0x1bac <__divsf3_pse+0x2c>
    1bba:	29 d0       	rcall	.+82     	; 0x1c0e <__divsf3_pse+0x8e>
    1bbc:	fe 2f       	mov	r31, r30
    1bbe:	27 d0       	rcall	.+78     	; 0x1c0e <__divsf3_pse+0x8e>
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	bb 1f       	adc	r27, r27
    1bc8:	26 17       	cp	r18, r22
    1bca:	37 07       	cpc	r19, r23
    1bcc:	48 07       	cpc	r20, r24
    1bce:	ab 07       	cpc	r26, r27
    1bd0:	b0 e8       	ldi	r27, 0x80	; 128
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <__divsf3_pse+0x56>
    1bd4:	bb 0b       	sbc	r27, r27
    1bd6:	80 2d       	mov	r24, r0
    1bd8:	bf 01       	movw	r22, r30
    1bda:	ff 27       	eor	r31, r31
    1bdc:	93 58       	subi	r25, 0x83	; 131
    1bde:	5f 4f       	sbci	r21, 0xFF	; 255
    1be0:	2a f0       	brmi	.+10     	; 0x1bec <__divsf3_pse+0x6c>
    1be2:	9e 3f       	cpi	r25, 0xFE	; 254
    1be4:	51 05       	cpc	r21, r1
    1be6:	68 f0       	brcs	.+26     	; 0x1c02 <__divsf3_pse+0x82>
    1be8:	92 c0       	rjmp	.+292    	; 0x1d0e <__fp_inf>
    1bea:	dc c0       	rjmp	.+440    	; 0x1da4 <__fp_szero>
    1bec:	5f 3f       	cpi	r21, 0xFF	; 255
    1bee:	ec f3       	brlt	.-6      	; 0x1bea <__divsf3_pse+0x6a>
    1bf0:	98 3e       	cpi	r25, 0xE8	; 232
    1bf2:	dc f3       	brlt	.-10     	; 0x1bea <__divsf3_pse+0x6a>
    1bf4:	86 95       	lsr	r24
    1bf6:	77 95       	ror	r23
    1bf8:	67 95       	ror	r22
    1bfa:	b7 95       	ror	r27
    1bfc:	f7 95       	ror	r31
    1bfe:	9f 5f       	subi	r25, 0xFF	; 255
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__divsf3_pse+0x74>
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret
    1c0e:	e1 e0       	ldi	r30, 0x01	; 1
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	bb 1f       	adc	r27, r27
    1c18:	62 17       	cp	r22, r18
    1c1a:	73 07       	cpc	r23, r19
    1c1c:	84 07       	cpc	r24, r20
    1c1e:	ba 07       	cpc	r27, r26
    1c20:	20 f0       	brcs	.+8      	; 0x1c2a <__divsf3_pse+0xaa>
    1c22:	62 1b       	sub	r22, r18
    1c24:	73 0b       	sbc	r23, r19
    1c26:	84 0b       	sbc	r24, r20
    1c28:	ba 0b       	sbc	r27, r26
    1c2a:	ee 1f       	adc	r30, r30
    1c2c:	88 f7       	brcc	.-30     	; 0x1c10 <__divsf3_pse+0x90>
    1c2e:	e0 95       	com	r30
    1c30:	08 95       	ret

00001c32 <__fixsfsi>:
    1c32:	04 d0       	rcall	.+8      	; 0x1c3c <__fixunssfsi>
    1c34:	68 94       	set
    1c36:	b1 11       	cpse	r27, r1
    1c38:	b5 c0       	rjmp	.+362    	; 0x1da4 <__fp_szero>
    1c3a:	08 95       	ret

00001c3c <__fixunssfsi>:
    1c3c:	98 d0       	rcall	.+304    	; 0x1d6e <__fp_splitA>
    1c3e:	88 f0       	brcs	.+34     	; 0x1c62 <__fixunssfsi+0x26>
    1c40:	9f 57       	subi	r25, 0x7F	; 127
    1c42:	90 f0       	brcs	.+36     	; 0x1c68 <__fixunssfsi+0x2c>
    1c44:	b9 2f       	mov	r27, r25
    1c46:	99 27       	eor	r25, r25
    1c48:	b7 51       	subi	r27, 0x17	; 23
    1c4a:	a0 f0       	brcs	.+40     	; 0x1c74 <__fixunssfsi+0x38>
    1c4c:	d1 f0       	breq	.+52     	; 0x1c82 <__fixunssfsi+0x46>
    1c4e:	66 0f       	add	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	1a f0       	brmi	.+6      	; 0x1c5e <__fixunssfsi+0x22>
    1c58:	ba 95       	dec	r27
    1c5a:	c9 f7       	brne	.-14     	; 0x1c4e <__fixunssfsi+0x12>
    1c5c:	12 c0       	rjmp	.+36     	; 0x1c82 <__fixunssfsi+0x46>
    1c5e:	b1 30       	cpi	r27, 0x01	; 1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <__fixunssfsi+0x46>
    1c62:	9f d0       	rcall	.+318    	; 0x1da2 <__fp_zero>
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	9c c0       	rjmp	.+312    	; 0x1da2 <__fp_zero>
    1c6a:	67 2f       	mov	r22, r23
    1c6c:	78 2f       	mov	r23, r24
    1c6e:	88 27       	eor	r24, r24
    1c70:	b8 5f       	subi	r27, 0xF8	; 248
    1c72:	39 f0       	breq	.+14     	; 0x1c82 <__fixunssfsi+0x46>
    1c74:	b9 3f       	cpi	r27, 0xF9	; 249
    1c76:	cc f3       	brlt	.-14     	; 0x1c6a <__fixunssfsi+0x2e>
    1c78:	86 95       	lsr	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b3 95       	inc	r27
    1c80:	d9 f7       	brne	.-10     	; 0x1c78 <__fixunssfsi+0x3c>
    1c82:	3e f4       	brtc	.+14     	; 0x1c92 <__fixunssfsi+0x56>
    1c84:	90 95       	com	r25
    1c86:	80 95       	com	r24
    1c88:	70 95       	com	r23
    1c8a:	61 95       	neg	r22
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__floatunsisf>:
    1c94:	e8 94       	clt
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <__floatsisf+0x12>

00001c98 <__floatsisf>:
    1c98:	97 fb       	bst	r25, 7
    1c9a:	3e f4       	brtc	.+14     	; 0x1caa <__floatsisf+0x12>
    1c9c:	90 95       	com	r25
    1c9e:	80 95       	com	r24
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	99 23       	and	r25, r25
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <__floatsisf+0x40>
    1cae:	f9 2f       	mov	r31, r25
    1cb0:	96 e9       	ldi	r25, 0x96	; 150
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	93 95       	inc	r25
    1cb6:	f6 95       	lsr	r31
    1cb8:	87 95       	ror	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	b7 95       	ror	r27
    1cc0:	f1 11       	cpse	r31, r1
    1cc2:	f8 cf       	rjmp	.-16     	; 0x1cb4 <__floatsisf+0x1c>
    1cc4:	fa f4       	brpl	.+62     	; 0x1d04 <__floatsisf+0x6c>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	11 f4       	brne	.+4      	; 0x1cce <__floatsisf+0x36>
    1cca:	60 ff       	sbrs	r22, 0
    1ccc:	1b c0       	rjmp	.+54     	; 0x1d04 <__floatsisf+0x6c>
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	16 c0       	rjmp	.+44     	; 0x1d04 <__floatsisf+0x6c>
    1cd8:	88 23       	and	r24, r24
    1cda:	11 f0       	breq	.+4      	; 0x1ce0 <__floatsisf+0x48>
    1cdc:	96 e9       	ldi	r25, 0x96	; 150
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <__floatsisf+0x6a>
    1ce0:	77 23       	and	r23, r23
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <__floatsisf+0x54>
    1ce4:	9e e8       	ldi	r25, 0x8E	; 142
    1ce6:	87 2f       	mov	r24, r23
    1ce8:	76 2f       	mov	r23, r22
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__floatsisf+0x5e>
    1cec:	66 23       	and	r22, r22
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <__floatsisf+0x74>
    1cf0:	96 e8       	ldi	r25, 0x86	; 134
    1cf2:	86 2f       	mov	r24, r22
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	2a f0       	brmi	.+10     	; 0x1d04 <__floatsisf+0x6c>
    1cfa:	9a 95       	dec	r25
    1cfc:	66 0f       	add	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	88 1f       	adc	r24, r24
    1d02:	da f7       	brpl	.-10     	; 0x1cfa <__floatsisf+0x62>
    1d04:	88 0f       	add	r24, r24
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	08 95       	ret

00001d0e <__fp_inf>:
    1d0e:	97 f9       	bld	r25, 7
    1d10:	9f 67       	ori	r25, 0x7F	; 127
    1d12:	80 e8       	ldi	r24, 0x80	; 128
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	08 95       	ret

00001d1a <__fp_nan>:
    1d1a:	9f ef       	ldi	r25, 0xFF	; 255
    1d1c:	80 ec       	ldi	r24, 0xC0	; 192
    1d1e:	08 95       	ret

00001d20 <__fp_pscA>:
    1d20:	00 24       	eor	r0, r0
    1d22:	0a 94       	dec	r0
    1d24:	16 16       	cp	r1, r22
    1d26:	17 06       	cpc	r1, r23
    1d28:	18 06       	cpc	r1, r24
    1d2a:	09 06       	cpc	r0, r25
    1d2c:	08 95       	ret

00001d2e <__fp_pscB>:
    1d2e:	00 24       	eor	r0, r0
    1d30:	0a 94       	dec	r0
    1d32:	12 16       	cp	r1, r18
    1d34:	13 06       	cpc	r1, r19
    1d36:	14 06       	cpc	r1, r20
    1d38:	05 06       	cpc	r0, r21
    1d3a:	08 95       	ret

00001d3c <__fp_round>:
    1d3c:	09 2e       	mov	r0, r25
    1d3e:	03 94       	inc	r0
    1d40:	00 0c       	add	r0, r0
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <__fp_round+0xc>
    1d44:	88 23       	and	r24, r24
    1d46:	52 f0       	brmi	.+20     	; 0x1d5c <__fp_round+0x20>
    1d48:	bb 0f       	add	r27, r27
    1d4a:	40 f4       	brcc	.+16     	; 0x1d5c <__fp_round+0x20>
    1d4c:	bf 2b       	or	r27, r31
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <__fp_round+0x18>
    1d50:	60 ff       	sbrs	r22, 0
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <__fp_round+0x20>
    1d54:	6f 5f       	subi	r22, 0xFF	; 255
    1d56:	7f 4f       	sbci	r23, 0xFF	; 255
    1d58:	8f 4f       	sbci	r24, 0xFF	; 255
    1d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5c:	08 95       	ret

00001d5e <__fp_split3>:
    1d5e:	57 fd       	sbrc	r21, 7
    1d60:	90 58       	subi	r25, 0x80	; 128
    1d62:	44 0f       	add	r20, r20
    1d64:	55 1f       	adc	r21, r21
    1d66:	59 f0       	breq	.+22     	; 0x1d7e <__fp_splitA+0x10>
    1d68:	5f 3f       	cpi	r21, 0xFF	; 255
    1d6a:	71 f0       	breq	.+28     	; 0x1d88 <__fp_splitA+0x1a>
    1d6c:	47 95       	ror	r20

00001d6e <__fp_splitA>:
    1d6e:	88 0f       	add	r24, r24
    1d70:	97 fb       	bst	r25, 7
    1d72:	99 1f       	adc	r25, r25
    1d74:	61 f0       	breq	.+24     	; 0x1d8e <__fp_splitA+0x20>
    1d76:	9f 3f       	cpi	r25, 0xFF	; 255
    1d78:	79 f0       	breq	.+30     	; 0x1d98 <__fp_splitA+0x2a>
    1d7a:	87 95       	ror	r24
    1d7c:	08 95       	ret
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	14 06       	cpc	r1, r20
    1d84:	55 1f       	adc	r21, r21
    1d86:	f2 cf       	rjmp	.-28     	; 0x1d6c <__fp_split3+0xe>
    1d88:	46 95       	lsr	r20
    1d8a:	f1 df       	rcall	.-30     	; 0x1d6e <__fp_splitA>
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <__fp_splitA+0x30>
    1d8e:	16 16       	cp	r1, r22
    1d90:	17 06       	cpc	r1, r23
    1d92:	18 06       	cpc	r1, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	f1 cf       	rjmp	.-30     	; 0x1d7a <__fp_splitA+0xc>
    1d98:	86 95       	lsr	r24
    1d9a:	71 05       	cpc	r23, r1
    1d9c:	61 05       	cpc	r22, r1
    1d9e:	08 94       	sec
    1da0:	08 95       	ret

00001da2 <__fp_zero>:
    1da2:	e8 94       	clt

00001da4 <__fp_szero>:
    1da4:	bb 27       	eor	r27, r27
    1da6:	66 27       	eor	r22, r22
    1da8:	77 27       	eor	r23, r23
    1daa:	cb 01       	movw	r24, r22
    1dac:	97 f9       	bld	r25, 7
    1dae:	08 95       	ret

00001db0 <__mulsf3>:
    1db0:	0b d0       	rcall	.+22     	; 0x1dc8 <__mulsf3x>
    1db2:	c4 cf       	rjmp	.-120    	; 0x1d3c <__fp_round>
    1db4:	b5 df       	rcall	.-150    	; 0x1d20 <__fp_pscA>
    1db6:	28 f0       	brcs	.+10     	; 0x1dc2 <__mulsf3+0x12>
    1db8:	ba df       	rcall	.-140    	; 0x1d2e <__fp_pscB>
    1dba:	18 f0       	brcs	.+6      	; 0x1dc2 <__mulsf3+0x12>
    1dbc:	95 23       	and	r25, r21
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <__mulsf3+0x12>
    1dc0:	a6 cf       	rjmp	.-180    	; 0x1d0e <__fp_inf>
    1dc2:	ab cf       	rjmp	.-170    	; 0x1d1a <__fp_nan>
    1dc4:	11 24       	eor	r1, r1
    1dc6:	ee cf       	rjmp	.-36     	; 0x1da4 <__fp_szero>

00001dc8 <__mulsf3x>:
    1dc8:	ca df       	rcall	.-108    	; 0x1d5e <__fp_split3>
    1dca:	a0 f3       	brcs	.-24     	; 0x1db4 <__mulsf3+0x4>

00001dcc <__mulsf3_pse>:
    1dcc:	95 9f       	mul	r25, r21
    1dce:	d1 f3       	breq	.-12     	; 0x1dc4 <__mulsf3+0x14>
    1dd0:	95 0f       	add	r25, r21
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	55 1f       	adc	r21, r21
    1dd6:	62 9f       	mul	r22, r18
    1dd8:	f0 01       	movw	r30, r0
    1dda:	72 9f       	mul	r23, r18
    1ddc:	bb 27       	eor	r27, r27
    1dde:	f0 0d       	add	r31, r0
    1de0:	b1 1d       	adc	r27, r1
    1de2:	63 9f       	mul	r22, r19
    1de4:	aa 27       	eor	r26, r26
    1de6:	f0 0d       	add	r31, r0
    1de8:	b1 1d       	adc	r27, r1
    1dea:	aa 1f       	adc	r26, r26
    1dec:	64 9f       	mul	r22, r20
    1dee:	66 27       	eor	r22, r22
    1df0:	b0 0d       	add	r27, r0
    1df2:	a1 1d       	adc	r26, r1
    1df4:	66 1f       	adc	r22, r22
    1df6:	82 9f       	mul	r24, r18
    1df8:	22 27       	eor	r18, r18
    1dfa:	b0 0d       	add	r27, r0
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	62 1f       	adc	r22, r18
    1e00:	73 9f       	mul	r23, r19
    1e02:	b0 0d       	add	r27, r0
    1e04:	a1 1d       	adc	r26, r1
    1e06:	62 1f       	adc	r22, r18
    1e08:	83 9f       	mul	r24, r19
    1e0a:	a0 0d       	add	r26, r0
    1e0c:	61 1d       	adc	r22, r1
    1e0e:	22 1f       	adc	r18, r18
    1e10:	74 9f       	mul	r23, r20
    1e12:	33 27       	eor	r19, r19
    1e14:	a0 0d       	add	r26, r0
    1e16:	61 1d       	adc	r22, r1
    1e18:	23 1f       	adc	r18, r19
    1e1a:	84 9f       	mul	r24, r20
    1e1c:	60 0d       	add	r22, r0
    1e1e:	21 1d       	adc	r18, r1
    1e20:	82 2f       	mov	r24, r18
    1e22:	76 2f       	mov	r23, r22
    1e24:	6a 2f       	mov	r22, r26
    1e26:	11 24       	eor	r1, r1
    1e28:	9f 57       	subi	r25, 0x7F	; 127
    1e2a:	50 40       	sbci	r21, 0x00	; 0
    1e2c:	8a f0       	brmi	.+34     	; 0x1e50 <__mulsf3_pse+0x84>
    1e2e:	e1 f0       	breq	.+56     	; 0x1e68 <__mulsf3_pse+0x9c>
    1e30:	88 23       	and	r24, r24
    1e32:	4a f0       	brmi	.+18     	; 0x1e46 <__mulsf3_pse+0x7a>
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	91 50       	subi	r25, 0x01	; 1
    1e42:	50 40       	sbci	r21, 0x00	; 0
    1e44:	a9 f7       	brne	.-22     	; 0x1e30 <__mulsf3_pse+0x64>
    1e46:	9e 3f       	cpi	r25, 0xFE	; 254
    1e48:	51 05       	cpc	r21, r1
    1e4a:	70 f0       	brcs	.+28     	; 0x1e68 <__mulsf3_pse+0x9c>
    1e4c:	60 cf       	rjmp	.-320    	; 0x1d0e <__fp_inf>
    1e4e:	aa cf       	rjmp	.-172    	; 0x1da4 <__fp_szero>
    1e50:	5f 3f       	cpi	r21, 0xFF	; 255
    1e52:	ec f3       	brlt	.-6      	; 0x1e4e <__mulsf3_pse+0x82>
    1e54:	98 3e       	cpi	r25, 0xE8	; 232
    1e56:	dc f3       	brlt	.-10     	; 0x1e4e <__mulsf3_pse+0x82>
    1e58:	86 95       	lsr	r24
    1e5a:	77 95       	ror	r23
    1e5c:	67 95       	ror	r22
    1e5e:	b7 95       	ror	r27
    1e60:	f7 95       	ror	r31
    1e62:	e7 95       	ror	r30
    1e64:	9f 5f       	subi	r25, 0xFF	; 255
    1e66:	c1 f7       	brne	.-16     	; 0x1e58 <__mulsf3_pse+0x8c>
    1e68:	fe 2b       	or	r31, r30
    1e6a:	88 0f       	add	r24, r24
    1e6c:	91 1d       	adc	r25, r1
    1e6e:	96 95       	lsr	r25
    1e70:	87 95       	ror	r24
    1e72:	97 f9       	bld	r25, 7
    1e74:	08 95       	ret

00001e76 <__divmodhi4>:
    1e76:	97 fb       	bst	r25, 7
    1e78:	07 2e       	mov	r0, r23
    1e7a:	16 f4       	brtc	.+4      	; 0x1e80 <__divmodhi4+0xa>
    1e7c:	00 94       	com	r0
    1e7e:	06 d0       	rcall	.+12     	; 0x1e8c <__divmodhi4_neg1>
    1e80:	77 fd       	sbrc	r23, 7
    1e82:	08 d0       	rcall	.+16     	; 0x1e94 <__divmodhi4_neg2>
    1e84:	0b d0       	rcall	.+22     	; 0x1e9c <__udivmodhi4>
    1e86:	07 fc       	sbrc	r0, 7
    1e88:	05 d0       	rcall	.+10     	; 0x1e94 <__divmodhi4_neg2>
    1e8a:	3e f4       	brtc	.+14     	; 0x1e9a <__divmodhi4_exit>

00001e8c <__divmodhi4_neg1>:
    1e8c:	90 95       	com	r25
    1e8e:	81 95       	neg	r24
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	08 95       	ret

00001e94 <__divmodhi4_neg2>:
    1e94:	70 95       	com	r23
    1e96:	61 95       	neg	r22
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255

00001e9a <__divmodhi4_exit>:
    1e9a:	08 95       	ret

00001e9c <__udivmodhi4>:
    1e9c:	aa 1b       	sub	r26, r26
    1e9e:	bb 1b       	sub	r27, r27
    1ea0:	51 e1       	ldi	r21, 0x11	; 17
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <__udivmodhi4_ep>

00001ea4 <__udivmodhi4_loop>:
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	a6 17       	cp	r26, r22
    1eaa:	b7 07       	cpc	r27, r23
    1eac:	10 f0       	brcs	.+4      	; 0x1eb2 <__udivmodhi4_ep>
    1eae:	a6 1b       	sub	r26, r22
    1eb0:	b7 0b       	sbc	r27, r23

00001eb2 <__udivmodhi4_ep>:
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	5a 95       	dec	r21
    1eb8:	a9 f7       	brne	.-22     	; 0x1ea4 <__udivmodhi4_loop>
    1eba:	80 95       	com	r24
    1ebc:	90 95       	com	r25
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	08 95       	ret

00001ec4 <_exit>:
    1ec4:	f8 94       	cli

00001ec6 <__stop_program>:
    1ec6:	ff cf       	rjmp	.-2      	; 0x1ec6 <__stop_program>
