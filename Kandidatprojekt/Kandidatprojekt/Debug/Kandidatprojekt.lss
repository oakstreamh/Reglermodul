
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000012a6  0000133a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  0080015a  0080015a  00001394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f53  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b8  00000000  00000000  0000348f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a42  00000000  00000000  00003d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c4  00000000  00000000  0000578c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010aad  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001315  00000000  00000000  000166fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00017a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003cff  00000000  00000000  00017b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c5       	rjmp	.+2824   	; 0xb56 <__vector_19>
      4e:	00 00       	nop
      50:	5f c6       	rjmp	.+3262   	; 0xd10 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c6       	rjmp	.+3436   	; 0xdc6 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c4       	rjmp	.+2292   	; 0x966 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ea       	ldi	r30, 0xA6	; 166
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 35       	cpi	r26, 0x5A	; 90
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e5       	ldi	r26, 0x5A	; 90
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3a       	cpi	r26, 0xA4	; 164
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	b6 d4       	rcall	.+2412   	; 0xa30 <main>
      c4:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <step1>:
	fuzzification();
	rule_evaluation();
	defuzzification();
	setServo(servo.value);
	
}
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	c0 56       	subi	r28, 0x60	; 96
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	c1 5a       	subi	r28, 0xA1	; 161
     102:	de 4f       	sbci	r29, 0xFE	; 254
     104:	79 83       	std	Y+1, r23	; 0x01
     106:	68 83       	st	Y, r22
     108:	cf 55       	subi	r28, 0x5F	; 95
     10a:	d1 40       	sbci	r29, 0x01	; 1
     10c:	26 e0       	ldi	r18, 0x06	; 6
     10e:	e0 e0       	ldi	r30, 0x00	; 0
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	de 01       	movw	r26, r28
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	01 90       	ld	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	2a 95       	dec	r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <step1+0x4c>
     11e:	99 23       	and	r25, r25
     120:	1c f4       	brge	.+6      	; 0x128 <step1+0x5e>
     122:	1c 86       	std	Y+12, r1	; 0x0c
     124:	1b 86       	std	Y+11, r1	; 0x0b
     126:	0a c0       	rjmp	.+20     	; 0x13c <step1+0x72>
     128:	85 36       	cpi	r24, 0x65	; 101
     12a:	91 05       	cpc	r25, r1
     12c:	2c f0       	brlt	.+10     	; 0x138 <step1+0x6e>
     12e:	84 e6       	ldi	r24, 0x64	; 100
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	9c 87       	std	Y+12, r25	; 0x0c
     134:	8b 87       	std	Y+11, r24	; 0x0b
     136:	02 c0       	rjmp	.+4      	; 0x13c <step1+0x72>
     138:	9c 87       	std	Y+12, r25	; 0x0c
     13a:	8b 87       	std	Y+11, r24	; 0x0b
     13c:	86 e0       	ldi	r24, 0x06	; 6
     13e:	e6 e0       	ldi	r30, 0x06	; 6
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	de 01       	movw	r26, r28
     144:	51 96       	adiw	r26, 0x11	; 17
     146:	01 90       	ld	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	8a 95       	dec	r24
     14c:	e1 f7       	brne	.-8      	; 0x146 <step1+0x7c>
     14e:	3e 01       	movw	r6, r28
     150:	21 e2       	ldi	r18, 0x21	; 33
     152:	62 0e       	add	r6, r18
     154:	71 1c       	adc	r7, r1
     156:	0f 2e       	mov	r0, r31
     158:	fc e3       	ldi	r31, 0x3C	; 60
     15a:	ef 2e       	mov	r14, r31
     15c:	f1 2c       	mov	r15, r1
     15e:	f0 2d       	mov	r31, r0
     160:	08 e2       	ldi	r16, 0x28	; 40
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4f ef       	ldi	r20, 0xFF	; 255
     16a:	5f ef       	ldi	r21, 0xFF	; 255
     16c:	6c e0       	ldi	r22, 0x0C	; 12
     16e:	71 e0       	ldi	r23, 0x01	; 1
     170:	c3 01       	movw	r24, r6
     172:	ca d3       	rcall	.+1940   	; 0x908 <MATLAB_MF>
     174:	4e 01       	movw	r8, r28
     176:	47 e3       	ldi	r20, 0x37	; 55
     178:	84 0e       	add	r8, r20
     17a:	91 1c       	adc	r9, r1
     17c:	0f 2e       	mov	r0, r31
     17e:	fa e5       	ldi	r31, 0x5A	; 90
     180:	ef 2e       	mov	r14, r31
     182:	f1 2c       	mov	r15, r1
     184:	f0 2d       	mov	r31, r0
     186:	00 e5       	ldi	r16, 0x50	; 80
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	20 e5       	ldi	r18, 0x50	; 80
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	42 e3       	ldi	r20, 0x32	; 50
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	63 e1       	ldi	r22, 0x13	; 19
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	c4 01       	movw	r24, r8
     198:	b7 d3       	rcall	.+1902   	; 0x908 <MATLAB_MF>
     19a:	6e 01       	movw	r12, r28
     19c:	5d e4       	ldi	r21, 0x4D	; 77
     19e:	c5 0e       	add	r12, r21
     1a0:	d1 1c       	adc	r13, r1
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f5 e6       	ldi	r31, 0x65	; 101
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f1 2c       	mov	r15, r1
     1aa:	f0 2d       	mov	r31, r0
     1ac:	04 e6       	ldi	r16, 0x64	; 100
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	2a e5       	ldi	r18, 0x5A	; 90
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e5       	ldi	r20, 0x50	; 80
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	6b e1       	ldi	r22, 0x1B	; 27
     1ba:	71 e0       	ldi	r23, 0x01	; 1
     1bc:	c6 01       	movw	r24, r12
     1be:	a4 d3       	rcall	.+1864   	; 0x908 <MATLAB_MF>
     1c0:	7e 8e       	std	Y+30, r7	; 0x1e
     1c2:	6d 8e       	std	Y+29, r6	; 0x1d
     1c4:	9e aa       	std	Y+54, r9	; 0x36
     1c6:	8d aa       	std	Y+53, r8	; 0x35
     1c8:	2d 96       	adiw	r28, 0x0d	; 13
     1ca:	df ae       	std	Y+63, r13	; 0x3f
     1cc:	ce ae       	std	Y+62, r12	; 0x3e
     1ce:	2d 97       	sbiw	r28, 0x0d	; 13
     1d0:	f6 01       	movw	r30, r12
     1d2:	15 8a       	std	Z+21, r1	; 0x15
     1d4:	14 8a       	std	Z+20, r1	; 0x14
     1d6:	c1 5a       	subi	r28, 0xA1	; 161
     1d8:	de 4f       	sbci	r29, 0xFE	; 254
     1da:	48 81       	ld	r20, Y
     1dc:	59 81       	ldd	r21, Y+1	; 0x01
     1de:	cf 55       	subi	r28, 0x5F	; 95
     1e0:	d1 40       	sbci	r29, 0x01	; 1
     1e2:	55 23       	and	r21, r21
     1e4:	1c f4       	brge	.+6      	; 0x1ec <step1+0x122>
     1e6:	1c 8e       	std	Y+28, r1	; 0x1c
     1e8:	1b 8e       	std	Y+27, r1	; 0x1b
     1ea:	16 c0       	rjmp	.+44     	; 0x218 <step1+0x14e>
     1ec:	c1 5a       	subi	r28, 0xA1	; 161
     1ee:	de 4f       	sbci	r29, 0xFE	; 254
     1f0:	88 81       	ld	r24, Y
     1f2:	99 81       	ldd	r25, Y+1	; 0x01
     1f4:	cf 55       	subi	r28, 0x5F	; 95
     1f6:	d1 40       	sbci	r29, 0x01	; 1
     1f8:	85 36       	cpi	r24, 0x65	; 101
     1fa:	91 05       	cpc	r25, r1
     1fc:	2c f0       	brlt	.+10     	; 0x208 <step1+0x13e>
     1fe:	84 e6       	ldi	r24, 0x64	; 100
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	9c 8f       	std	Y+28, r25	; 0x1c
     204:	8b 8f       	std	Y+27, r24	; 0x1b
     206:	08 c0       	rjmp	.+16     	; 0x218 <step1+0x14e>
     208:	c1 5a       	subi	r28, 0xA1	; 161
     20a:	de 4f       	sbci	r29, 0xFE	; 254
     20c:	e8 81       	ld	r30, Y
     20e:	f9 81       	ldd	r31, Y+1	; 0x01
     210:	cf 55       	subi	r28, 0x5F	; 95
     212:	d1 40       	sbci	r29, 0x01	; 1
     214:	fc 8f       	std	Y+28, r31	; 0x1c
     216:	eb 8f       	std	Y+27, r30	; 0x1b
     218:	6e 01       	movw	r12, r28
     21a:	f3 e6       	ldi	r31, 0x63	; 99
     21c:	cf 0e       	add	r12, r31
     21e:	d1 1c       	adc	r13, r1
     220:	0f 2e       	mov	r0, r31
     222:	fb e4       	ldi	r31, 0x4B	; 75
     224:	ef 2e       	mov	r14, r31
     226:	f1 2c       	mov	r15, r1
     228:	f0 2d       	mov	r31, r0
     22a:	01 e4       	ldi	r16, 0x41	; 65
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	4f ef       	ldi	r20, 0xFF	; 255
     234:	5f ef       	ldi	r21, 0xFF	; 255
     236:	60 e2       	ldi	r22, 0x20	; 32
     238:	71 e0       	ldi	r23, 0x01	; 1
     23a:	c6 01       	movw	r24, r12
     23c:	65 d3       	rcall	.+1738   	; 0x908 <MATLAB_MF>
     23e:	1e 01       	movw	r2, r28
     240:	29 e7       	ldi	r18, 0x79	; 121
     242:	22 0e       	add	r2, r18
     244:	31 1c       	adc	r3, r1
     246:	0f 2e       	mov	r0, r31
     248:	f5 e5       	ldi	r31, 0x55	; 85
     24a:	ef 2e       	mov	r14, r31
     24c:	f1 2c       	mov	r15, r1
     24e:	f0 2d       	mov	r31, r0
     250:	0b e4       	ldi	r16, 0x4B	; 75
     252:	10 e0       	ldi	r17, 0x00	; 0
     254:	2b e4       	ldi	r18, 0x4B	; 75
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	41 e4       	ldi	r20, 0x41	; 65
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	67 e2       	ldi	r22, 0x27	; 39
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	c1 01       	movw	r24, r2
     262:	52 d3       	rcall	.+1700   	; 0x908 <MATLAB_MF>
     264:	3e 01       	movw	r6, r28
     266:	4f e8       	ldi	r20, 0x8F	; 143
     268:	64 0e       	add	r6, r20
     26a:	71 1c       	adc	r7, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	f5 e6       	ldi	r31, 0x65	; 101
     270:	ef 2e       	mov	r14, r31
     272:	f1 2c       	mov	r15, r1
     274:	f0 2d       	mov	r31, r0
     276:	04 e6       	ldi	r16, 0x64	; 100
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	25 e5       	ldi	r18, 0x55	; 85
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	4b e4       	ldi	r20, 0x4B	; 75
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	6f e2       	ldi	r22, 0x2F	; 47
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	c3 01       	movw	r24, r6
     288:	3f d3       	rcall	.+1662   	; 0x908 <MATLAB_MF>
     28a:	de 86       	std	Y+14, r13	; 0x0e
     28c:	cd 86       	std	Y+13, r12	; 0x0d
     28e:	f6 01       	movw	r30, r12
     290:	35 8a       	std	Z+21, r3	; 0x15
     292:	24 8a       	std	Z+20, r2	; 0x14
     294:	f1 01       	movw	r30, r2
     296:	75 8a       	std	Z+21, r7	; 0x15
     298:	64 8a       	std	Z+20, r6	; 0x14
     29a:	f3 01       	movw	r30, r6
     29c:	15 8a       	std	Z+21, r1	; 0x15
     29e:	14 8a       	std	Z+20, r1	; 0x14
     2a0:	5e 01       	movw	r10, r28
     2a2:	f5 ea       	ldi	r31, 0xA5	; 165
     2a4:	af 0e       	add	r10, r31
     2a6:	b1 1c       	adc	r11, r1
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	e4 e3       	ldi	r30, 0x34	; 52
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	d5 01       	movw	r26, r10
     2b0:	01 90       	ld	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	8a 95       	dec	r24
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <step1+0x1e6>
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f7 ee       	ldi	r31, 0xE7	; 231
     2bc:	ef 2e       	mov	r14, r31
     2be:	f7 e0       	ldi	r31, 0x07	; 7
     2c0:	ff 2e       	mov	r15, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	06 ee       	ldi	r16, 0xE6	; 230
     2c6:	17 e0       	ldi	r17, 0x07	; 7
     2c8:	26 ee       	ldi	r18, 0xE6	; 230
     2ca:	37 e0       	ldi	r19, 0x07	; 7
     2cc:	45 ee       	ldi	r20, 0xE5	; 229
     2ce:	57 e0       	ldi	r21, 0x07	; 7
     2d0:	6a e3       	ldi	r22, 0x3A	; 58
     2d2:	71 e0       	ldi	r23, 0x01	; 1
     2d4:	ce 01       	movw	r24, r28
     2d6:	8b 54       	subi	r24, 0x4B	; 75
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	16 d3       	rcall	.+1580   	; 0x908 <MATLAB_MF>
     2dc:	4e 01       	movw	r8, r28
     2de:	2b ec       	ldi	r18, 0xCB	; 203
     2e0:	82 0e       	add	r8, r18
     2e2:	91 1c       	adc	r9, r1
     2e4:	0f 2e       	mov	r0, r31
     2e6:	f4 ec       	ldi	r31, 0xC4	; 196
     2e8:	ef 2e       	mov	r14, r31
     2ea:	f9 e0       	ldi	r31, 0x09	; 9
     2ec:	ff 2e       	mov	r15, r31
     2ee:	f0 2d       	mov	r31, r0
     2f0:	0e e2       	ldi	r16, 0x2E	; 46
     2f2:	19 e0       	ldi	r17, 0x09	; 9
     2f4:	2e e2       	ldi	r18, 0x2E	; 46
     2f6:	39 e0       	ldi	r19, 0x09	; 9
     2f8:	4d ee       	ldi	r20, 0xED	; 237
     2fa:	58 e0       	ldi	r21, 0x08	; 8
     2fc:	65 e4       	ldi	r22, 0x45	; 69
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	c4 01       	movw	r24, r8
     302:	02 d3       	rcall	.+1540   	; 0x908 <MATLAB_MF>
     304:	0f 2e       	mov	r0, r31
     306:	f4 ee       	ldi	r31, 0xE4	; 228
     308:	ef 2e       	mov	r14, r31
     30a:	fa e0       	ldi	r31, 0x0A	; 10
     30c:	ff 2e       	mov	r15, r31
     30e:	f0 2d       	mov	r31, r0
     310:	04 e6       	ldi	r16, 0x64	; 100
     312:	1a e0       	ldi	r17, 0x0A	; 10
     314:	24 e6       	ldi	r18, 0x64	; 100
     316:	3a e0       	ldi	r19, 0x0A	; 10
     318:	44 ee       	ldi	r20, 0xE4	; 228
     31a:	59 e0       	ldi	r21, 0x09	; 9
     31c:	6b e4       	ldi	r22, 0x4B	; 75
     31e:	71 e0       	ldi	r23, 0x01	; 1
     320:	ce 01       	movw	r24, r28
     322:	8f 51       	subi	r24, 0x1F	; 31
     324:	9f 4f       	sbci	r25, 0xFF	; 255
     326:	f0 d2       	rcall	.+1504   	; 0x908 <MATLAB_MF>
     328:	2e 01       	movw	r4, r28
     32a:	47 ef       	ldi	r20, 0xF7	; 247
     32c:	44 0e       	add	r4, r20
     32e:	51 1c       	adc	r5, r1
     330:	0f 2e       	mov	r0, r31
     332:	fb ed       	ldi	r31, 0xDB	; 219
     334:	ef 2e       	mov	r14, r31
     336:	fb e0       	ldi	r31, 0x0B	; 11
     338:	ff 2e       	mov	r15, r31
     33a:	f0 2d       	mov	r31, r0
     33c:	08 eb       	ldi	r16, 0xB8	; 184
     33e:	1b e0       	ldi	r17, 0x0B	; 11
     340:	28 eb       	ldi	r18, 0xB8	; 184
     342:	3b e0       	ldi	r19, 0x0B	; 11
     344:	44 e5       	ldi	r20, 0x54	; 84
     346:	5b e0       	ldi	r21, 0x0B	; 11
     348:	64 e5       	ldi	r22, 0x54	; 84
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	c2 01       	movw	r24, r4
     34e:	dc d2       	rcall	.+1464   	; 0x908 <MATLAB_MF>
     350:	45 eb       	ldi	r20, 0xB5	; 181
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	4c 0f       	add	r20, r28
     356:	5d 1f       	adc	r21, r29
     358:	f5 01       	movw	r30, r10
     35a:	55 87       	std	Z+13, r21	; 0x0d
     35c:	44 87       	std	Z+12, r20	; 0x0c
     35e:	c7 53       	subi	r28, 0x37	; 55
     360:	df 4f       	sbci	r29, 0xFF	; 255
     362:	99 82       	std	Y+1, r9	; 0x01
     364:	88 82       	st	Y, r8
     366:	c9 5c       	subi	r28, 0xC9	; 201
     368:	d0 40       	sbci	r29, 0x00	; 0
     36a:	41 ee       	ldi	r20, 0xE1	; 225
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	4c 0f       	add	r20, r28
     370:	5d 1f       	adc	r21, r29
     372:	f4 01       	movw	r30, r8
     374:	55 8b       	std	Z+21, r21	; 0x15
     376:	44 8b       	std	Z+20, r20	; 0x14
     378:	cb 50       	subi	r28, 0x0B	; 11
     37a:	df 4f       	sbci	r29, 0xFF	; 255
     37c:	59 82       	std	Y+1, r5	; 0x01
     37e:	48 82       	st	Y, r4
     380:	c5 5f       	subi	r28, 0xF5	; 245
     382:	d0 40       	sbci	r29, 0x00	; 0
     384:	f2 01       	movw	r30, r4
     386:	15 8a       	std	Z+21, r1	; 0x15
     388:	14 8a       	std	Z+20, r1	; 0x14
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	90 93 79 02 	sts	0x0279, r25
     392:	80 93 78 02 	sts	0x0278, r24
     396:	40 96       	adiw	r24, 0x10	; 16
     398:	98 8b       	std	Y+16, r25	; 0x10
     39a:	8f 87       	std	Y+15, r24	; 0x0f
     39c:	18 a2       	std	Y+32, r1	; 0x20
     39e:	1f 8e       	std	Y+31, r1	; 0x1f
     3a0:	b0 92 77 02 	sts	0x0277, r11
     3a4:	a0 92 76 02 	sts	0x0276, r10
     3a8:	f5 01       	movw	r30, r10
     3aa:	17 86       	std	Z+15, r1	; 0x0f
     3ac:	16 86       	std	Z+14, r1	; 0x0e
     3ae:	9e 01       	movw	r18, r28
     3b0:	23 5f       	subi	r18, 0xF3	; 243
     3b2:	3e 4f       	sbci	r19, 0xFE	; 254
     3b4:	30 93 7b 02 	sts	0x027B, r19
     3b8:	20 93 7a 02 	sts	0x027A, r18
     3bc:	8e 5f       	subi	r24, 0xFE	; 254
     3be:	9e 4f       	sbci	r25, 0xFE	; 254
     3c0:	f9 01       	movw	r30, r18
     3c2:	95 83       	std	Z+5, r25	; 0x05
     3c4:	84 83       	std	Z+4, r24	; 0x04
     3c6:	de 01       	movw	r26, r28
     3c8:	a7 5e       	subi	r26, 0xE7	; 231
     3ca:	be 4f       	sbci	r27, 0xFE	; 254
     3cc:	fc 01       	movw	r30, r24
     3ce:	b5 83       	std	Z+5, r27	; 0x05
     3d0:	a4 83       	std	Z+4, r26	; 0x04
     3d2:	4f e1       	ldi	r20, 0x1F	; 31
     3d4:	51 e0       	ldi	r21, 0x01	; 1
     3d6:	4c 0f       	add	r20, r28
     3d8:	5d 1f       	adc	r21, r29
     3da:	15 96       	adiw	r26, 0x05	; 5
     3dc:	5c 93       	st	X, r21
     3de:	4e 93       	st	-X, r20
     3e0:	14 97       	sbiw	r26, 0x04	; 4
     3e2:	7e 01       	movw	r14, r28
     3e4:	5b ed       	ldi	r21, 0xDB	; 219
     3e6:	e5 1a       	sub	r14, r21
     3e8:	5e ef       	ldi	r21, 0xFE	; 254
     3ea:	f5 0a       	sbc	r15, r21
     3ec:	cd 5d       	subi	r28, 0xDD	; 221
     3ee:	de 4f       	sbci	r29, 0xFE	; 254
     3f0:	f9 82       	std	Y+1, r15	; 0x01
     3f2:	e8 82       	st	Y, r14
     3f4:	c3 52       	subi	r28, 0x23	; 35
     3f6:	d1 40       	sbci	r29, 0x01	; 1
     3f8:	f7 01       	movw	r30, r14
     3fa:	15 82       	std	Z+5, r1	; 0x05
     3fc:	14 82       	std	Z+4, r1	; 0x04
     3fe:	be 01       	movw	r22, r28
     400:	65 5d       	subi	r22, 0xD5	; 213
     402:	7e 4f       	sbci	r23, 0xFE	; 254
     404:	f9 01       	movw	r30, r18
     406:	71 83       	std	Z+1, r23	; 0x01
     408:	60 83       	st	Z, r22
     40a:	8e 01       	movw	r16, r28
     40c:	01 5d       	subi	r16, 0xD1	; 209
     40e:	1e 4f       	sbci	r17, 0xFE	; 254
     410:	fb 01       	movw	r30, r22
     412:	13 83       	std	Z+3, r17	; 0x03
     414:	02 83       	std	Z+2, r16	; 0x02
     416:	f8 01       	movw	r30, r16
     418:	13 82       	std	Z+3, r1	; 0x03
     41a:	12 82       	std	Z+2, r1	; 0x02
     41c:	ae 01       	movw	r20, r28
     41e:	4d 5c       	subi	r20, 0xCD	; 205
     420:	5e 4f       	sbci	r21, 0xFE	; 254
     422:	f9 01       	movw	r30, r18
     424:	53 83       	std	Z+3, r21	; 0x03
     426:	42 83       	std	Z+2, r20	; 0x02
     428:	fa 01       	movw	r30, r20
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02
     42e:	26 5b       	subi	r18, 0xB6	; 182
     430:	31 09       	sbc	r19, r1
     432:	fb 01       	movw	r30, r22
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	fa e0       	ldi	r31, 0x0A	; 10
     43a:	cf 0e       	add	r12, r31
     43c:	d1 1c       	adc	r13, r1
     43e:	f8 01       	movw	r30, r16
     440:	d1 82       	std	Z+1, r13	; 0x01
     442:	c0 82       	st	Z, r12
     444:	0a 55       	subi	r16, 0x5A	; 90
     446:	11 09       	sbc	r17, r1
     448:	fa 01       	movw	r30, r20
     44a:	11 83       	std	Z+1, r17	; 0x01
     44c:	00 83       	st	Z, r16
     44e:	6e 01       	movw	r12, r28
     450:	f9 ec       	ldi	r31, 0xC9	; 201
     452:	cf 1a       	sub	r12, r31
     454:	fe ef       	ldi	r31, 0xFE	; 254
     456:	df 0a       	sbc	r13, r31
     458:	fc 01       	movw	r30, r24
     45a:	d1 82       	std	Z+1, r13	; 0x01
     45c:	c0 82       	st	Z, r12
     45e:	60 5f       	subi	r22, 0xF0	; 240
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	f6 01       	movw	r30, r12
     464:	73 83       	std	Z+3, r23	; 0x03
     466:	62 83       	std	Z+2, r22	; 0x02
     468:	fb 01       	movw	r30, r22
     46a:	13 82       	std	Z+3, r1	; 0x03
     46c:	12 82       	std	Z+2, r1	; 0x02
     46e:	44 5f       	subi	r20, 0xF4	; 244
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	fc 01       	movw	r30, r24
     474:	53 83       	std	Z+3, r21	; 0x03
     476:	42 83       	std	Z+2, r20	; 0x02
     478:	fa 01       	movw	r30, r20
     47a:	13 82       	std	Z+3, r1	; 0x03
     47c:	12 82       	std	Z+2, r1	; 0x02
     47e:	f6 01       	movw	r30, r12
     480:	31 83       	std	Z+1, r19	; 0x01
     482:	20 83       	st	Z, r18
     484:	fa e0       	ldi	r31, 0x0A	; 10
     486:	6f 0e       	add	r6, r31
     488:	71 1c       	adc	r7, r1
     48a:	fb 01       	movw	r30, r22
     48c:	71 82       	std	Z+1, r7	; 0x01
     48e:	60 82       	st	Z, r6
     490:	fa e0       	ldi	r31, 0x0A	; 10
     492:	4f 0e       	add	r4, r31
     494:	51 1c       	adc	r5, r1
     496:	fa 01       	movw	r30, r20
     498:	51 82       	std	Z+1, r5	; 0x01
     49a:	40 82       	st	Z, r4
     49c:	68 5f       	subi	r22, 0xF8	; 248
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	11 96       	adiw	r26, 0x01	; 1
     4a2:	7c 93       	st	X, r23
     4a4:	6e 93       	st	-X, r22
     4a6:	48 5f       	subi	r20, 0xF8	; 248
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	fb 01       	movw	r30, r22
     4ac:	53 83       	std	Z+3, r21	; 0x03
     4ae:	42 83       	std	Z+2, r20	; 0x02
     4b0:	fa 01       	movw	r30, r20
     4b2:	13 82       	std	Z+3, r1	; 0x03
     4b4:	12 82       	std	Z+2, r1	; 0x02
     4b6:	c8 96       	adiw	r24, 0x38	; 56
     4b8:	13 96       	adiw	r26, 0x03	; 3
     4ba:	9c 93       	st	X, r25
     4bc:	8e 93       	st	-X, r24
     4be:	12 97       	sbiw	r26, 0x02	; 2
     4c0:	fc 01       	movw	r30, r24
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	12 82       	std	Z+2, r1	; 0x02
     4c6:	fb 01       	movw	r30, r22
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	20 83       	st	Z, r18
     4cc:	fa e0       	ldi	r31, 0x0A	; 10
     4ce:	2f 0e       	add	r2, r31
     4d0:	31 1c       	adc	r3, r1
     4d2:	fa 01       	movw	r30, r20
     4d4:	31 82       	std	Z+1, r3	; 0x01
     4d6:	20 82       	st	Z, r2
     4d8:	21 ee       	ldi	r18, 0xE1	; 225
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	2c 0f       	add	r18, r28
     4de:	3d 1f       	adc	r19, r29
     4e0:	26 5f       	subi	r18, 0xF6	; 246
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	fc 01       	movw	r30, r24
     4e6:	31 83       	std	Z+1, r19	; 0x01
     4e8:	20 83       	st	Z, r18
     4ea:	04 96       	adiw	r24, 0x04	; 4
     4ec:	c1 5e       	subi	r28, 0xE1	; 225
     4ee:	de 4f       	sbci	r29, 0xFE	; 254
     4f0:	99 83       	std	Y+1, r25	; 0x01
     4f2:	88 83       	st	Y, r24
     4f4:	cf 51       	subi	r28, 0x1F	; 31
     4f6:	d1 40       	sbci	r29, 0x01	; 1
     4f8:	fc 01       	movw	r30, r24
     4fa:	13 82       	std	Z+3, r1	; 0x03
     4fc:	12 82       	std	Z+2, r1	; 0x02
     4fe:	da 96       	adiw	r26, 0x3a	; 58
     500:	cf 5d       	subi	r28, 0xDF	; 223
     502:	de 4f       	sbci	r29, 0xFE	; 254
     504:	b9 83       	std	Y+1, r27	; 0x01
     506:	a8 83       	st	Y, r26
     508:	c1 52       	subi	r28, 0x21	; 33
     50a:	d1 40       	sbci	r29, 0x01	; 1
     50c:	13 96       	adiw	r26, 0x03	; 3
     50e:	1c 92       	st	X, r1
     510:	1e 92       	st	-X, r1
     512:	12 97       	sbiw	r26, 0x02	; 2
     514:	2a 5a       	subi	r18, 0xAA	; 170
     516:	31 09       	sbc	r19, r1
     518:	31 83       	std	Z+1, r19	; 0x01
     51a:	20 83       	st	Z, r18
     51c:	85 eb       	ldi	r24, 0xB5	; 181
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	8c 0f       	add	r24, r28
     522:	9d 1f       	adc	r25, r29
     524:	0a 96       	adiw	r24, 0x0a	; 10
     526:	11 96       	adiw	r26, 0x01	; 1
     528:	9c 93       	st	X, r25
     52a:	8e 93       	st	-X, r24
     52c:	14 96       	adiw	r26, 0x04	; 4
     52e:	f7 01       	movw	r30, r14
     530:	b1 83       	std	Z+1, r27	; 0x01
     532:	a0 83       	st	Z, r26
     534:	13 96       	adiw	r26, 0x03	; 3
     536:	1c 92       	st	X, r1
     538:	1e 92       	st	-X, r1
     53a:	12 97       	sbiw	r26, 0x02	; 2
     53c:	26 5e       	subi	r18, 0xE6	; 230
     53e:	3e 4f       	sbci	r19, 0xFE	; 254
     540:	33 83       	std	Z+3, r19	; 0x03
     542:	22 83       	std	Z+2, r18	; 0x02
     544:	f9 01       	movw	r30, r18
     546:	13 82       	std	Z+3, r1	; 0x03
     548:	12 82       	std	Z+2, r1	; 0x02
     54a:	84 59       	subi	r24, 0x94	; 148
     54c:	91 09       	sbc	r25, r1
     54e:	8d 93       	st	X+, r24
     550:	9c 93       	st	X, r25
     552:	11 83       	std	Z+1, r17	; 0x01
     554:	00 83       	st	Z, r16
     556:	ae d0       	rcall	.+348    	; 0x6b4 <fuzzification>
     558:	d4 d0       	rcall	.+424    	; 0x702 <rule_evaluation>
     55a:	19 d1       	rcall	.+562    	; 0x78e <defuzzification>
     55c:	f5 01       	movw	r30, r10
     55e:	82 85       	ldd	r24, Z+10	; 0x0a
     560:	93 85       	ldd	r25, Z+11	; 0x0b
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	09 f0       	breq	.+2      	; 0x568 <step1+0x49e>
     566:	dc d2       	rcall	.+1464   	; 0xb20 <setServo>
     568:	c1 5a       	subi	r28, 0xA1	; 161
     56a:	de 4f       	sbci	r29, 0xFE	; 254
     56c:	48 81       	ld	r20, Y
     56e:	59 81       	ldd	r21, Y+1	; 0x01
     570:	cf 55       	subi	r28, 0x5F	; 95
     572:	d1 40       	sbci	r29, 0x01	; 1
     574:	44 31       	cpi	r20, 0x14	; 20
     576:	51 05       	cpc	r21, r1
     578:	34 f4       	brge	.+12     	; 0x586 <step1+0x4bc>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	90 93 5b 01 	sts	0x015B, r25
     582:	80 93 5a 01 	sts	0x015A, r24
     586:	c0 5a       	subi	r28, 0xA0	; 160
     588:	de 4f       	sbci	r29, 0xFE	; 254
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	7f 90       	pop	r7
     5ae:	6f 90       	pop	r6
     5b0:	5f 90       	pop	r5
     5b2:	4f 90       	pop	r4
     5b4:	3f 90       	pop	r3
     5b6:	2f 90       	pop	r2
     5b8:	08 95       	ret

000005ba <fuzzyParking>:




void fuzzyParking(int sonicL, int sonicF, int escCount)
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	8c 01       	movw	r16, r24
     5c4:	eb 01       	movw	r28, r22
	
	if (sonicF >50)
     5c6:	63 33       	cpi	r22, 0x33	; 51
     5c8:	71 05       	cpc	r23, r1
     5ca:	1c f0       	brlt	.+6      	; 0x5d2 <fuzzyParking+0x18>
	{
		setESC(2840);
     5cc:	88 e1       	ldi	r24, 0x18	; 24
     5ce:	9b e0       	ldi	r25, 0x0B	; 11
     5d0:	8c d2       	rcall	.+1304   	; 0xaea <setESC>
	}
	if (sonicF<10)
     5d2:	ca 30       	cpi	r28, 0x0A	; 10
     5d4:	d1 05       	cpc	r29, r1
     5d6:	1c f4       	brge	.+6      	; 0x5de <fuzzyParking+0x24>
	{
		setESC(2640);
     5d8:	80 e5       	ldi	r24, 0x50	; 80
     5da:	9a e0       	ldi	r25, 0x0A	; 10
     5dc:	86 d2       	rcall	.+1292   	; 0xaea <setESC>
	}
	
	
	step1(sonicL, sonicF);
     5de:	be 01       	movw	r22, r28
     5e0:	c8 01       	movw	r24, r16
     5e2:	73 dd       	rcall	.-1306   	; 0xca <step1>
			
	}
	
	*/
	
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     5ee:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     5f0:	84 85       	ldd	r24, Z+12	; 0x0c
     5f2:	95 85       	ldd	r25, Z+13	; 0x0d
     5f4:	9b 01       	movw	r18, r22
     5f6:	28 1b       	sub	r18, r24
     5f8:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     5fa:	86 85       	ldd	r24, Z+14	; 0x0e
     5fc:	97 85       	ldd	r25, Z+15	; 0x0f
     5fe:	86 1b       	sub	r24, r22
     600:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     602:	12 16       	cp	r1, r18
     604:	13 06       	cpc	r1, r19
     606:	f4 f4       	brge	.+60     	; 0x644 <compute_degree_of_membership+0x56>
     608:	18 16       	cp	r1, r24
     60a:	19 06       	cpc	r1, r25
     60c:	f4 f4       	brge	.+60     	; 0x64a <compute_degree_of_membership+0x5c>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     60e:	60 89       	ldd	r22, Z+16	; 0x10
     610:	71 89       	ldd	r23, Z+17	; 0x11
     612:	a2 89       	ldd	r26, Z+18	; 0x12
     614:	b3 89       	ldd	r27, Z+19	; 0x13
     616:	8a 9f       	mul	r24, r26
     618:	a0 01       	movw	r20, r0
     61a:	8b 9f       	mul	r24, r27
     61c:	50 0d       	add	r21, r0
     61e:	9a 9f       	mul	r25, r26
     620:	50 0d       	add	r21, r0
     622:	11 24       	eor	r1, r1
     624:	26 9f       	mul	r18, r22
     626:	c0 01       	movw	r24, r0
     628:	27 9f       	mul	r18, r23
     62a:	90 0d       	add	r25, r0
     62c:	36 9f       	mul	r19, r22
     62e:	90 0d       	add	r25, r0
     630:	11 24       	eor	r1, r1
     632:	48 17       	cp	r20, r24
     634:	59 07       	cpc	r21, r25
     636:	0c f4       	brge	.+2      	; 0x63a <compute_degree_of_membership+0x4c>
     638:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     63a:	8f 3f       	cpi	r24, 0xFF	; 255
     63c:	91 05       	cpc	r25, r1
     63e:	09 f0       	breq	.+2      	; 0x642 <compute_degree_of_membership+0x54>
     640:	3c f4       	brge	.+14     	; 0x650 <compute_degree_of_membership+0x62>
     642:	08 c0       	rjmp	.+16     	; 0x654 <compute_degree_of_membership+0x66>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	05 c0       	rjmp	.+10     	; 0x654 <compute_degree_of_membership+0x66>
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	02 c0       	rjmp	.+4      	; 0x654 <compute_degree_of_membership+0x66>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	91 e0       	ldi	r25, 0x01	; 1
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     654:	93 87       	std	Z+11, r25	; 0x0b
     656:	82 87       	std	Z+10, r24	; 0x0a
     658:	08 95       	ret

0000065a <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     664:	c6 85       	ldd	r28, Z+14	; 0x0e
     666:	d7 85       	ldd	r29, Z+15	; 0x0f
     668:	84 85       	ldd	r24, Z+12	; 0x0c
     66a:	95 85       	ldd	r25, Z+13	; 0x0d
     66c:	c8 1b       	sub	r28, r24
     66e:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     670:	22 85       	ldd	r18, Z+10	; 0x0a
     672:	33 85       	ldd	r19, Z+11	; 0x0b
     674:	60 89       	ldd	r22, Z+16	; 0x10
     676:	71 89       	ldd	r23, Z+17	; 0x11
     678:	c9 01       	movw	r24, r18
     67a:	e5 d5       	rcall	.+3018   	; 0x1246 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     67c:	8e 01       	movw	r16, r28
     67e:	06 1b       	sub	r16, r22
     680:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     682:	62 89       	ldd	r22, Z+18	; 0x12
     684:	73 89       	ldd	r23, Z+19	; 0x13
     686:	c9 01       	movw	r24, r18
     688:	de d5       	rcall	.+3004   	; 0x1246 <__divmodhi4>
    top = base - run_1 - run_2;
     68a:	06 1b       	sub	r16, r22
     68c:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     68e:	c0 0f       	add	r28, r16
     690:	d1 1f       	adc	r29, r17
     692:	2c 9f       	mul	r18, r28
     694:	c0 01       	movw	r24, r0
     696:	2d 9f       	mul	r18, r29
     698:	90 0d       	add	r25, r0
     69a:	3c 9f       	mul	r19, r28
     69c:	90 0d       	add	r25, r0
     69e:	11 24       	eor	r1, r1
     6a0:	99 23       	and	r25, r25
     6a2:	0c f4       	brge	.+2      	; 0x6a6 <compute_area_of_trapezoid+0x4c>
     6a4:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     6a6:	95 95       	asr	r25
     6a8:	87 95       	ror	r24
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	08 95       	ret

000006b4 <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     6bc:	00 91 78 02 	lds	r16, 0x0278
     6c0:	10 91 79 02 	lds	r17, 0x0279
     6c4:	01 15       	cp	r16, r1
     6c6:	11 05       	cpc	r17, r1
     6c8:	b9 f0       	breq	.+46     	; 0x6f8 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     6ca:	f8 01       	movw	r30, r16
     6cc:	c4 85       	ldd	r28, Z+12	; 0x0c
     6ce:	d5 85       	ldd	r29, Z+13	; 0x0d
     6d0:	20 97       	sbiw	r28, 0x00	; 0
     6d2:	61 f0       	breq	.+24     	; 0x6ec <fuzzification+0x38>
            if (mf!=NULL) {
     6d4:	20 97       	sbiw	r28, 0x00	; 0
     6d6:	29 f0       	breq	.+10     	; 0x6e2 <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     6d8:	f8 01       	movw	r30, r16
     6da:	62 85       	ldd	r22, Z+10	; 0x0a
     6dc:	73 85       	ldd	r23, Z+11	; 0x0b
     6de:	ce 01       	movw	r24, r28
     6e0:	86 df       	rcall	.-244    	; 0x5ee <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     6e2:	0c 88       	ldd	r0, Y+20	; 0x14
     6e4:	dd 89       	ldd	r29, Y+21	; 0x15
     6e6:	c0 2d       	mov	r28, r0
     6e8:	20 97       	sbiw	r28, 0x00	; 0
     6ea:	a1 f7       	brne	.-24     	; 0x6d4 <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     6ec:	f8 01       	movw	r30, r16
     6ee:	06 85       	ldd	r16, Z+14	; 0x0e
     6f0:	17 85       	ldd	r17, Z+15	; 0x0f
     6f2:	01 15       	cp	r16, r1
     6f4:	11 05       	cpc	r17, r1
     6f6:	49 f7       	brne	.-46     	; 0x6ca <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     70a:	c0 91 7a 02 	lds	r28, 0x027A
     70e:	d0 91 7b 02 	lds	r29, 0x027B
     712:	20 97       	sbiw	r28, 0x00	; 0
     714:	b9 f1       	breq	.+110    	; 0x784 <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	11 e0       	ldi	r17, 0x01	; 1
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     71a:	e8 81       	ld	r30, Y
     71c:	f9 81       	ldd	r31, Y+1	; 0x01
     71e:	30 97       	sbiw	r30, 0x00	; 0
     720:	81 f0       	breq	.+32     	; 0x742 <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     722:	20 2f       	mov	r18, r16
     724:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     726:	a0 81       	ld	r26, Z
     728:	b1 81       	ldd	r27, Z+1	; 0x01
     72a:	8d 91       	ld	r24, X+
     72c:	9c 91       	ld	r25, X
     72e:	82 17       	cp	r24, r18
     730:	93 07       	cpc	r25, r19
     732:	0c f4       	brge	.+2      	; 0x736 <rule_evaluation+0x34>
     734:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     736:	02 80       	ldd	r0, Z+2	; 0x02
     738:	f3 81       	ldd	r31, Z+3	; 0x03
     73a:	e0 2d       	mov	r30, r0
     73c:	30 97       	sbiw	r30, 0x00	; 0
     73e:	99 f7       	brne	.-26     	; 0x726 <rule_evaluation+0x24>
     740:	02 c0       	rjmp	.+4      	; 0x746 <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     742:	20 2f       	mov	r18, r16
     744:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     746:	ea 81       	ldd	r30, Y+2	; 0x02
     748:	fb 81       	ldd	r31, Y+3	; 0x03
     74a:	30 97       	sbiw	r30, 0x00	; 0
     74c:	b1 f0       	breq	.+44     	; 0x77a <rule_evaluation+0x78>
     74e:	72 2f       	mov	r23, r18
     750:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     752:	a0 81       	ld	r26, Z
     754:	b1 81       	ldd	r27, Z+1	; 0x01
     756:	8d 91       	ld	r24, X+
     758:	9c 91       	ld	r25, X
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	57 2f       	mov	r21, r23
     75e:	46 2f       	mov	r20, r22
     760:	28 17       	cp	r18, r24
     762:	39 07       	cpc	r19, r25
     764:	14 f4       	brge	.+4      	; 0x76a <rule_evaluation+0x68>
     766:	58 2f       	mov	r21, r24
     768:	49 2f       	mov	r20, r25
     76a:	5c 93       	st	X, r21
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     770:	02 80       	ldd	r0, Z+2	; 0x02
     772:	f3 81       	ldd	r31, Z+3	; 0x03
     774:	e0 2d       	mov	r30, r0
     776:	30 97       	sbiw	r30, 0x00	; 0
     778:	61 f7       	brne	.-40     	; 0x752 <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     77a:	0c 80       	ldd	r0, Y+4	; 0x04
     77c:	dd 81       	ldd	r29, Y+5	; 0x05
     77e:	c0 2d       	mov	r28, r0
     780:	20 97       	sbiw	r28, 0x00	; 0
     782:	59 f6       	brne	.-106    	; 0x71a <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strength are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     78e:	2f 92       	push	r2
     790:	3f 92       	push	r3
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <defuzzification+0x26>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <defuzzification+0x28>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <defuzzification+0x2a>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     7bc:	80 91 76 02 	lds	r24, 0x0276
     7c0:	90 91 77 02 	lds	r25, 0x0277
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
     7c8:	89 2b       	or	r24, r25
     7ca:	09 f4       	brne	.+2      	; 0x7ce <defuzzification+0x40>
     7cc:	84 c0       	rjmp	.+264    	; 0x8d6 <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     7ce:	eb 81       	ldd	r30, Y+3	; 0x03
     7d0:	fc 81       	ldd	r31, Y+4	; 0x04
     7d2:	04 84       	ldd	r0, Z+12	; 0x0c
     7d4:	f5 85       	ldd	r31, Z+13	; 0x0d
     7d6:	e0 2d       	mov	r30, r0
     7d8:	fe 83       	std	Y+6, r31	; 0x06
     7da:	ed 83       	std	Y+5, r30	; 0x05
     7dc:	ef 2b       	or	r30, r31
     7de:	09 f4       	brne	.+2      	; 0x7e2 <defuzzification+0x54>
     7e0:	66 c0       	rjmp	.+204    	; 0x8ae <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     7e2:	51 2c       	mov	r5, r1
     7e4:	61 2c       	mov	r6, r1
     7e6:	71 2c       	mov	r7, r1
     7e8:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     7ea:	31 2c       	mov	r3, r1
     7ec:	21 2c       	mov	r2, r1
     7ee:	19 82       	std	Y+1, r1	; 0x01
     7f0:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	9e 81       	ldd	r25, Y+6	; 0x06
     7f6:	31 df       	rcall	.-414    	; 0x65a <compute_area_of_trapezoid>
     7f8:	bc 01       	movw	r22, r24
     7fa:	88 27       	eor	r24, r24
     7fc:	77 fd       	sbrc	r23, 7
     7fe:	80 95       	com	r24
     800:	98 2f       	mov	r25, r24
     802:	32 d4       	rcall	.+2148   	; 0x1068 <__floatsisf>
     804:	6b 01       	movw	r12, r22
     806:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     808:	ed 81       	ldd	r30, Y+5	; 0x05
     80a:	fe 81       	ldd	r31, Y+6	; 0x06
     80c:	04 85       	ldd	r16, Z+12	; 0x0c
     80e:	15 85       	ldd	r17, Z+13	; 0x0d
     810:	b8 01       	movw	r22, r16
     812:	88 27       	eor	r24, r24
     814:	77 fd       	sbrc	r23, 7
     816:	80 95       	com	r24
     818:	98 2f       	mov	r25, r24
     81a:	26 d4       	rcall	.+2124   	; 0x1068 <__floatsisf>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     820:	ed 81       	ldd	r30, Y+5	; 0x05
     822:	fe 81       	ldd	r31, Y+6	; 0x06
     824:	86 85       	ldd	r24, Z+14	; 0x0e
     826:	97 85       	ldd	r25, Z+15	; 0x0f
     828:	80 1b       	sub	r24, r16
     82a:	91 0b       	sbc	r25, r17
     82c:	bc 01       	movw	r22, r24
     82e:	12 f4       	brpl	.+4      	; 0x834 <defuzzification+0xa6>
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	75 95       	asr	r23
     836:	67 95       	ror	r22
            centroid = centroid + intermed;
     838:	88 27       	eor	r24, r24
     83a:	77 fd       	sbrc	r23, 7
     83c:	80 95       	com	r24
     83e:	98 2f       	mov	r25, r24
     840:	13 d4       	rcall	.+2086   	; 0x1068 <__floatsisf>
     842:	a5 01       	movw	r20, r10
     844:	94 01       	movw	r18, r8
     846:	11 d3       	rcall	.+1570   	; 0xe6a <__addsf3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     84c:	c7 01       	movw	r24, r14
     84e:	b6 01       	movw	r22, r12
     850:	97 d4       	rcall	.+2350   	; 0x1180 <__mulsf3>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	63 2d       	mov	r22, r3
     858:	72 2d       	mov	r23, r2
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	05 d3       	rcall	.+1546   	; 0xe6a <__addsf3>
     860:	36 2e       	mov	r3, r22
     862:	27 2e       	mov	r2, r23
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     868:	a7 01       	movw	r20, r14
     86a:	96 01       	movw	r18, r12
     86c:	65 2d       	mov	r22, r5
     86e:	76 2d       	mov	r23, r6
     870:	87 2d       	mov	r24, r7
     872:	94 2d       	mov	r25, r4
     874:	fa d2       	rcall	.+1524   	; 0xe6a <__addsf3>
     876:	56 2e       	mov	r5, r22
     878:	67 2e       	mov	r6, r23
     87a:	78 2e       	mov	r7, r24
     87c:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     87e:	ed 81       	ldd	r30, Y+5	; 0x05
     880:	fe 81       	ldd	r31, Y+6	; 0x06
     882:	04 88       	ldd	r0, Z+20	; 0x14
     884:	f5 89       	ldd	r31, Z+21	; 0x15
     886:	e0 2d       	mov	r30, r0
     888:	fe 83       	std	Y+6, r31	; 0x06
     88a:	ed 83       	std	Y+5, r30	; 0x05
     88c:	ef 2b       	or	r30, r31
     88e:	09 f0       	breq	.+2      	; 0x892 <defuzzification+0x104>
     890:	b0 cf       	rjmp	.-160    	; 0x7f2 <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     892:	26 2f       	mov	r18, r22
     894:	37 2f       	mov	r19, r23
     896:	48 2f       	mov	r20, r24
     898:	59 2f       	mov	r21, r25
     89a:	63 2d       	mov	r22, r3
     89c:	72 2d       	mov	r23, r2
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	47 d3       	rcall	.+1678   	; 0xf32 <__divsf3>
     8a4:	26 2f       	mov	r18, r22
     8a6:	37 2f       	mov	r19, r23
     8a8:	48 2f       	mov	r20, r24
     8aa:	59 2f       	mov	r21, r25
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     8b6:	62 2f       	mov	r22, r18
     8b8:	73 2f       	mov	r23, r19
     8ba:	84 2f       	mov	r24, r20
     8bc:	95 2f       	mov	r25, r21
     8be:	a1 d3       	rcall	.+1858   	; 0x1002 <__fixsfsi>
     8c0:	eb 81       	ldd	r30, Y+3	; 0x03
     8c2:	fc 81       	ldd	r31, Y+4	; 0x04
     8c4:	73 87       	std	Z+11, r23	; 0x0b
     8c6:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     8c8:	86 85       	ldd	r24, Z+14	; 0x0e
     8ca:	97 85       	ldd	r25, Z+15	; 0x0f
     8cc:	9c 83       	std	Y+4, r25	; 0x04
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	89 2b       	or	r24, r25
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <defuzzification+0x148>
     8d4:	7c cf       	rjmp	.-264    	; 0x7ce <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     8d6:	26 96       	adiw	r28, 0x06	; 6
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	7f 90       	pop	r7
     8fc:	6f 90       	pop	r6
     8fe:	5f 90       	pop	r5
     900:	4f 90       	pop	r4
     902:	3f 90       	pop	r3
     904:	2f 90       	pop	r2
     906:	08 95       	ret

00000908 <MATLAB_MF>:
 * MATLAB_MF takes four parameters defining a trapezoid or triangular mf
 * function in MATLAB's tool for fuzzy logic design and returns a MF according
 * to the format of general_FIS.c with two end points and two slopes
 */
void MATLAB_MF(struct mf_type *newMf, char newname[MAXNAME], int p1, int p2, int p3, int p4)
{
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	6a 01       	movw	r12, r20
     920:	59 01       	movw	r10, r18
    strcpy(newMf->name, newname);
     922:	b8 d4       	rcall	.+2416   	; 0x1294 <strcpy>
    newMf->value = 0;
     924:	1b 86       	std	Y+11, r1	; 0x0b
     926:	1a 86       	std	Y+10, r1	; 0x0a
    newMf->point1 = p1;
     928:	dd 86       	std	Y+13, r13	; 0x0d
     92a:	cc 86       	std	Y+12, r12	; 0x0c
    newMf->point2 = p4;
     92c:	ff 86       	std	Y+15, r15	; 0x0f
     92e:	ee 86       	std	Y+14, r14	; 0x0e
    newMf->slope1 = (int)UPPER_LIMIT/(p2-p1);
     930:	b5 01       	movw	r22, r10
     932:	6c 19       	sub	r22, r12
     934:	7d 09       	sbc	r23, r13
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	31 e0       	ldi	r19, 0x01	; 1
     93a:	c9 01       	movw	r24, r18
     93c:	84 d4       	rcall	.+2312   	; 0x1246 <__divmodhi4>
     93e:	79 8b       	std	Y+17, r23	; 0x11
     940:	68 8b       	std	Y+16, r22	; 0x10
    newMf->slope2 = (int)UPPER_LIMIT/(p4-p3);
     942:	b7 01       	movw	r22, r14
     944:	60 1b       	sub	r22, r16
     946:	71 0b       	sbc	r23, r17
     948:	c9 01       	movw	r24, r18
     94a:	7d d4       	rcall	.+2298   	; 0x1246 <__divmodhi4>
     94c:	7b 8b       	std	Y+19, r23	; 0x13
     94e:	6a 8b       	std	Y+18, r22	; 0x12
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	08 95       	ret

00000966 <__vector_28>:
volatile unsigned char UART1_reciever_buffer[32];
volatile int counter_UART1_reciever;
//----------Ending of UART Variables (temp)-----------


ISR(USART1_RX_vect){
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	0b b6       	in	r0, 0x3b	; 59
     972:	0f 92       	push	r0
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	
	//Disabling interrupts
	//cli();

	
	in_value = UDR1;
     97c:	80 91 ce 00 	lds	r24, 0x00CE
	
	//checking if header (0xFF)
	if (in_value ==  0xFF){ // to check if in_value==0xFF
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	29 f4       	brne	.+10     	; 0x98e <__vector_28+0x28>
		counter_UART1_reciever = 0;
     984:	10 92 9d 02 	sts	0x029D, r1
     988:	10 92 9c 02 	sts	0x029C, r1
     98c:	10 c0       	rjmp	.+32     	; 0x9ae <__vector_28+0x48>
	}
	else{
		//Write value to buffer
		UART1_reciever_buffer[counter_UART1_reciever] = in_value;
     98e:	e0 91 9c 02 	lds	r30, 0x029C
     992:	f0 91 9d 02 	lds	r31, 0x029D
     996:	e4 58       	subi	r30, 0x84	; 132
     998:	fd 4f       	sbci	r31, 0xFD	; 253
     99a:	80 83       	st	Z, r24
		counter_UART1_reciever++;
     99c:	80 91 9c 02 	lds	r24, 0x029C
     9a0:	90 91 9d 02 	lds	r25, 0x029D
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	90 93 9d 02 	sts	0x029D, r25
     9aa:	80 93 9c 02 	sts	0x029C, r24
	
	//Enabling interrupts
	//sei();

	
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	0b be       	out	0x3b, r0	; 59
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <carInit>:
* to allow the operator to turn on the ESC manually
* and set the neutral
*/
void carInit(void)
{
	pwmInit();
     9c4:	83 d0       	rcall	.+262    	; 0xacc <pwmInit>
	spi_slave_init();
     9c6:	33 d1       	rcall	.+614    	; 0xc2e <spi_slave_init>
	setESC(NEUTRAL);
     9c8:	8d ec       	ldi	r24, 0xCD	; 205
     9ca:	9a e0       	ldi	r25, 0x0A	; 10
     9cc:	8e d0       	rcall	.+284    	; 0xaea <setESC>
	setServo(STRAIGHT);
     9ce:	84 e6       	ldi	r24, 0x64	; 100
     9d0:	9a e0       	ldi	r25, 0x0A	; 10
     9d2:	a6 c0       	rjmp	.+332    	; 0xb20 <setServo>
     9d4:	08 95       	ret

000009d6 <USART1_init>:


void USART1_init(unsigned int baud_setting)
{
	//UART enabling:
	UBRR1 = 0;
     9d6:	ec ec       	ldi	r30, 0xCC	; 204
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	11 82       	std	Z+1, r1	; 0x01
     9dc:	10 82       	st	Z, r1
	//Enabling reciever and disabling transmitter interrupts
	UCSR1B = (1<<RXEN1) | (0<<TXEN1) | (1<<RXCIE1) | (0<<TXCIE1)| (0<<UDRIE1);
     9de:	20 e9       	ldi	r18, 0x90	; 144
     9e0:	20 93 c9 00 	sts	0x00C9, r18
	//Set frame format: 8data, 2 stop bit
	UCSR1C = (1<<USBS1) | (3<<UCSZ10);
     9e4:	2e e0       	ldi	r18, 0x0E	; 14
     9e6:	20 93 ca 00 	sts	0x00CA, r18
	//Setting baud rateS
	UBRR1 = baud_setting;
     9ea:	91 83       	std	Z+1, r25	; 0x01
     9ec:	80 83       	st	Z, r24
     9ee:	08 95       	ret

000009f0 <Sens_info_read>:
}


void Sens_info_read(struct Sensor_information* sens_info_ptr) //There is no check if the buffer is empty or not
{
     9f0:	fc 01       	movw	r30, r24
	
	//Disable UART1 interrupts to prevent values from changing while reading
	UCSR1B &= ~(1<<RXCIE1);
     9f2:	a9 ec       	ldi	r26, 0xC9	; 201
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	8c 91       	ld	r24, X
     9f8:	8f 77       	andi	r24, 0x7F	; 127
     9fa:	8c 93       	st	X, r24
	
	//Assigning values from buffer to sens_info
	sens_info_ptr->dist_right_line = (unsigned) (char) UART1_reciever_buffer[4];
     9fc:	80 91 80 02 	lds	r24, 0x0280
     a00:	80 83       	st	Z, r24
	sens_info_ptr->angular_diff = (unsigned) (char) UART1_reciever_buffer[5];
     a02:	80 91 81 02 	lds	r24, 0x0281
     a06:	81 83       	std	Z+1, r24	; 0x01
	sens_info_ptr->dist_sonic_right = (unsigned) (char) UART1_reciever_buffer[2];
     a08:	80 91 7e 02 	lds	r24, 0x027E
     a0c:	84 83       	std	Z+4, r24	; 0x04
	sens_info_ptr->dist_sonic_middle = (unsigned) (char) UART1_reciever_buffer[0];
     a0e:	80 91 7c 02 	lds	r24, 0x027C
     a12:	82 83       	std	Z+2, r24	; 0x02
	sens_info_ptr->dist_sonic_left = (unsigned) (char) UART1_reciever_buffer[1];
     a14:	80 91 7d 02 	lds	r24, 0x027D
     a18:	83 83       	std	Z+3, r24	; 0x03
	sens_info_ptr->dist_sonic_back = (unsigned) (char) UART1_reciever_buffer[3];
     a1a:	80 91 7f 02 	lds	r24, 0x027F
     a1e:	85 83       	std	Z+5, r24	; 0x05
	//sens_info_ptr->ang_acc = ((unsigned) (short) UART1_reciever_buffer[11] << 8) | (unsigned) (short) UART1_reciever_buffer[10];
	//sens_info_ptr->car_speed = ((unsigned) (short) UART1_reciever_buffer[13] << 8) | (unsigned) (short) UART1_reciever_buffer[12];
	//sens_info_ptr->dist_to_stop_line = ((unsigned) (short) UART1_reciever_buffer[15] << 8) | (unsigned) (short) UART1_reciever_buffer[14];
	//sens_info_ptr->sign_type = UART1_reciever_buffer[16];
	
	counter_UART1_reciever = 0; //To be able to use counter as if-thing for reading
     a20:	10 92 9d 02 	sts	0x029D, r1
     a24:	10 92 9c 02 	sts	0x029C, r1
	//Enable UART1 interrupts
	UCSR1B |= (1<<RXCIE1);
     a28:	8c 91       	ld	r24, X
     a2a:	80 68       	ori	r24, 0x80	; 128
     a2c:	8c 93       	st	X, r24
     a2e:	08 95       	ret

00000a30 <main>:




int main (void)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	2b 97       	sbiw	r28, 0x0b	; 11
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	//	FLC_obstacle(2800, 150);
	
	

	
	carInit();
     a44:	bf df       	rcall	.-130    	; 0x9c4 <carInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	90 ee       	ldi	r25, 0xE0	; 224
     a4c:	21 50       	subi	r18, 0x01	; 1
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <main+0x1c>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <main+0x26>
     a56:	00 00       	nop
	_delay_ms(5000);
	setServo(MAXLEFT);
     a58:	8f e3       	ldi	r24, 0x3F	; 63
     a5a:	9c e0       	ldi	r25, 0x0C	; 12
     a5c:	61 d0       	rcall	.+194    	; 0xb20 <setServo>
     a5e:	ef ef       	ldi	r30, 0xFF	; 255
     a60:	ff ef       	ldi	r31, 0xFF	; 255
     a62:	20 ee       	ldi	r18, 0xE0	; 224
     a64:	e1 50       	subi	r30, 0x01	; 1
     a66:	f0 40       	sbci	r31, 0x00	; 0
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x34>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <main+0x3e>
     a6e:	00 00       	nop
	
	_delay_ms(5000);
	setServo(MAXRIGHT);
     a70:	86 ee       	ldi	r24, 0xE6	; 230
     a72:	97 e0       	ldi	r25, 0x07	; 7
     a74:	55 d0       	rcall	.+170    	; 0xb20 <setServo>

	
	sei();
     a76:	78 94       	sei
	unsigned char control_mode;
	//--end of sensor information
	
	//Init for UART
	unsigned int baud_setting = 7;
	USART1_init(baud_setting);
     a78:	87 e0       	ldi	r24, 0x07	; 7
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	ac df       	rcall	.-168    	; 0x9d6 <USART1_init>
			
			cli();
			
			//FLC_obstacle(OCR1A, sF, v);
			//FLC_steering(c, v);
			fuzzyParking(sL,sF, OCR1A);
     a7e:	08 e8       	ldi	r16, 0x88	; 136
     a80:	10 e0       	ldi	r17, 0x00	; 0
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     a82:	0f 2e       	mov	r0, r31
     a84:	fa e8       	ldi	r31, 0x8A	; 138
     a86:	ef 2e       	mov	r14, r31
     a88:	f1 2c       	mov	r15, r1
     a8a:	f0 2d       	mov	r31, r0
	//DDRA = 0xFF;
	//End of test setting
	
	while (1) {
		
		if (counter_UART1_reciever > 5) {
     a8c:	80 91 9c 02 	lds	r24, 0x029C
     a90:	90 91 9d 02 	lds	r25, 0x029D
     a94:	06 97       	sbiw	r24, 0x06	; 6
     a96:	d4 f3       	brlt	.-12     	; 0xa8c <main+0x5c>
			
			//Reading Information
			read_sensor_info(&control_mode, sens_info_ptr);
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	ce 01       	movw	r24, r28
     aa0:	0b 96       	adiw	r24, 0x0b	; 11
     aa2:	05 d1       	rcall	.+522    	; 0xcae <read_sensor_info>
			Sens_info_read(sens_info_ptr);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	a3 df       	rcall	.-186    	; 0x9f0 <Sens_info_read>
			
			int sR = (int) sensor_info.dist_sonic_right;
			int sF = (int) sensor_info.dist_sonic_middle;
     aaa:	6b 81       	ldd	r22, Y+3	; 0x03
     aac:	70 e0       	ldi	r23, 0x00	; 0
			int sL = (int) sensor_info.dist_sonic_left;
     aae:	8c 81       	ldd	r24, Y+4	; 0x04
     ab0:	90 e0       	ldi	r25, 0x00	; 0
			int sB = (int) sensor_info.dist_sonic_back;
			
			int c = (int) sensor_info.dist_right_line;
			int v = (int) sensor_info.angular_diff;
			
			cli();
     ab2:	f8 94       	cli
			
			//FLC_obstacle(OCR1A, sF, v);
			//FLC_steering(c, v);
			fuzzyParking(sL,sF, OCR1A);
     ab4:	f8 01       	movw	r30, r16
     ab6:	40 81       	ld	r20, Z
     ab8:	51 81       	ldd	r21, Z+1	; 0x01
     aba:	7f dd       	rcall	.-1282   	; 0x5ba <fuzzyParking>
			sei();
     abc:	78 94       	sei
			
			//Sending back information
			unsigned int esc_value_to_send;
			esc_value_to_send = (unsigned) (short) OCR1A;
     abe:	f8 01       	movw	r30, r16
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
			unsigned int steering_value_to_send;
			steering_value_to_send = (unsigned) (short) OCR1B;
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	e0 cf       	rjmp	.-64     	; 0xa8c <main+0x5c>

00000acc <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     acc:	80 e3       	ldi	r24, 0x30	; 48
     ace:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     ad0:	82 ea       	ldi	r24, 0xA2	; 162
     ad2:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f e8       	ldi	r25, 0x8F	; 143
     ada:	90 93 87 00 	sts	0x0087, r25
     ade:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     ae2:	8a e1       	ldi	r24, 0x1A	; 26
     ae4:	80 93 81 00 	sts	0x0081, r24
     ae8:	08 95       	ret

00000aea <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     aea:	80 36       	cpi	r24, 0x60	; 96
     aec:	2a e0       	ldi	r18, 0x0A	; 10
     aee:	92 07       	cpc	r25, r18
     af0:	3c f4       	brge	.+14     	; 0xb00 <setESC+0x16>
	{
		OCR1A = MINESC;
     af2:	8f e5       	ldi	r24, 0x5F	; 95
     af4:	9a e0       	ldi	r25, 0x0A	; 10
     af6:	90 93 89 00 	sts	0x0089, r25
     afa:	80 93 88 00 	sts	0x0088, r24
     afe:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     b00:	8b 33       	cpi	r24, 0x3B	; 59
     b02:	2b e0       	ldi	r18, 0x0B	; 11
     b04:	92 07       	cpc	r25, r18
     b06:	3c f0       	brlt	.+14     	; 0xb16 <setESC+0x2c>
	{
		OCR1A = MAXESC;
     b08:	8b e3       	ldi	r24, 0x3B	; 59
     b0a:	9b e0       	ldi	r25, 0x0B	; 11
     b0c:	90 93 89 00 	sts	0x0089, r25
     b10:	80 93 88 00 	sts	0x0088, r24
     b14:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     b16:	90 93 89 00 	sts	0x0089, r25
     b1a:	80 93 88 00 	sts	0x0088, r24
     b1e:	08 95       	ret

00000b20 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     b20:	87 3e       	cpi	r24, 0xE7	; 231
     b22:	27 e0       	ldi	r18, 0x07	; 7
     b24:	92 07       	cpc	r25, r18
     b26:	3c f4       	brge	.+14     	; 0xb36 <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     b28:	86 ee       	ldi	r24, 0xE6	; 230
     b2a:	97 e0       	ldi	r25, 0x07	; 7
     b2c:	90 93 8b 00 	sts	0x008B, r25
     b30:	80 93 8a 00 	sts	0x008A, r24
     b34:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     b36:	8f 33       	cpi	r24, 0x3F	; 63
     b38:	2c e0       	ldi	r18, 0x0C	; 12
     b3a:	92 07       	cpc	r25, r18
     b3c:	3c f0       	brlt	.+14     	; 0xb4c <setServo+0x2c>

		OCR1B = MAXLEFT;
     b3e:	8f e3       	ldi	r24, 0x3F	; 63
     b40:	9c e0       	ldi	r25, 0x0C	; 12
     b42:	90 93 8b 00 	sts	0x008B, r25
     b46:	80 93 8a 00 	sts	0x008A, r24
     b4a:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     b4c:	90 93 8b 00 	sts	0x008B, r25
     b50:	80 93 8a 00 	sts	0x008A, r24
     b54:	08 95       	ret

00000b56 <__vector_19>:
		tx_spi.i_first = 0;
	}
			
			

	sei();
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	0b b6       	in	r0, 0x3b	; 59
     b62:	0f 92       	push	r0
     b64:	2f 93       	push	r18
     b66:	3f 93       	push	r19
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
     b74:	10 98       	cbi	0x02, 0	; 2
     b76:	2e b5       	in	r18, 0x2e	; 46
     b78:	2d 3f       	cpi	r18, 0xFD	; 253
     b7a:	a9 f0       	breq	.+42     	; 0xba6 <__vector_19+0x50>
     b7c:	e6 ee       	ldi	r30, 0xE6	; 230
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	dc 01       	movw	r26, r24
     b86:	ac 55       	subi	r26, 0x5C	; 92
     b88:	be 4f       	sbci	r27, 0xFE	; 254
     b8a:	2c 93       	st	X, r18
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
     b92:	e8 ee       	ldi	r30, 0xE8	; 232
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 5c 01 	sts	0x015C, r24
     ba6:	80 91 e6 01 	lds	r24, 0x01E6
     baa:	90 91 e7 01 	lds	r25, 0x01E7
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	21 f4       	brne	.+8      	; 0xbbc <__vector_19+0x66>
     bb4:	10 92 e7 01 	sts	0x01E7, r1
     bb8:	10 92 e6 01 	sts	0x01E6, r1
     bbc:	80 91 a2 01 	lds	r24, 0x01A2
     bc0:	90 91 a3 01 	lds	r25, 0x01A3
     bc4:	89 2b       	or	r24, r25
     bc6:	01 f1       	breq	.+64     	; 0xc08 <__vector_19+0xb2>
     bc8:	e0 91 9e 01 	lds	r30, 0x019E
     bcc:	f0 91 9f 01 	lds	r31, 0x019F
     bd0:	e2 5a       	subi	r30, 0xA2	; 162
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	8e bd       	out	0x2e, r24	; 46
     bd8:	ee e9       	ldi	r30, 0x9E	; 158
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	e2 ea       	ldi	r30, 0xA2	; 162
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	20 81       	ld	r18, Z
     bec:	31 81       	ldd	r19, Z+1	; 0x01
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	31 09       	sbc	r19, r1
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
     bf6:	10 9a       	sbi	0x02, 0	; 2
     bf8:	80 34       	cpi	r24, 0x40	; 64
     bfa:	91 05       	cpc	r25, r1
     bfc:	49 f4       	brne	.+18     	; 0xc10 <__vector_19+0xba>
     bfe:	10 92 9f 01 	sts	0x019F, r1
     c02:	10 92 9e 01 	sts	0x019E, r1
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <__vector_19+0xba>
     c08:	8d ef       	ldi	r24, 0xFD	; 253
     c0a:	8e bd       	out	0x2e, r24	; 46
     c0c:	10 92 5d 01 	sts	0x015D, r1
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0b be       	out	0x3b, r0	; 59
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <spi_slave_init>:
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	84 b9       	out	0x04, r24	; 4
     c32:	80 ec       	ldi	r24, 0xC0	; 192
     c34:	8c bd       	out	0x2c, r24	; 44
     c36:	08 9a       	sbi	0x01, 0	; 1
     c38:	10 98       	cbi	0x02, 0	; 2
     c3a:	8d ef       	ldi	r24, 0xFD	; 253
     c3c:	8e bd       	out	0x2e, r24	; 46
     c3e:	08 95       	ret

00000c40 <spi_get_byte>:
     c40:	f8 94       	cli
     c42:	20 91 e8 01 	lds	r18, 0x01E8
     c46:	30 91 e9 01 	lds	r19, 0x01E9
     c4a:	21 15       	cp	r18, r1
     c4c:	31 05       	cpc	r19, r1
     c4e:	a9 f0       	breq	.+42     	; 0xc7a <spi_get_byte+0x3a>
     c50:	e4 ee       	ldi	r30, 0xE4	; 228
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	da 01       	movw	r26, r20
     c5a:	ac 55       	subi	r26, 0x5C	; 92
     c5c:	be 4f       	sbci	r27, 0xFE	; 254
     c5e:	8c 91       	ld	r24, X
     c60:	4f 5f       	subi	r20, 0xFF	; 255
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	51 83       	std	Z+1, r21	; 0x01
     c66:	40 83       	st	Z, r20
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	31 09       	sbc	r19, r1
     c6c:	30 93 e9 01 	sts	0x01E9, r19
     c70:	20 93 e8 01 	sts	0x01E8, r18
     c74:	23 2b       	or	r18, r19
     c76:	21 f4       	brne	.+8      	; 0xc80 <spi_get_byte+0x40>
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <spi_get_byte+0x3c>
     c7a:	8e ef       	ldi	r24, 0xFE	; 254
     c7c:	10 92 5c 01 	sts	0x015C, r1
     c80:	20 91 e4 01 	lds	r18, 0x01E4
     c84:	30 91 e5 01 	lds	r19, 0x01E5
     c88:	20 34       	cpi	r18, 0x40	; 64
     c8a:	31 05       	cpc	r19, r1
     c8c:	21 f4       	brne	.+8      	; 0xc96 <spi_get_byte+0x56>
     c8e:	10 92 e5 01 	sts	0x01E5, r1
     c92:	10 92 e4 01 	sts	0x01E4, r1
     c96:	78 94       	sei
     c98:	08 95       	ret

00000c9a <is_package_recieved>:
}


unsigned char is_package_recieved(void){
	
	if (rx_spi.num_bytes < (RECEIVED_PACKAGE_SIZE)){
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	20 91 e8 01 	lds	r18, 0x01E8
     ca0:	30 91 e9 01 	lds	r19, 0x01E9
     ca4:	25 30       	cpi	r18, 0x05	; 5
     ca6:	31 05       	cpc	r19, r1
     ca8:	08 f4       	brcc	.+2      	; 0xcac <is_package_recieved+0x12>
     caa:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	
	return 1;
}
     cac:	08 95       	ret

00000cae <read_sensor_info>:


//returns true (i.e. >0) if succesfull, false (==0) else
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	8c 01       	movw	r16, r24
     cb8:	eb 01       	movw	r28, r22
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
     cba:	20 91 e8 01 	lds	r18, 0x01E8
     cbe:	30 91 e9 01 	lds	r19, 0x01E9
     cc2:	23 2b       	or	r18, r19
     cc4:	f9 f0       	breq	.+62     	; 0xd04 <read_sensor_info+0x56>
		return 0;
	}
	
	//First check if header-byte first in buffer and if enough bytes for a package to be recieved
	if( (rx_spi.buffer[rx_spi.i_first] == 0xFF) && (is_package_recieved())){
     cc6:	e0 91 e4 01 	lds	r30, 0x01E4
     cca:	f0 91 e5 01 	lds	r31, 0x01E5
     cce:	ec 55       	subi	r30, 0x5C	; 92
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 3f       	cpi	r24, 0xFF	; 255
     cd6:	71 f4       	brne	.+28     	; 0xcf4 <read_sensor_info+0x46>
     cd8:	e0 df       	rcall	.-64     	; 0xc9a <is_package_recieved>
     cda:	88 23       	and	r24, r24
     cdc:	a1 f0       	breq	.+40     	; 0xd06 <read_sensor_info+0x58>
		
		//dont use header byte
		unsigned char temp_for_header;
		temp_for_header = spi_get_byte();
     cde:	b0 df       	rcall	.-160    	; 0xc40 <spi_get_byte>
		//Read all info and write it to sensor struct

		//*control_mode_ptr = spi_get_byte();
		//sens_info_ptr->dist_right_line = spi_get_byte();
		//sens_info_ptr->angular_diff = spi_get_byte();
		sens_info_ptr->dist_sonic_middle = spi_get_byte();
     ce0:	af df       	rcall	.-162    	; 0xc40 <spi_get_byte>
     ce2:	8a 83       	std	Y+2, r24	; 0x02
		sens_info_ptr->dist_sonic_left = spi_get_byte();
     ce4:	ad df       	rcall	.-166    	; 0xc40 <spi_get_byte>
     ce6:	8b 83       	std	Y+3, r24	; 0x03
		sens_info_ptr->dist_sonic_right = spi_get_byte();
     ce8:	ab df       	rcall	.-170    	; 0xc40 <spi_get_byte>
     cea:	8c 83       	std	Y+4, r24	; 0x04
		sens_info_ptr->dist_sonic_back = spi_get_byte();
     cec:	a9 df       	rcall	.-174    	; 0xc40 <spi_get_byte>
     cee:	8d 83       	std	Y+5, r24	; 0x05
		//sens_info_ptr->car_speed = spi_get_byte();
		//sens_info_ptr->dist_to_stop_line = spi_get_byte();
		//sens_info_ptr->sign_type = spi_get_byte();
		
		
		return 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <read_sensor_info+0x58>
	} else if (is_package_recieved()){
     cf4:	d2 df       	rcall	.-92     	; 0xc9a <is_package_recieved>
     cf6:	88 23       	and	r24, r24
     cf8:	31 f0       	breq	.+12     	; 0xd06 <read_sensor_info+0x58>
		
		//if there are bytes before header byte, throw them away. Then go into read_sensor_info again to check wheter there
		//is something to read or not. The return value is evaluated by the last read_sensor_info.
		unsigned char temp_scrap;
		temp_scrap = spi_get_byte();
     cfa:	a2 df       	rcall	.-188    	; 0xc40 <spi_get_byte>
		return read_sensor_info(control_mode_ptr, sens_info_ptr);
     cfc:	be 01       	movw	r22, r28
     cfe:	c8 01       	movw	r24, r16
     d00:	d6 df       	rcall	.-84     	; 0xcae <read_sensor_info>
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <read_sensor_info+0x58>
//Also deletes all bytes before header byte, in order to reach header byte. Therefore, it is important to only call this function when is_package_recieved() is true.
unsigned char read_sensor_info(unsigned char* control_mode_ptr, struct Sensor_information* sens_info_ptr){
	
	//If no bytes to get, return "failure"
	if(!(rx_spi.num_bytes)){
		return 0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//if reaches this point, there are is a header byte but not enough of bytes to read
	return 0;
	
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	0b b6       	in	r0, 0x3b	; 59
     d1c:	0f 92       	push	r0
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     d30:	80 91 74 02 	lds	r24, 0x0274
     d34:	90 91 75 02 	lds	r25, 0x0275
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	91 05       	cpc	r25, r1
     d3c:	31 f4       	brne	.+12     	; 0xd4a <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 a2 02 	sts	0x02A2, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     d44:	80 91 c6 00 	lds	r24, 0x00C6
     d48:	16 c0       	rjmp	.+44     	; 0xd76 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     d4a:	80 34       	cpi	r24, 0x40	; 64
     d4c:	91 05       	cpc	r25, r1
     d4e:	e8 f4       	brcc	.+58     	; 0xd8a <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     d50:	e2 e7       	ldi	r30, 0x72	; 114
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	20 81       	ld	r18, Z
     d56:	31 81       	ldd	r19, Z+1	; 0x01
     d58:	40 91 c6 00 	lds	r20, 0x00C6
     d5c:	d9 01       	movw	r26, r18
     d5e:	a0 5d       	subi	r26, 0xD0	; 208
     d60:	bd 4f       	sbci	r27, 0xFD	; 253
     d62:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	31 83       	std	Z+1, r19	; 0x01
     d6a:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 75 02 	sts	0x0275, r25
     d72:	80 93 74 02 	sts	0x0274, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
     d76:	80 91 74 02 	lds	r24, 0x0274
     d7a:	90 91 75 02 	lds	r25, 0x0275
     d7e:	80 34       	cpi	r24, 0x40	; 64
     d80:	91 05       	cpc	r25, r1
     d82:	19 f4       	brne	.+6      	; 0xd8a <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 a0 02 	sts	0x02A0, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
     d8a:	80 91 72 02 	lds	r24, 0x0272
     d8e:	90 91 73 02 	lds	r25, 0x0273
     d92:	80 34       	cpi	r24, 0x40	; 64
     d94:	91 05       	cpc	r25, r1
     d96:	21 f4       	brne	.+8      	; 0xda0 <__vector_20+0x90>
		rx_uart0.i_last = 0;
     d98:	10 92 73 02 	sts	0x0273, r1
     d9c:	10 92 72 02 	sts	0x0272, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 9f 02 	sts	0x029F, r24
}
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_22>:




ISR(USART0_TX_vect)
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	0b b6       	in	r0, 0x3b	; 59
     dd2:	0f 92       	push	r0
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
     ddc:	80 91 2e 02 	lds	r24, 0x022E
     de0:	90 91 2f 02 	lds	r25, 0x022F
     de4:	80 34       	cpi	r24, 0x40	; 64
     de6:	91 05       	cpc	r25, r1
     de8:	19 f4       	brne	.+6      	; 0xdf0 <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
     dea:	10 92 9e 02 	sts	0x029E, r1
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
     df0:	89 2b       	or	r24, r25
     df2:	b9 f0       	breq	.+46     	; 0xe22 <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
     df4:	e0 91 2a 02 	lds	r30, 0x022A
     df8:	f0 91 2b 02 	lds	r31, 0x022B
     dfc:	e6 51       	subi	r30, 0x16	; 22
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	80 81       	ld	r24, Z
     e02:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
     e06:	ea e2       	ldi	r30, 0x2A	; 42
     e08:	f2 e0       	ldi	r31, 0x02	; 2
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
     e14:	ee e2       	ldi	r30, 0x2E	; 46
     e16:	f2 e0       	ldi	r31, 0x02	; 2
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
     e22:	80 91 2a 02 	lds	r24, 0x022A
     e26:	90 91 2b 02 	lds	r25, 0x022B
     e2a:	80 34       	cpi	r24, 0x40	; 64
     e2c:	91 05       	cpc	r25, r1
     e2e:	21 f4       	brne	.+8      	; 0xe38 <__vector_22+0x72>
		tx_uart0.i_first = 0;
     e30:	10 92 2b 02 	sts	0x022B, r1
     e34:	10 92 2a 02 	sts	0x022A, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
     e38:	80 91 2e 02 	lds	r24, 0x022E
     e3c:	90 91 2f 02 	lds	r25, 0x022F
     e40:	89 2b       	or	r24, r25
     e42:	39 f4       	brne	.+14     	; 0xe52 <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
     e44:	10 92 a1 02 	sts	0x02A1, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
     e48:	e1 ec       	ldi	r30, 0xC1	; 193
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	0f 90       	pop	r0
     e5c:	0b be       	out	0x3b, r0	; 59
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__subsf3>:
     e68:	50 58       	subi	r21, 0x80	; 128

00000e6a <__addsf3>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	aa 27       	eor	r26, r26
     e6e:	0e d0       	rcall	.+28     	; 0xe8c <__addsf3x>
     e70:	4d c1       	rjmp	.+666    	; 0x110c <__fp_round>
     e72:	3e d1       	rcall	.+636    	; 0x10f0 <__fp_pscA>
     e74:	30 f0       	brcs	.+12     	; 0xe82 <__addsf3+0x18>
     e76:	43 d1       	rcall	.+646    	; 0x10fe <__fp_pscB>
     e78:	20 f0       	brcs	.+8      	; 0xe82 <__addsf3+0x18>
     e7a:	31 f4       	brne	.+12     	; 0xe88 <__addsf3+0x1e>
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__addsf3+0x1a>
     e80:	1e f4       	brtc	.+6      	; 0xe88 <__addsf3+0x1e>
     e82:	33 c1       	rjmp	.+614    	; 0x10ea <__fp_nan>
     e84:	0e f4       	brtc	.+2      	; 0xe88 <__addsf3+0x1e>
     e86:	e0 95       	com	r30
     e88:	e7 fb       	bst	r30, 7
     e8a:	29 c1       	rjmp	.+594    	; 0x10de <__fp_inf>

00000e8c <__addsf3x>:
     e8c:	e9 2f       	mov	r30, r25
     e8e:	4f d1       	rcall	.+670    	; 0x112e <__fp_split3>
     e90:	80 f3       	brcs	.-32     	; 0xe72 <__addsf3+0x8>
     e92:	ba 17       	cp	r27, r26
     e94:	62 07       	cpc	r22, r18
     e96:	73 07       	cpc	r23, r19
     e98:	84 07       	cpc	r24, r20
     e9a:	95 07       	cpc	r25, r21
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <__addsf3x+0x18>
     e9e:	71 f4       	brne	.+28     	; 0xebc <__addsf3x+0x30>
     ea0:	9e f5       	brtc	.+102    	; 0xf08 <__addsf3x+0x7c>
     ea2:	67 c1       	rjmp	.+718    	; 0x1172 <__fp_zero>
     ea4:	0e f4       	brtc	.+2      	; 0xea8 <__addsf3x+0x1c>
     ea6:	e0 95       	com	r30
     ea8:	0b 2e       	mov	r0, r27
     eaa:	ba 2f       	mov	r27, r26
     eac:	a0 2d       	mov	r26, r0
     eae:	0b 01       	movw	r0, r22
     eb0:	b9 01       	movw	r22, r18
     eb2:	90 01       	movw	r18, r0
     eb4:	0c 01       	movw	r0, r24
     eb6:	ca 01       	movw	r24, r20
     eb8:	a0 01       	movw	r20, r0
     eba:	11 24       	eor	r1, r1
     ebc:	ff 27       	eor	r31, r31
     ebe:	59 1b       	sub	r21, r25
     ec0:	99 f0       	breq	.+38     	; 0xee8 <__addsf3x+0x5c>
     ec2:	59 3f       	cpi	r21, 0xF9	; 249
     ec4:	50 f4       	brcc	.+20     	; 0xeda <__addsf3x+0x4e>
     ec6:	50 3e       	cpi	r21, 0xE0	; 224
     ec8:	68 f1       	brcs	.+90     	; 0xf24 <__addsf3x+0x98>
     eca:	1a 16       	cp	r1, r26
     ecc:	f0 40       	sbci	r31, 0x00	; 0
     ece:	a2 2f       	mov	r26, r18
     ed0:	23 2f       	mov	r18, r19
     ed2:	34 2f       	mov	r19, r20
     ed4:	44 27       	eor	r20, r20
     ed6:	58 5f       	subi	r21, 0xF8	; 248
     ed8:	f3 cf       	rjmp	.-26     	; 0xec0 <__addsf3x+0x34>
     eda:	46 95       	lsr	r20
     edc:	37 95       	ror	r19
     ede:	27 95       	ror	r18
     ee0:	a7 95       	ror	r26
     ee2:	f0 40       	sbci	r31, 0x00	; 0
     ee4:	53 95       	inc	r21
     ee6:	c9 f7       	brne	.-14     	; 0xeda <__addsf3x+0x4e>
     ee8:	7e f4       	brtc	.+30     	; 0xf08 <__addsf3x+0x7c>
     eea:	1f 16       	cp	r1, r31
     eec:	ba 0b       	sbc	r27, r26
     eee:	62 0b       	sbc	r22, r18
     ef0:	73 0b       	sbc	r23, r19
     ef2:	84 0b       	sbc	r24, r20
     ef4:	ba f0       	brmi	.+46     	; 0xf24 <__addsf3x+0x98>
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	a1 f0       	breq	.+40     	; 0xf22 <__addsf3x+0x96>
     efa:	ff 0f       	add	r31, r31
     efc:	bb 1f       	adc	r27, r27
     efe:	66 1f       	adc	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	c2 f7       	brpl	.-16     	; 0xef6 <__addsf3x+0x6a>
     f06:	0e c0       	rjmp	.+28     	; 0xf24 <__addsf3x+0x98>
     f08:	ba 0f       	add	r27, r26
     f0a:	62 1f       	adc	r22, r18
     f0c:	73 1f       	adc	r23, r19
     f0e:	84 1f       	adc	r24, r20
     f10:	48 f4       	brcc	.+18     	; 0xf24 <__addsf3x+0x98>
     f12:	87 95       	ror	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f7 95       	ror	r31
     f1c:	9e 3f       	cpi	r25, 0xFE	; 254
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <__addsf3x+0x96>
     f20:	b3 cf       	rjmp	.-154    	; 0xe88 <__addsf3+0x1e>
     f22:	93 95       	inc	r25
     f24:	88 0f       	add	r24, r24
     f26:	08 f0       	brcs	.+2      	; 0xf2a <__addsf3x+0x9e>
     f28:	99 27       	eor	r25, r25
     f2a:	ee 0f       	add	r30, r30
     f2c:	97 95       	ror	r25
     f2e:	87 95       	ror	r24
     f30:	08 95       	ret

00000f32 <__divsf3>:
     f32:	0c d0       	rcall	.+24     	; 0xf4c <__divsf3x>
     f34:	eb c0       	rjmp	.+470    	; 0x110c <__fp_round>
     f36:	e3 d0       	rcall	.+454    	; 0x10fe <__fp_pscB>
     f38:	40 f0       	brcs	.+16     	; 0xf4a <__divsf3+0x18>
     f3a:	da d0       	rcall	.+436    	; 0x10f0 <__fp_pscA>
     f3c:	30 f0       	brcs	.+12     	; 0xf4a <__divsf3+0x18>
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__divsf3+0x16>
     f40:	5f 3f       	cpi	r21, 0xFF	; 255
     f42:	19 f0       	breq	.+6      	; 0xf4a <__divsf3+0x18>
     f44:	cc c0       	rjmp	.+408    	; 0x10de <__fp_inf>
     f46:	51 11       	cpse	r21, r1
     f48:	15 c1       	rjmp	.+554    	; 0x1174 <__fp_szero>
     f4a:	cf c0       	rjmp	.+414    	; 0x10ea <__fp_nan>

00000f4c <__divsf3x>:
     f4c:	f0 d0       	rcall	.+480    	; 0x112e <__fp_split3>
     f4e:	98 f3       	brcs	.-26     	; 0xf36 <__divsf3+0x4>

00000f50 <__divsf3_pse>:
     f50:	99 23       	and	r25, r25
     f52:	c9 f3       	breq	.-14     	; 0xf46 <__divsf3+0x14>
     f54:	55 23       	and	r21, r21
     f56:	b1 f3       	breq	.-20     	; 0xf44 <__divsf3+0x12>
     f58:	95 1b       	sub	r25, r21
     f5a:	55 0b       	sbc	r21, r21
     f5c:	bb 27       	eor	r27, r27
     f5e:	aa 27       	eor	r26, r26
     f60:	62 17       	cp	r22, r18
     f62:	73 07       	cpc	r23, r19
     f64:	84 07       	cpc	r24, r20
     f66:	38 f0       	brcs	.+14     	; 0xf76 <__divsf3_pse+0x26>
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	44 1f       	adc	r20, r20
     f72:	aa 1f       	adc	r26, r26
     f74:	a9 f3       	breq	.-22     	; 0xf60 <__divsf3_pse+0x10>
     f76:	33 d0       	rcall	.+102    	; 0xfde <__divsf3_pse+0x8e>
     f78:	0e 2e       	mov	r0, r30
     f7a:	3a f0       	brmi	.+14     	; 0xf8a <__divsf3_pse+0x3a>
     f7c:	e0 e8       	ldi	r30, 0x80	; 128
     f7e:	30 d0       	rcall	.+96     	; 0xfe0 <__divsf3_pse+0x90>
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	e6 95       	lsr	r30
     f86:	00 1c       	adc	r0, r0
     f88:	ca f7       	brpl	.-14     	; 0xf7c <__divsf3_pse+0x2c>
     f8a:	29 d0       	rcall	.+82     	; 0xfde <__divsf3_pse+0x8e>
     f8c:	fe 2f       	mov	r31, r30
     f8e:	27 d0       	rcall	.+78     	; 0xfde <__divsf3_pse+0x8e>
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	bb 1f       	adc	r27, r27
     f98:	26 17       	cp	r18, r22
     f9a:	37 07       	cpc	r19, r23
     f9c:	48 07       	cpc	r20, r24
     f9e:	ab 07       	cpc	r26, r27
     fa0:	b0 e8       	ldi	r27, 0x80	; 128
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <__divsf3_pse+0x56>
     fa4:	bb 0b       	sbc	r27, r27
     fa6:	80 2d       	mov	r24, r0
     fa8:	bf 01       	movw	r22, r30
     faa:	ff 27       	eor	r31, r31
     fac:	93 58       	subi	r25, 0x83	; 131
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	2a f0       	brmi	.+10     	; 0xfbc <__divsf3_pse+0x6c>
     fb2:	9e 3f       	cpi	r25, 0xFE	; 254
     fb4:	51 05       	cpc	r21, r1
     fb6:	68 f0       	brcs	.+26     	; 0xfd2 <__divsf3_pse+0x82>
     fb8:	92 c0       	rjmp	.+292    	; 0x10de <__fp_inf>
     fba:	dc c0       	rjmp	.+440    	; 0x1174 <__fp_szero>
     fbc:	5f 3f       	cpi	r21, 0xFF	; 255
     fbe:	ec f3       	brlt	.-6      	; 0xfba <__divsf3_pse+0x6a>
     fc0:	98 3e       	cpi	r25, 0xE8	; 232
     fc2:	dc f3       	brlt	.-10     	; 0xfba <__divsf3_pse+0x6a>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f7 95       	ror	r31
     fce:	9f 5f       	subi	r25, 0xFF	; 255
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <__divsf3_pse+0x74>
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	bb 1f       	adc	r27, r27
     fe8:	62 17       	cp	r22, r18
     fea:	73 07       	cpc	r23, r19
     fec:	84 07       	cpc	r24, r20
     fee:	ba 07       	cpc	r27, r26
     ff0:	20 f0       	brcs	.+8      	; 0xffa <__divsf3_pse+0xaa>
     ff2:	62 1b       	sub	r22, r18
     ff4:	73 0b       	sbc	r23, r19
     ff6:	84 0b       	sbc	r24, r20
     ff8:	ba 0b       	sbc	r27, r26
     ffa:	ee 1f       	adc	r30, r30
     ffc:	88 f7       	brcc	.-30     	; 0xfe0 <__divsf3_pse+0x90>
     ffe:	e0 95       	com	r30
    1000:	08 95       	ret

00001002 <__fixsfsi>:
    1002:	04 d0       	rcall	.+8      	; 0x100c <__fixunssfsi>
    1004:	68 94       	set
    1006:	b1 11       	cpse	r27, r1
    1008:	b5 c0       	rjmp	.+362    	; 0x1174 <__fp_szero>
    100a:	08 95       	ret

0000100c <__fixunssfsi>:
    100c:	98 d0       	rcall	.+304    	; 0x113e <__fp_splitA>
    100e:	88 f0       	brcs	.+34     	; 0x1032 <__fixunssfsi+0x26>
    1010:	9f 57       	subi	r25, 0x7F	; 127
    1012:	90 f0       	brcs	.+36     	; 0x1038 <__fixunssfsi+0x2c>
    1014:	b9 2f       	mov	r27, r25
    1016:	99 27       	eor	r25, r25
    1018:	b7 51       	subi	r27, 0x17	; 23
    101a:	a0 f0       	brcs	.+40     	; 0x1044 <__fixunssfsi+0x38>
    101c:	d1 f0       	breq	.+52     	; 0x1052 <__fixunssfsi+0x46>
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	1a f0       	brmi	.+6      	; 0x102e <__fixunssfsi+0x22>
    1028:	ba 95       	dec	r27
    102a:	c9 f7       	brne	.-14     	; 0x101e <__fixunssfsi+0x12>
    102c:	12 c0       	rjmp	.+36     	; 0x1052 <__fixunssfsi+0x46>
    102e:	b1 30       	cpi	r27, 0x01	; 1
    1030:	81 f0       	breq	.+32     	; 0x1052 <__fixunssfsi+0x46>
    1032:	9f d0       	rcall	.+318    	; 0x1172 <__fp_zero>
    1034:	b1 e0       	ldi	r27, 0x01	; 1
    1036:	08 95       	ret
    1038:	9c c0       	rjmp	.+312    	; 0x1172 <__fp_zero>
    103a:	67 2f       	mov	r22, r23
    103c:	78 2f       	mov	r23, r24
    103e:	88 27       	eor	r24, r24
    1040:	b8 5f       	subi	r27, 0xF8	; 248
    1042:	39 f0       	breq	.+14     	; 0x1052 <__fixunssfsi+0x46>
    1044:	b9 3f       	cpi	r27, 0xF9	; 249
    1046:	cc f3       	brlt	.-14     	; 0x103a <__fixunssfsi+0x2e>
    1048:	86 95       	lsr	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b3 95       	inc	r27
    1050:	d9 f7       	brne	.-10     	; 0x1048 <__fixunssfsi+0x3c>
    1052:	3e f4       	brtc	.+14     	; 0x1062 <__fixunssfsi+0x56>
    1054:	90 95       	com	r25
    1056:	80 95       	com	r24
    1058:	70 95       	com	r23
    105a:	61 95       	neg	r22
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	08 95       	ret

00001064 <__floatunsisf>:
    1064:	e8 94       	clt
    1066:	09 c0       	rjmp	.+18     	; 0x107a <__floatsisf+0x12>

00001068 <__floatsisf>:
    1068:	97 fb       	bst	r25, 7
    106a:	3e f4       	brtc	.+14     	; 0x107a <__floatsisf+0x12>
    106c:	90 95       	com	r25
    106e:	80 95       	com	r24
    1070:	70 95       	com	r23
    1072:	61 95       	neg	r22
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	99 23       	and	r25, r25
    107c:	a9 f0       	breq	.+42     	; 0x10a8 <__floatsisf+0x40>
    107e:	f9 2f       	mov	r31, r25
    1080:	96 e9       	ldi	r25, 0x96	; 150
    1082:	bb 27       	eor	r27, r27
    1084:	93 95       	inc	r25
    1086:	f6 95       	lsr	r31
    1088:	87 95       	ror	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	b7 95       	ror	r27
    1090:	f1 11       	cpse	r31, r1
    1092:	f8 cf       	rjmp	.-16     	; 0x1084 <__floatsisf+0x1c>
    1094:	fa f4       	brpl	.+62     	; 0x10d4 <__floatsisf+0x6c>
    1096:	bb 0f       	add	r27, r27
    1098:	11 f4       	brne	.+4      	; 0x109e <__floatsisf+0x36>
    109a:	60 ff       	sbrs	r22, 0
    109c:	1b c0       	rjmp	.+54     	; 0x10d4 <__floatsisf+0x6c>
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	16 c0       	rjmp	.+44     	; 0x10d4 <__floatsisf+0x6c>
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <__floatsisf+0x48>
    10ac:	96 e9       	ldi	r25, 0x96	; 150
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <__floatsisf+0x6a>
    10b0:	77 23       	and	r23, r23
    10b2:	21 f0       	breq	.+8      	; 0x10bc <__floatsisf+0x54>
    10b4:	9e e8       	ldi	r25, 0x8E	; 142
    10b6:	87 2f       	mov	r24, r23
    10b8:	76 2f       	mov	r23, r22
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <__floatsisf+0x5e>
    10bc:	66 23       	and	r22, r22
    10be:	71 f0       	breq	.+28     	; 0x10dc <__floatsisf+0x74>
    10c0:	96 e8       	ldi	r25, 0x86	; 134
    10c2:	86 2f       	mov	r24, r22
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	2a f0       	brmi	.+10     	; 0x10d4 <__floatsisf+0x6c>
    10ca:	9a 95       	dec	r25
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	da f7       	brpl	.-10     	; 0x10ca <__floatsisf+0x62>
    10d4:	88 0f       	add	r24, r24
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	97 f9       	bld	r25, 7
    10dc:	08 95       	ret

000010de <__fp_inf>:
    10de:	97 f9       	bld	r25, 7
    10e0:	9f 67       	ori	r25, 0x7F	; 127
    10e2:	80 e8       	ldi	r24, 0x80	; 128
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	08 95       	ret

000010ea <__fp_nan>:
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	80 ec       	ldi	r24, 0xC0	; 192
    10ee:	08 95       	ret

000010f0 <__fp_pscA>:
    10f0:	00 24       	eor	r0, r0
    10f2:	0a 94       	dec	r0
    10f4:	16 16       	cp	r1, r22
    10f6:	17 06       	cpc	r1, r23
    10f8:	18 06       	cpc	r1, r24
    10fa:	09 06       	cpc	r0, r25
    10fc:	08 95       	ret

000010fe <__fp_pscB>:
    10fe:	00 24       	eor	r0, r0
    1100:	0a 94       	dec	r0
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	05 06       	cpc	r0, r21
    110a:	08 95       	ret

0000110c <__fp_round>:
    110c:	09 2e       	mov	r0, r25
    110e:	03 94       	inc	r0
    1110:	00 0c       	add	r0, r0
    1112:	11 f4       	brne	.+4      	; 0x1118 <__fp_round+0xc>
    1114:	88 23       	and	r24, r24
    1116:	52 f0       	brmi	.+20     	; 0x112c <__fp_round+0x20>
    1118:	bb 0f       	add	r27, r27
    111a:	40 f4       	brcc	.+16     	; 0x112c <__fp_round+0x20>
    111c:	bf 2b       	or	r27, r31
    111e:	11 f4       	brne	.+4      	; 0x1124 <__fp_round+0x18>
    1120:	60 ff       	sbrs	r22, 0
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__fp_round+0x20>
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	08 95       	ret

0000112e <__fp_split3>:
    112e:	57 fd       	sbrc	r21, 7
    1130:	90 58       	subi	r25, 0x80	; 128
    1132:	44 0f       	add	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	59 f0       	breq	.+22     	; 0x114e <__fp_splitA+0x10>
    1138:	5f 3f       	cpi	r21, 0xFF	; 255
    113a:	71 f0       	breq	.+28     	; 0x1158 <__fp_splitA+0x1a>
    113c:	47 95       	ror	r20

0000113e <__fp_splitA>:
    113e:	88 0f       	add	r24, r24
    1140:	97 fb       	bst	r25, 7
    1142:	99 1f       	adc	r25, r25
    1144:	61 f0       	breq	.+24     	; 0x115e <__fp_splitA+0x20>
    1146:	9f 3f       	cpi	r25, 0xFF	; 255
    1148:	79 f0       	breq	.+30     	; 0x1168 <__fp_splitA+0x2a>
    114a:	87 95       	ror	r24
    114c:	08 95       	ret
    114e:	12 16       	cp	r1, r18
    1150:	13 06       	cpc	r1, r19
    1152:	14 06       	cpc	r1, r20
    1154:	55 1f       	adc	r21, r21
    1156:	f2 cf       	rjmp	.-28     	; 0x113c <__fp_split3+0xe>
    1158:	46 95       	lsr	r20
    115a:	f1 df       	rcall	.-30     	; 0x113e <__fp_splitA>
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__fp_splitA+0x30>
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	18 06       	cpc	r1, r24
    1164:	99 1f       	adc	r25, r25
    1166:	f1 cf       	rjmp	.-30     	; 0x114a <__fp_splitA+0xc>
    1168:	86 95       	lsr	r24
    116a:	71 05       	cpc	r23, r1
    116c:	61 05       	cpc	r22, r1
    116e:	08 94       	sec
    1170:	08 95       	ret

00001172 <__fp_zero>:
    1172:	e8 94       	clt

00001174 <__fp_szero>:
    1174:	bb 27       	eor	r27, r27
    1176:	66 27       	eor	r22, r22
    1178:	77 27       	eor	r23, r23
    117a:	cb 01       	movw	r24, r22
    117c:	97 f9       	bld	r25, 7
    117e:	08 95       	ret

00001180 <__mulsf3>:
    1180:	0b d0       	rcall	.+22     	; 0x1198 <__mulsf3x>
    1182:	c4 cf       	rjmp	.-120    	; 0x110c <__fp_round>
    1184:	b5 df       	rcall	.-150    	; 0x10f0 <__fp_pscA>
    1186:	28 f0       	brcs	.+10     	; 0x1192 <__mulsf3+0x12>
    1188:	ba df       	rcall	.-140    	; 0x10fe <__fp_pscB>
    118a:	18 f0       	brcs	.+6      	; 0x1192 <__mulsf3+0x12>
    118c:	95 23       	and	r25, r21
    118e:	09 f0       	breq	.+2      	; 0x1192 <__mulsf3+0x12>
    1190:	a6 cf       	rjmp	.-180    	; 0x10de <__fp_inf>
    1192:	ab cf       	rjmp	.-170    	; 0x10ea <__fp_nan>
    1194:	11 24       	eor	r1, r1
    1196:	ee cf       	rjmp	.-36     	; 0x1174 <__fp_szero>

00001198 <__mulsf3x>:
    1198:	ca df       	rcall	.-108    	; 0x112e <__fp_split3>
    119a:	a0 f3       	brcs	.-24     	; 0x1184 <__mulsf3+0x4>

0000119c <__mulsf3_pse>:
    119c:	95 9f       	mul	r25, r21
    119e:	d1 f3       	breq	.-12     	; 0x1194 <__mulsf3+0x14>
    11a0:	95 0f       	add	r25, r21
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	55 1f       	adc	r21, r21
    11a6:	62 9f       	mul	r22, r18
    11a8:	f0 01       	movw	r30, r0
    11aa:	72 9f       	mul	r23, r18
    11ac:	bb 27       	eor	r27, r27
    11ae:	f0 0d       	add	r31, r0
    11b0:	b1 1d       	adc	r27, r1
    11b2:	63 9f       	mul	r22, r19
    11b4:	aa 27       	eor	r26, r26
    11b6:	f0 0d       	add	r31, r0
    11b8:	b1 1d       	adc	r27, r1
    11ba:	aa 1f       	adc	r26, r26
    11bc:	64 9f       	mul	r22, r20
    11be:	66 27       	eor	r22, r22
    11c0:	b0 0d       	add	r27, r0
    11c2:	a1 1d       	adc	r26, r1
    11c4:	66 1f       	adc	r22, r22
    11c6:	82 9f       	mul	r24, r18
    11c8:	22 27       	eor	r18, r18
    11ca:	b0 0d       	add	r27, r0
    11cc:	a1 1d       	adc	r26, r1
    11ce:	62 1f       	adc	r22, r18
    11d0:	73 9f       	mul	r23, r19
    11d2:	b0 0d       	add	r27, r0
    11d4:	a1 1d       	adc	r26, r1
    11d6:	62 1f       	adc	r22, r18
    11d8:	83 9f       	mul	r24, r19
    11da:	a0 0d       	add	r26, r0
    11dc:	61 1d       	adc	r22, r1
    11de:	22 1f       	adc	r18, r18
    11e0:	74 9f       	mul	r23, r20
    11e2:	33 27       	eor	r19, r19
    11e4:	a0 0d       	add	r26, r0
    11e6:	61 1d       	adc	r22, r1
    11e8:	23 1f       	adc	r18, r19
    11ea:	84 9f       	mul	r24, r20
    11ec:	60 0d       	add	r22, r0
    11ee:	21 1d       	adc	r18, r1
    11f0:	82 2f       	mov	r24, r18
    11f2:	76 2f       	mov	r23, r22
    11f4:	6a 2f       	mov	r22, r26
    11f6:	11 24       	eor	r1, r1
    11f8:	9f 57       	subi	r25, 0x7F	; 127
    11fa:	50 40       	sbci	r21, 0x00	; 0
    11fc:	8a f0       	brmi	.+34     	; 0x1220 <__mulsf3_pse+0x84>
    11fe:	e1 f0       	breq	.+56     	; 0x1238 <__mulsf3_pse+0x9c>
    1200:	88 23       	and	r24, r24
    1202:	4a f0       	brmi	.+18     	; 0x1216 <__mulsf3_pse+0x7a>
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	bb 1f       	adc	r27, r27
    120a:	66 1f       	adc	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	a9 f7       	brne	.-22     	; 0x1200 <__mulsf3_pse+0x64>
    1216:	9e 3f       	cpi	r25, 0xFE	; 254
    1218:	51 05       	cpc	r21, r1
    121a:	70 f0       	brcs	.+28     	; 0x1238 <__mulsf3_pse+0x9c>
    121c:	60 cf       	rjmp	.-320    	; 0x10de <__fp_inf>
    121e:	aa cf       	rjmp	.-172    	; 0x1174 <__fp_szero>
    1220:	5f 3f       	cpi	r21, 0xFF	; 255
    1222:	ec f3       	brlt	.-6      	; 0x121e <__mulsf3_pse+0x82>
    1224:	98 3e       	cpi	r25, 0xE8	; 232
    1226:	dc f3       	brlt	.-10     	; 0x121e <__mulsf3_pse+0x82>
    1228:	86 95       	lsr	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	e7 95       	ror	r30
    1234:	9f 5f       	subi	r25, 0xFF	; 255
    1236:	c1 f7       	brne	.-16     	; 0x1228 <__mulsf3_pse+0x8c>
    1238:	fe 2b       	or	r31, r30
    123a:	88 0f       	add	r24, r24
    123c:	91 1d       	adc	r25, r1
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <__divmodhi4>:
    1246:	97 fb       	bst	r25, 7
    1248:	07 2e       	mov	r0, r23
    124a:	16 f4       	brtc	.+4      	; 0x1250 <__divmodhi4+0xa>
    124c:	00 94       	com	r0
    124e:	06 d0       	rcall	.+12     	; 0x125c <__divmodhi4_neg1>
    1250:	77 fd       	sbrc	r23, 7
    1252:	08 d0       	rcall	.+16     	; 0x1264 <__divmodhi4_neg2>
    1254:	0b d0       	rcall	.+22     	; 0x126c <__udivmodhi4>
    1256:	07 fc       	sbrc	r0, 7
    1258:	05 d0       	rcall	.+10     	; 0x1264 <__divmodhi4_neg2>
    125a:	3e f4       	brtc	.+14     	; 0x126a <__divmodhi4_exit>

0000125c <__divmodhi4_neg1>:
    125c:	90 95       	com	r25
    125e:	81 95       	neg	r24
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__divmodhi4_neg2>:
    1264:	70 95       	com	r23
    1266:	61 95       	neg	r22
    1268:	7f 4f       	sbci	r23, 0xFF	; 255

0000126a <__divmodhi4_exit>:
    126a:	08 95       	ret

0000126c <__udivmodhi4>:
    126c:	aa 1b       	sub	r26, r26
    126e:	bb 1b       	sub	r27, r27
    1270:	51 e1       	ldi	r21, 0x11	; 17
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <__udivmodhi4_ep>

00001274 <__udivmodhi4_loop>:
    1274:	aa 1f       	adc	r26, r26
    1276:	bb 1f       	adc	r27, r27
    1278:	a6 17       	cp	r26, r22
    127a:	b7 07       	cpc	r27, r23
    127c:	10 f0       	brcs	.+4      	; 0x1282 <__udivmodhi4_ep>
    127e:	a6 1b       	sub	r26, r22
    1280:	b7 0b       	sbc	r27, r23

00001282 <__udivmodhi4_ep>:
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	5a 95       	dec	r21
    1288:	a9 f7       	brne	.-22     	; 0x1274 <__udivmodhi4_loop>
    128a:	80 95       	com	r24
    128c:	90 95       	com	r25
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	08 95       	ret

00001294 <strcpy>:
    1294:	fb 01       	movw	r30, r22
    1296:	dc 01       	movw	r26, r24
    1298:	01 90       	ld	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	00 20       	and	r0, r0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <strcpy+0x4>
    12a0:	08 95       	ret

000012a2 <_exit>:
    12a2:	f8 94       	cli

000012a4 <__stop_program>:
    12a4:	ff cf       	rjmp	.-2      	; 0x12a4 <__stop_program>
