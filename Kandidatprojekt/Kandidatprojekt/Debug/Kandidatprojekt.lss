
Kandidatprojekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001524  000015b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  008001aa  008001aa  00001662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000139f  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000663  00000000  00000000  00002b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000188d  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00004a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000109df  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d58  00000000  00000000  000157c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0001651b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000037e7  00000000  00000000  00016633  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c7       	rjmp	.+3630   	; 0xe78 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c7       	rjmp	.+3914   	; 0xf9c <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	fc c7       	rjmp	.+4088   	; 0x1052 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c6       	rjmp	.+3390   	; 0xdb0 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3a       	cpi	r26, 0xAA	; 170
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa ea       	ldi	r26, 0xAA	; 170
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 36       	cpi	r26, 0x6F	; 111
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	01 d7       	rcall	.+3586   	; 0xec6 <main>
      c4:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <FLC_steering>:
* Inputs: measurement of speed, v (PWM counter), and distance, d, from sonic sensors
* Output: speed, (PWM counter)
*/
void FLC_steering(int c, int s, int v)

{
      ca:	2f 92       	push	r2
      cc:	3f 92       	push	r3
      ce:	4f 92       	push	r4
      d0:	5f 92       	push	r5
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	ce 56       	subi	r28, 0x6E	; 110
      f4:	d2 40       	sbci	r29, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
	struct io_type delta_C;
	struct io_type steering;
	struct io_type delta_V;
		
			// set iErr's input value to measErr value
	if(c<0)				// if sensor value is smaller than delta_C's input set's lower limit
     100:	99 23       	and	r25, r25
     102:	1c f4       	brge	.+6      	; 0x10a <FLC_steering+0x40>
	{
		delta_C.value = 0;  // force input value to lowest point in delta_C's input set
     104:	1c 86       	std	Y+12, r1	; 0x0c
     106:	1b 86       	std	Y+11, r1	; 0x0b
     108:	0a c0       	rjmp	.+20     	; 0x11e <FLC_steering+0x54>
	}
	else if(c>205)			// if sensor value is bigger than delta_C's input set's upper limit
     10a:	8e 3c       	cpi	r24, 0xCE	; 206
     10c:	91 05       	cpc	r25, r1
     10e:	2c f0       	brlt	.+10     	; 0x11a <FLC_steering+0x50>
	{
		delta_C.value = 205;  // force input value to lowest point in delta_C's input set
     110:	8d ec       	ldi	r24, 0xCD	; 205
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	9c 87       	std	Y+12, r25	; 0x0c
     116:	8b 87       	std	Y+11, r24	; 0x0b
     118:	02 c0       	rjmp	.+4      	; 0x11e <FLC_steering+0x54>
	}
	else
	{
		delta_C.value = c;
     11a:	9c 87       	std	Y+12, r25	; 0x0c
     11c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	// set iAng's input value to measAng value
	if(s<2260)				// if sensor value is smaller than error's input set lower limit
     11e:	64 3d       	cpi	r22, 0xD4	; 212
     120:	28 e0       	ldi	r18, 0x08	; 8
     122:	72 07       	cpc	r23, r18
     124:	2c f4       	brge	.+10     	; 0x130 <FLC_steering+0x66>
	{
		steering.value = 2260;  // force input value to lowest point in delta_C's input set
     126:	84 ed       	ldi	r24, 0xD4	; 212
     128:	98 e0       	ldi	r25, 0x08	; 8
     12a:	9c 8f       	std	Y+28, r25	; 0x1c
     12c:	8b 8f       	std	Y+27, r24	; 0x1b
     12e:	0b c0       	rjmp	.+22     	; 0x146 <FLC_steering+0x7c>
	}
	else if(s>3060)			// if sensor value is bigger than error's input set's upper limit
     130:	65 3f       	cpi	r22, 0xF5	; 245
     132:	3b e0       	ldi	r19, 0x0B	; 11
     134:	73 07       	cpc	r23, r19
     136:	2c f0       	brlt	.+10     	; 0x142 <FLC_steering+0x78>
	{
		steering.value = 3060;  // force input value to lowest point in error's input set
     138:	84 ef       	ldi	r24, 0xF4	; 244
     13a:	9b e0       	ldi	r25, 0x0B	; 11
     13c:	9c 8f       	std	Y+28, r25	; 0x1c
     13e:	8b 8f       	std	Y+27, r24	; 0x1b
     140:	02 c0       	rjmp	.+4      	; 0x146 <FLC_steering+0x7c>
	}
	else
	{
		steering.value = s;
     142:	7c 8f       	std	Y+28, r23	; 0x1c
     144:	6b 8f       	std	Y+27, r22	; 0x1b
	}
	
	// set V's input value to VÂ´s value
	if(v<0)				// if sensor value is smaller than error's input set lower limit
     146:	55 23       	and	r21, r21
     148:	1c f4       	brge	.+6      	; 0x150 <FLC_steering+0x86>
	{
		delta_V.value = 0;  // force input value to lowest point in delta_V's input set
     14a:	1c a6       	std	Y+44, r1	; 0x2c
     14c:	1b a6       	std	Y+43, r1	; 0x2b
     14e:	0a c0       	rjmp	.+20     	; 0x164 <FLC_steering+0x9a>
	}
	else if(v>80)			// if sensor value is bigger than error's input set's upper limit
     150:	41 35       	cpi	r20, 0x51	; 81
     152:	51 05       	cpc	r21, r1
     154:	2c f0       	brlt	.+10     	; 0x160 <FLC_steering+0x96>
	{
		delta_V.value = 80;  // force input value to lowest point in error's input set
     156:	80 e5       	ldi	r24, 0x50	; 80
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9c a7       	std	Y+44, r25	; 0x2c
     15c:	8b a7       	std	Y+43, r24	; 0x2b
     15e:	02 c0       	rjmp	.+4      	; 0x164 <FLC_steering+0x9a>
	}
	else
	{
		delta_V.value = v;
     160:	5c a7       	std	Y+44, r21	; 0x2c
     162:	4b a7       	std	Y+43, r20	; 0x2b
	}
	
	
	// DECLARATION OF C INPUT INPUT 1
	//struct io_type delta_C;
	strcpy(delta_C.name, "delta_C");
     164:	88 e0       	ldi	r24, 0x08	; 8
     166:	e0 e0       	ldi	r30, 0x00	; 0
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	de 01       	movw	r26, r28
     16c:	11 96       	adiw	r26, 0x01	; 1
     16e:	01 90       	ld	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	8a 95       	dec	r24
     174:	e1 f7       	brne	.-8      	; 0x16e <FLC_steering+0xa4>
	//MFs
	struct mf_type negative;
	strcpy(negative.name, "negative");
     176:	9e 01       	movw	r18, r28
     178:	2f 5c       	subi	r18, 0xCF	; 207
     17a:	3f 4f       	sbci	r19, 0xFF	; 255
     17c:	89 e0       	ldi	r24, 0x09	; 9
     17e:	e8 e0       	ldi	r30, 0x08	; 8
     180:	f1 e0       	ldi	r31, 0x01	; 1
     182:	d9 01       	movw	r26, r18
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <FLC_steering+0xba>
	negative.value = 0;
     18c:	1c ae       	std	Y+60, r1	; 0x3c
     18e:	1b ae       	std	Y+59, r1	; 0x3b
	negative.point1 = 44;
     190:	8c e2       	ldi	r24, 0x2C	; 44
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	9e af       	std	Y+62, r25	; 0x3e
     196:	8d af       	std	Y+61, r24	; 0x3d
	negative.point2= 110;
     198:	8e e6       	ldi	r24, 0x6E	; 110
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	21 96       	adiw	r28, 0x01	; 1
     19e:	9f af       	std	Y+63, r25	; 0x3f
     1a0:	8e af       	std	Y+62, r24	; 0x3e
     1a2:	21 97       	sbiw	r28, 0x01	; 1
	negative.slope1 = 100;
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f4 e6       	ldi	r31, 0x64	; 100
     1a8:	6f 2e       	mov	r6, r31
     1aa:	71 2c       	mov	r7, r1
     1ac:	f0 2d       	mov	r31, r0
     1ae:	23 96       	adiw	r28, 0x03	; 3
     1b0:	7f ae       	std	Y+63, r7	; 0x3f
     1b2:	6e ae       	std	Y+62, r6	; 0x3e
     1b4:	23 97       	sbiw	r28, 0x03	; 3
	negative.slope2 = 2;
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	25 96       	adiw	r28, 0x05	; 5
     1bc:	9f af       	std	Y+63, r25	; 0x3f
     1be:	8e af       	std	Y+62, r24	; 0x3e
     1c0:	25 97       	sbiw	r28, 0x05	; 5
	struct mf_type zer;
	strcpy(zer.name, "zer");
     1c2:	4a e7       	ldi	r20, 0x7A	; 122
     1c4:	55 e6       	ldi	r21, 0x65	; 101
     1c6:	62 e7       	ldi	r22, 0x72	; 114
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	2b 96       	adiw	r28, 0x0b	; 11
     1cc:	4c af       	std	Y+60, r20	; 0x3c
     1ce:	5d af       	std	Y+61, r21	; 0x3d
     1d0:	6e af       	std	Y+62, r22	; 0x3e
     1d2:	7f af       	std	Y+63, r23	; 0x3f
     1d4:	2b 97       	sbiw	r28, 0x0b	; 11
	zer.value = 0;
     1d6:	63 96       	adiw	r28, 0x13	; 19
     1d8:	1f ae       	std	Y+63, r1	; 0x3f
     1da:	1e ae       	std	Y+62, r1	; 0x3e
     1dc:	63 97       	sbiw	r28, 0x13	; 19
	zer.point1 = 75;
     1de:	4b e4       	ldi	r20, 0x4B	; 75
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	65 96       	adiw	r28, 0x15	; 21
     1e4:	5f af       	std	Y+63, r21	; 0x3f
     1e6:	4e af       	std	Y+62, r20	; 0x3e
     1e8:	65 97       	sbiw	r28, 0x15	; 21
	zer.point2= 175;
     1ea:	4f ea       	ldi	r20, 0xAF	; 175
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	67 96       	adiw	r28, 0x17	; 23
     1f0:	5f af       	std	Y+63, r21	; 0x3f
     1f2:	4e af       	std	Y+62, r20	; 0x3e
     1f4:	67 97       	sbiw	r28, 0x17	; 23
	zer.slope1 = 2;
     1f6:	69 96       	adiw	r28, 0x19	; 25
     1f8:	9f af       	std	Y+63, r25	; 0x3f
     1fa:	8e af       	std	Y+62, r24	; 0x3e
     1fc:	69 97       	sbiw	r28, 0x19	; 25
	zer.slope2 = 2;
     1fe:	6b 96       	adiw	r28, 0x1b	; 27
     200:	9f af       	std	Y+63, r25	; 0x3f
     202:	8e af       	std	Y+62, r24	; 0x3e
     204:	6b 97       	sbiw	r28, 0x1b	; 27
	struct mf_type positive;
	strcpy(positive.name, "positive");
     206:	1e 01       	movw	r2, r28
     208:	4d e5       	ldi	r20, 0x5D	; 93
     20a:	24 0e       	add	r2, r20
     20c:	31 1c       	adc	r3, r1
     20e:	49 e0       	ldi	r20, 0x09	; 9
     210:	e1 e1       	ldi	r30, 0x11	; 17
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	d1 01       	movw	r26, r2
     216:	01 90       	ld	r0, Z+
     218:	0d 92       	st	X+, r0
     21a:	4a 95       	dec	r20
     21c:	e1 f7       	brne	.-8      	; 0x216 <FLC_steering+0x14c>
	positive.value = 0;
     21e:	d1 01       	movw	r26, r2
     220:	1b 96       	adiw	r26, 0x0b	; 11
     222:	1c 92       	st	X, r1
     224:	1e 92       	st	-X, r1
     226:	1a 97       	sbiw	r26, 0x0a	; 10
	positive.point1 = 140;
     228:	4c e8       	ldi	r20, 0x8C	; 140
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	1d 96       	adiw	r26, 0x0d	; 13
     22e:	5c 93       	st	X, r21
     230:	4e 93       	st	-X, r20
     232:	1c 97       	sbiw	r26, 0x0c	; 12
	positive.point2= 206;
     234:	4e ec       	ldi	r20, 0xCE	; 206
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	1f 96       	adiw	r26, 0x0f	; 15
     23a:	5c 93       	st	X, r21
     23c:	4e 93       	st	-X, r20
     23e:	1e 97       	sbiw	r26, 0x0e	; 14
	positive.slope1 = 2;
     240:	51 96       	adiw	r26, 0x11	; 17
     242:	9c 93       	st	X, r25
     244:	8e 93       	st	-X, r24
     246:	50 97       	sbiw	r26, 0x10	; 16
	positive.slope2 = 100;
     248:	53 96       	adiw	r26, 0x13	; 19
     24a:	7c 92       	st	X, r7
     24c:	6e 92       	st	-X, r6
     24e:	52 97       	sbiw	r26, 0x12	; 18

	delta_C.membership_functions = &negative;
     250:	3e 87       	std	Y+14, r19	; 0x0e
     252:	2d 87       	std	Y+13, r18	; 0x0d
	negative.next = &zer;
     254:	e7 e4       	ldi	r30, 0x47	; 71
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	27 96       	adiw	r28, 0x07	; 7
     25e:	ff af       	std	Y+63, r31	; 0x3f
     260:	ee af       	std	Y+62, r30	; 0x3e
     262:	27 97       	sbiw	r28, 0x07	; 7
	zer.next = &positive;
     264:	6d 96       	adiw	r28, 0x1d	; 29
     266:	3f ae       	std	Y+63, r3	; 0x3f
     268:	2e ae       	std	Y+62, r2	; 0x3e
     26a:	6d 97       	sbiw	r28, 0x1d	; 29
	positive.next = NULL;
     26c:	55 96       	adiw	r26, 0x15	; 21
     26e:	1c 92       	st	X, r1
     270:	1e 92       	st	-X, r1
     272:	54 97       	sbiw	r26, 0x14	; 20
	
	// DECLARATION OF STEERING INPUT
	
	strcpy(steering.name, "steering");
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	ea e1       	ldi	r30, 0x1A	; 26
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	ac 54       	subi	r26, 0x4C	; 76
     27c:	b1 09       	sbc	r27, r1
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <FLC_steering+0x1b4>
	
	//MFs
	struct mf_type inShRight;
	strcpy(inShRight.name, "inShRight");
     286:	7e 01       	movw	r14, r28
     288:	f3 e7       	ldi	r31, 0x73	; 115
     28a:	ef 0e       	add	r14, r31
     28c:	f1 1c       	adc	r15, r1
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	e5 e9       	ldi	r30, 0x95	; 149
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	d7 01       	movw	r26, r14
     296:	01 90       	ld	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	8a 95       	dec	r24
     29c:	e1 f7       	brne	.-8      	; 0x296 <FLC_steering+0x1cc>
	inShRight.value = 0;
     29e:	d7 01       	movw	r26, r14
     2a0:	1b 96       	adiw	r26, 0x0b	; 11
     2a2:	1c 92       	st	X, r1
     2a4:	1e 92       	st	-X, r1
     2a6:	1a 97       	sbiw	r26, 0x0a	; 10
	inShRight.point1 = 2259;
     2a8:	e3 ed       	ldi	r30, 0xD3	; 211
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	1d 96       	adiw	r26, 0x0d	; 13
     2ae:	fc 93       	st	X, r31
     2b0:	ee 93       	st	-X, r30
     2b2:	1c 97       	sbiw	r26, 0x0c	; 12
	inShRight.point2= 2400;
     2b4:	20 e6       	ldi	r18, 0x60	; 96
     2b6:	39 e0       	ldi	r19, 0x09	; 9
     2b8:	1f 96       	adiw	r26, 0x0f	; 15
     2ba:	3c 93       	st	X, r19
     2bc:	2e 93       	st	-X, r18
     2be:	1e 97       	sbiw	r26, 0x0e	; 14
	inShRight.slope1 = 100;
     2c0:	51 96       	adiw	r26, 0x11	; 17
     2c2:	7c 92       	st	X, r7
     2c4:	6e 92       	st	-X, r6
     2c6:	50 97       	sbiw	r26, 0x10	; 16
	inShRight.slope2 = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	53 96       	adiw	r26, 0x13	; 19
     2ce:	9c 93       	st	X, r25
     2d0:	8e 93       	st	-X, r24
     2d2:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inRight;
	strcpy(inRight.name, "inRight");
     2d4:	8e 01       	movw	r16, r28
     2d6:	07 57       	subi	r16, 0x77	; 119
     2d8:	1f 4f       	sbci	r17, 0xFF	; 255
     2da:	28 e0       	ldi	r18, 0x08	; 8
     2dc:	e3 e2       	ldi	r30, 0x23	; 35
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	d8 01       	movw	r26, r16
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	2a 95       	dec	r18
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <FLC_steering+0x218>
	inRight.value = 0;
     2ea:	d8 01       	movw	r26, r16
     2ec:	1b 96       	adiw	r26, 0x0b	; 11
     2ee:	1c 92       	st	X, r1
     2f0:	1e 92       	st	-X, r1
     2f2:	1a 97       	sbiw	r26, 0x0a	; 10
	inRight.point1 = 2300;
     2f4:	2c ef       	ldi	r18, 0xFC	; 252
     2f6:	38 e0       	ldi	r19, 0x08	; 8
     2f8:	1d 96       	adiw	r26, 0x0d	; 13
     2fa:	3c 93       	st	X, r19
     2fc:	2e 93       	st	-X, r18
     2fe:	1c 97       	sbiw	r26, 0x0c	; 12
	inRight.point2= 2580;
     300:	24 e1       	ldi	r18, 0x14	; 20
     302:	3a e0       	ldi	r19, 0x0A	; 10
     304:	1f 96       	adiw	r26, 0x0f	; 15
     306:	3c 93       	st	X, r19
     308:	2e 93       	st	-X, r18
     30a:	1e 97       	sbiw	r26, 0x0e	; 14
	inRight.slope1 = 1;
     30c:	51 96       	adiw	r26, 0x11	; 17
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	50 97       	sbiw	r26, 0x10	; 16
	inRight.slope2 = 1;
     314:	53 96       	adiw	r26, 0x13	; 19
     316:	9c 93       	st	X, r25
     318:	8e 93       	st	-X, r24
     31a:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inStraight;
	strcpy(inStraight.name, "inStraight");
     31c:	be 01       	movw	r22, r28
     31e:	61 56       	subi	r22, 0x61	; 97
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	2b e0       	ldi	r18, 0x0B	; 11
     324:	eb e2       	ldi	r30, 0x2B	; 43
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	db 01       	movw	r26, r22
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	2a 95       	dec	r18
     330:	e1 f7       	brne	.-8      	; 0x32a <FLC_steering+0x260>
	inStraight.value = 0;
     332:	fb 01       	movw	r30, r22
     334:	13 86       	std	Z+11, r1	; 0x0b
     336:	12 86       	std	Z+10, r1	; 0x0a
	inStraight.point1 = 2480;
     338:	20 eb       	ldi	r18, 0xB0	; 176
     33a:	39 e0       	ldi	r19, 0x09	; 9
     33c:	35 87       	std	Z+13, r19	; 0x0d
     33e:	24 87       	std	Z+12, r18	; 0x0c
	inStraight.point2= 2840;
     340:	0f 2e       	mov	r0, r31
     342:	f8 e1       	ldi	r31, 0x18	; 24
     344:	af 2e       	mov	r10, r31
     346:	fb e0       	ldi	r31, 0x0B	; 11
     348:	bf 2e       	mov	r11, r31
     34a:	f0 2d       	mov	r31, r0
     34c:	b7 86       	std	Z+15, r11	; 0x0f
     34e:	a6 86       	std	Z+14, r10	; 0x0e
	inStraight.slope1 = 1;
     350:	91 8b       	std	Z+17, r25	; 0x11
     352:	80 8b       	std	Z+16, r24	; 0x10
	inStraight.slope2 = 1;
     354:	93 8b       	std	Z+19, r25	; 0x13
     356:	82 8b       	std	Z+18, r24	; 0x12

	struct mf_type inLeft;
	strcpy(inLeft.name, "inLeft");
     358:	ae 01       	movw	r20, r28
     35a:	4b 54       	subi	r20, 0x4B	; 75
     35c:	5f 4f       	sbci	r21, 0xFF	; 255
     35e:	27 e0       	ldi	r18, 0x07	; 7
     360:	e6 e3       	ldi	r30, 0x36	; 54
     362:	f1 e0       	ldi	r31, 0x01	; 1
     364:	da 01       	movw	r26, r20
     366:	01 90       	ld	r0, Z+
     368:	0d 92       	st	X+, r0
     36a:	2a 95       	dec	r18
     36c:	e1 f7       	brne	.-8      	; 0x366 <FLC_steering+0x29c>
	inLeft.value = 0;
     36e:	da 01       	movw	r26, r20
     370:	1b 96       	adiw	r26, 0x0b	; 11
     372:	1c 92       	st	X, r1
     374:	1e 92       	st	-X, r1
     376:	1a 97       	sbiw	r26, 0x0a	; 10
	inLeft.point1 = 2740;
     378:	24 eb       	ldi	r18, 0xB4	; 180
     37a:	3a e0       	ldi	r19, 0x0A	; 10
     37c:	1d 96       	adiw	r26, 0x0d	; 13
     37e:	3c 93       	st	X, r19
     380:	2e 93       	st	-X, r18
     382:	1c 97       	sbiw	r26, 0x0c	; 12
	inLeft.point2= 3020;
     384:	2c ec       	ldi	r18, 0xCC	; 204
     386:	3b e0       	ldi	r19, 0x0B	; 11
     388:	1f 96       	adiw	r26, 0x0f	; 15
     38a:	3c 93       	st	X, r19
     38c:	2e 93       	st	-X, r18
     38e:	1e 97       	sbiw	r26, 0x0e	; 14
	inLeft.slope1 = 1;
     390:	51 96       	adiw	r26, 0x11	; 17
     392:	9c 93       	st	X, r25
     394:	8e 93       	st	-X, r24
     396:	50 97       	sbiw	r26, 0x10	; 16
	inLeft.slope2 = 1;
     398:	53 96       	adiw	r26, 0x13	; 19
     39a:	9c 93       	st	X, r25
     39c:	8e 93       	st	-X, r24
     39e:	52 97       	sbiw	r26, 0x12	; 18
	
	struct mf_type inShLeft;
	strcpy(inShLeft.name, "inShLeft");
     3a0:	9e 01       	movw	r18, r28
     3a2:	25 53       	subi	r18, 0x35	; 53
     3a4:	3f 4f       	sbci	r19, 0xFF	; 255
     3a6:	0f 2e       	mov	r0, r31
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	df 2e       	mov	r13, r31
     3ac:	f0 2d       	mov	r31, r0
     3ae:	ed e3       	ldi	r30, 0x3D	; 61
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	d9 01       	movw	r26, r18
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	da 94       	dec	r13
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <FLC_steering+0x2ea>
	inShLeft.value = 0;
     3bc:	f9 01       	movw	r30, r18
     3be:	13 86       	std	Z+11, r1	; 0x0b
     3c0:	12 86       	std	Z+10, r1	; 0x0a
	inShLeft.point1 = 2920;
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f8 e6       	ldi	r31, 0x68	; 104
     3c6:	8f 2e       	mov	r8, r31
     3c8:	fb e0       	ldi	r31, 0x0B	; 11
     3ca:	9f 2e       	mov	r9, r31
     3cc:	f0 2d       	mov	r31, r0
     3ce:	95 86       	std	Z+13, r9	; 0x0d
     3d0:	84 86       	std	Z+12, r8	; 0x0c
	inShLeft.point2= 3061;
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f5 ef       	ldi	r31, 0xF5	; 245
     3d6:	cf 2e       	mov	r12, r31
     3d8:	fb e0       	ldi	r31, 0x0B	; 11
     3da:	df 2e       	mov	r13, r31
     3dc:	f0 2d       	mov	r31, r0
     3de:	d7 86       	std	Z+15, r13	; 0x0f
     3e0:	c6 86       	std	Z+14, r12	; 0x0e
	inShLeft.slope1 = 1;
     3e2:	91 8b       	std	Z+17, r25	; 0x11
     3e4:	80 8b       	std	Z+16, r24	; 0x10
	inShLeft.slope2 = 100;
     3e6:	73 8a       	std	Z+19, r7	; 0x13
     3e8:	62 8a       	std	Z+18, r6	; 0x12

	steering.membership_functions = &inShRight;
     3ea:	fe 8e       	std	Y+30, r15	; 0x1e
     3ec:	ed 8e       	std	Y+29, r14	; 0x1d
	inShRight.next = &inRight;
     3ee:	d7 01       	movw	r26, r14
     3f0:	55 96       	adiw	r26, 0x15	; 21
     3f2:	1c 93       	st	X, r17
     3f4:	0e 93       	st	-X, r16
     3f6:	54 97       	sbiw	r26, 0x14	; 20
	inRight.next = &inStraight;
     3f8:	f8 01       	movw	r30, r16
     3fa:	75 8b       	std	Z+21, r23	; 0x15
     3fc:	64 8b       	std	Z+20, r22	; 0x14
	inStraight.next = &inLeft;
     3fe:	db 01       	movw	r26, r22
     400:	55 96       	adiw	r26, 0x15	; 21
     402:	5c 93       	st	X, r21
     404:	4e 93       	st	-X, r20
     406:	54 97       	sbiw	r26, 0x14	; 20
	inLeft.next = &inShLeft;
     408:	fa 01       	movw	r30, r20
     40a:	35 8b       	std	Z+21, r19	; 0x15
     40c:	24 8b       	std	Z+20, r18	; 0x14
	inShLeft.next = NULL;
     40e:	d9 01       	movw	r26, r18
     410:	55 96       	adiw	r26, 0x15	; 21
     412:	1c 92       	st	X, r1
     414:	1e 92       	st	-X, r1
     416:	54 97       	sbiw	r26, 0x14	; 20
	
	
	// DECLARATION OF V INPUT
	
	strcpy(delta_V.name, "delta_V");
     418:	28 e0       	ldi	r18, 0x08	; 8
     41a:	e6 e4       	ldi	r30, 0x46	; 70
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	aa 5a       	subi	r26, 0xAA	; 170
     420:	b1 09       	sbc	r27, r1
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	2a 95       	dec	r18
     428:	e1 f7       	brne	.-8      	; 0x422 <FLC_steering+0x358>

	//MFs
	struct mf_type small;
	strcpy(small.name, "small");
     42a:	2e 01       	movw	r4, r28
     42c:	b1 ee       	ldi	r27, 0xE1	; 225
     42e:	4b 0e       	add	r4, r27
     430:	51 1c       	adc	r5, r1
     432:	26 e0       	ldi	r18, 0x06	; 6
     434:	ee e4       	ldi	r30, 0x4E	; 78
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	d2 01       	movw	r26, r4
     43a:	01 90       	ld	r0, Z+
     43c:	0d 92       	st	X+, r0
     43e:	2a 95       	dec	r18
     440:	e1 f7       	brne	.-8      	; 0x43a <FLC_steering+0x370>
	small.value = 0;
     442:	f2 01       	movw	r30, r4
     444:	13 86       	std	Z+11, r1	; 0x0b
     446:	12 86       	std	Z+10, r1	; 0x0a
	small.point1 = -1;
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	3f ef       	ldi	r19, 0xFF	; 255
     44c:	35 87       	std	Z+13, r19	; 0x0d
     44e:	24 87       	std	Z+12, r18	; 0x0c
	small.point2= 30;
     450:	2e e1       	ldi	r18, 0x1E	; 30
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	37 87       	std	Z+15, r19	; 0x0f
     456:	26 87       	std	Z+14, r18	; 0x0e
	small.slope1 = 100;
     458:	71 8a       	std	Z+17, r7	; 0x11
     45a:	60 8a       	std	Z+16, r6	; 0x10
	small.slope2 = 5;
     45c:	45 e0       	ldi	r20, 0x05	; 5
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	53 8b       	std	Z+19, r21	; 0x13
     462:	42 8b       	std	Z+18, r20	; 0x12
	struct mf_type medium;
	strcpy(medium.name, "medium");
     464:	7e 01       	movw	r14, r28
     466:	f7 ef       	ldi	r31, 0xF7	; 247
     468:	ef 0e       	add	r14, r31
     46a:	f1 1c       	adc	r15, r1
     46c:	27 e0       	ldi	r18, 0x07	; 7
     46e:	e4 e5       	ldi	r30, 0x54	; 84
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	d7 01       	movw	r26, r14
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	2a 95       	dec	r18
     47a:	e1 f7       	brne	.-8      	; 0x474 <FLC_steering+0x3aa>
	medium.value = 0;
     47c:	d7 01       	movw	r26, r14
     47e:	1b 96       	adiw	r26, 0x0b	; 11
     480:	1c 92       	st	X, r1
     482:	1e 92       	st	-X, r1
     484:	1a 97       	sbiw	r26, 0x0a	; 10
	medium.point1 = 20;
     486:	24 e1       	ldi	r18, 0x14	; 20
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	1d 96       	adiw	r26, 0x0d	; 13
     48c:	3c 93       	st	X, r19
     48e:	2e 93       	st	-X, r18
     490:	1c 97       	sbiw	r26, 0x0c	; 12
	medium.point2= 60;
     492:	2c e3       	ldi	r18, 0x3C	; 60
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	1f 96       	adiw	r26, 0x0f	; 15
     498:	3c 93       	st	X, r19
     49a:	2e 93       	st	-X, r18
     49c:	1e 97       	sbiw	r26, 0x0e	; 14
	medium.slope1 = 5;
     49e:	51 96       	adiw	r26, 0x11	; 17
     4a0:	5c 93       	st	X, r21
     4a2:	4e 93       	st	-X, r20
     4a4:	50 97       	sbiw	r26, 0x10	; 16
	medium.slope2 = 5;
     4a6:	53 96       	adiw	r26, 0x13	; 19
     4a8:	5c 93       	st	X, r21
     4aa:	4e 93       	st	-X, r20
     4ac:	52 97       	sbiw	r26, 0x12	; 18
	struct mf_type high;
	strcpy(high.name, "high");
     4ae:	9e 01       	movw	r18, r28
     4b0:	23 5f       	subi	r18, 0xF3	; 243
     4b2:	3e 4f       	sbci	r19, 0xFE	; 254
     4b4:	65 e0       	ldi	r22, 0x05	; 5
     4b6:	eb e5       	ldi	r30, 0x5B	; 91
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	d9 01       	movw	r26, r18
     4bc:	01 90       	ld	r0, Z+
     4be:	0d 92       	st	X+, r0
     4c0:	6a 95       	dec	r22
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <FLC_steering+0x3f2>
	high.value = 0;
     4c4:	f9 01       	movw	r30, r18
     4c6:	13 86       	std	Z+11, r1	; 0x0b
     4c8:	12 86       	std	Z+10, r1	; 0x0a
	high.point1 = 50;
     4ca:	62 e3       	ldi	r22, 0x32	; 50
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	75 87       	std	Z+13, r23	; 0x0d
     4d0:	64 87       	std	Z+12, r22	; 0x0c
	high.point2= 81;
     4d2:	61 e5       	ldi	r22, 0x51	; 81
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	77 87       	std	Z+15, r23	; 0x0f
     4d8:	66 87       	std	Z+14, r22	; 0x0e
	high.slope1 = 5;
     4da:	51 8b       	std	Z+17, r21	; 0x11
     4dc:	40 8b       	std	Z+16, r20	; 0x10
	high.slope2 = 100;
     4de:	73 8a       	std	Z+19, r7	; 0x13
     4e0:	62 8a       	std	Z+18, r6	; 0x12

	delta_V.membership_functions = &small;
     4e2:	5e a6       	std	Y+46, r5	; 0x2e
     4e4:	4d a6       	std	Y+45, r4	; 0x2d
	small.next = &medium;
     4e6:	d2 01       	movw	r26, r4
     4e8:	55 96       	adiw	r26, 0x15	; 21
     4ea:	fc 92       	st	X, r15
     4ec:	ee 92       	st	-X, r14
     4ee:	54 97       	sbiw	r26, 0x14	; 20
	medium.next = &high;
     4f0:	f7 01       	movw	r30, r14
     4f2:	35 8b       	std	Z+21, r19	; 0x15
     4f4:	24 8b       	std	Z+20, r18	; 0x14
	high.next = NULL;
     4f6:	d9 01       	movw	r26, r18
     4f8:	55 96       	adiw	r26, 0x15	; 21
     4fa:	1c 92       	st	X, r1
     4fc:	1e 92       	st	-X, r1
     4fe:	54 97       	sbiw	r26, 0x14	; 20
	
	// DECLARATION OF STEERING SERVO OUTPUT

	struct io_type servo;
	strcpy(servo.name, "servo");
     500:	46 e0       	ldi	r20, 0x06	; 6
     502:	e0 e6       	ldi	r30, 0x60	; 96
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	56 96       	adiw	r26, 0x16	; 22
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	4a 95       	dec	r20
     50e:	e1 f7       	brne	.-8      	; 0x508 <FLC_steering+0x43e>

	struct mf_type oShLeft;
	strcpy(oShLeft.name, "oShLeft");
     510:	48 e0       	ldi	r20, 0x08	; 8
     512:	e6 e6       	ldi	r30, 0x66	; 102
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	de 01       	movw	r26, r28
     518:	ad 5c       	subi	r26, 0xCD	; 205
     51a:	be 4f       	sbci	r27, 0xFE	; 254
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	4a 95       	dec	r20
     522:	e1 f7       	brne	.-8      	; 0x51c <FLC_steering+0x452>
	oShLeft.value = 0;
     524:	c3 5c       	subi	r28, 0xC3	; 195
     526:	de 4f       	sbci	r29, 0xFE	; 254
     528:	19 82       	std	Y+1, r1	; 0x01
     52a:	18 82       	st	Y, r1
     52c:	cd 53       	subi	r28, 0x3D	; 61
     52e:	d1 40       	sbci	r29, 0x01	; 1
	oShLeft.point1 = 2950;
     530:	46 e8       	ldi	r20, 0x86	; 134
     532:	5b e0       	ldi	r21, 0x0B	; 11
     534:	c1 5c       	subi	r28, 0xC1	; 193
     536:	de 4f       	sbci	r29, 0xFE	; 254
     538:	59 83       	std	Y+1, r21	; 0x01
     53a:	48 83       	st	Y, r20
     53c:	cf 53       	subi	r28, 0x3F	; 63
     53e:	d1 40       	sbci	r29, 0x01	; 1
	oShLeft.point2 = 3061;
     540:	cf 5b       	subi	r28, 0xBF	; 191
     542:	de 4f       	sbci	r29, 0xFE	; 254
     544:	d9 82       	std	Y+1, r13	; 0x01
     546:	c8 82       	st	Y, r12
     548:	c1 54       	subi	r28, 0x41	; 65
     54a:	d1 40       	sbci	r29, 0x01	; 1
	oShLeft.slope1 = 1;
     54c:	cd 5b       	subi	r28, 0xBD	; 189
     54e:	de 4f       	sbci	r29, 0xFE	; 254
     550:	99 83       	std	Y+1, r25	; 0x01
     552:	88 83       	st	Y, r24
     554:	c3 54       	subi	r28, 0x43	; 67
     556:	d1 40       	sbci	r29, 0x01	; 1
	oShLeft.slope2 = 100;
     558:	cb 5b       	subi	r28, 0xBB	; 187
     55a:	de 4f       	sbci	r29, 0xFE	; 254
     55c:	79 82       	std	Y+1, r7	; 0x01
     55e:	68 82       	st	Y, r6
     560:	c5 54       	subi	r28, 0x45	; 69
     562:	d1 40       	sbci	r29, 0x01	; 1
	oShLeft.next = NULL;
     564:	c9 5b       	subi	r28, 0xB9	; 185
     566:	de 4f       	sbci	r29, 0xFE	; 254
     568:	19 82       	std	Y+1, r1	; 0x01
     56a:	18 82       	st	Y, r1
     56c:	c7 54       	subi	r28, 0x47	; 71
     56e:	d1 40       	sbci	r29, 0x01	; 1
	
	struct mf_type oLeft;
	strcpy(oLeft.name, "oLeft");
     570:	be 01       	movw	r22, r28
     572:	67 5b       	subi	r22, 0xB7	; 183
     574:	7e 4f       	sbci	r23, 0xFE	; 254
     576:	46 e0       	ldi	r20, 0x06	; 6
     578:	ee e6       	ldi	r30, 0x6E	; 110
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	db 01       	movw	r26, r22
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	4a 95       	dec	r20
     584:	e1 f7       	brne	.-8      	; 0x57e <FLC_steering+0x4b4>
	oLeft.value = 0;
     586:	fb 01       	movw	r30, r22
     588:	13 86       	std	Z+11, r1	; 0x0b
     58a:	12 86       	std	Z+10, r1	; 0x0a
	oLeft.point1 = 2840;
     58c:	b5 86       	std	Z+13, r11	; 0x0d
     58e:	a4 86       	std	Z+12, r10	; 0x0c
	oLeft.point2 = 3050;
     590:	4a ee       	ldi	r20, 0xEA	; 234
     592:	5b e0       	ldi	r21, 0x0B	; 11
     594:	57 87       	std	Z+15, r21	; 0x0f
     596:	46 87       	std	Z+14, r20	; 0x0e
	oLeft.slope1 = 1;
     598:	91 8b       	std	Z+17, r25	; 0x11
     59a:	80 8b       	std	Z+16, r24	; 0x10
	oLeft.slope2 = 1;
     59c:	93 8b       	std	Z+19, r25	; 0x13
     59e:	82 8b       	std	Z+18, r24	; 0x12
	oLeft.next = &oShLeft;
     5a0:	43 e3       	ldi	r20, 0x33	; 51
     5a2:	51 e0       	ldi	r21, 0x01	; 1
     5a4:	4c 0f       	add	r20, r28
     5a6:	5d 1f       	adc	r21, r29
     5a8:	55 8b       	std	Z+21, r21	; 0x15
     5aa:	44 8b       	std	Z+20, r20	; 0x14
	
	
	struct mf_type oSlLeft;
	strcpy(oSlLeft.name, "oSlLeft");
     5ac:	44 5d       	subi	r20, 0xD4	; 212
     5ae:	5f 4f       	sbci	r21, 0xFF	; 255
     5b0:	18 e0       	ldi	r17, 0x08	; 8
     5b2:	e4 e7       	ldi	r30, 0x74	; 116
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	da 01       	movw	r26, r20
     5b8:	01 90       	ld	r0, Z+
     5ba:	0d 92       	st	X+, r0
     5bc:	1a 95       	dec	r17
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <FLC_steering+0x4ee>
	oSlLeft.value = 0;
     5c0:	da 01       	movw	r26, r20
     5c2:	1b 96       	adiw	r26, 0x0b	; 11
     5c4:	1c 92       	st	X, r1
     5c6:	1e 92       	st	-X, r1
     5c8:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlLeft.point1 = 2670;
     5ca:	ee e6       	ldi	r30, 0x6E	; 110
     5cc:	fa e0       	ldi	r31, 0x0A	; 10
     5ce:	1d 96       	adiw	r26, 0x0d	; 13
     5d0:	fc 93       	st	X, r31
     5d2:	ee 93       	st	-X, r30
     5d4:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlLeft.point2 = 2920;
     5d6:	1f 96       	adiw	r26, 0x0f	; 15
     5d8:	9c 92       	st	X, r9
     5da:	8e 92       	st	-X, r8
     5dc:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlLeft.slope1 = 1;
     5de:	51 96       	adiw	r26, 0x11	; 17
     5e0:	9c 93       	st	X, r25
     5e2:	8e 93       	st	-X, r24
     5e4:	50 97       	sbiw	r26, 0x10	; 16
	oSlLeft.slope2 = 1;
     5e6:	53 96       	adiw	r26, 0x13	; 19
     5e8:	9c 93       	st	X, r25
     5ea:	8e 93       	st	-X, r24
     5ec:	52 97       	sbiw	r26, 0x12	; 18
	oSlLeft.next = &oLeft;
     5ee:	55 96       	adiw	r26, 0x15	; 21
     5f0:	7c 93       	st	X, r23
     5f2:	6e 93       	st	-X, r22
     5f4:	54 97       	sbiw	r26, 0x14	; 20
	
	
	struct mf_type oStraight;
	strcpy(oStraight.name, "oStraight");
     5f6:	4e 01       	movw	r8, r28
     5f8:	bb e8       	ldi	r27, 0x8B	; 139
     5fa:	8b 1a       	sub	r8, r27
     5fc:	be ef       	ldi	r27, 0xFE	; 254
     5fe:	9b 0a       	sbc	r9, r27
     600:	6a e0       	ldi	r22, 0x0A	; 10
     602:	ef e9       	ldi	r30, 0x9F	; 159
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	d4 01       	movw	r26, r8
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	6a 95       	dec	r22
     60e:	e1 f7       	brne	.-8      	; 0x608 <FLC_steering+0x53e>
	oStraight.value = 0;
     610:	f4 01       	movw	r30, r8
     612:	13 86       	std	Z+11, r1	; 0x0b
     614:	12 86       	std	Z+10, r1	; 0x0a
	oStraight.point1 = 2540;
     616:	6c ee       	ldi	r22, 0xEC	; 236
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	75 87       	std	Z+13, r23	; 0x0d
     61c:	64 87       	std	Z+12, r22	; 0x0c
	oStraight.point2 = 2780;
     61e:	6c ed       	ldi	r22, 0xDC	; 220
     620:	7a e0       	ldi	r23, 0x0A	; 10
     622:	77 87       	std	Z+15, r23	; 0x0f
     624:	66 87       	std	Z+14, r22	; 0x0e
	oStraight.slope1 = 1;
     626:	91 8b       	std	Z+17, r25	; 0x11
     628:	80 8b       	std	Z+16, r24	; 0x10
	oStraight.slope2 = 1;
     62a:	93 8b       	std	Z+19, r25	; 0x13
     62c:	82 8b       	std	Z+18, r24	; 0x12
	oStraight.next = &oSlLeft;
     62e:	55 8b       	std	Z+21, r21	; 0x15
     630:	44 8b       	std	Z+20, r20	; 0x14
	
	struct mf_type oSlRight;
	strcpy(oSlRight.name, "oSlRight");
     632:	5e 01       	movw	r10, r28
     634:	f5 e7       	ldi	r31, 0x75	; 117
     636:	af 1a       	sub	r10, r31
     638:	fe ef       	ldi	r31, 0xFE	; 254
     63a:	bf 0a       	sbc	r11, r31
     63c:	69 e0       	ldi	r22, 0x09	; 9
     63e:	ec e7       	ldi	r30, 0x7C	; 124
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	d5 01       	movw	r26, r10
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	6a 95       	dec	r22
     64a:	e1 f7       	brne	.-8      	; 0x644 <FLC_steering+0x57a>
	oSlRight.value = 0;
     64c:	d5 01       	movw	r26, r10
     64e:	1b 96       	adiw	r26, 0x0b	; 11
     650:	1c 92       	st	X, r1
     652:	1e 92       	st	-X, r1
     654:	1a 97       	sbiw	r26, 0x0a	; 10
	oSlRight.point1 = 2400;
     656:	e0 e6       	ldi	r30, 0x60	; 96
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	1d 96       	adiw	r26, 0x0d	; 13
     65c:	fc 93       	st	X, r31
     65e:	ee 93       	st	-X, r30
     660:	1c 97       	sbiw	r26, 0x0c	; 12
	oSlRight.point2 = 2650;
     662:	6a e5       	ldi	r22, 0x5A	; 90
     664:	7a e0       	ldi	r23, 0x0A	; 10
     666:	1f 96       	adiw	r26, 0x0f	; 15
     668:	7c 93       	st	X, r23
     66a:	6e 93       	st	-X, r22
     66c:	1e 97       	sbiw	r26, 0x0e	; 14
	oSlRight.slope1 = 1;
     66e:	51 96       	adiw	r26, 0x11	; 17
     670:	9c 93       	st	X, r25
     672:	8e 93       	st	-X, r24
     674:	50 97       	sbiw	r26, 0x10	; 16
	oSlRight.slope2 = 1;
     676:	53 96       	adiw	r26, 0x13	; 19
     678:	9c 93       	st	X, r25
     67a:	8e 93       	st	-X, r24
     67c:	52 97       	sbiw	r26, 0x12	; 18
	oSlRight.next = &oStraight;
     67e:	55 96       	adiw	r26, 0x15	; 21
     680:	9c 92       	st	X, r9
     682:	8e 92       	st	-X, r8
     684:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oRight;
	strcpy(oRight.name, "oRight");
     686:	be 01       	movw	r22, r28
     688:	6f 55       	subi	r22, 0x5F	; 95
     68a:	7e 4f       	sbci	r23, 0xFE	; 254
     68c:	17 e0       	ldi	r17, 0x07	; 7
     68e:	e5 e8       	ldi	r30, 0x85	; 133
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	db 01       	movw	r26, r22
     694:	01 90       	ld	r0, Z+
     696:	0d 92       	st	X+, r0
     698:	1a 95       	dec	r17
     69a:	e1 f7       	brne	.-8      	; 0x694 <FLC_steering+0x5ca>
	oRight.value = 0;
     69c:	db 01       	movw	r26, r22
     69e:	1b 96       	adiw	r26, 0x0b	; 11
     6a0:	1c 92       	st	X, r1
     6a2:	1e 92       	st	-X, r1
     6a4:	1a 97       	sbiw	r26, 0x0a	; 10
	oRight.point1 = 2270;
     6a6:	ee ed       	ldi	r30, 0xDE	; 222
     6a8:	f8 e0       	ldi	r31, 0x08	; 8
     6aa:	1d 96       	adiw	r26, 0x0d	; 13
     6ac:	fc 93       	st	X, r31
     6ae:	ee 93       	st	-X, r30
     6b0:	1c 97       	sbiw	r26, 0x0c	; 12
	oRight.point2 = 2480;
     6b2:	e0 eb       	ldi	r30, 0xB0	; 176
     6b4:	f9 e0       	ldi	r31, 0x09	; 9
     6b6:	1f 96       	adiw	r26, 0x0f	; 15
     6b8:	fc 93       	st	X, r31
     6ba:	ee 93       	st	-X, r30
     6bc:	1e 97       	sbiw	r26, 0x0e	; 14
	oRight.slope1 = 1;
     6be:	51 96       	adiw	r26, 0x11	; 17
     6c0:	9c 93       	st	X, r25
     6c2:	8e 93       	st	-X, r24
     6c4:	50 97       	sbiw	r26, 0x10	; 16
	oRight.slope2 = 1;
     6c6:	53 96       	adiw	r26, 0x13	; 19
     6c8:	9c 93       	st	X, r25
     6ca:	8e 93       	st	-X, r24
     6cc:	52 97       	sbiw	r26, 0x12	; 18
	oRight.next = &oSlRight;
     6ce:	55 96       	adiw	r26, 0x15	; 21
     6d0:	bc 92       	st	X, r11
     6d2:	ae 92       	st	-X, r10
     6d4:	54 97       	sbiw	r26, 0x14	; 20
	
	struct mf_type oShright;
	strcpy(oShright.name, "oShright");
     6d6:	6e 01       	movw	r12, r28
     6d8:	f9 e4       	ldi	r31, 0x49	; 73
     6da:	cf 1a       	sub	r12, r31
     6dc:	fe ef       	ldi	r31, 0xFE	; 254
     6de:	df 0a       	sbc	r13, r31
     6e0:	19 e0       	ldi	r17, 0x09	; 9
     6e2:	ec e8       	ldi	r30, 0x8C	; 140
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	d6 01       	movw	r26, r12
     6e8:	01 90       	ld	r0, Z+
     6ea:	0d 92       	st	X+, r0
     6ec:	1a 95       	dec	r17
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <FLC_steering+0x61e>
	oShright.value = 0;
     6f0:	d6 01       	movw	r26, r12
     6f2:	1b 96       	adiw	r26, 0x0b	; 11
     6f4:	1c 92       	st	X, r1
     6f6:	1e 92       	st	-X, r1
     6f8:	1a 97       	sbiw	r26, 0x0a	; 10
	oShright.point1 = 2259;
     6fa:	e3 ed       	ldi	r30, 0xD3	; 211
     6fc:	f8 e0       	ldi	r31, 0x08	; 8
     6fe:	1d 96       	adiw	r26, 0x0d	; 13
     700:	fc 93       	st	X, r31
     702:	ee 93       	st	-X, r30
     704:	1c 97       	sbiw	r26, 0x0c	; 12
	oShright.point2 = 2370;
     706:	e2 e4       	ldi	r30, 0x42	; 66
     708:	f9 e0       	ldi	r31, 0x09	; 9
     70a:	1f 96       	adiw	r26, 0x0f	; 15
     70c:	fc 93       	st	X, r31
     70e:	ee 93       	st	-X, r30
     710:	1e 97       	sbiw	r26, 0x0e	; 14
	oShright.slope1 = 100;
     712:	51 96       	adiw	r26, 0x11	; 17
     714:	7c 92       	st	X, r7
     716:	6e 92       	st	-X, r6
     718:	50 97       	sbiw	r26, 0x10	; 16
	oShright.slope2 = 1;
     71a:	53 96       	adiw	r26, 0x13	; 19
     71c:	9c 93       	st	X, r25
     71e:	8e 93       	st	-X, r24
     720:	52 97       	sbiw	r26, 0x12	; 18
	oShright.next = &oRight;
     722:	55 96       	adiw	r26, 0x15	; 21
     724:	7c 93       	st	X, r23
     726:	6e 93       	st	-X, r22
     728:	54 97       	sbiw	r26, 0x14	; 20
	
	servo.membership_functions = &oShright;
     72a:	c1 5d       	subi	r28, 0xD1	; 209
     72c:	de 4f       	sbci	r29, 0xFE	; 254
     72e:	d9 82       	std	Y+1, r13	; 0x01
     730:	c8 82       	st	Y, r12
     732:	cf 52       	subi	r28, 0x2F	; 47
     734:	d1 40       	sbci	r29, 0x01	; 1
	servo.next = NULL;
     736:	cf 5c       	subi	r28, 0xCF	; 207
     738:	de 4f       	sbci	r29, 0xFE	; 254
     73a:	19 82       	std	Y+1, r1	; 0x01
     73c:	18 82       	st	Y, r1
     73e:	c1 53       	subi	r28, 0x31	; 49
     740:	d1 40       	sbci	r29, 0x01	; 1
	*/

	
	/* rule # 9: if C is zero and V is high then servo is slightLeft */
		struct rule_element_type then9;
		then9.value = &oSlLeft.value;
     742:	ce 01       	movw	r24, r28
     744:	83 53       	subi	r24, 0x33	; 51
     746:	9e 4f       	sbci	r25, 0xFE	; 254
     748:	3a 01       	movw	r6, r20
     74a:	fa e0       	ldi	r31, 0x0A	; 10
     74c:	6f 0e       	add	r6, r31
     74e:	71 1c       	adc	r7, r1
     750:	dc 01       	movw	r26, r24
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	7c 92       	st	X, r7
     756:	6e 92       	st	-X, r6
		then9.next = NULL;
     758:	13 96       	adiw	r26, 0x03	; 3
     75a:	1c 92       	st	X, r1
     75c:	1e 92       	st	-X, r1
     75e:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if92;
		if92.value = &high.value;
     760:	fe 01       	movw	r30, r28
     762:	ef 52       	subi	r30, 0x2F	; 47
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	26 5f       	subi	r18, 0xF6	; 246
     768:	3f 4f       	sbci	r19, 0xFF	; 255
     76a:	31 83       	std	Z+1, r19	; 0x01
     76c:	20 83       	st	Z, r18
		if92.next = NULL;
     76e:	13 82       	std	Z+3, r1	; 0x03
     770:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if91;
		if91.value = &zer.value;
     772:	18 96       	adiw	r26, 0x08	; 8
     774:	67 e4       	ldi	r22, 0x47	; 71
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	6c 0f       	add	r22, r28
     77a:	7d 1f       	adc	r23, r29
     77c:	66 5f       	subi	r22, 0xF6	; 246
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	11 96       	adiw	r26, 0x01	; 1
     782:	7c 93       	st	X, r23
     784:	6e 93       	st	-X, r22
		if91.next = &if92;
     786:	13 96       	adiw	r26, 0x03	; 3
     788:	fc 93       	st	X, r31
     78a:	ee 93       	st	-X, r30
     78c:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule9;
		rule9.if_side = &if91;
     78e:	38 96       	adiw	r30, 0x08	; 8
     790:	b1 83       	std	Z+1, r27	; 0x01
     792:	a0 83       	st	Z, r26
		rule9.then_side = &then9;
     794:	93 83       	std	Z+3, r25	; 0x03
     796:	82 83       	std	Z+2, r24	; 0x02
		rule9.next = NULL;
     798:	15 82       	std	Z+5, r1	; 0x05
     79a:	14 82       	std	Z+4, r1	; 0x04
		
		/* rule # 8: if positive and V is high then servo is slightRight */
		struct rule_element_type then8;
		then8.value = &oSlRight.value;
     79c:	42 96       	adiw	r24, 0x12	; 18
     79e:	ba e0       	ldi	r27, 0x0A	; 10
     7a0:	ab 0e       	add	r10, r27
     7a2:	b1 1c       	adc	r11, r1
     7a4:	dc 01       	movw	r26, r24
     7a6:	11 96       	adiw	r26, 0x01	; 1
     7a8:	bc 92       	st	X, r11
     7aa:	ae 92       	st	-X, r10
		then8.next = NULL;
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	1c 92       	st	X, r1
     7b0:	1e 92       	st	-X, r1
     7b2:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if82;
		if82.value = &high.value;
     7b4:	4c 57       	subi	r20, 0x7C	; 124
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	da 01       	movw	r26, r20
     7ba:	11 96       	adiw	r26, 0x01	; 1
     7bc:	3c 93       	st	X, r19
     7be:	2e 93       	st	-X, r18
		if82.next = NULL;
     7c0:	13 96       	adiw	r26, 0x03	; 3
     7c2:	1c 92       	st	X, r1
     7c4:	1e 92       	st	-X, r1
     7c6:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if81;
		if81.value = &positive.value;
     7c8:	8e 01       	movw	r16, r28
     7ca:	09 51       	subi	r16, 0x19	; 25
     7cc:	1e 4f       	sbci	r17, 0xFE	; 254
     7ce:	20 5b       	subi	r18, 0xB0	; 176
     7d0:	31 09       	sbc	r19, r1
     7d2:	d8 01       	movw	r26, r16
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	3c 93       	st	X, r19
     7d8:	2e 93       	st	-X, r18
		if81.next = &if82;
     7da:	13 96       	adiw	r26, 0x03	; 3
     7dc:	5c 93       	st	X, r21
     7de:	4e 93       	st	-X, r20
     7e0:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule8;
		rule8.if_side = &if81;
     7e2:	14 96       	adiw	r26, 0x04	; 4
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	1c 93       	st	X, r17
     7e8:	0e 93       	st	-X, r16
		rule8.then_side = &then8;
     7ea:	13 96       	adiw	r26, 0x03	; 3
     7ec:	9c 93       	st	X, r25
     7ee:	8e 93       	st	-X, r24
     7f0:	12 97       	sbiw	r26, 0x02	; 2
		rule8.next = &rule9;
     7f2:	15 96       	adiw	r26, 0x05	; 5
     7f4:	fc 93       	st	X, r31
     7f6:	ee 93       	st	-X, r30
     7f8:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 7: if C is positive and V is medium then servo is sharpRight */
		struct rule_element_type then7;
		then7.value = &oShright.value;
     7fa:	06 5f       	subi	r16, 0xF6	; 246
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	ea e0       	ldi	r30, 0x0A	; 10
     800:	ce 0e       	add	r12, r30
     802:	d1 1c       	adc	r13, r1
     804:	f8 01       	movw	r30, r16
     806:	d1 82       	std	Z+1, r13	; 0x01
     808:	c0 82       	st	Z, r12
		then7.next = NULL;
     80a:	13 82       	std	Z+3, r1	; 0x03
     80c:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if72;
		if72.value = &medium.value;
     80e:	1e 01       	movw	r2, r28
     810:	fb e0       	ldi	r31, 0x0B	; 11
     812:	2f 1a       	sub	r2, r31
     814:	fe ef       	ldi	r31, 0xFE	; 254
     816:	3f 0a       	sbc	r3, r31
     818:	8e 5d       	subi	r24, 0xDE	; 222
     81a:	91 09       	sbc	r25, r1
     81c:	f1 01       	movw	r30, r2
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	80 83       	st	Z, r24
		if72.next = NULL;
     822:	13 82       	std	Z+3, r1	; 0x03
     824:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if71;
		if71.value = &positive.value;
     826:	7e 01       	movw	r14, r28
     828:	f7 e0       	ldi	r31, 0x07	; 7
     82a:	ef 1a       	sub	r14, r31
     82c:	fe ef       	ldi	r31, 0xFE	; 254
     82e:	ff 0a       	sbc	r15, r31
     830:	f7 01       	movw	r30, r14
     832:	31 83       	std	Z+1, r19	; 0x01
     834:	20 83       	st	Z, r18
		if71.next = &if72;
     836:	33 82       	std	Z+3, r3	; 0x03
     838:	22 82       	std	Z+2, r2	; 0x02
		
		struct rule_type rule7;
		rule7.if_side = &if71;
     83a:	34 96       	adiw	r30, 0x04	; 4
     83c:	f1 82       	std	Z+1, r15	; 0x01
     83e:	e0 82       	st	Z, r14
		rule7.then_side = &then7;
     840:	13 83       	std	Z+3, r17	; 0x03
     842:	02 83       	std	Z+2, r16	; 0x02
		rule7.next = &rule8;
     844:	b5 83       	std	Z+5, r27	; 0x05
     846:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 6: if C is positive and V is medium then servo is sharpRight */
		struct rule_element_type then6;
		then6.value = &oShright.value;
     848:	0e 5e       	subi	r16, 0xEE	; 238
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
     84c:	d8 01       	movw	r26, r16
     84e:	11 96       	adiw	r26, 0x01	; 1
     850:	dc 92       	st	X, r13
     852:	ce 92       	st	-X, r12
		then6.next = NULL;
     854:	13 96       	adiw	r26, 0x03	; 3
     856:	1c 92       	st	X, r1
     858:	1e 92       	st	-X, r1
     85a:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if62;
		if62.value = &medium.value;
     85c:	6e 01       	movw	r12, r28
     85e:	b9 ef       	ldi	r27, 0xF9	; 249
     860:	cb 1a       	sub	r12, r27
     862:	bd ef       	ldi	r27, 0xFD	; 253
     864:	db 0a       	sbc	r13, r27
     866:	d6 01       	movw	r26, r12
     868:	11 96       	adiw	r26, 0x01	; 1
     86a:	9c 93       	st	X, r25
     86c:	8e 93       	st	-X, r24
		if62.next = NULL;
     86e:	13 96       	adiw	r26, 0x03	; 3
     870:	1c 92       	st	X, r1
     872:	1e 92       	st	-X, r1
     874:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if61;
		if61.value = &positive.value;
     876:	7e 01       	movw	r14, r28
     878:	b5 ef       	ldi	r27, 0xF5	; 245
     87a:	eb 1a       	sub	r14, r27
     87c:	bd ef       	ldi	r27, 0xFD	; 253
     87e:	fb 0a       	sbc	r15, r27
     880:	d7 01       	movw	r26, r14
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	3c 93       	st	X, r19
     886:	2e 93       	st	-X, r18
		if61.next = &if62;
     888:	13 96       	adiw	r26, 0x03	; 3
     88a:	dc 92       	st	X, r13
     88c:	ce 92       	st	-X, r12
     88e:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule6;
		rule6.if_side = &if61;
     890:	14 96       	adiw	r26, 0x04	; 4
     892:	11 96       	adiw	r26, 0x01	; 1
     894:	fc 92       	st	X, r15
     896:	ee 92       	st	-X, r14
		rule6.then_side = &then6;
     898:	13 96       	adiw	r26, 0x03	; 3
     89a:	1c 93       	st	X, r17
     89c:	0e 93       	st	-X, r16
     89e:	12 97       	sbiw	r26, 0x02	; 2
		rule6.next = &rule7;
     8a0:	15 96       	adiw	r26, 0x05	; 5
     8a2:	fc 93       	st	X, r31
     8a4:	ee 93       	st	-X, r30
     8a6:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 5: if C is negative and V is medium then servo is sharpLeft */
		struct rule_element_type then5;
		then5.value = &oShLeft.value;
     8a8:	0e 5e       	subi	r16, 0xEE	; 238
     8aa:	1f 4f       	sbci	r17, 0xFF	; 255
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f3 e3       	ldi	r31, 0x33	; 51
     8b0:	ef 2e       	mov	r14, r31
     8b2:	ff 24       	eor	r15, r15
     8b4:	f3 94       	inc	r15
     8b6:	f0 2d       	mov	r31, r0
     8b8:	ec 0e       	add	r14, r28
     8ba:	fd 1e       	adc	r15, r29
     8bc:	ea e0       	ldi	r30, 0x0A	; 10
     8be:	ee 0e       	add	r14, r30
     8c0:	f1 1c       	adc	r15, r1
     8c2:	f8 01       	movw	r30, r16
     8c4:	f1 82       	std	Z+1, r15	; 0x01
     8c6:	e0 82       	st	Z, r14
		then5.next = NULL;
     8c8:	13 82       	std	Z+3, r1	; 0x03
     8ca:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if52;
		if52.value = &medium.value;
     8cc:	4a 5c       	subi	r20, 0xCA	; 202
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	fa 01       	movw	r30, r20
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
		if52.next = NULL;
     8d6:	13 82       	std	Z+3, r1	; 0x03
     8d8:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if51;
		if51.value = &negative.value;
     8da:	6e 01       	movw	r12, r28
     8dc:	f3 ee       	ldi	r31, 0xE3	; 227
     8de:	cf 1a       	sub	r12, r31
     8e0:	fd ef       	ldi	r31, 0xFD	; 253
     8e2:	df 0a       	sbc	r13, r31
     8e4:	2c 52       	subi	r18, 0x2C	; 44
     8e6:	31 09       	sbc	r19, r1
     8e8:	f6 01       	movw	r30, r12
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		if51.next = &if52;
     8ee:	53 83       	std	Z+3, r21	; 0x03
     8f0:	42 83       	std	Z+2, r20	; 0x02
		
		struct rule_type rule5;
		rule5.if_side = &if51;
     8f2:	34 96       	adiw	r30, 0x04	; 4
     8f4:	d1 82       	std	Z+1, r13	; 0x01
     8f6:	c0 82       	st	Z, r12
		rule5.then_side = &then5;
     8f8:	13 83       	std	Z+3, r17	; 0x03
     8fa:	02 83       	std	Z+2, r16	; 0x02
		rule5.next = &rule6;
     8fc:	b5 83       	std	Z+5, r27	; 0x05
     8fe:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 4: if C is zero and V is medium then servo is straight */
		struct rule_element_type then4;
		then4.value = &oStraight.value;
     900:	1e 01       	movw	r2, r28
     902:	49 ed       	ldi	r20, 0xD9	; 217
     904:	24 1a       	sub	r2, r20
     906:	4d ef       	ldi	r20, 0xFD	; 253
     908:	34 0a       	sbc	r3, r20
     90a:	5a e0       	ldi	r21, 0x0A	; 10
     90c:	85 0e       	add	r8, r21
     90e:	91 1c       	adc	r9, r1
     910:	d1 01       	movw	r26, r2
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	9c 92       	st	X, r9
     916:	8e 92       	st	-X, r8
		then4.next = NULL;
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	1c 92       	st	X, r1
     91c:	1e 92       	st	-X, r1
     91e:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if42;
		if42.value = &medium.value;
     920:	6e 01       	movw	r12, r28
     922:	b5 ed       	ldi	r27, 0xD5	; 213
     924:	cb 1a       	sub	r12, r27
     926:	bd ef       	ldi	r27, 0xFD	; 253
     928:	db 0a       	sbc	r13, r27
     92a:	d6 01       	movw	r26, r12
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
		if42.next = NULL;
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	1c 92       	st	X, r1
     936:	1e 92       	st	-X, r1
     938:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if41;
		if41.value = &zer.value;
     93a:	06 5e       	subi	r16, 0xE6	; 230
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
     93e:	d8 01       	movw	r26, r16
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	7c 93       	st	X, r23
     944:	6e 93       	st	-X, r22
		if41.next = &if42;
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	dc 92       	st	X, r13
     94a:	ce 92       	st	-X, r12
     94c:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_type rule4;
		rule4.if_side = &if41;
     94e:	6e 51       	subi	r22, 0x1E	; 30
     950:	7e 4f       	sbci	r23, 0xFE	; 254
     952:	db 01       	movw	r26, r22
     954:	11 96       	adiw	r26, 0x01	; 1
     956:	1c 93       	st	X, r17
     958:	0e 93       	st	-X, r16
		rule4.then_side = &then4;
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	3c 92       	st	X, r3
     95e:	2e 92       	st	-X, r2
     960:	12 97       	sbiw	r26, 0x02	; 2
		rule4.next = &rule5;
     962:	15 96       	adiw	r26, 0x05	; 5
     964:	fc 93       	st	X, r31
     966:	ee 93       	st	-X, r30
     968:	14 97       	sbiw	r26, 0x04	; 4
		
		
		/* rule # 3: if C is negative and V is medium then servo is sharpLeft */
		struct rule_element_type then3;
		then3.value = &oShLeft.value;
     96a:	ae 01       	movw	r20, r28
     96c:	47 5c       	subi	r20, 0xC7	; 199
     96e:	5d 4f       	sbci	r21, 0xFD	; 253
     970:	fa 01       	movw	r30, r20
     972:	f1 82       	std	Z+1, r15	; 0x01
     974:	e0 82       	st	Z, r14
		then3.next = NULL;
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if32;
		if32.value = &medium.value;
     97a:	1a 96       	adiw	r26, 0x0a	; 10
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
		if32.next = NULL;
     982:	13 96       	adiw	r26, 0x03	; 3
     984:	1c 92       	st	X, r1
     986:	1e 92       	st	-X, r1
     988:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if31;
		if31.value = &negative.value;
     98a:	80 5c       	subi	r24, 0xC0	; 192
     98c:	9e 4f       	sbci	r25, 0xFE	; 254
     98e:	fc 01       	movw	r30, r24
     990:	31 83       	std	Z+1, r19	; 0x01
     992:	20 83       	st	Z, r18
		if31.next = &if32;
     994:	b3 83       	std	Z+3, r27	; 0x03
     996:	a2 83       	std	Z+2, r26	; 0x02
		
		struct rule_type rule3;
		rule3.if_side = &if31;
     998:	18 96       	adiw	r26, 0x08	; 8
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	9c 93       	st	X, r25
     99e:	8e 93       	st	-X, r24
		rule3.then_side = &then3;
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	5c 93       	st	X, r21
     9a4:	4e 93       	st	-X, r20
     9a6:	12 97       	sbiw	r26, 0x02	; 2
		rule3.next = &rule4;
     9a8:	15 96       	adiw	r26, 0x05	; 5
     9aa:	7c 93       	st	X, r23
     9ac:	6e 93       	st	-X, r22
     9ae:	14 97       	sbiw	r26, 0x04	; 4
		
		/* rule # 2: if C is negative and V is small then servo is slightLeft */
		struct rule_element_type then2;
		then2.value = &oSlLeft.value;
     9b0:	68 5e       	subi	r22, 0xE8	; 232
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	fb 01       	movw	r30, r22
     9b6:	71 82       	std	Z+1, r7	; 0x01
     9b8:	60 82       	st	Z, r6
		then2.next = NULL;
     9ba:	13 82       	std	Z+3, r1	; 0x03
     9bc:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if22;
		if22.value = &small.value;
     9be:	4a 5e       	subi	r20, 0xEA	; 234
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
     9c2:	fa e0       	ldi	r31, 0x0A	; 10
     9c4:	4f 0e       	add	r4, r31
     9c6:	51 1c       	adc	r5, r1
     9c8:	fa 01       	movw	r30, r20
     9ca:	51 82       	std	Z+1, r5	; 0x01
     9cc:	40 82       	st	Z, r4
		if22.next = NULL;
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if21;
		if21.value = &negative.value;
     9d2:	42 96       	adiw	r24, 0x12	; 18
     9d4:	fc 01       	movw	r30, r24
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	20 83       	st	Z, r18
		if21.next = &if22;
     9da:	53 83       	std	Z+3, r21	; 0x03
     9dc:	42 83       	std	Z+2, r20	; 0x02
		
		struct rule_type rule2;
		rule2.if_side = &if21;
     9de:	48 5f       	subi	r20, 0xF8	; 248
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	fa 01       	movw	r30, r20
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
		rule2.then_side = &then2;
     9e8:	73 83       	std	Z+3, r23	; 0x03
     9ea:	62 83       	std	Z+2, r22	; 0x02
		rule2.next = &rule3;
     9ec:	b5 83       	std	Z+5, r27	; 0x05
     9ee:	a4 83       	std	Z+4, r26	; 0x04
		
		/* rule # 1: if C is zero and V is small then servo is slightRight */
		struct rule_element_type then1;
		then1.value = &oSlRight.value;
     9f0:	58 96       	adiw	r26, 0x18	; 24
     9f2:	11 96       	adiw	r26, 0x01	; 1
     9f4:	bc 92       	st	X, r11
     9f6:	ae 92       	st	-X, r10
		then1.next = NULL;
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	1c 92       	st	X, r1
     9fc:	1e 92       	st	-X, r1
     9fe:	12 97       	sbiw	r26, 0x02	; 2
		
		struct rule_element_type if12;
		if12.value = &small.value;
     a00:	6a 5e       	subi	r22, 0xEA	; 234
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	fb 01       	movw	r30, r22
     a06:	51 82       	std	Z+1, r5	; 0x01
     a08:	40 82       	st	Z, r4
		if12.next = NULL;
     a0a:	13 82       	std	Z+3, r1	; 0x03
     a0c:	12 82       	std	Z+2, r1	; 0x02
		
		struct rule_element_type if11;
		if11.value = &negative.value;
     a0e:	42 96       	adiw	r24, 0x12	; 18
     a10:	fc 01       	movw	r30, r24
     a12:	31 83       	std	Z+1, r19	; 0x01
     a14:	20 83       	st	Z, r18
		if11.next = &if12;
     a16:	73 83       	std	Z+3, r23	; 0x03
     a18:	62 83       	std	Z+2, r22	; 0x02
		
		struct rule_type rule1;
		rule1.if_side = &if11;
     a1a:	34 96       	adiw	r30, 0x04	; 4
     a1c:	91 83       	std	Z+1, r25	; 0x01
     a1e:	80 83       	st	Z, r24
		rule1.then_side = &then1;
     a20:	b3 83       	std	Z+3, r27	; 0x03
     a22:	a2 83       	std	Z+2, r26	; 0x02
		rule1.next = &rule2;
     a24:	55 83       	std	Z+5, r21	; 0x05
     a26:	44 83       	std	Z+4, r20	; 0x04


	
	// pointers to top of lists
	Rule_Base = &rule1;
     a28:	f0 93 3e 02 	sts	0x023E, r31
     a2c:	e0 93 3d 02 	sts	0x023D, r30
	System_Inputs = &delta_C;
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	2c 0f       	add	r18, r28
     a36:	3d 1f       	adc	r19, r29
     a38:	30 93 3c 02 	sts	0x023C, r19
     a3c:	20 93 3b 02 	sts	0x023B, r18
	System_Outputs = &servo;
     a40:	43 e2       	ldi	r20, 0x23	; 35
     a42:	51 e0       	ldi	r21, 0x01	; 1
     a44:	4c 0f       	add	r20, r28
     a46:	5d 1f       	adc	r21, r29
     a48:	50 93 3a 02 	sts	0x023A, r21
     a4c:	40 93 39 02 	sts	0x0239, r20
	
	// the methods performing the FLC
	fuzzification();
     a50:	85 d0       	rcall	.+266    	; 0xb5c <fuzzification>
	rule_evaluation();
     a52:	ab d0       	rcall	.+342    	; 0xbaa <rule_evaluation>
	defuzzification();
     a54:	f0 d0       	rcall	.+480    	; 0xc36 <defuzzification>
	setServo(servo.value);
     a56:	c3 5d       	subi	r28, 0xD3	; 211
     a58:	de 4f       	sbci	r29, 0xFE	; 254
     a5a:	88 81       	ld	r24, Y
     a5c:	99 81       	ldd	r25, Y+1	; 0x01
     a5e:	cd 52       	subi	r28, 0x2D	; 45
     a60:	d1 40       	sbci	r29, 0x01	; 1
     a62:	81 d2       	rcall	.+1282   	; 0xf66 <setServo>
}
     a64:	c2 59       	subi	r28, 0x92	; 146
     a66:	dd 4f       	sbci	r29, 0xFD	; 253
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	9f 90       	pop	r9
     a88:	8f 90       	pop	r8
     a8a:	7f 90       	pop	r7
     a8c:	6f 90       	pop	r6
     a8e:	5f 90       	pop	r5
     a90:	4f 90       	pop	r4
     a92:	3f 90       	pop	r3
     a94:	2f 90       	pop	r2
     a96:	08 95       	ret

00000a98 <compute_degree_of_membership>:
 *
 */
void compute_degree_of_membership(mf,input)
struct mf_type *mf;
int input;
{
     a98:	fc 01       	movw	r30, r24
    int delta_1;
    int delta_2;
    delta_1 = input - mf->point1;
     a9a:	84 85       	ldd	r24, Z+12	; 0x0c
     a9c:	95 85       	ldd	r25, Z+13	; 0x0d
     a9e:	9b 01       	movw	r18, r22
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
    delta_2 = mf->point2 - input;
     aa4:	86 85       	ldd	r24, Z+14	; 0x0e
     aa6:	97 85       	ldd	r25, Z+15	; 0x0f
     aa8:	86 1b       	sub	r24, r22
     aaa:	97 0b       	sbc	r25, r23
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
     aac:	12 16       	cp	r1, r18
     aae:	13 06       	cpc	r1, r19
     ab0:	ec f4       	brge	.+58     	; 0xaec <compute_degree_of_membership+0x54>
     ab2:	18 16       	cp	r1, r24
     ab4:	19 06       	cpc	r1, r25
     ab6:	ec f4       	brge	.+58     	; 0xaf2 <compute_degree_of_membership+0x5a>
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
     ab8:	60 89       	ldd	r22, Z+16	; 0x10
     aba:	71 89       	ldd	r23, Z+17	; 0x11
     abc:	a2 89       	ldd	r26, Z+18	; 0x12
     abe:	b3 89       	ldd	r27, Z+19	; 0x13
     ac0:	8a 9f       	mul	r24, r26
     ac2:	a0 01       	movw	r20, r0
     ac4:	8b 9f       	mul	r24, r27
     ac6:	50 0d       	add	r21, r0
     ac8:	9a 9f       	mul	r25, r26
     aca:	50 0d       	add	r21, r0
     acc:	11 24       	eor	r1, r1
     ace:	26 9f       	mul	r18, r22
     ad0:	c0 01       	movw	r24, r0
     ad2:	27 9f       	mul	r18, r23
     ad4:	90 0d       	add	r25, r0
     ad6:	36 9f       	mul	r19, r22
     ad8:	90 0d       	add	r25, r0
     ada:	11 24       	eor	r1, r1
     adc:	48 17       	cp	r20, r24
     ade:	59 07       	cpc	r21, r25
     ae0:	0c f4       	brge	.+2      	; 0xae4 <compute_degree_of_membership+0x4c>
     ae2:	ca 01       	movw	r24, r20
 */
int min(arg1,arg2)
int arg1;
int arg2;
{
    if (arg1<arg2)
     ae4:	84 36       	cpi	r24, 0x64	; 100
     ae6:	91 05       	cpc	r25, r1
     ae8:	3c f4       	brge	.+14     	; 0xaf8 <compute_degree_of_membership+0x60>
     aea:	08 c0       	rjmp	.+16     	; 0xafc <compute_degree_of_membership+0x64>
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	05 c0       	rjmp	.+10     	; 0xafc <compute_degree_of_membership+0x64>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <compute_degree_of_membership+0x64>
    {
        return(arg1);
    }
    else
    {
        return(arg2);
     af8:	84 e6       	ldi	r24, 0x64	; 100
     afa:	90 e0       	ldi	r25, 0x00	; 0
    delta_2 = mf->point2 - input;
    if ((delta_1 <= 0) || (delta_2 <= 0))   /* input outside mem. function ?  */
        mf->value = 0;                           /* then degree of membership is 0 */
        else
            mf->value = min( (mf->slope1*delta_1),(mf->slope2*delta_2) );
            mf->value = min(mf->value,UPPER_LIMIT);  /* enforce upper limit */
     afc:	93 87       	std	Z+11, r25	; 0x0b
     afe:	82 87       	std	Z+10, r24	; 0x0a
     b00:	08 95       	ret

00000b02 <compute_area_of_trapezoid>:
 *    b=base=mf->point2-mf->point1
 *    a=f(h,b, mf->slopes1, mf->slope2)
 */
int compute_area_of_trapezoid(mf)
struct mf_type *mf;
{
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	fc 01       	movw	r30, r24
    int run_1;
    int run_2;
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
     b0c:	c6 85       	ldd	r28, Z+14	; 0x0e
     b0e:	d7 85       	ldd	r29, Z+15	; 0x0f
     b10:	84 85       	ldd	r24, Z+12	; 0x0c
     b12:	95 85       	ldd	r25, Z+13	; 0x0d
     b14:	c8 1b       	sub	r28, r24
     b16:	d9 0b       	sbc	r29, r25
    run_1 = mf->value/mf->slope1;
     b18:	22 85       	ldd	r18, Z+10	; 0x0a
     b1a:	33 85       	ldd	r19, Z+11	; 0x0b
     b1c:	60 89       	ldd	r22, Z+16	; 0x10
     b1e:	71 89       	ldd	r23, Z+17	; 0x11
     b20:	c9 01       	movw	r24, r18
     b22:	d7 d4       	rcall	.+2478   	; 0x14d2 <__divmodhi4>
    run_2 = mf->value/mf->slope2;
    top = base - run_1 - run_2;
     b24:	8e 01       	movw	r16, r28
     b26:	06 1b       	sub	r16, r22
     b28:	17 0b       	sbc	r17, r23
    int base;
    int top;
    int area;
    base = mf->point2 - mf->point1;
    run_1 = mf->value/mf->slope1;
    run_2 = mf->value/mf->slope2;
     b2a:	62 89       	ldd	r22, Z+18	; 0x12
     b2c:	73 89       	ldd	r23, Z+19	; 0x13
     b2e:	c9 01       	movw	r24, r18
     b30:	d0 d4       	rcall	.+2464   	; 0x14d2 <__divmodhi4>
    top = base - run_1 - run_2;
     b32:	06 1b       	sub	r16, r22
     b34:	17 0b       	sbc	r17, r23
    area = mf->value * ( base + top)/2;
     b36:	c0 0f       	add	r28, r16
     b38:	d1 1f       	adc	r29, r17
     b3a:	2c 9f       	mul	r18, r28
     b3c:	c0 01       	movw	r24, r0
     b3e:	2d 9f       	mul	r18, r29
     b40:	90 0d       	add	r25, r0
     b42:	3c 9f       	mul	r19, r28
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	99 23       	and	r25, r25
     b4a:	0c f4       	brge	.+2      	; 0xb4e <compute_area_of_trapezoid+0x4c>
     b4c:	01 96       	adiw	r24, 0x01	; 1
    return(area);
}
     b4e:	95 95       	asr	r25
     b50:	87 95       	ror	r24
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	08 95       	ret

00000b5c <fuzzification>:

/* Degree of membership value is calculated for each membership function of 
 * each system input. Values correspond to antecedents in rules. 
 */
void fuzzification()
{
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     b64:	00 91 3b 02 	lds	r16, 0x023B
     b68:	10 91 3c 02 	lds	r17, 0x023C
     b6c:	01 15       	cp	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	b9 f0       	breq	.+46     	; 0xba0 <fuzzification+0x44>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     b72:	f8 01       	movw	r30, r16
     b74:	c4 85       	ldd	r28, Z+12	; 0x0c
     b76:	d5 85       	ldd	r29, Z+13	; 0x0d
     b78:	20 97       	sbiw	r28, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <fuzzification+0x38>
            if (mf!=NULL) {
     b7c:	20 97       	sbiw	r28, 0x00	; 0
     b7e:	29 f0       	breq	.+10     	; 0xb8a <fuzzification+0x2e>
                compute_degree_of_membership(mf,si->value);
     b80:	f8 01       	movw	r30, r16
     b82:	62 85       	ldd	r22, Z+10	; 0x0a
     b84:	73 85       	ldd	r23, Z+11	; 0x0b
     b86:	ce 01       	movw	r24, r28
     b88:	87 df       	rcall	.-242    	; 0xa98 <compute_degree_of_membership>
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
     b8a:	0c 88       	ldd	r0, Y+20	; 0x14
     b8c:	dd 89       	ldd	r29, Y+21	; 0x15
     b8e:	c0 2d       	mov	r28, r0
     b90:	20 97       	sbiw	r28, 0x00	; 0
     b92:	a1 f7       	brne	.-24     	; 0xb7c <fuzzification+0x20>
 */
void fuzzification()
{
    struct io_type *si;    /* system input pointer        */
    struct mf_type *mf;    /* membership function pointer */
    for(si=System_Inputs; si != NULL; si=si->next)
     b94:	f8 01       	movw	r30, r16
     b96:	06 85       	ldd	r16, Z+14	; 0x0e
     b98:	17 85       	ldd	r17, Z+15	; 0x0f
     b9a:	01 15       	cp	r16, r1
     b9c:	11 05       	cpc	r17, r1
     b9e:	49 f7       	brne	.-46     	; 0xb72 <fuzzification+0x16>
        for(mf=si->membership_functions; mf != NULL; mf=mf->next)
            if (mf!=NULL) {
                compute_degree_of_membership(mf,si->value);
            }
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <rule_evaluation>:
 * to each of listed rule outputs. If an output has already been assigned a rule
 * strength, during current inference pass, a maximum function is used to
 * determine which strength should apply. 
 */
void rule_evaluation()
{
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     bb2:	c0 91 3d 02 	lds	r28, 0x023D
     bb6:	d0 91 3e 02 	lds	r29, 0x023E
     bba:	20 97       	sbiw	r28, 0x00	; 0
     bbc:	b9 f1       	breq	.+110    	; 0xc2c <rule_evaluation+0x82>
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     bbe:	04 e6       	ldi	r16, 0x64	; 100
     bc0:	10 e0       	ldi	r17, 0x00	; 0
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     bc2:	e8 81       	ld	r30, Y
     bc4:	f9 81       	ldd	r31, Y+1	; 0x01
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	81 f0       	breq	.+32     	; 0xbea <rule_evaluation+0x40>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     bca:	20 2f       	mov	r18, r16
     bcc:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
     bce:	a0 81       	ld	r26, Z
     bd0:	b1 81       	ldd	r27, Z+1	; 0x01
     bd2:	8d 91       	ld	r24, X+
     bd4:	9c 91       	ld	r25, X
     bd6:	82 17       	cp	r24, r18
     bd8:	93 07       	cpc	r25, r19
     bda:	0c f4       	brge	.+2      	; 0xbde <rule_evaluation+0x34>
     bdc:	9c 01       	movw	r18, r24
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
     bde:	02 80       	ldd	r0, Z+2	; 0x02
     be0:	f3 81       	ldd	r31, Z+3	; 0x03
     be2:	e0 2d       	mov	r30, r0
     be4:	30 97       	sbiw	r30, 0x00	; 0
     be6:	99 f7       	brne	.-26     	; 0xbce <rule_evaluation+0x24>
     be8:	02 c0       	rjmp	.+4      	; 0xbee <rule_evaluation+0x44>
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
     bea:	20 2f       	mov	r18, r16
     bec:	31 2f       	mov	r19, r17
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     bee:	ea 81       	ldd	r30, Y+2	; 0x02
     bf0:	fb 81       	ldd	r31, Y+3	; 0x03
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	b1 f0       	breq	.+44     	; 0xc22 <rule_evaluation+0x78>
     bf6:	72 2f       	mov	r23, r18
     bf8:	63 2f       	mov	r22, r19
            *(tp->value) = max(strength,*(tp->value));
     bfa:	a0 81       	ld	r26, Z
     bfc:	b1 81       	ldd	r27, Z+1	; 0x01
     bfe:	8d 91       	ld	r24, X+
     c00:	9c 91       	ld	r25, X
     c02:	11 97       	sbiw	r26, 0x01	; 1
     c04:	57 2f       	mov	r21, r23
     c06:	46 2f       	mov	r20, r22
     c08:	28 17       	cp	r18, r24
     c0a:	39 07       	cpc	r19, r25
     c0c:	14 f4       	brge	.+4      	; 0xc12 <rule_evaluation+0x68>
     c0e:	58 2f       	mov	r21, r24
     c10:	49 2f       	mov	r20, r25
     c12:	5c 93       	st	X, r21
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	4c 93       	st	X, r20
        strength = UPPER_LIMIT;                       /* max rule strength allowed */
        /* process if-side of rule to determine strength */
        for(ip=rule->if_side; ip != NULL; ip=ip->next)
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
     c18:	02 80       	ldd	r0, Z+2	; 0x02
     c1a:	f3 81       	ldd	r31, Z+3	; 0x03
     c1c:	e0 2d       	mov	r30, r0
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	61 f7       	brne	.-40     	; 0xbfa <rule_evaluation+0x50>
{
    struct rule_type *rule;
    struct rule_element_type *ip;       /* pointer of antecedents  (if-parts)   */
    struct rule_element_type *tp;       /* pointer to consequences (then-parts) */
    int strength;                /* strength of  rule currently being evaluated */
    for(rule=Rule_Base; rule != NULL; rule=rule->next){
     c22:	0c 80       	ldd	r0, Y+4	; 0x04
     c24:	dd 81       	ldd	r29, Y+5	; 0x05
     c26:	c0 2d       	mov	r28, r0
     c28:	20 97       	sbiw	r28, 0x00	; 0
     c2a:	59 f6       	brne	.-106    	; 0xbc2 <rule_evaluation+0x18>
            strength = min(strength,*(ip->value));
        /* process then-side of rule to apply strength */
        for(tp=rule->then_side; tp != NULL; tp=tp->next)
            *(tp->value) = max(strength,*(tp->value));
    }
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <defuzzification>:
 * gravity). For each system output the corresponding output membership function
 * strenght are used to calculate the sum of areas that constitutes the basis
 * of centroid calculations
 */
void defuzzification()
{
     c36:	2f 92       	push	r2
     c38:	3f 92       	push	r3
     c3a:	4f 92       	push	r4
     c3c:	5f 92       	push	r5
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <defuzzification+0x26>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <defuzzification+0x28>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <defuzzification+0x2a>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     c64:	80 91 39 02 	lds	r24, 0x0239
     c68:	90 91 3a 02 	lds	r25, 0x023A
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	89 2b       	or	r24, r25
     c72:	09 f4       	brne	.+2      	; 0xc76 <defuzzification+0x40>
     c74:	84 c0       	rjmp	.+264    	; 0xd7e <defuzzification+0x148>
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     c76:	eb 81       	ldd	r30, Y+3	; 0x03
     c78:	fc 81       	ldd	r31, Y+4	; 0x04
     c7a:	04 84       	ldd	r0, Z+12	; 0x0c
     c7c:	f5 85       	ldd	r31, Z+13	; 0x0d
     c7e:	e0 2d       	mov	r30, r0
     c80:	fe 83       	std	Y+6, r31	; 0x06
     c82:	ed 83       	std	Y+5, r30	; 0x05
     c84:	ef 2b       	or	r30, r31
     c86:	09 f4       	brne	.+2      	; 0xc8a <defuzzification+0x54>
     c88:	66 c0       	rjmp	.+204    	; 0xd56 <defuzzification+0x120>
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
     c8a:	51 2c       	mov	r5, r1
     c8c:	61 2c       	mov	r6, r1
     c8e:	71 2c       	mov	r7, r1
     c90:	41 2c       	mov	r4, r1
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
     c92:	31 2c       	mov	r3, r1
     c94:	21 2c       	mov	r2, r1
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	1a 82       	std	Y+2, r1	; 0x02
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
            area = compute_area_of_trapezoid(mf);
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	31 df       	rcall	.-414    	; 0xb02 <compute_area_of_trapezoid>
     ca0:	bc 01       	movw	r22, r24
     ca2:	88 27       	eor	r24, r24
     ca4:	77 fd       	sbrc	r23, 7
     ca6:	80 95       	com	r24
     ca8:	98 2f       	mov	r25, r24
     caa:	24 d3       	rcall	.+1608   	; 0x12f4 <__floatsisf>
     cac:	6b 01       	movw	r12, r22
     cae:	7c 01       	movw	r14, r24
			centroid = mf->point1;
     cb0:	ed 81       	ldd	r30, Y+5	; 0x05
     cb2:	fe 81       	ldd	r31, Y+6	; 0x06
     cb4:	04 85       	ldd	r16, Z+12	; 0x0c
     cb6:	15 85       	ldd	r17, Z+13	; 0x0d
     cb8:	b8 01       	movw	r22, r16
     cba:	88 27       	eor	r24, r24
     cbc:	77 fd       	sbrc	r23, 7
     cbe:	80 95       	com	r24
     cc0:	98 2f       	mov	r25, r24
     cc2:	18 d3       	rcall	.+1584   	; 0x12f4 <__floatsisf>
     cc4:	4b 01       	movw	r8, r22
     cc6:	5c 01       	movw	r10, r24
			int intermed = (int) ((mf->point2 - mf->point1)/2);
     cc8:	ed 81       	ldd	r30, Y+5	; 0x05
     cca:	fe 81       	ldd	r31, Y+6	; 0x06
     ccc:	86 85       	ldd	r24, Z+14	; 0x0e
     cce:	97 85       	ldd	r25, Z+15	; 0x0f
     cd0:	80 1b       	sub	r24, r16
     cd2:	91 0b       	sbc	r25, r17
     cd4:	bc 01       	movw	r22, r24
     cd6:	12 f4       	brpl	.+4      	; 0xcdc <defuzzification+0xa6>
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	75 95       	asr	r23
     cde:	67 95       	ror	r22
            centroid = centroid + intermed;
     ce0:	88 27       	eor	r24, r24
     ce2:	77 fd       	sbrc	r23, 7
     ce4:	80 95       	com	r24
     ce6:	98 2f       	mov	r25, r24
     ce8:	05 d3       	rcall	.+1546   	; 0x12f4 <__floatsisf>
     cea:	a5 01       	movw	r20, r10
     cec:	94 01       	movw	r18, r8
     cee:	03 d2       	rcall	.+1030   	; 0x10f6 <__addsf3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
            sum_of_products += area * centroid;
     cf4:	c7 01       	movw	r24, r14
     cf6:	b6 01       	movw	r22, r12
     cf8:	89 d3       	rcall	.+1810   	; 0x140c <__mulsf3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	63 2d       	mov	r22, r3
     d00:	72 2d       	mov	r23, r2
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	f7 d1       	rcall	.+1006   	; 0x10f6 <__addsf3>
     d08:	36 2e       	mov	r3, r22
     d0a:	27 2e       	mov	r2, r23
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	9a 83       	std	Y+2, r25	; 0x02
            sum_of_areas += area;
     d10:	a7 01       	movw	r20, r14
     d12:	96 01       	movw	r18, r12
     d14:	65 2d       	mov	r22, r5
     d16:	76 2d       	mov	r23, r6
     d18:	87 2d       	mov	r24, r7
     d1a:	94 2d       	mov	r25, r4
     d1c:	ec d1       	rcall	.+984    	; 0x10f6 <__addsf3>
     d1e:	56 2e       	mov	r5, r22
     d20:	67 2e       	mov	r6, r23
     d22:	78 2e       	mov	r7, r24
     d24:	49 2e       	mov	r4, r25
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
        for(mf=so->membership_functions; mf != NULL; mf=mf->next){
     d26:	ed 81       	ldd	r30, Y+5	; 0x05
     d28:	fe 81       	ldd	r31, Y+6	; 0x06
     d2a:	04 88       	ldd	r0, Z+20	; 0x14
     d2c:	f5 89       	ldd	r31, Z+21	; 0x15
     d2e:	e0 2d       	mov	r30, r0
     d30:	fe 83       	std	Y+6, r31	; 0x06
     d32:	ed 83       	std	Y+5, r30	; 0x05
     d34:	ef 2b       	or	r30, r31
     d36:	09 f0       	breq	.+2      	; 0xd3a <defuzzification+0x104>
     d38:	b0 cf       	rjmp	.-160    	; 0xc9a <defuzzification+0x64>
			centroid = mf->point1;
			int intermed = (int) ((mf->point2 - mf->point1)/2);
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
     d3a:	26 2f       	mov	r18, r22
     d3c:	37 2f       	mov	r19, r23
     d3e:	48 2f       	mov	r20, r24
     d40:	59 2f       	mov	r21, r25
     d42:	63 2d       	mov	r22, r3
     d44:	72 2d       	mov	r23, r2
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	39 d2       	rcall	.+1138   	; 0x11be <__divsf3>
     d4c:	26 2f       	mov	r18, r22
     d4e:	37 2f       	mov	r19, r23
     d50:	48 2f       	mov	r20, r24
     d52:	59 2f       	mov	r21, r25
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <defuzzification+0x128>
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
        sum_of_products = 0;
        sum_of_areas = 0;
		centroid = 0;
		result = 0;
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
            centroid = centroid + intermed;
            sum_of_products += area * centroid;
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
     d5e:	62 2f       	mov	r22, r18
     d60:	73 2f       	mov	r23, r19
     d62:	84 2f       	mov	r24, r20
     d64:	95 2f       	mov	r25, r21
     d66:	93 d2       	rcall	.+1318   	; 0x128e <__fixsfsi>
     d68:	eb 81       	ldd	r30, Y+3	; 0x03
     d6a:	fc 81       	ldd	r31, Y+4	; 0x04
     d6c:	73 87       	std	Z+11, r23	; 0x0b
     d6e:	62 87       	std	Z+10, r22	; 0x0a
    double sum_of_areas;  /* sum of shortend trapezoid area */
    double area;
    double centroid;
	double result;
    /* compute a defuzzified value for each system output */
    for(so=System_Outputs; so != NULL; so=so->next){
     d70:	86 85       	ldd	r24, Z+14	; 0x0e
     d72:	97 85       	ldd	r25, Z+15	; 0x0f
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	89 2b       	or	r24, r25
     d7a:	09 f0       	breq	.+2      	; 0xd7e <defuzzification+0x148>
     d7c:	7c cf       	rjmp	.-264    	; 0xc76 <defuzzification+0x40>
            sum_of_areas += area;
			result = (sum_of_products/sum_of_areas); /* weighted average */
        }
        so->value = (int) result;  
    }
}
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	5f 90       	pop	r5
     da8:	4f 90       	pop	r4
     daa:	3f 90       	pop	r3
     dac:	2f 90       	pop	r2
     dae:	08 95       	ret

00000db0 <__vector_28>:
		pid_Init(K_P * SCALING_FACTOR, K_D * SCALING_FACTOR, &pidData);

		// Set up timer, enable timer/counter 0 overflow interrupt
		TCCR0B = (1 << CS00); // clock source to be used by the Timer/Counter clkI/O
		TIMSK0 = (1 << TOIE0);
		TCNT0  = 0;
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	0b b6       	in	r0, 0x3b	; 59
     dbc:	0f 92       	push	r0
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	80 91 ce 00 	lds	r24, 0x00CE
     dca:	8f 3f       	cpi	r24, 0xFF	; 255
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <__vector_28+0x28>
     dce:	10 92 60 02 	sts	0x0260, r1
     dd2:	10 92 5f 02 	sts	0x025F, r1
     dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <__vector_28+0x48>
     dd8:	e0 91 5f 02 	lds	r30, 0x025F
     ddc:	f0 91 60 02 	lds	r31, 0x0260
     de0:	e1 5c       	subi	r30, 0xC1	; 193
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	80 83       	st	Z, r24
     de6:	80 91 5f 02 	lds	r24, 0x025F
     dea:	90 91 60 02 	lds	r25, 0x0260
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	90 93 60 02 	sts	0x0260, r25
     df4:	80 93 5f 02 	sts	0x025F, r24
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	0f 90       	pop	r0
     e02:	0b be       	out	0x3b, r0	; 59
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <SPI_slaveInit>:
     e0e:	80 e4       	ldi	r24, 0x40	; 64
     e10:	84 b9       	out	0x04, r24	; 4
     e12:	80 ec       	ldi	r24, 0xC0	; 192
     e14:	8c bd       	out	0x2c, r24	; 44
     e16:	08 95       	ret

00000e18 <carInit>:
     e18:	7c d0       	rcall	.+248    	; 0xf12 <pwmInit>
     e1a:	f9 df       	rcall	.-14     	; 0xe0e <SPI_slaveInit>
     e1c:	8d ec       	ldi	r24, 0xCD	; 205
     e1e:	9a e0       	ldi	r25, 0x0A	; 10
     e20:	87 d0       	rcall	.+270    	; 0xf30 <setESC>
     e22:	84 e6       	ldi	r24, 0x64	; 100
     e24:	9a e0       	ldi	r25, 0x0A	; 10
     e26:	9f c0       	rjmp	.+318    	; 0xf66 <setServo>
     e28:	08 95       	ret

00000e2a <USART1_init>:
     e2a:	ec ec       	ldi	r30, 0xCC	; 204
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	10 82       	st	Z, r1
     e32:	20 e9       	ldi	r18, 0x90	; 144
     e34:	20 93 c9 00 	sts	0x00C9, r18
     e38:	2e e0       	ldi	r18, 0x0E	; 14
     e3a:	20 93 ca 00 	sts	0x00CA, r18
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
     e42:	08 95       	ret

00000e44 <Sens_info_read>:
     e44:	dc 01       	movw	r26, r24
     e46:	e9 ec       	ldi	r30, 0xC9	; 201
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	80 83       	st	Z, r24
     e50:	80 91 3f 02 	lds	r24, 0x023F
     e54:	8c 93       	st	X, r24
     e56:	80 91 40 02 	lds	r24, 0x0240
     e5a:	1e 96       	adiw	r26, 0x0e	; 14
     e5c:	8c 93       	st	X, r24
     e5e:	1e 97       	sbiw	r26, 0x0e	; 14
     e60:	80 91 41 02 	lds	r24, 0x0241
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	8c 93       	st	X, r24
     e68:	10 92 60 02 	sts	0x0260, r1
     e6c:	10 92 5f 02 	sts	0x025F, r1
     e70:	80 81       	ld	r24, Z
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	80 83       	st	Z, r24
     e76:	08 95       	ret

00000e78 <__vector_18>:
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	80 91 aa 01 	lds	r24, 0x01AA
     e8c:	90 91 ab 01 	lds	r25, 0x01AB
     e90:	8b 39       	cpi	r24, 0x9B	; 155
     e92:	26 e9       	ldi	r18, 0x96	; 150
     e94:	92 07       	cpc	r25, r18
     e96:	30 f4       	brcc	.+12     	; 0xea4 <__vector_18+0x2c>
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	90 93 ab 01 	sts	0x01AB, r25
     e9e:	80 93 aa 01 	sts	0x01AA, r24
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <__vector_18+0x3e>
     ea4:	80 91 ac 01 	lds	r24, 0x01AC
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	80 93 ac 01 	sts	0x01AC, r24
     eae:	10 92 ab 01 	sts	0x01AB, r1
     eb2:	10 92 aa 01 	sts	0x01AA, r1
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <main>:
	}

	/* main function
	*/
	int main (void)
	{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	60 97       	sbiw	r28, 0x10	; 16
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
		carInit();
     eda:	9e df       	rcall	.-196    	; 0xe18 <carInit>
		setESC(NEUTRAL+70);
     edc:	83 e1       	ldi	r24, 0x13	; 19
     ede:	9b e0       	ldi	r25, 0x0B	; 11
     ee0:	27 d0       	rcall	.+78     	; 0xf30 <setESC>
		
		sei();
     ee2:	78 94       	sei
			sens_info_ptr = &sensor_info;
			//--end of sensor information
			
			//Init for UART
			unsigned int baud_setting = 7;
			USART1_init(baud_setting);
     ee4:	87 e0       	ldi	r24, 0x07	; 7
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 df       	rcall	.-192    	; 0xe2a <USART1_init>
			int c;
			int v;
			int d;

			//Setting for Testing
			DDRA = 0xFF;
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	81 b9       	out	0x01, r24	; 1
					
					PORTA = sensor_info.dist_right_line;
					
					cli();
					
					FLC_steering(200, OCR1B, 50);
     eee:	0a e8       	ldi	r16, 0x8A	; 138
     ef0:	10 e0       	ldi	r17, 0x00	; 0
		
		while (1) {
				
				// if (counter_UART1_reciever > 2) {
					
					Sens_info_read(sens_info_ptr);
     ef2:	ce 01       	movw	r24, r28
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	a6 df       	rcall	.-180    	; 0xe44 <Sens_info_read>
					
					c = (int) sensor_info.dist_right_line;
					v = (int) sensor_info.angular_diff;
					d = (int) sensor_info.dist_sonic_middle;
					
					PORTA = sensor_info.dist_right_line;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	82 b9       	out	0x02, r24	; 2
					
					cli();
     efc:	f8 94       	cli
					
					FLC_steering(200, OCR1B, 50);
     efe:	f8 01       	movw	r30, r16
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	42 e3       	ldi	r20, 0x32	; 50
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	88 ec       	ldi	r24, 0xC8	; 200
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	de d8       	rcall	.-3652   	; 0xca <FLC_steering>
					//FLC_road(OCR1A,d);
					sei();
     f0e:	78 94       	sei
     f10:	f0 cf       	rjmp	.-32     	; 0xef2 <main+0x2c>

00000f12 <pwmInit>:
 * The formula of pwm length with current counter register settings:
 * pwm_length = counterValue/1843
*/
void pwmInit(void)
{
	DDRD = (1<<DDD5)|(1<<DDD4);
     f12:	80 e3       	ldi	r24, 0x30	; 48
     f14:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     f16:	82 ea       	ldi	r24, 0xA2	; 162
     f18:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 36863;
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	9f e8       	ldi	r25, 0x8F	; 143
     f20:	90 93 87 00 	sts	0x0087, r25
     f24:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS11)|(1<<WGM12)|(1<<WGM13);
     f28:	8a e1       	ldi	r24, 0x1A	; 26
     f2a:	80 93 81 00 	sts	0x0081, r24
     f2e:	08 95       	ret

00000f30 <setESC>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @param int counterEsc sets the upper limit to the 16-bit counter1 in the processor
*/
void setESC(int counterEsc){
	
	if(counterEsc <= MINESC)
     f30:	80 36       	cpi	r24, 0x60	; 96
     f32:	2a e0       	ldi	r18, 0x0A	; 10
     f34:	92 07       	cpc	r25, r18
     f36:	3c f4       	brge	.+14     	; 0xf46 <setESC+0x16>
	{
		OCR1A = MINESC;
     f38:	8f e5       	ldi	r24, 0x5F	; 95
     f3a:	9a e0       	ldi	r25, 0x0A	; 10
     f3c:	90 93 89 00 	sts	0x0089, r25
     f40:	80 93 88 00 	sts	0x0088, r24
     f44:	08 95       	ret
	}
	else if  (counterEsc >= MAXESC)
     f46:	8b 33       	cpi	r24, 0x3B	; 59
     f48:	2b e0       	ldi	r18, 0x0B	; 11
     f4a:	92 07       	cpc	r25, r18
     f4c:	3c f0       	brlt	.+14     	; 0xf5c <setESC+0x2c>
	{
		OCR1A = MAXESC;
     f4e:	8b e3       	ldi	r24, 0x3B	; 59
     f50:	9b e0       	ldi	r25, 0x0B	; 11
     f52:	90 93 89 00 	sts	0x0089, r25
     f56:	80 93 88 00 	sts	0x0088, r24
     f5a:	08 95       	ret
	} else {
		OCR1A = counterEsc;
     f5c:	90 93 89 00 	sts	0x0089, r25
     f60:	80 93 88 00 	sts	0x0088, r24
     f64:	08 95       	ret

00000f66 <setServo>:
 * Input values outside of the valid interval are forced to the lower/upper limit
 * @parameter int counterServo sets the upper limit to the 16-bit counter1 in the processor
*/
void setServo (int counterServo)
{
	if (counterServo <= MAXRIGHT){
     f66:	87 3e       	cpi	r24, 0xE7	; 231
     f68:	27 e0       	ldi	r18, 0x07	; 7
     f6a:	92 07       	cpc	r25, r18
     f6c:	3c f4       	brge	.+14     	; 0xf7c <setServo+0x16>
		
		OCR1B = MAXRIGHT;
     f6e:	86 ee       	ldi	r24, 0xE6	; 230
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	90 93 8b 00 	sts	0x008B, r25
     f76:	80 93 8a 00 	sts	0x008A, r24
     f7a:	08 95       	ret
		
	}	else if (counterServo >= MAXLEFT){
     f7c:	8f 33       	cpi	r24, 0x3F	; 63
     f7e:	2c e0       	ldi	r18, 0x0C	; 12
     f80:	92 07       	cpc	r25, r18
     f82:	3c f0       	brlt	.+14     	; 0xf92 <setServo+0x2c>

		OCR1B = MAXLEFT;
     f84:	8f e3       	ldi	r24, 0x3F	; 63
     f86:	9c e0       	ldi	r25, 0x0C	; 12
     f88:	90 93 8b 00 	sts	0x008B, r25
     f8c:	80 93 8a 00 	sts	0x008A, r24
     f90:	08 95       	ret
		
	} else {
		
		OCR1B = counterServo;	
     f92:	90 93 8b 00 	sts	0x008B, r25
     f96:	80 93 8a 00 	sts	0x008A, r24
     f9a:	08 95       	ret

00000f9c <__vector_20>:

buffer_typedef rx_uart0 = {{0}, 0 , 0 ,0}; //declaring a receive buffer
buffer_typedef tx_uart0 = {{0}, 0 , 0 ,0}; //declaring a transmit buffer

ISR(USART0_RX_vect)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	0b b6       	in	r0, 0x3b	; 59
     fa8:	0f 92       	push	r0
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
	if(rx_uart0.num_bytes == BUFFER_SIZE) { // if buffer full, set flag
     fbc:	80 91 37 02 	lds	r24, 0x0237
     fc0:	90 91 38 02 	lds	r25, 0x0238
     fc4:	80 34       	cpi	r24, 0x40	; 64
     fc6:	91 05       	cpc	r25, r1
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <__vector_20+0x3a>
		uart0_rx_overf_flag = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 6d 02 	sts	0x026D, r24
		unsigned char scrap_var;
		scrap_var = UDR0; //UDR0 has to be read, therefore the scrap variable
     fd0:	80 91 c6 00 	lds	r24, 0x00C6
     fd4:	16 c0       	rjmp	.+44     	; 0x1002 <__vector_20+0x66>
		} else if(rx_uart0.num_bytes < BUFFER_SIZE) { //if there is space in buffer     //CHECK IF THIS IS RIGHT LATER
     fd6:	80 34       	cpi	r24, 0x40	; 64
     fd8:	91 05       	cpc	r25, r1
     fda:	e8 f4       	brcc	.+58     	; 0x1016 <__vector_20+0x7a>
		
		rx_uart0.buffer[rx_uart0.i_last] = UDR0;
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f2 e0       	ldi	r31, 0x02	; 2
     fe0:	20 81       	ld	r18, Z
     fe2:	31 81       	ldd	r19, Z+1	; 0x01
     fe4:	40 91 c6 00 	lds	r20, 0x00C6
     fe8:	d9 01       	movw	r26, r18
     fea:	ad 50       	subi	r26, 0x0D	; 13
     fec:	be 4f       	sbci	r27, 0xFE	; 254
     fee:	4c 93       	st	X, r20
		
		rx_uart0.i_last++;
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	31 83       	std	Z+1, r19	; 0x01
     ff6:	20 83       	st	Z, r18
		rx_uart0.num_bytes++;
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	90 93 38 02 	sts	0x0238, r25
     ffe:	80 93 37 02 	sts	0x0237, r24
		
	}
	
	//Check if buffer is full now. If yes, set full_flag
	if(rx_uart0.num_bytes == BUFFER_SIZE){
    1002:	80 91 37 02 	lds	r24, 0x0237
    1006:	90 91 38 02 	lds	r25, 0x0238
    100a:	80 34       	cpi	r24, 0x40	; 64
    100c:	91 05       	cpc	r25, r1
    100e:	19 f4       	brne	.+6      	; 0x1016 <__vector_20+0x7a>
		uart0_rx_full_flag = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 6b 02 	sts	0x026B, r24
	}


	//If index has reached the end of buffer, set the i_last to 0 to go around
	if(rx_uart0.i_last == BUFFER_SIZE){
    1016:	80 91 35 02 	lds	r24, 0x0235
    101a:	90 91 36 02 	lds	r25, 0x0236
    101e:	80 34       	cpi	r24, 0x40	; 64
    1020:	91 05       	cpc	r25, r1
    1022:	21 f4       	brne	.+8      	; 0x102c <__vector_20+0x90>
		rx_uart0.i_last = 0;
    1024:	10 92 36 02 	sts	0x0236, r1
    1028:	10 92 35 02 	sts	0x0235, r1
	}

	uart0_rx_not_empty_flag = 1; //Not empty is something has been placed in buffer
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 6a 02 	sts	0x026A, r24
}
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_22>:




ISR(USART0_TX_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	0b b6       	in	r0, 0x3b	; 59
    105e:	0f 92       	push	r0
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	
	//check if buffer is full. If yes, clear flag because we gonna make room for
	if(tx_uart0.num_bytes == BUFFER_SIZE){
    1068:	80 91 f1 01 	lds	r24, 0x01F1
    106c:	90 91 f2 01 	lds	r25, 0x01F2
    1070:	80 34       	cpi	r24, 0x40	; 64
    1072:	91 05       	cpc	r25, r1
    1074:	19 f4       	brne	.+6      	; 0x107c <__vector_22+0x2a>
		uart0_tx_full_flag = 0;
    1076:	10 92 69 02 	sts	0x0269, r1
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <__vector_22+0x2e>
	}
	
	//if data exist, put the sending_byte in the buffer
	if(tx_uart0.num_bytes > 0){
    107c:	89 2b       	or	r24, r25
    107e:	b9 f0       	breq	.+46     	; 0x10ae <__vector_22+0x5c>
		
		UDR0 = tx_uart0.buffer[tx_uart0.i_first];
    1080:	e0 91 ed 01 	lds	r30, 0x01ED
    1084:	f0 91 ee 01 	lds	r31, 0x01EE
    1088:	e3 55       	subi	r30, 0x53	; 83
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	80 81       	ld	r24, Z
    108e:	80 93 c6 00 	sts	0x00C6, r24
		
		tx_uart0.i_first++;
    1092:	ed ee       	ldi	r30, 0xED	; 237
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
		tx_uart0.num_bytes--;
    10a0:	e1 ef       	ldi	r30, 0xF1	; 241
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
	}
	
	//if reaches the end of buffer, set it to 0 to go around
	if(tx_uart0.i_first == BUFFER_SIZE){
    10ae:	80 91 ed 01 	lds	r24, 0x01ED
    10b2:	90 91 ee 01 	lds	r25, 0x01EE
    10b6:	80 34       	cpi	r24, 0x40	; 64
    10b8:	91 05       	cpc	r25, r1
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <__vector_22+0x72>
		tx_uart0.i_first = 0;
    10bc:	10 92 ee 01 	sts	0x01EE, r1
    10c0:	10 92 ed 01 	sts	0x01ED, r1
	}
	
	//if no more data in buffer, set not_empty_flag to 0
	if(tx_uart0.num_bytes == 0){
    10c4:	80 91 f1 01 	lds	r24, 0x01F1
    10c8:	90 91 f2 01 	lds	r25, 0x01F2
    10cc:	89 2b       	or	r24, r25
    10ce:	39 f4       	brne	.+14     	; 0x10de <__vector_22+0x8c>
		uart0_tx_not_empty_flag = 0;
    10d0:	10 92 6c 02 	sts	0x026C, r1
		
		//Disable UART "TX hw buffer empty" interrupt here
		//I do this by setting UDRIE0 in UCSR0B to 0
		UCSR0B &= ~(1<<TXCIE0);
    10d4:	e1 ec       	ldi	r30, 0xC1	; 193
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7b       	andi	r24, 0xBF	; 191
    10dc:	80 83       	st	Z, r24
		//if using shared RX/TX hardware buffer (WHICH I DO, OR DO WE?) enable RX data interrupt here
		//UCSR0B |= (1<<RXEN0);
		
	}
	
}
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	0f 90       	pop	r0
    10e8:	0b be       	out	0x3b, r0	; 59
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <__subsf3>:
    10f4:	50 58       	subi	r21, 0x80	; 128

000010f6 <__addsf3>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	aa 27       	eor	r26, r26
    10fa:	0e d0       	rcall	.+28     	; 0x1118 <__addsf3x>
    10fc:	4d c1       	rjmp	.+666    	; 0x1398 <__fp_round>
    10fe:	3e d1       	rcall	.+636    	; 0x137c <__fp_pscA>
    1100:	30 f0       	brcs	.+12     	; 0x110e <__addsf3+0x18>
    1102:	43 d1       	rcall	.+646    	; 0x138a <__fp_pscB>
    1104:	20 f0       	brcs	.+8      	; 0x110e <__addsf3+0x18>
    1106:	31 f4       	brne	.+12     	; 0x1114 <__addsf3+0x1e>
    1108:	9f 3f       	cpi	r25, 0xFF	; 255
    110a:	11 f4       	brne	.+4      	; 0x1110 <__addsf3+0x1a>
    110c:	1e f4       	brtc	.+6      	; 0x1114 <__addsf3+0x1e>
    110e:	33 c1       	rjmp	.+614    	; 0x1376 <__fp_nan>
    1110:	0e f4       	brtc	.+2      	; 0x1114 <__addsf3+0x1e>
    1112:	e0 95       	com	r30
    1114:	e7 fb       	bst	r30, 7
    1116:	29 c1       	rjmp	.+594    	; 0x136a <__fp_inf>

00001118 <__addsf3x>:
    1118:	e9 2f       	mov	r30, r25
    111a:	4f d1       	rcall	.+670    	; 0x13ba <__fp_split3>
    111c:	80 f3       	brcs	.-32     	; 0x10fe <__addsf3+0x8>
    111e:	ba 17       	cp	r27, r26
    1120:	62 07       	cpc	r22, r18
    1122:	73 07       	cpc	r23, r19
    1124:	84 07       	cpc	r24, r20
    1126:	95 07       	cpc	r25, r21
    1128:	18 f0       	brcs	.+6      	; 0x1130 <__addsf3x+0x18>
    112a:	71 f4       	brne	.+28     	; 0x1148 <__addsf3x+0x30>
    112c:	9e f5       	brtc	.+102    	; 0x1194 <__addsf3x+0x7c>
    112e:	67 c1       	rjmp	.+718    	; 0x13fe <__fp_zero>
    1130:	0e f4       	brtc	.+2      	; 0x1134 <__addsf3x+0x1c>
    1132:	e0 95       	com	r30
    1134:	0b 2e       	mov	r0, r27
    1136:	ba 2f       	mov	r27, r26
    1138:	a0 2d       	mov	r26, r0
    113a:	0b 01       	movw	r0, r22
    113c:	b9 01       	movw	r22, r18
    113e:	90 01       	movw	r18, r0
    1140:	0c 01       	movw	r0, r24
    1142:	ca 01       	movw	r24, r20
    1144:	a0 01       	movw	r20, r0
    1146:	11 24       	eor	r1, r1
    1148:	ff 27       	eor	r31, r31
    114a:	59 1b       	sub	r21, r25
    114c:	99 f0       	breq	.+38     	; 0x1174 <__addsf3x+0x5c>
    114e:	59 3f       	cpi	r21, 0xF9	; 249
    1150:	50 f4       	brcc	.+20     	; 0x1166 <__addsf3x+0x4e>
    1152:	50 3e       	cpi	r21, 0xE0	; 224
    1154:	68 f1       	brcs	.+90     	; 0x11b0 <__addsf3x+0x98>
    1156:	1a 16       	cp	r1, r26
    1158:	f0 40       	sbci	r31, 0x00	; 0
    115a:	a2 2f       	mov	r26, r18
    115c:	23 2f       	mov	r18, r19
    115e:	34 2f       	mov	r19, r20
    1160:	44 27       	eor	r20, r20
    1162:	58 5f       	subi	r21, 0xF8	; 248
    1164:	f3 cf       	rjmp	.-26     	; 0x114c <__addsf3x+0x34>
    1166:	46 95       	lsr	r20
    1168:	37 95       	ror	r19
    116a:	27 95       	ror	r18
    116c:	a7 95       	ror	r26
    116e:	f0 40       	sbci	r31, 0x00	; 0
    1170:	53 95       	inc	r21
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__addsf3x+0x4e>
    1174:	7e f4       	brtc	.+30     	; 0x1194 <__addsf3x+0x7c>
    1176:	1f 16       	cp	r1, r31
    1178:	ba 0b       	sbc	r27, r26
    117a:	62 0b       	sbc	r22, r18
    117c:	73 0b       	sbc	r23, r19
    117e:	84 0b       	sbc	r24, r20
    1180:	ba f0       	brmi	.+46     	; 0x11b0 <__addsf3x+0x98>
    1182:	91 50       	subi	r25, 0x01	; 1
    1184:	a1 f0       	breq	.+40     	; 0x11ae <__addsf3x+0x96>
    1186:	ff 0f       	add	r31, r31
    1188:	bb 1f       	adc	r27, r27
    118a:	66 1f       	adc	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	c2 f7       	brpl	.-16     	; 0x1182 <__addsf3x+0x6a>
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <__addsf3x+0x98>
    1194:	ba 0f       	add	r27, r26
    1196:	62 1f       	adc	r22, r18
    1198:	73 1f       	adc	r23, r19
    119a:	84 1f       	adc	r24, r20
    119c:	48 f4       	brcc	.+18     	; 0x11b0 <__addsf3x+0x98>
    119e:	87 95       	ror	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b7 95       	ror	r27
    11a6:	f7 95       	ror	r31
    11a8:	9e 3f       	cpi	r25, 0xFE	; 254
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <__addsf3x+0x96>
    11ac:	b3 cf       	rjmp	.-154    	; 0x1114 <__addsf3+0x1e>
    11ae:	93 95       	inc	r25
    11b0:	88 0f       	add	r24, r24
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__addsf3x+0x9e>
    11b4:	99 27       	eor	r25, r25
    11b6:	ee 0f       	add	r30, r30
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	08 95       	ret

000011be <__divsf3>:
    11be:	0c d0       	rcall	.+24     	; 0x11d8 <__divsf3x>
    11c0:	eb c0       	rjmp	.+470    	; 0x1398 <__fp_round>
    11c2:	e3 d0       	rcall	.+454    	; 0x138a <__fp_pscB>
    11c4:	40 f0       	brcs	.+16     	; 0x11d6 <__divsf3+0x18>
    11c6:	da d0       	rcall	.+436    	; 0x137c <__fp_pscA>
    11c8:	30 f0       	brcs	.+12     	; 0x11d6 <__divsf3+0x18>
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <__divsf3+0x16>
    11cc:	5f 3f       	cpi	r21, 0xFF	; 255
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <__divsf3+0x18>
    11d0:	cc c0       	rjmp	.+408    	; 0x136a <__fp_inf>
    11d2:	51 11       	cpse	r21, r1
    11d4:	15 c1       	rjmp	.+554    	; 0x1400 <__fp_szero>
    11d6:	cf c0       	rjmp	.+414    	; 0x1376 <__fp_nan>

000011d8 <__divsf3x>:
    11d8:	f0 d0       	rcall	.+480    	; 0x13ba <__fp_split3>
    11da:	98 f3       	brcs	.-26     	; 0x11c2 <__divsf3+0x4>

000011dc <__divsf3_pse>:
    11dc:	99 23       	and	r25, r25
    11de:	c9 f3       	breq	.-14     	; 0x11d2 <__divsf3+0x14>
    11e0:	55 23       	and	r21, r21
    11e2:	b1 f3       	breq	.-20     	; 0x11d0 <__divsf3+0x12>
    11e4:	95 1b       	sub	r25, r21
    11e6:	55 0b       	sbc	r21, r21
    11e8:	bb 27       	eor	r27, r27
    11ea:	aa 27       	eor	r26, r26
    11ec:	62 17       	cp	r22, r18
    11ee:	73 07       	cpc	r23, r19
    11f0:	84 07       	cpc	r24, r20
    11f2:	38 f0       	brcs	.+14     	; 0x1202 <__divsf3_pse+0x26>
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	44 1f       	adc	r20, r20
    11fe:	aa 1f       	adc	r26, r26
    1200:	a9 f3       	breq	.-22     	; 0x11ec <__divsf3_pse+0x10>
    1202:	33 d0       	rcall	.+102    	; 0x126a <__divsf3_pse+0x8e>
    1204:	0e 2e       	mov	r0, r30
    1206:	3a f0       	brmi	.+14     	; 0x1216 <__divsf3_pse+0x3a>
    1208:	e0 e8       	ldi	r30, 0x80	; 128
    120a:	30 d0       	rcall	.+96     	; 0x126c <__divsf3_pse+0x90>
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	e6 95       	lsr	r30
    1212:	00 1c       	adc	r0, r0
    1214:	ca f7       	brpl	.-14     	; 0x1208 <__divsf3_pse+0x2c>
    1216:	29 d0       	rcall	.+82     	; 0x126a <__divsf3_pse+0x8e>
    1218:	fe 2f       	mov	r31, r30
    121a:	27 d0       	rcall	.+78     	; 0x126a <__divsf3_pse+0x8e>
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	bb 1f       	adc	r27, r27
    1224:	26 17       	cp	r18, r22
    1226:	37 07       	cpc	r19, r23
    1228:	48 07       	cpc	r20, r24
    122a:	ab 07       	cpc	r26, r27
    122c:	b0 e8       	ldi	r27, 0x80	; 128
    122e:	09 f0       	breq	.+2      	; 0x1232 <__divsf3_pse+0x56>
    1230:	bb 0b       	sbc	r27, r27
    1232:	80 2d       	mov	r24, r0
    1234:	bf 01       	movw	r22, r30
    1236:	ff 27       	eor	r31, r31
    1238:	93 58       	subi	r25, 0x83	; 131
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	2a f0       	brmi	.+10     	; 0x1248 <__divsf3_pse+0x6c>
    123e:	9e 3f       	cpi	r25, 0xFE	; 254
    1240:	51 05       	cpc	r21, r1
    1242:	68 f0       	brcs	.+26     	; 0x125e <__divsf3_pse+0x82>
    1244:	92 c0       	rjmp	.+292    	; 0x136a <__fp_inf>
    1246:	dc c0       	rjmp	.+440    	; 0x1400 <__fp_szero>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	ec f3       	brlt	.-6      	; 0x1246 <__divsf3_pse+0x6a>
    124c:	98 3e       	cpi	r25, 0xE8	; 232
    124e:	dc f3       	brlt	.-10     	; 0x1246 <__divsf3_pse+0x6a>
    1250:	86 95       	lsr	r24
    1252:	77 95       	ror	r23
    1254:	67 95       	ror	r22
    1256:	b7 95       	ror	r27
    1258:	f7 95       	ror	r31
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__divsf3_pse+0x74>
    125e:	88 0f       	add	r24, r24
    1260:	91 1d       	adc	r25, r1
    1262:	96 95       	lsr	r25
    1264:	87 95       	ror	r24
    1266:	97 f9       	bld	r25, 7
    1268:	08 95       	ret
    126a:	e1 e0       	ldi	r30, 0x01	; 1
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	bb 1f       	adc	r27, r27
    1274:	62 17       	cp	r22, r18
    1276:	73 07       	cpc	r23, r19
    1278:	84 07       	cpc	r24, r20
    127a:	ba 07       	cpc	r27, r26
    127c:	20 f0       	brcs	.+8      	; 0x1286 <__divsf3_pse+0xaa>
    127e:	62 1b       	sub	r22, r18
    1280:	73 0b       	sbc	r23, r19
    1282:	84 0b       	sbc	r24, r20
    1284:	ba 0b       	sbc	r27, r26
    1286:	ee 1f       	adc	r30, r30
    1288:	88 f7       	brcc	.-30     	; 0x126c <__divsf3_pse+0x90>
    128a:	e0 95       	com	r30
    128c:	08 95       	ret

0000128e <__fixsfsi>:
    128e:	04 d0       	rcall	.+8      	; 0x1298 <__fixunssfsi>
    1290:	68 94       	set
    1292:	b1 11       	cpse	r27, r1
    1294:	b5 c0       	rjmp	.+362    	; 0x1400 <__fp_szero>
    1296:	08 95       	ret

00001298 <__fixunssfsi>:
    1298:	98 d0       	rcall	.+304    	; 0x13ca <__fp_splitA>
    129a:	88 f0       	brcs	.+34     	; 0x12be <__fixunssfsi+0x26>
    129c:	9f 57       	subi	r25, 0x7F	; 127
    129e:	90 f0       	brcs	.+36     	; 0x12c4 <__fixunssfsi+0x2c>
    12a0:	b9 2f       	mov	r27, r25
    12a2:	99 27       	eor	r25, r25
    12a4:	b7 51       	subi	r27, 0x17	; 23
    12a6:	a0 f0       	brcs	.+40     	; 0x12d0 <__fixunssfsi+0x38>
    12a8:	d1 f0       	breq	.+52     	; 0x12de <__fixunssfsi+0x46>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	1a f0       	brmi	.+6      	; 0x12ba <__fixunssfsi+0x22>
    12b4:	ba 95       	dec	r27
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__fixunssfsi+0x12>
    12b8:	12 c0       	rjmp	.+36     	; 0x12de <__fixunssfsi+0x46>
    12ba:	b1 30       	cpi	r27, 0x01	; 1
    12bc:	81 f0       	breq	.+32     	; 0x12de <__fixunssfsi+0x46>
    12be:	9f d0       	rcall	.+318    	; 0x13fe <__fp_zero>
    12c0:	b1 e0       	ldi	r27, 0x01	; 1
    12c2:	08 95       	ret
    12c4:	9c c0       	rjmp	.+312    	; 0x13fe <__fp_zero>
    12c6:	67 2f       	mov	r22, r23
    12c8:	78 2f       	mov	r23, r24
    12ca:	88 27       	eor	r24, r24
    12cc:	b8 5f       	subi	r27, 0xF8	; 248
    12ce:	39 f0       	breq	.+14     	; 0x12de <__fixunssfsi+0x46>
    12d0:	b9 3f       	cpi	r27, 0xF9	; 249
    12d2:	cc f3       	brlt	.-14     	; 0x12c6 <__fixunssfsi+0x2e>
    12d4:	86 95       	lsr	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b3 95       	inc	r27
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <__fixunssfsi+0x3c>
    12de:	3e f4       	brtc	.+14     	; 0x12ee <__fixunssfsi+0x56>
    12e0:	90 95       	com	r25
    12e2:	80 95       	com	r24
    12e4:	70 95       	com	r23
    12e6:	61 95       	neg	r22
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	08 95       	ret

000012f0 <__floatunsisf>:
    12f0:	e8 94       	clt
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <__floatsisf+0x12>

000012f4 <__floatsisf>:
    12f4:	97 fb       	bst	r25, 7
    12f6:	3e f4       	brtc	.+14     	; 0x1306 <__floatsisf+0x12>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	99 23       	and	r25, r25
    1308:	a9 f0       	breq	.+42     	; 0x1334 <__floatsisf+0x40>
    130a:	f9 2f       	mov	r31, r25
    130c:	96 e9       	ldi	r25, 0x96	; 150
    130e:	bb 27       	eor	r27, r27
    1310:	93 95       	inc	r25
    1312:	f6 95       	lsr	r31
    1314:	87 95       	ror	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b7 95       	ror	r27
    131c:	f1 11       	cpse	r31, r1
    131e:	f8 cf       	rjmp	.-16     	; 0x1310 <__floatsisf+0x1c>
    1320:	fa f4       	brpl	.+62     	; 0x1360 <__floatsisf+0x6c>
    1322:	bb 0f       	add	r27, r27
    1324:	11 f4       	brne	.+4      	; 0x132a <__floatsisf+0x36>
    1326:	60 ff       	sbrs	r22, 0
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <__floatsisf+0x6c>
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <__floatsisf+0x6c>
    1334:	88 23       	and	r24, r24
    1336:	11 f0       	breq	.+4      	; 0x133c <__floatsisf+0x48>
    1338:	96 e9       	ldi	r25, 0x96	; 150
    133a:	11 c0       	rjmp	.+34     	; 0x135e <__floatsisf+0x6a>
    133c:	77 23       	and	r23, r23
    133e:	21 f0       	breq	.+8      	; 0x1348 <__floatsisf+0x54>
    1340:	9e e8       	ldi	r25, 0x8E	; 142
    1342:	87 2f       	mov	r24, r23
    1344:	76 2f       	mov	r23, r22
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <__floatsisf+0x5e>
    1348:	66 23       	and	r22, r22
    134a:	71 f0       	breq	.+28     	; 0x1368 <__floatsisf+0x74>
    134c:	96 e8       	ldi	r25, 0x86	; 134
    134e:	86 2f       	mov	r24, r22
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	2a f0       	brmi	.+10     	; 0x1360 <__floatsisf+0x6c>
    1356:	9a 95       	dec	r25
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	da f7       	brpl	.-10     	; 0x1356 <__floatsisf+0x62>
    1360:	88 0f       	add	r24, r24
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	97 f9       	bld	r25, 7
    1368:	08 95       	ret

0000136a <__fp_inf>:
    136a:	97 f9       	bld	r25, 7
    136c:	9f 67       	ori	r25, 0x7F	; 127
    136e:	80 e8       	ldi	r24, 0x80	; 128
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	08 95       	ret

00001376 <__fp_nan>:
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	80 ec       	ldi	r24, 0xC0	; 192
    137a:	08 95       	ret

0000137c <__fp_pscA>:
    137c:	00 24       	eor	r0, r0
    137e:	0a 94       	dec	r0
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	18 06       	cpc	r1, r24
    1386:	09 06       	cpc	r0, r25
    1388:	08 95       	ret

0000138a <__fp_pscB>:
    138a:	00 24       	eor	r0, r0
    138c:	0a 94       	dec	r0
    138e:	12 16       	cp	r1, r18
    1390:	13 06       	cpc	r1, r19
    1392:	14 06       	cpc	r1, r20
    1394:	05 06       	cpc	r0, r21
    1396:	08 95       	ret

00001398 <__fp_round>:
    1398:	09 2e       	mov	r0, r25
    139a:	03 94       	inc	r0
    139c:	00 0c       	add	r0, r0
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0xc>
    13a0:	88 23       	and	r24, r24
    13a2:	52 f0       	brmi	.+20     	; 0x13b8 <__fp_round+0x20>
    13a4:	bb 0f       	add	r27, r27
    13a6:	40 f4       	brcc	.+16     	; 0x13b8 <__fp_round+0x20>
    13a8:	bf 2b       	or	r27, r31
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <__fp_round+0x18>
    13ac:	60 ff       	sbrs	r22, 0
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <__fp_round+0x20>
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	08 95       	ret

000013ba <__fp_split3>:
    13ba:	57 fd       	sbrc	r21, 7
    13bc:	90 58       	subi	r25, 0x80	; 128
    13be:	44 0f       	add	r20, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	59 f0       	breq	.+22     	; 0x13da <__fp_splitA+0x10>
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	71 f0       	breq	.+28     	; 0x13e4 <__fp_splitA+0x1a>
    13c8:	47 95       	ror	r20

000013ca <__fp_splitA>:
    13ca:	88 0f       	add	r24, r24
    13cc:	97 fb       	bst	r25, 7
    13ce:	99 1f       	adc	r25, r25
    13d0:	61 f0       	breq	.+24     	; 0x13ea <__fp_splitA+0x20>
    13d2:	9f 3f       	cpi	r25, 0xFF	; 255
    13d4:	79 f0       	breq	.+30     	; 0x13f4 <__fp_splitA+0x2a>
    13d6:	87 95       	ror	r24
    13d8:	08 95       	ret
    13da:	12 16       	cp	r1, r18
    13dc:	13 06       	cpc	r1, r19
    13de:	14 06       	cpc	r1, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	f2 cf       	rjmp	.-28     	; 0x13c8 <__fp_split3+0xe>
    13e4:	46 95       	lsr	r20
    13e6:	f1 df       	rcall	.-30     	; 0x13ca <__fp_splitA>
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <__fp_splitA+0x30>
    13ea:	16 16       	cp	r1, r22
    13ec:	17 06       	cpc	r1, r23
    13ee:	18 06       	cpc	r1, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	f1 cf       	rjmp	.-30     	; 0x13d6 <__fp_splitA+0xc>
    13f4:	86 95       	lsr	r24
    13f6:	71 05       	cpc	r23, r1
    13f8:	61 05       	cpc	r22, r1
    13fa:	08 94       	sec
    13fc:	08 95       	ret

000013fe <__fp_zero>:
    13fe:	e8 94       	clt

00001400 <__fp_szero>:
    1400:	bb 27       	eor	r27, r27
    1402:	66 27       	eor	r22, r22
    1404:	77 27       	eor	r23, r23
    1406:	cb 01       	movw	r24, r22
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret

0000140c <__mulsf3>:
    140c:	0b d0       	rcall	.+22     	; 0x1424 <__mulsf3x>
    140e:	c4 cf       	rjmp	.-120    	; 0x1398 <__fp_round>
    1410:	b5 df       	rcall	.-150    	; 0x137c <__fp_pscA>
    1412:	28 f0       	brcs	.+10     	; 0x141e <__mulsf3+0x12>
    1414:	ba df       	rcall	.-140    	; 0x138a <__fp_pscB>
    1416:	18 f0       	brcs	.+6      	; 0x141e <__mulsf3+0x12>
    1418:	95 23       	and	r25, r21
    141a:	09 f0       	breq	.+2      	; 0x141e <__mulsf3+0x12>
    141c:	a6 cf       	rjmp	.-180    	; 0x136a <__fp_inf>
    141e:	ab cf       	rjmp	.-170    	; 0x1376 <__fp_nan>
    1420:	11 24       	eor	r1, r1
    1422:	ee cf       	rjmp	.-36     	; 0x1400 <__fp_szero>

00001424 <__mulsf3x>:
    1424:	ca df       	rcall	.-108    	; 0x13ba <__fp_split3>
    1426:	a0 f3       	brcs	.-24     	; 0x1410 <__mulsf3+0x4>

00001428 <__mulsf3_pse>:
    1428:	95 9f       	mul	r25, r21
    142a:	d1 f3       	breq	.-12     	; 0x1420 <__mulsf3+0x14>
    142c:	95 0f       	add	r25, r21
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	55 1f       	adc	r21, r21
    1432:	62 9f       	mul	r22, r18
    1434:	f0 01       	movw	r30, r0
    1436:	72 9f       	mul	r23, r18
    1438:	bb 27       	eor	r27, r27
    143a:	f0 0d       	add	r31, r0
    143c:	b1 1d       	adc	r27, r1
    143e:	63 9f       	mul	r22, r19
    1440:	aa 27       	eor	r26, r26
    1442:	f0 0d       	add	r31, r0
    1444:	b1 1d       	adc	r27, r1
    1446:	aa 1f       	adc	r26, r26
    1448:	64 9f       	mul	r22, r20
    144a:	66 27       	eor	r22, r22
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	66 1f       	adc	r22, r22
    1452:	82 9f       	mul	r24, r18
    1454:	22 27       	eor	r18, r18
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	62 1f       	adc	r22, r18
    145c:	73 9f       	mul	r23, r19
    145e:	b0 0d       	add	r27, r0
    1460:	a1 1d       	adc	r26, r1
    1462:	62 1f       	adc	r22, r18
    1464:	83 9f       	mul	r24, r19
    1466:	a0 0d       	add	r26, r0
    1468:	61 1d       	adc	r22, r1
    146a:	22 1f       	adc	r18, r18
    146c:	74 9f       	mul	r23, r20
    146e:	33 27       	eor	r19, r19
    1470:	a0 0d       	add	r26, r0
    1472:	61 1d       	adc	r22, r1
    1474:	23 1f       	adc	r18, r19
    1476:	84 9f       	mul	r24, r20
    1478:	60 0d       	add	r22, r0
    147a:	21 1d       	adc	r18, r1
    147c:	82 2f       	mov	r24, r18
    147e:	76 2f       	mov	r23, r22
    1480:	6a 2f       	mov	r22, r26
    1482:	11 24       	eor	r1, r1
    1484:	9f 57       	subi	r25, 0x7F	; 127
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	8a f0       	brmi	.+34     	; 0x14ac <__mulsf3_pse+0x84>
    148a:	e1 f0       	breq	.+56     	; 0x14c4 <__mulsf3_pse+0x9c>
    148c:	88 23       	and	r24, r24
    148e:	4a f0       	brmi	.+18     	; 0x14a2 <__mulsf3_pse+0x7a>
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	bb 1f       	adc	r27, r27
    1496:	66 1f       	adc	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__mulsf3_pse+0x64>
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	51 05       	cpc	r21, r1
    14a6:	70 f0       	brcs	.+28     	; 0x14c4 <__mulsf3_pse+0x9c>
    14a8:	60 cf       	rjmp	.-320    	; 0x136a <__fp_inf>
    14aa:	aa cf       	rjmp	.-172    	; 0x1400 <__fp_szero>
    14ac:	5f 3f       	cpi	r21, 0xFF	; 255
    14ae:	ec f3       	brlt	.-6      	; 0x14aa <__mulsf3_pse+0x82>
    14b0:	98 3e       	cpi	r25, 0xE8	; 232
    14b2:	dc f3       	brlt	.-10     	; 0x14aa <__mulsf3_pse+0x82>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	e7 95       	ror	r30
    14c0:	9f 5f       	subi	r25, 0xFF	; 255
    14c2:	c1 f7       	brne	.-16     	; 0x14b4 <__mulsf3_pse+0x8c>
    14c4:	fe 2b       	or	r31, r30
    14c6:	88 0f       	add	r24, r24
    14c8:	91 1d       	adc	r25, r1
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret

000014d2 <__divmodhi4>:
    14d2:	97 fb       	bst	r25, 7
    14d4:	07 2e       	mov	r0, r23
    14d6:	16 f4       	brtc	.+4      	; 0x14dc <__divmodhi4+0xa>
    14d8:	00 94       	com	r0
    14da:	06 d0       	rcall	.+12     	; 0x14e8 <__divmodhi4_neg1>
    14dc:	77 fd       	sbrc	r23, 7
    14de:	08 d0       	rcall	.+16     	; 0x14f0 <__divmodhi4_neg2>
    14e0:	0b d0       	rcall	.+22     	; 0x14f8 <__udivmodhi4>
    14e2:	07 fc       	sbrc	r0, 7
    14e4:	05 d0       	rcall	.+10     	; 0x14f0 <__divmodhi4_neg2>
    14e6:	3e f4       	brtc	.+14     	; 0x14f6 <__divmodhi4_exit>

000014e8 <__divmodhi4_neg1>:
    14e8:	90 95       	com	r25
    14ea:	81 95       	neg	r24
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__divmodhi4_neg2>:
    14f0:	70 95       	com	r23
    14f2:	61 95       	neg	r22
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255

000014f6 <__divmodhi4_exit>:
    14f6:	08 95       	ret

000014f8 <__udivmodhi4>:
    14f8:	aa 1b       	sub	r26, r26
    14fa:	bb 1b       	sub	r27, r27
    14fc:	51 e1       	ldi	r21, 0x11	; 17
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <__udivmodhi4_ep>

00001500 <__udivmodhi4_loop>:
    1500:	aa 1f       	adc	r26, r26
    1502:	bb 1f       	adc	r27, r27
    1504:	a6 17       	cp	r26, r22
    1506:	b7 07       	cpc	r27, r23
    1508:	10 f0       	brcs	.+4      	; 0x150e <__udivmodhi4_ep>
    150a:	a6 1b       	sub	r26, r22
    150c:	b7 0b       	sbc	r27, r23

0000150e <__udivmodhi4_ep>:
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	5a 95       	dec	r21
    1514:	a9 f7       	brne	.-22     	; 0x1500 <__udivmodhi4_loop>
    1516:	80 95       	com	r24
    1518:	90 95       	com	r25
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	08 95       	ret

00001520 <_exit>:
    1520:	f8 94       	cli

00001522 <__stop_program>:
    1522:	ff cf       	rjmp	.-2      	; 0x1522 <__stop_program>
